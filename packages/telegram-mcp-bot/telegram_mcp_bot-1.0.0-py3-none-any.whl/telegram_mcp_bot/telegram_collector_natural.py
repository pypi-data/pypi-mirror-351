#!/usr/bin/env python3
"""
–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π Telegram –∞–≥–µ–Ω—Ç-–∫–æ–ª–ª–µ–∫—Ç–æ—Ä —Å MCP
–ü–æ–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
"""

import asyncio
import logging
import os
import re
import uuid
from datetime import datetime
from urllib.parse import urlparse

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

from agent_runner import setup_agent

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GROUP_CHAT_ID = os.getenv("GROUP_CHAT_ID", "-4864366522")

if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∞–≥–µ–Ω—Ç–∞
agent_runner = None

def extract_urls(text: str) -> list[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
    return re.findall(url_pattern, text)

def is_valid_url(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –≤–∞–ª–∏–¥–Ω—ã–º"""
    try:
        result = urlparse(url)
        return all([result.scheme, result.netloc])
    except:
        return False

async def process_link_naturally(url: str, metadata: dict) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º —á–µ—Ä–µ–∑ MCP"""
    try:
        thread_id = str(uuid.uuid4())
        
        # –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        prompt = f"""–ú–Ω–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É –∏–∑ Telegram –≥—Ä—É–ø–ø—ã –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.

–°—Å—ã–ª–∫–∞: {url}

–ó–∞–¥–∞—á–∞:
- –ü–µ—Ä–µ–π–¥–∏ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∏ –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
- –°–æ—Ö—Ä–∞–Ω–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ ChromaDB –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é "telegram_group_messages"
- –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {metadata}

–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –∏ –≤—ã–ø–æ–ª–Ω–∏ –µ—ë."""

        result = await agent_runner(prompt, thread_id=thread_id)
        return result
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏ {url}: {str(e)}"
        logger.error(error_msg)
        return error_msg

async def process_text_naturally(text: str, metadata: dict) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º —á–µ—Ä–µ–∑ MCP"""
    try:
        thread_id = str(uuid.uuid4())
        
        # –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        prompt = f"""–ú–Ω–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram –≥—Ä—É–ø–ø—ã.

–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: "{text}"

–ó–∞–¥–∞—á–∞:
- –°–æ—Ö—Ä–∞–Ω–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –≤ ChromaDB –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é "telegram_group_messages"
- –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata}

–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω–∏ –∑–∞–¥–∞—á—É."""

        result = await agent_runner(prompt, thread_id=thread_id)
        return result
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}"
        logger.error(error_msg)
        return error_msg

@dp.message()
async def handle_group_message(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø—ã
    if str(message.chat.id) != str(GROUP_CHAT_ID):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
    if message.chat.type not in ['group', 'supergroup']:
        return
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
    if message.from_user.is_bot:
        return
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã
    if not message.text or message.text.startswith('/'):
        return
    
    logger.info(f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username}: {message.text[:100]}...")
    
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        base_metadata = {
            "source": "telegram_group",
            "chat_id": str(message.chat.id),
            "chat_title": message.chat.title or "Unknown",
            "user_id": str(message.from_user.id),
            "username": message.from_user.username or "unknown",
            "message_id": str(message.message_id),
            "timestamp": datetime.now().isoformat(),
        }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        urls = extract_urls(message.text)
        
        if urls:
            logger.info(f"üîó –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(urls)}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Å—ã–ª–∫—É
            for i, url in enumerate(urls):
                if not is_valid_url(url):
                    continue
                    
                logger.info(f"üåê –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É {i+1}: {url}")
                
                # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Å—ã–ª–∫–∏
                link_metadata = {
                    **base_metadata,
                    "message_type": "url",
                    "original_url": url,
                    "original_message": message.text
                }
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                result = await process_link_naturally(url, link_metadata)
                logger.info(f"‚úÖ –°—Å—ã–ª–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {result[:100]}...")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Å—ã–ª–∫–∞–º–∏
                if i < len(urls) - 1:
                    await asyncio.sleep(2)
        else:
            logger.info("üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            text_metadata = {
                **base_metadata,
                "message_type": "text"
            }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
            result = await process_text_naturally(message.text, text_metadata)
            logger.info(f"‚úÖ –¢–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {result[:100]}...")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@dp.message(Command("status"))
async def status_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞"""
    if message.chat.type in ['group', 'supergroup']:
        await message.reply(
            f"ü§ñ Natural MCP Collector –∞–∫—Ç–∏–≤–µ–Ω!\n"
            f"üìä –ú–æ–Ω–∏—Ç–æ—Ä—é –≥—Ä—É–ø–ø—É: {message.chat.title}\n"
            f"üÜî Chat ID: {message.chat.id}\n"
            f"üß† –ò—Å–ø–æ–ª—å–∑—É—é MCP —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤\n"
            f"üîß –î–æ—Å—Ç—É–ø–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –±—Ä–∞—É–∑–µ—Ä–∞ –∏ ChromaDB"
        )

@dp.message(Command("stats"))
async def stats_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ChromaDB"""
    if message.chat.type in ['group', 'supergroup']:
        try:
            thread_id = str(uuid.uuid4())
            
            # –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            prompt = """–ú–Ω–µ –Ω—É–∂–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ChromaDB.

–ó–∞–¥–∞—á–∞:
- –ü–æ–ª—É—á–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π –≤ ChromaDB
- –î–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
- –ü—Ä–µ–¥—Å—Ç–∞–≤—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ

–ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""

            response = await agent_runner(prompt, thread_id=thread_id)
            await message.reply(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ChromaDB:\n{response[:1000]}...")
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def main():
    """–ó–∞–ø—É—Å–∫ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ MCP Telegram –∞–≥–µ–Ω—Ç–∞-–∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞"""
    global agent_runner
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Natural MCP Telegram Collector...")
    logger.info("üß† –ê–≥–µ–Ω—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
    
    if GROUP_CHAT_ID:
        logger.info(f"üéØ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø—ã —Å ID: {GROUP_CHAT_ID}")
    else:
        logger.info("‚ö†Ô∏è GROUP_CHAT_ID –Ω–µ —É–∫–∞–∑–∞–Ω - –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤—Å–µ –≥—Ä—É–ø–ø—ã")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MCP –∞–≥–µ–Ω—Ç–∞
    async with setup_agent() as agent:
        agent_runner = agent
        logger.info("‚úÖ MCP –∞–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        logger.info("üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /status, /stats")
        logger.info("ü§ñ Natural MCP Collector –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        logger.info("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        logger.info("üõë –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        try:
            await dp.start_polling(bot)
        except KeyboardInterrupt:
            logger.info("\nüëã Natural MCP Collector –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main()) 