#!/usr/bin/env python3
"""
Telegram –∞–≥–µ–Ω—Ç-–∫–æ–ª–ª–µ–∫—Ç–æ—Ä —Å –ø—Ä—è–º—ã–º –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ ChromaDB
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç MCP —Ç–æ–ª—å–∫–æ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞, ChromaDB - –Ω–∞–ø—Ä—è–º—É—é
"""

import asyncio
import logging
import os
import re
import uuid
import chromadb
from datetime import datetime
from urllib.parse import urlparse

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

from .agent_runner_browser_only import setup_agent

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GROUP_CHAT_ID = os.getenv("GROUP_CHAT_ID", "-4864366522")

if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")

class TelegramCollectorDirect:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞-–∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞"""
    
    def __init__(self):
        self.agent_runner = None
        self.chroma_client = None
        self.chroma_collection = None
        self.group_chat_id = GROUP_CHAT_ID
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞"""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Direct Telegram Collector...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ChromaDB –Ω–∞–ø—Ä—è–º—É—é
        try:
            self.chroma_client = chromadb.PersistentClient(path='./chroma')
            self.chroma_collection = self.chroma_client.get_collection("telegram_group_messages")
            logger.info("‚úÖ ChromaDB –ø–æ–¥–∫–ª—é—á–µ–Ω –Ω–∞–ø—Ä—è–º—É—é!")
            logger.info(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {self.chroma_collection.count()}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ChromaDB: {e}")
            raise
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MCP –∞–≥–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞)
        self.agent_context = setup_agent()
        self.agent_runner = await self.agent_context.__aenter__()
        logger.info("‚úÖ MCP –∞–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—Ç–æ–ª—å–∫–æ –±—Ä–∞—É–∑–µ—Ä)!")
        
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if hasattr(self, 'agent_context') and self.agent_context:
            await self.agent_context.__aexit__(None, None, None)
            
    def extract_urls(self, text: str) -> list[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
        return re.findall(url_pattern, text)

    def is_valid_url(self, url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –≤–∞–ª–∏–¥–Ω—ã–º"""
        try:
            result = urlparse(url)
            return all([result.scheme, result.netloc])
        except:
            return False

    def save_to_chromadb(self, text: str, metadata: dict) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ ChromaDB –Ω–∞–ø—Ä—è–º—É—é"""
        try:
            doc_id = str(uuid.uuid4())
            
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ ChromaDB:")
            logger.info(f"   –¢–µ–∫—Å—Ç: {text[:100]}...")
            logger.info(f"   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata}")
            
            self.chroma_collection.add(
                documents=[text],
                metadatas=[metadata],
                ids=[doc_id]
            )
            
            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ ChromaDB —Å ID: {doc_id}")
            return f"–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ ChromaDB (ID: {doc_id})"
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ ChromaDB: {str(e)}"
            logger.error(error_msg)
            return error_msg

    async def process_link_with_browser(self, url: str, metadata: dict) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ MCP –±—Ä–∞—É–∑–µ—Ä –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ ChromaDB –Ω–∞–ø—Ä—è–º—É—é"""
        try:
            thread_id = str(uuid.uuid4())
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º MCP —Ç–æ–ª—å–∫–æ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
            prompt = f"""–û–±—Ä–∞–±–æ—Ç–∞–π —ç—Ç—É —Å—Å—ã–ª–∫—É:

URL: {url}

–ó–∞–¥–∞—á–∞:
- –ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ
- –ü–æ–ª—É—á–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
- –í–µ—Ä–Ω–∏ –º–Ω–µ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ

–ù–ï —Å–æ—Ö—Ä–∞–Ω—è–π –≤ ChromaDB - —è —Å–¥–µ–ª–∞—é —ç—Ç–æ —Å–∞–º!"""

            logger.info(f"üåê –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ MCP –±—Ä–∞—É–∑–µ—Ä: {url}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–µ—Ä–µ–∑ MCP –±—Ä–∞—É–∑–µ—Ä
            content = await self.agent_runner(prompt, thread_id=thread_id)
            
            logger.info(f"üìÑ –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç: {content[:200]}...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ ChromaDB –Ω–∞–ø—Ä—è–º—É—é
            save_result = self.save_to_chromadb(content, metadata)
            
            return f"–°—Å—ã–ª–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —á–µ—Ä–µ–∑ MCP –±—Ä–∞—É–∑–µ—Ä –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {save_result}"
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏ {url}: {str(e)}"
            logger.error(error_msg)
            return error_msg

    async def process_text_direct(self, text: str, metadata: dict) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø—Ä—è–º—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ ChromaDB"""
        try:
            logger.info(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤ ChromaDB
            save_result = self.save_to_chromadb(text, metadata)
            
            return f"–¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {save_result}"
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}"
            logger.error(error_msg)
            return error_msg

    async def handle_message(self, message: types.Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø—ã
        if str(message.chat.id) != str(self.group_chat_id):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
        if message.chat.type not in ['group', 'supergroup']:
            return
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
        if message.from_user.is_bot:
            return
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã
        if not message.text or message.text.startswith('/'):
            return
        
        logger.info(f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username}: {message.text[:100]}...")
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            base_metadata = {
                "source": "telegram_direct",
                "chat_id": str(message.chat.id),
                "chat_title": message.chat.title or "Unknown",
                "user_id": str(message.from_user.id),
                "username": message.from_user.username or "unknown",
                "message_id": str(message.message_id),
                "timestamp": datetime.now().isoformat(),
            }
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            urls = self.extract_urls(message.text)
            
            if urls:
                logger.info(f"üîó –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(urls)}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Å—ã–ª–∫—É
                for i, url in enumerate(urls):
                    if not self.is_valid_url(url):
                        continue
                        
                    logger.info(f"üåê –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É {i+1}: {url}")
                    
                    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Å—ã–ª–∫–∏
                    link_metadata = {
                        **base_metadata,
                        "message_type": "url",
                        "original_url": url,
                        "original_message": message.text
                    }
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ MCP –±—Ä–∞—É–∑–µ—Ä + –ø—Ä—è–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                    result = await self.process_link_with_browser(url, link_metadata)
                    logger.info(f"‚úÖ –°—Å—ã–ª–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {result[:100]}...")
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Å—ã–ª–∫–∞–º–∏
                    if i < len(urls) - 1:
                        await asyncio.sleep(2)
            else:
                logger.info("üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                
                # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
                text_metadata = {
                    **base_metadata,
                    "message_type": "text"
                }
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å –ø—Ä—è–º—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
                result = await self.process_text_direct(message.text, text_metadata)
                logger.info(f"‚úÖ –¢–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {result[:100]}...")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def handle_status_command(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞"""
        try:
            count = self.chroma_collection.count()
            await message.reply(
                f"ü§ñ Direct Telegram Collector –∞–∫—Ç–∏–≤–µ–Ω!\n"
                f"üìä –ú–æ–Ω–∏—Ç–æ—Ä—é –≥—Ä—É–ø–ø—É: {message.chat.title}\n"
                f"üÜî Chat ID: {message.chat.id}\n"
                f"üîß MCP –±—Ä–∞—É–∑–µ—Ä: {'‚úÖ –ì–æ—Ç–æ–≤' if self.agent_runner else '‚ùå –ù–µ –≥–æ—Ç–æ–≤'}\n"
                f"üíæ ChromaDB: ‚úÖ –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n"
                f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {count}"
            )
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}")

    async def handle_stats_command(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ChromaDB"""
        try:
            count = self.chroma_collection.count()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            results = self.chroma_collection.get(limit=5, include=['metadatas'])
            
            stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ChromaDB:\n"
            stats_text += f"üìÑ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {count}\n\n"
            
            if results['metadatas']:
                stats_text += "üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n"
                for i, meta in enumerate(results['metadatas'][:3], 1):
                    source = meta.get('source', 'unknown')
                    msg_type = meta.get('message_type', 'unknown')
                    timestamp = meta.get('timestamp', 'unknown')
                    stats_text += f"{i}. {source} ({msg_type}) - {timestamp[:16]}\n"
            
            await message.reply(stats_text)
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
agent_runner = None
chroma_client = None
chroma_collection = None

def extract_urls(text: str) -> list[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
    return re.findall(url_pattern, text)

def is_valid_url(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –≤–∞–ª–∏–¥–Ω—ã–º"""
    try:
        result = urlparse(url)
        return all([result.scheme, result.netloc])
    except:
        return False

def save_to_chromadb(text: str, metadata: dict) -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ ChromaDB –Ω–∞–ø—Ä—è–º—É—é"""
    try:
        doc_id = str(uuid.uuid4())
        
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ ChromaDB:")
        logger.info(f"   –¢–µ–∫—Å—Ç: {text[:100]}...")
        logger.info(f"   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata}")
        
        chroma_collection.add(
            documents=[text],
            metadatas=[metadata],
            ids=[doc_id]
        )
        
        logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ ChromaDB —Å ID: {doc_id}")
        return f"–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ ChromaDB (ID: {doc_id})"
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ ChromaDB: {str(e)}"
        logger.error(error_msg)
        return error_msg

async def process_link_with_browser(url: str, metadata: dict) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ MCP –±—Ä–∞—É–∑–µ—Ä –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ ChromaDB –Ω–∞–ø—Ä—è–º—É—é"""
    try:
        thread_id = str(uuid.uuid4())
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º MCP —Ç–æ–ª—å–∫–æ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
        prompt = f"""–û–±—Ä–∞–±–æ—Ç–∞–π —ç—Ç—É —Å—Å—ã–ª–∫—É:

URL: {url}

–ó–∞–¥–∞—á–∞:
- –ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ
- –ü–æ–ª—É—á–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
- –í–µ—Ä–Ω–∏ –º–Ω–µ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ

–ù–ï —Å–æ—Ö—Ä–∞–Ω—è–π –≤ ChromaDB - —è —Å–¥–µ–ª–∞—é —ç—Ç–æ —Å–∞–º!"""

        logger.info(f"üåê –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ MCP –±—Ä–∞—É–∑–µ—Ä: {url}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–µ—Ä–µ–∑ MCP –±—Ä–∞—É–∑–µ—Ä
        content = await agent_runner(prompt, thread_id=thread_id)
        
        logger.info(f"üìÑ –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç: {content[:200]}...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ ChromaDB –Ω–∞–ø—Ä—è–º—É—é
        save_result = save_to_chromadb(content, metadata)
        
        return f"–°—Å—ã–ª–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —á–µ—Ä–µ–∑ MCP –±—Ä–∞—É–∑–µ—Ä –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {save_result}"
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏ {url}: {str(e)}"
        logger.error(error_msg)
        return error_msg

async def process_text_direct(text: str, metadata: dict) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø—Ä—è–º—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ ChromaDB"""
    try:
        logger.info(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤ ChromaDB
        save_result = save_to_chromadb(text, metadata)
        
        return f"–¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {save_result}"
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}"
        logger.error(error_msg)
        return error_msg

@dp.message()
async def handle_group_message(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø—ã
    if str(message.chat.id) != str(GROUP_CHAT_ID):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
    if message.chat.type not in ['group', 'supergroup']:
        return
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
    if message.from_user.is_bot:
        return
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã
    if not message.text or message.text.startswith('/'):
        return
    
    logger.info(f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username}: {message.text[:100]}...")
    
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        base_metadata = {
            "source": "telegram_direct",
            "chat_id": str(message.chat.id),
            "chat_title": message.chat.title or "Unknown",
            "user_id": str(message.from_user.id),
            "username": message.from_user.username or "unknown",
            "message_id": str(message.message_id),
            "timestamp": datetime.now().isoformat(),
        }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        urls = extract_urls(message.text)
        
        if urls:
            logger.info(f"üîó –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(urls)}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Å—ã–ª–∫—É
            for i, url in enumerate(urls):
                if not is_valid_url(url):
                    continue
                    
                logger.info(f"üåê –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É {i+1}: {url}")
                
                # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Å—ã–ª–∫–∏
                link_metadata = {
                    **base_metadata,
                    "message_type": "url",
                    "original_url": url,
                    "original_message": message.text
                }
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ MCP –±—Ä–∞—É–∑–µ—Ä + –ø—Ä—è–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                result = await process_link_with_browser(url, link_metadata)
                logger.info(f"‚úÖ –°—Å—ã–ª–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {result[:100]}...")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Å—ã–ª–∫–∞–º–∏
                if i < len(urls) - 1:
                    await asyncio.sleep(2)
        else:
            logger.info("üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            text_metadata = {
                **base_metadata,
                "message_type": "text"
            }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å –ø—Ä—è–º—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            result = await process_text_direct(message.text, text_metadata)
            logger.info(f"‚úÖ –¢–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {result[:100]}...")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@dp.message(Command("status"))
async def status_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞"""
    if message.chat.type in ['group', 'supergroup']:
        try:
            count = chroma_collection.count()
            await message.reply(
                f"ü§ñ Direct Telegram Collector –∞–∫—Ç–∏–≤–µ–Ω!\n"
                f"üìä –ú–æ–Ω–∏—Ç–æ—Ä—é –≥—Ä—É–ø–ø—É: {message.chat.title}\n"
                f"üÜî Chat ID: {message.chat.id}\n"
                f"üîß MCP –±—Ä–∞—É–∑–µ—Ä: {'‚úÖ –ì–æ—Ç–æ–≤' if agent_runner else '‚ùå –ù–µ –≥–æ—Ç–æ–≤'}\n"
                f"üíæ ChromaDB: ‚úÖ –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n"
                f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {count}"
            )
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}")

@dp.message(Command("stats"))
async def stats_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ChromaDB"""
    if message.chat.type in ['group', 'supergroup']:
        try:
            count = chroma_collection.count()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            results = chroma_collection.get(limit=5, include=['metadatas'])
            
            stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ChromaDB:\n"
            stats_text += f"üìÑ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {count}\n\n"
            
            if results['metadatas']:
                stats_text += "üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n"
                for i, meta in enumerate(results['metadatas'][:3], 1):
                    source = meta.get('source', 'unknown')
                    msg_type = meta.get('message_type', 'unknown')
                    timestamp = meta.get('timestamp', 'unknown')
                    stats_text += f"{i}. {source} ({msg_type}) - {timestamp[:16]}\n"
            
            await message.reply(stats_text)
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def main():
    """–ó–∞–ø—É—Å–∫ Telegram –∞–≥–µ–Ω—Ç–∞ —Å –ø—Ä—è–º—ã–º ChromaDB"""
    global agent_runner, chroma_client, chroma_collection
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Direct Telegram Collector...")
    logger.info("üîß MCP –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ + –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ ChromaDB")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ChromaDB –Ω–∞–ø—Ä—è–º—É—é
    try:
        chroma_client = chromadb.PersistentClient(path='./chroma')
        chroma_collection = chroma_client.get_collection("telegram_group_messages")
        logger.info("‚úÖ ChromaDB –ø–æ–¥–∫–ª—é—á–µ–Ω –Ω–∞–ø—Ä—è–º—É—é!")
        logger.info(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {chroma_collection.count()}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ChromaDB: {e}")
        return
    
    if GROUP_CHAT_ID:
        logger.info(f"üéØ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø—ã —Å ID: {GROUP_CHAT_ID}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MCP –∞–≥–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞)
    async with setup_agent() as agent:
        agent_runner = agent
        logger.info("‚úÖ MCP –∞–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—Ç–æ–ª—å–∫–æ –±—Ä–∞—É–∑–µ—Ä)!")
        logger.info("üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /status, /stats")
        logger.info("ü§ñ Direct Collector –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        try:
            await dp.start_polling(bot)
        except KeyboardInterrupt:
            logger.info("\nüëã Direct Collector –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main()) 