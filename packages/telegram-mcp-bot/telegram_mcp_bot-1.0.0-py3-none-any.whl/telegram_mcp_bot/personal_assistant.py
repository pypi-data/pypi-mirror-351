#!/usr/bin/env python3
"""
–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π RAG-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è Telegram
React-–∞–≥–µ–Ω—Ç —Å –ø–∞–º—è—Ç—å—é –¥–∏–∞–ª–æ–≥–æ–≤ –∏ —É–º–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG
"""

import asyncio
import logging
import os
import uuid
import chromadb
from datetime import datetime
from typing import Dict, Any, Optional

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from langchain_core.messages import HumanMessage, AIMessage, SystemMessage

from .agent_runner import setup_agent  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π MCP (—Å ChromaDB)

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
MAX_CONTEXT_LENGTH = 10  # –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
SUMMARIZE_THRESHOLD = 20  # –ö–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é

if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")

class PersonalAssistant:
    """–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å –ø–∞–º—è—Ç—å—é –∏ RAG"""
    
    def __init__(self):
        self.agent_runner = None
        self.user_contexts: Dict[str, list] = {}  # –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã –ø–æ user_id
        self.agent_context = None
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ChromaDB
        self.chroma_client = None
        self.chroma_collection = None
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞"""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Personal RAG Assistant...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ChromaDB
        try:
            self.chroma_client = chromadb.PersistentClient(path='./chroma')
            self.chroma_collection = self.chroma_client.get_collection("telegram_group_messages")
            logger.info("‚úÖ ChromaDB –ø–æ–¥–∫–ª—é—á–µ–Ω –Ω–∞–ø—Ä—è–º—É—é!")
            logger.info(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {self.chroma_collection.count()}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ChromaDB: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MCP –∞–≥–µ–Ω—Ç–∞ (—Å –±—Ä–∞—É–∑–µ—Ä–æ–º)
        self.agent_context = setup_agent()
        self.agent_runner = await self.agent_context.__aenter__()
        logger.info("‚úÖ MCP –∞–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–±—Ä–∞—É–∑–µ—Ä + MCP ChromaDB)!")
        
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if hasattr(self, 'agent_context') and self.agent_context:
            await self.agent_context.__aexit__(None, None, None)
    
    def search_knowledge_base(self, query: str, n_results: int = 3) -> str:
        """–ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
        try:
            if not self.chroma_collection:
                return "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            
            results = self.chroma_collection.query(
                query_texts=[query],
                n_results=n_results,
                include=['documents', 'metadatas']
            )
            
            if not results['documents'][0]:
                return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            knowledge_text = "üîç –ù–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π:\n\n"
            for i, (doc, meta) in enumerate(zip(results['documents'][0], results['metadatas'][0]), 1):
                source = meta.get('source', 'unknown')
                url = meta.get('original_url', '')
                msg_type = meta.get('message_type', 'unknown')
                
                knowledge_text += f"{i}. –ò—Å—Ç–æ—á–Ω–∏–∫: {source} ({msg_type})\n"
                if url:
                    knowledge_text += f"   URL: {url}\n"
                knowledge_text += f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {doc[:300]}...\n\n"
            
            return knowledge_text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: {e}")
            return f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: {str(e)}"
    
    def get_user_context(self, user_id: str) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_contexts:
            self.user_contexts[user_id] = []
        return self.user_contexts[user_id]
    
    def add_to_context(self, user_id: str, message: dict):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        context = self.get_user_context(user_id)
        context.append(message)
        
        # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Å—É–º–º–∞—Ä–∏–∑–∏—Ä—É–µ–º
        if len(context) > SUMMARIZE_THRESHOLD:
            asyncio.create_task(self.summarize_context(user_id))
    
    async def summarize_context(self, user_id: str):
        """–°—É–º–º–∞—Ä–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—É—é —á–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        try:
            context = self.get_user_context(user_id)
            if len(context) <= MAX_CONTEXT_LENGTH:
                return
            
            # –ë–µ—Ä–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            old_messages = context[:-MAX_CONTEXT_LENGTH]
            recent_messages = context[-MAX_CONTEXT_LENGTH:]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            conversation_text = ""
            for msg in old_messages:
                role = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if msg["role"] == "user" else "–ü–æ–º–æ—â–Ω–∏–∫"
                conversation_text += f"{role}: {msg['content']}\n"
            
            # –°—É–º–º–∞—Ä–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞
            summary_prompt = f"""–°—É–º–º–∞—Ä–∏–∑–∏—Ä—É–π —ç—Ç—É –±–µ—Å–µ–¥—É –∫—Ä–∞—Ç–∫–æ, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã –∏ —Ñ–∞–∫—Ç—ã:

{conversation_text}

–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö."""

            thread_id = f"summary_{user_id}_{uuid.uuid4()}"
            summary = await self.agent_runner(summary_prompt, thread_id=thread_id)
            
            # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å—É–º–º–∞—Ä–Ω–æ–µ
            summary_message = {
                "role": "system",
                "content": f"–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –±–µ—Å–µ–¥—ã: {summary}",
                "timestamp": datetime.now().isoformat(),
                "type": "summary"
            }
            
            self.user_contexts[user_id] = [summary_message] + recent_messages
            logger.info(f"üìù –°—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {user_id}: {e}")
    
    async def process_message(self, user_id: str, message_text: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            user_message = {
                "role": "user",
                "content": message_text,
                "timestamp": datetime.now().isoformat()
            }
            self.add_to_context(user_id, user_message)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
            context = self.get_user_context(user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            context_text = ""
            for msg in context[:-1]:  # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—É—â–µ–µ)
                if msg["role"] == "user":
                    context_text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg['content']}\n"
                elif msg["role"] == "assistant":
                    context_text += f"–ü–æ–º–æ—â–Ω–∏–∫: {msg['content']}\n"
                elif msg["role"] == "system":
                    context_text += f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {msg['content']}\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
            search_keywords = ["github", "—Å—Å—ã–ª–∫", "—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä", "–∫–æ–¥", "–ø—Ä–æ–µ–∫—Ç", "–±–∞–∑–∞", "–Ω–∞–π–¥–∏", "–ø–æ–∏—Å–∫"]
            needs_search = any(keyword in message_text.lower() for keyword in search_keywords)
            
            knowledge_context = ""
            if needs_search:
                logger.info(f"üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {message_text}")
                knowledge_context = self.search_knowledge_base(message_text)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è React-–∞–≥–µ–Ω—Ç–∞
            prompt = f"""–¢—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram. 

–ö–û–ù–¢–ï–ö–°–¢ –ë–ï–°–ï–î–´:
{context_text}

–¢–ï–ö–£–©–ò–ô –í–û–ü–†–û–°: {message_text}

–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê –í –ë–ê–ó–ï –ó–ù–ê–ù–ò–ô:
{knowledge_context}

–£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º:
- browser_*: –≤–µ–±-–±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

–ò–ù–°–¢–†–£–ö–¶–ò–Ø:
1. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –±–µ—Å–µ–¥—ã - –æ—Ç–≤–µ—á–∞–π —Å—Ä–∞–∑—É
2. –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö –≤ –æ—Ç–≤–µ—Ç–µ
3. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–π –±—Ä–∞—É–∑–µ—Ä
4. –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É

–¢–≤–æ–π –æ—Ç–≤–µ—Ç:"""

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ React-–∞–≥–µ–Ω—Ç–∞
            thread_id = f"user_{user_id}"
            response = await self.agent_runner(prompt, thread_id=thread_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            assistant_message = {
                "role": "assistant", 
                "content": response,
                "timestamp": datetime.now().isoformat()
            }
            self.add_to_context(user_id, assistant_message)
            
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_id}: {e}")
            return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"

    async def handle_start_command(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º"""
        await message.reply(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫.\n\n"
            "–Ø –º–æ–≥—É:\n"
            "üîç –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π\n"
            "üí¨ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –±–µ—Å–µ–¥—ã\n"
            "üåê –ù–∞—Ö–æ–¥–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ\n\n"
            "–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!"
        )

    async def handle_clear_command(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–µ—Å–µ–¥—ã"""
        user_id = str(message.from_user.id)
        if user_id in self.user_contexts:
            self.user_contexts[user_id] = []
            await message.reply("üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã –æ—á–∏—â–µ–Ω!")
        else:
            await message.reply("–ö–æ–Ω—Ç–µ–∫—Å—Ç —É–∂–µ –ø—É—Å—Ç.")

    async def handle_context_command(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        user_id = str(message.from_user.id)
        context = self.get_user_context(user_id)
        context_info = f"üìä –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã:\n"
        context_info += f"üìÑ –°–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏: {len(context)}\n"
        context_info += f"üîÑ –õ–∏–º–∏—Ç: {MAX_CONTEXT_LENGTH} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        context_info += f"üìù –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏: {SUMMARIZE_THRESHOLD} —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"
        await message.reply(context_info)

    async def handle_message(self, message: types.Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
        if message.from_user.is_bot:
            return
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not message.text:
            return
        
        user_id = str(message.from_user.id)
        username = message.from_user.username or "unknown"
        
        logger.info(f"üí¨ –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username} (ID: {user_id}): {message.text[:100]}...")
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
            await message.bot.send_chat_action(message.chat.id, "typing")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞
            response = await self.process_message(user_id, message.text)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await message.reply(response)
            
            logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç @{username}: {e}")
            await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–º–æ—â–Ω–∏–∫–∞
personal_assistant = None

@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º"""
    if message.chat.type == 'private':
        await message.reply(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫.\n\n"
            "–Ø –º–æ–≥—É:\n"
            "üîç –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π\n"
            "üí¨ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –±–µ—Å–µ–¥—ã\n"
            "üåê –ù–∞—Ö–æ–¥–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ\n\n"
            "–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!"
        )

@dp.message(Command("clear"))
async def clear_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–µ—Å–µ–¥—ã"""
    if message.chat.type == 'private':
        user_id = str(message.from_user.id)
        if personal_assistant and user_id in personal_assistant.user_contexts:
            personal_assistant.user_contexts[user_id] = []
            await message.reply("üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã –æ—á–∏—â–µ–Ω!")
        else:
            await message.reply("–ö–æ–Ω—Ç–µ–∫—Å—Ç —É–∂–µ –ø—É—Å—Ç.")

@dp.message(Command("context"))
async def context_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    if message.chat.type == 'private':
        user_id = str(message.from_user.id)
        if personal_assistant:
            context = personal_assistant.get_user_context(user_id)
            context_info = f"üìä –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã:\n"
            context_info += f"üìÑ –°–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏: {len(context)}\n"
            context_info += f"üîÑ –õ–∏–º–∏—Ç: {MAX_CONTEXT_LENGTH} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            context_info += f"üìù –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏: {SUMMARIZE_THRESHOLD} —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"
            await message.reply(context_info)

@dp.message()
async def handle_private_message(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    # –¢–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.chat.type != 'private':
        return
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
    if message.from_user.is_bot:
        return
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if not message.text:
        return
    
    user_id = str(message.from_user.id)
    username = message.from_user.username or "unknown"
    
    logger.info(f"üí¨ –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username} (ID: {user_id}): {message.text[:100]}...")
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
        await bot.send_chat_action(message.chat.id, "typing")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞
        response = await personal_assistant.process_message(user_id, message.text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await message.reply(response)
        
        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç @{username}: {e}")
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def main():
    """–ó–∞–ø—É—Å–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞"""
    global personal_assistant
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Personal RAG Assistant...")
    logger.info("üß† React-–∞–≥–µ–Ω—Ç —Å –ø–∞–º—è—Ç—å—é –¥–∏–∞–ª–æ–≥–æ–≤ –∏ RAG")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MCP –∞–≥–µ–Ω—Ç–∞ (—Å ChromaDB –∏ –±—Ä–∞—É–∑–µ—Ä–æ–º)
    async with setup_agent() as agent:
        personal_assistant = PersonalAssistant()
        personal_assistant.agent_runner = agent
        
        logger.info("‚úÖ MCP –∞–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–±—Ä–∞—É–∑–µ—Ä + ChromaDB)!")
        logger.info("üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /clear, /context")
        logger.info("ü§ñ Personal Assistant –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        try:
            await dp.start_polling(bot)
        except KeyboardInterrupt:
            logger.info("\nüëã Personal Assistant –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main()) 