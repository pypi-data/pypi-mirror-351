#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –µ–¥–∏–Ω–æ–≥–æ –±–æ—Ç–∞
"""

import asyncio
import os
import chromadb
from datetime import datetime

async def check_unified_bot_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –µ–¥–∏–Ω–æ–≥–æ –±–æ—Ç–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –µ–¥–∏–Ω–æ–≥–æ Telegram –±–æ—Ç–∞...")
    print(f"‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    telegram_token = os.getenv("TELEGRAM_TOKEN")
    group_chat_id = os.getenv("GROUP_CHAT_ID")
    
    print(f"   TELEGRAM_TOKEN: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if telegram_token else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"   GROUP_CHAT_ID: {group_chat_id or '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ChromaDB
    print("üíæ –°—Ç–∞—Ç—É—Å ChromaDB:")
    try:
        chroma_client = chromadb.PersistentClient(path='./chroma')
        collections = chroma_client.list_collections()
        
        print(f"   –ö–æ–ª–ª–µ–∫—Ü–∏–π: {len(collections)}")
        for collection in collections:
            count = collection.count()
            print(f"   - {collection.name}: {count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
        try:
            main_collection = chroma_client.get_collection("telegram_group_messages")
            count = main_collection.count()
            print(f"   ‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è: {count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        except Exception as e:
            print(f"   ‚ùå –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ChromaDB: {e}")
    
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
    print("üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:")
    import subprocess
    try:
        result = subprocess.run(
            ["ps", "aux"], 
            capture_output=True, 
            text=True
        )
        
        lines = result.stdout.split('\n')
        bot_processes = [line for line in lines if 'python' in line and ('unified_bot' in line or 'main.py' in line or 'personal_assistant.py' in line)]
        
        if bot_processes:
            for process in bot_processes:
                if 'grep' not in process and process.strip():
                    print(f"   üì± {process.split()[-1]} (PID: {process.split()[1]})")
        else:
            print("   ‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–æ–≤")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
    
    print()
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    asyncio.run(check_unified_bot_status()) 