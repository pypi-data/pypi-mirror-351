# coding: utf-8

"""
    IIoT OpenAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 5.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from iiot_openapi.models.clean_settings import CleanSettings
from iiot_openapi.models.complex_setting import ComplexSetting
from iiot_openapi.models.event_gen_setting import EventGenSetting
from iiot_openapi.models.expression_settings import ExpressionSettings
from iiot_openapi.models.tag_matcher import TagMatcher
from typing import Optional, Set
from typing_extensions import Self

class AnalysisTask(BaseModel):
    """
    AnalysisTask
    """ # noqa: E501
    clean_settings: Optional[CleanSettings] = None
    event_class: Optional[StrictStr] = None
    event_gen_settings: Optional[EventGenSetting] = None
    complex_settings: Optional[ComplexSetting] = None
    expression_settings: Optional[ExpressionSettings] = None
    task_id: Optional[StrictStr] = None
    task_name: Optional[StrictStr] = None
    enabled: Optional[StrictBool] = None
    calc_type: Optional[StrictStr] = None
    schedule_type: Optional[StrictStr] = None
    period: Optional[StrictStr] = None
    tag_matchers: Optional[List[TagMatcher]] = None
    create_time: Optional[StrictStr] = None
    update_time: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["clean_settings", "event_class", "event_gen_settings", "complex_settings", "expression_settings", "task_id", "task_name", "enabled", "calc_type", "schedule_type", "period", "tag_matchers", "create_time", "update_time"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnalysisTask from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of clean_settings
        if self.clean_settings:
            _dict['clean_settings'] = self.clean_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of event_gen_settings
        if self.event_gen_settings:
            _dict['event_gen_settings'] = self.event_gen_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of complex_settings
        if self.complex_settings:
            _dict['complex_settings'] = self.complex_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of expression_settings
        if self.expression_settings:
            _dict['expression_settings'] = self.expression_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tag_matchers (list)
        _items = []
        if self.tag_matchers:
            for _item_tag_matchers in self.tag_matchers:
                if _item_tag_matchers:
                    _items.append(_item_tag_matchers.to_dict())
            _dict['tag_matchers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnalysisTask from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clean_settings": CleanSettings.from_dict(obj["clean_settings"]) if obj.get("clean_settings") is not None else None,
            "event_class": obj.get("event_class"),
            "event_gen_settings": EventGenSetting.from_dict(obj["event_gen_settings"]) if obj.get("event_gen_settings") is not None else None,
            "complex_settings": ComplexSetting.from_dict(obj["complex_settings"]) if obj.get("complex_settings") is not None else None,
            "expression_settings": ExpressionSettings.from_dict(obj["expression_settings"]) if obj.get("expression_settings") is not None else None,
            "task_id": obj.get("task_id"),
            "task_name": obj.get("task_name"),
            "enabled": obj.get("enabled"),
            "calc_type": obj.get("calc_type"),
            "schedule_type": obj.get("schedule_type"),
            "period": obj.get("period"),
            "tag_matchers": [TagMatcher.from_dict(_item) for _item in obj["tag_matchers"]] if obj.get("tag_matchers") is not None else None,
            "create_time": obj.get("create_time"),
            "update_time": obj.get("update_time")
        })
        return _obj


