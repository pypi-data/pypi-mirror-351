# coding: utf-8

"""
    IIoT OpenAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 5.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from iiot_openapi.models.event_gen_expression import EventGenExpression
from iiot_openapi.models.event_gen_output import EventGenOutput
from iiot_openapi.models.event_trigger import EventTrigger
from iiot_openapi.models.sub_event_gen_setting import SubEventGenSetting
from typing import Optional, Set
from typing_extensions import Self

class EventGenSetting(BaseModel):
    """
    EventGenSetting
    """ # noqa: E501
    start_trigger: Optional[EventTrigger] = None
    end_trigger: Optional[EventTrigger] = None
    expressions: List[EventGenExpression]
    outputs: Optional[EventGenOutput] = None
    subevents: Optional[List[SubEventGenSetting]] = None
    __properties: ClassVar[List[str]] = ["start_trigger", "end_trigger", "expressions", "outputs", "subevents"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventGenSetting from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of start_trigger
        if self.start_trigger:
            _dict['start_trigger'] = self.start_trigger.to_dict()
        # override the default output from pydantic by calling `to_dict()` of end_trigger
        if self.end_trigger:
            _dict['end_trigger'] = self.end_trigger.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in expressions (list)
        _items = []
        if self.expressions:
            for _item_expressions in self.expressions:
                if _item_expressions:
                    _items.append(_item_expressions.to_dict())
            _dict['expressions'] = _items
        # override the default output from pydantic by calling `to_dict()` of outputs
        if self.outputs:
            _dict['outputs'] = self.outputs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in subevents (list)
        _items = []
        if self.subevents:
            for _item_subevents in self.subevents:
                if _item_subevents:
                    _items.append(_item_subevents.to_dict())
            _dict['subevents'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventGenSetting from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "start_trigger": EventTrigger.from_dict(obj["start_trigger"]) if obj.get("start_trigger") is not None else None,
            "end_trigger": EventTrigger.from_dict(obj["end_trigger"]) if obj.get("end_trigger") is not None else None,
            "expressions": [EventGenExpression.from_dict(_item) for _item in obj["expressions"]] if obj.get("expressions") is not None else None,
            "outputs": EventGenOutput.from_dict(obj["outputs"]) if obj.get("outputs") is not None else None,
            "subevents": [SubEventGenSetting.from_dict(_item) for _item in obj["subevents"]] if obj.get("subevents") is not None else None
        })
        return _obj


