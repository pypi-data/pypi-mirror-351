# coding: utf-8

"""
    IIoT OpenAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 5.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from iiot_openapi.models.data_schema import DataSchema
from iiot_openapi.models.table_ref import TableRef
from typing import Optional, Set
from typing_extensions import Self

class PropertyDto(BaseModel):
    """
    PropertyDto
    """ # noqa: E501
    property_id: StrictStr
    property_name: StrictStr
    data_schema: DataSchema
    writable: Optional[StrictBool] = None
    categories: Optional[List[StrictStr]] = None
    description: Optional[StrictStr] = None
    unit: Optional[StrictStr] = None
    ref_type: Optional[StrictStr] = None
    table_ref: Optional[TableRef] = None
    __properties: ClassVar[List[str]] = ["property_id", "property_name", "data_schema", "writable", "categories", "description", "unit", "ref_type", "table_ref"]

    @field_validator('ref_type')
    def ref_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['table', 'point', 'property']):
            raise ValueError("must be one of enum values ('table', 'point', 'property')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PropertyDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data_schema
        if self.data_schema:
            _dict['data_schema'] = self.data_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of table_ref
        if self.table_ref:
            _dict['table_ref'] = self.table_ref.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PropertyDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "property_id": obj.get("property_id"),
            "property_name": obj.get("property_name"),
            "data_schema": DataSchema.from_dict(obj["data_schema"]) if obj.get("data_schema") is not None else None,
            "writable": obj.get("writable"),
            "categories": obj.get("categories"),
            "description": obj.get("description"),
            "unit": obj.get("unit"),
            "ref_type": obj.get("ref_type"),
            "table_ref": TableRef.from_dict(obj["table_ref"]) if obj.get("table_ref") is not None else None
        })
        return _obj


