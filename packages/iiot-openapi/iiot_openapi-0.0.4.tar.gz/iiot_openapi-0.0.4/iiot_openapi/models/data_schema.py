# coding: utf-8

"""
    IIoT OpenAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 5.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from iiot_openapi.models.double_schema import DoubleSchema
from iiot_openapi.models.integer_schema import IntegerSchema
from iiot_openapi.models.object_schema import ObjectSchema
from iiot_openapi.models.string_schema import StringSchema
from typing import Optional, Set
from typing_extensions import Self

class DataSchema(BaseModel):
    """
    DataSchema
    """ # noqa: E501
    type: StrictStr
    integer_schema: Optional[IntegerSchema] = None
    double_schema: Optional[DoubleSchema] = None
    string_schema: Optional[StringSchema] = None
    object_schema: Optional[ObjectSchema] = None
    __properties: ClassVar[List[str]] = ["type", "integer_schema", "double_schema", "string_schema", "object_schema"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['bool', 'integer', 'double', 'object', 'string', 'time']):
            raise ValueError("must be one of enum values ('bool', 'integer', 'double', 'object', 'string', 'time')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of integer_schema
        if self.integer_schema:
            _dict['integer_schema'] = self.integer_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of double_schema
        if self.double_schema:
            _dict['double_schema'] = self.double_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of string_schema
        if self.string_schema:
            _dict['string_schema'] = self.string_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of object_schema
        if self.object_schema:
            _dict['object_schema'] = self.object_schema.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "integer_schema": IntegerSchema.from_dict(obj["integer_schema"]) if obj.get("integer_schema") is not None else None,
            "double_schema": DoubleSchema.from_dict(obj["double_schema"]) if obj.get("double_schema") is not None else None,
            "string_schema": StringSchema.from_dict(obj["string_schema"]) if obj.get("string_schema") is not None else None,
            "object_schema": ObjectSchema.from_dict(obj["object_schema"]) if obj.get("object_schema") is not None else None
        })
        return _obj


