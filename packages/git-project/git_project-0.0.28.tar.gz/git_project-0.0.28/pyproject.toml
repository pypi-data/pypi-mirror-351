# SPDX-FileCopyrightText: 2020-present David A. Greene <dag@obbligato.org>

# SPDX-License-Identifier: AGPL-3.0-or-later

# Copyright 2024 David A. Greene

# This file is part of git-project

# git-project is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.

# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

# You should have received a copy of the GNU Affero General Public License along
# with git-project. If not, see <https://www.gnu.org/licenses/>.

[build-system]
requires = ["hatchling", "hatch-fancy-pypi-readme", "hatch-requirements-txt",
            "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.build.hooks.vcs]
version-file = "_version.py"

[project]
name = "git-project"
dynamic = ["dependencies", "readme", "version"]
description = "The extensible stupid project manager"
license = "AGPL-3.0-or-later"
requires-python = ">=3.9"
authors = [
    { name = "David A. Greene", email = "dag@obbligato.org" },
]
keywords = [
    "development",
    "git",
    "project",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Programming Language :: Python :: 3.9",
    "Topic :: Software Development :: Version Control :: Git",
]

[project.optional-dependencies]
test = [
    "pytest",
    "pytest-cov",
    "pytest-console-scripts",
    "setuptools",
]

[project.scripts]
git-project = "git_project.main:main"

[project.urls]
Documentation = "https://github.com/greened/git-project#readme"
Issues = "https://github.com/unknown/greened/issues"
Source = "https://github.com/greened/git-project"

[tool.hatch.version]
source = "vcs"

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
  "pytest-console-scripts",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.9", "3.10", "3.11"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/git_project tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.black]
target-version = ["py37"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py37"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["git-project"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["git-project", "tests"]
branch = true
parallel = true
omit = [
  "src/git_project/__about__.py",
]

[tool.coverage.paths]
git-project = ["src/git_project", "*/git-project/src/git_project"]
tests = ["tests", "*/git-project/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.hatch.metadata.hooks.vcs]
Homepage = "https://github.com/greened/git-project#readme"
source_archive = "https://github.com/greened/git-project/archive/{commit_hash}.zip"

[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/x-rst"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "src/git_project/__init__.py"
start-after = "\"\"\""
end-before = "-------"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
text = """

-------

.. contents:: Table of Contents

"""

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "docs/authors.rst"
end-before = "A full list of contributors"

#[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
#path = "docs/changelog.rst"
#pattern = '(\d+\.\d+\.\d+.+?\n)\d+'

#[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
#text = """
#---
#
#`â†’ Full Changelog`_:docs/changelog.rst
#
#
#"""

# Replace relative links with absolute.
[[tool.hatch.metadata.hooks.fancy-pypi-readme.substitutions]]
pattern = '(.+?)_:((?!https?://)\S+?)'
replacement = '\1_:https://github.com/greened/git-project/tree/main/\g<2>'

# Replace GitHub issue references with links.
[[tool.hatch.metadata.hooks.fancy-pypi-readme.substitutions]]
pattern = ":issue:`(\\d+)`"
replacement = "#\\1_: https://github.com/greened/git-project/issues/\\1"

[tool.hatch.metadata.hooks.requirements_txt]
files = ["requirements.txt"]

[tool.hatch.build.targets.wheel]
packages = [
    "/src/git_project",
]
