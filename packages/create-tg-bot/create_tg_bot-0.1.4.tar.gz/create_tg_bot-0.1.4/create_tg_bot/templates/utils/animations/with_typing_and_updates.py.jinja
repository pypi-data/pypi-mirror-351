import asyncio
from functools import wraps
from telegram.constants import ChatAction


def with_typing_and_updates(messages=None):
    if messages is None:
        messages = [
            "üîç –ü—Ä–∏—Å—Ç—É–ø–∏–ª –∫ —Ä–∞–±–æ—Ç–µ...",
            "üí° –î—É–º–∞—é –Ω–∞–¥ —Ç–≤–æ–∏–º –∑–∞–ø—Ä–æ—Å–æ–º...",
            "üìå –ü–æ–¥–±–∏—Ä–∞—é –≤–∞—Ä–∏–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞...",
            "‚úçÔ∏è –ì–æ—Ç–æ–≤–ª—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...",
            "üßæ –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤—ã–≤–æ–¥—ã...",
            "‚è≥ –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ...",
            "‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —à—Ç—Ä–∏—Ö–∏...",
        ]

    def decorator(func):
        @wraps(func)
        async def wrapper(update, context, *args, **kwargs):
            chat_id = update.effective_chat.id
            message_index = 0

            async def typing_loop():
                nonlocal message_index
                try:
                    while True:
                        await context.bot.send_chat_action(
                            chat_id=chat_id, action=ChatAction.TYPING
                        )

                        if message_index < len(messages):
                            await context.bot.send_message(
                                chat_id=chat_id, text=messages[message_index]
                            )
                            message_index += 1

                        await asyncio.sleep(3)
                except asyncio.CancelledError:
                    pass

            typing_task = asyncio.create_task(typing_loop())

            try:
                return await func(update, context, *args, **kwargs)
            finally:
                typing_task.cancel()

        return wrapper

    return decorator
