# generated by datamodel-codegen:
#   filename:  https://www.keycloak.org/docs-api/latest/rest-api/openapi.yaml
#   timestamp: 2025-05-28T05:19:40+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Mapping, Optional, Sequence

from pydantic import BaseModel, Field


class Access(BaseModel):
    roles: Optional[Sequence[str]] = Field(None, unique_items=True)
    verify_caller: Optional[bool] = None


class AddressClaimSet(BaseModel):
    formatted: Optional[str] = None
    street_address: Optional[str] = None
    locality: Optional[str] = None
    region: Optional[str] = None
    postal_code: Optional[str] = None
    country: Optional[str] = None


class AuthDetailsRepresentation(BaseModel):
    realm_id: Optional[str] = Field(None, alias="realmId")
    client_id: Optional[str] = Field(None, alias="clientId")
    user_id: Optional[str] = Field(None, alias="userId")
    ip_address: Optional[str] = Field(None, alias="ipAddress")


class AuthenticationExecutionExportRepresentation(BaseModel):
    authenticator_config: Optional[str] = Field(None, alias="authenticatorConfig")
    authenticator: Optional[str] = None
    authenticator_flow: Optional[bool] = Field(None, alias="authenticatorFlow")
    requirement: Optional[str] = None
    priority: Optional[int] = None
    autheticator_flow: Optional[bool] = Field(None, alias="autheticatorFlow")
    flow_alias: Optional[str] = Field(None, alias="flowAlias")
    user_setup_allowed: Optional[bool] = Field(None, alias="userSetupAllowed")


class AuthenticationExecutionInfoRepresentation(BaseModel):
    id: Optional[str] = None
    requirement: Optional[str] = None
    display_name: Optional[str] = Field(None, alias="displayName")
    alias: Optional[str] = None
    description: Optional[str] = None
    requirement_choices: Optional[Sequence[str]] = Field(
        None, alias="requirementChoices"
    )
    configurable: Optional[bool] = None
    authentication_flow: Optional[bool] = Field(None, alias="authenticationFlow")
    provider_id: Optional[str] = Field(None, alias="providerId")
    authentication_config: Optional[str] = Field(None, alias="authenticationConfig")
    flow_id: Optional[str] = Field(None, alias="flowId")
    level: Optional[int] = None
    index: Optional[int] = None
    priority: Optional[int] = None


class AuthenticationExecutionRepresentation(BaseModel):
    authenticator_config: Optional[str] = Field(None, alias="authenticatorConfig")
    authenticator: Optional[str] = None
    authenticator_flow: Optional[bool] = Field(None, alias="authenticatorFlow")
    requirement: Optional[str] = None
    priority: Optional[int] = None
    autheticator_flow: Optional[bool] = Field(None, alias="autheticatorFlow")
    id: Optional[str] = None
    flow_id: Optional[str] = Field(None, alias="flowId")
    parent_flow: Optional[str] = Field(None, alias="parentFlow")


class AuthenticationFlowRepresentation(BaseModel):
    id: Optional[str] = None
    alias: Optional[str] = None
    description: Optional[str] = None
    provider_id: Optional[str] = Field(None, alias="providerId")
    top_level: Optional[bool] = Field(None, alias="topLevel")
    built_in: Optional[bool] = Field(None, alias="builtIn")
    authentication_executions: Optional[
        Sequence[AuthenticationExecutionExportRepresentation]
    ] = Field(None, alias="authenticationExecutions")


class AuthenticatorConfigRepresentation(BaseModel):
    id: Optional[str] = None
    alias: Optional[str] = None
    config: Optional[Mapping[str, str]] = None


class BruteForceStrategy(Enum):
    LINEAR = "LINEAR"
    MULTIPLE = "MULTIPLE"


class CertificateRepresentation(BaseModel):
    private_key: Optional[str] = Field(None, alias="privateKey")
    public_key: Optional[str] = Field(None, alias="publicKey")
    certificate: Optional[str] = None
    kid: Optional[str] = None


class ClaimRepresentation(BaseModel):
    name: Optional[bool] = None
    username: Optional[bool] = None
    profile: Optional[bool] = None
    picture: Optional[bool] = None
    website: Optional[bool] = None
    email: Optional[bool] = None
    gender: Optional[bool] = None
    locale: Optional[bool] = None
    address: Optional[bool] = None
    phone: Optional[bool] = None


class ClientInitialAccessCreatePresentation(BaseModel):
    expiration: Optional[int] = None
    count: Optional[int] = None


class ClientInitialAccessPresentation(BaseModel):
    id: Optional[str] = None
    token: Optional[str] = None
    timestamp: Optional[int] = None
    expiration: Optional[int] = None
    count: Optional[int] = None
    remaining_count: Optional[int] = Field(None, alias="remainingCount")


class ClientPolicyConditionRepresentation(BaseModel):
    condition: Optional[str] = None
    configuration: Optional[Sequence] = None


class ClientPolicyExecutorRepresentation(BaseModel):
    executor: Optional[str] = None
    configuration: Optional[Sequence] = None


class ClientPolicyRepresentation(BaseModel):
    name: Optional[str] = None
    description: Optional[str] = None
    enabled: Optional[bool] = None
    conditions: Optional[Sequence[ClientPolicyConditionRepresentation]] = None
    profiles: Optional[Sequence[str]] = None


class ClientProfileRepresentation(BaseModel):
    name: Optional[str] = None
    description: Optional[str] = None
    executors: Optional[Sequence[ClientPolicyExecutorRepresentation]] = None


class ClientProfilesRepresentation(BaseModel):
    profiles: Optional[Sequence[ClientProfileRepresentation]] = None
    global_profiles: Optional[Sequence[ClientProfileRepresentation]] = Field(
        None, alias="globalProfiles"
    )


class Composites(BaseModel):
    realm: Optional[Sequence[str]] = Field(None, unique_items=True)
    client: Optional[Mapping[str, Sequence[str]]] = None
    application: Optional[Mapping[str, Sequence[str]]] = None


class ConfigPropertyRepresentation(BaseModel):
    name: Optional[str] = None
    label: Optional[str] = None
    help_text: Optional[str] = Field(None, alias="helpText")
    type: Optional[str] = None
    default_value: Optional[Any] = Field(None, alias="defaultValue")
    options: Optional[Sequence[str]] = None
    secret: Optional[bool] = None
    required: Optional[bool] = None
    read_only: Optional[bool] = Field(None, alias="readOnly")


class Confirmation(BaseModel):
    x5t_s256: Optional[str] = Field(None, alias="x5t#S256")
    jkt: Optional[str] = None


class DecisionEffect(Enum):
    PERMIT = "PERMIT"
    DENY = "DENY"


class DecisionStrategy(Enum):
    AFFIRMATIVE = "AFFIRMATIVE"
    UNANIMOUS = "UNANIMOUS"
    CONSENSUS = "CONSENSUS"


class EnforcementMode(Enum):
    PERMISSIVE = "PERMISSIVE"
    ENFORCING = "ENFORCING"
    DISABLED = "DISABLED"


class ErrorRepresentation(BaseModel):
    field: Optional[str] = None
    error_message: Optional[str] = Field(None, alias="errorMessage")
    params: Optional[Sequence] = None
    errors: Optional[Sequence[ErrorRepresentation]] = None


class EventRepresentation(BaseModel):
    id: Optional[str] = None
    time: Optional[int] = None
    type: Optional[str] = None
    realm_id: Optional[str] = Field(None, alias="realmId")
    client_id: Optional[str] = Field(None, alias="clientId")
    user_id: Optional[str] = Field(None, alias="userId")
    session_id: Optional[str] = Field(None, alias="sessionId")
    ip_address: Optional[str] = Field(None, alias="ipAddress")
    error: Optional[str] = None
    details: Optional[Mapping[str, str]] = None


class FederatedIdentityRepresentation(BaseModel):
    identity_provider: Optional[str] = Field(None, alias="identityProvider")
    user_id: Optional[str] = Field(None, alias="userId")
    user_name: Optional[str] = Field(None, alias="userName")


class GlobalRequestResult(BaseModel):
    success_requests: Optional[Sequence[str]] = Field(None, alias="successRequests")
    failed_requests: Optional[Sequence[str]] = Field(None, alias="failedRequests")


class GroupRepresentation(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    path: Optional[str] = None
    parent_id: Optional[str] = Field(None, alias="parentId")
    sub_group_count: Optional[int] = Field(None, alias="subGroupCount")
    sub_groups: Optional[Sequence[GroupRepresentation]] = Field(None, alias="subGroups")
    attributes: Optional[Mapping[str, Sequence[str]]] = None
    realm_roles: Optional[Sequence[str]] = Field(None, alias="realmRoles")
    client_roles: Optional[Mapping[str, Sequence[str]]] = Field(
        None, alias="clientRoles"
    )
    access: Optional[Mapping[str, bool]] = None


class IDToken(BaseModel):
    jti: Optional[str] = None
    exp: Optional[int] = None
    nbf: Optional[int] = None
    iat: Optional[int] = None
    iss: Optional[str] = None
    sub: Optional[str] = None
    typ: Optional[str] = None
    azp: Optional[str] = None
    other_claims: Optional[Mapping[str, Any]] = Field(None, alias="otherClaims")
    nonce: Optional[str] = None
    auth_time: Optional[int] = None
    sid: Optional[str] = None
    at_hash: Optional[str] = None
    c_hash: Optional[str] = None
    name: Optional[str] = None
    given_name: Optional[str] = None
    family_name: Optional[str] = None
    middle_name: Optional[str] = None
    nickname: Optional[str] = None
    preferred_username: Optional[str] = None
    profile: Optional[str] = None
    picture: Optional[str] = None
    website: Optional[str] = None
    email: Optional[str] = None
    email_verified: Optional[bool] = None
    gender: Optional[str] = None
    birthdate: Optional[str] = None
    zoneinfo: Optional[str] = None
    locale: Optional[str] = None
    phone_number: Optional[str] = None
    phone_number_verified: Optional[bool] = None
    address: Optional[AddressClaimSet] = None
    updated_at: Optional[int] = None
    claims_locales: Optional[str] = None
    acr: Optional[str] = None
    s_hash: Optional[str] = None


class IdentityProviderMapperRepresentation(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    identity_provider_alias: Optional[str] = Field(None, alias="identityProviderAlias")
    identity_provider_mapper: Optional[str] = Field(
        None, alias="identityProviderMapper"
    )
    config: Optional[Mapping[str, str]] = None


class IdentityProviderMapperTypeRepresentation(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    category: Optional[str] = None
    help_text: Optional[str] = Field(None, alias="helpText")
    properties: Optional[Sequence[ConfigPropertyRepresentation]] = None


class IdentityProviderRepresentation(BaseModel):
    alias: Optional[str] = None
    display_name: Optional[str] = Field(None, alias="displayName")
    internal_id: Optional[str] = Field(None, alias="internalId")
    provider_id: Optional[str] = Field(None, alias="providerId")
    enabled: Optional[bool] = None
    update_profile_first_login_mode: Optional[str] = Field(
        None, alias="updateProfileFirstLoginMode"
    )
    trust_email: Optional[bool] = Field(None, alias="trustEmail")
    store_token: Optional[bool] = Field(None, alias="storeToken")
    add_read_token_role_on_create: Optional[bool] = Field(
        None, alias="addReadTokenRoleOnCreate"
    )
    authenticate_by_default: Optional[bool] = Field(None, alias="authenticateByDefault")
    link_only: Optional[bool] = Field(None, alias="linkOnly")
    hide_on_login: Optional[bool] = Field(None, alias="hideOnLogin")
    first_broker_login_flow_alias: Optional[str] = Field(
        None, alias="firstBrokerLoginFlowAlias"
    )
    post_broker_login_flow_alias: Optional[str] = Field(
        None, alias="postBrokerLoginFlowAlias"
    )
    organization_id: Optional[str] = Field(None, alias="organizationId")
    config: Optional[Mapping[str, str]] = None
    update_profile_first_login: Optional[bool] = Field(
        None, alias="updateProfileFirstLogin"
    )


class KeyStoreConfig(BaseModel):
    realm_certificate: Optional[bool] = Field(None, alias="realmCertificate")
    store_password: Optional[str] = Field(None, alias="storePassword")
    key_password: Optional[str] = Field(None, alias="keyPassword")
    key_alias: Optional[str] = Field(None, alias="keyAlias")
    realm_alias: Optional[str] = Field(None, alias="realmAlias")
    format: Optional[str] = None


class KeyUse(Enum):
    SIG = "SIG"
    ENC = "ENC"


class Logic(Enum):
    POSITIVE = "POSITIVE"
    NEGATIVE = "NEGATIVE"


class ManagementPermissionReference(BaseModel):
    enabled: Optional[bool] = None
    resource: Optional[str] = None
    scope_permissions: Optional[Mapping[str, str]] = Field(
        None, alias="scopePermissions"
    )


class MembershipType(Enum):
    UNMANAGED = "UNMANAGED"
    MANAGED = "MANAGED"


class OrganizationDomainRepresentation(BaseModel):
    name: Optional[str] = None
    verified: Optional[bool] = None


class PathCacheConfig(BaseModel):
    max_entries: Optional[int] = Field(None, alias="max-entries")
    lifespan: Optional[int] = None


class Permission(BaseModel):
    rsid: Optional[str] = None
    rsname: Optional[str] = None
    scopes: Optional[Sequence[str]] = Field(None, unique_items=True)
    claims: Optional[Mapping[str, Sequence[str]]] = None


class PolicyEnforcementMode(Enum):
    ENFORCING = "ENFORCING"
    PERMISSIVE = "PERMISSIVE"
    DISABLED = "DISABLED"


class PolicyProviderRepresentation(BaseModel):
    type: Optional[str] = None
    name: Optional[str] = None
    group: Optional[str] = None


class PropertyConfig(BaseModel):
    applicable: Optional[bool] = None
    value: Optional[Any] = None


class ProtocolMapperEvaluationRepresentation(BaseModel):
    mapper_id: Optional[str] = Field(None, alias="mapperId")
    mapper_name: Optional[str] = Field(None, alias="mapperName")
    container_id: Optional[str] = Field(None, alias="containerId")
    container_name: Optional[str] = Field(None, alias="containerName")
    container_type: Optional[str] = Field(None, alias="containerType")
    protocol_mapper: Optional[str] = Field(None, alias="protocolMapper")


class ProtocolMapperRepresentation(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    protocol: Optional[str] = None
    protocol_mapper: Optional[str] = Field(None, alias="protocolMapper")
    consent_required: Optional[bool] = Field(None, alias="consentRequired")
    consent_text: Optional[str] = Field(None, alias="consentText")
    config: Optional[Mapping[str, str]] = None


class PublishedRealmRepresentation(BaseModel):
    realm: Optional[str] = None
    public_key: Optional[str] = None
    token_service: Optional[str] = Field(None, alias="token-service")
    account_service: Optional[str] = Field(None, alias="account-service")
    tokens_not_before: Optional[int] = Field(None, alias="tokens-not-before")


class RealmEventsConfigRepresentation(BaseModel):
    events_enabled: Optional[bool] = Field(None, alias="eventsEnabled")
    events_expiration: Optional[int] = Field(None, alias="eventsExpiration")
    events_listeners: Optional[Sequence[str]] = Field(None, alias="eventsListeners")
    enabled_event_types: Optional[Sequence[str]] = Field(
        None, alias="enabledEventTypes"
    )
    admin_events_enabled: Optional[bool] = Field(None, alias="adminEventsEnabled")
    admin_events_details_enabled: Optional[bool] = Field(
        None, alias="adminEventsDetailsEnabled"
    )


class RequiredActionConfigInfoRepresentation(BaseModel):
    properties: Optional[Sequence[ConfigPropertyRepresentation]] = None


class RequiredActionConfigRepresentation(BaseModel):
    config: Optional[Mapping[str, str]] = None


class RequiredActionProviderRepresentation(BaseModel):
    alias: Optional[str] = None
    name: Optional[str] = None
    provider_id: Optional[str] = Field(None, alias="providerId")
    enabled: Optional[bool] = None
    default_action: Optional[bool] = Field(None, alias="defaultAction")
    priority: Optional[int] = None
    config: Optional[Mapping[str, str]] = None


class ResourceOwnerRepresentation(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None


class ResourceType(BaseModel):
    type: Optional[str] = None
    scopes: Optional[Sequence[str]] = Field(None, unique_items=True)
    scope_aliases: Optional[Mapping[str, Sequence[str]]] = Field(
        None, alias="scopeAliases"
    )
    group_type: Optional[str] = Field(None, alias="groupType")


class RoleRepresentation(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None
    scope_param_required: Optional[bool] = Field(None, alias="scopeParamRequired")
    composite: Optional[bool] = None
    composites: Optional[Composites] = None
    client_role: Optional[bool] = Field(None, alias="clientRole")
    container_id: Optional[str] = Field(None, alias="containerId")
    attributes: Optional[Mapping[str, Sequence[str]]] = None


class RolesRepresentation(BaseModel):
    realm: Optional[Sequence[RoleRepresentation]] = None
    client: Optional[Mapping[str, Sequence[RoleRepresentation]]] = None
    application: Optional[Mapping[str, Sequence[RoleRepresentation]]] = None


class ScopeEnforcementMode(Enum):
    ALL = "ALL"
    ANY = "ANY"
    DISABLED = "DISABLED"


class ScopeMappingRepresentation(BaseModel):
    self: Optional[str] = None
    client: Optional[str] = None
    client_template: Optional[str] = Field(None, alias="clientTemplate")
    client_scope: Optional[str] = Field(None, alias="clientScope")
    roles: Optional[Sequence[str]] = Field(None, unique_items=True)


class SocialLinkRepresentation(BaseModel):
    social_provider: Optional[str] = Field(None, alias="socialProvider")
    social_user_id: Optional[str] = Field(None, alias="socialUserId")
    social_username: Optional[str] = Field(None, alias="socialUsername")


class UPAttributePermissions(BaseModel):
    view: Optional[Sequence[str]] = Field(None, unique_items=True)
    edit: Optional[Sequence[str]] = Field(None, unique_items=True)


class UPAttributeRequired(BaseModel):
    roles: Optional[Sequence[str]] = Field(None, unique_items=True)
    scopes: Optional[Sequence[str]] = Field(None, unique_items=True)


class UPAttributeSelector(BaseModel):
    scopes: Optional[Sequence[str]] = Field(None, unique_items=True)


class UPGroup(BaseModel):
    name: Optional[str] = None
    display_header: Optional[str] = Field(None, alias="displayHeader")
    display_description: Optional[str] = Field(None, alias="displayDescription")
    annotations: Optional[Mapping[str, Any]] = None


class UnmanagedAttributePolicy(Enum):
    ENABLED = "ENABLED"
    ADMIN_VIEW = "ADMIN_VIEW"
    ADMIN_EDIT = "ADMIN_EDIT"


class UserConsentRepresentation(BaseModel):
    client_id: Optional[str] = Field(None, alias="clientId")
    granted_client_scopes: Optional[Sequence[str]] = Field(
        None, alias="grantedClientScopes"
    )
    created_date: Optional[int] = Field(None, alias="createdDate")
    last_updated_date: Optional[int] = Field(None, alias="lastUpdatedDate")
    granted_realm_roles: Optional[Sequence[str]] = Field(
        None, alias="grantedRealmRoles"
    )


class UserFederationMapperRepresentation(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    federation_provider_display_name: Optional[str] = Field(
        None, alias="federationProviderDisplayName"
    )
    federation_mapper_type: Optional[str] = Field(None, alias="federationMapperType")
    config: Optional[Mapping[str, str]] = None


class UserFederationProviderRepresentation(BaseModel):
    id: Optional[str] = None
    display_name: Optional[str] = Field(None, alias="displayName")
    provider_name: Optional[str] = Field(None, alias="providerName")
    config: Optional[Mapping[str, str]] = None
    priority: Optional[int] = None
    full_sync_period: Optional[int] = Field(None, alias="fullSyncPeriod")
    changed_sync_period: Optional[int] = Field(None, alias="changedSyncPeriod")
    last_sync: Optional[int] = Field(None, alias="lastSync")


class UserManagedAccessConfig(BaseModel):
    pass


class UserProfileAttributeGroupMetadata(BaseModel):
    name: Optional[str] = None
    display_header: Optional[str] = Field(None, alias="displayHeader")
    display_description: Optional[str] = Field(None, alias="displayDescription")
    annotations: Optional[Mapping[str, Any]] = None


class UserProfileAttributeMetadata(BaseModel):
    name: Optional[str] = None
    display_name: Optional[str] = Field(None, alias="displayName")
    required: Optional[bool] = None
    read_only: Optional[bool] = Field(None, alias="readOnly")
    annotations: Optional[Mapping[str, Any]] = None
    validators: Optional[Mapping[str, Mapping[str, Any]]] = None
    group: Optional[str] = None
    multivalued: Optional[bool] = None


class UserProfileMetadata(BaseModel):
    attributes: Optional[Sequence[UserProfileAttributeMetadata]] = None
    groups: Optional[Sequence[UserProfileAttributeGroupMetadata]] = None


class UserSessionRepresentation(BaseModel):
    id: Optional[str] = None
    username: Optional[str] = None
    user_id: Optional[str] = Field(None, alias="userId")
    ip_address: Optional[str] = Field(None, alias="ipAddress")
    start: Optional[int] = None
    last_access: Optional[int] = Field(None, alias="lastAccess")
    remember_me: Optional[bool] = Field(None, alias="rememberMe")
    clients: Optional[Mapping[str, str]] = None
    transient_user: Optional[bool] = Field(None, alias="transientUser")


class AdminEventRepresentation(BaseModel):
    id: Optional[str] = None
    time: Optional[int] = None
    realm_id: Optional[str] = Field(None, alias="realmId")
    auth_details: Optional[AuthDetailsRepresentation] = Field(None, alias="authDetails")
    operation_type: Optional[str] = Field(None, alias="operationType")
    resource_type: Optional[str] = Field(None, alias="resourceType")
    resource_path: Optional[str] = Field(None, alias="resourcePath")
    representation: Optional[str] = None
    error: Optional[str] = None
    details: Optional[Mapping[str, str]] = None


class AuthenticatorConfigInfoRepresentation(BaseModel):
    name: Optional[str] = None
    provider_id: Optional[str] = Field(None, alias="providerId")
    help_text: Optional[str] = Field(None, alias="helpText")
    properties: Optional[Sequence[ConfigPropertyRepresentation]] = None


class Authorization(BaseModel):
    permissions: Optional[Sequence[Permission]] = None


class AuthorizationSchema(BaseModel):
    resource_types: Optional[Mapping[str, ResourceType]] = Field(
        None, alias="resourceTypes"
    )


class ClientMappingsRepresentation(BaseModel):
    id: Optional[str] = None
    client: Optional[str] = None
    mappings: Optional[Sequence[RoleRepresentation]] = None


class ClientPoliciesRepresentation(BaseModel):
    policies: Optional[Sequence[ClientPolicyRepresentation]] = None
    global_policies: Optional[Sequence[ClientPolicyRepresentation]] = Field(
        None, alias="globalPolicies"
    )


class ClientScopeRepresentation(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None
    protocol: Optional[str] = None
    attributes: Optional[Mapping[str, str]] = None
    protocol_mappers: Optional[Sequence[ProtocolMapperRepresentation]] = Field(
        None, alias="protocolMappers"
    )


class ClientTemplateRepresentation(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None
    protocol: Optional[str] = None
    full_scope_allowed: Optional[bool] = Field(None, alias="fullScopeAllowed")
    bearer_only: Optional[bool] = Field(None, alias="bearerOnly")
    consent_required: Optional[bool] = Field(None, alias="consentRequired")
    standard_flow_enabled: Optional[bool] = Field(None, alias="standardFlowEnabled")
    implicit_flow_enabled: Optional[bool] = Field(None, alias="implicitFlowEnabled")
    direct_access_grants_enabled: Optional[bool] = Field(
        None, alias="directAccessGrantsEnabled"
    )
    service_accounts_enabled: Optional[bool] = Field(
        None, alias="serviceAccountsEnabled"
    )
    public_client: Optional[bool] = Field(None, alias="publicClient")
    frontchannel_logout: Optional[bool] = Field(None, alias="frontchannelLogout")
    attributes: Optional[Mapping[str, str]] = None
    protocol_mappers: Optional[Sequence[ProtocolMapperRepresentation]] = Field(
        None, alias="protocolMappers"
    )


class ClientTypeRepresentation(BaseModel):
    name: Optional[str] = None
    provider: Optional[str] = None
    parent: Optional[str] = None
    config: Optional[Mapping[str, PropertyConfig]] = None


class ClientTypesRepresentation(BaseModel):
    client_types: Optional[Sequence[ClientTypeRepresentation]] = Field(
        None, alias="client-types"
    )
    global_client_types: Optional[Sequence[ClientTypeRepresentation]] = Field(
        None, alias="global-client-types"
    )


class ComponentRepresentation(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    provider_id: Optional[str] = Field(None, alias="providerId")
    provider_type: Optional[str] = Field(None, alias="providerType")
    parent_id: Optional[str] = Field(None, alias="parentId")
    sub_type: Optional[str] = Field(None, alias="subType")
    config: Optional[Mapping[str, Sequence[str]]] = None


class ComponentTypeRepresentation(BaseModel):
    id: Optional[str] = None
    help_text: Optional[str] = Field(None, alias="helpText")
    properties: Optional[Sequence[ConfigPropertyRepresentation]] = None
    metadata: Optional[Mapping[str, Any]] = None


class CredentialRepresentation(BaseModel):
    id: Optional[str] = None
    type: Optional[str] = None
    user_label: Optional[str] = Field(None, alias="userLabel")
    created_date: Optional[int] = Field(None, alias="createdDate")
    secret_data: Optional[str] = Field(None, alias="secretData")
    credential_data: Optional[str] = Field(None, alias="credentialData")
    priority: Optional[int] = None
    value: Optional[str] = None
    temporary: Optional[bool] = None
    device: Optional[str] = None
    hashed_salted_value: Optional[str] = Field(None, alias="hashedSaltedValue")
    salt: Optional[str] = None
    hash_iterations: Optional[int] = Field(None, alias="hashIterations")
    counter: Optional[int] = None
    algorithm: Optional[str] = None
    digits: Optional[int] = None
    period: Optional[int] = None
    config: Optional[Mapping[str, Sequence[str]]] = None
    federation_link: Optional[str] = Field(None, alias="federationLink")


class KeyMetadataRepresentation(BaseModel):
    provider_id: Optional[str] = Field(None, alias="providerId")
    provider_priority: Optional[int] = Field(None, alias="providerPriority")
    kid: Optional[str] = None
    status: Optional[str] = None
    type: Optional[str] = None
    algorithm: Optional[str] = None
    public_key: Optional[str] = Field(None, alias="publicKey")
    certificate: Optional[str] = None
    use: Optional[KeyUse] = None
    valid_to: Optional[int] = Field(None, alias="validTo")


class KeysMetadataRepresentation(BaseModel):
    active: Optional[Mapping[str, str]] = None
    keys: Optional[Sequence[KeyMetadataRepresentation]] = None


class MappingsRepresentation(BaseModel):
    realm_mappings: Optional[Sequence[RoleRepresentation]] = Field(
        None, alias="realmMappings"
    )
    client_mappings: Optional[Mapping[str, ClientMappingsRepresentation]] = Field(
        None, alias="clientMappings"
    )


class MemberRepresentation(BaseModel):
    id: Optional[str] = None
    username: Optional[str] = None
    first_name: Optional[str] = Field(None, alias="firstName")
    last_name: Optional[str] = Field(None, alias="lastName")
    email: Optional[str] = None
    email_verified: Optional[bool] = Field(None, alias="emailVerified")
    attributes: Optional[Mapping[str, Sequence[str]]] = None
    user_profile_metadata: Optional[UserProfileMetadata] = Field(
        None, alias="userProfileMetadata"
    )
    self: Optional[str] = None
    origin: Optional[str] = None
    created_timestamp: Optional[int] = Field(None, alias="createdTimestamp")
    enabled: Optional[bool] = None
    totp: Optional[bool] = None
    federation_link: Optional[str] = Field(None, alias="federationLink")
    service_account_client_id: Optional[str] = Field(
        None, alias="serviceAccountClientId"
    )
    credentials: Optional[Sequence[CredentialRepresentation]] = None
    disableable_credential_types: Optional[Sequence[str]] = Field(
        None, alias="disableableCredentialTypes", unique_items=True
    )
    required_actions: Optional[Sequence[str]] = Field(None, alias="requiredActions")
    federated_identities: Optional[Sequence[FederatedIdentityRepresentation]] = Field(
        None, alias="federatedIdentities"
    )
    realm_roles: Optional[Sequence[str]] = Field(None, alias="realmRoles")
    client_roles: Optional[Mapping[str, Sequence[str]]] = Field(
        None, alias="clientRoles"
    )
    client_consents: Optional[Sequence[UserConsentRepresentation]] = Field(
        None, alias="clientConsents"
    )
    not_before: Optional[int] = Field(None, alias="notBefore")
    application_roles: Optional[Mapping[str, Sequence[str]]] = Field(
        None, alias="applicationRoles"
    )
    social_links: Optional[Sequence[SocialLinkRepresentation]] = Field(
        None, alias="socialLinks"
    )
    groups: Optional[Sequence[str]] = None
    access: Optional[Mapping[str, bool]] = None
    membership_type: Optional[MembershipType] = Field(None, alias="membershipType")


class MethodConfig(BaseModel):
    method: Optional[str] = None
    scopes: Optional[Sequence[str]] = None
    scopes_enforcement_mode: Optional[ScopeEnforcementMode] = Field(
        None, alias="scopes-enforcement-mode"
    )


class OrganizationRepresentation(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    alias: Optional[str] = None
    enabled: Optional[bool] = None
    description: Optional[str] = None
    redirect_url: Optional[str] = Field(None, alias="redirectUrl")
    attributes: Optional[Mapping[str, Sequence[str]]] = None
    domains: Optional[Sequence[OrganizationDomainRepresentation]] = Field(
        None, unique_items=True
    )
    members: Optional[Sequence[MemberRepresentation]] = None
    identity_providers: Optional[Sequence[IdentityProviderRepresentation]] = Field(
        None, alias="identityProviders"
    )


class PathConfig(BaseModel):
    name: Optional[str] = None
    type: Optional[str] = None
    path: Optional[str] = None
    methods: Optional[Sequence[MethodConfig]] = None
    scopes: Optional[Sequence[str]] = None
    id: Optional[str] = None
    enforcement_mode: Optional[EnforcementMode] = Field(None, alias="enforcement-mode")
    claim_information_point: Optional[Mapping[str, Mapping[str, Any]]] = Field(
        None, alias="claim-information-point"
    )
    invalidated: Optional[bool] = None
    static_path: Optional[bool] = Field(None, alias="staticPath")
    static: Optional[bool] = None


class PolicyEnforcerConfig(BaseModel):
    enforcement_mode: Optional[EnforcementMode] = Field(None, alias="enforcement-mode")
    paths: Optional[Sequence[PathConfig]] = None
    path_cache: Optional[PathCacheConfig] = Field(None, alias="path-cache")
    lazy_load_paths: Optional[bool] = Field(None, alias="lazy-load-paths")
    on_deny_redirect_to: Optional[str] = Field(None, alias="on-deny-redirect-to")
    user_managed_access: Optional[UserManagedAccessConfig] = Field(
        None, alias="user-managed-access"
    )
    claim_information_point: Optional[Mapping[str, Mapping[str, Any]]] = Field(
        None, alias="claim-information-point"
    )
    http_method_as_scope: Optional[bool] = Field(None, alias="http-method-as-scope")
    realm: Optional[str] = None
    auth_server_url: Optional[str] = Field(None, alias="auth-server-url")
    credentials: Optional[Mapping[str, Any]] = None
    resource: Optional[str] = None


class UPAttribute(BaseModel):
    name: Optional[str] = None
    display_name: Optional[str] = Field(None, alias="displayName")
    validations: Optional[Mapping[str, Mapping[str, Any]]] = None
    annotations: Optional[Mapping[str, Any]] = None
    required: Optional[UPAttributeRequired] = None
    permissions: Optional[UPAttributePermissions] = None
    selector: Optional[UPAttributeSelector] = None
    group: Optional[str] = None
    multivalued: Optional[bool] = None


class UPConfig(BaseModel):
    attributes: Optional[Sequence[UPAttribute]] = None
    groups: Optional[Sequence[UPGroup]] = None
    unmanaged_attribute_policy: Optional[UnmanagedAttributePolicy] = Field(
        None, alias="unmanagedAttributePolicy"
    )


class UserRepresentation(BaseModel):
    id: Optional[str] = None
    username: Optional[str] = None
    first_name: Optional[str] = Field(None, alias="firstName")
    last_name: Optional[str] = Field(None, alias="lastName")
    email: Optional[str] = None
    email_verified: Optional[bool] = Field(None, alias="emailVerified")
    attributes: Optional[Mapping[str, Sequence[str]]] = None
    user_profile_metadata: Optional[UserProfileMetadata] = Field(
        None, alias="userProfileMetadata"
    )
    self: Optional[str] = None
    origin: Optional[str] = None
    created_timestamp: Optional[int] = Field(None, alias="createdTimestamp")
    enabled: Optional[bool] = None
    totp: Optional[bool] = None
    federation_link: Optional[str] = Field(None, alias="federationLink")
    service_account_client_id: Optional[str] = Field(
        None, alias="serviceAccountClientId"
    )
    credentials: Optional[Sequence[CredentialRepresentation]] = None
    disableable_credential_types: Optional[Sequence[str]] = Field(
        None, alias="disableableCredentialTypes", unique_items=True
    )
    required_actions: Optional[Sequence[str]] = Field(None, alias="requiredActions")
    federated_identities: Optional[Sequence[FederatedIdentityRepresentation]] = Field(
        None, alias="federatedIdentities"
    )
    realm_roles: Optional[Sequence[str]] = Field(None, alias="realmRoles")
    client_roles: Optional[Mapping[str, Sequence[str]]] = Field(
        None, alias="clientRoles"
    )
    client_consents: Optional[Sequence[UserConsentRepresentation]] = Field(
        None, alias="clientConsents"
    )
    not_before: Optional[int] = Field(None, alias="notBefore")
    application_roles: Optional[Mapping[str, Sequence[str]]] = Field(
        None, alias="applicationRoles"
    )
    social_links: Optional[Sequence[SocialLinkRepresentation]] = Field(
        None, alias="socialLinks"
    )
    groups: Optional[Sequence[str]] = None
    access: Optional[Mapping[str, bool]] = None


class AccessToken(BaseModel):
    jti: Optional[str] = None
    exp: Optional[int] = None
    nbf: Optional[int] = None
    iat: Optional[int] = None
    iss: Optional[str] = None
    sub: Optional[str] = None
    typ: Optional[str] = None
    azp: Optional[str] = None
    other_claims: Optional[Mapping[str, Any]] = Field(None, alias="otherClaims")
    nonce: Optional[str] = None
    auth_time: Optional[int] = None
    sid: Optional[str] = None
    at_hash: Optional[str] = None
    c_hash: Optional[str] = None
    name: Optional[str] = None
    given_name: Optional[str] = None
    family_name: Optional[str] = None
    middle_name: Optional[str] = None
    nickname: Optional[str] = None
    preferred_username: Optional[str] = None
    profile: Optional[str] = None
    picture: Optional[str] = None
    website: Optional[str] = None
    email: Optional[str] = None
    email_verified: Optional[bool] = None
    gender: Optional[str] = None
    birthdate: Optional[str] = None
    zoneinfo: Optional[str] = None
    locale: Optional[str] = None
    phone_number: Optional[str] = None
    phone_number_verified: Optional[bool] = None
    address: Optional[AddressClaimSet] = None
    updated_at: Optional[int] = None
    claims_locales: Optional[str] = None
    acr: Optional[str] = None
    s_hash: Optional[str] = None
    trusted_certs: Optional[Sequence[str]] = Field(
        None, alias="trusted-certs", unique_items=True
    )
    allowed_origins: Optional[Sequence[str]] = Field(
        None, alias="allowed-origins", unique_items=True
    )
    realm_access: Optional[Access] = None
    resource_access: Optional[Mapping[str, Access]] = None
    authorization: Optional[Authorization] = None
    cnf: Optional[Confirmation] = None
    scope: Optional[str] = None


class InstallationAdapterConfig(BaseModel):
    realm: Optional[str] = None
    realm_public_key: Optional[str] = Field(None, alias="realm-public-key")
    auth_server_url: Optional[str] = Field(None, alias="auth-server-url")
    ssl_required: Optional[str] = Field(None, alias="ssl-required")
    bearer_only: Optional[bool] = Field(None, alias="bearer-only")
    resource: Optional[str] = None
    public_client: Optional[bool] = Field(None, alias="public-client")
    verify_token_audience: Optional[bool] = Field(None, alias="verify-token-audience")
    credentials: Optional[Mapping[str, Any]] = None
    use_resource_role_mappings: Optional[bool] = Field(
        None, alias="use-resource-role-mappings"
    )
    confidential_port: Optional[int] = Field(None, alias="confidential-port")
    policy_enforcer: Optional[PolicyEnforcerConfig] = Field(
        None, alias="policy-enforcer"
    )


class AbstractPolicyRepresentation(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None
    type: Optional[str] = None
    policies: Optional[Sequence[str]] = Field(None, unique_items=True)
    resources: Optional[Sequence[str]] = Field(None, unique_items=True)
    scopes: Optional[Sequence[str]] = Field(None, unique_items=True)
    logic: Optional[Logic] = None
    decision_strategy: Optional[DecisionStrategy] = Field(
        None, alias="decisionStrategy"
    )
    owner: Optional[str] = None
    resource_type: Optional[str] = Field(None, alias="resourceType")
    resources_data: Optional[Sequence[ResourceRepresentation]] = Field(
        None, alias="resourcesData", unique_items=True
    )
    scopes_data: Optional[Sequence[ScopeRepresentation]] = Field(
        None, alias="scopesData", unique_items=True
    )


class ApplicationRepresentation(BaseModel):
    id: Optional[str] = None
    client_id: Optional[str] = Field(None, alias="clientId")
    description: Optional[str] = None
    type: Optional[str] = None
    root_url: Optional[str] = Field(None, alias="rootUrl")
    admin_url: Optional[str] = Field(None, alias="adminUrl")
    base_url: Optional[str] = Field(None, alias="baseUrl")
    surrogate_auth_required: Optional[bool] = Field(None, alias="surrogateAuthRequired")
    enabled: Optional[bool] = None
    always_display_in_console: Optional[bool] = Field(
        None, alias="alwaysDisplayInConsole"
    )
    client_authenticator_type: Optional[str] = Field(
        None, alias="clientAuthenticatorType"
    )
    secret: Optional[str] = None
    registration_access_token: Optional[str] = Field(
        None, alias="registrationAccessToken"
    )
    default_roles: Optional[Sequence[str]] = Field(None, alias="defaultRoles")
    redirect_uris: Optional[Sequence[str]] = Field(None, alias="redirectUris")
    web_origins: Optional[Sequence[str]] = Field(None, alias="webOrigins")
    not_before: Optional[int] = Field(None, alias="notBefore")
    bearer_only: Optional[bool] = Field(None, alias="bearerOnly")
    consent_required: Optional[bool] = Field(None, alias="consentRequired")
    standard_flow_enabled: Optional[bool] = Field(None, alias="standardFlowEnabled")
    implicit_flow_enabled: Optional[bool] = Field(None, alias="implicitFlowEnabled")
    direct_access_grants_enabled: Optional[bool] = Field(
        None, alias="directAccessGrantsEnabled"
    )
    service_accounts_enabled: Optional[bool] = Field(
        None, alias="serviceAccountsEnabled"
    )
    authorization_services_enabled: Optional[bool] = Field(
        None, alias="authorizationServicesEnabled"
    )
    direct_grants_only: Optional[bool] = Field(None, alias="directGrantsOnly")
    public_client: Optional[bool] = Field(None, alias="publicClient")
    frontchannel_logout: Optional[bool] = Field(None, alias="frontchannelLogout")
    protocol: Optional[str] = None
    attributes: Optional[Mapping[str, str]] = None
    authentication_flow_binding_overrides: Optional[Mapping[str, str]] = Field(
        None, alias="authenticationFlowBindingOverrides"
    )
    full_scope_allowed: Optional[bool] = Field(None, alias="fullScopeAllowed")
    node_re_registration_timeout: Optional[int] = Field(
        None, alias="nodeReRegistrationTimeout"
    )
    registered_nodes: Optional[Mapping[str, int]] = Field(None, alias="registeredNodes")
    protocol_mappers: Optional[Sequence[ProtocolMapperRepresentation]] = Field(
        None, alias="protocolMappers"
    )
    client_template: Optional[str] = Field(None, alias="clientTemplate")
    use_template_config: Optional[bool] = Field(None, alias="useTemplateConfig")
    use_template_scope: Optional[bool] = Field(None, alias="useTemplateScope")
    use_template_mappers: Optional[bool] = Field(None, alias="useTemplateMappers")
    default_client_scopes: Optional[Sequence[str]] = Field(
        None, alias="defaultClientScopes"
    )
    optional_client_scopes: Optional[Sequence[str]] = Field(
        None, alias="optionalClientScopes"
    )
    authorization_settings: Optional[ResourceServerRepresentation] = Field(
        None, alias="authorizationSettings"
    )
    access: Optional[Mapping[str, bool]] = None
    origin: Optional[str] = None
    name: Optional[str] = None
    claims: Optional[ClaimRepresentation] = None


class ClientRepresentation(BaseModel):
    id: Optional[str] = None
    client_id: Optional[str] = Field(None, alias="clientId")
    name: Optional[str] = None
    description: Optional[str] = None
    type: Optional[str] = None
    root_url: Optional[str] = Field(None, alias="rootUrl")
    admin_url: Optional[str] = Field(None, alias="adminUrl")
    base_url: Optional[str] = Field(None, alias="baseUrl")
    surrogate_auth_required: Optional[bool] = Field(None, alias="surrogateAuthRequired")
    enabled: Optional[bool] = None
    always_display_in_console: Optional[bool] = Field(
        None, alias="alwaysDisplayInConsole"
    )
    client_authenticator_type: Optional[str] = Field(
        None, alias="clientAuthenticatorType"
    )
    secret: Optional[str] = None
    registration_access_token: Optional[str] = Field(
        None, alias="registrationAccessToken"
    )
    default_roles: Optional[Sequence[str]] = Field(None, alias="defaultRoles")
    redirect_uris: Optional[Sequence[str]] = Field(None, alias="redirectUris")
    web_origins: Optional[Sequence[str]] = Field(None, alias="webOrigins")
    not_before: Optional[int] = Field(None, alias="notBefore")
    bearer_only: Optional[bool] = Field(None, alias="bearerOnly")
    consent_required: Optional[bool] = Field(None, alias="consentRequired")
    standard_flow_enabled: Optional[bool] = Field(None, alias="standardFlowEnabled")
    implicit_flow_enabled: Optional[bool] = Field(None, alias="implicitFlowEnabled")
    direct_access_grants_enabled: Optional[bool] = Field(
        None, alias="directAccessGrantsEnabled"
    )
    service_accounts_enabled: Optional[bool] = Field(
        None, alias="serviceAccountsEnabled"
    )
    authorization_services_enabled: Optional[bool] = Field(
        None, alias="authorizationServicesEnabled"
    )
    direct_grants_only: Optional[bool] = Field(None, alias="directGrantsOnly")
    public_client: Optional[bool] = Field(None, alias="publicClient")
    frontchannel_logout: Optional[bool] = Field(None, alias="frontchannelLogout")
    protocol: Optional[str] = None
    attributes: Optional[Mapping[str, str]] = None
    authentication_flow_binding_overrides: Optional[Mapping[str, str]] = Field(
        None, alias="authenticationFlowBindingOverrides"
    )
    full_scope_allowed: Optional[bool] = Field(None, alias="fullScopeAllowed")
    node_re_registration_timeout: Optional[int] = Field(
        None, alias="nodeReRegistrationTimeout"
    )
    registered_nodes: Optional[Mapping[str, int]] = Field(None, alias="registeredNodes")
    protocol_mappers: Optional[Sequence[ProtocolMapperRepresentation]] = Field(
        None, alias="protocolMappers"
    )
    client_template: Optional[str] = Field(None, alias="clientTemplate")
    use_template_config: Optional[bool] = Field(None, alias="useTemplateConfig")
    use_template_scope: Optional[bool] = Field(None, alias="useTemplateScope")
    use_template_mappers: Optional[bool] = Field(None, alias="useTemplateMappers")
    default_client_scopes: Optional[Sequence[str]] = Field(
        None, alias="defaultClientScopes"
    )
    optional_client_scopes: Optional[Sequence[str]] = Field(
        None, alias="optionalClientScopes"
    )
    authorization_settings: Optional[ResourceServerRepresentation] = Field(
        None, alias="authorizationSettings"
    )
    access: Optional[Mapping[str, bool]] = None
    origin: Optional[str] = None


class ComponentExportRepresentation(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    provider_id: Optional[str] = Field(None, alias="providerId")
    sub_type: Optional[str] = Field(None, alias="subType")
    sub_components: Optional[Mapping[str, Sequence[ComponentExportRepresentation]]] = (
        Field(None, alias="subComponents")
    )
    config: Optional[Mapping[str, Sequence[str]]] = None


class EvaluationResultRepresentation(BaseModel):
    resource: Optional[ResourceRepresentation] = None
    scopes: Optional[Sequence[ScopeRepresentation]] = None
    policies: Optional[Sequence[PolicyResultRepresentation]] = Field(
        None, unique_items=True
    )
    status: Optional[DecisionEffect] = None
    allowed_scopes: Optional[Sequence[ScopeRepresentation]] = Field(
        None, alias="allowedScopes", unique_items=True
    )
    denied_scopes: Optional[Sequence[ScopeRepresentation]] = Field(
        None, alias="deniedScopes", unique_items=True
    )


class OAuthClientRepresentation(BaseModel):
    id: Optional[str] = None
    client_id: Optional[str] = Field(None, alias="clientId")
    description: Optional[str] = None
    type: Optional[str] = None
    root_url: Optional[str] = Field(None, alias="rootUrl")
    admin_url: Optional[str] = Field(None, alias="adminUrl")
    base_url: Optional[str] = Field(None, alias="baseUrl")
    surrogate_auth_required: Optional[bool] = Field(None, alias="surrogateAuthRequired")
    enabled: Optional[bool] = None
    always_display_in_console: Optional[bool] = Field(
        None, alias="alwaysDisplayInConsole"
    )
    client_authenticator_type: Optional[str] = Field(
        None, alias="clientAuthenticatorType"
    )
    secret: Optional[str] = None
    registration_access_token: Optional[str] = Field(
        None, alias="registrationAccessToken"
    )
    default_roles: Optional[Sequence[str]] = Field(None, alias="defaultRoles")
    redirect_uris: Optional[Sequence[str]] = Field(None, alias="redirectUris")
    web_origins: Optional[Sequence[str]] = Field(None, alias="webOrigins")
    not_before: Optional[int] = Field(None, alias="notBefore")
    bearer_only: Optional[bool] = Field(None, alias="bearerOnly")
    consent_required: Optional[bool] = Field(None, alias="consentRequired")
    standard_flow_enabled: Optional[bool] = Field(None, alias="standardFlowEnabled")
    implicit_flow_enabled: Optional[bool] = Field(None, alias="implicitFlowEnabled")
    direct_access_grants_enabled: Optional[bool] = Field(
        None, alias="directAccessGrantsEnabled"
    )
    service_accounts_enabled: Optional[bool] = Field(
        None, alias="serviceAccountsEnabled"
    )
    authorization_services_enabled: Optional[bool] = Field(
        None, alias="authorizationServicesEnabled"
    )
    direct_grants_only: Optional[bool] = Field(None, alias="directGrantsOnly")
    public_client: Optional[bool] = Field(None, alias="publicClient")
    frontchannel_logout: Optional[bool] = Field(None, alias="frontchannelLogout")
    protocol: Optional[str] = None
    attributes: Optional[Mapping[str, str]] = None
    authentication_flow_binding_overrides: Optional[Mapping[str, str]] = Field(
        None, alias="authenticationFlowBindingOverrides"
    )
    full_scope_allowed: Optional[bool] = Field(None, alias="fullScopeAllowed")
    node_re_registration_timeout: Optional[int] = Field(
        None, alias="nodeReRegistrationTimeout"
    )
    registered_nodes: Optional[Mapping[str, int]] = Field(None, alias="registeredNodes")
    protocol_mappers: Optional[Sequence[ProtocolMapperRepresentation]] = Field(
        None, alias="protocolMappers"
    )
    client_template: Optional[str] = Field(None, alias="clientTemplate")
    use_template_config: Optional[bool] = Field(None, alias="useTemplateConfig")
    use_template_scope: Optional[bool] = Field(None, alias="useTemplateScope")
    use_template_mappers: Optional[bool] = Field(None, alias="useTemplateMappers")
    default_client_scopes: Optional[Sequence[str]] = Field(
        None, alias="defaultClientScopes"
    )
    optional_client_scopes: Optional[Sequence[str]] = Field(
        None, alias="optionalClientScopes"
    )
    authorization_settings: Optional[ResourceServerRepresentation] = Field(
        None, alias="authorizationSettings"
    )
    access: Optional[Mapping[str, bool]] = None
    origin: Optional[str] = None
    name: Optional[str] = None
    claims: Optional[ClaimRepresentation] = None


class PolicyEvaluationRequest(BaseModel):
    context: Optional[Mapping[str, Mapping[str, str]]] = None
    resources: Optional[Sequence[ResourceRepresentation]] = None
    resource_type: Optional[str] = Field(None, alias="resourceType")
    client_id: Optional[str] = Field(None, alias="clientId")
    user_id: Optional[str] = Field(None, alias="userId")
    role_ids: Optional[Sequence[str]] = Field(None, alias="roleIds")
    entitlements: Optional[bool] = None


class PolicyEvaluationResponse(BaseModel):
    results: Optional[Sequence[EvaluationResultRepresentation]] = None
    entitlements: Optional[bool] = None
    status: Optional[DecisionEffect] = None
    rpt: Optional[AccessToken] = None


class PolicyRepresentation(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None
    type: Optional[str] = None
    policies: Optional[Sequence[str]] = Field(None, unique_items=True)
    resources: Optional[Sequence[str]] = Field(None, unique_items=True)
    scopes: Optional[Sequence[str]] = Field(None, unique_items=True)
    logic: Optional[Logic] = None
    decision_strategy: Optional[DecisionStrategy] = Field(
        None, alias="decisionStrategy"
    )
    owner: Optional[str] = None
    resource_type: Optional[str] = Field(None, alias="resourceType")
    resources_data: Optional[Sequence[ResourceRepresentation]] = Field(
        None, alias="resourcesData", unique_items=True
    )
    scopes_data: Optional[Sequence[ScopeRepresentation]] = Field(
        None, alias="scopesData", unique_items=True
    )
    config: Optional[Mapping[str, str]] = None


class PolicyResultRepresentation(BaseModel):
    policy: Optional[PolicyRepresentation] = None
    status: Optional[DecisionEffect] = None
    associated_policies: Optional[Sequence[PolicyResultRepresentation]] = Field(
        None, alias="associatedPolicies"
    )
    scopes: Optional[Sequence[str]] = Field(None, unique_items=True)
    resource_type: Optional[str] = Field(None, alias="resourceType")


class RealmRepresentation(BaseModel):
    id: Optional[str] = None
    realm: Optional[str] = None
    display_name: Optional[str] = Field(None, alias="displayName")
    display_name_html: Optional[str] = Field(None, alias="displayNameHtml")
    not_before: Optional[int] = Field(None, alias="notBefore")
    default_signature_algorithm: Optional[str] = Field(
        None, alias="defaultSignatureAlgorithm"
    )
    revoke_refresh_token: Optional[bool] = Field(None, alias="revokeRefreshToken")
    refresh_token_max_reuse: Optional[int] = Field(None, alias="refreshTokenMaxReuse")
    access_token_lifespan: Optional[int] = Field(None, alias="accessTokenLifespan")
    access_token_lifespan_for_implicit_flow: Optional[int] = Field(
        None, alias="accessTokenLifespanForImplicitFlow"
    )
    sso_session_idle_timeout: Optional[int] = Field(None, alias="ssoSessionIdleTimeout")
    sso_session_max_lifespan: Optional[int] = Field(None, alias="ssoSessionMaxLifespan")
    sso_session_idle_timeout_remember_me: Optional[int] = Field(
        None, alias="ssoSessionIdleTimeoutRememberMe"
    )
    sso_session_max_lifespan_remember_me: Optional[int] = Field(
        None, alias="ssoSessionMaxLifespanRememberMe"
    )
    offline_session_idle_timeout: Optional[int] = Field(
        None, alias="offlineSessionIdleTimeout"
    )
    offline_session_max_lifespan_enabled: Optional[bool] = Field(
        None, alias="offlineSessionMaxLifespanEnabled"
    )
    offline_session_max_lifespan: Optional[int] = Field(
        None, alias="offlineSessionMaxLifespan"
    )
    client_session_idle_timeout: Optional[int] = Field(
        None, alias="clientSessionIdleTimeout"
    )
    client_session_max_lifespan: Optional[int] = Field(
        None, alias="clientSessionMaxLifespan"
    )
    client_offline_session_idle_timeout: Optional[int] = Field(
        None, alias="clientOfflineSessionIdleTimeout"
    )
    client_offline_session_max_lifespan: Optional[int] = Field(
        None, alias="clientOfflineSessionMaxLifespan"
    )
    access_code_lifespan: Optional[int] = Field(None, alias="accessCodeLifespan")
    access_code_lifespan_user_action: Optional[int] = Field(
        None, alias="accessCodeLifespanUserAction"
    )
    access_code_lifespan_login: Optional[int] = Field(
        None, alias="accessCodeLifespanLogin"
    )
    action_token_generated_by_admin_lifespan: Optional[int] = Field(
        None, alias="actionTokenGeneratedByAdminLifespan"
    )
    action_token_generated_by_user_lifespan: Optional[int] = Field(
        None, alias="actionTokenGeneratedByUserLifespan"
    )
    oauth2_device_code_lifespan: Optional[int] = Field(
        None, alias="oauth2DeviceCodeLifespan"
    )
    oauth2_device_polling_interval: Optional[int] = Field(
        None, alias="oauth2DevicePollingInterval"
    )
    enabled: Optional[bool] = None
    ssl_required: Optional[str] = Field(None, alias="sslRequired")
    password_credential_grant_allowed: Optional[bool] = Field(
        None, alias="passwordCredentialGrantAllowed"
    )
    registration_allowed: Optional[bool] = Field(None, alias="registrationAllowed")
    registration_email_as_username: Optional[bool] = Field(
        None, alias="registrationEmailAsUsername"
    )
    remember_me: Optional[bool] = Field(None, alias="rememberMe")
    verify_email: Optional[bool] = Field(None, alias="verifyEmail")
    login_with_email_allowed: Optional[bool] = Field(
        None, alias="loginWithEmailAllowed"
    )
    duplicate_emails_allowed: Optional[bool] = Field(
        None, alias="duplicateEmailsAllowed"
    )
    reset_password_allowed: Optional[bool] = Field(None, alias="resetPasswordAllowed")
    edit_username_allowed: Optional[bool] = Field(None, alias="editUsernameAllowed")
    user_cache_enabled: Optional[bool] = Field(None, alias="userCacheEnabled")
    realm_cache_enabled: Optional[bool] = Field(None, alias="realmCacheEnabled")
    brute_force_protected: Optional[bool] = Field(None, alias="bruteForceProtected")
    permanent_lockout: Optional[bool] = Field(None, alias="permanentLockout")
    max_temporary_lockouts: Optional[int] = Field(None, alias="maxTemporaryLockouts")
    brute_force_strategy: Optional[BruteForceStrategy] = Field(
        None, alias="bruteForceStrategy"
    )
    max_failure_wait_seconds: Optional[int] = Field(None, alias="maxFailureWaitSeconds")
    minimum_quick_login_wait_seconds: Optional[int] = Field(
        None, alias="minimumQuickLoginWaitSeconds"
    )
    wait_increment_seconds: Optional[int] = Field(None, alias="waitIncrementSeconds")
    quick_login_check_milli_seconds: Optional[int] = Field(
        None, alias="quickLoginCheckMilliSeconds"
    )
    max_delta_time_seconds: Optional[int] = Field(None, alias="maxDeltaTimeSeconds")
    failure_factor: Optional[int] = Field(None, alias="failureFactor")
    private_key: Optional[str] = Field(None, alias="privateKey")
    public_key: Optional[str] = Field(None, alias="publicKey")
    certificate: Optional[str] = None
    code_secret: Optional[str] = Field(None, alias="codeSecret")
    roles: Optional[RolesRepresentation] = None
    groups: Optional[Sequence[GroupRepresentation]] = None
    default_roles: Optional[Sequence[str]] = Field(None, alias="defaultRoles")
    default_role: Optional[RoleRepresentation] = Field(None, alias="defaultRole")
    admin_permissions_client: Optional[ClientRepresentation] = Field(
        None, alias="adminPermissionsClient"
    )
    default_groups: Optional[Sequence[str]] = Field(None, alias="defaultGroups")
    required_credentials: Optional[Sequence[str]] = Field(
        None, alias="requiredCredentials", unique_items=True
    )
    password_policy: Optional[str] = Field(None, alias="passwordPolicy")
    otp_policy_type: Optional[str] = Field(None, alias="otpPolicyType")
    otp_policy_algorithm: Optional[str] = Field(None, alias="otpPolicyAlgorithm")
    otp_policy_initial_counter: Optional[int] = Field(
        None, alias="otpPolicyInitialCounter"
    )
    otp_policy_digits: Optional[int] = Field(None, alias="otpPolicyDigits")
    otp_policy_look_ahead_window: Optional[int] = Field(
        None, alias="otpPolicyLookAheadWindow"
    )
    otp_policy_period: Optional[int] = Field(None, alias="otpPolicyPeriod")
    otp_policy_code_reusable: Optional[bool] = Field(
        None, alias="otpPolicyCodeReusable"
    )
    otp_supported_applications: Optional[Sequence[str]] = Field(
        None, alias="otpSupportedApplications"
    )
    localization_texts: Optional[Mapping[str, Mapping[str, str]]] = Field(
        None, alias="localizationTexts"
    )
    web_authn_policy_rp_entity_name: Optional[str] = Field(
        None, alias="webAuthnPolicyRpEntityName"
    )
    web_authn_policy_signature_algorithms: Optional[Sequence[str]] = Field(
        None, alias="webAuthnPolicySignatureAlgorithms"
    )
    web_authn_policy_rp_id: Optional[str] = Field(None, alias="webAuthnPolicyRpId")
    web_authn_policy_attestation_conveyance_preference: Optional[str] = Field(
        None, alias="webAuthnPolicyAttestationConveyancePreference"
    )
    web_authn_policy_authenticator_attachment: Optional[str] = Field(
        None, alias="webAuthnPolicyAuthenticatorAttachment"
    )
    web_authn_policy_require_resident_key: Optional[str] = Field(
        None, alias="webAuthnPolicyRequireResidentKey"
    )
    web_authn_policy_user_verification_requirement: Optional[str] = Field(
        None, alias="webAuthnPolicyUserVerificationRequirement"
    )
    web_authn_policy_create_timeout: Optional[int] = Field(
        None, alias="webAuthnPolicyCreateTimeout"
    )
    web_authn_policy_avoid_same_authenticator_register: Optional[bool] = Field(
        None, alias="webAuthnPolicyAvoidSameAuthenticatorRegister"
    )
    web_authn_policy_acceptable_aaguids: Optional[Sequence[str]] = Field(
        None, alias="webAuthnPolicyAcceptableAaguids"
    )
    web_authn_policy_extra_origins: Optional[Sequence[str]] = Field(
        None, alias="webAuthnPolicyExtraOrigins"
    )
    web_authn_policy_passwordless_rp_entity_name: Optional[str] = Field(
        None, alias="webAuthnPolicyPasswordlessRpEntityName"
    )
    web_authn_policy_passwordless_signature_algorithms: Optional[Sequence[str]] = Field(
        None, alias="webAuthnPolicyPasswordlessSignatureAlgorithms"
    )
    web_authn_policy_passwordless_rp_id: Optional[str] = Field(
        None, alias="webAuthnPolicyPasswordlessRpId"
    )
    web_authn_policy_passwordless_attestation_conveyance_preference: Optional[str] = (
        Field(None, alias="webAuthnPolicyPasswordlessAttestationConveyancePreference")
    )
    web_authn_policy_passwordless_authenticator_attachment: Optional[str] = Field(
        None, alias="webAuthnPolicyPasswordlessAuthenticatorAttachment"
    )
    web_authn_policy_passwordless_require_resident_key: Optional[str] = Field(
        None, alias="webAuthnPolicyPasswordlessRequireResidentKey"
    )
    web_authn_policy_passwordless_user_verification_requirement: Optional[str] = Field(
        None, alias="webAuthnPolicyPasswordlessUserVerificationRequirement"
    )
    web_authn_policy_passwordless_create_timeout: Optional[int] = Field(
        None, alias="webAuthnPolicyPasswordlessCreateTimeout"
    )
    web_authn_policy_passwordless_avoid_same_authenticator_register: Optional[bool] = (
        Field(None, alias="webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister")
    )
    web_authn_policy_passwordless_acceptable_aaguids: Optional[Sequence[str]] = Field(
        None, alias="webAuthnPolicyPasswordlessAcceptableAaguids"
    )
    web_authn_policy_passwordless_extra_origins: Optional[Sequence[str]] = Field(
        None, alias="webAuthnPolicyPasswordlessExtraOrigins"
    )
    client_profiles: Optional[ClientProfilesRepresentation] = Field(
        None, alias="clientProfiles"
    )
    client_policies: Optional[ClientPoliciesRepresentation] = Field(
        None, alias="clientPolicies"
    )
    users: Optional[Sequence[UserRepresentation]] = None
    federated_users: Optional[Sequence[UserRepresentation]] = Field(
        None, alias="federatedUsers"
    )
    scope_mappings: Optional[Sequence[ScopeMappingRepresentation]] = Field(
        None, alias="scopeMappings"
    )
    client_scope_mappings: Optional[
        Mapping[str, Sequence[ScopeMappingRepresentation]]
    ] = Field(None, alias="clientScopeMappings")
    clients: Optional[Sequence[ClientRepresentation]] = None
    client_scopes: Optional[Sequence[ClientScopeRepresentation]] = Field(
        None, alias="clientScopes"
    )
    default_default_client_scopes: Optional[Sequence[str]] = Field(
        None, alias="defaultDefaultClientScopes"
    )
    default_optional_client_scopes: Optional[Sequence[str]] = Field(
        None, alias="defaultOptionalClientScopes"
    )
    browser_security_headers: Optional[Mapping[str, str]] = Field(
        None, alias="browserSecurityHeaders"
    )
    smtp_server: Optional[Mapping[str, str]] = Field(None, alias="smtpServer")
    user_federation_providers: Optional[
        Sequence[UserFederationProviderRepresentation]
    ] = Field(None, alias="userFederationProviders")
    user_federation_mappers: Optional[Sequence[UserFederationMapperRepresentation]] = (
        Field(None, alias="userFederationMappers")
    )
    login_theme: Optional[str] = Field(None, alias="loginTheme")
    account_theme: Optional[str] = Field(None, alias="accountTheme")
    admin_theme: Optional[str] = Field(None, alias="adminTheme")
    email_theme: Optional[str] = Field(None, alias="emailTheme")
    events_enabled: Optional[bool] = Field(None, alias="eventsEnabled")
    events_expiration: Optional[int] = Field(None, alias="eventsExpiration")
    events_listeners: Optional[Sequence[str]] = Field(None, alias="eventsListeners")
    enabled_event_types: Optional[Sequence[str]] = Field(
        None, alias="enabledEventTypes"
    )
    admin_events_enabled: Optional[bool] = Field(None, alias="adminEventsEnabled")
    admin_events_details_enabled: Optional[bool] = Field(
        None, alias="adminEventsDetailsEnabled"
    )
    identity_providers: Optional[Sequence[IdentityProviderRepresentation]] = Field(
        None, alias="identityProviders"
    )
    identity_provider_mappers: Optional[
        Sequence[IdentityProviderMapperRepresentation]
    ] = Field(None, alias="identityProviderMappers")
    protocol_mappers: Optional[Sequence[ProtocolMapperRepresentation]] = Field(
        None, alias="protocolMappers"
    )
    components: Optional[Mapping[str, Sequence[ComponentExportRepresentation]]] = None
    internationalization_enabled: Optional[bool] = Field(
        None, alias="internationalizationEnabled"
    )
    supported_locales: Optional[Sequence[str]] = Field(
        None, alias="supportedLocales", unique_items=True
    )
    default_locale: Optional[str] = Field(None, alias="defaultLocale")
    authentication_flows: Optional[Sequence[AuthenticationFlowRepresentation]] = Field(
        None, alias="authenticationFlows"
    )
    authenticator_config: Optional[Sequence[AuthenticatorConfigRepresentation]] = Field(
        None, alias="authenticatorConfig"
    )
    required_actions: Optional[Sequence[RequiredActionProviderRepresentation]] = Field(
        None, alias="requiredActions"
    )
    browser_flow: Optional[str] = Field(None, alias="browserFlow")
    registration_flow: Optional[str] = Field(None, alias="registrationFlow")
    direct_grant_flow: Optional[str] = Field(None, alias="directGrantFlow")
    reset_credentials_flow: Optional[str] = Field(None, alias="resetCredentialsFlow")
    client_authentication_flow: Optional[str] = Field(
        None, alias="clientAuthenticationFlow"
    )
    docker_authentication_flow: Optional[str] = Field(
        None, alias="dockerAuthenticationFlow"
    )
    first_broker_login_flow: Optional[str] = Field(None, alias="firstBrokerLoginFlow")
    attributes: Optional[Mapping[str, str]] = None
    keycloak_version: Optional[str] = Field(None, alias="keycloakVersion")
    user_managed_access_allowed: Optional[bool] = Field(
        None, alias="userManagedAccessAllowed"
    )
    organizations_enabled: Optional[bool] = Field(None, alias="organizationsEnabled")
    organizations: Optional[Sequence[OrganizationRepresentation]] = None
    verifiable_credentials_enabled: Optional[bool] = Field(
        None, alias="verifiableCredentialsEnabled"
    )
    admin_permissions_enabled: Optional[bool] = Field(
        None, alias="adminPermissionsEnabled"
    )
    social: Optional[bool] = None
    update_profile_on_initial_social_login: Optional[bool] = Field(
        None, alias="updateProfileOnInitialSocialLogin"
    )
    social_providers: Optional[Mapping[str, str]] = Field(None, alias="socialProviders")
    application_scope_mappings: Optional[
        Mapping[str, Sequence[ScopeMappingRepresentation]]
    ] = Field(None, alias="applicationScopeMappings")
    applications: Optional[Sequence[ApplicationRepresentation]] = None
    oauth_clients: Optional[Sequence[OAuthClientRepresentation]] = Field(
        None, alias="oauthClients"
    )
    client_templates: Optional[Sequence[ClientTemplateRepresentation]] = Field(
        None, alias="clientTemplates"
    )
    o_auth2_device_code_lifespan: Optional[int] = Field(
        None, alias="oAuth2DeviceCodeLifespan"
    )
    o_auth2_device_polling_interval: Optional[int] = Field(
        None, alias="oAuth2DevicePollingInterval"
    )


class ResourceRepresentation(BaseModel):
    field_id: Optional[str] = Field(None, alias="_id")
    name: Optional[str] = None
    uris: Optional[Sequence[str]] = Field(None, unique_items=True)
    type: Optional[str] = None
    scopes: Optional[Sequence[ScopeRepresentation]] = Field(None, unique_items=True)
    icon_uri: Optional[str] = None
    owner: Optional[ResourceOwnerRepresentation] = None
    owner_managed_access: Optional[bool] = Field(None, alias="ownerManagedAccess")
    display_name: Optional[str] = Field(None, alias="displayName")
    attributes: Optional[Mapping[str, Sequence[str]]] = None
    uri: Optional[str] = None
    scopes_uma: Optional[Sequence[ScopeRepresentation]] = Field(
        None, alias="scopesUma", unique_items=True
    )


class ResourceServerRepresentation(BaseModel):
    id: Optional[str] = None
    client_id: Optional[str] = Field(None, alias="clientId")
    name: Optional[str] = None
    allow_remote_resource_management: Optional[bool] = Field(
        None, alias="allowRemoteResourceManagement"
    )
    policy_enforcement_mode: Optional[PolicyEnforcementMode] = Field(
        None, alias="policyEnforcementMode"
    )
    resources: Optional[Sequence[ResourceRepresentation]] = None
    policies: Optional[Sequence[PolicyRepresentation]] = None
    scopes: Optional[Sequence[ScopeRepresentation]] = None
    decision_strategy: Optional[DecisionStrategy] = Field(
        None, alias="decisionStrategy"
    )
    authorization_schema: Optional[AuthorizationSchema] = Field(
        None, alias="authorizationSchema"
    )


class ScopeRepresentation(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    icon_uri: Optional[str] = Field(None, alias="iconUri")
    policies: Optional[Sequence[PolicyRepresentation]] = None
    resources: Optional[Sequence[ResourceRepresentation]] = None
    display_name: Optional[str] = Field(None, alias="displayName")


ErrorRepresentation.model_rebuild()
GroupRepresentation.model_rebuild()
AbstractPolicyRepresentation.model_rebuild()
ApplicationRepresentation.model_rebuild()
ClientRepresentation.model_rebuild()
ComponentExportRepresentation.model_rebuild()
EvaluationResultRepresentation.model_rebuild()
OAuthClientRepresentation.model_rebuild()
PolicyEvaluationRequest.model_rebuild()
PolicyRepresentation.model_rebuild()
ResourceRepresentation.model_rebuild()
ResourceServerRepresentation.model_rebuild()
