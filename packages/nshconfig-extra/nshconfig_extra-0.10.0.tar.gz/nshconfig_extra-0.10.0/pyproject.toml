[project]
name = "nshconfig-extra"
version = "0.10.0"
description = ""
authors = [{ name = "Nima Shoghi", email = "nimashoghi@gmail.com" }]
requires-python = ">=3.9,<4.0"
readme = "README.md"
dependencies = ["nshconfig", "cached-path"]

[project.optional-dependencies]
ssh = ["paramiko"]
extra = ["paramiko"]
test = ["pytest>=7.0.0", "pytest-cov>=4.0.0", "pytest-mock>=3.10.0"]

[project.urls]
homepage = "https://github.com/nimashoghi/nshconfig-extra"

[tool.poetry.group.dev.dependencies]
basedpyright = "*"
ruff = "*"
ipykernel = "*"
ipywidgets = "*"
pytest = "^7.0.0"
pytest-cov = "^4.0.0"
pytest-mock = "^3.10.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "ssh: marks tests that require SSH functionality",
    "cached_path: marks tests that require cached-path functionality"
]

[tool.coverage.run]
source = ["src/nshconfig_extra"]
omit = ["*/tests/*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.basedpyright]
typeCheckingMode = "standard"
deprecateTypingAliases = true
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
reportPrivateImportUsage = "none"
reportMatchNotExhaustive = "warning"
reportOverlappingOverload = "warning"
reportUnnecessaryTypeIgnoreComment = "warning"
reportImplicitOverride = "warning"
reportIncompatibleMethodOverride = "information"

[tool.ruff.lint]
select = ["FA102", "FA100"]
ignore = ["F722", "F821", "E731", "E741"]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]
