from anytype import Anytype, Space, Object, Type, Icon

from anytype.property import (
    Text,
    Number,
    Checkbox,
    Select,
    MultiSelect,
    Date,
    Files,
    Email,
    Phone,
    Objects,
    Url,
)


import random
import string

any = Anytype()
any.auth()


# ╭──────────────────────────────────────╮
# │                Utils                 │
# ╰──────────────────────────────────────╯
def get_apispace() -> Space:
    spaces = any.get_spaces()
    for space in spaces:
        if space.name == "API":
            return space
    raise Exception("Space not found")


def random_string(length=8):
    return "".join(random.choices(string.ascii_letters + string.digits, k=length))


def random_icon():
    icons = ["🐍", "📦", "🚀", "💡", "🛠", "📘", "🎲", "🌐", "⚙️", "🧠"]
    return random.choice(icons)


def random_code_snippet():
    snippets = [
        "print('Hello World!')",
        "for i in range(5): print(i)",
        "def greet(name): return f'Hello, {name}!'",
        "import this",
        "sum([i for i in range(10)])",
    ]
    return random.choice(snippets)


def random_description():
    descriptions = [
        "Auto-generated by Python.",
        "This object is randomly created.",
        "Sample object for testing.",
        "Randomly generated content.",
        "Python API example object.",
    ]
    return random.choice(descriptions)


def random_object() -> Object:
    api_space = get_apispace()
    objtype = api_space.get_type_byname("Page")

    obj = Object(random_string(), objtype)
    obj.icon = random_icon()
    obj.body = f"`{random_code_snippet()}`"
    obj.description = random_description()

    # Create it
    created_obj = api_space.create_object(obj)
    return created_obj


# ╭──────────────────────────────────────╮
# │               Anytype                │
# ╰──────────────────────────────────────╯


def test_create_space():
    spaces = any.get_spaces()
    for space in spaces:
        if space.name == "API":
            return

    any.create_space("API")
    assert get_apispace()


def test_globalsearch():
    objects = any.global_search("")
    assert len(objects) > 0


# ╭──────────────────────────────────────╮
# │               Objects                │
# ╰──────────────────────────────────────╯
def test_get_objects():
    api_space = get_apispace()
    objects = api_space.get_objects()
    assert len(objects) > 0


def test_get_object():
    api_space = get_apispace()
    objects = api_space.get_objects()
    assert len(objects) > 0


def test_create_object():
    api_space = get_apispace()

    obj = Object()
    obj.name = "Hello World!"
    obj.icon = "🐍"
    obj.body = "`print('Hello World!')`"
    obj.description = "This is an object created from Python Api"

    objtype = api_space.get_type_byname("Page")
    obj.add_title1("Test!")
    obj.add_title2("Test!")
    obj.add_title3("Test!")
    obj.add_text("normal text")
    obj.add_codeblock("print('Hello World!')")
    obj.add_bullet("Hello World!")
    obj.add_checkbox("Hello World!")
    obj.add_image(
        "https://raw.githubusercontent.com/charlesneimog/"
        + "anytype-client/refs/heads/main/resources/pdf.png"
    )
    obj.add_image(
        "https://raw.githubusercontent.com/charlesneimog/"
        + "anytype-client/refs/heads/main/resources/pdf.png",
        alt="PDF",
        title="PDF",
    )

    created_obj = api_space.create_object(obj, objtype)
    assert created_obj.name == "Hello World!"
    assert created_obj.icon.emoji == "🐍"
    assert created_obj.description == "This is an object created from Python Api"

    # best way to create object
    obj2 = Object("Hello World 2!", objtype)
    obj2.icon = "🐍"
    obj2.body = "`print('Hello World!')`"
    obj2.description = "This is an object created from Python Api"
    created_obj = api_space.create_object(obj2)
    assert created_obj.name == "Hello World 2!"
    assert created_obj.icon.emoji == "🐍"
    assert created_obj.description == "This is an object created from Python Api"


def test_update_object():
    api_space = get_apispace()

    objtype = api_space.get_type_byname("Page")

    obj3 = Object("Hello World 3!", objtype)
    obj3.icon = "🐍"
    obj3.body = "`print('Hello World!')`"
    obj3.description = "This is an object created from Python Api"
    created_obj = api_space.create_object(obj3)

    assert created_obj.name == "Hello World 3!"
    assert created_obj.icon.emoji == "🐍"
    assert created_obj.description == "This is an object created from Python Api"

    created_obj.icon = "🤯"
    api_space.update_object(created_obj)


def test_delete_object():
    api_space = get_apispace()
    objtype = api_space.get_type_byname("Page")
    obj_to_delete = Object("Object to delete", objtype)
    obj_to_delete.icon = "🗑️"
    obj_to_delete.body = "`print('Hello World!')`"
    obj_to_delete.description = "This is an object created from Python Api"
    created_obj = api_space.create_object(obj_to_delete)
    api_space.delete_object(created_obj)


# ╭──────────────────────────────────────╮
# │                Types                 │
# ╰──────────────────────────────────────╯
def test_create_type():
    api_space = get_apispace()
    article_type = Type("Artigo")
    article_type.icon = Icon()
    article_type.layout = "basic"
    article_type.plural_name = "Artigos"

    article_type.add_property(Text("Doi"))
    article_type.add_property(Number("Publication Year"))
    article_type.add_property(MultiSelect("Authors"))
    article_type.add_property(Checkbox("Readed"))

    article_type = api_space.create_type(article_type)
    id = article_type.id

    assert api_space.get_type(article_type.id).id == id


def test_update_type():
    api_space = get_apispace()
    article_type = Type("ToUpdate")
    article_type.icon = Icon()
    article_type.layout = "basic"
    article_type.plural_name = "ToUpdates"
    article_type.add_property(Text("TextProp"))
    created = api_space.create_type(article_type)
    assert created.icon.emoji == article_type.icon.emoji

    created.icon = Icon("🤯")
    updated_type = api_space.update_type(created)
    assert updated_type.icon.emoji == "🤯"


def test_delete_type():
    api_space = get_apispace()
    article_type = Type("ToDelete")
    article_type.icon = Icon()
    article_type.layout = "basic"
    article_type.plural_name = "ToDeletes"

    article_type.add_property(Text("Doi"))
    article_type.add_property(Number("Publication Year"))
    article_type.add_property(MultiSelect("Authors"))
    article_type.add_property(Checkbox("Readed"))

    article_type = api_space.create_type(article_type)

    api_space.delete_type(article_type)


def test_get_type_byname():
    api_space = get_apispace()
    page = api_space.get_type_byname("Page")
    assert page


def test_create_types():
    api_space = get_apispace()
    types = api_space.get_types()
    assert len(types) > 0


# ╭──────────────────────────────────────╮
# │                Member                │
# ╰──────────────────────────────────────╯
def test_get_members():
    api_space = get_apispace()
    members = api_space.get_members()
    assert len(members) > 0


def test_get_member():
    api_space = get_apispace()
    members = api_space.get_members()
    assert len(members) > 0
    member = members[0]
    member = api_space.get_member(member)


# ╭──────────────────────────────────────╮
# │             Collections              │
# ╰──────────────────────────────────────╯
def test_get_listviews():
    api_space = get_apispace()
    type = api_space.get_type_byname("Page")
    objects = api_space.get_listviews(type)
    assert len(objects) > 0


def test_get_add_and_delete_object():
    api_space = get_apispace()
    objtype = api_space.get_type_byname("Collection")

    collection = Object("MyCollection", objtype)
    collection.icon = "🐍"
    collection.description = "This is an object created from Python Api"
    collection = api_space.create_object(collection)

    collection_all = api_space.get_listviews(collection)[0]

    objs = []
    for i in range(10):
        obj = random_object()
        collection_all.add_objectinlistview(obj)
        if i > 4:
            objs.append(obj)

    for obj in objs:
        collection_all.delete_objectinlistview(obj)

    view = api_space.get_listviews(collection)[0]
    all_objs = view.get_objectsinlistview()
    assert len(all_objs) == 5


# ╭──────────────────────────────────────╮
# │              Properties              │
# ╰──────────────────────────────────────╯
def test_get_properties():
    api_space = get_apispace()
    props = api_space.get_properties()
    assert len(props) > 0
    assert isinstance(props, list)
    assert all(hasattr(p, "id") for p in props)


def test_create_property():
    api_space = get_apispace()
    name = f"TestProp_{random_string(5)}"
    prop = api_space.create_property(Text(name))
    assert prop.name == name
    assert prop.format == "text"


def test_get_property():
    api_space = get_apispace()
    name = f"TestProp_{random_string(5)}"
    prop_created = api_space.create_property(Text(name))
    prop_fetched = api_space.get_property(prop_created.id)
    assert prop_fetched.id == prop_created.id
    assert prop_fetched.name == prop_created.name


def test_get_property_bykey():
    api_space = get_apispace()
    name = f"TestProp_{random_string(5)}"
    prop = api_space.create_property(Text(name))

    fetched_prop = api_space.get_property_bykey(prop.key)
    assert fetched_prop.key == prop.key
    assert fetched_prop.name == prop.name


def test_testproperties():
    api_space = get_apispace()
    prop_test_type = Type("TestProperty")
    prop_test_type.icon = Icon()
    prop_test_type.layout = "basic"
    prop_test_type.plural_name = "TestProperties"

    prop_test_type.add_property(Text("prop_text"))
    prop_test_type.add_property(Number("prop_number"))
    prop_test_type.add_property(Select("prop_select"))
    prop_test_type.add_property(MultiSelect("prop_multi"))
    prop_test_type.add_property(Date("prop_date"))
    # article_type.add_property(Files("prop_files"))
    prop_test_type.add_property(Checkbox("prop_checkbox"))
    prop_test_type.add_property(Url("prop_url"))
    prop_test_type.add_property(Email("prop_email"))
    prop_test_type.add_property(Phone("prop_phone"))
    prop_test_type.add_property(Objects("prop_objects"))

    prop_test_type = api_space.create_type(prop_test_type)

    # Test
    obj = Object("My Property Object", prop_test_type)
    obj.icon = "🐍"
    obj.body = "`print('Hello World!')`"
    obj.description = "This is an object created from Python Api"

    obj.properties["prop_text"].value = "My Text"
    obj.properties["prop_number"].value = 12389
    obj.properties["prop_select"].value = "Test"
    obj.properties["prop_multi"].value = ["Test1", "Test2"]
    obj.properties["prop_date"].value = "27/03/2025"
    obj.properties["prop_checkbox"].value = True
    obj.properties["prop_url"].value = "https://charlesneimog.github.io"
    obj.properties["prop_email"].value = "myemail@email.com"
    obj.properties["prop_phone"].value = "+55112233445566"

    api_space.create_object(obj)
