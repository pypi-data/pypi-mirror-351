from typing import Literal
import math
import sys

# TODO: Documentation - pydisseqt and disseqt should be identical

# This file might be generated automatically in the future:
# https://github.com/PyO3/pyo3/issues/2454


class RfPulseSample:
    def __init__(self) -> None:
        self.amplitude: float = ...
        self.phase: float = ...
        self.frequency: float = ...
        self.shim: list[tuple[float, float]] | None = ...


class RfPulseSampleVec:
    def __init__(self) -> None:
        self.amplitude: list[float] = ...
        self.phase: list[float] = ...
        self.frequency: list[float] = ...
        self.shim: list[list[tuple[float, float]] | None] = ...


class GradientSample:
    def __init__(self) -> None:
        self.x: float = ...
        self.y: float = ...
        self.z: float = ...


class GradientSampleVec:
    def __init__(self) -> None:
        self.x: list[float] = ...
        self.y: list[float] = ...
        self.z: list[float] = ...


class AdcBlockSample:
    def __init__(self) -> None:
        self.active: bool = ...
        self.phase: float = ...
        self.frequency: float = ...


class AdcBlockSampleVec:
    def __init__(self) -> None:
        self.active: list[bool] = ...
        self.phase: list[float] = ...
        self.frequency: list[float] = ...


class Sample:
    def __init__(self) -> None:
        self.pulse: RfPulseSample = ...
        self.gradient: GradientSample = ...
        self.adc: AdcBlockSample = ...


class SampleVec:
    def __init__(self) -> None:
        self.pulse: RfPulseSampleVec = ...
        self.gradient: GradientSampleVec = ...
        self.adc: AdcBlockSampleVec = ...


class RfPulseMoment:
    def __init__(self) -> None:
        self.angle: float = ...
        self.phase: float = ...


class RfPulseMomentVec:
    def __init__(self) -> None:
        self.angle: list[float] = ...
        self.phase: list[float] = ...


class GradientMoment:
    def __init__(self) -> None:
        self.x: float = ...
        self.y: float = ...
        self.z: float = ...


class GradientMomentVec:
    def __init__(self) -> None:
        self.x: list[float] = ...
        self.y: list[float] = ...
        self.z: list[float] = ...


class Moment:
    def __init__(self) -> None:
        self.pulse: RfPulseMoment = ...
        self.gradient: GradientMoment = ...


class MomentVec:
    def __init__(self) -> None:
        self.pulse: RfPulseMomentVec = ...
        self.gradient: GradientMomentVec = ...


class Sequence:
    def fov(self) -> tuple[float, float, float] | None: ...
    def duration(self) -> float: ...
    def encounter(self, ty: Literal["rf", "adc", "grad x", "grad y", "grad z"], t_start: float) -> tuple[float, float] | None: ...
    def events(self, ty: Literal["rf", "adc", "grad x", "grad y", "grad z"], t_start: float = -math.inf, t_end: float = math.inf, max_count: int = sys.maxsize) -> list[float]: ...
    def next_event(self, ty: Literal["rf", "adc", "grad x", "grad y", "grad z"], t_start: float) -> float | None: ...
    def integrate(self, time: list[float]) -> MomentVec: ...
    def integrate_one(self, t_start: float, t_end: float) -> Moment: ...
    def sample(self, time: list[float]) -> SampleVec: ...
    def sample_one(self, t: float) -> Sample: ...


def load_pulseq(path: str) -> Sequence: ...

def load_dsv(path: str, ref_voltage: float, resolution: int | None) -> Sequence: ...
