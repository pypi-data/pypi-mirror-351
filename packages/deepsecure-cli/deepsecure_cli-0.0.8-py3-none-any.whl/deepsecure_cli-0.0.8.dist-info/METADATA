Metadata-Version: 2.4
Name: deepsecure-cli
Version: 0.0.8
Summary: DeepSecure CLI: Secure AI Development Control Plane
Author-email: DeepSecure Team <mahendra@deeptrail.com>
License: Apache-2.0
Project-URL: Homepage, https://github.com/deeptrail/deepsecure-cli
Project-URL: Bug Tracker, https://github.com/deeptrail/deepsecure-cli/issues
Project-URL: Documentation, https://deepsecure.dev/docs
Keywords: security,ai,cli,credentials,vault,policy,sandbox
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Information Technology
Classifier: Intended Audience :: System Administrators
Classifier: Topic :: Security
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: typer[all]>=0.9.0
Requires-Dist: rich>=13.0.0
Requires-Dist: keyring>=24.0.0
Requires-Dist: requests>=2.30.0
Requires-Dist: toml>=0.10.2
Requires-Dist: pydantic>=2.0.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Requires-Dist: isort>=5.0.0; extra == "dev"
Requires-Dist: flake8>=6.0.0; extra == "dev"
Requires-Dist: build>=0.10.0; extra == "dev"
Requires-Dist: twine>=4.0.0; extra == "dev"
Dynamic: license-file

# DeepSecure CLI

DeepSecure CLI is the command-line security control plane for developers and security engineers building secure AI agents, MCP servers, and applications.

[![PyPI version](https://badge.fury.io/py/deepsecure-cli.svg)](https://badge.fury.io/py/deepsecure-cli)
[![License](https://img.shields.io/badge/License-Apache_2.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)

## Features

DeepSecure CLI offers a comprehensive suite of tools for securing AI agents, MCP servers, and applications:

- **ü§ñ Agent Identity Management:** Explicitly register, list, describe, and manage the lifecycle of AI agents.
- **üîê Credential Management:** Issue, revoke, and rotate secure credentials
- **üß† Identity Risk & Behavior Monitoring:** Audit trails and risk scoring
- **üõ°Ô∏è Policy Enforcement:** Runtime policy application and sandboxing
- **üîé Credential Scanning:** Detect leaks in code, configs, or memory
- **üß∞ Server Hardening:** Secure MCP servers and deployment
- **üìä Security Scorecard:** Visibility and inventory management
- **üß© IDE Integration:** Development workflow tools

## Installation

### From PyPI (Recommended)

The easiest way to install DeepSecure CLI is from PyPI:

```bash
pip install deepsecure-cli
```

To verify installation:

```bash
deepsecure version
```

### From Source

For development or to get the latest features:

```bash
git clone https://github.com/deepsecure/deepsecure-cli
cd deepsecure-cli
pip install -e .

# With development dependencies
pip install -e ".[dev]"
```

## Quick Start

A typical workflow might involve registering an agent, then using its ID for other operations:

```bash
# Show CLI version
deepsecure version

# 1. Register a new AI agent (this will generate local keys if no public key is provided)
deepsecure agent register --name "MyWorkflowAgent" --description "Agent for automated tasks"
# (Note the agent-id output by this command, let's assume it's AGENT_ID_HERE)

# 2. List registered agents to see your new agent
deepsecure agent list

# 3. Issue a credential for the specific agent
# Replace AGENT_ID_HERE with the actual ID from the register command
deepsecure vault issue --agent-id "AGENT_ID_HERE" --scope="database:read" --ttl="10m"

# 4. Apply a policy to the agent (example)
# Replace AGENT_ID_HERE with the actual ID
deepsecure policy apply --agent-id "AGENT_ID_HERE" --policy-file "./path/to/agent_policy.yaml"

# 5. Get a risk score for the agent (example)
# Replace AGENT_ID_HERE with the actual ID
deepsecure risk score --agent-id "AGENT_ID_HERE"
```

## Command Overview

| Command Group | Description | Commands | Responsibilities |
|---------------|-------------|----------|------------------|
| agent     | Manage AI agent identities & lifecycle        | register, list, describe, delete| ‚Ä¢ Explicitly register agents with `credservice`<br>‚Ä¢ Manage local agent identity keys<br>‚Ä¢ List & describe agents<br>‚Ä¢ Deactivate (soft delete) agents |
| vault | Credential management | issue, revoke, rotate | ‚Ä¢ Integrate with secrets backend (e.g. Vault API)<br>‚Ä¢ Enforce TTL, scoping, audit logging |
| audit | Behavior monitoring | start, tail | ‚Ä¢ Launch or attach to audit service<br>‚Ä¢ Stream & filter logs |
| risk | Risk assessment | score, list | ‚Ä¢ Compute/lookup risk profiles<br>‚Ä¢ Format output (color-coded) |
| policy | Policy management | init, apply | ‚Ä¢ Generate policy templates<br>‚Ä¢ Validate & push policies |
| sandbox | Secure execution | run | ‚Ä¢ Spin up isolated execution environment<br>‚Ä¢ Enforce policy at runtime |
| scan | Credential scanning | local, live | ‚Ä¢ Static secret scanning<br>‚Ä¢ In-memory/process scanning |
| harden | Server hardening | server | ‚Ä¢ Wrap existing MCP server binaries<br>‚Ä¢ Inject TLS/auth middleware |
| deploy | Secure deployment | secure | ‚Ä¢ Build and push container images<br>‚Ä¢ Auto-configure secure defaults |
| scorecard | Security assessment | ‚Äî | ‚Ä¢ Evaluate project/agent against checklist<br>‚Ä¢ Export report |
| inventory | Resource tracking | list | ‚Ä¢ Discover active AI services<br>‚Ä¢ Highlight orphaned/serverless agents |
| ide | Development tools | init, suggest | ‚Ä¢ Scaffold IDE config (Cursor/VSCode)<br>‚Ä¢ Lint & suggest best practices |

See [DeepSecure Documentation](https://deepsecure.dev/docs) for complete usage details.

## Development

```bash
# Setup development environment
pip install -e ".[dev]"

# Run tests
pytest

# Build package
python -m build

# Check package
twine check dist/*

# Upload to PyPI (maintainers only)
twine upload dist/*
```

## License

Apache License 2.0 - See LICENSE file for details.
