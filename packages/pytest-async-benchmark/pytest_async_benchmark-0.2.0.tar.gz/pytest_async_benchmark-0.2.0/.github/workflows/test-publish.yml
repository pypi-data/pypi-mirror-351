name: Test Publish to TestPyPI

on:
  push:
    branches: [main]
    paths:
      - "src/**"
      - "pyproject.toml"
      - ".github/workflows/test-publish.yml"
  workflow_dispatch:
    inputs:
      test_version:
        description: "Test version suffix (e.g., rc1, beta1)"
        required: false
        default: "dev"

jobs:
  test-publish:
    name: Test Publish to TestPyPI
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Verify release readiness
        run: |
          echo "🔍 Running release readiness checks..."
          python scripts/release-check.py

      - name: Create test version
        run: |
          CURRENT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')

          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          TEST_SUFFIX="${{ github.event.inputs.test_version || 'dev' }}"
          TEST_VERSION="${CURRENT_VERSION}.${TEST_SUFFIX}${TIMESTAMP}"

          echo "Current version: $CURRENT_VERSION"
          echo "Test version: $TEST_VERSION"
          echo "TEST_VERSION=$TEST_VERSION" >> $GITHUB_ENV

          sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$TEST_VERSION\"/" pyproject.toml
          sed -i "s/__version__ = \"$CURRENT_VERSION\"/__version__ = \"$TEST_VERSION\"/" src/pytest_async_benchmark/__init__.py

      - name: Build package
        run: |
          echo "🔨 Building package with test version $TEST_VERSION..."
          uv build

          echo "📦 Built packages:"
          ls -la dist/

          find dist/ -name "*-py3-none-any.whl" ! -name "*$TEST_VERSION*" -delete
          find dist/ -name "*.tar.gz" ! -name "*$TEST_VERSION*" -delete

          echo "📦 Final packages for upload:"
          ls -la dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true
          print-hash: true

      - name: Test installation from TestPyPI
        run: |
          echo "⏳ Waiting for package to be available on TestPyPI..."
          sleep 30

          echo "📥 Testing installation from TestPyPI..."

          # Install from TestPyPI with retries
          for i in {1..5}; do
            if pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ pytest-async-benchmark==$TEST_VERSION; then
              echo "✅ Successfully installed from TestPyPI"
              break
            else
              echo "⏳ Attempt $i failed, retrying in 30 seconds..."
              sleep 30
              if [ $i -eq 5 ]; then
                echo "❌ Failed to install after 5 attempts"
                exit 1
              fi
            fi
          done

          # Test basic import and version
          python -c "
          import pytest_async_benchmark
          print(f'✅ Import successful - version: {pytest_async_benchmark.__version__}')
          assert pytest_async_benchmark.__version__ == '$TEST_VERSION', f'Version mismatch: expected $TEST_VERSION, got {pytest_async_benchmark.__version__}'
          print('✅ Version verification passed')
          "

          # Test pytest plugin discovery
          python -c "
          import pytest
          from pytest_async_benchmark.plugin import pytest_configure
          print('✅ Pytest plugin can be imported and configured')
          "

          # Test that the fixture is available
          echo 'def test_fixture_available(async_benchmark): pass' > test_temp.py
          python -m pytest test_temp.py --collect-only | grep "async_benchmark" && echo "✅ async_benchmark fixture is discoverable" || echo "⚠️ Fixture discovery test failed"
          rm -f test_temp.py

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-dist-packages
          path: dist/
          retention-days: 7

      - name: Summary
        run: |
          echo "## 🧪 Test Publish Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Version:** \`$TEST_VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "- **TestPyPI URL:** https://test.pypi.org/project/pytest-async-benchmark/$TEST_VERSION/" >> $GITHUB_STEP_SUMMARY
          echo "- **Install Command:** \`pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ pytest-async-benchmark==$TEST_VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Package successfully published to TestPyPI for testing!" >> $GITHUB_STEP_SUMMARY
