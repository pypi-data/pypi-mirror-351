"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from compass_api_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from compass_api_sdk.utils import FieldMetadata, QueryParamMetadata
from enum import Enum
from pydantic import model_serializer
from typing import Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class MorphoVaultsChain(str, Enum):
    ETHEREUM_MAINNET = "ethereum:mainnet"
    BASE_MAINNET = "base:mainnet"


MorphoVaultsBlockTypedDict = TypeAliasType(
    "MorphoVaultsBlockTypedDict", Union[int, str]
)
r"""The block number you want to get this data at."""


MorphoVaultsBlock = TypeAliasType("MorphoVaultsBlock", Union[int, str])
r"""The block number you want to get this data at."""


class MorphoVaultsRequestTypedDict(TypedDict):
    chain: MorphoVaultsChain
    block: NotRequired[MorphoVaultsBlockTypedDict]
    r"""The block number you want to get this data at."""
    deposit_token: NotRequired[Nullable[str]]
    r"""Token address that will filter vaults by this deposit token."""


class MorphoVaultsRequest(BaseModel):
    chain: Annotated[
        MorphoVaultsChain,
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = MorphoVaultsChain.ETHEREUM_MAINNET

    block: Annotated[
        Optional[MorphoVaultsBlock],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The block number you want to get this data at."""

    deposit_token: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Token address that will filter vaults by this deposit token."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["block", "deposit_token"]
        nullable_fields = ["deposit_token"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
