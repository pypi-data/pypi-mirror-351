# Dockerfile.distroless - Experimental ultra-optimized image
# Achieves ~314MB (69% reduction from original 1.03GB)

# Stage 1: Build dependencies
FROM python:3.12-slim as builder

# Build-time dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

RUN pip install -U pip uv

WORKDIR /build
COPY pyproject.toml README.md ./
COPY ./src ./src

RUN python -m venv /build/venv
ENV PATH="/build/venv/bin:$PATH"

ARG ENV=production
ENV UV_CACHE_DIR=/build/.uv
RUN --mount=type=cache,target=/build/.uv \
    if [ "$ENV" = "production" ]; then \
      uv pip install --no-cache .; \
    else \
      uv pip install --no-cache ".[dev]"; \
    fi

# Clean up build artifacts and cache
RUN find /build/venv -name "*.pyc" -delete \
    && find /build/venv -name "__pycache__" -type d -exec rm -rf {} + \
    && find /build/venv -name "*.pyo" -delete \
    && rm -rf /build/venv/lib/python*/site-packages/pip \
    && rm -rf /build/venv/lib/python*/site-packages/setuptools \
    && rm -rf /build/venv/lib/python*/site-packages/wheel

# Stage 2: Distroless final image
FROM gcr.io/distroless/python3-debian12

# Copy virtual environment from builder
COPY --from=builder /build/venv /venv

# Copy application code
COPY ./src /code/src
COPY main.py /code/

# Set environment variables
ENV PATH="/venv/bin:$PATH" \
    PYTHONPATH="/code" \
    PYTHONFAULTHANDLER=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONHASHSEED=random \
    PYTHONOPTIMIZE=2 \
    MCP_OPTIMIZER_LOG_LEVEL=INFO \
    MCP_OPTIMIZER_MAX_SOLVE_TIME=300 \
    MCP_OPTIMIZER_MAX_MEMORY_MB=1024 \
    MCP_OPTIMIZER_MAX_CONCURRENT_REQUESTS=10

WORKDIR /code

EXPOSE 8000

# Note: Distroless images don't have shell, so no healthcheck possible
# and debugging is more difficult

ENTRYPOINT ["python", "main.py"] 