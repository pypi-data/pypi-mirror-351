[project]
name = "mcp-optimizer"
version = "0.3.6"
description = "MCP server for mathematical optimization problems using PuLP and OR-Tools"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    { name = "MCP Optimizer Team" }
]
keywords = ["mcp", "optimization", "linear-programming", "or-tools", "pulp"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Mathematics",
]
dependencies = [
    "fastapi>=0.100.0",
    "fastmcp>=2.0.0",
    "pulp>=2.7.0",
    "ortools>=9.5.0",
    "pydantic>=2.0.0",
    "uvicorn>=0.20.0",
    "pydantic-settings>=2.0.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "types-requests>=2.28.0",
    "bandit>=1.7.0",
]

[project.scripts]
mcp-optimizer = "mcp_optimizer.main:cli_main"

[project.urls]
Homepage = "https://github.com/your-org/mcp-optimizer"
Repository = "https://github.com/your-org/mcp-optimizer"
Documentation = "https://github.com/your-org/mcp-optimizer/docs"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/mcp_optimizer"]

[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "UP038", # Use X | Y instead of Union for Python 3.12+
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
# Preserve type: ignore comments on the same line
docstring-code-format = false

[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_return_any = true
warn_unreachable = false
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "ortools.*",
    "pulp.*",
    "fastmcp.*",
    "uvicorn.*",
    "pydantic.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
