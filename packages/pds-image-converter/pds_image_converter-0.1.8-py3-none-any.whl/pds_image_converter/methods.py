"""Main entry points for the application that are also exposed at top-level."""

from pathlib import Path

from pds_image_converter.configs import resolve_configfile_from_name
from pds_image_converter.converter import ImageConverter
from pds_image_converter.utils import path_or_none


def convert_image(
    in_image: Path | str,
    configfile: Path | str,
    output_folder: Path | str | None,
    *,
    relative_to: Path | str | None = None,
) -> None:
    """Convert a single image using the configuration loaded from configfile.

    Output filename is automatically generated by just switching postfix to the correct
    extension depening on the writer used in the configfile.

    Args:
        in_image (Path | str): PDS4 image to be converted, either a data file or the xml
          label.
        configfile (Path | str): A toml config file with the configuration to be used.
        output_folder (Path | str | None): The output path (name will be the same as the
          input file)
        relative_to (Path | str | None, optional): Portion of in_image path to strip
        away from in_image path to maintain a relative path structure within the
          output_folder. Defaults to None.

    Raises:
        FileNotFoundError: If the input file does not exists.

    Returns:
        None

    """
    _configfile: Path = Path(configfile)  # be sure is Path

    output_folder = path_or_none(output_folder)  # convert to path or keep none
    relative_to = path_or_none(relative_to)

    if not _configfile.exists():
        _configfile = resolve_configfile_from_name(str(_configfile))

    if not _configfile.exists():
        msg = f"Could not locate config file {_configfile}"
        raise FileNotFoundError(msg)

    converter = ImageConverter.from_config(_configfile)
    converter.output_locator.output_folder = output_folder
    converter.output_locator.relative_to_folder = relative_to

    return converter(in_image)
