Metadata-Version: 2.4
Name: syqlorix
Version: 0.0.0.5
Summary: A hyper-minimal Python DSL for HTML + CSS + JS in one file.
Author-email: "Karl Benjamin R. Bughaw" <benjo@pro.space>, Syqlorix <benjo@pro.space>
License: MIT License
Project-URL: Homepage, https://github.com/Syqlorix/Syqlorix
Project-URL: Bug Tracker, https://github.com/Syqlorix/Syqlorix/issues
Project-URL: Source Code, https://github.com/Syqlorix/Syqlorix
Project-URL: Documentation, https://github.com/Syqlorix/Syqlorix#readme
Keywords: html,css,javascript,dsl,web,dominate,flask,templating
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Text Processing :: Markup :: HTML
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Dynamic: license-file

# Syqlorix: Build Hyper-Minimal Web Pages in Pure Python

![Syqlorix Logo Placeholder](https://via.placeholder.com/150x50?text=Syqlorix)

## Overview

**Syqlorix** is a futuristic Python package inspired by Flask and Dominate, designed to build full HTML documents‚Äîincluding **CSS** and **JavaScript**‚Äîfrom a **single Python script**. It offers a pure Python DSL (Domain-Specific Language) for authoring web interfaces, making it a single-file web page builder that is zero-dependency, readable, and easily embeddable for dynamic web content creation.

## Goals & Design Philosophy

üîπ **Simpler than Dominate**
üîπ **More readable than raw HTML**
üîπ **No need for separate `.html`, `.css`, or `.js` files**

### Core Design Principles

*   **All-in-One**: Write entire pages in one `.py` file.
*   **Minimal API**: Small surface area, quick to learn.
*   **Super Readable**: Feels like Markdown, acts like HTML.
*   **Framework-Ready**: Works seamlessly with Flask, Starlette, etc.
*   **Tech-Aesthetic**: Feels modern, futuristic, efficient.

## Example Usage

### Single Page Generation

```python
from syqlorix import Page

page = Page(title="Welcome to Syqlorix")

with page.body:
    page.h1("Build Pages in Python")
    page.p("No need for HTML files. This is all Python.")
    with page.div(id="features"):
        page.h2("Key Features")
        page.ul(
            page.li("HTML via functions"),
            page.li("Inline CSS/JS blocks"),
            page.li("Flask integration"),
        )
    page.button("Click Me", id="btn", _class="my-button")

page.style("""
    body { font-family: system-ui; margin: 40px; }
    #features { background: #f0f0f0; padding: 10px; border-radius: 6px; }
    .my-button { background: #0d6efd; color: white; border: none; padding: 10px 15px; border-radius: 4px; cursor: pointer; }
    .my-button:hover { background: #0a58ca; }
""")

page.script("""
    document.getElementById('btn').onclick = function() {
        alert('Clicked with Syqlorix!');
    };
""")

html_output = page.render()
print(html_output) # Output the raw HTML string
```

### Multi-Page Development Server

Create an `examples/multi_page_site.py` file to define your site's routes:

```python
# examples/multi_page_site.py
from syqlorix import Page
import datetime

home_page = Page(title="Home - My Syqlorix Site")
with home_page.body:
    home_page.h1("Welcome to Syqlorix Site!")
    home_page.p("This is the home page.")
    home_page.a("Go to About", href="/about")
    home_page.br()
    home_page.a("Go to Dynamic Page", href="/dynamic")

about_page = Page(title="About Us")
with about_page.body:
    about_page.h1("About Our Project")
    about_page.p("Syqlorix is an amazing Python DSL for web development.")
    about_page.p("It aims to simplify creating web interfaces directly in Python.")
    about_page.a("Back to Home", href="/")

def create_dynamic_page() -> Page:
    dynamic_page = Page(title="Dynamic Content")
    with dynamic_page.body:
        dynamic_page.h1("Current Time")
        dynamic_page.p(f"The current time is: {datetime.datetime.now().strftime('%H:%M:%S')}")
        dynamic_page.a("Back to Home", href="/")
    return dynamic_page

routes = {
    "/": home_page,
    "/about": about_page,
    "/dynamic": create_dynamic_page,
}

if __name__ == '__main__':
    from syqlorix import serve_pages_dev
    serve_pages_dev(routes, port=8000)
```

Then run from your terminal:
```bash
syqlorix serve examples/multi_page_site.py
```
(Ctrl+Click the link printed in the terminal to view in browser.)

### Static Site Generation (CLI)

Using the `examples/multi_page_site.py` as your site definition:
```bash
syqlorix build examples/multi_page_site.py --output public
```
This will generate `public/index.html`, `public/about/index.html`, `public/dynamic/index.html`.

### Flask Integration

```python
from flask import Flask, render_template_string
from syqlorix import Page

app = Flask(__name__)

@app.route('/')
def home():
    page = Page(title="Syqlorix with Flask")
    with page.body:
        page.h1("Hello from Flask and Syqlorix!")
        page.p("This page was generated entirely using Syqlorix within a Flask app.")
        page.div("No separate HTML templates needed!", _class="flask-info")
        page.button("Click me!", id="flaskBtn")

    page.style("""
        body { font-family: 'Arial', sans-serif; margin: 60px; background: #f8f9fa; color: #495057; text-align: center; }
        h1 { color: #6f42c1; margin-bottom: 20px; }
        .flask-info { background: #e9ecef; padding: 25px; border-radius: 8px; margin: 30px auto; max-width: 600px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); }
        button { background: #007bff; color: white; border: none; padding: 15px 30px; border-radius: 25px; cursor: pointer; font-size: 1.2em; transition: background 0.3s ease; }
        button:hover { background: #0056b3; }
    """)

    page.script("""
        document.getElementById('flaskBtn').onclick = function() {
            alert('Flask page clicked via Syqlorix JS!');
        };
    """)

    html_output = page.render()
    return render_template_string(html_output)

if __name__ == '__main__':
    # Install Flask: pip install Flask
    print("\n" + "="*50)
    print(" Flask App with Syqlorix ")
    print(" Open your browser to: http://127.0.0.1:5000/ ")
    print("="*50 + "\n")
    app.run(debug=True, port=5000)
```

## Key API Features

*   `Page(...)` ‚Üí Main class to construct a page.
*   `page.h1()`, `page.div()`, `page.ul()` ‚Üí HTML tag functions.
*   `with page.body:` ‚Üí Context-managed content creation for nesting.
*   **Components:** Python functions can serve as reusable components. Just define a function that takes a `Page` instance (or implicitly uses the `page` object if it's accessible in its scope) and generates HTML. Call the function within your page building logic.
*   `page.style(css_str)` ‚Üí Add CSS inline within a `<style>` tag in the `<head>`.
*   `page.script(js_str)` ‚Üí Add JS inline within a `<script>` tag before `</body>`.
*   `page.render()` ‚Üí Outputs the full HTML page string including `<!DOCTYPE html>`.
*   `syqlorix serve <routes_file.py>` ‚Üí CLI command to start a multi-page development server, providing a clickable link and auto-detection in Codespaces.
*   `syqlorix build <routes_file.py> -o <output_dir>` ‚Üí CLI command to generate a static site from a routes file.

## Target Use Cases

*   **Fast Prototyping**: Quickly mock up HTML content without juggling multiple files, using `syqlorix serve`.
*   **Dynamic HTML Generation**: For developers who need to generate HTML on the fly without a full-blown templating engine.
*   **Educational Tools**: A clear, Python-only way to demonstrate HTML structure.
*   **Static Site Generation**: Build simple static sites purely with Python scripts using `syqlorix build`.
*   **Small Web Services**: Embed HTML generation directly into Flask/Starlette applications.

## Name Rationale: ‚ÄúSyqlorix‚Äù

*   üí° *Invented word*: completely unique and claimable.
*   üß† *Tech-aesthetic*: futuristic, protocol-sounding.
*   üíé *Rare*: zero collisions on Google, PyPI, or GitHub.
*   ‚ö° *Brand-ready*: distinctive and pronounceable.

## Future Directions

*   `syqlorix.css()` ‚Üí Mini dict-based CSS DSL for programmatic CSS.
*   `syqlorix.include("nav.py")` ‚Üí More formal component loading mechanism if needed.
*   External Asset Linking (CSS/JS files)
*   More specialized element helpers for forms, media etc.

## Get Started (Local Installation)

1.  **Clone this repository**
2.  **Navigate to the project root** in your terminal.
3.  **Install in editable mode** (for development) or as a regular package:

    ```bash
    pip install .
    ```

    Once published to PyPI, you can install directly:
    ```bash
    pip install syqlorix
    ```

## Contributing

Contributions are welcome! Feel free to open issues or submit pull requests.

## License

This project is licensed under the MIT License - see the `LICENSE` file for details.
