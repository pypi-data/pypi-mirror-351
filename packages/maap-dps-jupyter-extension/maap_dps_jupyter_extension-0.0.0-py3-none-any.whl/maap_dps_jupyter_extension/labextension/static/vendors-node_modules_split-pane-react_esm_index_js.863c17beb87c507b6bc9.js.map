{"version":3,"file":"vendors-node_modules_split-pane-react_esm_index_js.863c17beb87c507b6bc9.js","mappings":";;;;;;;;;;;;;;;;AAAA,cAAc,SAAI,IAAI,SAAI;AAC1B;AACA;AACA;AACA;AACA,6DAA6D,cAAc;AAC3E;AACA;AACA;AACA;AACA;AAC0B;AACU;AACpC;AACA,UAAU,oCAAoC;AAC9C,YAAY,0DAAmB,wBAAwB,WAAW,iDAAU,4FAA4F,KAAK,eAAe;AAC5L;AACA,iEAAe,WAAW,EAAC;;;;;;;;;;;;;;;;;;;;;ACjB3B,cAAc,SAAI,IAAI,SAAI;AAC1B;AACA;AACA;AACA;AACA,6DAA6D,cAAc;AAC3E;AACA;AACA;AACA;AACA;AACiF;AACvD;AACA;AACc;AAC4M;AACpP;AACA;AACA,UAAU,0HAA0H,0DAAmB,CAAC,oDAAW,IAAI,gCAAgC,uHAAuH;AAC9T,iBAAiB,6CAAM,GAAG,YAAY;AACtC,oBAAoB,6CAAM;AAC1B,uBAAuB,6CAAM,GAAG,6BAA6B;AAC7D,0CAA0C,+CAAQ,GAAG;AACrD,sCAAsC,+CAAQ;AAC9C,IAAI,gDAAS;AACb;AACA;AACA,8MAA8M;AAC9M,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;AACL,YAAY,gCAAgC,EAAE,8CAAO;AACrD;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,2BAA2B,8CAAO;AAClC;AACA,+BAA+B,6CAAI;AACnC,oBAAoB,mBAAmB;AACvC,wBAAwB,kDAAW;AACnC,wBAAwB,kDAAW;AACnC;AACA;AACA,KAAK;AACL,kBAAkB,8CAAO;AACzB;AACA;AACA;AACA,yBAAyB,kDAAW;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL,yBAAyB,8CAAO;AAChC,sBAAsB,kDAAW;AACjC;AACA,sLAAsL,wDAAqB;AAC3M,yBAAyB;AACzB,+BAA+B;AAC/B;AACA;AACA,KAAK;AACL,oBAAoB,kDAAW;AAC/B;AACA,yLAAyL,wDAAqB;AAC9M,yBAAyB;AACzB,+BAA+B;AAC/B;AACA;AACA,KAAK;AACL,uBAAuB,kDAAW;AAClC,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,YAAY,0DAAmB,wBAAwB,WAAW,iDAAU,CAAC,iDAAc,0BAA0B,yDAAsB,4BAA4B,2DAAwB,gBAAgB,qDAAkB,gCAAgC;AACjQ;AACA,8CAA8C,6CAAI;AAClD;AACA,oBAAoB,0DAAmB,CAAC,6CAAI,IAAI,4BAA4B,iDAAU,CAAC,gDAAa,6DAA6D,sBAAsB,sEAAsE,GAAG;AAChQ,SAAS;AACT,2DAA2D,0DAAmB,CAAC,6CAAI,IAAI,uBAAuB,iDAAU,iBAAiB,wDAAqB;AAC9J,kBAAkB,wDAAqB;AACvC,kBAAkB,0DAAuB;AACzC;AACA;AACA,aAAa,2HAA2H;AACxI;AACA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1HzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM,IAAI,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,eAAe,IAAI,SAAS;AAC1C;AACO;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACP;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,IAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACzE4B;AACL;AACO;AACQ;AACG;AACc;;;;;;;;;;;;;;;;;ACL7B;AACX,gBAAgB,yCAAyC;AACxE,YAAY,0DAAmB,UAAU,8DAA8D;AACvG;;;;;;;;;;;;;;;;;;ACHA,cAAc,SAAI,IAAI,SAAI;AAC1B;AACA;AACA;AACA;AACA,6DAA6D,cAAc;AAC3E;AACA;AACA;AACA;AACA;AACgD;AACG;AACpC;AACf,UAAU,wDAAwD;AAClE,oBAAoB,6CAAM;AAC1B,gCAAgC,+CAAQ;AACxC,+BAA+B,+CAAQ;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAmB,wBAAwB,4BAA4B,iDAAU,CAAC,gDAAa;AAC3G;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX","sources":["webpack://maap-dps-jupyter-extension/./node_modules/split-pane-react/esm/SashContent.js","webpack://maap-dps-jupyter-extension/./node_modules/split-pane-react/esm/SplitPane.js","webpack://maap-dps-jupyter-extension/./node_modules/split-pane-react/esm/base.js","webpack://maap-dps-jupyter-extension/./node_modules/split-pane-react/esm/index.js","webpack://maap-dps-jupyter-extension/./node_modules/split-pane-react/esm/pane.js","webpack://maap-dps-jupyter-extension/./node_modules/split-pane-react/esm/sash.js"],"sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React from 'react';\nimport { classNames } from './base';\nfunction SashContent(_a) {\n    var { className, children, active, type } = _a, others = __rest(_a, [\"className\", \"children\", \"active\", \"type\"]);\n    return (React.createElement(\"div\", Object.assign({ className: classNames('split-sash-content', active && 'split-sash-content-active', type && `split-sash-content-${type}`, className) }, others), children));\n}\nexport default SashContent;\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { useEffect, useMemo, useCallback, useRef, useState } from 'react';\nimport Pane from './pane';\nimport Sash from './sash';\nimport SashContent from './SashContent';\nimport { classNames, bodyDisableUserSelect, paneClassName, splitClassName, splitDragClassName, splitVerticalClassName, splitHorizontalClassName, sashDisabledClassName, sashHorizontalClassName, sashVerticalClassName, assertsSize } from './base';\nconst SplitPane = (_a) => {\n    var _b;\n    var { children, sizes: propSizes, allowResize = true, split = 'vertical', className: wrapClassName, sashRender = (_, active) => React.createElement(SashContent, { active: active, type: 'vscode' }), resizerSize = 4, performanceMode = false, onChange = () => null, onDragStart = () => null, onDragEnd = () => null } = _a, others = __rest(_a, [\"children\", \"sizes\", \"allowResize\", \"split\", \"className\", \"sashRender\", \"resizerSize\", \"performanceMode\", \"onChange\", \"onDragStart\", \"onDragEnd\"]);\n    const axis = useRef({ x: 0, y: 0 });\n    const wrapper = useRef(null);\n    const cacheSizes = useRef({ sizes: [], sashPosSizes: [] });\n    const [wrapperRect, setWrapperRect] = useState({});\n    const [isDragging, setDragging] = useState(false);\n    useEffect(() => {\n        const resizeObserver = new ResizeObserver(() => {\n            var _a, _b;\n            setWrapperRect((_b = (_a = wrapper === null || wrapper === void 0 ? void 0 : wrapper.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) !== null && _b !== void 0 ? _b : {});\n        });\n        resizeObserver.observe(wrapper.current);\n        return () => {\n            resizeObserver.disconnect();\n        };\n    }, []);\n    const { sizeName, splitPos, splitAxis } = useMemo(() => ({\n        sizeName: split === 'vertical' ? 'width' : 'height',\n        splitPos: split === 'vertical' ? 'left' : 'top',\n        splitAxis: split === 'vertical' ? 'x' : 'y'\n    }), [split]);\n    const wrapSize = (_b = wrapperRect[sizeName]) !== null && _b !== void 0 ? _b : 0;\n    // Get limit sizes via children\n    const paneLimitSizes = useMemo(() => children.map(childNode => {\n        const limits = [0, Infinity];\n        if (childNode.type === Pane) {\n            const { minSize, maxSize } = childNode.props;\n            limits[0] = assertsSize(minSize, wrapSize, 0);\n            limits[1] = assertsSize(maxSize, wrapSize);\n        }\n        return limits;\n    }), [children, wrapSize]);\n    const sizes = useMemo(function () {\n        let count = 0;\n        let curSum = 0;\n        const res = children.map((_, index) => {\n            const size = assertsSize(propSizes[index], wrapSize);\n            size === Infinity ? count++ : curSum += size;\n            return size;\n        });\n        // resize or illegal size input,recalculate pane sizes\n        if (curSum > wrapSize || !count && curSum < wrapSize) {\n            const cacheNum = (curSum - wrapSize) / curSum;\n            return res.map(size => {\n                return size === Infinity ? 0 : size - size * cacheNum;\n            });\n        }\n        if (count > 0) {\n            const average = (wrapSize - curSum) / count;\n            return res.map(size => {\n                return size === Infinity ? average : size;\n            });\n        }\n        return res;\n    }, [...propSizes, children.length, wrapSize]);\n    const sashPosSizes = useMemo(() => (sizes.reduce((a, b) => [...a, a[a.length - 1] + b], [0])), [...sizes]);\n    const dragStart = useCallback(function (e) {\n        var _a, _b;\n        (_b = (_a = document === null || document === void 0 ? void 0 : document.body) === null || _a === void 0 ? void 0 : _a.classList) === null || _b === void 0 ? void 0 : _b.add(bodyDisableUserSelect);\n        axis.current = { x: e.pageX, y: e.pageY };\n        cacheSizes.current = { sizes, sashPosSizes };\n        setDragging(true);\n        onDragStart(e);\n    }, [onDragStart, sizes, sashPosSizes]);\n    const dragEnd = useCallback(function (e) {\n        var _a, _b;\n        (_b = (_a = document === null || document === void 0 ? void 0 : document.body) === null || _a === void 0 ? void 0 : _a.classList) === null || _b === void 0 ? void 0 : _b.remove(bodyDisableUserSelect);\n        axis.current = { x: e.pageX, y: e.pageY };\n        cacheSizes.current = { sizes, sashPosSizes };\n        setDragging(false);\n        onDragEnd(e);\n    }, [onDragEnd, sizes, sashPosSizes]);\n    const onDragging = useCallback(function (e, i) {\n        const curAxis = { x: e.pageX, y: e.pageY };\n        let distanceX = curAxis[splitAxis] - axis.current[splitAxis];\n        const leftBorder = -Math.min(sizes[i] - paneLimitSizes[i][0], paneLimitSizes[i + 1][1] - sizes[i + 1]);\n        const rightBorder = Math.min(sizes[i + 1] - paneLimitSizes[i + 1][0], paneLimitSizes[i][1] - sizes[i]);\n        if (distanceX < leftBorder) {\n            distanceX = leftBorder;\n        }\n        if (distanceX > rightBorder) {\n            distanceX = rightBorder;\n        }\n        const nextSizes = [...sizes];\n        nextSizes[i] += distanceX;\n        nextSizes[i + 1] -= distanceX;\n        onChange(nextSizes);\n    }, [paneLimitSizes, onChange]);\n    const paneFollow = !(performanceMode && isDragging);\n    const paneSizes = paneFollow ? sizes : cacheSizes.current.sizes;\n    const panePoses = paneFollow ? sashPosSizes : cacheSizes.current.sashPosSizes;\n    return (React.createElement(\"div\", Object.assign({ className: classNames(splitClassName, split === 'vertical' && splitVerticalClassName, split === 'horizontal' && splitHorizontalClassName, isDragging && splitDragClassName, wrapClassName), ref: wrapper }, others),\n        children.map((childNode, childIndex) => {\n            const isPane = childNode.type === Pane;\n            const paneProps = isPane ? childNode.props : {};\n            return (React.createElement(Pane, { key: childIndex, className: classNames(paneClassName, paneProps.className), style: Object.assign(Object.assign({}, paneProps.style), { [sizeName]: paneSizes[childIndex], [splitPos]: panePoses[childIndex] }) }, isPane ? paneProps.children : childNode));\n        }),\n        sashPosSizes.slice(1, -1).map((posSize, index) => (React.createElement(Sash, { key: index, className: classNames(!allowResize && sashDisabledClassName, split === 'vertical'\n                ? sashVerticalClassName\n                : sashHorizontalClassName), style: {\n                [sizeName]: resizerSize,\n                [splitPos]: posSize - resizerSize / 2\n            }, render: sashRender.bind(null, index), onDragStart: dragStart, onDragging: e => onDragging(e, index), onDragEnd: dragEnd })))));\n};\nexport default SplitPane;\n","/**\n * Element names may consist of Latin letters, digits, dashes and underscores.\n * CSS class is formed as block name plus two underscores plus element name: .block__elem\n * @param block\n * @param element\n */\nfunction getBEMElement(block, element) {\n    return `${block}__${element}`;\n}\n/**\n * CSS class is formed as block’s or element’s name plus two dashes:\n * .block--mod or .block__elem--mod and .block--color-black with .block--color-red.\n * Spaces in complicated modifiers are replaced by dash.\n * @param blockOrElement\n * @param modifier\n */\nfunction getBEMModifier(blockOrElement, modifier) {\n    return `${blockOrElement}--${modifier}`;\n}\nexport const splitClassName = 'react-split';\nexport const splitDragClassName = getBEMModifier(splitClassName, 'dragging');\nexport const splitVerticalClassName = getBEMModifier(splitClassName, 'vertical');\nexport const splitHorizontalClassName = getBEMModifier(splitClassName, 'horizontal');\nexport const bodyDisableUserSelect = getBEMModifier(splitClassName, 'disabled');\nexport const paneClassName = getBEMElement(splitClassName, 'pane');\nexport const sashClassName = getBEMElement(splitClassName, 'sash');\nexport const sashVerticalClassName = getBEMModifier(sashClassName, 'vertical');\nexport const sashHorizontalClassName = getBEMModifier(sashClassName, 'horizontal');\nexport const sashDisabledClassName = getBEMModifier(sashClassName, 'disabled');\nexport const sashHoverClassName = getBEMModifier(sashClassName, 'hover');\nexport function classNames(...args) {\n    const classList = [];\n    for (const arg of args) {\n        if (!arg)\n            continue;\n        const argType = typeof arg;\n        if (argType === 'string' || argType === 'number') {\n            classList.push(`${arg}`);\n            continue;\n        }\n        if (argType === 'object') {\n            if (arg.toString !== Object.prototype.toString) {\n                classList.push(arg.toString());\n                continue;\n            }\n            for (const key in arg) {\n                if (Object.hasOwnProperty.call(arg, key) && arg[key]) {\n                    classList.push(key);\n                }\n            }\n        }\n    }\n    return classList.join(' ');\n}\n/**\n * Convert size to absolute number or Infinity\n * SplitPane allows sizes in string and number, but the state sizes only support number,\n * so convert string and number to number in here\n * 'auto' -> divide the remaining space equally\n * 'xxxpx' -> xxx\n * 'xxx%' -> wrapper.size * xxx/100\n *  xxx -> xxx\n */\nexport function assertsSize(size, sum, defaultValue = Infinity) {\n    if (typeof size === 'undefined')\n        return defaultValue;\n    if (typeof size === 'number')\n        return size;\n    if (size.endsWith('%'))\n        return sum * (+size.replace('%', '') / 100);\n    if (size.endsWith('px'))\n        return +size.replace('px', '');\n    return defaultValue;\n}\n","export * from './SplitPane';\nexport * from './pane';\nexport * from './SashContent';\nexport { default } from './SplitPane';\nexport { default as Pane } from './pane';\nexport { default as SashContent } from './SashContent';\n","import React from 'react';\nexport default function Pane({ children, style, className, role, title }) {\n    return (React.createElement(\"div\", { role: role, title: title, className: className, style: style }, children));\n}\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { useRef, useState } from 'react';\nimport { classNames, sashClassName } from './base';\nexport default function Sash(_a) {\n    var { className, render, onDragStart, onDragging, onDragEnd } = _a, others = __rest(_a, [\"className\", \"render\", \"onDragStart\", \"onDragging\", \"onDragEnd\"]);\n    const timeout = useRef(null);\n    const [active, setActive] = useState(false);\n    const [draging, setDrag] = useState(false);\n    const handleMouseMove = function (e) {\n        onDragging(e);\n    };\n    const handleMouseUp = function (e) {\n        setDrag(false);\n        onDragEnd(e);\n        window.removeEventListener('mousemove', handleMouseMove);\n        window.removeEventListener('mouseup', handleMouseUp);\n    };\n    return (React.createElement(\"div\", Object.assign({ role: \"Resizer\", className: classNames(sashClassName, className), onMouseEnter: () => {\n            timeout.current = setTimeout(() => {\n                setActive(true);\n            }, 150);\n        }, onMouseLeave: () => {\n            if (timeout.current) {\n                setActive(false);\n                clearTimeout(timeout.current);\n            }\n        }, onMouseDown: e => {\n            setDrag(true);\n            onDragStart(e);\n            window.addEventListener('mousemove', handleMouseMove);\n            window.addEventListener('mouseup', handleMouseUp);\n        } }, others), render(draging || active)));\n}\n"],"names":[],"sourceRoot":""}