#!/usr/bin/env python3
# =============================================================================
# start_local_server.py - Script pour d√©marrer le serveur FlaskTunnel local
# =============================================================================

"""
Script pour d√©marrer facilement le serveur FlaskTunnel local.
Utilisez ce script pour tester FlaskTunnel en mode local.
"""

import sys
import os
import subprocess
import signal
import time
import threading
import requests
from pathlib import Path

def check_port_available(port, host='localhost'):
    """V√©rifier si un port est disponible."""
    import socket
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            sock.settimeout(1)
            result = sock.connect_ex((host, port))
            return result != 0
    except socket.error:
        return False

def check_dependencies():
    """V√©rifier les d√©pendances requises."""
    required_packages = ['flask', 'flask-socketio', 'flask-cors', 'requests']
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print("‚ùå D√©pendances manquantes:")
        for package in missing_packages:
            print(f"   - {package}")
        print("\nüí° Installez-les avec:")
        print(f"   pip install {' '.join(missing_packages)}")
        return False
    
    return True

def wait_for_server(host='localhost', port=8080, timeout=30):
    """Attendre que le serveur soit disponible."""
    start_time = time.time()
    
    while time.time() - start_time < timeout:
        try:
            response = requests.get(f"http://{host}:{port}/api/health", timeout=2)
            if response.status_code == 200:
                return True
        except requests.RequestException:
            pass
        time.sleep(1)
    
    return False

def main():
    """Fonction principale."""
    print("üöÄ FlaskTunnel - Serveur Local")
    print("=" * 50)
    
    # V√©rifier les d√©pendances
    if not check_dependencies():
        sys.exit(1)
    
    # Configuration
    host = os.getenv('FLASKTUNNEL_HOST', 'localhost')
    port = int(os.getenv('FLASKTUNNEL_PORT', '8080'))
    
    # V√©rifier si le port est disponible
    if not check_port_available(port, host):
        print(f"‚ùå Le port {port} est d√©j√† utilis√© sur {host}")
        print("üí° Essayez un autre port ou arr√™tez le service qui l'utilise")
        sys.exit(1)
    
    print(f"üîß Configuration:")
    print(f"   - H√¥te: {host}")
    print(f"   - Port: {port}")
    print(f"   - URL: http://{host}:{port}")
    
    # Import du serveur (apr√®s v√©rification des d√©pendances)
    try:
        from flasktunnel.server import FlaskTunnelServer
    except ImportError as e:
        print(f"‚ùå Impossible d'importer le serveur FlaskTunnel: {e}")
        print("üí° Assurez-vous que le module flasktunnel est install√©")
        sys.exit(1)
    
    # Cr√©er et d√©marrer le serveur
    server = FlaskTunnelServer(host=host, port=port)
    
    # Gestionnaire de signaux pour un arr√™t propre
    def signal_handler(signum, frame):
        print("\nüõë Arr√™t du serveur...")
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        print(f"\nüü¢ D√©marrage du serveur sur http://{host}:{port}")
        print("üìä API Health Check: http://{host}:{port}/api/health")
        print("üí° Appuyez sur Ctrl+C pour arr√™ter")
        print("-" * 50)
        
        server.run(debug=False)
        
    except KeyboardInterrupt:
        print("\nüõë Serveur arr√™t√© par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur du serveur: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()