# =============================================================================
# flasktunnel/client.py - VERSION CORRIG√âE
# =============================================================================

"""Client principal FlaskTunnel."""

import requests
import time
import threading
from typing import Optional, Dict, Any, List
from .config import FlaskTunnelConfig
from .auth import FlaskTunnelAuth
from .tunnel import Tunnel, TunnelInfo, TunnelStatus
from .utils import (
    check_service_running, generate_tunnel_id, print_success, 
    print_error, print_warning, print_info, validate_subdomain
)


class FlaskTunnelClient:
    """Client FlaskTunnel pour cr√©er et g√©rer des tunnels."""
    
    def __init__(self, config: Optional[FlaskTunnelConfig] = None):
        self.config = config or FlaskTunnelConfig()
        self.server_url = self.config.get_effective_server_url()
        self.auth = FlaskTunnelAuth(self.server_url)
        self.active_tunnels: Dict[str, Tunnel] = {}
        self.session = requests.Session()
        
        # Headers par d√©faut
        self.session.headers.update({
            'User-Agent': 'FlaskTunnel-Client/1.0.0',
            'Content-Type': 'application/json'
        })
    
    def _check_server_availability(self) -> bool:
        """V√©rifier si le serveur FlaskTunnel est disponible."""
        try:
            response = self.session.get(
                f"{self.server_url}/api/health",
                timeout=5
            )
            return response.status_code == 200
        except requests.RequestException:
            return False
    
    def _suggest_alternatives(self) -> None:
        """Sugg√©rer des alternatives en cas de probl√®me de connexion."""
        print_info("Solutions possibles:")
        print("  1. V√©rifiez votre connexion internet")
        print("  2. Le service FlaskTunnel pourrait √™tre temporairement indisponible")
        print("  3. Pour un serveur local, d√©finissez FLASKTUNNEL_LOCAL_MODE=true")
        print("  4. Ou utilisez: flasktunnel --local-mode --port 5000")
        print("\nüí° Alternatives:")
        print("  - ngrok: https://ngrok.com")
        print("  - localtunnel: https://localtunnel.github.io/www/")
        print("  - serveo: https://serveo.net")
    
    def create_tunnel(
        self,
        port: int,
        subdomain: Optional[str] = None,
        password: Optional[str] = None,
        duration: str = "2h",
        cors: bool = False,
        https: bool = False,
        webhook: bool = False,
        custom_domain: Optional[str] = None,
        auth_token: Optional[str] = None
    ) -> Tunnel:
        """Cr√©er un nouveau tunnel."""
        
        # V√©rifier si le service local tourne
        if not check_service_running(port):
            print_warning(f"Aucun service d√©tect√© sur le port {port}")
            response = input(f"Voulez-vous cr√©er le tunnel quand m√™me ? (y/N): ")
            if response.lower() not in ['y', 'yes', 'o', 'oui']:
                raise Exception(f"Cr√©ation annul√©e - Aucun service sur le port {port}")
        
        # V√©rifier la disponibilit√© du serveur
        if not self._check_server_availability():
            print_error(f"Impossible de se connecter au serveur FlaskTunnel ({self.server_url})")
            if self.config.local_mode:
                print_error("Mode local activ√© mais aucun serveur local d√©tect√© sur le port 8080")
                print_info("D√©marrez le serveur FlaskTunnel local ou d√©sactivez le mode local")
            else:
                self._suggest_alternatives()
            raise Exception("Serveur FlaskTunnel inaccessible")
        
        # Validation du sous-domaine
        if subdomain and not validate_subdomain(subdomain):
            raise Exception("Nom de sous-domaine invalide")
        
        # Pr√©parer les donn√©es avec le bon nommage
        tunnel_data = {
            'port': port,
            'subdomain': subdomain,
            'password': password,
            'duration': duration,
            'cors': cors,
            'https': https,
            'webhook': webhook,
            'custom_domain': custom_domain
        }
        
        # Supprimer les valeurs None
        tunnel_data = {k: v for k, v in tunnel_data.items() if v is not None}
        
        # Pr√©parer les headers
        headers = {'Content-Type': 'application/json'}
        
        # Ajouter l'authentification si disponible
        api_key = auth_token or self.auth.get_api_key()
        if api_key:
            headers['Authorization'] = f'Bearer {api_key}'
        
        try:
            print_info(f"Envoi de la requ√™te vers: {self.server_url}/api/tunnels")
            print_info(f"Donn√©es: {tunnel_data}")
            print_info(f"Headers: {headers}")
            
            response = self.session.post(
                f"{self.server_url}/api/tunnels",
                json=tunnel_data,
                headers=headers,
                timeout=30
            )
            
            print_info(f"R√©ponse status: {response.status_code}")
            print_info(f"R√©ponse content: {response.text}")
            
            if response.status_code == 201:
                data = response.json()
                tunnel_info = TunnelInfo(
                    tunnel_id=data['tunnel_id'],
                    public_url=data['public_url'],
                    local_url=f"http://localhost:{port}",
                    subdomain=data['subdomain'],
                    status=TunnelStatus.CONNECTING,
                    created_at=time.time(),
                    expires_at=time.time() + data.get('expires_in', 7200),
                    port=port,
                    password_protected=bool(password),
                    custom_domain=custom_domain
                )
                
                tunnel = Tunnel(tunnel_info, self.server_url)
                self.active_tunnels[tunnel.tunnel_id] = tunnel
                
                # √âtablir la connexion WebSocket
                try:
                    print_info("üîå √âtablissement de la connexion WebSocket...")
                    tunnel.connect_websocket()
                    
                    # Attendre la confirmation de connexion
                    max_wait = 10  # 10 secondes max
                    waited = 0
                    while tunnel.status == TunnelStatus.CONNECTING and waited < max_wait:
                        time.sleep(0.5)
                        waited += 0.5
                    
                    if tunnel.status == TunnelStatus.CONNECTED:
                        print_success(f"Tunnel cr√©√©: {tunnel.public_url}")
                        print_info(f"Dashboard: {tunnel.dashboard_url}")
                        print_info("üöÄ Le tunnel est maintenant actif et pr√™t √† recevoir des requ√™tes")
                        return tunnel
                    else:
                        print_warning("Tunnel cr√©√© mais connexion WebSocket non confirm√©e")
                        print_info("Le tunnel pourrait ne pas fonctionner correctement")
                        return tunnel
                        
                except Exception as ws_error:
                    print_error(f"Erreur WebSocket: {ws_error}")
                    print_warning("Tunnel cr√©√© mais connexion WebSocket √©chou√©e")
                    print_info("Le tunnel ne pourra pas traiter les requ√™tes")
                    return tunnel
            
            elif response.status_code == 401:
                error_data = response.json() if response.content else {}
                error_msg = error_data.get('error', 'Authentification requise')
                print_error(f"Erreur d'authentification: {error_msg}")
                
                if 'token' in error_msg.lower() or 'auth' in error_msg.lower():
                    print_info("üí° Solutions possibles:")
                    print("  1. Le serveur peut n√©cessiter une authentification")
                    print("  2. Obtenez un token API si n√©cessaire")
                    print("  3. V√©rifiez les param√®tres du serveur")
                
                raise Exception(f"Authentification √©chou√©e: {error_msg}")
            
            elif response.status_code == 402:
                raise Exception("Plan gratuit limit√©. Upgrader vers Pro pour plus de fonctionnalit√©s.")
            elif response.status_code == 409:
                error_data = response.json()
                raise Exception(f"Sous-domaine d√©j√† utilis√©: {error_data.get('error', 'Conflit')}")
            elif response.status_code == 400:
                error_data = response.json()
                raise Exception(f"Donn√©es invalides: {error_data.get('error', 'Erreur de validation')}")
            else:
                try:
                    error_data = response.json()
                    error_msg = error_data.get('error', 'Erreur inconnue')
                except:
                    error_msg = f"Erreur HTTP {response.status_code}"
                raise Exception(f"√âchec de cr√©ation du tunnel: {error_msg}")
                
        except requests.ConnectionError as e:
            print_error(f"Erreur de connexion au serveur: {e}")
            self._suggest_alternatives()
            raise Exception("Impossible de se connecter au serveur FlaskTunnel")
        except requests.Timeout:
            raise Exception("Timeout lors de la connexion au serveur")
        except requests.RequestException as e:
            raise Exception(f"Erreur de connexion au serveur: {e}")
    
    def list_tunnels(self) -> List[Dict[str, Any]]:
        """Lister tous les tunnels actifs."""
        api_key = self.auth.get_api_key()
        if not api_key:
            print_warning("Aucune cl√© API configur√©e - impossible de lister les tunnels")
            return []
        
        if not self._check_server_availability():
            print_warning("Serveur FlaskTunnel inaccessible")
            return []
        
        try:
            response = self.session.get(
                f"{self.server_url}/api/tunnels",
                headers={'Authorization': f'Bearer {api_key}'},
                timeout=10
            )
            
            if response.status_code == 200:
                return response.json()['tunnels']
            else:
                print_warning("Impossible de r√©cup√©rer la liste des tunnels")
                return []
                
        except requests.RequestException as e:
            print_error(f"Erreur lors de la r√©cup√©ration des tunnels: {e}")
            return []
    
    def delete_tunnel(self, tunnel_id: str) -> bool:
        """Supprimer un tunnel."""
        api_key = self.auth.get_api_key()
        headers = {}
        if api_key:
            headers['Authorization'] = f'Bearer {api_key}'
        
        try:
            response = self.session.delete(
                f"{self.server_url}/api/tunnels/{tunnel_id}",
                headers=headers,
                timeout=10
            )
            
            if response.status_code == 200:
                if tunnel_id in self.active_tunnels:
                    self.active_tunnels[tunnel_id].disconnect()
                    del self.active_tunnels[tunnel_id]
                print_success(f"Tunnel {tunnel_id} supprim√©")
                return True
            else:
                print_error(f"Impossible de supprimer le tunnel {tunnel_id}")
                return False
                
        except requests.RequestException as e:
            print_error(f"Erreur lors de la suppression: {e}")
            return False
    
    def get_tunnel_stats(self, tunnel_id: str) -> Optional[Dict[str, Any]]:
        """R√©cup√©rer les statistiques d'un tunnel."""
        try:
            response = self.session.get(
                f"{self.server_url}/api/tunnels/{tunnel_id}/stats",
                timeout=10
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                return None
                
        except requests.RequestException:
            return None
    
    def test_connection(self) -> bool:
        """Tester la connexion au serveur FlaskTunnel."""
        return self._check_server_availability()
    
    def diagnose(self) -> Dict[str, Any]:
        """Effectuer un diagnostic du syst√®me."""
        results = {
            'server_connection': False,
            'local_ports': [],
            'api_key_valid': False,
            'system_info': {
                'server_url': self.server_url,
                'local_mode': self.config.local_mode
            }
        }
        
        # Test de connexion serveur
        print_info(f"Test de connexion au serveur ({self.server_url})...")
        results['server_connection'] = self.test_connection()
        
        if results['server_connection']:
            print_success("Connexion au serveur OK")
        else:
            print_error("Impossible de se connecter au serveur")
            if self.config.local_mode:
                print_info("Mode local activ√© - V√©rifiez que le serveur local tourne sur le port 8080")
            else:
                print_info("Mode production - V√©rifiez votre connexion internet")
        
        # Test des ports locaux courants
        print_info("V√©rification des ports locaux...")
        common_ports = [3000, 5000, 8000, 8080, 3001, 4000, 9000]
        
        for port in common_ports:
            if check_service_running(port):
                results['local_ports'].append(port)
                print_success(f"Service d√©tect√© sur le port {port}")
        
        if not results['local_ports']:
            print_warning("Aucun service local d√©tect√© sur les ports courants")
        
        # Test de la cl√© API
        api_key = self.auth.get_api_key()
        if api_key:
            print_info("Validation de la cl√© API...")
            results['api_key_valid'] = self.auth.validate_api_key(api_key)
            
            if results['api_key_valid']:
                print_success("Cl√© API valide")
            else:
                print_error("Cl√© API invalide ou expir√©e")
        else:
            print_info("Aucune cl√© API configur√©e (mode gratuit)")
        
        return results
    
    def close_all_tunnels(self) -> None:
        """Fermer tous les tunnels actifs."""
        for tunnel in self.active_tunnels.values():
            tunnel.disconnect()
        self.active_tunnels.clear()
        # SUPPRIMER cette ligne incorrecte :
        # if self.active_tunnels:  # Cette condition sera toujours False apr√®s clear()
        print_success("Tous les tunnels ont √©t√© ferm√©s")