# =============================================================================
# flasktunnel/cli.py  
# =============================================================================

"""Interface en ligne de commande moderne pour FlaskTunnel."""

import click
import signal
import sys
import time
import threading
from typing import Optional
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TimeRemainingColumn
from rich.layout import Layout
from rich.live import Live
from rich.text import Text
from rich.align import Align
from rich.columns import Columns
from rich.box import ROUNDED
from rich import print as rprint
from rich.prompt import Prompt, Confirm
from rich.spinner import Spinner
import pyfiglet
from datetime import datetime, timedelta

from .client import FlaskTunnelClient
from .config import FlaskTunnelConfig
from .auth import FlaskTunnelAuth
from .utils import check_service_running

# Console Rich globale avec support responsive
console = Console()

# Classe personnalis√©e pour l'aide color√©e
class ColoredHelpFormatter(click.HelpFormatter):
    """Formateur d'aide personnalis√© avec couleurs."""
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.console = Console(force_terminal=True, width=self.width if hasattr(self, 'width') else None)
    
    def write_usage(self, prog, args='', prefix='Usage: '):
        """√âcrire l'usage avec couleurs."""
        if prefix:
            self.console.print(f"[bold cyan]{prefix}[/bold cyan][white]{prog}[/white] [dim]{args}[/dim]")
        else:
            self.console.print(f"[white]{prog}[/white] [dim]{args}[/dim]")
    
    def write_heading(self, heading):
        """√âcrire les en-t√™tes avec couleurs."""
        self.console.print(f"\n[bold yellow]{heading}:[/bold yellow]")
    
    def write_paragraph(self):
        """√âcrire un paragraphe vide."""
        self.console.print()
    
    def write_text(self, text):
        """√âcrire du texte normal."""
        if text:
            self.console.print(f"[green]{text}[/green]")

class ColoredCommand(click.Command):
    """Commande Click personnalis√©e avec aide color√©e."""
    
    def get_help(self, ctx):
        """Obtenir l'aide format√©e avec couleurs."""
        formatter = ColoredHelpFormatter()
        self.format_help(ctx, formatter)
        return ""  # Rich affiche directement
    
    def format_help(self, ctx, formatter):
        """Formater l'aide avec couleurs personnalis√©es."""
        console = Console()
        
        # Banni√®re pour l'aide
        help_banner = Panel(
            "[bold cyan]FlaskTunnel CLI[/bold cyan]\n"
            "[dim]Cr√©ez des tunnels HTTP s√©curis√©s vers vos applications locales[/dim]",
            border_style="bright_blue",
            title="[bold white]üöÄ Aide FlaskTunnel[/bold white]",
        )
        console.print(help_banner)
        
        # Usage
        console.print(f"\n[bold yellow]Usage:[/bold yellow]")
        prog_name = ctx.find_root().info_name
        console.print(f"  [white]{prog_name}[/white] [dim][OPTIONS][/dim]")
        
        # Description
        if self.help:
            console.print(f"\n[bold yellow]Description:[/bold yellow]")
            console.print(f"  [green]{self.help}[/green]")
        
        # Options
        console.print(f"\n[bold yellow]Options:[/bold yellow]")
        
        # Grouper les options par cat√©gorie
        basic_options = []
        config_options = []
        auth_options = []
        advanced_options = []
        
        for param in self.get_params(ctx):
            if isinstance(param, click.Option):
                option_info = self._format_option_help(param)
                
                # Cat√©goriser les options
                option_name = param.name
                if option_name in ['port', 'subdomain', 'name', 'password', 'duration']:
                    basic_options.append(option_info)
                elif option_name in ['config', 'local_mode', 'server_url', 'verbose']:
                    config_options.append(option_info)
                elif option_name in ['auth', 'login', 'register', 'logout']:
                    auth_options.append(option_info)
                else:
                    advanced_options.append(option_info)
        
        # Afficher les options par cat√©gorie
        if basic_options:
            console.print("  [bold blue]Options Principales:[/bold blue]")
            for opt in basic_options:
                console.print(f"    {opt}")
        
        if config_options:
            console.print("\n  [bold blue]Configuration:[/bold blue]")
            for opt in config_options:
                console.print(f"    {opt}")
        
        if auth_options:
            console.print("\n  [bold blue]Authentification:[/bold blue]")
            for opt in auth_options:
                console.print(f"    {opt}")
        
        if advanced_options:
            console.print("\n  [bold blue]Options Avanc√©es:[/bold blue]")
            for opt in advanced_options:
                console.print(f"    {opt}")
        
        # Exemples
        console.print(f"\n[bold yellow]Exemples:[/bold yellow]")
        examples = [
            ("[white]flasktunnel --port 3000[/white]", "Expose le port 3000 avec un sous-domaine automatique"),
            ("[white]flasktunnel -p 8000 -s myapp[/white]", "Expose le port 8000 avec le sous-domaine 'myapp'"),
            ("[white]flasktunnel --port 5000 --password secretpass[/white]", "Tunnel prot√©g√© par mot de passe"),
            ("[white]flasktunnel --diagnose[/white]", "Diagnostic du syst√®me"),
            ("[white]flasktunnel --list[/white]", "Liste des tunnels actifs"),
        ]
        
        for cmd, desc in examples:
            console.print(f"  {cmd}")
            console.print(f"    [green]{desc}[/green]")
            console.print()
        
        # Aide suppl√©mentaire
        console.print(Panel(
            "[bold blue]üí° Besoin d'aide ?[/bold blue]\n\n"
            "‚Ä¢ üìö Documentation: https://flasktunnel.up.railway.app/docs\n"
            "‚Ä¢ üêõ Signaler un bug: https://github.com/flasktunnel/issues\n"
            "‚Ä¢ üí¨ Support: support@flasktunnel.app",
            title="[bold white]ü§ù Support[/bold white]",
            border_style="blue"
        ))
    
    def _format_option_help(self, param):
        """Formater l'aide d'une option."""
        opts = []
        
        # Collecter tous les noms d'options
        for opt in param.opts:
            opts.append(opt)
        
        if param.secondary_opts:
            opts.extend(param.secondary_opts)
        
        opts_str = ", ".join(f"[white]{opt}[/white]" for opt in opts)
        
        # Type de param√®tre
        if param.type.name != 'BOOL':
            if hasattr(param.type, 'name'):
                type_hint = param.type.name.upper()
            else:
                type_hint = "VALUE"
            opts_str += f" [dim]{type_hint}[/dim]"
        
        # Description
        help_text = param.help or ""
        
        # Valeur par d√©faut
        if param.default is not None and param.default != () and not param.is_flag:
            if isinstance(param.default, str) and param.default:
                help_text += f" [dim](d√©faut: {param.default})[/dim]"
            elif not isinstance(param.default, str):
                help_text += f" [dim](d√©faut: {param.default})[/dim]"
        
        return f"{opts_str:<30} [green]{help_text}[/green]"

class ModernUI:
    """Interface utilisateur moderne avec Rich."""
    
    def __init__(self):
        """Initialiser l'UI avec d√©tection de taille de terminal."""
        self.console = Console()
        self.terminal_width = self.console.size.width
        self.is_narrow = self.terminal_width < 80
    
    def print_banner(self):
        """Affiche la banni√®re modernis√©e et responsive."""
        # ASCII Art adaptatif
        if self.is_narrow:
            title = "FlaskTunnel"
            font = "small"
        else:
            title = pyfiglet.figlet_format("FlaskTunnel", font="slant")
            font = "slant"
        
        # Adapter le contenu selon la largeur
        if self.is_narrow:
            banner_content = (
                f"[bold cyan]{title}[/bold cyan]\n"
                f"[dim]Tunnels HTTP s√©curis√©s[/dim]\n"
                f"[bold green]v2.1.0[/bold green]"
            )
        else:
            banner_content = (
                f"[bold cyan]{title}[/bold cyan]\n"
                f"[dim]Cr√©ez des tunnels HTTP s√©curis√©s vers vos applications locales[/dim]\n"
                f"[bold green]v2.1.0[/bold green] ‚Ä¢ [blue]https://flasktunnel.up.railway.app[/blue]"
            )
        
        banner_panel = Panel(
            banner_content,
            border_style="bright_blue",
            padding=(1, 2),
            title="[bold white]üöÄ FlaskTunnel[/bold white]",
            title_align="center"
        )
        
        self.console.print(banner_panel)
        self.console.print()
    
    def print_tunnel_info(self, tunnel):
        """Affiche les informations du tunnel de mani√®re moderne et responsive."""
         # AJOUTER une v√©rification de s√©curit√© :
        local_port = getattr(tunnel, 'local_port', getattr(tunnel, 'port', 'N/A'))
        # Adapter l'affichage selon la largeur du terminal
        if self.is_narrow:
            # Mode √©troit - informations verticales
            info_text = (
                f"[bold green]üåê {tunnel.public_url}[/bold green]\n"
                f"[yellow]üè† Port: {local_port}[/yellow]\n"  # Utiliser la variable s√©curis√©e
                f"[cyan]üîó Sous-domaine: {getattr(tunnel, 'subdomain', 'auto')}[/cyan]\n"
                f"[red]‚è∞ Expire: {getattr(tunnel, 'expires_at', 'N/A')}[/red]"
            )
            
            info_panel = Panel(
                info_text,
                title="[bold white]üìä Tunnel[/bold white]",
                border_style="green",
                padding=(1, 1)
            )
        else:
            # Mode large - tableau
            table = Table(show_header=False, box=ROUNDED, border_style="cyan")
            table.add_column("Property", style="bold magenta", width=20)
            table.add_column("Value", style="bright_white")
            
            table.add_row("üåê URL Publique", f"[bold green]{tunnel.public_url}[/bold green]")
            table.add_row("üè† Port Local", f"[yellow]{local_port}[/yellow]")  # Utiliser la variable s√©curis√©e
            table.add_row("üîó Sous-domaine", f"[cyan]{getattr(tunnel, 'subdomain', 'auto-g√©n√©r√©')}[/cyan]")
            table.add_row("‚è∞ Expire le", f"[red]{getattr(tunnel, 'expires_at', 'N/A')}[/red]")
            table.add_row("üîê Prot√©g√©", f"[green]Oui[/green]" if getattr(tunnel, 'password', None) else "[dim]Non[/dim]")
            table.add_row("üåç CORS", f"[green]Activ√©[/green]" if getattr(tunnel, 'cors', False) else "[dim]D√©sactiv√©[/dim]")
            table.add_row("üîí HTTPS", f"[green]Forc√©[/green]" if getattr(tunnel, 'https', False) else "[yellow]Auto[/yellow]")
            
            info_panel = Panel(
                table,
                title="[bold white]üìä Informations du Tunnel[/bold white]",
                border_style="green",
                padding=(1, 2)
            )
        
        self.console.print(info_panel)
        
        # Instructions adapt√©es
        if self.is_narrow:
            instructions_text = (
                "[bold blue]üí°[/bold blue] Copiez l'URL dans votre navigateur\n"
                "[bold blue]üîç[/bold blue] Utilisez -v pour voir les requ√™tes\n"
                "[bold blue]‚èπÔ∏è[/bold blue] Ctrl+C pour arr√™ter"
            )
        else:
            instructions = Table(show_header=False, box=None, padding=(0, 1))
            instructions.add_column(style="bold blue")
            instructions.add_column(style="dim")
            
            instructions.add_row("üí°", "Copiez l'URL publique dans votre navigateur")
            instructions.add_row("üîç", "Utilisez --verbose pour voir les requ√™tes en temps r√©el")
            instructions.add_row("‚èπÔ∏è", "Appuyez sur Ctrl+C pour arr√™ter le tunnel")
            
            instructions_text = instructions
        
        self.console.print(Panel(
            instructions_text,
            title="[bold yellow]üí° Conseils[/bold yellow]",
            border_style="yellow",
            padding=(0, 1)
        ))
        self.console.print()
    
    def print_success(self, message: str, title: str = "Succ√®s"):
        """Affiche un message de succ√®s."""
        self.console.print(Panel(
            f"[bold green]‚úÖ {message}[/bold green]",
            title=f"[bold white]{title}[/bold white]",
            border_style="green"
        ))
    
    def print_error(self, message: str, title: str = "Erreur"):
        """Affiche un message d'erreur."""
        self.console.print(Panel(
            f"[bold red]‚ùå {message}[/bold red]",
            title=f"[bold white]{title}[/bold white]",
            border_style="red"
        ))
    
    def print_warning(self, message: str, title: str = "Attention"):
        """Affiche un message d'avertissement."""
        self.console.print(Panel(
            f"[bold yellow]‚ö†Ô∏è {message}[/bold yellow]",
            title=f"[bold white]{title}[/bold white]",
            border_style="yellow"
        ))
    
    def print_info(self, message: str, title: str = "Information"):
        """Affiche un message d'information."""
        self.console.print(Panel(
            f"[bold blue]‚ÑπÔ∏è {message}[/bold blue]",
            title=f"[bold white]{title}[/bold white]",
            border_style="blue"
        ))
    
    def show_progress(self, description: str):
        """Affiche une barre de progression."""
        return Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=self.console,
            transient=True
        )
    
    def show_tunnels_table(self, tunnels):
        """Affiche la liste des tunnels dans un tableau moderne et responsive."""
        if not tunnels:
            self.print_warning("Aucun tunnel actif trouv√©", "Tunnels")
            return
        
        if self.is_narrow:
            # Mode √©troit - liste verticale
            for i, tunnel in enumerate(tunnels, 1):
                status_icon = "üü¢" if tunnel['status'] == 'active' else "üî¥"
                status_text = "ACTIF" if tunnel['status'] == 'active' else "FERM√â"
                
                tunnel_info = (
                    f"{status_icon} [bold]{status_text}[/bold]\n"
                    f"[cyan]{tunnel['public_url']}[/cyan]\n"
                    f"Port: [yellow]{tunnel['port']}[/yellow]\n"
                    f"ID: [dim]{tunnel['tunnel_id'][:8]}...[/dim]\n"
                    f"Expire: [red]{tunnel['expires_at']}[/red]"
                )
                
                self.console.print(Panel(
                    tunnel_info,
                    title=f"[bold white]Tunnel #{i}[/bold white]",
                    border_style="cyan"
                ))
        else:
            # Mode large - tableau
            table = Table(title="[bold cyan]üåê Tunnels Actifs[/bold cyan]", box=ROUNDED)
            table.add_column("Status", justify="center", style="bold", width=8)
            table.add_column("URL Publique", style="cyan")
            table.add_column("Port Local", justify="center", style="yellow")
            table.add_column("ID Tunnel", style="dim")
            table.add_column("Expire", style="red")
            
            for tunnel in tunnels:
                status_icon = "üü¢" if tunnel['status'] == 'active' else "üî¥"
                status_text = "ACTIF" if tunnel['status'] == 'active' else "FERM√â"
                
                table.add_row(
                    f"{status_icon}\n{status_text}",
                    f"[bold]{tunnel['public_url']}[/bold]",
                    str(tunnel['port']),
                    tunnel['tunnel_id'][:8] + "...",
                    tunnel['expires_at']
                )
            
            self.console.print(table)
    
    def show_diagnostic_results(self, results, config):
        """Affiche les r√©sultats du diagnostic de mani√®re responsive."""
        if self.is_narrow:
            # Mode √©troit - informations compactes
            mode_text = "üè† LOCAL" if config.local_mode else "üåê PRODUCTION"
            server_status = "‚úÖ OK" if results['server_connection'] else "‚ùå √âCHEC"
            local_count = len(results['local_ports'])
            local_status = f"‚úÖ {local_count} service(s)" if local_count > 0 else "‚ö†Ô∏è Aucun"
            api_status = "‚úÖ VALIDE" if results['api_key_valid'] else "‚ùå INVALIDE"
            
            diagnostic_text = (
                f"Mode: {mode_text}\n"
                f"Serveur: {server_status}\n"
                f"Services: {local_status}\n"
                f"API: {api_status}"
            )
            
            self.console.print(Panel(
                diagnostic_text,
                title="[bold magenta]üîç Diagnostic[/bold magenta]",
                border_style="magenta"
            ))
        else:
            # Mode large - tableau complet
            table = Table(title="[bold magenta]üîç Diagnostic du Syst√®me[/bold magenta]", box=ROUNDED)
            table.add_column("Composant", style="bold")
            table.add_column("Status", justify="center")
            table.add_column("D√©tails", style="dim")
            
            # Mode
            mode_icon = "üè†" if config.local_mode else "üåê"
            mode_text = "LOCAL" if config.local_mode else "PRODUCTION"
            table.add_row(f"{mode_icon} Mode", f"[cyan]{mode_text}[/cyan]", config.get_effective_server_url())
            
            # Connexion serveur
            server_status = "‚úÖ CONNECT√â" if results['server_connection'] else "‚ùå √âCHEC"
            server_style = "green" if results['server_connection'] else "red"
            table.add_row("üåê Serveur", f"[{server_style}]{server_status}[/{server_style}]", "Connexion au serveur FlaskTunnel")
            
            # Services locaux
            local_count = len(results['local_ports'])
            local_status = f"‚úÖ {local_count} D√âTECT√â(S)" if local_count > 0 else "‚ö†Ô∏è AUCUN"
            local_style = "green" if local_count > 0 else "yellow"
            local_ports = ", ".join(map(str, results['local_ports'])) if results['local_ports'] else "Aucun"
            table.add_row("üè† Services Locaux", f"[{local_style}]{local_status}[/{local_style}]", f"Ports: {local_ports}")
            
            # Cl√© API
            api_status = "‚úÖ VALIDE" if results['api_key_valid'] else "‚ùå INVALIDE"
            api_style = "green" if results['api_key_valid'] else "red"
            table.add_row("üîë Cl√© API", f"[{api_style}]{api_status}[/{api_style}]", "Authentification FlaskTunnel")
            
            self.console.print(table)
        
        # Suggestions si probl√®mes
        if not results['server_connection']:
            suggestions = []
            if config.local_mode:
                suggestions.extend([
                    "üîß D√©marrez le serveur FlaskTunnel local sur le port 8080",
                    "üîÑ Ou d√©sactivez le mode local pour utiliser le service en ligne"
                ])
            else:
                suggestions.extend([
                    "üåê V√©rifiez votre connexion internet",
                    "üè† Essayez le mode local avec --local-mode",
                    "‚è∞ Le service pourrait √™tre temporairement indisponible"
                ])
            
            self.console.print(Panel(
                "\n".join(suggestions),
                title="[bold yellow]üí° Solutions Sugg√©r√©es[/bold yellow]",
                border_style="yellow"
            ))
    
    def show_real_time_stats(self, tunnel, stats):
        """Affiche les statistiques en temps r√©el de mani√®re responsive."""
        # AJOUTER ces v√©rifications de s√©curit√© au d√©but :
        try:
            public_url = getattr(tunnel, 'public_url', 'N/A')
            local_port = getattr(tunnel, 'local_port', getattr(tunnel, 'port', 'N/A'))
            subdomain = getattr(tunnel, 'subdomain', 'auto')
            expires_at = getattr(tunnel, 'expires_at', 'N/A')
            created_at = getattr(tunnel, 'created_at', datetime.now())
        except Exception:
            # Valeurs par d√©faut en cas d'erreur
            public_url = 'N/A'
            local_port = 'N/A'
            subdomain = 'auto'
            expires_at = 'N/A'
            created_at = datetime.now()
        
        if self.is_narrow:
            # Mode √©troit - informations compactes
            uptime = datetime.now() - created_at
            remaining = format_time_remaining(stats.get('remaining_time', 0))
            
            stats_text = (
                f"[cyan]{public_url}[/cyan]\n"
                f"üìä Requ√™tes: [green]{stats.get('requests_count', 0)}[/green]\n"
                f"‚è∞ Dur√©e: [yellow]{uptime}[/yellow]\n"
                f"‚è≥ Restant: [red]{remaining}[/red]\n"
                f"üìà D√©bit: [cyan]{stats.get('bandwidth', '0 B/s')}[/cyan]"
                f" Quitter: [red]CTRL + C[/red]\n"
            )
            
            return Panel(
                stats_text,
                title="[bold cyan]üöÄ FlaskTunnel Live[/bold cyan]",
                border_style="cyan"
            )
        else:
            # Mode large - layout complet
            layout = Layout()
            layout.split_column(
                Layout(name="header", size=3),
                Layout(name="stats", size=10),
                Layout(name="footer", size=3)
            )
            
            # En-t√™te
            header_text = Text("üöÄ FlaskTunnel - Monitoring en Temps R√©el", style="bold cyan")
            layout["header"].update(Align.center(header_text))
            
            # Stats principales
            stats_table = Table(show_header=False, box=None)
            stats_table.add_column(style="bold blue", width=20)
            stats_table.add_column(style="bright_white")
            
            uptime = datetime.now() - tunnel.created_at if hasattr(tunnel, 'created_at') else timedelta(seconds=0)
            remaining = format_time_remaining(stats.get('remaining_time', 0))
            
            stats_table.add_row("üåê URL:", f"[link]{tunnel.public_url}[/link]")
            stats_table.add_row("üìä Requ√™tes:", f"[green]{stats.get('requests_count', 0)}[/green]")
            stats_table.add_row("‚è∞ Dur√©e de vie:", f"[yellow]{uptime}[/yellow]")
            stats_table.add_row("‚è≥ Temps restant:", f"[red]{remaining}[/red]")
            stats_table.add_row("üìà D√©bit:", f"[cyan]{stats.get('bandwidth', '0 B/s')}[/cyan]")
            
            layout["stats"].update(Panel(stats_table, title="üìä Statistiques", border_style="cyan"))
            
            # Pied de page
            footer_text = Text("Appuyez sur Ctrl+C pour arr√™ter", style="dim")
            layout["footer"].update(Align.center(footer_text))
            
            return layout


def signal_handler(signum, frame):
    """Gestionnaire pour les signaux syst√®me (Ctrl+C) avec gestion d'erreur."""
    try:
        console.print("\n[bold yellow]‚èπÔ∏è Arr√™t du tunnel en cours...[/bold yellow]")
        # AJOUTER cette partie pour √©viter l'arr√™t imm√©diat :
        if hasattr(signal_handler, 'tunnel_instance'):
            signal_handler.tunnel_instance.close()
    except Exception as e:
        print(f"\nErreur lors de l'arr√™t: {e}")
    finally:
        # CHANGER sys.exit(0) par :
        raise KeyboardInterrupt()  # Permet une gestion propre


def format_time_remaining(seconds):
    """Formate le temps restant de mani√®re lisible."""
    if seconds <= 0:
        return "Expir√©"
    
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    
    if hours > 0:
        return f"{hours}h {minutes}m"
    elif minutes > 0:
        return f"{minutes}m"
    else:
        return f"{seconds}s"


@click.command(cls=ColoredCommand, context_settings={'help_option_names': ['-h', '--help']})
@click.option('--port', '-p', type=int, help='Port local √† exposer')
@click.option('--subdomain', '-s', help='Nom de sous-domaine personnalis√©')
@click.option('--password', help='Mot de passe pour prot√©ger le tunnel')
@click.option('--duration', '-d', default='2h', help='Dur√©e du tunnel (1h, 2h, 4h, 8h, 12h, 24h)')
@click.option('--cors', is_flag=True, help='Activer CORS automatiquement')
@click.option('--https', is_flag=True, help='Forcer HTTPS (si app locale en HTTPS)')
@click.option('--webhook', is_flag=True, help='Mode webhook (dur√©e prolong√©e)')
@click.option('--auth', help='Cl√© API FlaskTunnel')
@click.option('--name', help='Alias pour --subdomain')
@click.option('--config', help='Fichier de configuration personnalis√©')
@click.option('--local-mode', is_flag=True, help='Mode local (serveur sur localhost:8080)')
@click.option('--server-url', help='URL du serveur FlaskTunnel personnalis√©')
@click.option('--verbose', '-v', is_flag=True, help='Mode verbeux avec logs d√©taill√©s')
@click.option('--test', is_flag=True, help='Tester la connexion au serveur')
@click.option('--diagnose', is_flag=True, help='Diagnostic complet du syst√®me')
@click.option('--login', is_flag=True, help='Se connecter √† FlaskTunnel')
@click.option('--register', is_flag=True, help='Cr√©er un compte FlaskTunnel')
@click.option('--logout', is_flag=True, help='Se d√©connecter de FlaskTunnel')
@click.option('--list', 'list_tunnels', is_flag=True, help='Lister tous les tunnels actifs')
def main(
    port: Optional[int],
    subdomain: Optional[str],
    password: Optional[str],
    duration: str,
    cors: bool,
    https: bool,
    webhook: bool,
    auth: Optional[str],
    name: Optional[str],
    config: Optional[str],
    local_mode: bool,
    server_url: Optional[str], 
    verbose: bool,
    test: bool,
    diagnose: bool,
    login: bool,
    register: bool,
    logout: bool,
    list_tunnels: bool
):
    """FlaskTunnel - Cr√©ez des tunnels HTTP s√©curis√©s vers vos applications locales."""
    
    # Interface moderne
    ui = ModernUI()
    
    # Gestionnaire de signaux
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # Banni√®re
    if not any([test, diagnose, login, register, logout, list_tunnels]):
        ui.print_banner()
    
    # Charger la configuration
    if config:
        tunnel_config = FlaskTunnelConfig.from_file(config)
    else:
        tunnel_config = FlaskTunnelConfig.from_file()
        env_config = FlaskTunnelConfig.from_env()
        tunnel_config = tunnel_config.merge_with_args(**env_config.__dict__)
    
    # Arguments de ligne de commande
    cli_args = {
        'port': port,
        'subdomain': subdomain or name,
        'password': password,
        'duration': duration,
        'cors': cors,
        'https': https,
        'webhook': webhook,
        'auth_token': auth,
        'local_mode': local_mode,
        'server_url': server_url
    }
    
    tunnel_config = tunnel_config.merge_with_args(**{k: v for k, v in cli_args.items() if v is not None})
    
    # Client FlaskTunnel
    client = FlaskTunnelClient(tunnel_config)
    auth_manager = FlaskTunnelAuth(tunnel_config.get_effective_server_url())
    
    # Information sur le mode utilis√©
    if verbose:
        server_mode = "LOCAL" if tunnel_config.local_mode else "PRODUCTION"
        ui.print_info(f"Mode: {server_mode} | Serveur: {tunnel_config.get_effective_server_url()}", "Configuration")
    
    # Commandes sp√©ciales
    if login:
        ui.print_info("Connexion √† FlaskTunnel", "Authentification")
        email = Prompt.ask("üìß [bold cyan]Email[/bold cyan]")
        password = Prompt.ask("üîí [bold cyan]Mot de passe[/bold cyan]", password=True)
        
        try:
            auth_manager.login(email, password)
            ui.print_success("Connexion r√©ussie !")
        except Exception as e:
            ui.print_error(f"√âchec de la connexion: {e}")
        return
    
    if register:
        ui.print_info("Cr√©ation d'un compte FlaskTunnel", "Inscription")
        email = Prompt.ask("üìß [bold cyan]Email[/bold cyan]")
        password = Prompt.ask("üîí [bold cyan]Mot de passe[/bold cyan]", password=True)
        confirm_password = Prompt.ask("üîí [bold cyan]Confirmer le mot de passe[/bold cyan]", password=True)
        
        if password != confirm_password:
            ui.print_error("Les mots de passe ne correspondent pas")
            return
        
        try:
            auth_manager.register(email, password)
            ui.print_success("Compte cr√©√© avec succ√®s !")
        except Exception as e:
            ui.print_error(f"√âchec de l'inscription: {e}")
        return
    
    if logout:
        try:
            auth_manager.logout()
            ui.print_success("D√©connexion r√©ussie")
        except Exception as e:
            ui.print_error(f"Erreur lors de la d√©connexion: {e}")
        return
    
    if test:
        with ui.show_progress("Test de connexion √† FlaskTunnel...") as progress:
            task = progress.add_task("Connexion en cours...", total=100)
            progress.update(task, advance=50)
            
            connection_ok = client.test_connection()
            progress.update(task, advance=50)
        
        if connection_ok:
            ui.print_success("Connexion OK - FlaskTunnel est accessible", "Test de Connexion")
        else:
            ui.print_error("Impossible de se connecter √† FlaskTunnel", "Test de Connexion")
            if tunnel_config.local_mode:
                ui.print_info("üí° Mode local activ√© - D√©marrez le serveur FlaskTunnel local", "Suggestion")
            else:
                ui.print_info("üí° V√©rifiez votre connexion internet ou essayez --local-mode", "Suggestion")
        return
    
    if diagnose:
        with ui.show_progress("Diagnostic du syst√®me FlaskTunnel...") as progress:
            task = progress.add_task("Analyse en cours...", total=100)
            
            progress.update(task, advance=25, description="V√©rification de la connexion...")
            results = client.diagnose()
            progress.update(task, advance=75, description="Analyse termin√©e")
        
        ui.show_diagnostic_results(results, tunnel_config)
        return
    
    if list_tunnels:
        with ui.show_progress("R√©cup√©ration des tunnels actifs...") as progress:
            task = progress.add_task("Chargement...", total=100)
            progress.update(task, advance=50)
            
            tunnels = client.list_tunnels()
            progress.update(task, advance=50)
        
        ui.show_tunnels_table(tunnels)
        return
    
    # Validation de la configuration
    if not tunnel_config.validate():
        ui.print_error("Configuration invalide - V√©rifiez vos param√®tres", "Configuration")
        return
    
    # V√©rifier le port
    if not check_service_running(tunnel_config.port):
        ui.print_warning(
            f"Aucun service d√©tect√© sur le port {tunnel_config.port}\n"
            f"Le tunnel sera cr√©√© mais ne pourra pas traiter les requ√™tes\n"
            f"D√©marrez votre application sur le port {tunnel_config.port} apr√®s cr√©ation du tunnel",
            "Service Local"
        )
        
        if not Confirm.ask("[bold yellow]Continuer quand m√™me ?[/bold yellow]"):
            ui.print_info("Cr√©ation du tunnel annul√©e")
            return
    
    try:
        # Cr√©er le tunnel avec progress
        with ui.show_progress("Cr√©ation du tunnel en cours...") as progress:
            task = progress.add_task(f"Connexion vers localhost:{tunnel_config.port}...", total=100)
            
            progress.update(task, advance=30, description="Connexion au serveur...")
            
            tunnel = client.create_tunnel(
                port=tunnel_config.port,
                subdomain=tunnel_config.subdomain,
                password=tunnel_config.password,
                duration=tunnel_config.duration,
                cors=tunnel_config.cors,
                https=tunnel_config.https,
                webhook=tunnel_config.webhook,
                auth_token=tunnel_config.auth_token
            )
            
            tunnel.local_port = tunnel_config.port
            
            progress.update(task, advance=40, description="Configuration du tunnel...")
            
            # Connexion WebSocket
            tunnel.connect_websocket()
            
            progress.update(task, advance=30, description="Tunnel cr√©√© avec succ√®s !")
        
        # Afficher les informations du tunnel
        ui.print_tunnel_info(tunnel)
        
        # AJOUTER cette ligne pour le gestionnaire de signaux :
        signal_handler.tunnel_instance = tunnel
        
        # Variables pour le monitoring
        stats = {
            'requests_count': 0,
            'bandwidth': '0 B/s',
            'remaining_time': tunnel.remaining_time if hasattr(tunnel, 'remaining_time') else 0
        }
        
        # Callbacks pour les √©v√©nements
        def on_request(data):
            stats['requests_count'] += 1
            if verbose:
                method = data.get('method', 'GET')
                path = data.get('path', '/')
                ip = data.get('ip', 'unknown')
                timestamp = datetime.now().strftime("%H:%M:%S")
                console.print(f"[dim]{timestamp}[/dim] [bold blue]üì®[/bold blue] [green]{method}[/green] [cyan]{path}[/cyan] [dim]from {ip}[/dim]")
        
        def on_response(data):
            if verbose:
                status = data.get('status', 200)
                size = data.get('size', 0)
                duration = data.get('duration', 0)
                status_color = "green" if status < 400 else "red"
                console.print(f"[dim]   ‚Ü≥[/dim] [bold {status_color}]{status}[/bold {status_color}] [dim]{size}B in {duration}ms[/dim]")
        
        def on_error(data):
            error_msg = data.get('message', 'Erreur inconnue')
            ui.print_error(f"Erreur tunnel: {error_msg}", "Tunnel")
        
        def on_expired(data):
            ui.print_warning("Le tunnel a expir√©", "Expiration")
        
        def on_stats_update(data):
            stats.update(data)
        
        # Enregistrer les callbacks
        tunnel.on('request', on_request)
        tunnel.on('response', on_response)
        tunnel.on('error', on_error)
        tunnel.on('expired', on_expired)
        tunnel.on('stats', on_stats_update)
        
        # Monitoring en temps r√©el avec interface moderne
        if verbose:
            def run_live_monitoring():
                with Live(ui.show_real_time_stats(tunnel, stats), refresh_per_second=2, console=console) as live:
                    while tunnel.is_active and not tunnel.is_expired:
                        time.sleep(0.5)
                        
                        # Mettre √† jour les stats
                        if hasattr(tunnel, 'get_stats'):
                            current_stats = tunnel.get_stats()
                            stats.update(current_stats)
                        
                        # Mettre √† jour l'affichage
                        live.update(ui.show_real_time_stats(tunnel, stats))
            
            # D√©marrer le monitoring live
            monitor_thread = threading.Thread(target=run_live_monitoring, daemon=True)
            monitor_thread.start()
        else:
            # Monitoring simple en arri√®re-plan
            def monitor_tunnel():
                while tunnel.is_active and not tunnel.is_expired:
                    time.sleep(30)  # V√©rifier toutes les 30 secondes
                    
                    if hasattr(tunnel, 'get_stats'):
                        current_stats = tunnel.get_stats()
                        remaining = format_time_remaining(current_stats.get('remaining_time', 0))
                        console.print(f"[dim]{datetime.now().strftime('%H:%M:%S')}[/dim] [blue]‚ÑπÔ∏è[/blue] Tunnel actif - [green]{current_stats.get('requests_count', 0)}[/green] requ√™tes - Expire dans [red]{remaining}[/red]")
            
            monitor_thread = threading.Thread(target=monitor_tunnel, daemon=True)
            monitor_thread.start()
        
        # Message de statut
        if not verbose:
            console.print(Panel(
                "[bold green]‚úÖ Tunnel actif et pr√™t √† recevoir des requ√™tes[/bold green]\n"
                "[dim]Utilisez --verbose (-v) pour voir les requ√™tes en temps r√©el[/dim]\n"
                "[dim]Appuyez sur Ctrl+C pour arr√™ter le tunnel[/dim]",
                title="[bold cyan]üöÄ FlaskTunnel[/bold cyan]",
                border_style="green"
            ))
        
        try:
            # Attendre l'expiration ou l'interruption
            while tunnel.is_active and not tunnel.is_expired:
                time.sleep(1)  # V√©rification chaque seconde
            
            if tunnel.is_expired:
                ui.print_warning("Le tunnel a expir√© automatiquement", "Expiration")
            
        except KeyboardInterrupt:
            console.print("\n[bold yellow]‚èπÔ∏è Arr√™t demand√© par l'utilisateur[/bold yellow]")
        
    except KeyboardInterrupt:
        console.print("\n[bold yellow]‚èπÔ∏è Arr√™t demand√© par l'utilisateur[/bold yellow]")
    except Exception as e:
        ui.print_error(f"Erreur: {e}", "Erreur Critique")
        if verbose:
            console.print_exception()
    finally:
    # Nettoyage avec indication visuelle
        try:
            console.print("[dim]Fermeture des connexions...[/dim]")
            if 'tunnel' in locals():  # AJOUTER cette v√©rification
                tunnel.close()
            client.close_all_tunnels()
            ui.print_success("Tunnel ferm√© proprement", "Nettoyage")
        except Exception as e:
            if verbose:
                ui.print_warning(f"Erreur lors du nettoyage: {e}", "Nettoyage")


if __name__ == '__main__':
    main()