//this is a sample file for Talend to PySpark conversion
{
	"inherit_from" : ["C:/Projects/DaataBricks/converter/talend2dws.json"], //reader configs
	"java_converter_config_file" : "java2python.json",
	"node_translation" : {
		"tMSSqlInput" : {"USER_TYPE" : "SOURCE", "SYSTEM_TYPE" : "MSSQL", "SRC_TGT_FLAG" : "SOURCE"},
		"tMSSqlRow" : {"USER_TYPE" : "SOURCE", "SYSTEM_TYPE" : "MSSQL"}
	},
	
	"script_extension" : "py",
	"pre_node_line" : "# Processing node %NODE_NAME%, ID %NODE_ID%, original type %ORIG_TYPE%, conversion type %NODE_TYPE%\n# COLUMN COUNT: %COLUMN_COUNT%\n# %ADDITIONAL_COMMENT%", //# COLUMNS %COLUMN_LIST%
	"commands" : {
		"WRAP" : "spark.sql(f\"\"\"%SQL%\"\"\")",
		"READER_FILE_DELIMITED": "spark.read.format('delta').table('<catalog_name>.<source_schema_name>.<source_table_name>')",
		"READER_RELATIONAL": "spark.sql(f\"\"\"%SQL%\"\"\")",
		"READER_PARQUET": "spark.read.mode('delta').path(%PATH%, config.get(\"process.name\"))",
		"READER_SALEFORCE": "spark.read.salesforce(%CONNECT_STRING%, \"\"\"%TABLE_NAME%\"\"\", properties={'user': %LOGIN%, 'password': %PASSWORD%, 'driver': %DRIVER%})",
		"READER_DELTA_FILE": "spark.read.format('delta').table('<catalog_name>.<source_schema_name>.<source_table_name>')",
		"WRITER_FILE_DELIMITED": "%DF%.write.format(\"delta\").mode(\"overwrite\").saveAsTable(\"<catalog_name>.<target_schema_name>.<target_table_name>\")",
		"WRITER_S3_FILE": "dbutils.fs.cp(\"s3a:\/\/{}/{}\".format(%BUCKET%, %PATH%), %BUCKET_KEY%)",
		"WRITER_RELATIONAL": "%DF%.write.mode('append').jdbc(%CONNECT_STRING%, \"\"\"%TABLE_NAME%\"\"\", properties={'user': %LOGIN%, 'password': %PASSWORD%, 'driver': %DRIVER%})",
		"WRITER_SALEFORCE": "SomeArray.Append(%DF%)",
		"WRITER_DELTA_FILE": "%DF%.write.format(\"delta\").mode(\"overwrite\").saveAsTable(\"<catalog_name>.<target_schema_name>.<target_table_name>\")",
		"WRITER_PARQUET": "%DF%.write.format('parquet').save(%PATH%)"
	},
	"system_type_class" : {
		"MySQL" : "RELATIONAL",
		"MSSQL" : "RELATIONAL",
		"HIVE" : "RELATIONAL",
		"REDSHIFT" : "RELATIONAL",
		"S3_FILE" : "S3_FILE",
		"Salesforce" : "SALEFORCE",
		"TOOLKIT" : "RELATIONAL",
		"SNOWFLAKE" : "RELATIONAL",
		"HDFS" : "DELTA_FILE",
		"FLATFILE" : "DELTA_FILE",
		"PARQUET" : "PARQUET",
		"DEFAULT" : "FILE_DELIMITED"
	},
	"command_run_statement" : "%sh\n%COMMAND%\n%python",
	//"df_naming_template" : "%NODE_ID%", //when not specified, the converter will use NODE_NAME
	//"df_naming_template" : "%JOB_NAME%_%NODE_NAME%", //when not specified, the converter will use NODE_NAME

	"multiline_stmt_break" : " \ ",
	//"default_join_type" : "left_outer",

	"use_schema_definitions_for_joiner" : "1",
	"inline_content_as_csv" : "1", //tFixedFlowInput inline content type, replace input with a csv read
	"skip_rowid_generation" : "1", // omits generation of sys_row_id
	"convert_tabs_to_spaces" : "1",
	"include_conditional_linking" : "1",
	//"ignore_pre_post_components" : "1",
	"show_nodes_with_no_links" : "1",
	"set_all_output_links" : "1", //If link names are being used this option will set all of a nodes output links equal to each other
	"component_skip_set_all_output_links" : { //Component types to be excluded from setting all output links
		"tJava" : "1",
		"tHDFSDelete" : "1",
		"tMap" : "1"
	},
	"generate_variable_declaration" : 1,
	"variable_declaration_template" : "dbutils.widgets.text(name = '%VARNAME%', defaultValue = %DEFAULT_VALUE%)\n%VARNAME% = dbutils.widgets.get(\"%VARNAME%\")\n",
	//"script_call_params" : ["config","spark","audit","exception"],

	"joblet_types" : { //Types of joblets
		"Joblets" : "1",
		"Spark Joblets" : "1"
	},

	"header": "#Code converted on %CONVERTER_TIMESTAMP%~
import os~
import shutil~
from functools import reduce~
import utilsIO~
from datetime import datetime~
from Joblets import Joblets~
from pyspark.sql import *~
from pyspark.sql.functions import *~
from pyspark import SparkContext~
from pyspark.sql.session import SparkSession~
sc = SparkContext('local')~
spark = SparkSession(sc)",
	"footer": "quit()",

	"default_indent" : {
		"header" : "",
		"body" : "        ",
		"footer" : ""
	},
	
	"body_wrap" : {
		"before" : "\ntry:\n\n",
		"after" : "\n\nexcept OSError:\n\tprint('Error Occurred')\n"
	},

	"exclude_regex_match_from_lit_wrap" : [
		"date_format\s*\(\s*to_date\s*\(\s*StringHandling",
		"when\s*\([\w\.]+\s*==\s*\""
	],

	"exclude_function_args_from_lit_wrapping" : [
		// these want strings, not Columns
		"join"
		, "replace"
	],

	"skip_java_warning" : true,
	"ignore_component_list" : [
		"tHDFSConfiguration", "tCatch", "tLogCatcher","tRedshiftRollback","tRedshiftCommit","tSetProxy",
		"tRedshiftClose","tMysqlCommit","tS3Connection",	"tChronometerStop","tStatCatcher","tLogRow", "tTeradataConnection",
		"tPostgresqlConnection","tSalesforceConnection", "tOracleClose","tMysqlConnection","tRedshiftCon","tRedshiftConnection","tPostgresqlRollback","TRIGGER_INPUT","TRIGGER_OUTPUT",
		"tS3Close","tSAPHanaClose","tMSSqlConnection","tMSSqlClose","tPostgresqlClose","tPostgresqlCommit","tContextDump","tSAPHanaConnection","tSleep"
	],
	"case_sensitive_conditionals" : true,

	// expression syntax handling using BB's standard parser
	
	"line_subst" : [
		{"from" : "\"m\"","to" : "\"Minutes\"","case_sensitive_match" : "1"},
		{"from" : "\"D\"","to" : "\"Day of Year\"","case_sensitive_match" : "1"},
		{"from" : "\"d\"","to" : "\"Days\"","case_sensitive_match" : "1"},
		{"from" : "\"M\"", "to" : "\"Months\"","case_sensitive_match" : "1"},
		{"from" : "\bYYYY\b", "to" : "yyyy","case_sensitive_match" : "1"},
		{"from" : "\"MM\"", "to" : "\"Months\"","case_sensitive_match" : "1"},
		{"from" : "\"mm\"", "to" : "\"Minutes\"","case_sensitive_match" : "1"}
		
		//{"from" : "TalendDate\.formatDate\s*\(\s*\"([\w-]+)\"\s*,\s*TalendDate\.parseDate\s*\(\s*\"([\w+]+)\"\s*,\s*([\w\. \(,]+\))\s*\)\s*\)", "to" : "date_format(to_date($3,\"$2\"),\"$1\")"},
		//{"from" : "([\w+\.]+)\.equals\s*\(\s*\"(\w*)\"\s*\)\s*\?\s*null\:TalendDate\.formatDate\s*\(\s\"([\w\- \:\.]+)\"\s*,\s*TalendDate\.parseDate\s*\(\s*\"([\w\- \:\.]+)\"\s*,\s*(StringHandling\.LEFT\s\(\s*[\w\. \+\"\,]+\))\s*\)\s*\)", "to" : " when($1 == \"$2\" , None).otherwise(date_format(to_timestamp($5,\"$4\"),\"$3\"))\n"},
		//{"from" : "when\(([\w+.]+)\s*==\s*None\s, ([^:]+)\:\s*([^,]+)\s*,\s*([^:]+)\:([^\)]+)\s*\)", "to" : "when($1.isNull(), $2).otherwise(when($3, $4).otherwise($5))"},
		//{"from" : "([\w\.\_]+)\.toString\(\)", "to" : "($1.cast('string'))"},
		//{"from" : "\.otherwise\(\"N\"\)", "to" : ".otherwise(lit(\"N\"))"},
		//{"from" : "\((\w+\.\w+)\.replaceAll\(lit\(\"\\\"\)\s+lit\(\", \"\)\s+lit\(\"\\\"\)\s+\"\)\)", "to" : "regexp_replace($1, \"\"\",\"\"\")"},
		//{"from" : "(^|[^'\"])null([^'\"]|$)", "to" : "$1None$2"},
		//{"from" : "\bnull\b", "to" : "None"},
		//{"from" : "\s*==\s*None", "to" : ".isNull()"},
		//{"from" : "(\bif\b.*?)\.isNull\(\)", "to" : "$1 == None"},
		//{"from" : "\s*!=\s*None", "to" : ".isNotNull()"},
		//{"from" : "\.equals\(\"\"\)", "to" : "== ''"},
		//{"from" : "\s*\.substring\(", "to" : ".substr("},
		//{"from" : "\.isEmpty\(\)", "to" : "== ''"},
		//{"from" : "\(\s*NOLOCK\s*\)", "to" : ""},
		//
		//{"from" : "\s*\.toString\(\)", "to" : ".cast('string')"},
		//{"from" : "\s*\.longValue\(\)", "to" : ".cast('long')"},
		//
		//{"from" : "\s+\.length\(\)", "to" : ".length()"},
		//{"from" : "(\s+)(\w+\.\w+(?:\.cast\('string'\))?)\.length\(\)", "to" : "$1length($2)"},
		//
		//{"from" : "StringHandling\.RIGHT\((.*?)\s*,\s*(?:(\d+)|lit\((\d*)\))\)", "to" : "substr($1, -$2$3, $2$3)"},
		//{"from" : "StringHandling\.LEFT\((.*?)\s*,\s*(?:(\d+)|lit\((\d*)\))\)", "to" : "substr($1, 1, $2$3)"},
		//{"from" : "Mod\(\s*(.*?)\s*,\s*(?:(\d+)|lit\((\d+)\))\)", "to" : "$1 % $2$3"},
		//{"from" : "=\s+=", "to" : "=="},
		//{"from" : "\+([\w'\"])", "to" : "+ $1"},
		//{"from" : "\"\s*\+\s*(\w+)\s*\+\s*\"", "to" : "{$1}"},
		//
		//{"from" : "(\w+\.\w+)\.replaceAll\((?:lit\()?(.*?)\)?\s*,\s*(?:lit\()?(.*?)\)?\)", "to": "regexp_replace($1, $2, $3)"},
		//
		//{"from" : "TalendDate\.formatDate\((?:lit\((.*?)\)||(.*?))\s*,\s*(.*)\)", "to" : "date_format($3, $1$2)"},
		//{"from" : "TalendDate\.addDate\((.*?)\s*,\s*(.*?)\s*,\s*(?:lit\(\"MM\"\)||\"MM\")\s*\)", "to" : "add_months($1, $2)"},
		//
		////Add days to date
		//{"from" : "TalendDate\.addDate\(\s*(.*?)\s*,\s*lit\(\"[\w-]+\"\)\s*,\s*(?:lit\()?(\d+)\)?\s*,\s*(?:lit\(\"DD\"\)||\"DD\")\s*\)", "to" : "date_add($1, $2)"},
		//{"from" : "TalendDate\.addDate\((\w+)\s*,\s*(\d+)\s*,\s*\"dd\"\)", "to" : "date_add($1, $2$3)"},
		////Sub days from date
		//{"from" : "TalendDate.addDate\(\s*(.*?)\s*,\s*lit\(\"[\w-]+\"\)\s*,\s*([-])\s*(?:lit\()?(\d+)\)?\s*,\s*(?:lit\(\"DD\"\)||\"DD\")\s*\)", "to" : "date_add($1, $2$3)"},
		//{"from" : "TalendDate\.addDate\((\w+)\s*,\s*(-)\s*(\d+)\s*,\s*\"dd\"\)", "to" : "date_add($1, $2$3)"},
		//
		//{"from" : "TalendDate\.getDate\(", "to" : "date_format(current_timestamp(),"}, // formats are supposedly cross-compatible
		//
		//{"from" : "TalendString.talendTrim\(\s*(.*?)\s*,\s*(?:'(.*?)'|\"(.*?)\")\s*,\s*1\s*\)", "to" : "re.sub(r\"^$2$3\",'',$1)"},
		//{"from" : "TalendString.talendTrim\(\s*(.*?)\s*,\s*lit\((?:'(.*?)'|\"(.*?)\")\)\s*,\s*lit\(1\)\s*\)", "to" : "re.sub(r\"^$2$3\",'',$1)"},
		//{"from" : "TalendString.talendTrim\(\s*(.*?)\s*,\s*(?:'(.*?)'|\"(.*?)\")\s*,\s*0\s*\)", "to" : "re.sub(r\"^$2$3\",'', re.sub(r\"$2$3$\", '', $1))"},
		//{"from" : "TalendString.talendTrim\(\s*(.*?)\s*,\s*lit\((?:'(.*?)'|\"(.*?)\")\)\s*,\s*lit\(0\)\s*\)", "to" : "re.sub(r\"^$2$3\",'', re.sub(r\"$2$3$\", '', $1))"},
		//{"from" : "TalendString.talendTrim\(\s*(.*?)\s*,\s*(?:'(.*?)'|\"(.*?)\")\s*,\s*-1\s*\)", "to" : "re.sub(r\"$2$3$\",'',$1)"},
		//{"from" : "TalendString.talendTrim\(\s*(.*?)\s*,\s*lit\((?:'(.*?)'|\"(.*?)\")\)\s*,\s*lit\(-1\)\s*\)", "to" : "re.sub(r\"$2$3$\",'',$1)"},
		//
		//{"from" : "\.compareTo\((.*?)\)\s*([<>=!]+)\s*\d+" , "to" : " $2 $1"},
		//{"from" : "\(current_date\(\)\)(\.alias\('.*?_ts'\))", "to": "(current_timestamp())$1"},
		//
//		//removed os.environ conversion
//		//{"from": "\bcontext\.(\w+)\b", "to": "os.environ['$1']"},
		//{"from": "\bcontext\.(\w+)\b", "to": "$1"},
//		//{"from": "os\.environ\s*\[\s*lit\('(.*?)'\)\s*\]", "to": "os.environ['$1']"},
		//{"from": "os\.environ\s*\[\s*lit\('(.*?)'\)\s*\]", "to": "$1"},
		//
		//{"from" : "DqStringHandling.makeSafe\((\w+\.\w+)\)", "to" : "when($1.isNull(), '').otherwise($1)"},
		{"from" : "(\B)\.equals\s*\(", "to" : "$1__FUNCTION_SUB__.equals("}
	],
	
	"block_subst" : [
	],

	"function_subst" : [
		{"from" : "DataOperation.CHAR", "to" : "char"},
		{"from" : "DataOperation.DTX", "to" : "hex"},
		{"from" : "DataOperation.XTD", "output_template" : "conv($1,16,10)"},
		{"from" : "DataOperation.FIX", "output_template" : "$1.cast('long')"},
		{"from" : "StringHandling.CONCAT","num_args":2, "output_template" : "concat(nvl($1,lit('')), nvl($2,lit('')))"},
		{"from" : "StringHandling.CONCAT","num_args":3, "output_template" : "concat(nvl($1,lit('')), nvl($2,lit('')), nvl($3,lit('')))"},
		{"from" : "StringHandling.CONCAT","num_args":4, "output_template" : "concat(nvl($1,lit('')), nvl($2,lit('')), nvl($3,lit('')), nvl($4,lit('')))"},
		{"from" : "StringHandling.CONCAT","num_args":5, "output_template" : "concat(nvl($1,lit('')), nvl($2,lit('')), nvl($3,lit('')), nvl($4,lit('')), nvl($5,lit('')))"},
		{"from" : "StringHandling.CONCAT","num_args":6, "output_template" : "concat(nvl($1,lit('')), nvl($2,lit('')), nvl($3,lit('')), nvl($4,lit('')), nvl($5,lit('')), nvl($6,lit('')))"},
		{"from" : "StringHandling.CONCAT","num_args":7, "output_template" : "concat(nvl($1,lit('')), nvl($2,lit('')), nvl($3,lit('')), nvl($4,lit('')), nvl($5,lit('')), nvl($6,lit(''), nvl($7),lit('')))"},
		{"from" : "StringHandling.CONCAT","num_args":8, "output_template" : "concat(nvl($1,lit('')), nvl($2,lit('')), nvl($3,lit('')), nvl($4,lit('')), nvl($5,lit('')), nvl($6,lit('')), nvl($8,lit('')))"},
		{"from" : "StringHandling.CONCAT","num_args":9, "output_template" : "concat(nvl($1,lit('')), nvl($2,lit('')), nvl($3,lit('')), nvl($4,lit('')), nvl($5,lit('')), nvl($6,lit('')), nvl($8,lit('')), nvl($9,lit('')))"},
		{"from" : "StringHandling.concat_ws", "to" : "concat_ws"},
		{"from" : "StringHandling.constantIfBlank", "output_template" : "when($1==lit(''),$2).otherwise($1)"},
		{"from" : "StringHandling.concatWith","to" : "concat_ws"},
		{"from" : "StringHandling.contains", "to" : "contains"},
		{"from" : "StringHandling.endsWith", "output_template" : "$1.endswith($2)"},
		{"from" : "StringHandling.FIND", "output_template" : "$1.rlike(r$2)"},//needs adding escaping
		{"from" : "StringHandling.indexOf", "output_template" : "instr($1,($2))-1"},
		{"from" : "StringHandling.index", "output_template" : "instr($1,($2))-1"},
		{"from" : "StringHandling.IS_ALPHA", "output_template" : "$1.rlike('^[A-Za-z]+$')"},
		{"from" : "StringHandling.IS_NUMERIC", "output_template" : "$1.rlike(r'^-?\d+(\.\d+)?$')"},
		{"from" : "StringHandling.left", "to" : "left"},
		{"from" : "StringHandling.lowerCase", "to" : "lower"},
		{"from" : "StringHandling.matches", "output_template" : "$1.rlike(r$2)"},//needs adding escaping
		{"from" : "StringHandling.normalizeSpace", "output_template" : "trim"},
		{"from" : "StringHandling.replace","arg_pattern" : {"4" : "false"},"output_template" : "replace($1,$2,$3)"},
		{"from" : "StringHandling.replace","arg_pattern" : {"4" : "true"}, "output_template" : "regexp_replace($1, regexp_extract($1, r$2, 0), $3)"},
		{"from" : "StringHandling.replace","to" : "replace"},
		{"from" : "StringHandling.right", "to" : "right"},
		{"from" : "StringHandling.rightAlign", "output_template" : "lpad($1,$2,' ')"},
		{"from" : "StringHandling.startsWith", "output_template" : "startswith($1,$2)"},
		{"from" : "StringHandling.subString", "output_template" : "substring($1,$2+1,$3)"},
		{"from" : "StringHandling.subStringAfter", "output_template" : "substring($1,position($2, $1)+length($2)+1,length($1))"},
		{"from" : "StringHandling.subStringBefore", "output_template" : "substring($1,lit(0),position($2, $1)-1)"},
		{"from" : "StringHandling.translate", "to" : "translate"},
		{"from" : "StringHandling.TRIM", "to" : "trim"},
		{"from" : "StringHandling.upperCase", "to" : "upper"},
		{"from" : "StringHandling.BTRIM", "output_template" : "ltrim(rtrim($1))"},
		{"from" : "StringHandling.RTRIM", "to" : "rtrim"},
		{"from" : "StringHandling.FTRIM", "to" : "ltrim"},
		{"from" : "StringHandling.LTRIM", "to" : "ltrim"},
		{"from" : "StringHandling.UPCASE", "to" : "upper"},
		{"from" : "StringHandling.DOWNCASE", "to" : "lower"},
		{"from" : "StringHandling.LOWCASE", "to" : "lower"},
		{"from" : "StringHandling.CHANGE", "to" : "replace"},
		{"from" : "StringHandling.LEN", "to" : "length"},
		{"from" : "StringHandling.EREPLACE", "output_template" : "regexp_replace($1,$2,$3)"},
		{"from" : "StringHandling.COUNT", "to" : "regexp_count"},
		{"from" : "StringHandling.DQUOTE", "output_template" : "'\"+'$1+'\"'"},
		{"from" : "StringHandling.SPACE", "output_template" : "' '*$1"},
		{"from" : "StringHandling.STR", "output_template" : "$1*$2"},
		{"from" : "StringHandling.LPAD", "num_args":3,"output_template" : "lpad($1,$2,$3)"},
		{"from" : "StringHandling.RPAD", "num_args":3,"output_template" : "rpad($1,$2,$3)"},
		{"from" : "StringHandling.LPAD", "output_template" : "lpad($1,$2,' ')"},
		{"from" : "StringHandling.RPAD", "output_template" : "rpad($1,$2,' ')"},
		{"from" : "StringHandling.INSTR", "output_template" : "instr($1,($2))-1"},
		{"from" : "StringHandling.TO_CHAR", "output_template" : "$1.cast('string')"},
		{"from" : "TalendString.addEscapeChars", "output_template" : "replace($1, $2, concat(lit(' '), $2))"},
		{"from" : "TalendString.replaceSpecialCharForXML", "to" : "html.escape"},
		{"from" : "TalendString.talendTrim", "to" : "trim"},
		{"from" : "TalendString.removeAccents", "to" : ".removeAccents/*use udf*/"},
		{"from" : "TalendString.getAsciiRandomString", "to" : ".getAsciiRandomString/*use udf*/"},
		{"from" : "TalendString.replaceSpecialCharForXML", "output_template" : "html.escape"},
		{"from" : "TalendString.unionString", "to" : "concat_ws"},
		{"from" : "TalendDate.adddate","arg_pattern" : {"3" : "\"dd\""}, "output_template" : "date_add($1, $2)"},
		{"from" : "TalendDate.adddate","arg_pattern" : {"3" : "\"Months\""}, "output_template" : "add_months($1, $2)"},
		{"from" : "TalendDate.adddate","arg_pattern" : {"3" : "\"HH\""}, "output_template" : "from_unixtime(unix_timestamp($1)+ $2*3600)"},
		{"from" : "TalendDate.adddate","arg_pattern" : {"3" : "\"Minutes\""}, "output_template" : "from_unixtime(unix_timestamp($1)+ $2*60)"},
		{"from" : "TalendDate.adddate","arg_pattern" : {"3" : "\"ss\""}, "output_template" : "from_unixtime(unix_timestamp($1)+ $2)"},
		{"from" : "TalendDate.adddate","arg_pattern" : {"3" : "\"SSS\""}, "output_template" : "expr('$1 + interval $2 milliseconds'"},
		{"from" : "TalendDate.adddate","arg_pattern" : {"4" : "\"dd\""}, "output_template" : "date_add($1, $3)"},
		{"from" : "TalendDate.adddate","arg_pattern" : {"4" : "\"Months\""}, "output_template" : "add_months($1, $3)"},
		{"from" : "TalendDate.adddate","arg_pattern" : {"4" : "\"HH\""}, "output_template" : "from_unixtime(unix_timestamp($1)+ $3*3600)"},
		{"from" : "TalendDate.adddate","arg_pattern" : {"4" : "\"Minutes\""}, "output_template" : "from_unixtime(unix_timestamp($1)+ $3*60)"},
		{"from" : "TalendDate.adddate","arg_pattern" : {"4" : "\"ss\""}, "output_template" : "from_unixtime(unix_timestamp($2)+ $3)"},
		{"from" : "TalendDate.adddate","arg_pattern" : {"4" : "\"SSS\""}, "output_template" : "expr('$1 + interval $3 milliseconds'"},
		{"from" : "TalendDate.addToDateTime","arg_pattern" : {"1" : "(\"Months\"|\"L\")"}, "output_template" : "add_months($3, $2)"},
		{"from" : "TalendDate.addToDateTime","arg_pattern" : {"1" : "(\"Y\"|\"Years\"|\"u\")"}, "output_template" : "add_months($3, 12*$2)"},
		{"from" : "TalendDate.addToDateTime","arg_pattern" : {"1" : "(\"W\"|\"Weeks\")"}, "output_template" : "date_add($3, 7*$2)"},
		{"from" : "TalendDate.addToDateTime","arg_pattern" : {"1" : "(\"D\"|\"Days\")"}, "output_template" : "date_add($3, $2)"},
		{"from" : "TalendDate.addToDateTime","arg_pattern" : {"1" : "(\"H\"|\"Hours\")"}, "output_template" : "from_unixtime(unix_timestamp($3)+ $2*3600)"},
		{"from" : "TalendDate.addToDateTime","arg_pattern" : {"1" : "\"Minutes\""}, "output_template" : "from_unixtime(unix_timestamp($3)+ $2*60)"},
		{"from" : "TalendDate.addToDateTime","arg_pattern" : {"1" : "\"s\"|\"Seconds\")"}, "output_template" : "from_unixtime(unix_timestamp($3)+ $2)"},
		{"from" : "TalendDate.addToDateTime","arg_pattern" : {"1" : "\"A\"|\"Milliseconds\")"}, "output_template" : "expr('$3 + interval $2 milliseconds'"},
		{"from" : "TalendDate.addToDate","arg_pattern" : {"3" : "(\"Months\"|\"L\")"}, "output_template" : "add_months($1, $2)"},
		{"from" : "TalendDate.addToDate","arg_pattern" : {"3" : "(\"Y\"|\"Years\"|\"u\")"}, "output_template" : "add_months($1, 12*$2)"},
		{"from" : "TalendDate.addToDate","arg_pattern" : {"3" : "(\"W\"|\"Weeks\")"}, "output_template" : "date_add($1, 7*$2)"},
		{"from" : "TalendDate.addToDate","arg_pattern" : {"3" : "(\"D\"|\"Days\")"}, "output_template" : "date_add($1, $2)"},
		{"from" : "TalendDate.addToDate","arg_pattern" : {"3" : "(\"H\"|\"Hours\")"}, "output_template" : "from_unixtime(unix_timestamp($1)+ $2*3600)"},
		{"from" : "TalendDate.addToDate","arg_pattern" : {"3" : "\"Minutes\""}, "output_template" : "from_unixtime(unix_timestamp($1)+ $2*60)"},
		{"from" : "TalendDate.addToDate","arg_pattern" : {"3" : "\"s\"|\"Seconds\")"}, "output_template" : "from_unixtime(unix_timestamp($1)+ $2)"},
		{"from" : "TalendDate.addToDate","arg_pattern" : {"3" : "\"A\"|\"Milliseconds\")"}, "output_template" : "expr('$1 + interval $2 milliseconds'"},
		{"from" : "TalendDate.compareDate","output_template" : "when($1 == $2, 0).when($1 > $2 , -1).otherwise(1)"},
		{"from" : "TalendDate.diffDate","arg_pattern" : {"3" : "\"dd\""},"output_template" : "date_diff($1,$2)"},
		{"from" : "TalendDate.diffDate","arg_pattern" : {"3" : "\"Months\""},"output_template" : "months_between($1, $2)"},
		{"from" : "TalendDate.diffDate","arg_pattern" : {"3" : "\"yyyy\""},"output_template" : "round(months_between($1, $2)/12,0)"},
		{"from" : "TalendDate.diffDate","arg_pattern" : {"3" : "\"ss\""},"output_template" : "unix_timestamp($1) - unix_timestamp($2)"},
		{"from" : "TalendDate.diffDate","arg_pattern" : {"3" : "\"Minutes\""},"output_template" : "(unix_timestamp($1) - unix_timestamp($2))/3600"},
		{"from" : "TalendDate.diffDate","arg_pattern" : {"3" : "\"HH\""},"output_template" : "(unix_timestamp($1) - unix_timestamp($2))/60"},
		{"from" : "TalendDate.diffDateFloor","arg_pattern" : {"3" : "\"Months\""},"output_template" : "round(months_between($1, $2),0)"},
		{"from" : "TalendDate.diffDateFloor","arg_pattern" : {"3" : "\"yyyy\""},"output_template" : "round(months_between($1, $2)/12,0)"},
		{"from" : "TalendDate.extractFromDateTime","arg_pattern" : {"1" : "\"Time\""}, "output_template" : "date_format($1,'HH:mm:ss')"},
		{"from" : "TalendDate.extractFromDateTime","arg_pattern" : {"1" : "\"Date\""}, "output_template" : "date_format($1,'yyyy-MM-dd')"},
		{"from" : "TalendDate.extractFromDateTime","arg_pattern" : {"1" : "(\"Y\"|\"Years\"|\"u\")"}, "output_template" : "date_format($1,'yyyy')"},
		{"from" : "TalendDate.extractFromDateTime","arg_pattern" : {"1" : "(\"M\"|\"L\"|\"Months\")"}, "output_template" : "date_format($1,'MM')"},
		{"from" : "TalendDate.extractFromDateTime","arg_pattern" : {"1" : "(\"W\"|\"Week\"|\"Weeks\")"}, "output_template" : "weekofyear($1) - weekofyear(trunc($1, 'MM')) + 1)"},
		{"from" : "TalendDate.extractFromDateTime","arg_pattern" : {"1" : "\"Week of year\""}, "output_template" : "weekofyear($1)"},
		{"from" : "TalendDate.extractFromDateTime","arg_pattern" : {"1" : "(\"Day\"|\"Days\")"}, "output_template" : "date_format($1,'dd')"},
		{"from" : "TalendDate.extractFromDateTime","arg_pattern" : {"1" : "\"Day of Year\""}, "output_template" : "dayofyear($1)"},
		{"from" : "TalendDate.extractFromDateTime","arg_pattern" : {"1" : "\"Day of Month\""}, "output_template" : "dayofmonth($1)"},
		{"from" : "TalendDate.extractFromDateTime","arg_pattern" : {"1" : "(\"e\"|\"Day of Week\"|\"E\")"}, "output_template" : "dayofweek($1)"},
		{"from" : "TalendDate.extractFromDateTime","arg_pattern" : {"1" : "(\"H\"|\"Hour\"|\"Hours\")"}, "output_template" : "date_format($1,'HH')"},
		{"from" : "TalendDate.extractFromDateTime","arg_pattern" : {"1" : "(\"Minute\"|\"Minutes\")"}, "output_template" : "date_format($1,'mm')"},
		{"from" : "TalendDate.extractFromDateTime","arg_pattern" : {"1" : "(\"s\"|\"Second\"|\"Seconds\")"}, "output_template" : "date_format($1,'ss')"},
		{"from" : "TalendDate.extractFromDateTime","arg_pattern" : {"1" : "\"A\"|\"Millisecond\"|\"Milliseconds\")"}, "output_template" : "date_format($1,'SSS')"},
		{"from" : "TalendDate.formatDateTime", "to" : "date_format"},
		{"from" : "TalendDate.formatDate", "to" : "date_format"},
		{"from" : "TalendDate.formatDateInTimeZone", "to" : "date_format"},
		{"from" : "TalendDate.formatDateInUTC", "output_template" : "to_utc_timestamp($1,$2)"},
		{"from" : "TalendDate.formatDateLocale", "to" : "date_format"},
		{"from" : "TalendDate.formatDatetimeoffset", "output_template" : "date_format($1, 'yyyy-MM-dd HH:mm:ssXXX')"},
		{"from" : "TalendDate.getCurrentDate", "to" : "current_date"},
		{"from" : "TalendDate.getDate", "to" : "current_date"},
		{"from" : "TalendDate.getFirstDayOfMonth", "output_template" : "trunc($1,'MM')"},
		{"from" : "TalendDate.getLastDayOfMonth", "to" : "last_day"},
		{"from" : "TalendDate.setDate", "to" : "setDate/*USE UDF*/"},
		{"from" : "TalendDate.TO_CHAR", "to" : "date_format"},
		{"from" : "TalendDate.TO_DATE", "to" : "to_date"},
		{"from" : "TalendDate.getPartOfDate","arg_pattern" : {"1" : "\"Time\""}, "output_template" : "date_format($1,'HH:mm:ss')"},
		{"from" : "TalendDate.getPartOfDate","arg_pattern" : {"1" : "\"Date\""}, "output_template" : "date_format($1,'yyyy-MM-dd')"},
		{"from" : "TalendDate.getPartOfDate","arg_pattern" : {"1" : "(\"Y\"|\"Years\"|\"u\")"}, "output_template" : "date_format($1,'yyyy')"},
		{"from" : "TalendDate.getPartOfDate","arg_pattern" : {"1" : "(\"M\"|\"L\"|\"Months\")"}, "output_template" : "date_format($1,'MM')"},
		{"from" : "TalendDate.getPartOfDate","arg_pattern" : {"1" : "(\"W\"|\"Week\"|\"Weeks\")"}, "output_template" : "weekofyear($1) - weekofyear(trunc($1, 'MM')) + 1)"},
		{"from" : "TalendDate.getPartOfDate","arg_pattern" : {"1" : "\"Week of year\""}, "output_template" : "weekofyear($1)"},
		{"from" : "TalendDate.getPartOfDate","arg_pattern" : {"1" : "(\"Day\"|\"Days\")"}, "output_template" : "date_format($1,'dd')"},
		{"from" : "TalendDate.getPartOfDate","arg_pattern" : {"1" : "\"Day of Year\""}, "output_template" : "dayofyear($1)"},
		{"from" : "TalendDate.getPartOfDate","arg_pattern" : {"1" : "\"Day of Month\""}, "output_template" : "dayofmonth($1)"},
		{"from" : "TalendDate.getPartOfDate","arg_pattern" : {"1" : "(\"e\"|\"Day of Week\"|\"E\")"}, "output_template" : "dayofweek($1)"},
		{"from" : "TalendDate.getPartOfDate","arg_pattern" : {"1" : "(\"H\"|\"Hour\"|\"Hours\")"}, "output_template" : "date_format($1,'HH')"},
		{"from" : "TalendDate.getPartOfDate","arg_pattern" : {"1" : "(\"Minute\"|\"Minutes\")"}, "output_template" : "date_format($1,'mm')"},
		{"from" : "TalendDate.getPartOfDate","arg_pattern" : {"1" : "(\"s\"|\"Second\"|\"Seconds\")"}, "output_template" : "date_format($1,'ss')"},
		{"from" : "TalendDate.getPartOfDate","arg_pattern" : {"1" : "\"A\"|\"Millisecond\"|\"Milliseconds\")"}, "output_template" : "date_format($1,'SSS')"},
		{"from" : "TalendDate.getRandomDate", "to" : "date_add(current_date(), floor(rand() * 101).cast('integer'))"},
		{"from" : "TalendDate.isDate","output_template" : "typeof($1)=='date'"},
		{"from" : "TalendDate.getCurrentDateTime", "to" : "current_timestamp"},
		{"from" : "TalendDate.getCurrentTime", "output_template" : "date_format(current_timestamp(),'HH-mm-ss.SSSSSSSSS')"},
		{"from" : "TalendDate.isToday", "output_template" : "when(current_date()==$1,True).otherwise(False)"},
		{"from" : "TalendDate.isTomorrow", "output_template" : "when(date_add(current_date(),1)==$1,True).otherwise(False)"},
		{"from" : "TalendDate.isYesterday", "output_template" : "when(date_add(current_date(),-1)==$1,True).otherwise(False)"},
		{"from" : "TalendDate.makeDateTime", "output_template" : "to_timestamp(concat($1,lit(' '), $2))"},
		{"from" : "TalendDate.parseDate", "output_template" : "to_date($1,$2)"},
		{"from" : "TalendDate.parseDateTime", "output_template" : "to_timestamp($1,$2)"},
		{"from" : "TalendDataShaping.formatNumber", "output_template" : "format_number($1,$2)"},
		{"from" : "TalendDataShaping.hasValue", "output_template" : "length(nvl($1,'')) > 0"},
		{"from" : "TalendDataShaping.isEmpty", "output_template" : "length(nvl($1,'')) == 0"},
		{"from" : "TalendDataShaping.isnull", "to" : "isnull"},
		{"from" : "TalendDataShaping.isBoolean", "output_template" : "typeof($1)=='boolean'"},
		{"from" : "TalendDataShaping.isBytes", "output_template" : "typeof(unbase64($1))=='binary')"},
		{"from" : "TalendDataShaping.isCastable", "arg_pattern" : {"1" : "(\"BigDecimal\"|\"Dec\"|\"Decimal\")"},"output_template" : "$1.try_cast(DecimalType()).isNotNull()"},
		{"from" : "TalendDataShaping.isCastable", "arg_pattern" : {"1" : "\"Bytes\""},"output_template" : "$1.try_cast('string').try_cast(BinaryType()).isNotNull()"},
		{"from" : "TalendDataShaping.isCastable", "arg_pattern" : {"1" : "\"DateTime\""},"output_template" : "$1.try_cast(TimestampType()).isNotNull()"},
		{"from" : "TalendDataShaping.isCastable", "arg_pattern" : {"1" : "\"Date\""},"output_template" : "$1.try_cast(DateType()).isNotNull()"},
		{"from" : "TalendDataShaping.isCastable", "arg_pattern" : {"1" : "\"Time\""},"output_template" : "concat(current_date(),lit(' '), $1).try_cast(TimestampType()).isNotNull()"},
        {"from" : "TalendDataShaping.isCastable", "arg_pattern" : {"1" : "(\"Integer\"|\"Int\")"},"output_template" : "$1.try_cast('integer').isNotNull()"},
		{"from" : "TalendDataShaping.isDate","output_template" : "typeof($1)=='date'"},
		{"from" : "TalendDataShaping.isDateTime","output_template" : "typeof($1) =='timestamp'"},
		{"from" : "TalendDataShaping.isDecimal","output_template" : "typeof($1).like 'decimal%'"},
		{"from" : "TalendDataShaping.isDouble","output_template" : "typeof($1) =='double'"},
		{"from" : "TalendDataShaping.isFloat","output_template" : "typeof($1) =='float'"},
		{"from" : "TalendDataShaping.isInteger","output_template" : "typeof($1) =='int'"},
		{"from" : "TalendDataShaping.isLong","output_template" : "typeof($1) =='bigint'"},
		{"from" : "TalendDataShaping.isNumber","output_template" : "(typeof($1).isin('bigint','int','double','float')) | (typeof($1).like('decimal%'))"},
		{"from" : "TalendDataShaping.isString","output_template" : "typeof($1) =='string'"},
		{"from" : "TalendDataShaping.isTime","output_template" : "concat(current_date(),lit(' '), $1).try_cast(TimestampType()).isNotNull()"},
		{"from" : "TalendDataShaping.isBoolean","output_template" : "typeof($1) =='boolean'"},
		{"from" : "TalendDataShaping.toBytes","output_template" : "/*ToBytes($1) not supported use udf instead*/"},
		{"from" : "TalendDataShaping.toDate", "output_template" : "to_date(col(1))"},
		{"from" : "TalendDataShaping.toDateTime", "output_template" : "to_timestamp"},
		{"from" : "TalendDataShaping.toDecimal", "arg_pattern" : {"3" : "(\"DOWN\"|\"1\"|\"3\"|\"Floor\"|\"HALF_DOWN\"|\"4\")"},"output_template" : "floor($1.cast('double'),$2)"},
		{"from" : "TalendDataShaping.toDecimal", "arg_pattern" : {"3" : "(\"UP\"|\"0\"|\"CEILING\"|\"2\"|\"HALF_UP\"|\"5\")"},"output_template" : "ceiling($1.cast('double'),$2)"},
		{"from" : "TalendDataShaping.toDecimal", "arg_pattern" : {"3" : "(\"HALF_EVEN\"|\"6\")"},"output_template" : "bround($1.cast('double'),$2)"},
		{"from" : "TalendDataShaping.toDecimal", "arg_pattern" : {"3" : "\"7\""},"output_template" : "$1.cast('double')"},
		{"from" : "TalendDataShaping.toDecimal","output_template" : "$1.cast('double')"},
		{"from" : "TalendDataShaping.toDouble","output_template" : "$1.cast('double')"},
		{"from" : "TalendDataShaping.toInteger","output_template" : "$1.cast('integer')"},
		{"from" : "TalendDataShaping.toLong","output_template" : "$1.cast(LongType())"},
		{"from" : "TalendDataShaping.toString","output_template" : "$1.cast('string')"},
		{"from" : "TalendDataShaping.toTime","output_template" : "date_format($1,'HH:mm:ss')"},
		{"from" : "Numeric.sequence","output_template" : "monotonically_increasing_id()"},
		{"from" : "Numeric.random","to" : "rand"},
		{"from" : "Numeric.convertImpliedDecimalFormat","to" : "format_number($1,$2)"},
		{"from" : "Relational.ISNULL","output_template" : "isnull"},
		{"from" : "Relational.NOT","" : "~($1)"},
		{"from" : "SQLike.mid","output_template" : "substring"},
		{"from" : "SQLike.mid_index","output_template" : ".mid_index/*split(column_name, ',')[0]*use udf with instead*/ "},
		{"from" : "Numeric.Between","arg_pattern" : {"4" : "\"true\""},"output_template" : "$1.between($1,$3)"},
		{"from" : "Numeric.equals","num_args":3,"output_template" : "abs($1-$2)<=$3"},
		{"from" : "Numeric.equals","output_template" : "$1 == $2"},
		{"from" : "Numeric.greater","num_args":3,"output_template" : "($1-$2)>$3"},
		{"from" : "Numeric.greater","output_template" : "$1 > $2"},
		{"from" : "Numeric.greaterOrEqual","num_args":3,"output_template" : "$1 >= ($2-$3 )"},
		{"from" : "Numeric.greaterOrEqual","output_template" : "$1 >= $2"},
		{"from" : "Numeric.lower","num_args":3,"output_template" : "$1 < ($2-$3 )"},
		{"from" : "Numeric.lower","output_template" : "$1 < $2"},
		{"from" : "Numeric.lowerOrEqual","num_args":3,"output_template" : "$1 <= ($2-$3 )"},
		{"from" : "Numeric.lowerOrEqual","output_template" : "$1 <= $2"},
		{"from" : "Numeric.abs","to" : "abs"},
		{"from" : "Numeric.ceil","to" : "ceiling"},
		{"from" : "Numeric.exp","to" : "exp"},
		{"from" : "Numeric.floor","to" : "floor"},
		{"from" : "Numeric.ln","to" : "ln"},
		{"from" : "Numeric.log","to" : "log10"},
		{"from" : "Numeric.min","to" : "least"},
		{"from" : "Numeric.max","to" : "greatest"},
		{"from" : "Numeric.power","to" : "power"},
		{"from" : "Numeric.round","to" : "round"},
		{"from" : "Numeric.sqrt","to" : "sqrt"},
		{"from" : "Numeric.sign","to" : "sign"},
		{"from" : "Math.Between","arg_pattern" : {"4" : "\"true\""},"output_template" : "$1.between($1,$3)"},
		{"from" : "Math.equals","num_args":3,"output_template" : "abs($1-$2)<=$3"},
		{"from" : "Math.equals","output_template" : "$1 == $2"},
		{"from" : "Math.greater","num_args":3,"output_template" : "($1-$2)>$3"},
		{"from" : "Math.greater","output_template" : "$1 > $2"},
		{"from" : "Math.greaterOrEqual","num_args":3,"output_template" : "$1 >= ($2-$3 )"},
		{"from" : "Math.greaterOrEqual","output_template" : "$1 >= $2"},
		{"from" : "Math.lower","num_args":3,"output_template" : "$1 < ($2-$3 )"},
		{"from" : "Math.lower","output_template" : "$1 < $2"},
		{"from" : "Math.lowerOrEqual","num_args":3,"output_template" : "$1 <= ($2-$3 )"},
		{"from" : "Math.lowerOrEqual","output_template" : "$1 <= $2"},
		{"from" : "Math.abs","to" : "abs"},
		{"from" : "Math.ceil","to" : "ceiling"},
		{"from" : "Math.exp","to" : "exp"},
		{"from" : "Math.floor","to" : "floor"},
		{"from" : "Math.ln","to" : "ln"},
		{"from" : "Math.log","to" : "log10"},
		{"from" : "Math.min","to" : "least"},
		{"from" : "Math.max","to" : "greatest"},
		{"from" : "Math.power","to" : "power"},
		{"from" : "Math.round","to" : "round"},
		{"from" : "Math.sqrt","to" : "sqrt"},
		{"from" : "Math.sign","to" : "sign"},
		{"from" : "Mathematical.Between","arg_pattern" : {"4" : "\"true\""},"output_template" : "$1.between($1,$3)"},
		{"from" : "Mathematical.equals","num_args":3,"output_template" : "abs($1-$2)<=$3"},
		{"from" : "Mathematical.equals","output_template" : "$1 == $2"},
		{"from" : "Mathematical.greater","num_args":3,"output_template" : "($1-$2)>$3"},
		{"from" : "Mathematical.greater","output_template" : "$1 > $2"},
		{"from" : "Mathematical.greaterOrEqual","num_args":3,"output_template" : "$1 >= ($2-$3 )"},
		{"from" : "Mathematical.greaterOrEqual","output_template" : "$1 >= $2"},
		{"from" : "Mathematical.lower","num_args":3,"output_template" : "$1 < ($2-$3 )"},
		{"from" : "Mathematical.lower","output_template" : "$1 < $2"},
		{"from" : "Mathematical.lowerOrEqual","num_args":3,"output_template" : "$1 <= ($2-$3 )"},
		{"from" : "Mathematical.lowerOrEqual","output_template" : "$1 <= $2"},
		{"from" : "Mathematical.abs","to" : "abs"},
		{"from" : "Mathematical.acos","to" : "acos"},
		{"from" : "Mathematical.asin","to" : "asin"},
		{"from" : "Mathematical.atan","to" : "atan"},
		{"from" : "Mathematical.bitand","to" : "bit_and"},
		{"from" : "Mathematical.bitor","to" : "bit_or"},
		{"from" : "Mathematical.bitnot","to" : "bitwise_not"},
		{"from" : "Mathematical.BITXOR","to" : "bitxor"},
		{"from" : "Mathematical.cos","to" : "cos"},
		{"from" : "Mathematical.COSH","to" : "cosh"},
		{"from" : "Mathematical.DIV","output_template" : "($1/$2).cast('integer')"},
		{"from" : "Mathematical.INT","output_template" : "$1.cast('integer')"},
		{"from" : "Mathematical.FFIX","output_template" : "round($1, $2).cast('string')"},
		{"from" : "Mathematical.FFLT","output_template" : "round($1, $2).cast('string')"},
		{"from" : "Mathematical.MOD","output_template" : "$1 % $2"},
		{"from" : "Mathematical.NEG","output_template" : "$1 *-1"},
		{"from" : "Mathematical.NUM","output_template" : "(typeof($1).isin('bigint','int','double','float','long')) | (typeof($1).like('decimal%'))"},
		{"from" : "Mathematical.REAL","output_template" : "$1.cast('double')"},
		{"from" : "Mathematical.RND","to" : "rand"},
		{"from" : "Mathematical.SADD","output_template" : "$1.cast('double')+$2.cast('double')"},
		{"from" : "Mathematical.SDIV","output_template" : "$1/2"},
		{"from" : "Mathematical.SIN","to" : "sin"},
		{"from" : "Mathematical.SINH","to" : "sinh"},
		{"from" : "Mathematical.SMUL","output_template" : "$1.cast('double')*$2.cast('double')"},
		{"from" : "Mathematical.SSUB","output_template" : "$1.cast('double')-$2.cast('double')"},
		{"from" : "Mathematical.TAN","to" : "tan"},
		{"from" : "Mathematical.TANH","to" : "tan"},
		{"from" : "Mathematical.ceil","to" : "ceiling"},
		{"from" : "Mathematical.exp","to" : "exp"},
		{"from" : "Mathematical.floor","to" : "floor"},
		{"from" : "Mathematical.ln","to" : "ln"},
		{"from" : "Mathematical.log","to" : "log10"},
		{"from" : "Mathematical.min","to" : "least"},
		{"from" : "Mathematical.max","to" : "greatest"},
		{"from" : "Mathematical.power","to" : "power"},
		{"from" : "Mathematical.round","to" : "round"},
		{"from" : "Mathematical.sqrt","to" : "sqrt"},
		{"from" : "Mathematical.sign","to" : "sign"},
		{"from" : "arrayConcat","output_template" : "concat_ws('',$1))"},
		{"from" : "arrayConcatWith","output_template" : "concat_ws($1,$2))"},
		{"from" : "arrayCount","output_template" : "size(expr(\"FILTER($1, x -> x IS NOT NULL)\"))"},
		{"from" : "arrayFirst","output_template" : "expr(\"FILTER($1, x -> x IS NOT NULL)\")[0]"},
		{"from" : "arrayContains","to" : "array_contains"},
		{"from" : "arrayIndexOf","to" : "array_position"},
		{"from" : "arrayLast","output_template" : "reverse(expr(\"FILTER(t, x -> x IS NOT NULL)\"))[0]"},
		{"from" : "arrayMax","to" : "array_max"},
		{"from" : "arrayMin","to" : "array_min"},
		{"from" : "arrayLast","output_template" : "expr(\"aggregate (expr(\"FILTER($1, x -> x IS NOT NULL)\"), 0, (acc, val) -> acc + val)\""},
		{"from" : "isArray","output_template" : "typeof($1).like('array%')"},
		{"from" : "isMap","output_template" : "typeof($1).like('map%')"},
		{"from" : "toArray","to" : "array"},
		{"from" : "toMap","to" : "map"},
		{"from" : "String.valueOf", "output_template" : "$1.cast('string')"},
		{"from" : ".toString()", "output_template" : "$1.cast('string')"},
		{"from" : "Integer.valueOf", "output_template" : "$1.cast('integer')"},
		{"from" : "Integer.parseInt","num_args":1, "output_template" : "$1.cast('integer')"},
		{"from" : "Integer.min", "to" : "least"},
		{"from" : "Integer.max", "to" : "greatest"},
		{"from" : "Integer.reverse", "to" : "reverse"},
		{"from" : "Long.valueOf", "output_template" : "$1.cast('long')"},
		{"from" : "Double.valueOf", "output_template" : "$1.cast('double')"},
		{"from" : "Float.valueOf", "output_template" : "$1.cast('float')"},
		{"from" : "Boolean.valueOf", "output_template" : "$1.cast('boolean')"},
		{"from" : "Short.valueOf", "output_template" : "$1.cast('short')"},
		{"from" : "Byte.valueOf", "output_template" : "$1.cast('byte')"},
		{"from" : "Character.valueOf", "output_template" : "$1.cast('string')"},
		{"from" : "BigDecimal.valueOf", "output_template" : "$1.cast('double')"},
		{"from" : "BigInteger.valueOf", "output_template" : "$1.cast('bigint')"},
		{"from" : "LocalDate.valueOf", "output_template" : "$1.cast('date')"},
		{"from" : "LocalDate.LocalTime", "output_template" : "date_format($1,'HH:mm:ss')"},
		{"from" : "LocalDateTime.valueOf", "output_template" : "$1.cast('timestamp')"},
		{"from" : ".toString", "output_template" : ".cast('string')"},
		{"from" : ".byteValue", "output_template" : ".cast('byte')"},
		{"from" : ".doubleValue", "output_template" : ".cast('double')"},
		{"from" : ".floatValue", "output_template" : ".cast('float')"},
		{"from" : ".intValue", "output_template" : ".cast('integer')"},
		{"from" : ".longValue", "output_template" : ".cast('long')"},
		{"from" : ".byteValue", "output_template" : ".cast('byte')"},
		{"from" : ".short", "output_template" : ".cast('short')"},
		{"from" : ".isEmpty", "output_template" : " == ''"},
		{"from" : "substr", "to" : "substring"},
		{"from" : "__FUNCTION_SUB__.equals", "output_template" : " == $1"},
		{"from" : ".equals", "output_template" : " == $1"},
		
		{"from" : "TalendDate.addDate", "arg_pattern" : {"3" : "\"HH\""}, "output_template" : "$1 + expr('interval $2 hours')"},
		{"from" : "routines.DateConversion.julianToGregorian", "output_template" : "datetime.datetime.strptime($1, '%y%j').date().strftime('%Y-%m-%d')"},
		{"from" : "float", "output_template" : "$1"},
		{"from" : "newBigDecimal", "output_template" : "$1.cast('decimal(%COLUMN_LENGTH%, %COLUMN_SCALE%)')"},
		{"from" : "BigDecimal.valueOf", "output_template" : "$1.cast('decimal(%COLUMN_LENGTH%, %COLUMN_SCALE%)')"}

	],

	//////////////// JOBLET ////////////////
	"joblet_class_name" : "Joblets",
	"joblet_code_indent" : "    ", //joblet general code indent - 4 spaces
	"joblet_template_file" : "C:\Work\Projects\DWS\BBPerl\backend-perl-shared\Config\Writer\Spark\python_joblet_template.py", //Overrides joblet_input_declaration
	//"joblet_header_template" : "C:\Work\Projects\DWS\BBPerl\backend-perl-shared\Config\Writer\Spark\python_joblet_header_template.py",
	"joblet_input_declaration" : "def %JOBLET_NAME%(self, spark, %INPUT_OUTPUT_TABLES%):", //specifying python function declaration
	"seperate_joblets" : "1",

	"cast_statement" : "%SOURCE_NODE_NAME%.%SOURCE_COLUMN%.cast('%EXPR%').alias('%TARGET_COLUMN%')",

	"disable_length_conversion_for_types" : ["date", "string", "double", "int", "bigint"], //only decimal is enabled
	
	"datatype_mapping" : {
		"id_string": "string",
		"id_integer" : "int",
		"id_long" : "bigint",
		"id_date" : "date",
		"id_decimal" : "decimal",
		"id_bigdecimal" : "decimal",
		"id_double" : "double",
		"id_boolean" : "boolean"
	},

	"direct_datatype_conversion" : {  //this is %EXPR% in cast_statement
		"ID_STRING_TO_ID_INTEGER": "int",
		"ID_STRING_TO_ID_BOOLEAN": "boolean",
		"ID_INTEGER_TO_ID_STRING" : "string",
		"ID_LONG_TO_ID_INTEGER" : "int",
		"ID_INTEGER_TO_ID_LONG" : "bigint",
		"ID_STRING_TO_ID_LONG" : "bigint",
		"ID_STRING_TO_ID_DATE" : "date",
		"ID_DATE_TO_ID_STRING" : "string",
		"ID_DATE_TO_ID_DECIMAL" : "decimal",
		"ID_BIGDECIMAL_TO_ID_INTEGER" : "int",
		"ID_STRING_TO_ID_BIGDECIMAL" : "decimal",
		"ID_LONG_TO_ID_STRING" : "string",
		"ID_INTEGER_TO_ID_BIGDECIMAL" : "decimal",
		//below are same type conversions
		"ID_INTEGER_TO_ID_INTEGER" : "int",
		"ID_LONG_TO_ID_LONG" : "bigint",
		"ID_DATE_TO_ID_DATE" : "date",
		"ID_STRING_TO_ID_STRING" : "string",
		"ID_DECIMAL_TO_ID_DECIMAL" : "decimal",
		"ID_BIGDECIMAL_TO_ID_BIGDECIMAL" : "decimal",
		"ID_DOUBLE_TO_ID_DOUBLE" : "double",
		"ID_CHAR_TO_ID_CHAR" : "double",
		"ID_BOOLEAN_TO_ID_BOOLEAN" : "boolean"
	}
}
