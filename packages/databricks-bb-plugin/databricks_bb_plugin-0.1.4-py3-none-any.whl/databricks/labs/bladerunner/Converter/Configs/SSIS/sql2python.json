{
	"line_subst" : [
		{"from" : "REPLACESTR\s*\(\s*\d\s*," , "to" : "regexp_replace("},
		{"from" : " as int", "to" : ""},
		{"from" : " as bigint", "to" : ""},
		{"from" : " as float", "to" : ""},
		{"from" : " as datetime\b", "to" : ""},
		{"from" : "\s+datetime\b\s*\=", "to" : " ="},
		{"from" : "\bdeclare\s+", "to" : ""},
		{"from" : "\@(\w+)", "to" : "V_$1"},
		{"from" : " IS NULL\b", "to" : ".isNull()"},
		{"from" : " IS NOT NULL\b", "to" : ".isNotNull()"},
		{"from" : " as decimal\s*\(\s*LIT\(.*?\)\s*,\s*LIT\(.*?\)\s*\)", "to" : ""},
		{"from" : " as nvarchar\s*\(\s*LIT\(.*?\)\s*\)", "to" : ""},
		{"from" : " as nvarchar\s*\(.*?\)", "to" : ""},
		{"from" : " as varchar\s*\(\s*LIT\(.*?\)\s*\)", "to" : ""},
		{"from" : " as char\s*\(\s*LIT\(.*?\)\s*\)", "to" : ""},
		{"from" : " as character\b\s+\bvarying\b\s*\(\s*LIT\(.*?\)\s*\)", "to" : ""},
		{"from" : "(\s*&\s*)(lit\(\d+\))", "to" : ".bitwiseAND($2)"},
		{"from" : "\bis false\b", "to" : "!= lit(1)"},
		{"from" : "\bis true\b", "to" : "== lit(1)"},
		{"from" : "\bTRUE\b", "to" : "lit(1)"},
		{"from" : "\bFALSE\b", "to" : "lit(0)"},
		{"from" : "\bAND\b", "to" : "&"},
		{"from" : "\bOR\b", "to" : "|"},
		{"from" : "(\w*\(*\w*\.*\w+\)*)(\s*not\s+in\s*\()", "to" : "~$1.isin("},
		{"from" : "\s*\bin\b\s*\(", "to" : ".isin("},
		{"from" : "(\w*\(*\w*\.*\w+\)*)(\s*not\s+like\s*)('.*?')", "to" : "~$1.like($3)"},
		{"from" : "(\w*\(*\w*\.*\w+\)*)(\s*not\s+like\s+lit\()\s*('.*?'\))", "to" : "~$1.like($3"},
		{"from" : "(\s*\blike\b\s*)('.*?')", "to" : ".like($2)"},
		{"from" : "(\s*\blike\b\s+lit\()('.*?'\))", "to" : ".like($2"},
		{"from" : "(\s*\blike\b\s*)(trim\(.*?\))", "to" : ".like($2)"},
		{"from" : "(\bCASE\b\s+WHEN\b\s*.*?\s*)((?<![\<,\>,\!,\=])\=(?![\<,\>,\!,\=]))(.*?\s+THEN)", "to" : "$1==$3"},
		{"from" : "\bCASE\b\s+WHEN\b\s*", "to" : "when("},
		{"from" : "\s+THEN\b\s+", "to" : ","},
		{"from" : "\bWHEN\b\s+", "to" : ").when("},
		{"from" : "\belse\b\s+", "to" : ").otherwise("},
		{"from" : "\bEND\b", "to" : ")"},
		{"from" : "====", "to" : "=="},
		{"from" : ">==", "to" : ">="},
		{"from" : "<==", "to" : "<="},
		{"from" : "!==", "to" : "!="},
		{"from" : "\bgetdate\s*\(\s*\)\s*(\+|\-|\*|\/)\s*(\w+)", "to" : "datetime.now()$1timedelta(days=$2)"}
	],
	
	"block_subst" : [
	],
	
	"function_subst" : [
		{"from" : "ISNULL", "to" : "coalesce"},
		{"from" : "IF", "to" : "iff"},
		{"from" : "COALESCE", "to" : "coalesce", "case_sensitive_match": "1"},
		{"from" : "CONVERT", "output_template" : "$2", "num_args": "3"},
		{"from" : "CONVERT", "output_template" : "cast($2 as $1)", "num_args": "2"},
		{"from" : "dateadd", "arg_pattern" : {"1" : "day"}, "output_template" : "$3+timedelta(days=$2)"},
		{"from" : "dateadd", "arg_pattern" : {"1" : "month"}, "output_template" : "$3+timedelta(months=$2)"},
		{"from" : "dateadd", "arg_pattern" : {"1" : "year"}, "output_template" : "$3+timedelta(years=$2)"},
		{"from" : "getdate", "to" : "datetime.now"},
		{"from" : "ROUND", "to" : "round", "case_sensitive_match": "1"},
		{"from" : "SUM", "to" : "sum", "case_sensitive_match": "1"},
		{"from" : "CAST", "to" : "__ELIMINATE_CALL__"},
		{"from" : "TO_CHAR", "to" : "date_format"},
		{"from" : "TRIM", "to" : "trim", "case_sensitive_match": "1"},
		{"from" : "DATE_TRUNC", "to" : "date_trunc", "case_sensitive_match": "1"},
		{"from" : "SQLEXT..DAYS_BETWEEN", "to" : "date_diff"},
		{"from" : "UPPER", "to" : "upper", "case_sensitive_match": "1"},
		{"from" : "NULLIF", "to" : "null_if"}
	]
}
