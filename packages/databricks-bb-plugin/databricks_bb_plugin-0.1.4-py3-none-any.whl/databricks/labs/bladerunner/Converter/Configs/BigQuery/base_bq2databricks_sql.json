{
  "target_file_extension": "sql",
  "inherit_from" : ["general_sql_specs.json"],
  "function_subst": [
    { "from": "any_value", "output_template": "any_value($1, true)" },
    { "from": "approx_top_count", "to": "approx_top_k" },
    { "from": "array_concat", "to": "array_union" },
    { "from": "array_length", "to": "array_size" },
    { "from": "array_reverse", "to": "reverse" },
    { "from": "array_to_string", "num_args": 3, "output_template": "array_join($1, $2, $3)" },
    { "from": "array_to_string", "num_args": 2, "output_template": "array_join($1, $2)" },
    { "from": "bool", "to": "boolean" },
    { "from": "collate", "output_template": "($1 COLLATE $2)" },
    { "from": "countif", "to": "count_if" },
    { "from": "date", "num_args": 3, "to": "make_date" },
    { "from": "div", "output_template": "($1 div $2)" },
    { "from": "edit_distance", "to": "levenshtein" },
    { "from": "ends_with", "to": "endswith" },
    { "from": "error", "to": "raise_error" },
    { "from": "float64", "to": "double" },
    { "from": "format", "to": "printf" },
    { "from": "format_date", "output_template": "date_format($2, $1)" },
    { "from": "format_datetime", "output_template": "date_format($2, $1)" },
    { "from": "format_time", "output_template": "date_format($2, $1)" },
    { "from": "format_timestamp", "output_template": "date_format($2, $1)" },
    { "from": "from_base64", "to": "unbase64" },
    { "from": "from_hex", "to": "unhex" },
    { "from": "generate_array", "to": "sequence" },
    { "from": "generate_date_array", "to": "sequence" },
    { "from": "generate_timestamp_array", "to": "sequence" },
    { "from": "generate_uuid", "to": "uuid" },
    { "from": "ieee_divide", "to": "try_divide" },
    { "from": "instr", "num_args": 3, "output_template": "locate($2, $1, $3)"},
    { "from": "int64", "to": "bigint" },
    { "from": "is_nan", "to": "isnan" },
    { "from": "lax_bool", "to": "boolean" },
    { "from": "lax_float64", "to": "double" },
    { "from": "lax_int64", "to": "bigint" },
    { "from": "lax_string", "to": "string" },
    { "from": "logical_and", "to": "bool_and" },
    { "from": "logical_or", "to": "bool_or" },
    { "from": "ltrim", "num_args": 2, "output_template": "ltrim($2, $1)"},
    { "from": "net.host", "output_template": "parse_url($1, 'HOST')" },
    { "from": "parse_date", "output_template": "to_date($2, $1)" },
    { "from": "parse_datetime", "output_template": "to_timestamp($2, $1)" },
    { "from": "parse_timestamp", "num_args": 2, "output_template": "to_timestamp($2, $1)" },
    { "from": "regexp_contains", "output_template": "regexp_like($1, $2)" },
    { "from": "regexp_extract", "num_args": 2, "output_template": "regexp_extract($1, $2)" },
    { "from": "regexp_extract_all", "output_template": "regexp_extract_all($1, $2)" },
    { "from": "regexp_instr", "num_args": 2, "output_template": "regexp_instr($1, $2)" },
    { "from": "regexp_substr", "num_args": 2, "output_template": "regexp_substr($1, $2)" },
    { "from": "round", "arg_pattern": {"3": "ROUND_HALF_AWAY_FROM_ZERO"}, "num_args": 3, "output_template": "round($1, $2)"},
    { "from": "round", "arg_pattern": {"3": "ROUND_HALF_EVEN"}, "num_args": 3, "output_template": "bround($1, $2)"},
    { "from": "rtrim", "num_args": 2, "output_template": "rtrim($2, $1)"},
    { "from": "safe_add", "to": "try_add" },
    { "from": "safe_cast", "to": "try_cast" },
    { "from": "safe_divide", "to": "try_divide" },
    { "from": "safe_multiply", "to": "try_multiply" },
    { "from": "safe_subtract", "to": "try_subtract" },
    { "from": "sha256", "output_template": "sha2($1, 256)" },
    { "from": "sha512", "output_template": "sha2($1, 512)" },
    { "from": "split", "num_args": 1, "output_template": "split($1, ',')"},
    { "from": "starts_with", "to": "startswith" },
    { "from": "strpos", "to": "instr" },
    { "from": "timestamp_diff", "output_template": "timestampdiff($3, $2, $1)" },
    { "from": "timestamp_trunc", "num_args": 2, "output_template": "date_trunc($2, $1)" },
    { "from": "to_base64", "to": "base64" },
    { "from": "to_hex", "to": "hex" },
    { "from": "trim", "num_args": 2, "output_template": "trim($2 FROM $1)" }
  ]
}
