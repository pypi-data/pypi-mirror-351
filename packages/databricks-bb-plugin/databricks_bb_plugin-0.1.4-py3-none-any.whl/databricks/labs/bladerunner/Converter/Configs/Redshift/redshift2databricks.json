{
	//"inherit_from":["general_sql_specs.json"],
	"target_sql" : "DATABRICKS",
	//"target_capabilities" : {"loops":"0"},
	//"from_after_delete" : "1",
	
	"target_file_extension" : "sql",
	"CUSTOM_CONVERTER_MODULES" : ["databricks_output_hooks_V2", "redshift_source_hooks"],
	"invoked_python_template_file"   : "python_template_for_databricks.py",
	"COMBINED_CUSTOM_MODULES_LOAD" : 1, //loads all files at the same time to ensure vars can be shared
	"initialize_hooks_call" : "::init_databricks_hooks", //initialize context, pass all relevant info
	"source_prescan_routine" : "::redshift_prescan",
	"preprocess_file" : "1",
	"preprocess_routine" : "::preprocess_for_databricks",

	
	"prefix_tag" : "<python>",
	"generate_widget_to_variable_assignments" : 1,
	
	
	
	"extract_embedded_sql" : ["sh","ksh","ssh"], //listing extensions of files from which to extract embedded sql.  Use "embedded_sql_tags" key to list strings depicting the start of sql

	"code_fragment_breakers": {
		//"line_start": ["\s*\.[a-zA-Z]"], //BTEQ's dot commands
		"line_end": ["\;"]
	},
	"statement_end" : ";",
	//apply substitutions when lines that begin with these tokens
	
		"stmt_categorization_patterns": [
	    {"category": "TABLE_DDL", "patterns" : [".*?CREATE\s+TABLE",".*?CREATE\s+SET.*\s+TABLE",".*?CREATE\s+MULTISET.*\s+TABLE",".*?CREATE\s+VOLATILE.*\s+TABLE",".*?CREATE\s+TEMP.*\s+TABLE",".*?CREATE\s+GLOBAL\s+TEMPORARY",".*?CREATE\s+PRIVATE\s+TEMPORARY",".*?CREATE\s+LOCAL\s+TEMPORARY"]},
		{"category": "CREATE_PROCEDURE", "patterns" : [".*CREATE PROCEDURE \((.*?)\).*;", ".*CREATE\s*OR\s*REPLACE\s*PROCEDURE", ".*CREATE\s*PROCEDURE", ".*REPLACE\s*PROCEDURE"]},
		{"category": "LOOP_START", "patterns" : [".*?LOOP_START"]},
		{"category": "LOOP_END", "patterns" : ["end_loop"]},
		{"category": "IF_START", "patterns" : ["\bif\b.*?\bthen\b"]},
		{"category": "ELSIF_START", "patterns" : ["\belsif\b.*?\bthen\b"]},
		{"category": "WHILE_START", "patterns" : ["\bwhile\b.*?\bloop\b"]},
		{"category": "WHILE_END", "patterns" : ["end_loop"]},
		{"category": "BEGIN_START", "patterns" : ["\bBEGIN\b"]},
		{"category": "BEGIN_END", "patterns" : ["\bend\b"]},
		{"category": "FOR_START", "patterns" : ["\bfor\b.*?\bLOOP\b"]},
		{"category": "IF_END", "patterns" : ["end_if"]},
		{"category": "SELECT_INTO_VARIABLE", "patterns" : ["\bSELECT\b.*?\bINTO\b"]}
	],

	"commands" : {
		"SELECT_INTO_QUERY" : "(%COLUMNS%) = spark.sql(\"\"\"%QUERY%\"\"\").first().asDict().values()\n",
		"SELECT_INTO_SET" : "conf.set(\"var.%VARIABLE%\", %VARIABLE%)\n",
		"SWAP" : "spark.sql(\"\"\"%QUERY%\"\"\")\n"
	},	
	"fragment_handling" : {
		//"LOOP_START" : "::loop_start",
		//"LOOP_END" : "::loop_end",
		"IF_START" : "::if_start",
		"ELSIF_START" : "::elsif_start",
		"IF_ELSE" : "::if_else",
		"IF_END" : "::if_end",
		"IF_ELSE" : "::if_else",
		"WHILE_START" : "::while_start",
		"WHILE_END" : "::while_end",
		"BEGIN_START" : "::begin_start",
		"BEGIN_END" : "::begin_end",
		"FOR_START" : "::for_start",
		"SELECT_INTO_VARIABLE" : "::select_into_variable",
		"CREATE_PROCEDURE" : "::databricks_proc_arg_defs",
		"__DEFAULT_HANDLER__" : "::databricks_default_handler"
	},
	
	"line_subst" : [
	    {"from" : "DEFAULT\s+NULL\s*\,", "to" : ",--FIXME databricks.migration.unsupported.feature Redshift UNSUPPORTED DEFAULT NULL\n", "statement_categories" : ["TABLE_DDL"]}, //change NOT NULL to NOT_NULL
        {"from" : "\"(\w+)\"", "to" : "$1", "statement_categories" : ["TABLE_DDL"]} ,
		{"from" : "NOT\s+NULL", "to" : "NOT_NULL", "statement_categories" : ["TABLE_DDL"]}, //change NOT NULL to NOT_NULL
		{"from" : "\bNULL\b", "to" : "", "statement_categories" : ["TABLE_DDL"]}, // get rid of NULL words
		{"from" : "NOT_NULL", "to" : "NOT NULL", "statement_categories" : ["TABLE_DDL"]}, //change back from NOT_NULL to NOT NULL
			
	    // datatype mapping start	   nn// {"from" : "\binteger\s*\(\s*\d+\s*\)\s+identity\s*\(.*?\)", "to" : "BIGINT GENERATED ALWAYS AS IDENTITY", "statement_categories" : ["TABLE_DDL"]},
		{"from" : "GENERATED\s+BY\s+DEFAULT\s+AS\s+identity\s*\(\s*(\d+)\s*\,\s*(\d+)\s*\)\s+NOT\s*NULL", "to" : "GENERATED BY DEFAULT AS IDENTITY(START WITH $1 INCREMENT BY $2)", "statement_categories" : ["TABLE_DDL"]},
		{"from" : "GENERATED\s+BY\s+DEFAULT\s+AS\s+identity\s*\(\s*(\d+)\s*\,\s*(\d+)\s*\)", "to" : "GENERATED BY DEFAULT AS IDENTITY(START WITH $1 INCREMENT BY $2)", "statement_categories" : ["TABLE_DDL"]},

		{"from" : "identity\s*\(\s*(\d+)\s*\,\s*(\d+)\s*\)", "to" : "GENERATED ALWAYS AS IDENTITY (START WITH $1 INCREMENT BY $2)", "statement_categories" : ["TABLE_DDL"]},

		{"from" : "identity\s+NOT\s+NULL", "to" : "GENERATED ALWAYS AS IDENTITY","statement_categories" : ["TABLE_DDL"]},
		{"from" : "\bint\s*\(\s*\d+\s*\)\s+identity\s*\(.*?\)", "to" : "BIGINT GENERATED ALWAYS AS IDENTITY", "statement_categories" : ["TABLE_DDL"]},
		{"from" : "sortkey\s*\,","to" : ",-- FIXME databricks.migration.unsupported.feature Redshift sortkey on table\n"},
		{"from" : "compound\s+sortkey","to" : "-- FIXME databricks.migration.unsupported.feature Redshift compound sort key on table ", "statement_categories" : ["TABLE_DDL"]},
		{"from" : "diststyle\s+(?!on)(\w+)","to" : "-- FIXME databricks.migration.unsupported.feature Redshift compound $1 diststyle on table ", "statement_categories" : ["TABLE_DDL"]},
		{"from" : "interleaved\s+sortkey","to" : "-- FIXME databricks.migration.unsupported.feature Redshift compound sort key on table ", "statement_categories" : ["TABLE_DDL"]},
		{"from" : "int\s+identity\s*\(.*?\)", "to" : "BIGINT GENERATED ALWAYS AS IDENTITY", "statement_categories" : ["TABLE_DDL"]},
		{"from" : "\bdefault\b\s+(\'.*?\')\s*\," ,"to" : ",-- FIXME databricks.migration.unsupported.feature Redshift column default value $1", "statement_categories" : ["TABLE_DDL"]},
		{"from" : "\bdefault\b\s+(\'.*?\')", "to" : "-- FIXME databricks.migration.unsupported.feature Redshift column default value $1", "statement_categories" : ["TABLE_DDL"]},
		{"from" : "\bdefault\b\s+(\d+)\s*\," ,"to" : ",-- FIXME databricks.migration.unsupported.feature Redshift column default value $1", "statement_categories" : ["TABLE_DDL"]},
		{"from" : "\bdefault\b\s+(\d+)" ,"to" : "-- FIXME databricks.migration.unsupported.feature Redshift column default value $1", "statement_categories" : ["TABLE_DDL"]},
		{"from" : "\bencode\b\s+(\w+)\s*\,", "to" : ",-- FIXME databricks.migration.unsupported.feature Redshift column encoding  $1\n", "statement_categories" : ["TABLE_DDL"]},
		{"from" : "\bencode\b\s+(\w+)", "to" : "-- FIXME databricks.migration.unsupported.feature Redshift column encoding  $1", "statement_categories" : ["TABLE_DDL"]},
		{"from" : "\bdistkey\b", "to" : "-- FIXME databricks.migration.unsupported.feature Redshift column dist key\n", "statement_categories" : ["TABLE_DDL"]},
		{"from" : "(\w+\s+\w+\(*\d*\)*)\s+PRIMARY\s+KEY\s*\,", "to" : "$1,-- FIXME databricks.migration.unsupported.feature PRIMARY KEY", "statement_categories" : ["TABLE_DDL"]},
		{"from" : "(?<!\_DONE\_)PRIMARY\s+KEY\s*\((.*?)\)", "to" : "CONSTRAINT $1 _DONE_PRIMARY KEY($1)", "statement_categories" : ["TABLE_DDL"]},
		{"from" : "(?<!\_DONE\_)FOREIGN\s+KEY\s*\((.*?)\)", "to" : "CONSTRAINT $1 _DONE_FOREIGN KEY($1)", "statement_categories" : ["TABLE_DDL"]},
	    {"from" : "\bTIMESTAMP\s+WITHOUT\s+TIME\s+ZONE\b", "to" : "TIMESTAMP"},
		{"from" : "\bHLLSKETCH\b\s+\,", "to" : "HLLSKETCH,--FIXME databricks.migration.unsupported.feature Redshift UNSUPPORTED TYPE","statement_categories" : ["TABLE_DDL"]},
		{"from" : "\bGEOMETRY\b\s+\,", "to" : "GEOMETRY,--FIXME databricks.migration.unsupported.feature Redshift UNSUPPORTED TYPE","statement_categories" : ["TABLE_DDL"]},
		{"from" : "\bSUPER\b\s+\,", "to" : "SUPER,--FIXME databricks.migration.unsupported.feature Redshift UNSUPPORTED TYPE","statement_categories" : ["TABLE_DDL"]},

		{"from" : "\bTIMESTAMPTZ\b", "to" : "TIMESTAMP"}, 
		{"from" : "\bTIMETZ\b", "to" : "TIMESTAMP"}, 
		{"from" : "\bTIMESTAMP\s+WITH\s+TIME\s+ZONE\b", "to" : "TIMESTAMP"}, 
	    {"from" : "\bNUMBER\b(?!\s*\()", "to" : "NUMERIC"},
		{"from" : "AS\s+\bNUMBER\b(?!\s*\()", "to" : "AS NUMERIC"},
		{"from" : "\:\:NUMBER\b\s*(?!\()", "to" : "\:\:NUMERIC"},
		{"from" : "\bNUMBER\b\s*\(", "to" : "NUMERIC("},
		{"from" : "AS\s+\bNUMBER\b", "to" : "AS NUMERIC"},
		{"from" : "\:\:NUMBER\b(?!\s*\()", "to" : "::NUMERIC"},
	    {"from" : "\bNUMBER\b\s*\(", "to" : "NUMERIC("},
		{"from" : "\bNUMBER\b", "to" : "NUMERIC"},
		{"from" : "\bNUMBER\b\s*\(", "to" : "NUMERIC("},
		{"from" : "AS\s+\bNUMBER\b", "to" : "AS NUMERIC"},
		{"from" : "\:\:NUMBER\b", "to" : "\:\:NUMERIC"},
		{"from" : "\bCHAR\s*\(.*?\)", "to" : "STRING"},
		{"from" : "\bNCHAR\s*\(.*?\)", "to" : "STRING"},
		{"from" : "\bVARCHAR\s*\(.*?\)", "to" : "STRING"},
		{"from" : "\bNVARCHAR\s*\(.*?\)", "to" : "STRING"},
		{"from" : "\bNVARCHAR2\s*\(.*?\)", "to" : "STRING"},
		{"from" : "\bVARCHAR\s*\(.*?\)", "to" : "STRING"},
		{"from" : "CHARACTER\s+VARYING","to" : "STRING"},
		{"from" : "\bCHARACTER\s*\(.*?\)", "to" : "STRING"},
		{"from" : "\bCHAR\b", "to" : "STRING"},
		
		{"from" : "\bNCHAR\b", "to" : "STRING"},
		{"from" : "\:\:NCHAR\b", "to" : "::STRING"},
		{"from" : "as\s+ NCHAR\b", "to" : "as STRING"},
		{"from" : "\bVARCHAR\b\s*\(\d+\)", "to" : "STRING"},
		{"from" : "\bVARCHAR\b", "to" : "STRING"},
		{"from" : "\:\:VARCHAR\b", "to" : "::STRING"},
		{"from" : "as\s+VARCHAR\b", "to" : "as STRING"},
		
		{"from" : "\bNVARCHAR\b", "to" : "STRING"},
		{"from" : "\:\:NVARCHAR\b", "to" : "::STRING"},
		{"from" : "as\s+NVARCHAR\b", "to" : "as STRING"},
		
		{"from" : "\bVARCHAR2\b", "to" : "STRING"},
		{"from" : "\:\:VARCHAR2\b", "to" : "::STRING"},
		{"from" : "as\s+VARCHAR2\b", "to" : "as STRING"},
		
		{"from" : "\bNVARCHAR2\b", "to" : "STRING"},
		{"from" : "\:\:NVARCHAR2\b", "to" : "::STRING"},
		{"from" : "as\s+NVARCHAR2\b", "to" : "as STRING"},
	    
        {"from" : "\bCHARACTER\b", "to" : "STRING"},
		{"from" : "\:\:CHARACTER\b", "to" : "::STRING"},
		{"from" : "as\s+CHARACTER\b", "to" : "as STRING"}, 		
	     {"from" : "\bTEXT\s*\(.*?\)", "to" : "STRING"},
		{"from" : "\bTEXT\b", "to" : "STRING"},
		{"from" : "\:\:TEXT\b", "to" : "::STRING"},
		{"from" : "as\s+TEXT\b", "to" : "as STRING"}, 	
		{"from" : "\bVARBINARY\b", "to" : "BINARY"},
	    {"from" : "\bBYTEINT\b", "to" : "TINYINT"},
		{"from" : "FLOAT4", "to" : "FLOAT"},
		{"from" : "FLOAT8", "to" : "FLOAT"},
		{"from" : "\bdatetime\b", "to" : "TIMESTAMP"},
		{"from" : "\btime\b", "to" : "TIMESTAMP"},
		{"from" : "\btimestamp_ntz\b", "to" : "TIMESTAMP"},
		{"from" : "\btimestamp_ltz\b", "to" : "TIMESTAMP"},
		{"from" : "\btimestamp_tz\b", "to" : "TIMESTAMP"},
		{"from" : "\bBINARY\s*\(.*?\)", "to" : "BINARY"},
		{"from" : "\bNUMBER\s*\(\s*\*\s*\,\s*\d\s*\)", "to" : "NUMERIC"},
		{"from" : "\bSTRING\s*\(.*?\)", "to" : "STRING"},
		{"from" : "\bnchar\b", "to" : "string"},
		{"from" : "\bnvarchar\b", "to" : "string"},
		{"from" : "\bchar\b", "to" : "string"},
		{"from" : "\bcharacter\b", "to" : "string"},
		{"from" : "\bbpchar\b", "to" : "string"},
		{"from" : "\bvarchar\b", "to" : "string"},
		{"from" : "CHARACTER\s+VARYING", "to" : "string"},
		{"from" : "\bTEXT\b", "to" : "string"},
		{"from" : "\bBYTE\b", "to" : "BINARY"},
		{"from" : "\bVARBYTE\b", "to" : "BINARY"},
		{"from" : "\bVARBINARY\b", "to" : "BINARY"}, //1
		{"from" : "\bTO_HEX\b", "to" : " HEX"},    
		{"from" : "\sFROM_HEX", "to" : "HEX"},
		{"from" : "\bINT2", "to" : "INT"},
		{"from" : "\bINT4", "to" : "INT"},
		{"from" : "\bINT8", "to" : "BIGINT"},
		{"from" : "\bFLOAT4", "to" : "FLOAT"},
		{"from" : "REAL", "to" : "FLOAT"},
		{"from" : "DOUBLE\s+PRECISION", "to" : "FLOAT"},
		{"from" : "\bBOOL\b", "to" : "BOOLEAN"},
		{"from" : "\bTIMESTAMP\s+WITHOUT\s+TIME\s+ZONE\b", "to" : "TIMESTAMP"},

		{"from" : "\bTIMESTAMP\s+WITH\s+TIME\s+ZONE\b", "to" : "TIMESTAMP"},
		{"from" : "\bTIME\b", "to" : "TIMESTAMP"},
		{"from" : "\bTIMEZ\b", "to" : "TIMESTAMP"},
		{"from" : "\bINTEGER\s*\(.*?\)", "to" : "INTEGER"},
		{"from" : "\bINT\s*\(.*?\)", "to" : "INTEGER"},
		// datatype mapping end
        
		// mis start
		{"from" : "\bCOLLATE\b\s+(\w+)", "to" : "/*commented collation $1*/"},
		
		
		
		//FUNCTION SUBS 
		{"from" : "TRUNC\s*\(\s*(\d+\.\d+)\)", "to" : "ROUND($1)"},
		
		//date formats
		{"from" : "'YYYY\/MM\/DD hh24\:mi\:ss\'", "to" : "'y/MM/dd HH:mm:ss'"},
		{"from" : "'YYYY\/MM\/DD hh12\:mi\:ss\'", "to" : "'y/MM/dd hh:mm:ss'"},
		{"from" : "'MM\/DD\/YYYY hh12\:mi\:ss\'", "to" : "'MM/dd/y hh:mm:ss'"},
		{"from" : "'MM\/DD\/YYYY hh24\:mi\:ss\'", "to" : "'MM/dd/y HH:mm:ss'"},
		{"from" : "'YYYY\.MM\.DD hh24\:mi\:ss\'", "to" : "'y.MM.dd HH:mm:ss'"},
		{"from" : "'YYYY\.MM\.DD hh12\:mi\:ss\'", "to" : "'y.MM.dd hh:mm:ss'"},
		{"from" : "'MM\.DD\.YYYY hh12\:mi\:ss\'", "to" : "'MM.dd.y hh:mm:ss'"},
		{"from" : "'MM\.DD\.YYYY hh24\:mi\:ss\'", "to" : "'MM.dd.y HH:mm:ss'"},
		{"from" : "'YYYY\-MM\-DD hh24\:mi\:ss\'", "to" : "'y-MM-dd HH:mm:ss'"},
		{"from" : "'YYYY\-MM\-DD hh12\:mi\:ss\'", "to" : "'y-MM-dd hh:mm:ss'"},
		{"from" : "'MM\âDD\âYYYY hh12\:mi\:ss\'", "to" : "'MMâddây hh:mm:ss'"},
		{"from" : "'MM\âDD\âYYYY hh24\:mi\:ss\'", "to" : "'MMâddây HH:mm:ss'"},
		{"from" : "DDMONYYYY", "to" : "ddMMMy"},
		{"from" : "DD-MON-YYYY", "to" : "dd-MMM-y"},
		{"from" : "DD\.MON\.YYYY", "to" : "dd.MMM.y"},
		{"from" : "DD\-MON\-YYYY", "to" : "dd-MMM-y"},
		{"from" : "YYYYMONDD", "to" : "yMMMdd"},
		{"from" : "YYYY-MON-DD", "to" : "y-MMM-dd"},
		{"from" : "YYYY\.MON\.DD", "to" : "y.MMM.dd"},
		{"from" : "YYYY\-MON\-DD", "to" : "y-MMM-dd"},
		{"from" : "yyyymmdd", "to" : "yMMdd"}, 
		{"from" : "YYYYMMDD", "to" : "yMMdd"},
		{"from" : "YYYY\/MM\/DD", "to" : "y/MM/dd"},
		{"from" : "YYYY\.MM\.DD", "to" : "y.MM.dd"},
		{"from" : "YYYY\-MM\-DD", "to" : "y-MM-dd"},
		{"from" : "DDMMYYYY", "to" : "ddMMy"},
		{"from" : "DD\.MM\.YYYY", "to" : "dd.MM.y"},
		{"from" : "DD\-MM\-YYYY", "to" : "dd-MM-y"},
		{"from" : "DD\/MM\/YYYY", "to" : "dd/MM/y"},
		{"from" : "MMDDYYYY", "to" : "MMddy"},
		{"from" : "MM\.DD\.YYYY", "to" : "MM.dd.y"},
		{"from" : "MM\-DD\-YYYY", "to" : "MM-dd-y"},
		{"from" : "MM\.DD\.YYYY", "to" : "MM.dd.y"},
		{"from" : "'YY\/MM\/DD hh24\:mi\:ss\'", "to" : "'yy/MM/dd HH:mm:ss'"},
		{"from" : "'YY\/MM\/DD hh12\:mi\:ss\'", "to" : "'yy/MM/dd hh:mm:ss'"},
		{"from" : "'MM\/DD\/YY hh12\:mi\:ss\'", "to" : "'MM/dd/yy hh:mm:ss'"},
		{"from" : "'MM\/DD\/YY hh24\:mi\:ss\'", "to" : "'MM/dd/yy HH:mm:ss'"},
		{"from" : "'YY\.MM\.DD hh24\:mi\:ss\'", "to" : "'yy.MM.dd HH:mm:ss'"},
		{"from" : "'YY\.MM\.DD hh12\:mi\:ss\'", "to" : "'yy.MM.dd hh:mm:ss'"},
		{"from" : "'MM\.DD\.YY hh12\:mi\:ss\'", "to" : "'MM.dd.yy hh:mm:ss'"},
		{"from" : "'MM\.DD\.YY hh24\:mi\:ss\'", "to" : "'MM.dd.yy HH:mm:ss'"},
		{"from" : "'YY\-MM\-DD hh24\:mi\:ss\'", "to" : "'yy-MM-dd HH:mm:ss'"},
		{"from" : "'YY\-MM\-DD hh12\:mi\:ss\'", "to" : "'yy-MM-dd hh:mm:ss'"},
		{"from" : "'MM\âDD\âYY hh12\:mi\:ss\'", "to" : "'MMâddâyy hh:mm:ss'"},
		{"from" : "'MM\âDD\âYY hh24\:mi\:ss\'", "to" : "'MMâddâyy HH:mm:ss'"},
		{"from" : "'MON\âDD\âYY hh24\:mi\:ss\'", "to" : "'MMMâddâyy HH:mm:ss'"},
		{"from" : "'MON\âDD\-YY hh12\:mi\:ss\'", "to" : "'MMMâddâyy hh:mm:ss'"},
		{"from" : "'MON\.DD\.YY hh24\:mi\:ss\'", "to" : "'MMM.dd.yy HH:mm:ss'"},
		{"from" : "'MON\.DD\.YY hh12\:mi\:ss\'", "to" : "'MMM.dd.yy hh:mm:ss'"},
		{"from" : "'MON\/DD\/YY hh24\:mi\:ss\'", "to" : "'MMM/dd/yy HH:mm:ss'"},
		{"from" : "'MON\/DD\/YY hh12\:mi\:ss\'", "to" : "'MMM/dd/yy hh:mm:ss'"},
		{"from" : "'DD\-MON\âYY hh24\:mi\:ss\'", "to" : "'dd-MMMâyy HH:mm:ss'"},
		{"from" : "'DD\-MON\âYY hh12\:mi\:ss\'", "to" : "'dd-MMMâyy hh:mm:ss'"},
		{"from" : "'DD\.MON\.YY hh24\:mi\:ss\'", "to" : "'dd.MMM.yy HH:mm:ss'"},
		{"from" : "'DD\.MON\.YY hh12\:mi\:ss\'", "to" : "'dd.MMM.yy hh:mm:ss'"},
        {"from" : "'DD\/MON\/YY hh24\:mi\:ss\'", "to" : "'dd/MMM/yy HH:mm:ss'"},
		{"from" : "'DD\/MON\/YY hh12\:mi\:ss\'", "to" : "'dd/MMM/yy hh:mm:ss'"},
		{"from" : "'MON\âDD\âYYYY hh24\:mi\:ss\'", "to" : "'MMMâddây HH:mm:ss'"},
		{"from" : "'MON\âDD\-YYYY hh12\:mi\:ss\'", "to" : "'MMMâddây hh:mm:ss'"},
		{"from" : "'MON\.DD\.YYYY hh24\:mi\:ss\'", "to" : "'MMM.dd.y HH:mm:ss'"},
		{"from" : "'MON\.DD\.YYYY hh12\:mi\:ss\'", "to" : "'MMM.dd.y hh:mm:ss'"},
		{"from" : "'MON\/DD\/YYYY hh24\:mi\:ss\'", "to" : "'MMM/dd/y HH:mm:ss'"},
		{"from" : "'MON\/DD\/YYYY hh12\:mi\:ss\'", "to" : "'MMM/dd/y hh:mm:ss'"},
		{"from" : "'DD\-MON\âYYYY hh24\:mi\:ss\'", "to" : "'dd-MMMây HH:mm:ss'"},
		{"from" : "'DD\-MON\âYYYY hh12\:mi\:ss\'", "to" : "'dd-MMMây hh:mm:ss'"},
		{"from" : "'DD\.MON\.YYYY hh24\:mi\:ss\'", "to" : "'dd.MMM.y HH:mm:ss'"},
		{"from" : "'DD\.MON\.YYYY hh12\:mi\:ss\'", "to" : "'dd.MMM.y hh:mm:ss'"},
        {"from" : "'DD\/MON\/YYYY hh24\:mi\:ss\'", "to" : "'dd/MMM/y HH:mm:ss'"},
		{"from" : "'DD\/MON\/YYYY hh12\:mi\:ss\'", "to" : "'dd/MMM/y hh:mm:ss'"},
		{"from" : "'YYYY\-MON\âDD hh24\:mi\:ss\'", "to" : "'y-MMMâdd HH:mm:ss'"},
		{"from" : "'YYYY\-MON\âDD hh12\:mi\:ss\'", "to" : "'y-MMMâdd hh:mm:ss'"},
		{"from" : "'YYYY\.MON\.DD hh24\:mi\:ss\'", "to" : "'y.MMM.dd HH:mm:ss'"},
		{"from" : "'YYYY\.MON\.DD hh12\:mi\:ss\'", "to" : "'y.MMM.dd hh:mm:ss'"},
		{"from" : "'YYYY\/MON\/DD hh24\:mi\:ss\'", "to" : "'y/MMM/dd HH:mm:ss'"},
		{"from" : "'YYYY\/MON\/DD hh12\:mi\:ss\'", "to" : "'y/MMM/dd hh:mm:ss'"},
		{"from" : "'YYYY\-DD\-MON hh24\:mi\:ss\'", "to" : "'y-dd-MMM HH:mm:ss'"},
		{"from" : "'YYYY\-DD\-MON hh12\:mi\:ss\'", "to" : "'y-dd-MMM hh:mm:ss'"},
		{"from" : "'YYYY\.DD\.MON hh24\:mi\:ss\'", "to" : "'y.dd.MMM HH:mm:ss'"},
		{"from" : "'YYYY\.DD\.MON hh12\:mi\:ss\'", "to" : "'y.dd.MMM hh:mm:ss'"},
        {"from" : "'YYYY\/DD\/MON hh24\:mi\:ss\'", "to" : "'y/dd/MMM HH:mm:ss'"},
		{"from" : "'YYYY\/DD\/MON hh12\:mi\:ss\'", "to" : "'y/dd/MMM hh:mm:ss'"},
		{"from" : "'YYYY\-MON\âDD hh24\:mi\:ss\'", "to" : "'y-MMMâdd HH:mm:ss'"},
		{"from" : "'YYYY\-MON\âDD hh12\:mi\:ss\'", "to" : "'y-MMMâdd hh:mm:ss'"},
		{"from" : "'YYYY\.MON\.DD hh24\:mi\:ss\'", "to" : "'y.MMM.dd HH:mm:ss'"},
		{"from" : "'YYYY\.MON\.DD hh12\:mi\:ss\'", "to" : "'y.MMM.dd hh:mm:ss'"},
		{"from" : "'YYYY\/MON\/DD hh24\:mi\:ss\'", "to" : "'y/MMM/dd HH:mm:ss'"},
		{"from" : "'YYYY\/MON\/DD hh12\:mi\:ss\'", "to" : "'y/MMM/dd hh:mm:ss'"},
		{"from" : "'YYYY\-DD\-MON hh24\:mi\:ss\'", "to" : "'y-dd-MMM HH:mm:ss'"},
		{"from" : "'YYYY\-DD\-MON hh12\:mi\:ss\'", "to" : "'y-dd-MMM hh:mm:ss'"},
		{"from" : "'YYYY\.DD\.MON hh24\:mi\:ss\'", "to" : "'y.dd.MMM HH:mm:ss'"},
		{"from" : "'YYYY\.DD\.MON hh12\:mi\:ss\'", "to" : "'y.dd.MMM hh:mm:ss'"},
        {"from" : "'YYYY\/DD\/MON hh24\:mi\:ss\'", "to" : "'y/dd/MMM HH:mm:ss'"},
		{"from" : "'YYYY\/DD\/MON hh12\:mi\:ss\'", "to" : "'y/dd/MMM hh:mm:ss'"},
		{"from" : "'YYYY\-MON\âDD hh24\:mi\:ss\'", "to" : "'y-MMMâdd HH:mm:ss'"},
		{"from" : "'YYYY\-MON\âDD hh\:mi\:ss\'", "to" : "'y-MMMâdd hh:mm:ss'"},
		{"from" : "'YYYY\.MON\.DD hh\:mi\:ss\'", "to" : "'y.MMM.dd hh:mm:ss'"},
		{"from" : "'YYYY\/MON\/DD hh\:mi\:ss\'", "to" : "'y/MMM/dd hh:mm:ss'"},
		{"from" : "'YYYY\-DD\-MON hh\:mi\:ss\'", "to" : "'y-dd-MMM hh:mm:ss'"},
		{"from" : "'YYYY\.DD\.MON hh\:mi\:ss\'", "to" : "'y.dd.MMM hh:mm:ss'"},
		{"from" : "'YYYY\/DD\/MON hh\:mi\:ss\'", "to" : "'y/dd/MMM hh:mm:ss'"},
		{"from" : "'YYYY\-MON\âDD hh\:mi\:ss\'", "to" : "'y-MMMâdd hh:mm:ss'"},
		{"from" : "'YYYY\.MON\.DD hh\:mi\:ss\'", "to" : "'y.MMM.dd hh:mm:ss'"},
		{"from" : "'YYYY\/MON\/DD hh\:mi\:ss\'", "to" : "'y/MMM/dd hh:mm:ss'"},
		{"from" : "'YYYY\-DD\-MON hh\:mi\:ss\'", "to" : "'y-dd-MMM hh:mm:ss'"},
		{"from" : "'YYYY\.DD\.MON hh\:mi\:ss\'", "to" : "'y.dd.MMM hh:mm:ss'"},
		{"from" : "'YYYY\/DD\/MON hh\:mi\:ss\'", "to" : "'y/dd/MMM hh:mm:ss'"},
		{"from" : "DDMONYY", "to" : "ddMMMyy"},
		{"from" : "DD-MON-YY", "to" : "dd-MMM-yy"},
		{"from" : "DD\.MON\.YY", "to" : "dd.MMM.yy"},
		{"from" : "DD\-MON\-YY", "to" : "dd-MMM-yy"},
		{"from" : "YYMONDD", "to" : "yyMMMdd"},
		{"from" : "YY-MON-DD", "to" : "yy-MMM-dd"},
		{"from" : "YY\.MON\.DD", "to" : "yy.MMM.dd"},
		{"from" : "YY\-MON\-DD", "to" : "yy-MMM-dd"},
		{"from" : "YYMMDD", "to" : "yyMMdd"},
		{"from" : "YY\/MM\/DD", "to" : "yy/MM/dd"},
		{"from" : "YY\.MM\.DD", "to" : "yy.MM.dd"},
		{"from" : "YY\-MM\-DD", "to" : "yy-MM-dd"},
		{"from" : "DDMMYY", "to" : "ddMMyy"},
		{"from" : "DD\.MM\.YY", "to" : "dd.MM.yy"},
		{"from" : "DD\-MM\-YY", "to" : "dd-MM-yy"},
		{"from" : "DD\/MM\/YY", "to" : "dd/MM/yy"},
		{"from" : "MMDDYY", "to" : "MMddyy"},
		{"from" : "MM\.DD\.YY", "to" : "MM.dd.yy"},
		{"from" : "MM\-DD\-YY", "to" : "MM-dd-yy"},
		{"from" : "MM\.DD\.YY", "to" : "MM.dd.yy"},
		{"from" : "\'(\d\d)\-(\w\w\w)\-(\d\d\d\d)\'", "to" : "'$3-$2-$1'"},
		{"from" : "\'(\d\d)\.(\w\w\w)\.(\d\d\d\d)\'", "to" : "'$3.$2.$1'"},
		{"from" : "\'(\d\d)\/(\w\w\w)\/(\d\d\d\d)\'", "to" : "'$3/$2/$1'"},
		{"from" : "\'(\d\d)\-(\w+)\-(\d\d\d\d)\'", "to" : "'$3-$2-$1'"},
		{"from" : "\'(\d\d)\.(\w+)\.(\d\d\d\d)\'", "to" : "'$3.$2.$1'"},
		{"from" : "\'(\d\d)\/(\w+)\/(\d\d\d\d)\'", "to" : "'$3/$2/$1'"},
		{"from" : "YYYY", "to" : "y"},
		{"from" : "\'hh24\:mi\:ss\'", "to" : "'HH:mm:ss'"},
		{"from" : "\'hh12\:mi\:ss\'", "to" : "'hh:mm:ss'"},
		{"from" : "\'hh24\.mi\.ss\'", "to" : "'HH.mm.ss'"},
		{"from" : "\'hh12\.mi\.ss\'", "to" : "'hh.mm.ss'"},
		{"from" : "hh24\:mi\:ss", "to" : "HH:mm:ss"},
		{"from" : "hh12\:mi\:ss", "to" : "hh:mm:ss"},
		{"from" : "hh24\.mi\.ss", "to" : "HH.mm.ss"},
		{"from" : "hh12\.mi\.ss", "to" : "hh.mm.ss"},
		{"from" : "HH\.MI\.SS", "to" : "hh.mm.ss"},
		{"from" : "HH\:MI\:SS", "to" : "hh:mm:ss"},
	    {"from" : "TO_CHAR\s*\(\s*(\w+)\s*\,\s*\'Mon\'\s*\)", "to" : "DATE_FORMAT($1,'MMM')"},
		{"from" : "TO_CHAR\s*\(\s*\((\w+\s*\(*\s*\)*)\s*\:\:timestamp\s+AT\s+time\s+zone\s+(\'.*?\')\s*\)\:*\:*\w+\s*\,\s*\'IWIYYY\'\s*\)", "to" : "EXTRACT(WEEK from from_utc_timestamp(to_utc_timestamp($1, current_timezone()), $2))||EXTRACT(YEAROFWEEK from from_utc_timestamp(to_utc_timestamp($1, current_timezone()), $2))"},
		{"from" : "TO_CHAR\s*\(\s*\((\w+\s*\(*\s*\)*)\s*\:\:timestamp\s+AT\s+time\s+zone\s+(\'.*?\')\s*\)\:*\:*\w+\s*\,\s*\'IW\-IYYY\'\s*\)", "to" : "EXTRACT(WEEK from from_utc_timestamp(to_utc_timestamp($1, current_timezone()), $2))||'-'||EXTRACT(YEAROFWEEK from from_utc_timestamp(to_utc_timestamp($1, current_timezone()), $2))"},
		{"from" : "TO_CHAR\s*\(\s*\((\w+\s*\(*\s*\)*)\s*\:\:timestamp\s+AT\s+time\s+zone\s+(\'.*?\')\s*\)\:*\:*\w+\s*\,\s*\'IYYYIW\'\s*\)", "to" : "EXTRACT(YEAROFWEEK from from_utc_timestamp(to_utc_timestamp($1, current_timezone()), $2))||EXTRACT(WEEK from from_utc_timestamp(to_utc_timestamp($1, current_timezone()), $2))"},
		{"from" : "TO_CHAR\s*\(\s*\((\w+\s*\(*\s*\)*)\s+AT\s+time\s+zone\s+(\'.*?\')\s*\)\:*\:*\w+\s*\,\s*\'IWIYYY\'\s*\)", "to" : "EXTRACT(WEEK from from_utc_timestamp(to_utc_timestamp($1, current_timezone()), $2))||EXTRACT(YEAROFWEEK from from_utc_timestamp(to_utc_timestamp($1, current_timezone()), $2))"},
		{"from" : "TO_CHAR\s*\(\s*\((\w+\s*\(*\s*\)*)\s+AT\s+time\s+zone\s+(\'.*?\')\s*\)\:*\:*\w+\s*\,\s*\'IYYYIW\'\s*\)", "to" : "EXTRACT(YEAROFWEEK from from_utc_timestamp(to_utc_timestamp($1, current_timezone()), $2))||EXTRACT(WEEK from from_utc_timestamp(to_utc_timestamp($1, current_timezone()), $2))"},
		{"from" : "TO_CHAR\s*\(\s*\((\w+\s*\(*\s*\)*)\s+AT\s+time\s+zone\s+(\'.*?\')\s*\)\:*\:*\w+\s*\,\s*\'IW\-IYYY\'\s*\)", "to" : "EXTRACT(WEEK from from_utc_timestamp(to_utc_timestamp($1, current_timezone()), $2))||'-'||EXTRACT(YEAROFWEEK from from_utc_timestamp(to_utc_timestamp($1, current_timezone()), $2))"},
		{"from" : "TO_CHAR\((\w*\.*\w*\.*\w+)\s*\,\'YYYYMMWW\'\)", "to" : "DATE_FORMAT($1,'yyyyMM')||EXTRACT(YEAROFWEEK from $1)"},
		{"from" : "TO_CHAR\((\w*\.*\w*\.*\w+)\s*\,\'IW\'\)", "to" : "EXTRACT(YEAROFWEEK from $1)"},
		{"from" : "TO_CHAR\((.*?)\,\s*\'IW\'\)", "to" : "WEEKOFYEAR($1)"},
		{"from" : "HH24\:MI\:SSxFF", "to" : "HH:mm:ss.SSSSSS"},
		{"from" : "TZH\:TZM", "to" : "Z"},
		{"from" : "TO_CHAR\s*\(\s*(\w+)\s*\,\s*\'Mon\'\s*\)", "to" : "DATE_FORMAT($1,'MMM')"},
		{"from" : "YYYYMMDD", "to" : "ymmdd"},
		{"from" : "YYYY/MM/DD", "to" : "y/mm/dd"},
		{"from" : "YYYY.MM.DD", "to" : "y.mm.dd"},
		{"from" : "YYYY-MM-DD", "to" : "y-mm-dd"},
		{"from" : "MMDDYYYY", "to" : "mmddy"},
		{"from" : "MM/DD/YYYY", "to" : "mm/dd/y"},
		{"from" : "MM.DD.YYYY", "to" : "mm.dd.y"},
		{"from" : "MM-DDâYYYY", "to" : "mm-dd-y"},
		{"from" : "DDMMYYYY", "to" : "ddmmy"},
		{"from" : "DD/MM/YYYY", "to" : "dd/mm/y"},
		{"from" : "DD.MM.YYYY", "to" : "dd.mm.y"},
		{"from" : "DD-MMâYYYY", "to" : "dd-mm-y"},
		{"from" : "YYYYMONDD", "to" : "yMMMdd"},
		{"from" : "YYYY MON DD", "to" : "y MMM dd"},
        {"from" : "YYYY/MON/DD", "to" : "y/MMM/dd"},
		{"from" : "YYYY.MON.DD", "to" : "y.MMM.dd"},
		{"from" : "YYYY-MON-DD", "to" : "y-MMM-dd"},
		{"from" : "MONDDYYYY", "to" : "MMMddy"},
		{"from" : "MON DD YYYY", "to" : "MMM dd y"},
		
		{"from" : "MON/DD/YYYY", "to" : "MMM/dd/y"},
		{"from" : "MON.DD.YYYY", "to" : "MMM.dd.y"},
		{"from" : "MON-DDâYYYY", "to" : "MMM-dd-y"},
		{"from" : "DDMONYYYY", "to" : "ddMMMy"},
		{"from" : "DD MON YYYY", "to" : "dd MMM y"},
		{"from" : "DD/MON/YYYY", "to" : "dd/MMM/y"},
		{"from" : "DD.MON.YYYY", "to" : "dd.MMM.y"},
		{"from" : "DD-MONâYYYY", "to" : "dd-MMM-y"},
		
		{"from" : "YYYYMONTHDD", "to" : "yMMMMdd"},
		{"from" : "YYYYMONTHDD", "to" : "yMMMMdd"},
		{"from" : "YYYY MONTH DD", "to" : "y MMMM dd"},
		
		{"from" : "YYYY/MONTH/DD", "to" : "y/MMMM/dd"},
		{"from" : "YYYY.MONTH.DD", "to" : "y.MMMM.dd"},
		{"from" : "YYYY-MONTH-DD", "to" : "y-MMMM-dd"},
		{"from" : "MONTHDDYYYY", "to" : "MMMMddy"},
		{"from" : "MONTH DD YYYY", "to" : "MMMM dd y"},
		
		{"from" : "MONTH/DD/YYYY", "to" : "MMMM/dd/y"},
		{"from" : "MONTH.DD.YYYY", "to" : "MMMM.dd.y"},
		{"from" : "MONTH-DDâYYYY", "to" : "MMMM-dd-y"},
		{"from" : "DD MONTH YYYY", "to" : "dd MMM My"},
		{"from" : "DDMONTHYYYY", "to" : "ddMMMMy"},
		{"from" : "DD/MONTH/YYYY", "to" : "dd/MMMM/y"},
		{"from" : "DD.MONTH.YYYY", "to" : "dd.MMMM.y"},
		{"from" : "DD-MONTHâYYYY", "to" : "dd-MMMM-y"},
		{"from" : "MONTH-DY-DD-YYYY", "to" : "MMMM-E-dd-y"},
		{"from" : "MON-DY-DD-YYYY", "to" : "MMM-E-dd-y"},
	    {"from" : "MONTH/DY/DD/YYYY", "to" : "MMMM/E/dd/y"},
		{"from" : "MONTH.DY.DD.YYYY", "to" : "MMMM.E.dd.y"},
		{"from" : "MONTH DY DD YYYY", "to" : "MMMM E dd y"},
		{"from" : "MON-DY-DD-YYYY", "to" : "MMM-E-dd-y"},
		{"from" : "MON/DY/DD/YYYY", "to" : "MMM/E/dd/y"},
		{"from" : "MON.DY.DD.YYYY", "to" : "MMM.E.dd.y"},
		{"from" : "MON DY DD YYYY", "to" : "MMM E dd y"},
		{"from" : "HH24:MI:SS.MS", "to" : "HH:mm:ss.SSS"},	
		{"from" : "HH24:MI:SS.US", "to" : "HH:mm:ss.SSSSSS"},	
		{"from" : "HH24:MI:SS", "to" : "HH:mm:ss"},
		{"from" : "HH24:MIPM", "to" : "HH:mma"},
		{"from" : "HH24:MI", "to" : "HH:mm"},
		{"from" : "HH12:MI:SS.MS", "to" : "hh:mm:ss.SSS"},	
		{"from" : "HH12:MI:SS.US", "to" : "hh:mm:ss.SSSSSS"},	
		{"from" : "HH12:MI:SS", "to" : "hh:mm:ss"},
		{"from" : "HH12:MIPM", "to" : "hh:mma"},
		{"from" : "HH12:MI:SS", "to" : "hh:mm"},
		{"from" : "CAST\s*\(\s*\(\s*([\w.]+)\s*\(\s*FORMAT\s+'YYYY-MM-DD'\s*\)\s*\)\s*AS\s+CHAR\s*\(\s*10\s*\)\s*\)", "to" : "TO_CHAR($1,'YYYY-MM-DD')"},
		{"from": "SYSDATE" , "to" : "current_timestamp()"},
		{"from" : "\bDATE\b", "to" : "CURRENT_DATE", "statement_categories": ["TABLE_DDL_AS_SELECT"]},
		{"from" : "TRIM\(LEADING'", "to" : "TRIM(LEADING '"},
		{"from" : "TRIM\(TRAILING'", "to" : "TRIM(TRAILING '"},
		{"from" : "TRIM\(LEADING ", "to" : "TRIM_LEADING("},
		{"from" : "TRIM\(TRAILING ", "to" : "TRIM_TRAILING("},
		
		{"from" : "SET QUERY_GROUP.*", "to":""},
		{"from" : "PARTITION BY RANGE_N", "to" : "PARTITION_BY_RANGE_N("},
		{"from" : "PARTITION BY CASE_N", "to" : "PARTITION_BY_CASE_N("},
		{"from" : "PARTITION\s+BY", "to" : "PARTITION_BY("},
		
		{"from" : "\bLEN\b", "to" : "LENGTH"},
		{"from" : "\bCHARACTER_LENGTH", "to" : "LENGTH"},
		{"from" : "\bCHAR_LENGTH", "to" : "LENGTH"},
		{"from" : "\bTEXTLEN", "to" : "LENGTH"},
		//{"from" : "COLLATE"} --- HARD
		{"from" : "\bQUOTE_LITERAL\s*\(([^\s\)]\))", "to" : "CONCAT(\',$1,\')"},
		{"from" : "\bSTRPOS", "to" : "POSITION"},

		{"from": "SYSDATE" , "to" : "current_timestamp()"},		
		{"from" : "(?!<\-)\s*CREATE\s+TABLE\s+(\#\w+)", "to" : "\n-- FIXME databricks.migration.unsupported.feature Redshift '$1' Temporary Table"},
		{"from" : "(?<!\-)CREATE\s+TEMPORARY\s+TABLE\s+(\w+)", "to" : "\n-- FIXME databricks.migration.unsupported.feature Redshift '$1' Temporary Table"},
		{"from" : "(?<!\-)CREATE\s+TEMP\s+TABLE\s+(\w+)", "to" : "\n-- FIXME databricks.migration.unsupported.feature Redshift '$1' Temporary Table"},
		
		{"from" : "(?!<\-)\s*CREATE(\s+?)MULTISET(\s+?)TABLE", "to": "CREATE OR REPLACE TABLE"},
		{"from" : "CREATE SET TABLE", "to" : "CREATE TABLE IF NOT EXISTS"},
		{"from" : "(?!<\-)CREATE SET TABLE", "to" : "CREATE OR REPLACE TABLE"},
		{"from" : "(?!<\-)CREATE(\s+?)TABLE", "to": "CREATE OR REPLACE TABLE"},
		{"from" : "(?!<\-)CREATE(.*?)VOLATILE TABLE", "to": "CREATE TEMPORARY TABLE"},
		{"from" : "(?!<\-)CREATE TABLE ([$|\S]+?) AS ([$|\S]+?) WITH NO DATA", "to" : "CREATE OR REPLACE TABLE $1 LIKE $2"},
		{"from" : "\'(\d\d)\'XC", "to" : "TRY_HEX_DECODE_STRING($1)"},
		{"from" : " NOT CS ", "to" : " "},
		{"from" : " NOT CS$", "to" : " "},
		{"from" : " CS ", "to" : " "},
		{"from" : " CS,", "to" : ","},
		{"from" : " CS$", "to" : " "},
		{"from" : "WITH\s+DATA", "to" : ""},
		{"from" : "COLLECT STATISTICS.*;", "to" : ""},
		{"from" : "COLLECT STATS.*;", "to" : ""},
		{"from" : "COLLECT STATS.*", "to" : ""},
		{"from" : "update command options using c off\s;", "to" : ""},
		{"from" : "NOT NULL WITH DEFAULT", "to" : ""},		
		{"from" : "CHARACTER SET LATIN NOT CASESPECIFIC", "to" : "COLLATE 'en-ci'"},
		{"from" : "CHARACTER SET LATIN NOT CS", "to" : "COLLATE 'en-ci'"},
		{"from" : "CHARACTER(\s+)SET LATIN", "to" : ""},
		{"from" : "CHARACTER SET UNICODE NOT CASESPECIFIC", "to" : ""},
		{"from" : "\(NOT CASESPECIFIC\)", "to" : ""},
		{"from" : "NOT CASESPECIFIC", "to" : ""},
		{"from" : "\(CASESPECIFIC\)", "to" : ""},
		{"from" : "\sCASESPECIFIC", "to" : ""},
		{"from" : "CHARACTER SET UNICODE", "to" : ""},
		{"from" : "USING UNICODE_TO_LATIN", "to" : ""},
		
		{"from" : "^\s*DATABASE\s*(\S+);", "to" : "USE SCHEMA $1;"},
		{"from" : "\bSEL\b", "to" : "SELECT"}, //abbreviation for SELECT
		{"from" : "\bDEL\b \bFROM\b", "to" : "DELETE FROM"}, //abbreviation for DELETE
		{"from" : "\bDEL\b", "to" : "DELETE FROM"}, //abbreviation for DELETE
		{"from" : "\bINS\b", "to" : "INSERT INTO"}, //abbreviation for INSERT,
		{"from" : "\bDROP\b\s+\bTEMPORARY\b", "to" : "DROP"},
		{"from" : "\(\s+NAMED\s(\w+)\s+\)", "to" : ""},
		{"from" : "\.os\s(.*)", "to" : "!SYSTEM $1"},
		//{"from" : "\s*DBMS_OUTPUT.PUT_LINE\((.*)\)\;", "to" : "SELECT $1;"},
		{"from" : ",(.*?)NO FALLBACK", "to": ""},
		{"from" : "(.*?)NO FALLBACK", "to": ""},
		{"from" : ",(.*?)FALLBACK\s*,", "to": ""},
		{"from" : ",(.*?)FALLBACK", "to": ""},
		{"from" : "NO BEFORE JOURNAL", "to": ""},
		{"from" : "NO AFTER JOURNAL", "to": ""},
		{"from" : "CHECKSUM = DEFAULT", "to": ""},
		{"from" : ",(.*?)NO LOG", "to": ""},
		{"from" : ",(.*?)CHECKSUM = DEFAULT,", "to": ""},
		{"from" : ",(.*?)CHECKSUM = DEFAULT", "to": ""},
		{"from" : "CREATE JOIN INDEX", "to": "CREATE TEMPORARY TABLE"},
		{"from" : "^(\s*?)REPLACE(\s+?)VIEW", "to": "CREATE OR REPLACE VIEW"},
		{"from" : "^(\s*?)CREATE VIEW", "to": "CREATE OR REPLACE VIEW"},
		{"from" : "LOCKING(.+?)FOR\s+ACCESS\s+MODE", "to": ""},
		{"from" : "LOCKING(.+?)FOR ACCESS", "to": ""},
		{"from" : "LOCK ROW FOR ACCESS", "to": ""},
		{"from" : "END TRANSACTION;", "to": "COMMIT;"},
		{"from" : "current_date - (\d+)", "to": "dateadd('DAY',-$1,current_date)"},	
		
		{"from" : "([\w.]+)\s*\(\s*FORMAT '99999'\s*\)", "to" : "LPAD($1,5,'0')"},
		
		
		{"from" : "LOGGING ALL ERRORS WITH NO LIMIT", "to" : ""},
		{"from" : "NO\s+PRIMARY\s+INDEX", "to" : ""},

		{"from" : "MAXIMUM ", "to" : "MAX "},
		{"from" : "MAXIMUM\(", "to" : "MAX("},
		{"from" : "\(NOT CS\)", "to" : ""},
		{"from" : "\(CS\)", "to" : ""},
		
		{"from" : "AS FORMAT 'YYYY-MM-DD'", "to": " AS DATE"},
		{"from" : "AS FORMAT 'HH:MI:SS'", "to": " AS TIMESTAMP(6)"},
		{"from" : "FROM (\d+) FOR (\d)", "to" : ", $1, $2"}, //used in SUBSTRING function
		{"from" : "FROM(\s+)(\d+)(\s+)FOR(\s+)(\d)", "to" : ", $2, $5"}, //used in SUBSTRING function
		{"from" : "FROM (\d+)\)", "to" : ", $1)"}, //used in SUBSTRING function without 3rd arg
		
		{"from" : "OREPLACE", "to" : "REPLACE"},
		{"from" : "OTRANSLATE", "to" : "REPLACE"},
		
		{"from" : "'\$           0'", "to":"'$'"},
		//{"from" : "\((.+) MOD (\w*)\)", "to":"MOD ( $1, $2 )"},
		{"from" : " MOD ", "to":" % "},
		
		{"from" : "DEFAULT(\s+)MERGEBLOCKRATIO", "to" : "$1"},
		{"from" : "DEFAULT DATE", "to" : "DEFAULT CURRENT_DATE"},
		//{"from" : "PARTITION(\s+)BY(\s+)CASE_N", "to" : "PARTITION_BY_CASE_N"},
		{"from" : "CONSTRAINT\s(.*)CHECK\s", "to" : ",CONSTRAINT_CHECK ", "statement_categories": ["TABLE_DDL"]},
		{"from" : "\sCHECK\s", "to" : " CONSTRAINT_CHECK ", "statement_categories": ["TABLE_DDL"]},
		{"from" : ",CHECK\s", "to" : ",CONSTRAINT_CHECK ", "statement_categories": ["TABLE_DDL"]},
		//{"from" : "FOREIGN KEY", "to" : "FOREIGN_KEY", "statement_categories": ["TABLE_DDL"]},
		{"from" : "ORDER BY VALUES", "to" : "ORDER_BY_VALUES", "statement_categories": ["TABLE_DDL"]},
		//{"from" : "REFERENCES(\s*)(.*)(\s*)\(", "to" : "REFERENCES(", "statement_categories": ["TABLE_DDL"]},
		
		{"from" : "EFF_PERIOD\s*PERIOD\(DATE\)\s*FORMAT 'YY\/MM\/DD' AS VALIDTIME", "to" : "EFF_BEGIN_DT DATE, EFF_END_DT DATE"},
		
		{"from" : "EFF_PERIOD\s*PERIOD\(DATE\)\s*AS VALIDTIME", "to" : "EFF_BEGIN_DT DATE, EFF_END_DT DATE"},
		{"from" : "VALID_DT\s*PERIOD\(DATE\)\s*AS VALIDTIME", "to" : "VALID_BEGIN_DT DATE, VALID_END_DT DATE"},
		
		{"from" : "AU_TS_PERIOD\s*PERIOD\(TIMESTAMP\(0\)\) NOT NULL AS VALIDTIME", "to" : "AU_BEGIN_TS TIMESTAMP(0), AU_END_TS TIMESTAMP(0)"},
		{"from" : "EFFTS_PERIOD\s*PERIOD\s*\(TIMESTAMP\(6\)\) WITH TIME ZONE\) NOT NULL AS VALIDTIME", "to" : "EFFTS_BEGIN_TS TIMESTAMP(6), EFFT_END_TS TIMESTAMP(6)"},
		
		{"from" : "PERIOD\(TIMESTAMP\(0\)\) NOT NULL AS VALIDTIME", "to" : "timestamp(0) default current_timestamp"},
		{"from" : "PERIOD\(DATE\)(\s+)AS VALIDTIME", "to" : "timestamp(0)"},
		{"from" : "PERIOD\(DATE\) FORMAT 'YY\/MM\/DD' AS VALIDTIME", "to" : "timestamp(0)"},
		{"from" : "PERIOD\(TIMESTAMP\(6\) WITH TIME ZONE\) NOT NULL AS TRANSACTIONTIME", "to" : "timestamp(6) default current_timestamp"},
		//{"from" : "CURRENT_TIMESTAMP", "to" : "CAST(CURRENT_TIMESTAMP as TIMESTAMP_NTZ)"},
		{"from" : "current_timestamp at 'america eastern'", "to" : "CURRENT_TIMESTAMP"},
		
		{"from" : "PERIOD\(DATE\)", "to" : "DATE"},
		
		//date arithmetic
		{"from" : "DAY\(4\) TO MINUTE", "to" : ""},
		
		
		{"from" : " UPPERCASE ", "to": ""},
		{"from" : "NONSEQUENCED VALIDTIME", "to" : ""},
		{"from" : "COMPRESS '(.+)'","to": ""},
		{"from" : "COMPRESS\s*\(", "to" : "COMPRESS_SUPPRESS("},
		{"from" : "COMPRESS 'SAN'","to": ""},
		{"from" : "COMPRESS 1737","to": ""},
		{"from" : "COMPRESS 888", "to": ""},
		{"from" : "COMPRESS 'N'", "to": ""},
		{"from" : "COMPRESS 'M'", "to": ""},
		{"from" : "COMPRESS ,","to": ","},
		{"from" : "COMPRESS '6'","to": ""},
		{"from" : "COMPRESS 'P'","to": ""},
		{"from" : "COMPRESS 1 ,","to": ","},
		{"from" : "COMPRESS 0 ,","to": ","},
		{"from" : "COMPRESS 0,","to": ","},
		{"from" : "COMPRESS 0(\s+)$","to": ""},
		{"from" : "COMPRESS .0000","to": ""},
		{"from" : "COMPRESS \.00","to": ""},
		{"from" : "COMPRESS -1(\s*),(\s*)$","to": ","},
		{"from" : "COMPRESS ([\d.]+)(\s*),", "to": ","},
		{"from" : "COMPRESS (\d+)\.(\d+)(\s*)", "to": ""},
		{"from" : "COMPRESS 0\b","to": ""},
		{"from" : "COMPRESS(\s+)0(\s+),", "to": ",", "statement_categories": ["TABLE_DDL"] },
		{"from" : "COMPRESS(\s+)0$", "to": "", "statement_categories": ["TABLE_DDL"] },
		{"from" : "COMPRESS ' ',", "to": ",", "statement_categories": ["TABLE_DDL"] },
		{"from" : "COMPRESS(\s*),", "to": ",", "statement_categories": ["TABLE_DDL"] },
		{"from" : "COMPRESS(\s*)\)", "to": ")", "statement_categories": ["TABLE_DDL"] },
		{"from" : "COMPRESS\s*'\s*?',", "to": "", "statement_categories": ["TABLE_DDL"] },
		{"from" : "DATE\s+FORMAT\s+'YY\/MM\/DD'", "to" : "DATE",  "statement_categories": ["TABLE_DDL"] },
		{"from" : "DATE\s+FORMAT\s+'YYYY-MM-DD'", "to" : "DATE",  "statement_categories": ["TABLE_DDL"] },
		{"from" : "UNIQUE PRIMARY INDEX", "to": "UPI"},
		{"from" : "PRIMARY INDEX", "to": "PRIM_IDX"},
		{"from" : "CREATE UNIQUE INDEX .*\((.*?)\).*;", "to": ""},
		{"from" : "CREATE INDEX \((.*?)\).*;", "to": ""},
		{"from" : "UNIQUE\s+INDEX", "to": "UNK_IDX"},
		
		{"from" : "INTERVAL '(\d+)' DAY", "to": "$1"},
		{"from" : "INTERVAL\s+'([0-9.]+)'\s+SECOND", "to": "INTERVAL '$1 SECOND'"},
		
		//casting
		{"from" : "\( (\d+)\)", "to": "($1)"},
		{"from" : "\(VARCHAR\((\d+)\)\)", "to" : "::VARCHAR($1)"},
		{"from" : "\(CHAR\((\d+)\)\)", "to" : "::CHAR($1)"},
		{"from" : "\((\s*)SMALLINT(\s*)\)", "to" : "::SMALLINT"},
		{"from" : "\(INTEGER\)", "to" : "::INTEGER"},
		{"from" : "\(DATE\)", "to" : "::DATE"},
		{"from" : "\(DECIMAL\(([\d|,]+)\)\)", "to" : "::DECIMAL($1)"},
		
		{"from" : "\(BYTEINT\)", "to" : ""},
		{"from" : "AS BYTEINT", "to" : "AS INT"},
		
		//************ constraints ************.  example:
		
		{"from" : "IN .*", "to" : "", "statement_categories": ["TABLE_DDL_LIKE"]},
		
		//************ Comments ************
		{"from" : "COMMENT ON ([\s|&\w]+).([\s|&\w]+) '(.*)'", "to" : "COMMENT ON__PARSED__TABLE $1.$2 IS '$3'"},
		{"from" : "COMMENT ON ([\s|\$\w]+).([\s|\$\w]+) '(.*)'", "to" : "COMMENT ON__PARSED__TABLE $1.$2 IS '$3'"},
		{"from" : "COMMENT ON ([\s|&\w]+).([\s|&\w]+).([\s|&\w]+) '(.*)'", "to" : "COMMENT ON COLUMN $1.$2.$3 IS '$4'"},
		{"from" : "__PARSED__", "to" : " "},
		
		{"from" : "DELETE(.*) ALL\b", "to" : "DELETE$1"},
		
		//{"from" : "DELETE(\s+)\&(.*)", "to" : "DELETE FROM &$2"},
		{"from" : "SYSLIB\.ISO8601_TO_DT", "to" : "TRY_TO_DATE"},
		{"from" : "SYSLIB\.ISO8601_TO_TS", "to" : "TRY_TO_TIMESTAMP"},
		{"from" : "REPLACE_CHARS", "to" : "REPLACE"},
		
		{"from" : "FLOAT\s+\.\S+ \d+\b", "to" : "FLOAT", "statement_categories": ["TABLE_DDL"]}
		
		//DBC objects, database catalog strings
		,
		{"from" : "\bDBC\.TABLES\b", "to" : "INFORMATION_SCHEMA.TABLES"},
		{"from" : "\bDBC\.COLUMNS\b", "to" : "INFORMATION_SCHEMA.COLUMNS"},
		{"from" : "\bdatabasename\b", "to" : "TABLE_CATALOG"},
		//{"from" : "OPEN\s+(\w+)\s+FOR\s+EXECUTE\s+(w+)\s*\;", "to" : "$1 = spark.sql($2)\ndbutils.notebook.exit(json.dumps({\"status\": \"OK\", \"table\": \"$1\"}))"}, 

		{"from" : "\btablename\b", "to" : "TABLE_NAME"}
		
		
		
	],
	"suppress_lines_starting_with": ["WHENEVER","ALTER SESSION","NOLOGGING","NOMONITORING","PARALLEL", "EXECUTE DBMS_OUTPUT.ENABLE",
		//"\.IF", "\.LABEL", // keep these in, we will implement python
		".\QUIT", "\.EXPORT", "\.LOGOFF"
		],
	"suppress_lines_containing": ["LOGMECH"],
	"line_suppression_behavior":"COMMENT" //choices: COMMENT or ELIMINATE
	,
	"block_subst" : [
	    {"from" : "CREATE\s+TEMP\s+TABLE\s+(\w+)\s*\(\s*like\s+(\w+)\)" ,"to" : "CREATE OR REPLACE TEMP VIEW $1 LIKE $2/* FIX ME databricks.migration.unsupported.feature TEMPORARY TABLE INSERT ON TEMP VIEW NOT SUPPORTED PLEASE REVIEW CODE */","statement_categories" : ["TABLE_DDL"],"first_match":1},
 	    {"from" : "CREATE\s+GLOBAL\s+TEMPORARY\s+TABLE\s+(\w+)\s+AS" ,"to" : "CREATE OR REPLACE TEMP VIEW $1 AS /* FIX ME databricks.migration.unsupported.feature TEMPORARY TABLE INSERT ON TEMP VIEW NOT SUPPORTED PLEASE REVIEW CODE */","statement_categories" : ["TABLE_DDL"],"first_match":1},
        {"from" : "CREATE\s+TEMPORARY\s+TABLE\s+(\w+)\s+AS" ,"to" :			 "CREATE OR REPLACE TEMP VIEW $1 AS /* FIX ME databricks.migration.unsupported.feature TEMPORARY TABLE INSERT ON TEMP VIEW NOT SUPPORTED PLEASE REVIEW CODE */","statement_categories" : ["TABLE_DDL"],"first_match":1},
        {"from" : "CREATE\s+TEMP\s+TABLE\s+(\w+)\s+AS" ,"to" :               "CREATE OR REPLACE TEMP VIEW $1 AS /* FIX ME databricks.migration.unsupported.feature TEMPORARY TABLE INSERT ON TEMP VIEW NOT SUPPORTED PLEASE REVIEW CODE */","statement_categories" : ["TABLE_DDL"],"first_match":1},
        {"from" : "CREATE\s+PRIVATE\s+TEMPORARY\s+TABLE\s+(\w+)\s+AS" ,"to" :"CREATE OR REPLACE TEMP VIEW $1 AS /* FIX ME databricks.migration.unsupported.feature TEMPORARY TABLE INSERT ON TEMP VIEW NOT SUPPORTED PLEASE REVIEW CODE */","statement_categories" : ["TABLE_DDL"],"first_match":1},
	    {"from" : "CREATE\s+LOCAL\s+TEMPORARY\s+TABLE\s+(\w+)\s+AS" ,"to" :  "CREATE OR REPLACE TEMP VIEW $1 AS /* FIX ME databricks.migration.unsupported.feature TEMPORARY TABLE INSERT ON TEMP VIEW NOT SUPPORTED PLEASE REVIEW CODE */","statement_categories" : ["TABLE_DDL"],"first_match":1},
		{"from" : "CREATE\s+GLOBAL\s+TEMPORARY\s+TABLE" ,"to" : "CREATE OR REPLACE TABLE/* FIX ME databricks.migration.unsupported.feature TEMPORARY TABLE ADD DROP TABLE AT APPROPRIATE PLACE MAUALLY */","statement_categories" : ["TABLE_DDL"],"first_match":1},
        {"from" : "CREATE\s+TEMPORARY\s+TABLE" ,"to" :			"CREATE OR REPLACE TABLE/* FIX ME databricks.migration.unsupported.feature TEMPORARY TABLE ADD DROP TABLE AT APPROPRIATE PLACE MAUALLY */","statement_categories" : ["TABLE_DDL"],"first_match":1},
        {"from" : "CREATE\s+TEMP\s+TABLE" ,"to" :               "CREATE OR REPLACE TABLE/* FIX ME databricks.migration.unsupported.feature TEMPORARY TABLE ADD DROP TABLE AT APPROPRIATE PLACE MAUALLY */","statement_categories" : ["TABLE_DDL"],"first_match":1},
        {"from" : "CREATE\s+PRIVATE\s+TEMPORARY\s+TABLE" ,"to" :"CREATE OR REPLACE TABLE/* FIX ME databricks.migration.unsupported.feature TEMPORARY TABLE ADD DROP TABLE AT APPROPRIATE PLACE MAUALLY */","statement_categories" : ["TABLE_DDL"],"first_match":1},
  	    {"from" : "CREATE\s+LOCAL\s+TEMPORARY\s+TABLE" ,"to" :"CREATE OR REPLACE TABLE/* FIX ME databricks.migration.unsupported.feature TEMPORARY TABLE ADD DROP TABLE AT APPROPRIATE PLACE MAUALLY */","statement_categories" : ["TABLE_DDL"],"first_match":1},

	    //sql functions to python
		{"from" : "(\<python\>.*?)CHARINDEX\s*\((.*)\,(.*)\)", "to" : "$1 $2.index($1) "}, 
		{"from" : "(\<python\>.*?)(?<!PYTHON\_)NVL", "to" : "$1PYTHON_NVL/*FIXME databricks.migration.unsupported.feature create custom python  function */"}, 
		
		{"from" : "(\<python\>.*?)(?<!PYTHON\_)quote_ident", "to" : "$1PYTHON_quote_ident/*FIXME databricks.migration.unsupported.feature create custom python  function */"}, 

		{"from" : "(.*?)OPEN\s+(\w+)\s+FOR\s+EXECUTE\s+(\w+)\s*\;", "to" : "$1$2 = spark.sql($3)\n$1dbutils.notebook.exit(json.dumps({\"status\": \"OK\", \"table\": \"$2\"}))"}, 
	    {"from" : "(.*?)FOR\s+(\w+)\s+IN\s+EXECUTE\s+(\w+)", "to" : "$1dyn_df=spark.sql($3)\n$1for $2 in dyn_df:\n<tab_count:1>"}, 
		{"from" : "(.*?)FOR\s+(\w+)\s+IN\s+(SELECT.*?)LOOP", "to" : "$1dyn_df=spark.sql(\"\"\"$3\"\"\")\n$1for $2 in dyn_df:<tab_count:1>"},
		
		{"from" : "(\<python\>.*?)(\w+)\s*\:\=\s*(\w+\.)(\w+)\s*(\-|\+|\*|\/)\s*(\w+\.)(\w+)\s*\;*", "to" : "$1$2 =$3['$4'] $5 $6['$7']"},
		{"from" : "(\<python\>.*?)(\w+)\s*\:\=\s*(\w+\.)(\w+)\s*\;*", "to" : "$1$2 =$3['$4']"},	
		{"from" : "(\<python\>.*?)(\=|\>|\<|\<\>|\!\=|\/|\()\s*(\w+\.)(\w+)\s*\;*", "to" : "$1 $2 $3['$4']"},	
	    
		{"from" : "(\<python\>.*?)\bSPLIT_PART\b", "to" : "$1PYTHON_SPLIT","first_match":1}, 
	    {"from" : "(\<python\>.*?)\bSPLIT_PART\b", "to" : "$1PYTHON_SPLIT","first_match":1},  
        {"from" : "(\<python\>.*?)\bLPAD\b", "to" : "$1PYTHON_LPAD","first_match":1},   		
		{"from" : "(\<python\>.*?)(?<!\.)CEIL\b", "to" : "$1math.ceil"},
		
	    {"from" : "(\<python\>.*?)(\w+)\:\:varchar", "to" : "$1str($2)"},
	    {"from" : "(\<python\>.*?)(\w+)\:\:float", "to" : "$1float($2)"},
		{"from" : "(\<python\>.*?)(\w+)\:\:bigint", "to" : "$1int($2)"},
		{"from" : "CREATE\s+OR\s+REPLACE\s+TABLE\s+(\w+)\s*\(LIKE\s+(\w+)\s+(INCLUDING|EXCLUDING)(\s+DEFAULTS)\s*\)", "to" : "CREATE OR REPLACE TABLE $1 AS\nSELECT * FROM $2\n--FIXME databricks.migration.unsupported.feature Redshift table create using like with defaults/ignored defaults "},
		{"from" : "CREATE\s+OR\s+REPLACE\s+TABLE\s+(\w+)\s*\(LIKE\s+(\w+)\s*\)", "to" : "CREATE OR REPLACE TABLE $1 AS\nSELECT * FROM $2"},
        {"from" : "EXECUTE(.*?)(?!<INSERT)\s+INTO\s+(\w+)\s*\;", "to" : "$2 = spark.sql($1).head()[0]"},
		{"from" : "EXECUTE(.*)\;", "to" : "dyn_df = spark.sql($1)"}, 
		{"from" : "^\s+EXECUTE\b(.*)\;(?!\')", "to" : "spark.sql($1)"},
		{"from" : "EXECUTE\b\s+(\w+)\s*\;", "to" : "spark.sql($1)"},
		//correct else tabing
		{"from" : "\<python\>\<tab_count\:1\>\s*ELSE", "to" : "ELSE:"},
		{"from" : "\<python\>\<tab_count\:2\>\s*ELSE", "to" : "\tELSE:"},
	    {"from" : "\<python\>\<tab_count\:3\>\s*ELSE", "to" : "\t\tELSE:"},
		{"from" : "\<python\>\<tab_count\:4\>\s*ELSE", "to" : "\t\t\tELSE:"},
		{"from" : "\<python\>\<tab_count\:5\>\s*ELSE", "to" : "\t\t\t\tELSE:"},
	    {"from" : "\<python\>\<tab_count\:6\>\s*ELSE", "to" : "\t\t\t\t\tELSE:"},
		// begin_end  handling
		{"from" : "\<python\>\<tab\_count\:\d+\>end\_\d+\;", "to" : ""},
		{"from" : "\<python\>\<tab\_count\:0\>begin\_0\;", "to" : ""},
        {"from" : "\<python\>\<tab\_count\:0\>begin\_1\;", "to" : "try:"},
		{"from" : "\<python\>\<tab\_count\:1\>begin\_1\;", "to" : "\ttry:"},
		{"from" : "\<python\>\<tab\_count\:2\>begin\_1\;", "to" : "\t\ttry:"},
		{"from" : "\<python\>\<tab\_count\:3\>begin\_1\;", "to" : "\t\t\ttry:"},
		{"from" : "\<python\>\<tab\_count\:0\>begin\_2\;", "to" : "try:"},
		{"from" : "\<python\>\<tab\_count\:1\>begin\_2\;", "to" : "\ttry:"},
		{"from" : "\<python\>\<tab\_count\:2\>begin\_2\;", "to" : "\t\ttry:"},
		{"from" : "\<python\>\<tab\_count\:3\>begin\_2\;", "to" : "\t\t\ttry:"},
		{"from" : "\<python\>\<tab\_count\:0\>begin\_3\;", "to" : "try:"},
		{"from" : "\<python\>\<tab\_count\:1\>begin\_3\;", "to" : "\ttry:"},
		{"from" : "\<python\>\<tab\_count\:2\>begin\_3\;", "to" : "\t\ttry:"},
		{"from" : "\<python\>\<tab\_count\:3\>begin\_3\;", "to" : "\t\t\ttry:"},
		
		//exception handling
		
		{"from" : "\<python\>\<tab\_count\:0\>\s+PYTHON\_CATCH\_.*?WHEN\s+OTHERS\s+THEN\s*\;", "to" : "except Exception as SQLERRM:"},
		{"from" : "\<python\>\<tab\_count\:1\>\s+PYTHON\_CATCH\_.*?WHEN\s+OTHERS\s+THEN\s*\;", "to" : "\texcept Exception as SQLERRM:"},
		{"from" : "\<python\>\<tab\_count\:2\>\s+PYTHON\_CATCH\_.*?WHEN\s+OTHERS\s+THEN\s*\;", "to" : "\t\texcept Exception as SQLERRM:"},
		{"from" : "\<python\>\<tab\_count\:3\>\s+PYTHON\_CATCH\_.*?WHEN\s+OTHERS\s+THEN\s*\;", "to" : "\t\t\texcept Exception as SQLERRM:"},
		{"from" : "\<python\>\<tab\_count\:3\>\s+RAISE\;", "to" : "\t\t\traise Exception(SQLERRM)"},
		{"from" : "\<python\>\<tab\_count\:2\>\s+RAISE\;", "to" : "\t\traise Exception(SQLERRM)"},
		{"from" : "\<python\>\<tab\_count\:1\>\s+RAISE\;", "to" : "\traise Exception(SQLERRM)"},
		{"from" : "\<python\>\<tab\_count\:0\>\s+RAISE\;", "to" : "raise Exception(SQLERRM)"},
		
		//cursor declarations
		{"from" : "(\w+)\s+CURSOR\s+IS(.*?)\;", "to" : "\n%python\n$1 = spark.sql(\"\"\"$2\"\"\");"},
		//constraints
		{"from" : "GENERATED\s+BY\s+DEFAULT\s+ON\s+NULL\s+AS", "to" : "--FIXME databricks.migration.unsupported.feature GENERATED BY DEFAULT ON NULL  column attribiute\nGENERATED BY DEFAULT AS "},
		{"from" : "(CONSTRAINT\s+\w+\s+PRIMARY\s+KEY)(?!\(done\))", "to" : "-- FIXME databricks.migration.dependency.review PK/FK constraints needs Unity Catalog table\n$1(done)"},
		{"from" : "(CONSTRAINT\s+\w+\s+NOT\s+NULL)(?!\(done\))", "to" : "--$1(done) FIXME databricks.migration.dependency.review PK/FK constraints needs Unity Catalog table\n(done)"},
		{"from" : "(CONSTRAINT\s+\w+\s+NULL)(?!\(done\))", "to" : "--$1(done) FIXME databricks.migration.dependency.review PK/FK constraints needs Unity Catalog table\n"},
		{"from": "\bCONSTRAINT\s+\w+\s+PRIMARY\s+KEY\s*\(",                         "to": "BB_CONSTRAINT_PRIMARY_KEY_PARENS (", "statement_categories": ["TABLE_DDL"]},

		{"from": "\bCONSTRAINT\s+\w+\s+PRIMARY\s+KEY",                              "to": "BB_CONSTRAINT_PRIMARY_KEY ()",       "statement_categories": ["TABLE_DDL"]},

		{"from": "\bCONSTRAINT\s+\w+\s+REFERENCES\s+\w+\s*\(",                      "to": "BB_CONSTRAINT_REFS_PARENS (",        "statement_categories": ["TABLE_DDL"]},
		{"from": "\bCONSTRAINT\s+\w+\s+REFERENCES\s+\w+",                           "to": "BB_CONSTRAINT_REFS ()",              "statement_categories": ["TABLE_DDL"]},
		// For leftover "REFERENCES <word> ("  and "REFERENCES <word>"
		{"from": "\bREFERENCES\s+\w+\s*\(",                                         "to": "BB_REFS_PARENS (",                   "statement_categories": ["TABLE_DDL"]},
		{"from": "\bREFERENCES\s+\w+",                                              "to": "BB_REFS ()",                         "statement_categories": ["TABLE_DDL"]},

		{"from": "\b(DECLARE\s+\w+\s+CURSOR\s.*);", "to": "\n-- FIXME databricks.migration.unsupported.feature 'BB_DECLARE_CURSOR'\n $1 $2\n", "first_match": "1"},
		{"from": "(^|\n)\s*(OPEN\s+\w+.*)",      "to": "\n-- FIXME databricks.migration.unsupported.feature 'BB_OPEN_CURSOR'\n $2 \n", "first_match": "1"},
		// {"from": "(^|\n)\s*(PREPARE\s+\w+.*)",   "to": "\n/* FIXME databricks.migration.unsupported.feature 'BB_PREPARE'\n $2 \n*/", "first_match": "1"},
		{"from": "(^|\n)\s*(PREPARE\s+\w+.*)",   "to": "\n-- FIXME databricks.migration.unsupported.feature 'BB_PREPARE_CURSOR'\n $2 \n", "first_match": "1"},
		{"from": "(^|\n)\s*(FETCH\s+\w+.*)",     "to": "\n-- FIXME databricks.migration.unsupported.feature 'BB_FETCH_CURSOR'\n $2 \n", "first_match": "1"},
		{"from": "(^|\n)\s*(CLOSE\s+\w+.*)",     "to": "\n-- FIXME databricks.migration.unsupported.feature 'BB_CLOSE_CURSOR'\n $2 \n", "first_match": "1"},
		{"from": "\bDECLARE\s.*?;",              "to": "BB_DECLARE_VAR" },
		{"from": "BB_OPEN_CURSOR",               "to": "OPEN [cursor]" },
		{"from": "BB_PREPARE_CURSOR",            "to": "PREPARE [cursor]" },
		{"from": "BB_FETCH_CURSOR",              "to": "FETCH [cursor]" },
		{"from": "BB_CLOSE_CURSOR",              "to": "CLOSE [cursor]" },
		{"from": "BB_DECLARE_CURSOR",            "to": "DECLARE [cursor] CURSOR" },
		{"from" : "COLLECT\s+(?:STATS|STATISTICS)(?:\s+ON)?\s+(\S+|\S+\s+\.\S+|\S+\.\s+\S+)\s+(INDEX|COLUMN)\s*.*?([^();]+).*", "to" : "ANALYZE TABLE $1 COMPUTE STATISTICS FOR COLUMNS $3;"},
		{"from": "WITH\s+NO\s+CHECK\s+OPTION\s+(\w+\s*\(.*?\))", "to": " $1 NOT ENFORCED " },
		{"from": "WITH\s+NO\s+CHECK\s+OPTION", "to": " " },
		// Comment out CONSTRAINT...UNIQUE with a "FIXME" tag
		{"from": "\bCONSTRAINT(\s+\w+\s+)UNIQUE(\s*\(.*?\))",  "statement_categories": ["TABLE_DDL"],  "to": "/* FIXME databricks.migration.unsupported.feature ' BB_UNIQ ' Constraint\n BB_CONSTR $1 BB_UNIQ $2 */\n" },
		{"from": "\bCONSTRAINT(\s+\w+\s+)UNIQUE\b",            "statement_categories": ["TABLE_DDL"],  "to": "/* FIXME databricks.migration.unsupported.feature ' BB_CONSTR constraint_name BB_UNIQ '\n BB_CONSTR $1 BB_UNIQ */\n" },
		{"from": "\bCONSTRAINT\s+UNIQUE(\s*\(.*?\))",          "statement_categories": ["TABLE_DDL"],  "to": "/* FIXME databricks.migration.unsupported.feature ' BB_UNIQ ' Constraint\n BB_CONSTR BB_UNIQ $1 */\n" },
		{"from": "\bCONSTRAINT\s+\w+\s+CHECK\b",         "to": "BB_CONSTRAINT_CHECK ",    "statement_categories": ["TABLE_DDL"]},
		{"from": "\bCHECK\b",                            "to": "BB_CHECK",                "statement_categories": ["TABLE_DDL"]},
		{"from": "\b(NO\s+)?(UNIQUE\s+)?(PRIMARY\s+)?INDEX\s*\(.*?\)\s*,", "to": "BB_HANDLE_INDEX ()", "statement_categories": ["TABLE_DDL"]},
		{"from": "\b(NO\s+)?(UNIQUE\s+)?(PRIMARY\s+)?INDEX",               "to": "BB_HANDLE_INDEX",    "statement_categories": ["TABLE_DDL"]},
		{"from": "\bUNIQUE\s*\((.*?)\)\s*\,*", "statement_categories": ["TABLE_DDL"],     "to": "/*  FIXME databricks.migration.unsupported.feature ' BB_UNIQ ' $1 Constraint\n */ " },

		{"from" : "(\<python\>\<tab_count\:\d+\>)\s*RAISE\s+INFO(.*)\;(?!\')", "to" : "$1print($2)"},
		{"from" : "(\<python\>\<tab_count\:\d+\>)\s*(\bUPDATE\b.*?)\;(?!\')", "to" : "$1spark.sql(\"\"\"$2\"\"\")"},
		{"from" : "(\<python\>\<tab_count\:\d+\>)\s*(\bINSERT\b.*?)\;(?!\')", "to" : "$1spark.sql(\"\"\"$2\"\"\")"},
		{"from" : "(\<python\>\<tab_count\:\d+\>)\s*(\bDELETE\b.*?)\;(?!\')", "to" : "$1spark.sql(\"\"\"$2\"\"\")"},
		{"from" : "(\<python\>\<tab_count\:\d+\>)\s*(\bDROP\b.*?)\;(?!\')", "to" :   "$1spark.sql(\"\"\"$2\"\"\")"},
		{"from" : "(\<python\>\<tab_count\:\d+\>)\s*(\bSELECT\b.*?)\;(?!\')", "to" : "$1spark.sql(\"\"\"$2\"\"\")"},
		{"from" : "(\<python\>\<tab_count\:\d+\>)\s*(\bMERGE\b.*?)\;(?!\')", "to" :  "$1spark.sql(\"\"\"$2\"\"\")"},
        {"from" : "RAISE\s+INFO(.*)\;(?!\')", "to" : "print($1)"},
		{"from" : "RAISE\s+EXCEPTION\s*(?!\()(.*)\;", "to" : "RAISE EXCEPTION($1)"},
		{"from" : "RAISE\s+NOTICE(.*)\;", "to" : "print($1)"},
		// tab_start_end_split commands patterns
		{"from" : "\<python\>\<tab_count\:\d+\>\s*(END_IF\;|END_LOOP\;)", "to" : ""},
		{"from" : "(\<python\>\<tab_count\:\d+\>\s*WHILE.*?)\s*LOOP\s*\;", "to" : "\n$1:"},
		{"from" : "(\<python\>\<tab_count\:\d+\>\s*FOR.*?)\s*LOOP\s*\;", "to" : "\n$1:"},
		
		{"from" : "(WHILE.*?)\s*LOOP\s*\;*", "to" : "\n$1:"},
		{"from" : "(FOR.*?)\s*LOOP\s*\;*", "to" : "\n$1:"},
		{"from" : "\bELSIF(.*?)\s*THEN\s*\;*", "to" : "\nELIF$1:"},
		{"from" : "(\bIF.*?)\s*THEN\s*\;*", "to" : "\n$1:"},
		
		{"from" : "(\<python\>\<tab_count\:\d+\>\s*WHILE.*?)\s*LOOP\s*\;*", "to" : "\n$1:"},
		{"from" : "(\<python\>\<tab_count\:\d+\>\s*FOR.*?)\s*LOOP\s*\;*", "to" : "\n$1:"},
		{"from" : "(\<python\>\<tab_count\:\d+\>\s*IF.*?)\s*THEN\s*\;*", "to" : "\n$1:"},
		{"from" : "\<python\>\<tab_count\:0\>\s*BEGIN\_0\s*\;", "to" : ""},
		{"from" : "\<python\>\<tab_count\:0\>\s*end\_1\s*\;", "to" : ""},
		{"from" : "(LOOP)\;\n+", "to" : "$1"},

		{"from" : "__EXPRESSION__\s(FORMAT '(9+)')", "to" : "LPAD(__EXPRESSION__,__LENGTH__,'0')"},
		{"from" : "\)\s*WITH NO DATA", "to" : " WHERE 1=2)"},
		{"from" : "\(\s*TITLE\s+'\w+'\s*\)", "to" : ""}, //blank out TITLE spec
		{"from" : "TITLE\s*'.*?'", "to" : "", "statement_categories": ["TABLE_DDL"]},

		{"from" : "\)__GAMMA_NL__\s*WITH NO DATA", "to" : " WHERE 1=2)"}, //use __GAMMA_NL__ for newline pattern
		{"from" : "CREATE INDEX \((.*?)\).*;", "to": "", "statement_categories": ["CREATE_INDEX"] },
		{"from" : "VALIDTIME .*\(SELECT.*\)(.*?)(SELECT?)", "to" : "SELECT"},		
		{"from" : "__EXPRESSION__\s\(FORMAT\s*'9\(18\)'\)", "to" : "LPAD(__EXPRESSION__,18,'0')"},
		{"from" : "__EXPRESSION__\s\(FORMAT\s*'999999'\)", "to" : "LPAD(__EXPRESSION__,6,'0')"},
		{"from" : "__EXPRESSION__\s\(FORMAT\s*'9\(2\)'\s*\)", "to" : "LPAD(__EXPRESSION__,2,'0')"},
		{"from" : "PRIM_IDX\s+\S+\s*\(.+?\)", "to": "", "statement_categories": ["TABLE_DDL"]}, //get rid of named primary index

		{"from" : "^\s*SELECT(.*)", "force_alias_usage" : "1", "first_match" : "1"},
        {"from" : "\<python\>\<tab\_count\:0\>\s*(?!END)", "to" : "-- COMMAND ----------\n%python\n"},
		{"from" : "\<python\>\<tab\_count\:0\>\s*", "to" : ""},
		{"from" : "\<python\>\<tab\_count\:1\>\s*", "to" : "\t"},
		{"from" : "\<python\>\<tab\_count\:2\>\s*", "to" : "\t\t"},
		{"from" : "\<python\>\<tab\_count\:3\>\s*", "to" : "\t\t\t"},
		{"from" : "\<python\>\<tab\_count\:4\>\s*", "to" : "\t\t\t\t"},	
		{"from" : "\<tab\_count\:1\>\s*", "to" : "\t"},
		
		{"from" : "GET\s+DIAGNOSTICS\s+(\w+)\s*\:\=\s+ROW\_COUNT\s*\;", "to" : "$1 = dyn_df.head()[0]"},
		
		//various
		{"from" : "\$\$\s+LANGUAGE.*\;", "to" : ""},
		{"from" : "^\s*(DROP.*?)\;", "to" : "\n$1\n-- COMMAND ----------\n"},
		{"from" : "^\s*(CREATE.*?)\;", "to" : "\n$1\n-- COMMAND ----------\n"},
		{"from" : "^\s*(SELECT.*?)\;", "to" : "\n$1\n-- COMMAND ----------\n"},
		{"from" : "^\s*(INSERT.*?)\;", "to" : "\n$1\n-- COMMAND ----------\n"},
		{"from" : "^\s*(UPDATE.*?)\;", "to" : "\n$1\n-- COMMAND ----------\n"},
		{"from" : "^\s*(MERGE.*?)\;", "to" : "\n$1\n-- COMMAND ----------\n"},
		{"from" : "^\s*(DELETE.*?)\;", "to" : "\n$1\n-- COMMAND ----------\n"},
		{"from" : "^\s*(TRUNCATE.*?)\;", "to" : "\n$1\n-- COMMAND ----------\n"},
		{"from" : "^\s*(WITH.*?)\;", "to" : "\n$1\n-- COMMAND ----------\n"},
		{"from" : "\:\=", "to" : "="},
		{"from" : "^\s*\;", "to" : ""},
		{"from" : "\bEND\_*\d*", "to" : ""},
		{"from" : "\_DONE\_", "to" : ""},
		{"from" : "[^\-]\s+\%sql", "to" : "-- COMMAND ----------\n"},
		{"from" : "-- COMMAND ----------\n+-- COMMAND ----------", "to" : "-- COMMAND ----------\n"},
		
		{"from" : "dummy line", "to" : "some dummy line"}
		
	],
	
	"function_subst" : [
	    {"from": "BB_CONSTRAINT_PRIMARY_KEY_PARENS", "to": "__BLANK__"},
		{"from": "BB_CONSTRAINT_PRIMARY_KEY",        "to": "__BLANK__"},
		{"from": "BB_CONSTRAINT_FOREIGN_KEY_REFS",   "to": "__BLANK__"},
		{"from": "BB_CONSTRAINT_REFS_PARENS",        "to": "__BLANK__"},
		{"from": "BB_CONSTRAINT_REFS",               "to": "__BLANK__"},
		{"from": "BB_REFS_PARENS",                   "to": "__BLANK__"},
		{"from": "BB_REFS",                          "to": "__BLANK__"},
		{"from": "BB_FOREIGN_KEY_PARENS",            "to": "__BLANK__"},

		{"from": "BB_CONSTRAINT_CHECK",                 "to": "__BLANK__"},
		{"from": "BB_CHECK",                            "to": "__BLANK__"},

		{"from": "BB_HANDLE_INDEX",                     "to": "__BLANK__"},
		{"from": "LEN", "to" : "CHAR_LENGTH" },
		{"from": "LENGTH", "to" : "CHAR_LENGTH" },
		{"from": "TEXTLEN", "to" : "CHAR_LENGTH" },
		//{"from": "QUOTE_IDENT", "OUTPUT_TEMPLATE" : "'\"'||$1||'\"'" },
		{"from": "QUOTE_LITERAL", "OUTPUT_TEMPLATE" : "\"'\"||$1||\"'\"" },
		{"from": "PYTHON_SPLIT", "output_template" : "$1.split($2)[$3]" },
		{"from": "PYTHON_LPAD", "output_template" : "$1.rjust($2,$3)" },
		//{"from": "PYTHON_NVL", "output_template" : "$1 is None or $1 =" },
		{"from": "REPLICATE", "TO" : "REPEAT" },
		{"from": "DLOG1", "TO" : "LN" },
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\/MM\/dd HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\/MM\/dd hh\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\/dd\/y hh\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\/dd\/y HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\.MM\.dd HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\.MM\.dd hh\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\.dd\.y hh\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\.dd\.y HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\-MM\-dd HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\-MM\-dd hh\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\âdd\ây hh\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\âdd\ây HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\/MM\/dd HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\/MM\/dd hh\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\/dd\/y hh\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\/dd\/y HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\.MM\.dd HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\.MM\.dd hh\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\.dd\.y hh\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\.dd\.y HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\-MM\-dd HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\-MM\-dd hh\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\âdd\ây hh\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\âdd\ây HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\-MMM\-y HH\:mm\:ss\.SSSSSS Z'"},"output_template" :"DATE_FORMAT($1,$2)"},                                            
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\-MMM\-y HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\-MMM\-y HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\-MMM\-y"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\-MMM\-dd HH\:mm\:ss\.SSSSSS Z'"},"output_template" :"DATE_FORMAT($1,$2)"},                                            
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\-MMM\-dd HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\-MMM\-dd HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\-MMM\-dd"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\.MMM\.y HH\:mm\:ss\.SSSSSS Z'"},"output_template" :"DATE_FORMAT($1,$2)"},                                            
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\.MMM\.y HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\.MMM\.y HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\.MMM\.y"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\.MMM\.dd HH\:mm\:ss\.SSSSSS Z'"},"output_template" :"DATE_FORMAT($1,$2)"},                                            
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\.MMM\.dd HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\.MMM\.dd HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\.MMM\.dd"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\-MMM\-y HH\:mm\:ss\.SSSSSS Z'"},"output_template" :"DATE_FORMAT($1,$2)"},                                            
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\-MMM\-y HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\-MMM\-y HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\-MMM\-y"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\-MMM\-dd HH\:mm\:ss\.SSSSSS Z'"},"output_template" :"DATE_FORMAT($1,$2)"},                                            
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\-MMM\-dd HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\-MMM\-dd HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\-MMMM\-y HH\:mm\:ss\.SSSSSS Z'"},"output_template" :"DATE_FORMAT($1,$2)"},                                            
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\-MMMM\-y HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\-MMMM\-y HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\-MMMM\-y"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\-MMMM\-dd HH\:mm\:ss\.SSSSSS Z'"},"output_template" :"DATE_FORMAT($1,$2)"},                                            
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\-MMMM\-dd HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\-MMMM\-dd HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\-MMMM\-dd"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\.MMMM\.y HH\:mm\:ss\.SSSSSS Z'"},"output_template" :"DATE_FORMAT($1,$2)"},                                            
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\.MMMM\.y HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\.MMMM\.y HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\.MMMM\.y"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\.MMMM\.dd HH\:mm\:ss\.SSSSSS Z'"},"output_template" :"DATE_FORMAT($1,$2)"},                                            
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\.MMMM\.dd HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\.MMMM\.dd HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\.MMMM\.dd"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\-MMMM\-y HH\:mm\:ss\.SSSSSS Z'"},"output_template" :"DATE_FORMAT($1,$2)"},                                            
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\-MMMM\-y HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\-MMMM\-y HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\-MMMM\-y"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\-MMMM\-dd HH\:mm\:ss\.SSSSSS Z'"},"output_template" :"DATE_FORMAT($1,$2)"},                                            
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\-MMMM\-dd HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\-MMMM\-dd HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\-MMM\-dd"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\/MM\/dd'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\/MM\/dd'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM/dd\/y'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM/dd\/y'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\.MM\.dd'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\.MM\.dd'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\.dd\.y'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\.dd\.y'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\-MM\-dd'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\-MM\-dd'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\âdd\ây'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\âdd\ây'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\/MM\/dd HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\/MM\/dd hh\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\/dd\/yy hh\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\/dd\/yy HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\.MM\.dd HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\.MM\.dd hh\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\.dd\.yy hh\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\.dd\.yy HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\-MM\-dd HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\-MM\-dd hh\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\âdd\âyy hh\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\âdd\âyy HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\/MM\/dd HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\/MM\/dd hh\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\/dd\/yy hh\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\/dd\/yy HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\.MM\.dd HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\.MM\.dd hh\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\.dd\.yy hh\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\.dd\.yy HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\-MM\-dd HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\-MM\-dd hh\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\âdd\âyy hh\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\âdd\âyy HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\-MMM\-yy HH\:mm\:ss\.SSSSSS Z'"},"output_template" :"DATE_FORMAT($1,$2)"},                                            
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\-MMM\-yy HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\-MMM\-yy HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\-MMM\-yy"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\-MMM\-dd HH\:mm\:ss\.SSSSSS Z'"},"output_template" :"DATE_FORMAT($1,$2)"},                                            
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\-MMM\-dd HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\-MMM\-dd HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\-MMM\-dd"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\.MMM\.yy HH\:mm\:ss\.SSSSSS Z'"},"output_template" :"DATE_FORMAT($1,$2)"},                                            
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\.MMM\.yy HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\.MMM\.yy HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\.MMM\.yy"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\.MMM\.dd HH\:mm\:ss\.SSSSSS Z'"},"output_template" :"DATE_FORMAT($1,$2)"},                                            
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\.MMM\.dd HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\.MMM\.dd HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\.MMM\.dd"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\-MMM\-yy HH\:mm\:ss\.SSSSSS Z'"},"output_template" :"DATE_FORMAT($1,$2)"},                                            
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\-MMM\-yy HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\-MMM\-yy HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\-MMM\-yy"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\-MMM\-dd HH\:mm\:ss\.SSSSSS Z'"},"output_template" :"DATE_FORMAT($1,$2)"},                                            
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\-MMM\-dd HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\-MMM\-dd HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\-MMM\-dd"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\-MMMM\-yy HH\:mm\:ss\.SSSSSS Z'"},"output_template" :"DATE_FORMAT($1,$2)"},                                            
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\-MMMM\-yy HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\-MMMM\-yy HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\-MMMM\-yy"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\-MMMM\-dd HH\:mm\:ss\.SSSSSS Z'"},"output_template" :"DATE_FORMAT($1,$2)"},                                            
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\-MMMM\-dd HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\-MMMM\-dd HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\-MMMM\-dd"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\.MMMM\.yy HH\:mm\:ss\.SSSSSS Z'"},"output_template" :"DATE_FORMAT($1,$2)"},                                            
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\.MMMM\.yy HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\.MMMM\.yy HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\.MMMM\.yy"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\.MMMM\.dd HH\:mm\:ss\.SSSSSS Z'"},"output_template" :"DATE_FORMAT($1,$2)"},                                            
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\.MMMM\.dd HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\.MMMM\.dd HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\.MMMM\.dd"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\-MMMM\-yy HH\:mm\:ss\.SSSSSS Z'"},"output_template" :"DATE_FORMAT($1,$2)"},                                            
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\-MMMM\-yy HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\-MMMM\-yy HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'dd\-MMMM\-yy"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\-MMMM\-dd HH\:mm\:ss\.SSSSSS Z'"},"output_template" :"DATE_FORMAT($1,$2)"},                                            
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\-MMMM\-dd HH\:mm\:ss\.SSSSSS'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\-MMMM\-dd HH\:mm\:ss'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\-MMMM\-dd"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\/MM\/dd'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\/MM\/dd'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\/dd\/yy'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\/dd\/yy'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\.MM\.dd'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\.MM\.dd'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\.dd\.yy'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\.dd\.yy'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\-MM\-dd'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yy\-MM\-dd'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\âdd\âyy'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\âdd\âyy'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yMMMdd"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yMMMMdd"},"output_template" :"DATE_FORMAT($1,$2)"},
        {"from" : "TO_CHAR","arg_pattern" : {"2" : "'yMMdd'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MMddy'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yyddMM'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yyMMMdd"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yyMMMMdd"},"output_template" :"DATE_FORMAT($1,$2)"},
        {"from" : "TO_CHAR","arg_pattern" : {"2" : "'yyMMdd'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MMddyy'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'yyddMM'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\-MMM\-dd"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\-MMMM\-dd"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\/MM\/dd'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\/MM\/dd'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\/dd\/y'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\/dd\/y'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\.MM\.dd'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\.MM\.dd'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\.dd\.y'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\.dd\.y'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\-MM\-dd'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'y\-MM\-dd'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\âdd\ây'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "'MM\âdd\ây'"},"output_template" :"DATE_FORMAT($1,$2)"},
		{"from": "TRIM_LEADING", "to" : "LTRIM", "arg_token_output" : "2,1", "split_string" : "FROM" },
		{"from": "TRIM_TRAILING", "to" : "RTRIM", "arg_token_output" : "2,1", "split_string" : "FROM" }, //tells the parser to get tokens from args and place them inside the new call
		{"from": "TRUNC", "to": "TRUNC", "arg_placement" : { "1":"2||'DD'", "2":"1" } },
		
		{"from": "PARTITION_BY_CASE_N", "to": "PARTITIONED BY CASE N"},
		{"from": "PARTITION_BY_RANGE_N", "to": "PARTITIONED BY RANGE N"},
		{"from": "PARTITION_BY", "to": "PARTITIONED BY"}, 
		
		{"from": "CONSTRAINT_CHECK", "to": "__BLANK__"},
		{"from": "REFERENCES", "to": "__BLANK__"},
		
		{"from": "UNK_IDX", "to": "UNIQUE", "statement_categories" : ["TABLE_DDL"], "placement" : "append_inside_ddl"},
		{"from": "UNK_IDX", "to": "ALTER TABLE __LAST_OBJECT_CREATED__ ADD UNIQUE", "statement_categories" : ["TABLE_DDL_LIKE","TABLE_DDL_AS_SELECT"], "placement" : "append_after_ddl"},
		{"from": "CREATE_INDEX", "to": "__BLANK__", "statement_categories" : ["TABLE_DDL","TABLE_DDL_LIKE","TABLE_DDL_AS_SELECT"]},
		{"from": "PRIM_IDX", "to": "__BLANK__"},
		{"from": "INDEX", "to": "__BLANK__", "statement_categories" : ["TABLE_DDL","TABLE_DDL_LIKE","TABLE_DDL_AS_SELECT"]},
		{"from": "ORDER_BY_VALUES", "to": "__BLANK__", "statement_categories" : ["TABLE_DDL","TABLE_DDL_LIKE","TABLE_DDL_AS_SELECT"]},

		{"from": "TRANSLATE", "to" : "__ELIMINATE_CALL__"}, //get rid of the function call with the parens, but leave the inner part
		{"from": "BEGIN", "to" : "__ELIMINATE_CALL__"},
		{"from": "END", "to" : "__ELIMINATE_CALL__"},

		{"from" : "INSTR", "to": "LOCATE"},
		
		//in arg_placement section, the key represents the target arg order, value represents the source arg order or default
		
		{"from": "COMPRESS", "to": "__BLANK__"},
		{"from": "COMPRESS_SUPPRESS", "to": "__BLANK__"}


	],
	
	"tag_capture" :
		{	//format: descriptive_key : array of regex patterns
			"COMPRESS" : ["COMPRESS"], //COMPRESS([\s|,(]|$)
			"TEMPORAL" : ["VALIDTIME"],
			"SYSLIB" : ["SYSLIB\."],
			"PERIOD_FUNCTIONS" : ["PERIOD(\s*)\("],
			"NATIVE_CASTING" : ["\(VARCHAR\((\d+)\)\)", "\INT\)", "\(CHAR\((\d+)\)\)"],
			"FORMAT_SPEC": ["FORMAT "],
			"FLOAT DEFAULT TIME" : ["FLOAT(\s+?)DEFAULT(\s+?)TIME"],
			"STRING_TRIMMING" : ["LEADING", "TRAILING"],
			"UNIQUE_PRIMARY_INDEX" : ["UNIQUE\s+PRIMARY\s+INDEX"],
			"UNIQUE_INDEX" : ["UNIQUE\s+INDEX"],
			"CROSS JOIN" : ["CROSS(\s+)JOIN"],
			"RECURSIVE" : ["RECURSIVE"],
			"LOADER CALL" : ["FAST_LOAD"],
			"DBC OBJECTS" : ["DBC\."],
			"CASESPECIFIC" : ["CASESPECIFIC"],
			"QUALIFY" : ["QUALIFY"],
			"GOTO" : ["THEN GOTO", "THEN\s+\.GOTO"]

		},
		
	"to_string_types" : ["CHAR","TEXT","TIME","BOOLEAN","DATE","INERTVAL"],
	"prefix_tag" : "<python>",
	"cursor_sufix":".rdd.collect()",
	//"cursor_sufix":".take(1000):\n# FIXME databricks.migration.task  Review and Update default max records limit (1000)\n# set for above df.take() api call to avoid collecting large number of records to driver ",
	"tab_tag" : "<tab_count:%count%>",
	//egin_tag" : "<begin_level:%level%>",
	"set_global_python_keys" :["\bRAISEsss\b"],
     //   "python_keys_regex" :["EXECUTE"],
  
    "python_keys_regex" :["CURSOR\s+\w+\s+IS.*?","IF.*?then","FOR\s+\w+\s+IN\s+\w+\s+LOOP","FOR.*?LOOP","CURSOR\s+\w+\s+IS.*?\;","python",".*?\bWHILE\b.*?LOOP","RAISE_APPLICATION_ERROR",".*EXECUTE.*",".*RAISE.*"],
    "pre_finalization_handler" : "::finalize_content",
	"src_type":"REDSHIFT"
}
