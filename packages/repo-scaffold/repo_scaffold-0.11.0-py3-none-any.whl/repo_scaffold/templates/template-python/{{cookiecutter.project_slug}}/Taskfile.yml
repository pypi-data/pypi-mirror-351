# https://taskfile.dev
version: '3'

vars:
  package_name: {{ cookiecutter.project_slug }}
  python_min_version: '{{ cookiecutter.min_python_version }}'
  python_max_version: &dev_version '{{ cookiecutter.max_python_version }}'
  # 默认的开发版本
  python_dev_version: *dev_version

tasks:
  init:
    desc: Initialize the project
    cmds:
      - uv sync
      - uvx pre-commit install

  lint:
    desc: Run linters
    cmds:
      - uvx ruff check --fix .  # 先修复可以自动修复的问题
      - uvx ruff format .       # 然后格式化
      - uvx ruff check .        # 最后再检查一次确保没有遗留问题

  lint:add-noqa:
    desc: Add noqa comments to files
    cmds:
      - uvx ruff check --fix --add-noqa .  # 添加 noqa 注释以忽略特定行的检查
      - task: lint:pre-commit              # 运行 pre-commit 钩子以确保代码风格一致
      - task: lint                         # 重新运行 ruff 检查以确保没有遗漏的错误

  lint:pre-commit:
    desc: Run pre-commit hooks
    cmds:
      - uvx pre-commit run --all-files

  lint:watch:
    desc: Watch files and run linters
    cmds:
      - uvx ruff check --watch .  # 监视文件变化并运行检查

  test:
    desc: Run tests with dev version
    cmds:
      - task: test:version
        vars:
          version: {% raw %}'{{.python_dev_version}}'{% endraw %}

  test:all:
    desc: Run tests with all Python versions
    vars:
      python_versions:
        sh: |
          python3 -c "
          min_ver = {% raw %}'{{.python_min_version}}'{% endraw %}.split('.')
          max_ver = {% raw %}'{{.python_max_version}}'{% endraw %}.split('.')
          for minor in range(int(min_ver[1]), int(max_ver[1]) + 1):
              print(f'{min_ver[0]}.{minor}')
          "
    cmds:
      - for: {% raw %}{var: python_versions, split: "\n", as: version}{% endraw %}
        task: test:version
        vars:
          version: {% raw %}'{{.version}}'{% endraw %}

  test:version:
    desc: Run tests with specific Python version
    cmds:
      - echo "Testing with Python {% raw %}{{.version}}{% endraw %}..."
      - uvx --python {% raw %}{{.version}}{% endraw %} --with ".[dev]" pytest --cov={% raw %}{{.package_name}}{% endraw %} --cov-report=xml --cov-report=term-missing -v tests/

  test:watch:
    desc: Watch files and run tests
    cmds:
      - uvx --with ".[dev]" ptw --runner "pytest -vx"

  docs:
    desc: Build and view documentation
    cmds:
      - uvx --with ".[docs]" mkdocs serve

  docs:build:
    desc: Build documentation
    cmds:
      - uvx --with ".[docs]" mkdocs build

{%- if cookiecutter.use_github_actions == 'yes' %}
  deploy:gh-pages:
    desc: Deploy documentation to GitHub Pages
    cmds:
      - uvx --with ".[docs]" mkdocs gh-deploy --force
{%- endif %}

  deploy:pypi:
    desc: Deploy package to PyPI
    cmds:
      - uv build
      - uv publish

  export:deps:
    desc: Export dependencies to requirements.txt
    cmds:
      - uv pip compile pyproject.toml --no-deps --output-file requirements.txt

{%- if cookiecutter.use_docker == 'yes' %}
  docker:build:
    desc: Build Docker image
    cmds:
      - docker build -t {{ cookiecutter.repo_name }}:latest .

  docker:run:
    desc: Run Docker container
    cmds:
      - docker run --rm -it {{ cookiecutter.repo_name }}:latest

  docker-compose:up:
    desc: Start services with docker-compose
    cmds:
      - docker-compose -f docker/docker-compose.yaml up

  docker-compose:down:
    desc: Stop services with docker-compose
    cmds:
      - docker-compose -f docker/docker-compose.yaml down

  docker-compose:logs:
    desc: View docker-compose logs
    cmds:
      - docker-compose -f docker/docker-compose.yaml logs -f
{%- endif %}