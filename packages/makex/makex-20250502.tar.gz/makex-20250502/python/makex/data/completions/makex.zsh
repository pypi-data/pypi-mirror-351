#compdef makex

# AUTOMATICALLY GENERATED by `shtab`


_shtab_makex_commands() {
  local _commands=(
    "affected:"
    "complete:"
    "completions:Generate completion files for shells."
    "dot:"
    "evaluate:"
    "evolve:Fixes and evolves makex files to be compatible with new syntax. This should only be used as instructed."
    "fix:Fixes and evolves makex files to be compatible with new syntax. This should only be used as instructed."
    "inputs:"
    "list:Generate list of targets parsed from the makex file found in path."
    "outputs:"
    "path:Get the output path of a task."
    "run:Run a task or list of tasks."
    "targets:Generate list of targets parsed from the makex file found in path."
    "tasks:Generate list of targets parsed from the makex file found in path."
    "version:"
    "workspace:Print the current workspace, or the workspace detected at path."
  )
  _describe 'makex commands' _commands
}

_shtab_makex_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*--verbose[Verbosity of makex messaging. Specify multiple times or set to a number between 0 and 3. (The default is 0 and the maximum is 3).]"
  "--debug[Enable debug and logging to the maximum level.]"
  "--color[Print colored messaging.]:color:(off auto on)"
  "--cache[The unified external cache\/build path.]:cache:"
  "*--python-audit[Enable auditing of python audit hooks. Pass a identifier. May be passed multiple times.]:python_audit:"
)

_shtab_makex_affected_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--scope[expand\/narrow the scope of the search. \+\/- may be added to prefix includes\/excludes.]:scope:"
  "--cpus[Worker CPUs to use for parsing, evaluating and running tasks in parallel. (Default\: 16)]:cpus:"
  "(*):files:"
)

_shtab_makex_complete_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  ":May be a complete\/partial path. May include a target name.:"
)

_shtab_makex_completions_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--shell[]:shell:(bash zsh)"
  "--internal[]"
  ":The output file to write the completions to. If not specified, will the completion will be written to standard out.:"
)

_shtab_makex_dot_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--files[Include\/evaluate files\/globs. May be slow.]:files:"
  "*--ignore[Specify file ignore patterns for input\/output files.]:ignore:"
  "--cpus[Worker CPUs to use for parsing, evaluating and running tasks in parallel. (Default\: 16)]:cpus:"
  "(*):targets:"
)

_shtab_makex_evaluate_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  ":file_or_directory:"
  ":Name of the variable to evaluate. Can be target(name).\* to evaluated variables of named targets  in the file.:"
)

_shtab_makex_evolve_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--diff[Output a diff instead of the full contents.]"
  "--edit[Edit files in place. Does not output anything to the standard outpujt.]"
  "--formatter[Specify a formatter executable to run after fixing the file. Arguments are space separated. The formatter must take source code from standard input, and print a formatted version to standard output.]:formatter:"
  ":The name of a fix. One of \[\'syntax_2024\', \'syntax_2025\'\]:"
  ":Path to a makex file to fix.:"
)

_shtab_makex_fix_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--diff[Output a diff instead of the full contents.]"
  "--edit[Edit files in place. Does not output anything to the standard outpujt.]"
  "--formatter[Specify a formatter executable to run after fixing the file. Arguments are space separated. The formatter must take source code from standard input, and print a formatted version to standard output.]:formatter:"
  ":The name of a fix. One of \[\'syntax_2024\', \'syntax_2025\'\]:"
  ":Path to a makex file to fix.:"
)

_shtab_makex_inputs_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*--ignore[Specify file ignore patterns.]:ignore:"
  "--cpus[Worker CPUs to use for parsing, evaluating and running tasks in parallel. (Default\: 16)]:cpus:"
  "(*):targets:"
)

_shtab_makex_list_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--paths[How to output paths of tasks. \`relative\` is relative to the current folder.]:paths:(absolute workspace relative)"
  "--prefix[May be used to prefix all paths.]"
  ":Path to a makex file or directory. The current directory is the default.:"
)

_shtab_makex_outputs_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "*--ignore[Specify file ignore patterns.]:ignore:"
  "--cpus[Worker CPUs to use for parsing, evaluating and running tasks in parallel. (Default\: 16)]:cpus:"
  "(*):output_names:"
)

_shtab_makex_path_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--real[Return cache path. This may be slower as it must resolve Workspaces.]"
  ":Name and optional path of a task. \/\/path\:name, \/\/\:name, \:name are all valid.:"
)

_shtab_makex_run_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--directory[Change to directory before evaluating tasks.]:directory:"
  "--force[Always run all tasks even if they don\'t need to be.]"
  "--dry[Do a dry run. Nothing will be executed.]"
  "--cpus[Worker CPUs to use for parsing, evaluating and running tasks in parallel. (Default\: 16)]:cpus:"
  "(*):tasks:_shtab_makex_complete_target"
)

_shtab_makex_targets_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--paths[How to output paths of tasks. \`relative\` is relative to the current folder.]:paths:(absolute workspace relative)"
  "--prefix[May be used to prefix all paths.]"
  ":Path to a makex file or directory. The current directory is the default.:"
)

_shtab_makex_tasks_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--paths[How to output paths of tasks. \`relative\` is relative to the current folder.]:paths:(absolute workspace relative)"
  "--prefix[May be used to prefix all paths.]"
  ":Path to a makex file or directory. The current directory is the default.:"
)

_shtab_makex_version_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
)

_shtab_makex_workspace_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  ":Path representing a workspace, or inside a workspace.:"
)


_shtab_makex() {
  local context state line curcontext="$curcontext" one_or_more='(-)*' remainder='(*)'

  if ((${_shtab_makex_options[(I)${(q)one_or_more}*]} + ${_shtab_makex_options[(I)${(q)remainder}*]} == 0)); then  # noqa: E501
    _shtab_makex_options+=(': :_shtab_makex_commands' '*::: :->makex')
  fi
  _arguments -C -s $_shtab_makex_options

  case $state in
    makex)
      words=($line[1] "${words[@]}")
      (( CURRENT += 1 ))
      curcontext="${curcontext%:*:*}:_shtab_makex-$line[1]:"
      case $line[1] in
        affected) _arguments -C -s $_shtab_makex_affected_options ;;
        complete) _arguments -C -s $_shtab_makex_complete_options ;;
        completions) _arguments -C -s $_shtab_makex_completions_options ;;
        dot) _arguments -C -s $_shtab_makex_dot_options ;;
        evaluate) _arguments -C -s $_shtab_makex_evaluate_options ;;
        evolve) _arguments -C -s $_shtab_makex_evolve_options ;;
        fix) _arguments -C -s $_shtab_makex_fix_options ;;
        inputs) _arguments -C -s $_shtab_makex_inputs_options ;;
        list) _arguments -C -s $_shtab_makex_list_options ;;
        outputs) _arguments -C -s $_shtab_makex_outputs_options ;;
        path) _arguments -C -s $_shtab_makex_path_options ;;
        run) _arguments -C -s $_shtab_makex_run_options ;;
        targets) _arguments -C -s $_shtab_makex_targets_options ;;
        tasks) _arguments -C -s $_shtab_makex_tasks_options ;;
        version) _arguments -C -s $_shtab_makex_version_options ;;
        workspace) _arguments -C -s $_shtab_makex_workspace_options ;;
      esac
  esac
}

# Custom Preamble

_shtab_makex_complete_target(){
  local -a plugins
  local lastword=${PREFIX}
  local plugins=($(makex complete "$lastword"))
  #_describe 'targets' plugins
  #_multi_parts -i "\n" plugins
  compadd -a - plugins
  #  -M 'r:|=*'
  #makex complete "$curcontext"
}

# End Custom Preamble


typeset -A opt_args

if [[ $zsh_eval_context[-1] == eval ]]; then
  # eval/source/. command, register function for later
  compdef _shtab_makex -N makex
else
  # autoload from fpath, call function directly
  _shtab_makex "$@"
fi

