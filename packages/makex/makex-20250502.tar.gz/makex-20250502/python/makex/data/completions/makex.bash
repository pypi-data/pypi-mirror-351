# AUTOMATICALLY GENERATED by `shtab`

_shtab_makex_subparsers=('run' 'path' 'dot' 'affected' 'inputs' 'outputs' 'evaluate' 'tasks' 'list' 'targets' 'completions' 'workspace' 'complete' 'version' 'fix' 'evolve')

_shtab_makex_option_strings=('-h' '--help' '--verbose' '--debug' '--color' '--cache' '--python-audit')
_shtab_makex_run_option_strings=('-h' '--help' '--directory' '--force' '--dry' '--cpus')
_shtab_makex_path_option_strings=('-h' '--help' '--real')
_shtab_makex_dot_option_strings=('-h' '--help' '--files' '--ignore' '--cpus')
_shtab_makex_affected_option_strings=('-h' '--help' '--scope' '--cpus')
_shtab_makex_inputs_option_strings=('-h' '--help' '--ignore' '--cpus')
_shtab_makex_outputs_option_strings=('-h' '--help' '--ignore' '--cpus')
_shtab_makex_evaluate_option_strings=('-h' '--help')
_shtab_makex_tasks_option_strings=('-h' '--help' '--paths' '--prefix')
_shtab_makex_list_option_strings=('-h' '--help' '--paths' '--prefix')
_shtab_makex_targets_option_strings=('-h' '--help' '--paths' '--prefix')
_shtab_makex_completions_option_strings=('-h' '--help' '--shell' '--internal')
_shtab_makex_workspace_option_strings=('-h' '--help')
_shtab_makex_complete_option_strings=('-h' '--help')
_shtab_makex_version_option_strings=('-h' '--help')
_shtab_makex_fix_option_strings=('-h' '--help' '--diff' '--edit' '--formatter')
_shtab_makex_evolve_option_strings=('-h' '--help' '--diff' '--edit' '--formatter')

_shtab_makex_run_pos_0_COMPGEN=_shtab_makex_compgen_paths

_shtab_makex_pos_0_choices=('run' 'path' 'dot' 'affected' 'inputs' 'outputs' 'evaluate' 'tasks' 'list' 'targets' 'completions' 'workspace' 'complete' 'version' 'fix' 'evolve')
_shtab_makex___profile_mode_choices=('cprofile' 'yappi')
_shtab_makex___color_choices=('off' 'auto' 'on')
_shtab_makex_run___profile_mode_choices=('cprofile' 'yappi')
_shtab_makex_run___color_choices=('off' 'auto' 'on')
_shtab_makex_path___profile_mode_choices=('cprofile' 'yappi')
_shtab_makex_path___color_choices=('off' 'auto' 'on')
_shtab_makex_dot___profile_mode_choices=('cprofile' 'yappi')
_shtab_makex_dot___color_choices=('off' 'auto' 'on')
_shtab_makex_affected___profile_mode_choices=('cprofile' 'yappi')
_shtab_makex_affected___color_choices=('off' 'auto' 'on')
_shtab_makex_inputs___profile_mode_choices=('cprofile' 'yappi')
_shtab_makex_inputs___color_choices=('off' 'auto' 'on')
_shtab_makex_outputs___profile_mode_choices=('cprofile' 'yappi')
_shtab_makex_outputs___color_choices=('off' 'auto' 'on')
_shtab_makex_evaluate___profile_mode_choices=('cprofile' 'yappi')
_shtab_makex_evaluate___color_choices=('off' 'auto' 'on')
_shtab_makex_tasks___profile_mode_choices=('cprofile' 'yappi')
_shtab_makex_tasks___color_choices=('off' 'auto' 'on')
_shtab_makex_tasks___paths_choices=('absolute' 'workspace' 'relative')
_shtab_makex_list___profile_mode_choices=('cprofile' 'yappi')
_shtab_makex_list___color_choices=('off' 'auto' 'on')
_shtab_makex_list___paths_choices=('absolute' 'workspace' 'relative')
_shtab_makex_targets___profile_mode_choices=('cprofile' 'yappi')
_shtab_makex_targets___color_choices=('off' 'auto' 'on')
_shtab_makex_targets___paths_choices=('absolute' 'workspace' 'relative')
_shtab_makex_completions___profile_mode_choices=('cprofile' 'yappi')
_shtab_makex_completions___color_choices=('off' 'auto' 'on')
_shtab_makex_completions___shell_choices=('bash' 'zsh')
_shtab_makex_workspace___profile_mode_choices=('cprofile' 'yappi')
_shtab_makex_workspace___color_choices=('off' 'auto' 'on')
_shtab_makex_complete___profile_mode_choices=('cprofile' 'yappi')
_shtab_makex_complete___color_choices=('off' 'auto' 'on')

_shtab_makex_pos_0_nargs=A...
_shtab_makex__h_nargs=0
_shtab_makex___help_nargs=0
_shtab_makex___verbose_nargs=0
_shtab_makex___debug_nargs=0
_shtab_makex___python_audit_nargs=?
_shtab_makex_run_pos_0_nargs=+
_shtab_makex_run__h_nargs=0
_shtab_makex_run___help_nargs=0
_shtab_makex_run___verbose_nargs=0
_shtab_makex_run___debug_nargs=0
_shtab_makex_run___python_audit_nargs=?
_shtab_makex_run___force_nargs=0
_shtab_makex_run___dry_nargs=0
_shtab_makex_path__h_nargs=0
_shtab_makex_path___help_nargs=0
_shtab_makex_path___verbose_nargs=0
_shtab_makex_path___debug_nargs=0
_shtab_makex_path___python_audit_nargs=?
_shtab_makex_path___real_nargs=0
_shtab_makex_dot_pos_0_nargs=+
_shtab_makex_dot__h_nargs=0
_shtab_makex_dot___help_nargs=0
_shtab_makex_dot___verbose_nargs=0
_shtab_makex_dot___debug_nargs=0
_shtab_makex_dot___python_audit_nargs=?
_shtab_makex_dot___ignore_nargs=*
_shtab_makex_affected_pos_0_nargs=+
_shtab_makex_affected__h_nargs=0
_shtab_makex_affected___help_nargs=0
_shtab_makex_affected___verbose_nargs=0
_shtab_makex_affected___debug_nargs=0
_shtab_makex_affected___python_audit_nargs=?
_shtab_makex_affected___scope_nargs=+
_shtab_makex_inputs_pos_0_nargs=+
_shtab_makex_inputs__h_nargs=0
_shtab_makex_inputs___help_nargs=0
_shtab_makex_inputs___verbose_nargs=0
_shtab_makex_inputs___debug_nargs=0
_shtab_makex_inputs___python_audit_nargs=?
_shtab_makex_inputs___ignore_nargs=*
_shtab_makex_outputs_pos_0_nargs=+
_shtab_makex_outputs__h_nargs=0
_shtab_makex_outputs___help_nargs=0
_shtab_makex_outputs___verbose_nargs=0
_shtab_makex_outputs___debug_nargs=0
_shtab_makex_outputs___python_audit_nargs=?
_shtab_makex_outputs___ignore_nargs=*
_shtab_makex_evaluate__h_nargs=0
_shtab_makex_evaluate___help_nargs=0
_shtab_makex_evaluate___verbose_nargs=0
_shtab_makex_evaluate___debug_nargs=0
_shtab_makex_evaluate___python_audit_nargs=?
_shtab_makex_tasks__h_nargs=0
_shtab_makex_tasks___help_nargs=0
_shtab_makex_tasks___verbose_nargs=0
_shtab_makex_tasks___debug_nargs=0
_shtab_makex_tasks___python_audit_nargs=?
_shtab_makex_tasks___prefix_nargs=0
_shtab_makex_list__h_nargs=0
_shtab_makex_list___help_nargs=0
_shtab_makex_list___verbose_nargs=0
_shtab_makex_list___debug_nargs=0
_shtab_makex_list___python_audit_nargs=?
_shtab_makex_list___prefix_nargs=0
_shtab_makex_targets__h_nargs=0
_shtab_makex_targets___help_nargs=0
_shtab_makex_targets___verbose_nargs=0
_shtab_makex_targets___debug_nargs=0
_shtab_makex_targets___python_audit_nargs=?
_shtab_makex_targets___prefix_nargs=0
_shtab_makex_completions__h_nargs=0
_shtab_makex_completions___help_nargs=0
_shtab_makex_completions___verbose_nargs=0
_shtab_makex_completions___debug_nargs=0
_shtab_makex_completions___python_audit_nargs=?
_shtab_makex_completions___internal_nargs=0
_shtab_makex_workspace__h_nargs=0
_shtab_makex_workspace___help_nargs=0
_shtab_makex_workspace___verbose_nargs=0
_shtab_makex_workspace___debug_nargs=0
_shtab_makex_workspace___python_audit_nargs=?
_shtab_makex_complete__h_nargs=0
_shtab_makex_complete___help_nargs=0
_shtab_makex_complete___verbose_nargs=0
_shtab_makex_complete___debug_nargs=0
_shtab_makex_complete___python_audit_nargs=?
_shtab_makex_version__h_nargs=0
_shtab_makex_version___help_nargs=0
_shtab_makex_fix__h_nargs=0
_shtab_makex_fix___help_nargs=0
_shtab_makex_fix___diff_nargs=0
_shtab_makex_fix___edit_nargs=0
_shtab_makex_evolve__h_nargs=0
_shtab_makex_evolve___help_nargs=0
_shtab_makex_evolve___diff_nargs=0
_shtab_makex_evolve___edit_nargs=0


# Custom Preamble

# $1=COMP_WORDS[1]
_shtab_makex_compgen_paths() {
    makex complete ${1}
}

# End Custom Preamble

# $1=COMP_WORDS[1]
_shtab_compgen_files() {
  compgen -f -- $1  # files
}

# $1=COMP_WORDS[1]
_shtab_compgen_dirs() {
  compgen -d -- $1  # recurse into subdirs
}

# $1=COMP_WORDS[1]
_shtab_replace_nonword() {
  echo "${1//[^[:word:]]/_}"
}

# set default values (called for the initial parser & any subparsers)
_set_parser_defaults() {
  local subparsers_var="${prefix}_subparsers[@]"
  sub_parsers=${!subparsers_var-}

  local current_option_strings_var="${prefix}_option_strings[@]"
  current_option_strings=${!current_option_strings_var}

  completed_positional_actions=0

  _set_new_action "pos_${completed_positional_actions}" true
}

# $1=action identifier
# $2=positional action (bool)
# set all identifiers for an action's parameters
_set_new_action() {
  current_action="${prefix}_$(_shtab_replace_nonword $1)"

  local current_action_compgen_var=${current_action}_COMPGEN
  current_action_compgen="${!current_action_compgen_var-}"

  local current_action_choices_var="${current_action}_choices[@]"
  current_action_choices="${!current_action_choices_var-}"

  local current_action_nargs_var="${current_action}_nargs"
  if [ -n "${!current_action_nargs_var-}" ]; then
    current_action_nargs="${!current_action_nargs_var}"
  else
    current_action_nargs=1
  fi

  current_action_args_start_index=$(( $word_index + 1 ))

  current_action_is_positional=$2
}

# Notes:
# `COMPREPLY`: what will be rendered after completion is triggered
# `completing_word`: currently typed word to generate completions for
# `${!var}`: evaluates the content of `var` and expand its content as a variable
#     hello="world"
#     x="hello"
#     ${!x} -> ${hello} -> "world"
_shtab_makex() {
  local completing_word
  local completed_positional_actions
  local current_action
  local current_action_args_start_index
  local current_action_choices
  local current_action_compgen
  local current_action_is_positional
  local current_action_nargs
  local current_option_strings
  local sub_parsers
  
  completing_word="$(_get_comp_words_by_ref -n :)"
  
  COMPREPLY=()

  local prefix=_shtab_makex
  local word_index=0
  _set_parser_defaults
  word_index=1

  # determine what arguments are appropriate for the current state
  # of the arg parser
  while [ $word_index -ne $COMP_CWORD ]; do
    local this_word="${COMP_WORDS[$word_index]}"

    if [[ -n $sub_parsers && " ${sub_parsers[@]} " == *" ${this_word} "* ]]; then
      # valid subcommand: add it to the prefix & reset the current action
      prefix="${prefix}_$(_shtab_replace_nonword $this_word)"
      _set_parser_defaults
    fi

    if [[ " ${current_option_strings[@]} " == *" ${this_word} "* ]]; then
      # a new action should be acquired (due to recognised option string or
      # no more input expected from current action);
      # the next positional action can fill in here
      _set_new_action $this_word false
    fi

    if [[ "$current_action_nargs" != "*" ]] && \
       [[ "$current_action_nargs" != "+" ]] && \
       [[ "$current_action_nargs" != *"..." ]] && \
       (( $word_index + 1 - $current_action_args_start_index >= \
          $current_action_nargs )); then
      $current_action_is_positional && let "completed_positional_actions += 1"
      _set_new_action "pos_${completed_positional_actions}" true
    fi

    let "word_index+=1"
  done

  # Generate the completions

  if [[ "${completing_word}" == -* ]]; then
    # optional argument started: use option strings
    COMPREPLY=( $(compgen -W "${current_option_strings[*]}" -- "${completing_word}") )
  else
    # use choices & compgen
    local IFS=$'\n' # items may contain spaces, so delimit using newline
    COMPREPLY=( $([ -n "${current_action_compgen}" ] \
                  && "${current_action_compgen}" "${completing_word}") )
    COMPREPLY+=( $(compgen -W "${current_action_choices[*]}" -- "${completing_word}") )
    unset IFS
  fi

  return 0
}

complete -o filenames -F _shtab_makex makex

