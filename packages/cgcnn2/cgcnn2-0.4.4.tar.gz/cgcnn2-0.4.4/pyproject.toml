[project]
name            = "cgcnn2"
version         = "0.4.4"
description     = "Reproduction of Crystal Graph Convolutional Neural Networks"
readme          = "README.md"
requires-python = ">=3.10,<3.13"
authors         = [{ name = "Jiacheng Wang", email = "jiachengwang@umass.edu" },]
maintainers     = [{ name = "Jiacheng Wang", email = "jiachengwang@umass.edu" },]
license         = { text = "MIT" }
homepage        = "https://github.com/jcwang587/cgcnn2/"
repository      = "https://github.com/jcwang587/cgcnn2/"
keywords        = ["python", "graph-model", "fine-tuning", "computational-materials"]
classifiers     = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Science/Research",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Operating System :: OS Independent",
]

dependencies = [
  "ase>=3.25.0",
  "numpy",
  "pandas",
  "pymatgen>=2025.1.9",
  "pymatviz~=0.16.0",
  "torch>=2.0.0",
]
# ASE and Pymatgen track the first release of the current year
# Pymatviz tracks the latest minor version

[project.optional-dependencies]
dev = [
  "pytest>=8.3.0",
  "pytest-cov>=6.0.0",
]

[project.scripts]
cgcnn-ft = "cgcnn2.cli.cgcnn_ft:main"
cgcnn-pr = "cgcnn2.cli.cgcnn_pr:main"
cgcnn-tr = "cgcnn2.cli.cgcnn_tr:main"
atom-gen = "cgcnn2.cli.cgcnn_init:atom_gen"
id-gen   = "cgcnn2.cli.cgcnn_init:id_gen"

[build-system]
requires = ["uv_build>=0.7.5"]
build-backend = "uv_build"

[tool.uv.build-backend]
module-name = "cgcnn2"
module-root = ""

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
line-length = 88
indent-width = 4
target-version = "py310"

[tool.ruff.lint]
select = ["E4", "E7", "E9", "F"]
ignore = []
fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = false
docstring-code-line-length = "dynamic"
