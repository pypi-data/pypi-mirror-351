[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "prtc-service-discovery"
dynamic = ["version"]
description = "A modern annotation-based library for registering FastAPI services with Consul service discovery"
readme = "README.md"
requires-python = ">=3.10"
authors = [
    {name = "Perceptic Technologies Ltd", email = "martin@perceptic.ai"},
]
keywords = ["consul", "fastapi", "service-discovery", "microservices", "registration"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: Other/Proprietary License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
license = {text = "Proprietary"}
dependencies = [
    "fastapi>=0.115.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "aiohttp>=3.10.0",
    "python-consul2>=0.1.5",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.2.0",
    "pytest-asyncio>=0.24.0",
    "black>=24.10.0",
    "ruff>=0.11.0",
    "mypy>=1.14.0",
    "uvicorn>=0.30.0",
    "httpx>=0.28.0",
    "testcontainers>=4.10.0",
    "pre-commit>=4.0.0",
]

test = [
    "pytest>=8.2.0",
    "pytest-asyncio>=0.24.0",
    "httpx>=0.28.0",
    "testcontainers>=4.10.0",
]

testing = [
    "pytest>=8.2.0",
    "pytest-asyncio>=0.24.0",
    "httpx>=0.28.0",
    "testcontainers>=4.10.0",
    "uvicorn>=0.30.0",
]

[project.urls]
Homepage = "https://github.com/perceptic/service-discovery-python"
Documentation = "https://github.com/perceptic/service-discovery-python/blob/main/README.md"
Repository = "https://github.com/perceptic/service-discovery-python"
Issues = "https://github.com/perceptic/service-discovery-python/issues"

[tool.hatch.version]
source = "regex"
path = "VERSION"
pattern = "^(?P<version>.+)$"

[tool.hatch.build.targets.wheel]
packages = ["src/service_discovery"]

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
]

[tool.black]
line-length = 120
target-version = ['py310']
include = '\.pyi?$'

[tool.ruff]
line-length = 120
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "B905",  # `zip()` without an explicit `strict=` parameter
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["consul", "consul.aio"]
ignore_missing_imports = true

[tool.coverage.run]
source = ["src/service_discovery"]
omit = ["tests/*", "example/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
]