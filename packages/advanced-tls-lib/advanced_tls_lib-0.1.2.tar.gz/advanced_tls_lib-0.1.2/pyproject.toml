[build-system]
requires = [
    "setuptools>=60",
    "wheel",
]
build-backend = "setuptools.build_meta"

[project]
name = "advanced-tls-lib"
version = "0.1.2"
description = "The Most Advanced TLS Library for Python"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Advanced TLS Team", email = "team@advancedtls.dev"}
]
maintainers = [
    {name = "Advanced TLS Team", email = "team@advancedtls.dev"}
]
keywords = ["tls", "ssl", "http", "browser", "fingerprint", "evasion", "bot", "detection"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers", 
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9", 
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: C++",
    "Programming Language :: Rust",
    "Topic :: Internet :: WWW/HTTP :: Browsers",
    "Topic :: Security :: Cryptography",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Networking",
]
requires-python = ">=3.8"
dependencies = [
    "typing-extensions>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0", 
    "pytest-benchmark>=4.0.0",
    "black>=22.0.0",
    "isort>=5.0.0",
    "mypy>=1.0.0",
    "flake8>=5.0.0",
    "pre-commit>=2.20.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0", 
    "sphinx-autodoc-typehints>=1.0.0",
    "myst-parser>=0.18.0",
]
performance = [
    "cython>=0.29.0",
    "numba>=0.56.0",
]
all = [
    "advanced-tls[dev,docs,performance]"
]

[project.urls]
Homepage = "https://github.com/advanced-tls/advanced-tls-lib"
Documentation = "https://docs.advancedtls.dev"
Repository = "https://github.com/advanced-tls/advanced-tls-lib"
"Bug Reports" = "https://github.com/advanced-tls/advanced-tls-lib/issues"
Changelog = "https://github.com/advanced-tls/advanced-tls-lib/blob/main/CHANGELOG.md"

[project.scripts]
advanced-tls = "advanced_tls.cli:main"

[tool.setuptools]
package-dir = {"" = "src/python"}
zip-safe = false

[tool.setuptools.packages.find]
where = ["src/python"]

[tool.setuptools.package-data]
advanced_tls = ["py.typed"]

# Black code formatting
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pybind11.*",
    "setuptools_rust.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=advanced_tls",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "benchmark: marks tests as benchmarks",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/python"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Ruff linting (alternative to flake8)
[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["E712", "E711"]

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601"]