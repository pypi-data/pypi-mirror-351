[build-system]
build-backend = "uv_build"

# Currently does not work without the version specs.
requires = [ "uv-build>=0.6,<0.7" ]

[project]
name = "syncd"
version = "0.1.0"
description = "CLI tool to synchronize directories using rsync."
readme = "README.md"
authors = [ { name = "Christian Heinze" } ]
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
    "Topic :: Utilities",
    "Typing :: Typed",
]
dependencies = [
    "aiosqlite>=0.21",
    "pydantic>=2.10",
    "rich>=13.9",
]
urls.Repository = "https://codeberg.org/christianheinze/syncd"

scripts.syncd = "syncd._cli:run"
scripts.syncd-conf = "syncd._cli:conf"

[dependency-groups]
dev = [
    "mdformat>=0.7.22",
    "mdformat-ruff>=0.1.3",
    "nox>=2024.10.9",
    "pyproject-fmt>=2.4",
    "pyright>=1.1",
    "pytest>=8.3",
    "pytest-asyncio>=0.25",
    "pytest-cov>=6",
    "pytest-randomly>=3.16",
    "ruff>=0.7",
]

[tool.ruff]
respect-gitignore = false

fix = false
format.line-ending = "lf"
lint.flake8-annotations.ignore-fully-untyped = true
# __init__ needs not return annotation if there is at least one argument.
lint.flake8-annotations.mypy-init-return = true
# Functions with no return or just return None need no return annotation.
lint.flake8-annotations.suppress-none-returning = true
lint.flake8-pytest-style.fixture-parentheses = false
lint.flake8-pytest-style.mark-parentheses = false
lint.flake8-pytest-style.parametrize-names-type = "tuple"
lint.flake8-pytest-style.parametrize-values-row-type = "tuple"
lint.flake8-pytest-style.parametrize-values-type = "list"
lint.isort.required-imports = [ "from __future__ import annotations" ]

[tool.pyproject-fmt]
column_width = 88
indent = 4
max_supported_python = "3.12"

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "strict"
addopts = [
    "--import-mode=importlib",
    "--strict-markers",
    "--cov=syncd",
    "--cov=tests",             # To make sure all tests are run.
]
markers = [
    "phone: test that requires the phone specified in devices.toml",
    "unlockedphone: test that requires the phone specified in devices.toml with file tranfer enabled",
    "disk: test that requires the disk specified in devices.toml",
]
testpaths = [ "tests" ]
python_files = "test_*.py"
filterwarnings = [ "error" ]

[tool.coverage.run]
omit = [ "__main__.py" ]
