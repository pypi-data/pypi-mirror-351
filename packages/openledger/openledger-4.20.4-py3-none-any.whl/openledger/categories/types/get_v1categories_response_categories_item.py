# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from .get_v1categories_response_categories_item_type import GetV1CategoriesResponseCategoriesItemType


class GetV1CategoriesResponseCategoriesItem(UniversalBaseModel):
    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Unique identifier for the category
    """

    instance_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="instanceId")] = pydantic.Field(
        default=None
    )
    """
    ID of the instance this category belongs to
    """

    parent_account_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="parentAccountId")] = (
        pydantic.Field(default=None)
    )
    """
    ID of the parent account, if any
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    Name of the category
    """

    type: typing.Optional[GetV1CategoriesResponseCategoriesItemType] = pydantic.Field(default=None)
    """
    The type of category
    """

    financial_type: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="financialType")] = (
        pydantic.Field(default=None)
    )
    """
    The financial classification of the category
    """

    is_category: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="isCategory")] = pydantic.Field(
        default=None
    )
    """
    Whether this is a category account
    """

    code: typing.Optional[int] = pydantic.Field(default=None)
    """
    The account code number
    """

    sub_type_code: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="subTypeCode")] = (
        pydantic.Field(default=None)
    )
    """
    The subtype code number
    """

    tb_account_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="tbAccountId")] = (
        pydantic.Field(default=None)
    )
    """
    The trial balance account ID
    """

    template_node_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="templateNodeId")] = (
        pydantic.Field(default=None)
    )
    """
    ID of the template node, if any
    """

    ledger_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="ledgerId")] = pydantic.Field(
        default=None
    )
    """
    ID of the ledger this category belongs to
    """

    entity_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="entityId")] = pydantic.Field(
        default=None
    )
    """
    ID of the entity this category belongs to
    """

    created_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="createdAt")] = (
        pydantic.Field(default=None)
    )
    """
    When the category was created
    """

    updated_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="updatedAt")] = (
        pydantic.Field(default=None)
    )
    """
    When the category was last updated
    """

    top_level: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="topLevel")] = pydantic.Field(
        default=None
    )
    """
    Whether this is a top-level category
    """

    metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Additional metadata for the category
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
