# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from .post_v1transactions_response_transaction_status import PostV1TransactionsResponseTransactionStatus


class PostV1TransactionsResponseTransaction(UniversalBaseModel):
    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Unique transaction ID
    """

    instance_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="instanceId")] = pydantic.Field(
        default=None
    )
    """
    Instance ID if available
    """

    entity_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="entityId")] = pydantic.Field(
        default=None
    )
    """
    ID of the entity that owns the transaction
    """

    timestamp: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    When the transaction occurred
    """

    amount: typing.Optional[float] = pydantic.Field(default=None)
    """
    The amount of the transaction
    """

    currency: typing.Optional[str] = pydantic.Field(default=None)
    """
    The currency of the transaction
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    Description of the transaction
    """

    debit_account_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="debitAccountId")] = (
        pydantic.Field(default=None)
    )
    """
    ID of the account debited
    """

    credit_account_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="creditAccountId")] = (
        pydantic.Field(default=None)
    )
    """
    ID of the account credited
    """

    status: typing.Optional[PostV1TransactionsResponseTransactionStatus] = pydantic.Field(default=None)
    """
    Status of the transaction
    """

    metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Additional transaction metadata
    """

    created_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="createdAt")] = (
        pydantic.Field(default=None)
    )
    """
    When the transaction was created
    """

    updated_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="updatedAt")] = (
        pydantic.Field(default=None)
    )
    """
    When the transaction was last updated
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
