# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawEntitiesClient, RawEntitiesClient
from .types.delete_v1entities_response import DeleteV1EntitiesResponse
from .types.get_v1entities_response import GetV1EntitiesResponse
from .types.post_v1entities_auth_generate_token_response import PostV1EntitiesAuthGenerateTokenResponse
from .types.post_v1entities_response import PostV1EntitiesResponse
from .types.put_v1entities_response import PutV1EntitiesResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class EntitiesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawEntitiesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawEntitiesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawEntitiesClient
        """
        return self._raw_client

    def generate_authentication_token(
        self,
        *,
        entity_id: str,
        api_key: str,
        developer_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PostV1EntitiesAuthGenerateTokenResponse:
        """
        Generates a JWT token for entity authentication

        Parameters
        ----------
        entity_id : str
            The ID of the entity

        api_key : str
            The API key for the entity

        developer_id : str
            The ID of the developer

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostV1EntitiesAuthGenerateTokenResponse
            Token generated successfully

        Examples
        --------
        from openledger import OpenLedgerClient

        client = OpenLedgerClient(
            token="YOUR_TOKEN",
        )
        client.entities.generate_authentication_token(
            entity_id="entityId",
            api_key="apiKey",
            developer_id="developerId",
        )
        """
        _response = self._raw_client.generate_authentication_token(
            entity_id=entity_id, api_key=api_key, developer_id=developer_id, request_options=request_options
        )
        return _response.data

    def get_entity_details(
        self, *, entity_id: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> GetV1EntitiesResponse:
        """
        Retrieves details for a specific entity

        Parameters
        ----------
        entity_id : typing.Optional[str]
            ID of the entity to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetV1EntitiesResponse
            Entity details retrieved successfully

        Examples
        --------
        from openledger import OpenLedgerClient

        client = OpenLedgerClient(
            token="YOUR_TOKEN",
        )
        client.entities.get_entity_details()
        """
        _response = self._raw_client.get_entity_details(entity_id=entity_id, request_options=request_options)
        return _response.data

    def create_a_new_entity(
        self,
        *,
        developer_id: str,
        external_id: typing.Optional[str] = OMIT,
        legal_name: typing.Optional[str] = OMIT,
        tin: typing.Optional[str] = OMIT,
        us_state: typing.Optional[str] = OMIT,
        entity_type: typing.Optional[str] = OMIT,
        phone_number: typing.Optional[str] = OMIT,
        status: typing.Optional[str] = OMIT,
        clerk_id: typing.Optional[str] = OMIT,
        date_created: typing.Optional[dt.datetime] = OMIT,
        instance_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PostV1EntitiesResponse:
        """
        Creates a new entity with the provided details

        Parameters
        ----------
        developer_id : str
            ID of the developer creating the entity

        external_id : typing.Optional[str]
            External identifier for the entity

        legal_name : typing.Optional[str]
            Legal name of the entity

        tin : typing.Optional[str]
            Tax Identification Number

        us_state : typing.Optional[str]
            US state code

        entity_type : typing.Optional[str]
            Type of entity

        phone_number : typing.Optional[str]
            Contact phone number

        status : typing.Optional[str]
            Current status of the entity

        clerk_id : typing.Optional[str]
            Clerk ID (alternative to developerId)

        date_created : typing.Optional[dt.datetime]
            When the entity was created

        instance_id : typing.Optional[str]
            ID of the instance to associate with the entity

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostV1EntitiesResponse
            Entity created successfully

        Examples
        --------
        from openledger import OpenLedgerClient

        client = OpenLedgerClient(
            token="YOUR_TOKEN",
        )
        client.entities.create_a_new_entity(
            developer_id="{{developerId}}",
        )
        """
        _response = self._raw_client.create_a_new_entity(
            developer_id=developer_id,
            external_id=external_id,
            legal_name=legal_name,
            tin=tin,
            us_state=us_state,
            entity_type=entity_type,
            phone_number=phone_number,
            status=status,
            clerk_id=clerk_id,
            date_created=date_created,
            instance_id=instance_id,
            request_options=request_options,
        )
        return _response.data

    def update_an_entity(
        self,
        *,
        entity_id: str,
        external_id: typing.Optional[str] = OMIT,
        legal_name: typing.Optional[str] = OMIT,
        tin: typing.Optional[str] = OMIT,
        us_state: typing.Optional[str] = OMIT,
        entity_type: typing.Optional[str] = OMIT,
        phone_number: typing.Optional[str] = OMIT,
        status: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PutV1EntitiesResponse:
        """
        Updates an existing entity's details

        Parameters
        ----------
        entity_id : str
            ID of the entity to update

        external_id : typing.Optional[str]
            External identifier for the entity

        legal_name : typing.Optional[str]
            Legal name of the entity

        tin : typing.Optional[str]
            Tax Identification Number

        us_state : typing.Optional[str]
            US state code

        entity_type : typing.Optional[str]
            Type of entity

        phone_number : typing.Optional[str]
            Contact phone number

        status : typing.Optional[str]
            Current status of the entity

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PutV1EntitiesResponse
            Entity updated successfully

        Examples
        --------
        from openledger import OpenLedgerClient

        client = OpenLedgerClient(
            token="YOUR_TOKEN",
        )
        client.entities.update_an_entity(
            entity_id="entityId",
        )
        """
        _response = self._raw_client.update_an_entity(
            entity_id=entity_id,
            external_id=external_id,
            legal_name=legal_name,
            tin=tin,
            us_state=us_state,
            entity_type=entity_type,
            phone_number=phone_number,
            status=status,
            request_options=request_options,
        )
        return _response.data

    def delete_an_entity(
        self, *, entity_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteV1EntitiesResponse:
        """
        Deletes an existing entity and its associated data

        Parameters
        ----------
        entity_id : str
            ID of the entity to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteV1EntitiesResponse
            Entity deleted successfully

        Examples
        --------
        from openledger import OpenLedgerClient

        client = OpenLedgerClient(
            token="YOUR_TOKEN",
        )
        client.entities.delete_an_entity(
            entity_id="entityId",
        )
        """
        _response = self._raw_client.delete_an_entity(entity_id=entity_id, request_options=request_options)
        return _response.data


class AsyncEntitiesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawEntitiesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawEntitiesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawEntitiesClient
        """
        return self._raw_client

    async def generate_authentication_token(
        self,
        *,
        entity_id: str,
        api_key: str,
        developer_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PostV1EntitiesAuthGenerateTokenResponse:
        """
        Generates a JWT token for entity authentication

        Parameters
        ----------
        entity_id : str
            The ID of the entity

        api_key : str
            The API key for the entity

        developer_id : str
            The ID of the developer

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostV1EntitiesAuthGenerateTokenResponse
            Token generated successfully

        Examples
        --------
        import asyncio

        from openledger import AsyncOpenLedgerClient

        client = AsyncOpenLedgerClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entities.generate_authentication_token(
                entity_id="entityId",
                api_key="apiKey",
                developer_id="developerId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.generate_authentication_token(
            entity_id=entity_id, api_key=api_key, developer_id=developer_id, request_options=request_options
        )
        return _response.data

    async def get_entity_details(
        self, *, entity_id: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> GetV1EntitiesResponse:
        """
        Retrieves details for a specific entity

        Parameters
        ----------
        entity_id : typing.Optional[str]
            ID of the entity to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetV1EntitiesResponse
            Entity details retrieved successfully

        Examples
        --------
        import asyncio

        from openledger import AsyncOpenLedgerClient

        client = AsyncOpenLedgerClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entities.get_entity_details()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_entity_details(entity_id=entity_id, request_options=request_options)
        return _response.data

    async def create_a_new_entity(
        self,
        *,
        developer_id: str,
        external_id: typing.Optional[str] = OMIT,
        legal_name: typing.Optional[str] = OMIT,
        tin: typing.Optional[str] = OMIT,
        us_state: typing.Optional[str] = OMIT,
        entity_type: typing.Optional[str] = OMIT,
        phone_number: typing.Optional[str] = OMIT,
        status: typing.Optional[str] = OMIT,
        clerk_id: typing.Optional[str] = OMIT,
        date_created: typing.Optional[dt.datetime] = OMIT,
        instance_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PostV1EntitiesResponse:
        """
        Creates a new entity with the provided details

        Parameters
        ----------
        developer_id : str
            ID of the developer creating the entity

        external_id : typing.Optional[str]
            External identifier for the entity

        legal_name : typing.Optional[str]
            Legal name of the entity

        tin : typing.Optional[str]
            Tax Identification Number

        us_state : typing.Optional[str]
            US state code

        entity_type : typing.Optional[str]
            Type of entity

        phone_number : typing.Optional[str]
            Contact phone number

        status : typing.Optional[str]
            Current status of the entity

        clerk_id : typing.Optional[str]
            Clerk ID (alternative to developerId)

        date_created : typing.Optional[dt.datetime]
            When the entity was created

        instance_id : typing.Optional[str]
            ID of the instance to associate with the entity

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostV1EntitiesResponse
            Entity created successfully

        Examples
        --------
        import asyncio

        from openledger import AsyncOpenLedgerClient

        client = AsyncOpenLedgerClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entities.create_a_new_entity(
                developer_id="{{developerId}}",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_a_new_entity(
            developer_id=developer_id,
            external_id=external_id,
            legal_name=legal_name,
            tin=tin,
            us_state=us_state,
            entity_type=entity_type,
            phone_number=phone_number,
            status=status,
            clerk_id=clerk_id,
            date_created=date_created,
            instance_id=instance_id,
            request_options=request_options,
        )
        return _response.data

    async def update_an_entity(
        self,
        *,
        entity_id: str,
        external_id: typing.Optional[str] = OMIT,
        legal_name: typing.Optional[str] = OMIT,
        tin: typing.Optional[str] = OMIT,
        us_state: typing.Optional[str] = OMIT,
        entity_type: typing.Optional[str] = OMIT,
        phone_number: typing.Optional[str] = OMIT,
        status: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PutV1EntitiesResponse:
        """
        Updates an existing entity's details

        Parameters
        ----------
        entity_id : str
            ID of the entity to update

        external_id : typing.Optional[str]
            External identifier for the entity

        legal_name : typing.Optional[str]
            Legal name of the entity

        tin : typing.Optional[str]
            Tax Identification Number

        us_state : typing.Optional[str]
            US state code

        entity_type : typing.Optional[str]
            Type of entity

        phone_number : typing.Optional[str]
            Contact phone number

        status : typing.Optional[str]
            Current status of the entity

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PutV1EntitiesResponse
            Entity updated successfully

        Examples
        --------
        import asyncio

        from openledger import AsyncOpenLedgerClient

        client = AsyncOpenLedgerClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entities.update_an_entity(
                entity_id="entityId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update_an_entity(
            entity_id=entity_id,
            external_id=external_id,
            legal_name=legal_name,
            tin=tin,
            us_state=us_state,
            entity_type=entity_type,
            phone_number=phone_number,
            status=status,
            request_options=request_options,
        )
        return _response.data

    async def delete_an_entity(
        self, *, entity_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteV1EntitiesResponse:
        """
        Deletes an existing entity and its associated data

        Parameters
        ----------
        entity_id : str
            ID of the entity to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteV1EntitiesResponse
            Entity deleted successfully

        Examples
        --------
        import asyncio

        from openledger import AsyncOpenLedgerClient

        client = AsyncOpenLedgerClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entities.delete_an_entity(
                entity_id="entityId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_an_entity(entity_id=entity_id, request_options=request_options)
        return _response.data
