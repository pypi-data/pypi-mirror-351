# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..errors.bad_request_error import BadRequestError
from ..errors.internal_server_error import InternalServerError
from ..errors.not_found_error import NotFoundError
from ..errors.unauthorized_error import UnauthorizedError
from .types.delete_v1entities_response import DeleteV1EntitiesResponse
from .types.get_v1entities_response import GetV1EntitiesResponse
from .types.post_v1entities_auth_generate_token_response import PostV1EntitiesAuthGenerateTokenResponse
from .types.post_v1entities_response import PostV1EntitiesResponse
from .types.put_v1entities_response import PutV1EntitiesResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawEntitiesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def generate_authentication_token(
        self,
        *,
        entity_id: str,
        api_key: str,
        developer_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[PostV1EntitiesAuthGenerateTokenResponse]:
        """
        Generates a JWT token for entity authentication

        Parameters
        ----------
        entity_id : str
            The ID of the entity

        api_key : str
            The API key for the entity

        developer_id : str
            The ID of the developer

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[PostV1EntitiesAuthGenerateTokenResponse]
            Token generated successfully
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/entities/auth/generate-token",
            method="POST",
            json={
                "entityId": entity_id,
                "apiKey": api_key,
                "developerId": developer_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    PostV1EntitiesAuthGenerateTokenResponse,
                    parse_obj_as(
                        type_=PostV1EntitiesAuthGenerateTokenResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_entity_details(
        self, *, entity_id: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[GetV1EntitiesResponse]:
        """
        Retrieves details for a specific entity

        Parameters
        ----------
        entity_id : typing.Optional[str]
            ID of the entity to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[GetV1EntitiesResponse]
            Entity details retrieved successfully
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/entities",
            method="GET",
            params={
                "entityId": entity_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetV1EntitiesResponse,
                    parse_obj_as(
                        type_=GetV1EntitiesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def create_a_new_entity(
        self,
        *,
        developer_id: str,
        external_id: typing.Optional[str] = OMIT,
        legal_name: typing.Optional[str] = OMIT,
        tin: typing.Optional[str] = OMIT,
        us_state: typing.Optional[str] = OMIT,
        entity_type: typing.Optional[str] = OMIT,
        phone_number: typing.Optional[str] = OMIT,
        status: typing.Optional[str] = OMIT,
        clerk_id: typing.Optional[str] = OMIT,
        date_created: typing.Optional[dt.datetime] = OMIT,
        instance_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[PostV1EntitiesResponse]:
        """
        Creates a new entity with the provided details

        Parameters
        ----------
        developer_id : str
            ID of the developer creating the entity

        external_id : typing.Optional[str]
            External identifier for the entity

        legal_name : typing.Optional[str]
            Legal name of the entity

        tin : typing.Optional[str]
            Tax Identification Number

        us_state : typing.Optional[str]
            US state code

        entity_type : typing.Optional[str]
            Type of entity

        phone_number : typing.Optional[str]
            Contact phone number

        status : typing.Optional[str]
            Current status of the entity

        clerk_id : typing.Optional[str]
            Clerk ID (alternative to developerId)

        date_created : typing.Optional[dt.datetime]
            When the entity was created

        instance_id : typing.Optional[str]
            ID of the instance to associate with the entity

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[PostV1EntitiesResponse]
            Entity created successfully
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/entities",
            method="POST",
            json={
                "externalId": external_id,
                "legalName": legal_name,
                "tin": tin,
                "usState": us_state,
                "entityType": entity_type,
                "phoneNumber": phone_number,
                "status": status,
                "developerId": developer_id,
                "clerkId": clerk_id,
                "dateCreated": date_created,
                "instanceId": instance_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    PostV1EntitiesResponse,
                    parse_obj_as(
                        type_=PostV1EntitiesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def update_an_entity(
        self,
        *,
        entity_id: str,
        external_id: typing.Optional[str] = OMIT,
        legal_name: typing.Optional[str] = OMIT,
        tin: typing.Optional[str] = OMIT,
        us_state: typing.Optional[str] = OMIT,
        entity_type: typing.Optional[str] = OMIT,
        phone_number: typing.Optional[str] = OMIT,
        status: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[PutV1EntitiesResponse]:
        """
        Updates an existing entity's details

        Parameters
        ----------
        entity_id : str
            ID of the entity to update

        external_id : typing.Optional[str]
            External identifier for the entity

        legal_name : typing.Optional[str]
            Legal name of the entity

        tin : typing.Optional[str]
            Tax Identification Number

        us_state : typing.Optional[str]
            US state code

        entity_type : typing.Optional[str]
            Type of entity

        phone_number : typing.Optional[str]
            Contact phone number

        status : typing.Optional[str]
            Current status of the entity

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[PutV1EntitiesResponse]
            Entity updated successfully
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/entities",
            method="PUT",
            params={
                "entityId": entity_id,
            },
            json={
                "externalId": external_id,
                "legalName": legal_name,
                "tin": tin,
                "usState": us_state,
                "entityType": entity_type,
                "phoneNumber": phone_number,
                "status": status,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    PutV1EntitiesResponse,
                    parse_obj_as(
                        type_=PutV1EntitiesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def delete_an_entity(
        self, *, entity_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[DeleteV1EntitiesResponse]:
        """
        Deletes an existing entity and its associated data

        Parameters
        ----------
        entity_id : str
            ID of the entity to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[DeleteV1EntitiesResponse]
            Entity deleted successfully
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/entities",
            method="DELETE",
            params={
                "entityId": entity_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    DeleteV1EntitiesResponse,
                    parse_obj_as(
                        type_=DeleteV1EntitiesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawEntitiesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def generate_authentication_token(
        self,
        *,
        entity_id: str,
        api_key: str,
        developer_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[PostV1EntitiesAuthGenerateTokenResponse]:
        """
        Generates a JWT token for entity authentication

        Parameters
        ----------
        entity_id : str
            The ID of the entity

        api_key : str
            The API key for the entity

        developer_id : str
            The ID of the developer

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[PostV1EntitiesAuthGenerateTokenResponse]
            Token generated successfully
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/entities/auth/generate-token",
            method="POST",
            json={
                "entityId": entity_id,
                "apiKey": api_key,
                "developerId": developer_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    PostV1EntitiesAuthGenerateTokenResponse,
                    parse_obj_as(
                        type_=PostV1EntitiesAuthGenerateTokenResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_entity_details(
        self, *, entity_id: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[GetV1EntitiesResponse]:
        """
        Retrieves details for a specific entity

        Parameters
        ----------
        entity_id : typing.Optional[str]
            ID of the entity to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[GetV1EntitiesResponse]
            Entity details retrieved successfully
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/entities",
            method="GET",
            params={
                "entityId": entity_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetV1EntitiesResponse,
                    parse_obj_as(
                        type_=GetV1EntitiesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def create_a_new_entity(
        self,
        *,
        developer_id: str,
        external_id: typing.Optional[str] = OMIT,
        legal_name: typing.Optional[str] = OMIT,
        tin: typing.Optional[str] = OMIT,
        us_state: typing.Optional[str] = OMIT,
        entity_type: typing.Optional[str] = OMIT,
        phone_number: typing.Optional[str] = OMIT,
        status: typing.Optional[str] = OMIT,
        clerk_id: typing.Optional[str] = OMIT,
        date_created: typing.Optional[dt.datetime] = OMIT,
        instance_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[PostV1EntitiesResponse]:
        """
        Creates a new entity with the provided details

        Parameters
        ----------
        developer_id : str
            ID of the developer creating the entity

        external_id : typing.Optional[str]
            External identifier for the entity

        legal_name : typing.Optional[str]
            Legal name of the entity

        tin : typing.Optional[str]
            Tax Identification Number

        us_state : typing.Optional[str]
            US state code

        entity_type : typing.Optional[str]
            Type of entity

        phone_number : typing.Optional[str]
            Contact phone number

        status : typing.Optional[str]
            Current status of the entity

        clerk_id : typing.Optional[str]
            Clerk ID (alternative to developerId)

        date_created : typing.Optional[dt.datetime]
            When the entity was created

        instance_id : typing.Optional[str]
            ID of the instance to associate with the entity

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[PostV1EntitiesResponse]
            Entity created successfully
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/entities",
            method="POST",
            json={
                "externalId": external_id,
                "legalName": legal_name,
                "tin": tin,
                "usState": us_state,
                "entityType": entity_type,
                "phoneNumber": phone_number,
                "status": status,
                "developerId": developer_id,
                "clerkId": clerk_id,
                "dateCreated": date_created,
                "instanceId": instance_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    PostV1EntitiesResponse,
                    parse_obj_as(
                        type_=PostV1EntitiesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def update_an_entity(
        self,
        *,
        entity_id: str,
        external_id: typing.Optional[str] = OMIT,
        legal_name: typing.Optional[str] = OMIT,
        tin: typing.Optional[str] = OMIT,
        us_state: typing.Optional[str] = OMIT,
        entity_type: typing.Optional[str] = OMIT,
        phone_number: typing.Optional[str] = OMIT,
        status: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[PutV1EntitiesResponse]:
        """
        Updates an existing entity's details

        Parameters
        ----------
        entity_id : str
            ID of the entity to update

        external_id : typing.Optional[str]
            External identifier for the entity

        legal_name : typing.Optional[str]
            Legal name of the entity

        tin : typing.Optional[str]
            Tax Identification Number

        us_state : typing.Optional[str]
            US state code

        entity_type : typing.Optional[str]
            Type of entity

        phone_number : typing.Optional[str]
            Contact phone number

        status : typing.Optional[str]
            Current status of the entity

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[PutV1EntitiesResponse]
            Entity updated successfully
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/entities",
            method="PUT",
            params={
                "entityId": entity_id,
            },
            json={
                "externalId": external_id,
                "legalName": legal_name,
                "tin": tin,
                "usState": us_state,
                "entityType": entity_type,
                "phoneNumber": phone_number,
                "status": status,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    PutV1EntitiesResponse,
                    parse_obj_as(
                        type_=PutV1EntitiesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def delete_an_entity(
        self, *, entity_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[DeleteV1EntitiesResponse]:
        """
        Deletes an existing entity and its associated data

        Parameters
        ----------
        entity_id : str
            ID of the entity to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[DeleteV1EntitiesResponse]
            Entity deleted successfully
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/entities",
            method="DELETE",
            params={
                "entityId": entity_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    DeleteV1EntitiesResponse,
                    parse_obj_as(
                        type_=DeleteV1EntitiesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
