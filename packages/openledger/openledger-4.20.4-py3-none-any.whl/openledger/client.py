# This file was auto-generated by Fern from our API Definition.

import typing

import httpx
from .banks.client import AsyncBanksClient, BanksClient
from .categories.client import AsyncCategoriesClient, CategoriesClient
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .developers.client import AsyncDevelopersClient, DevelopersClient
from .entities.client import AsyncEntitiesClient, EntitiesClient
from .environment import OpenLedgerClientEnvironment
from .integrations.client import AsyncIntegrationsClient, IntegrationsClient
from .reports.client import AsyncReportsClient, ReportsClient
from .transactions.client import AsyncTransactionsClient, TransactionsClient


class OpenLedgerClient:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : OpenLedgerClientEnvironment
        The environment to use for requests from the client. from .environment import OpenLedgerClientEnvironment



        Defaults to OpenLedgerClientEnvironment.DEFAULT



    token : typing.Union[str, typing.Callable[[], str]]
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from openledger import OpenLedgerClient

    client = OpenLedgerClient(
        token="YOUR_TOKEN",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: OpenLedgerClientEnvironment = OpenLedgerClientEnvironment.DEFAULT,
        token: typing.Union[str, typing.Callable[[], str]],
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            token=token,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.banks = BanksClient(client_wrapper=self._client_wrapper)
        self.categories = CategoriesClient(client_wrapper=self._client_wrapper)
        self.developers = DevelopersClient(client_wrapper=self._client_wrapper)
        self.entities = EntitiesClient(client_wrapper=self._client_wrapper)
        self.integrations = IntegrationsClient(client_wrapper=self._client_wrapper)
        self.reports = ReportsClient(client_wrapper=self._client_wrapper)
        self.transactions = TransactionsClient(client_wrapper=self._client_wrapper)


class AsyncOpenLedgerClient:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : OpenLedgerClientEnvironment
        The environment to use for requests from the client. from .environment import OpenLedgerClientEnvironment



        Defaults to OpenLedgerClientEnvironment.DEFAULT



    token : typing.Union[str, typing.Callable[[], str]]
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from openledger import AsyncOpenLedgerClient

    client = AsyncOpenLedgerClient(
        token="YOUR_TOKEN",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: OpenLedgerClientEnvironment = OpenLedgerClientEnvironment.DEFAULT,
        token: typing.Union[str, typing.Callable[[], str]],
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            token=token,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.banks = AsyncBanksClient(client_wrapper=self._client_wrapper)
        self.categories = AsyncCategoriesClient(client_wrapper=self._client_wrapper)
        self.developers = AsyncDevelopersClient(client_wrapper=self._client_wrapper)
        self.entities = AsyncEntitiesClient(client_wrapper=self._client_wrapper)
        self.integrations = AsyncIntegrationsClient(client_wrapper=self._client_wrapper)
        self.reports = AsyncReportsClient(client_wrapper=self._client_wrapper)
        self.transactions = AsyncTransactionsClient(client_wrapper=self._client_wrapper)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: OpenLedgerClientEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
