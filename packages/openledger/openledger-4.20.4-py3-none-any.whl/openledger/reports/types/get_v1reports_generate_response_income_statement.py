# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from .get_v1reports_generate_response_income_statement_hierarchical import (
    GetV1ReportsGenerateResponseIncomeStatementHierarchical,
)


class GetV1ReportsGenerateResponseIncomeStatement(UniversalBaseModel):
    hierarchical: typing.Optional[GetV1ReportsGenerateResponseIncomeStatementHierarchical] = None
    revenue: typing.Optional[float] = None
    expenses: typing.Optional[float] = None
    gross_profit: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="grossProfit")] = None
    operating_income: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="operatingIncome")] = None
    income_before_tax: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="incomeBeforeTax")] = (
        None
    )
    net_income: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="netIncome")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
