# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from .get_v1reports_overview_response_chart_data_item import GetV1ReportsOverviewResponseChartDataItem
from .get_v1reports_overview_response_filter_info import GetV1ReportsOverviewResponseFilterInfo
from .get_v1reports_overview_response_latest_month_stats import GetV1ReportsOverviewResponseLatestMonthStats
from .get_v1reports_overview_response_plaid_accounts_item import GetV1ReportsOverviewResponsePlaidAccountsItem


class GetV1ReportsOverviewResponse(UniversalBaseModel):
    monthly_revenue: typing_extensions.Annotated[
        typing.Optional[typing.List[typing.List[typing.Optional[typing.Any]]]], FieldMetadata(alias="monthlyRevenue")
    ] = pydantic.Field(default=None)
    """
    Monthly revenue data points [month, amount]
    """

    monthly_expenses: typing_extensions.Annotated[
        typing.Optional[typing.List[typing.List[typing.Optional[typing.Any]]]], FieldMetadata(alias="monthlyExpenses")
    ] = pydantic.Field(default=None)
    """
    Monthly expenses data points [month, amount]
    """

    monthly_profit: typing_extensions.Annotated[
        typing.Optional[typing.List[typing.List[typing.Optional[typing.Any]]]], FieldMetadata(alias="monthlyProfit")
    ] = pydantic.Field(default=None)
    """
    Monthly profit data points [month, amount]
    """

    monthly_cash_balance: typing_extensions.Annotated[
        typing.Optional[typing.List[typing.List[typing.Optional[typing.Any]]]],
        FieldMetadata(alias="monthlyCashBalance"),
    ] = pydantic.Field(default=None)
    """
    Monthly cash balance data points [month, amount]
    """

    total_revenue: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="totalRevenue")] = (
        pydantic.Field(default=None)
    )
    """
    Total revenue for the period
    """

    total_expenses: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="totalExpenses")] = (
        pydantic.Field(default=None)
    )
    """
    Total expenses for the period
    """

    total_profit: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="totalProfit")] = (
        pydantic.Field(default=None)
    )
    """
    Total profit for the period
    """

    current_cash_balance: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="currentCashBalance")
    ] = pydantic.Field(default=None)
    """
    Current cash balance across all accounts
    """

    chart_data: typing_extensions.Annotated[
        typing.Optional[typing.List[GetV1ReportsOverviewResponseChartDataItem]], FieldMetadata(alias="chartData")
    ] = pydantic.Field(default=None)
    """
    Data formatted for charts
    """

    latest_month_stats: typing_extensions.Annotated[
        typing.Optional[GetV1ReportsOverviewResponseLatestMonthStats], FieldMetadata(alias="latestMonthStats")
    ] = None
    plaid_accounts: typing_extensions.Annotated[
        typing.Optional[typing.List[GetV1ReportsOverviewResponsePlaidAccountsItem]],
        FieldMetadata(alias="plaidAccounts"),
    ] = pydantic.Field(default=None)
    """
    Connected Plaid accounts
    """

    filter_info: typing_extensions.Annotated[
        typing.Optional[GetV1ReportsOverviewResponseFilterInfo], FieldMetadata(alias="filterInfo")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
