# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata


class GetV1ReportsOverviewResponseLatestMonthStats(UniversalBaseModel):
    revenue: typing.Optional[float] = None
    expenses: typing.Optional[float] = None
    profit: typing.Optional[float] = None
    revenue_change: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="revenueChange")] = (
        pydantic.Field(default=None)
    )
    """
    Percentage change in revenue from previous month
    """

    expenses_change: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="expensesChange")] = (
        pydantic.Field(default=None)
    )
    """
    Percentage change in expenses from previous month
    """

    profit_change: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="profitChange")] = (
        pydantic.Field(default=None)
    )
    """
    Percentage change in profit from previous month
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
