# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..errors.bad_request_error import BadRequestError
from ..errors.internal_server_error import InternalServerError
from .types.get_v1categories_response import GetV1CategoriesResponse
from .types.post_v1categories_request_type import PostV1CategoriesRequestType
from .types.post_v1categories_response import PostV1CategoriesResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawCategoriesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_categories(
        self, *, entity_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[GetV1CategoriesResponse]:
        """
        Retrieves all categories

        Parameters
        ----------
        entity_id : str
            The ID of the entity

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[GetV1CategoriesResponse]
            Categories retrieved successfully
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/categories",
            method="GET",
            params={
                "entityId": entity_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetV1CategoriesResponse,
                    parse_obj_as(
                        type_=GetV1CategoriesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def create_a_new_category(
        self,
        *,
        entity_id: str,
        name: str,
        type: PostV1CategoriesRequestType,
        sub_type_code: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[PostV1CategoriesResponse]:
        """
        Creates a new category for the specified entity

        Parameters
        ----------
        entity_id : str
            The ID of the entity to create the category for

        name : str
            The name of the category

        type : PostV1CategoriesRequestType
            The type of category. Must be one of:
            * ASSET - For asset accounts
            * LIABILITY - For liability accounts
            * EQUITY - For equity accounts
            * REVENUE - For revenue accounts
            * EXPENSE - For expense accounts

        sub_type_code : typing.Optional[int]
            Optional subtype code for the category

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[PostV1CategoriesResponse]
            Category created successfully
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/categories",
            method="POST",
            params={
                "entityId": entity_id,
            },
            json={
                "name": name,
                "type": type,
                "subTypeCode": sub_type_code,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    PostV1CategoriesResponse,
                    parse_obj_as(
                        type_=PostV1CategoriesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawCategoriesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_categories(
        self, *, entity_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[GetV1CategoriesResponse]:
        """
        Retrieves all categories

        Parameters
        ----------
        entity_id : str
            The ID of the entity

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[GetV1CategoriesResponse]
            Categories retrieved successfully
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/categories",
            method="GET",
            params={
                "entityId": entity_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetV1CategoriesResponse,
                    parse_obj_as(
                        type_=GetV1CategoriesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def create_a_new_category(
        self,
        *,
        entity_id: str,
        name: str,
        type: PostV1CategoriesRequestType,
        sub_type_code: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[PostV1CategoriesResponse]:
        """
        Creates a new category for the specified entity

        Parameters
        ----------
        entity_id : str
            The ID of the entity to create the category for

        name : str
            The name of the category

        type : PostV1CategoriesRequestType
            The type of category. Must be one of:
            * ASSET - For asset accounts
            * LIABILITY - For liability accounts
            * EQUITY - For equity accounts
            * REVENUE - For revenue accounts
            * EXPENSE - For expense accounts

        sub_type_code : typing.Optional[int]
            Optional subtype code for the category

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[PostV1CategoriesResponse]
            Category created successfully
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/categories",
            method="POST",
            params={
                "entityId": entity_id,
            },
            json={
                "name": name,
                "type": type,
                "subTypeCode": sub_type_code,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    PostV1CategoriesResponse,
                    parse_obj_as(
                        type_=PostV1CategoriesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
