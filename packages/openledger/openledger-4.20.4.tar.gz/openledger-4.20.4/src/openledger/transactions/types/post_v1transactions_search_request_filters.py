# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata


class PostV1TransactionsSearchRequestFilters(UniversalBaseModel):
    date_from: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dateFrom")] = pydantic.Field(
        default=None
    )
    """
    Start date for filtering
    """

    date_to: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dateTo")] = pydantic.Field(
        default=None
    )
    """
    End date for filtering
    """

    amount_min: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="amountMin")] = pydantic.Field(
        default=None
    )
    """
    Minimum transaction amount
    """

    amount_max: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="amountMax")] = pydantic.Field(
        default=None
    )
    """
    Maximum transaction amount
    """

    status: typing.Optional[str] = pydantic.Field(default=None)
    """
    Transaction status to filter by
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
