# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from .get_v1transactions_counterparties_response_counterparties_item_transactions_item import (
    GetV1TransactionsCounterpartiesResponseCounterpartiesItemTransactionsItem,
)


class GetV1TransactionsCounterpartiesResponseCounterpartiesItem(UniversalBaseModel):
    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    The name of the counterparty (cleaned and normalized)
    """

    transaction_count: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="transactionCount")] = (
        pydantic.Field(default=None)
    )
    """
    Number of transactions with this counterparty
    """

    first_seen: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="firstSeen")] = (
        pydantic.Field(default=None)
    )
    """
    Timestamp of the first transaction with this counterparty
    """

    last_seen: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="lastSeen")] = (
        pydantic.Field(default=None)
    )
    """
    Timestamp of the most recent transaction with this counterparty
    """

    total_amount: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="totalAmount")] = (
        pydantic.Field(default=None)
    )
    """
    Total amount of all transactions with this counterparty
    """

    transactions: typing.Optional[
        typing.List[GetV1TransactionsCounterpartiesResponseCounterpartiesItemTransactionsItem]
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
