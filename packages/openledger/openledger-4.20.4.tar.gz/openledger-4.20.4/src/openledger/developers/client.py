# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawDevelopersClient, RawDevelopersClient
from .types.post_v1developers_auth_generate_token_response import PostV1DevelopersAuthGenerateTokenResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class DevelopersClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawDevelopersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawDevelopersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawDevelopersClient
        """
        return self._raw_client

    def generate_developer_authentication_token(
        self, *, developer_id: str, api_key: str, request_options: typing.Optional[RequestOptions] = None
    ) -> PostV1DevelopersAuthGenerateTokenResponse:
        """
        Generates a JWT token for developer authentication

        Parameters
        ----------
        developer_id : str
            The ID of the developer

        api_key : str
            The API key for the developer

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostV1DevelopersAuthGenerateTokenResponse
            Token generated successfully

        Examples
        --------
        from openledger import OpenLedgerClient

        client = OpenLedgerClient(
            token="YOUR_TOKEN",
        )
        client.developers.generate_developer_authentication_token(
            developer_id="developerId",
            api_key="apiKey",
        )
        """
        _response = self._raw_client.generate_developer_authentication_token(
            developer_id=developer_id, api_key=api_key, request_options=request_options
        )
        return _response.data


class AsyncDevelopersClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawDevelopersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawDevelopersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawDevelopersClient
        """
        return self._raw_client

    async def generate_developer_authentication_token(
        self, *, developer_id: str, api_key: str, request_options: typing.Optional[RequestOptions] = None
    ) -> PostV1DevelopersAuthGenerateTokenResponse:
        """
        Generates a JWT token for developer authentication

        Parameters
        ----------
        developer_id : str
            The ID of the developer

        api_key : str
            The API key for the developer

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostV1DevelopersAuthGenerateTokenResponse
            Token generated successfully

        Examples
        --------
        import asyncio

        from openledger import AsyncOpenLedgerClient

        client = AsyncOpenLedgerClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.developers.generate_developer_authentication_token(
                developer_id="developerId",
                api_key="apiKey",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.generate_developer_authentication_token(
            developer_id=developer_id, api_key=api_key, request_options=request_options
        )
        return _response.data
