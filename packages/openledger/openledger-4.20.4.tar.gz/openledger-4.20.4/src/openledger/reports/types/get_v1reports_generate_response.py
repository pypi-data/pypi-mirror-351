# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from .get_v1reports_generate_response_balance_sheet import GetV1ReportsGenerateResponseBalanceSheet
from .get_v1reports_generate_response_cash_flow_statement import GetV1ReportsGenerateResponseCashFlowStatement
from .get_v1reports_generate_response_income_statement import GetV1ReportsGenerateResponseIncomeStatement
from .get_v1reports_generate_response_pdf_urls import GetV1ReportsGenerateResponsePdfUrls
from .get_v1reports_generate_response_reconciliation import GetV1ReportsGenerateResponseReconciliation
from .get_v1reports_generate_response_report_period import GetV1ReportsGenerateResponseReportPeriod


class GetV1ReportsGenerateResponse(UniversalBaseModel):
    report_period: typing_extensions.Annotated[
        typing.Optional[GetV1ReportsGenerateResponseReportPeriod], FieldMetadata(alias="reportPeriod")
    ] = None
    balance_sheet: typing_extensions.Annotated[
        typing.Optional[GetV1ReportsGenerateResponseBalanceSheet], FieldMetadata(alias="balanceSheet")
    ] = None
    income_statement: typing_extensions.Annotated[
        typing.Optional[GetV1ReportsGenerateResponseIncomeStatement], FieldMetadata(alias="incomeStatement")
    ] = None
    cash_flow_statement: typing_extensions.Annotated[
        typing.Optional[GetV1ReportsGenerateResponseCashFlowStatement], FieldMetadata(alias="cashFlowStatement")
    ] = None
    reconciliation: typing.Optional[GetV1ReportsGenerateResponseReconciliation] = None
    account_hierarchy: typing_extensions.Annotated[
        typing.Optional[typing.List[typing.Optional[typing.Any]]], FieldMetadata(alias="accountHierarchy")
    ] = pydantic.Field(default=None)
    """
    Hierarchical structure of all accounts
    """

    pdf_urls: typing.Optional[GetV1ReportsGenerateResponsePdfUrls] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
