# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from .get_v1reports_general_ledger_response_accounts_item_balance import (
    GetV1ReportsGeneralLedgerResponseAccountsItemBalance,
)


class GetV1ReportsGeneralLedgerResponseAccountsItem(UniversalBaseModel):
    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    Account name
    """

    type: typing.Optional[str] = pydantic.Field(default=None)
    """
    Account type
    """

    financial_type: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="financialType")] = (
        pydantic.Field(default=None)
    )
    """
    Financial classification of the account
    """

    account_code: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="accountCode")] = (
        pydantic.Field(default=None)
    )
    """
    Account code
    """

    sub_type_code: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="subTypeCode")] = (
        pydantic.Field(default=None)
    )
    """
    Account subtype code
    """

    balance: typing.Optional[GetV1ReportsGeneralLedgerResponseAccountsItemBalance] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
