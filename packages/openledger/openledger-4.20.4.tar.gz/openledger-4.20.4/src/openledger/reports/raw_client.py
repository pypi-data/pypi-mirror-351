# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.datetime_utils import serialize_datetime
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..errors.bad_request_error import BadRequestError
from ..errors.internal_server_error import InternalServerError
from ..errors.not_found_error import NotFoundError
from .types.get_v1reports_general_ledger_response import GetV1ReportsGeneralLedgerResponse
from .types.get_v1reports_generate_request_type import GetV1ReportsGenerateRequestType
from .types.get_v1reports_generate_response import GetV1ReportsGenerateResponse
from .types.get_v1reports_overview_request_interval import GetV1ReportsOverviewRequestInterval
from .types.get_v1reports_overview_request_status_filter import GetV1ReportsOverviewRequestStatusFilter
from .types.get_v1reports_overview_response import GetV1ReportsOverviewResponse


class RawReportsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def generate_financial_reports(
        self,
        *,
        entity_id: str,
        month: typing.Optional[int] = None,
        year: typing.Optional[int] = None,
        type: typing.Optional[GetV1ReportsGenerateRequestType] = None,
        ledger_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[GetV1ReportsGenerateResponse]:
        """
        Generates comprehensive financial statements for an entity, including balance sheet, income statement, and cash flow statement

        Parameters
        ----------
        entity_id : str
            The ID of the entity to generate reports for

        month : typing.Optional[int]
            Month number (1-12) for the report period

        year : typing.Optional[int]
            Year for the report period (e.g., 2024)

        type : typing.Optional[GetV1ReportsGenerateRequestType]
            Type of report to generate

        ledger_id : typing.Optional[str]
            Optional ledger ID (if not provided, will use entityId)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[GetV1ReportsGenerateResponse]
            Reports generated successfully
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/reports/generate",
            method="GET",
            params={
                "entityId": entity_id,
                "month": month,
                "year": year,
                "type": type,
                "ledgerId": ledger_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetV1ReportsGenerateResponse,
                    parse_obj_as(
                        type_=GetV1ReportsGenerateResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_general_ledger_report(
        self,
        *,
        entity_id: str,
        month: typing.Optional[int] = None,
        year: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[GetV1ReportsGeneralLedgerResponse]:
        """
        Generates a detailed general ledger report with account balances and journal entries

        Parameters
        ----------
        entity_id : str
            The ID of the entity to generate the report for

        month : typing.Optional[int]
            Month number (1-12) for the report period

        year : typing.Optional[int]
            Year for the report period (e.g., 2024)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[GetV1ReportsGeneralLedgerResponse]
            General ledger report generated successfully
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/reports/general-ledger",
            method="GET",
            params={
                "entityId": entity_id,
                "month": month,
                "year": year,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetV1ReportsGeneralLedgerResponse,
                    parse_obj_as(
                        type_=GetV1ReportsGeneralLedgerResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_financial_overview(
        self,
        *,
        entity_id: str,
        start_date: typing.Optional[dt.datetime] = None,
        end_date: typing.Optional[dt.datetime] = None,
        interval: typing.Optional[GetV1ReportsOverviewRequestInterval] = None,
        status_filter: typing.Optional[GetV1ReportsOverviewRequestStatusFilter] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[GetV1ReportsOverviewResponse]:
        """
        Retrieves a high-level overview of financial data including balances, trends, and key metrics

        Parameters
        ----------
        entity_id : str
            The ID of the entity to get the overview for

        start_date : typing.Optional[dt.datetime]
            Start date for the report period

        end_date : typing.Optional[dt.datetime]
            End date for the report period (defaults to current date)

        interval : typing.Optional[GetV1ReportsOverviewRequestInterval]
            Time interval for aggregating data

        status_filter : typing.Optional[GetV1ReportsOverviewRequestStatusFilter]
            Filter transactions by their status

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[GetV1ReportsOverviewResponse]
            Financial overview retrieved successfully
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/reports/overview",
            method="GET",
            params={
                "entityId": entity_id,
                "startDate": serialize_datetime(start_date) if start_date is not None else None,
                "endDate": serialize_datetime(end_date) if end_date is not None else None,
                "interval": interval,
                "statusFilter": status_filter,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetV1ReportsOverviewResponse,
                    parse_obj_as(
                        type_=GetV1ReportsOverviewResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawReportsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def generate_financial_reports(
        self,
        *,
        entity_id: str,
        month: typing.Optional[int] = None,
        year: typing.Optional[int] = None,
        type: typing.Optional[GetV1ReportsGenerateRequestType] = None,
        ledger_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[GetV1ReportsGenerateResponse]:
        """
        Generates comprehensive financial statements for an entity, including balance sheet, income statement, and cash flow statement

        Parameters
        ----------
        entity_id : str
            The ID of the entity to generate reports for

        month : typing.Optional[int]
            Month number (1-12) for the report period

        year : typing.Optional[int]
            Year for the report period (e.g., 2024)

        type : typing.Optional[GetV1ReportsGenerateRequestType]
            Type of report to generate

        ledger_id : typing.Optional[str]
            Optional ledger ID (if not provided, will use entityId)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[GetV1ReportsGenerateResponse]
            Reports generated successfully
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/reports/generate",
            method="GET",
            params={
                "entityId": entity_id,
                "month": month,
                "year": year,
                "type": type,
                "ledgerId": ledger_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetV1ReportsGenerateResponse,
                    parse_obj_as(
                        type_=GetV1ReportsGenerateResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_general_ledger_report(
        self,
        *,
        entity_id: str,
        month: typing.Optional[int] = None,
        year: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[GetV1ReportsGeneralLedgerResponse]:
        """
        Generates a detailed general ledger report with account balances and journal entries

        Parameters
        ----------
        entity_id : str
            The ID of the entity to generate the report for

        month : typing.Optional[int]
            Month number (1-12) for the report period

        year : typing.Optional[int]
            Year for the report period (e.g., 2024)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[GetV1ReportsGeneralLedgerResponse]
            General ledger report generated successfully
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/reports/general-ledger",
            method="GET",
            params={
                "entityId": entity_id,
                "month": month,
                "year": year,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetV1ReportsGeneralLedgerResponse,
                    parse_obj_as(
                        type_=GetV1ReportsGeneralLedgerResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_financial_overview(
        self,
        *,
        entity_id: str,
        start_date: typing.Optional[dt.datetime] = None,
        end_date: typing.Optional[dt.datetime] = None,
        interval: typing.Optional[GetV1ReportsOverviewRequestInterval] = None,
        status_filter: typing.Optional[GetV1ReportsOverviewRequestStatusFilter] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[GetV1ReportsOverviewResponse]:
        """
        Retrieves a high-level overview of financial data including balances, trends, and key metrics

        Parameters
        ----------
        entity_id : str
            The ID of the entity to get the overview for

        start_date : typing.Optional[dt.datetime]
            Start date for the report period

        end_date : typing.Optional[dt.datetime]
            End date for the report period (defaults to current date)

        interval : typing.Optional[GetV1ReportsOverviewRequestInterval]
            Time interval for aggregating data

        status_filter : typing.Optional[GetV1ReportsOverviewRequestStatusFilter]
            Filter transactions by their status

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[GetV1ReportsOverviewResponse]
            Financial overview retrieved successfully
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/reports/overview",
            method="GET",
            params={
                "entityId": entity_id,
                "startDate": serialize_datetime(start_date) if start_date is not None else None,
                "endDate": serialize_datetime(end_date) if end_date is not None else None,
                "interval": interval,
                "statusFilter": status_filter,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetV1ReportsOverviewResponse,
                    parse_obj_as(
                        type_=GetV1ReportsOverviewResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
