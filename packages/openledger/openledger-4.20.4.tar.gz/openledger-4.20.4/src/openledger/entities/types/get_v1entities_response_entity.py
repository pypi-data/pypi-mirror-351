# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from .get_v1entities_response_entity_address import GetV1EntitiesResponseEntityAddress
from .get_v1entities_response_entity_plaid_accounts_item import GetV1EntitiesResponseEntityPlaidAccountsItem


class GetV1EntitiesResponseEntity(UniversalBaseModel):
    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Unique identifier for the entity
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    Legal name of the entity
    """

    external_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="externalId")] = pydantic.Field(
        default=None
    )
    """
    External identifier for the entity
    """

    entity_type: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="entityType")] = pydantic.Field(
        default=None
    )
    """
    Type of entity (e.g., LLC)
    """

    address: typing.Optional[GetV1EntitiesResponseEntityAddress] = pydantic.Field(default=None)
    """
    Entity's address information
    """

    settings: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Entity's settings
    """

    plaid_accounts: typing_extensions.Annotated[
        typing.Optional[typing.List[GetV1EntitiesResponseEntityPlaidAccountsItem]], FieldMetadata(alias="plaidAccounts")
    ] = pydantic.Field(default=None)
    """
    List of connected Plaid accounts
    """

    created_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="createdAt")] = (
        pydantic.Field(default=None)
    )
    """
    When the entity was created
    """

    developer_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="developerId")] = (
        pydantic.Field(default=None)
    )
    """
    ID of the developer who created the entity
    """

    instance_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="instanceId")] = pydantic.Field(
        default=None
    )
    """
    ID of the instance this entity belongs to
    """

    status: typing.Optional[str] = pydantic.Field(default=None)
    """
    Current status of the entity
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
