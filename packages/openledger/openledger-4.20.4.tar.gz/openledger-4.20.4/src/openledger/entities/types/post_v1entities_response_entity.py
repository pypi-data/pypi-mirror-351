# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata


class PostV1EntitiesResponseEntity(UniversalBaseModel):
    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Unique identifier for the created entity
    """

    external_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="externalId")] = pydantic.Field(
        default=None
    )
    """
    External identifier for the entity
    """

    legal_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="legalName")] = pydantic.Field(
        default=None
    )
    """
    Legal name of the entity
    """

    tin: typing.Optional[str] = pydantic.Field(default=None)
    """
    Tax Identification Number
    """

    us_state: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="usState")] = pydantic.Field(
        default=None
    )
    """
    US state code
    """

    entity_type: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="entityType")] = pydantic.Field(
        default=None
    )
    """
    Type of entity
    """

    phone_number: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="phoneNumber")] = (
        pydantic.Field(default=None)
    )
    """
    Contact phone number
    """

    developer_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="developerId")] = (
        pydantic.Field(default=None)
    )
    """
    ID of the developer who created the entity
    """

    clerk_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="clerkId")] = pydantic.Field(
        default=None
    )
    """
    Clerk ID if provided
    """

    date_created: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="dateCreated")] = (
        pydantic.Field(default=None)
    )
    """
    When the entity was created
    """

    google_auth_token: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="googleAuthToken")] = (
        pydantic.Field(default=None)
    )
    """
    Google authentication token if available
    """

    admin_user_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="adminUserId")] = (
        pydantic.Field(default=None)
    )
    """
    Admin user ID if assigned
    """

    address_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="addressId")] = pydantic.Field(
        default=None
    )
    """
    Address ID if available
    """

    phone: typing.Optional[str] = pydantic.Field(default=None)
    """
    Alternative phone number
    """

    website: typing.Optional[str] = pydantic.Field(default=None)
    """
    Entity's website URL
    """

    logo_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="logoUrl")] = pydantic.Field(
        default=None
    )
    """
    URL to entity's logo
    """

    status: typing.Optional[str] = pydantic.Field(default=None)
    """
    Current status of the entity
    """

    subscription_plan: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="subscriptionPlan")] = (
        pydantic.Field(default=None)
    )
    """
    Subscription plan details
    """

    billing_information: typing_extensions.Annotated[
        typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]], FieldMetadata(alias="billingInformation")
    ] = pydantic.Field(default=None)
    """
    Billing information
    """

    settings_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="settingsId")] = pydantic.Field(
        default=None
    )
    """
    Settings ID if available
    """

    instance_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="instanceId")] = pydantic.Field(
        default=None
    )
    """
    ID of the instance this entity belongs to
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
