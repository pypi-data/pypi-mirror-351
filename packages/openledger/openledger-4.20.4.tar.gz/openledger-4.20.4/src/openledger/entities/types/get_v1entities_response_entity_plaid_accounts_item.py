# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata


class GetV1EntitiesResponseEntityPlaidAccountsItem(UniversalBaseModel):
    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Unique identifier for the Plaid account
    """

    plaid_access_token: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="plaidAccessToken")] = (
        pydantic.Field(default=None)
    )
    """
    Plaid access token for the account
    """

    plaid_item_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="plaidItemId")] = (
        pydantic.Field(default=None)
    )
    """
    Plaid item ID
    """

    plaid_institution_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="plaidInstitutionId")
    ] = pydantic.Field(default=None)
    """
    Plaid institution ID
    """

    plaid_account_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="plaidAccountId")] = (
        pydantic.Field(default=None)
    )
    """
    Plaid account ID
    """

    account_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="accountName")] = (
        pydantic.Field(default=None)
    )
    """
    Name of the bank account
    """

    account_type: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="accountType")] = (
        pydantic.Field(default=None)
    )
    """
    Type of the bank account
    """

    account_subtype: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="accountSubtype")] = (
        pydantic.Field(default=None)
    )
    """
    Subtype of the bank account
    """

    account_mask: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="accountMask")] = (
        pydantic.Field(default=None)
    )
    """
    Last 4 digits of the account number
    """

    linked_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="linkedAt")] = (
        pydantic.Field(default=None)
    )
    """
    When the account was linked
    """

    status: typing.Optional[str] = pydantic.Field(default=None)
    """
    Status of the account
    """

    entity_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="entityId")] = pydantic.Field(
        default=None
    )
    """
    ID of the entity this account belongs to
    """

    cursor: typing.Optional[str] = pydantic.Field(default=None)
    """
    Plaid cursor for syncing
    """

    needs_initial_sync: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="needsInitialSync")] = (
        pydantic.Field(default=None)
    )
    """
    Whether the account needs initial sync
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
