/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/mlflow/mlflow-go-backend/pkg/lib */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */







#line 3 "tracking.go"
 #include <stdlib.h>

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern GoInt64 CreateArtifactsService(void* configData, int configSize);
extern void DestroyArtifactsService(GoInt64 id);
extern void* ModelRegistryServiceCreateRegisteredModel(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* ModelRegistryServiceRenameRegisteredModel(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* ModelRegistryServiceUpdateRegisteredModel(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* ModelRegistryServiceDeleteRegisteredModel(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* ModelRegistryServiceGetRegisteredModel(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* ModelRegistryServiceGetLatestVersions(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* ModelRegistryServiceUpdateModelVersion(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* ModelRegistryServiceTransitionModelVersionStage(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* ModelRegistryServiceDeleteModelVersion(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* ModelRegistryServiceGetModelVersion(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* ModelRegistryServiceGetModelVersionDownloadUri(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* ModelRegistryServiceSetRegisteredModelTag(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* ModelRegistryServiceSetModelVersionTag(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* ModelRegistryServiceDeleteRegisteredModelTag(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* ModelRegistryServiceDeleteModelVersionTag(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* ModelRegistryServiceSetRegisteredModelAlias(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* ModelRegistryServiceDeleteRegisteredModelAlias(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* ModelRegistryServiceGetModelVersionByAlias(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern GoInt64 CreateModelRegistryService(void* configData, int configSize);
extern void DestroyModelRegistryService(GoInt64 id);
extern GoInt64 LaunchServer(void* configData, int configSize);
extern GoInt64 LaunchServerAsync(void* configData, int configSize);
extern GoInt64 StopServer(GoInt64 serverID);
extern void* TrackingServiceGetExperimentByName(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* TrackingServiceCreateExperiment(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* TrackingServiceSearchExperiments(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* TrackingServiceGetExperiment(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* TrackingServiceDeleteExperiment(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* TrackingServiceRestoreExperiment(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* TrackingServiceUpdateExperiment(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* TrackingServiceCreateRun(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* TrackingServiceUpdateRun(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* TrackingServiceDeleteRun(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* TrackingServiceRestoreRun(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* TrackingServiceLogMetric(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* TrackingServiceLogParam(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* TrackingServiceSetExperimentTag(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* TrackingServiceSetTag(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* TrackingServiceSetTraceTag(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* TrackingServiceDeleteTraceTag(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* TrackingServiceDeleteTag(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* TrackingServiceGetRun(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* TrackingServiceSearchRuns(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* TrackingServiceGetMetricHistory(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* TrackingServiceLogBatch(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* TrackingServiceLogInputs(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* TrackingServiceStartTrace(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* TrackingServiceEndTrace(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* TrackingServiceGetTraceInfo(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern void* TrackingServiceDeleteTraces(GoInt64 serviceID, void* requestData, int requestSize, int* responseSize);
extern GoInt64 CreateTrackingService(void* configData, int configSize);
extern void DestroyTrackingService(GoInt64 id);
extern void FreeResponse(GoInt64* pointer);

#ifdef __cplusplus
}
#endif
