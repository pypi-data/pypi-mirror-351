# coding: utf-8

"""
    FINBOURNE Candela Platform Web API

    FINBOURNE Technology  # noqa: E501

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, Optional
from pydantic.v1 import BaseModel, Field, StrictStr, ValidationError, validator
from finbourne_candela.models.i_arr import IArr
from finbourne_candela.models.i_bool import IBool
from finbourne_candela.models.i_dict import IDict
from finbourne_candela.models.i_enum import IEnum
from finbourne_candela.models.i_int import IInt
from finbourne_candela.models.i_obj import IObj
from finbourne_candela.models.i_real import IReal
from finbourne_candela.models.i_str import IStr
from typing import Union, Any, List, TYPE_CHECKING
from pydantic.v1 import StrictStr, Field

FIELDS_ANY_OF_SCHEMAS = ["IArr", "IBool", "IDict", "IEnum", "IInt", "IObj", "IReal", "IStr", "object"]

class Fields(BaseModel):
    """
    Fields
    """

    # data type: IDict
    anyof_schema_1_validator: Optional[IDict] = None
    # data type: IArr
    anyof_schema_2_validator: Optional[IArr] = None
    # data type: IObj
    anyof_schema_3_validator: Optional[IObj] = None
    # data type: IEnum
    anyof_schema_4_validator: Optional[IEnum] = None
    # data type: IStr
    anyof_schema_5_validator: Optional[IStr] = None
    # data type: IBool
    anyof_schema_6_validator: Optional[IBool] = None
    # data type: IReal
    anyof_schema_7_validator: Optional[IReal] = None
    # data type: IInt
    anyof_schema_8_validator: Optional[IInt] = None
    # data type: object
    anyof_schema_9_validator: Optional[Any] = None
    if TYPE_CHECKING:
        actual_instance: Union[IArr, IBool, IDict, IEnum, IInt, IObj, IReal, IStr, object]
    else:
        actual_instance: Any
    any_of_schemas: List[str] = Field(FIELDS_ANY_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = Fields.construct()
        error_messages = []
        # validate data type: IDict
        if not isinstance(v, IDict):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IDict`")
        else:
            return v

        # validate data type: IArr
        if not isinstance(v, IArr):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IArr`")
        else:
            return v

        # validate data type: IObj
        if not isinstance(v, IObj):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IObj`")
        else:
            return v

        # validate data type: IEnum
        if not isinstance(v, IEnum):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IEnum`")
        else:
            return v

        # validate data type: IStr
        if not isinstance(v, IStr):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IStr`")
        else:
            return v

        # validate data type: IBool
        if not isinstance(v, IBool):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IBool`")
        else:
            return v

        # validate data type: IReal
        if not isinstance(v, IReal):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IReal`")
        else:
            return v

        # validate data type: IInt
        if not isinstance(v, IInt):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IInt`")
        else:
            return v

        # validate data type: object
        try:
            instance.anyof_schema_9_validator = v
            return v
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in Fields with anyOf schemas: IArr, IBool, IDict, IEnum, IInt, IObj, IReal, IStr, object. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Fields:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Fields:
        """Returns the object represented by the json string"""
        instance = Fields.construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[IDict] = None
        try:
            instance.actual_instance = IDict.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[IArr] = None
        try:
            instance.actual_instance = IArr.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[IObj] = None
        try:
            instance.actual_instance = IObj.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[IEnum] = None
        try:
            instance.actual_instance = IEnum.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[IStr] = None
        try:
            instance.actual_instance = IStr.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_6_validator: Optional[IBool] = None
        try:
            instance.actual_instance = IBool.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_7_validator: Optional[IReal] = None
        try:
            instance.actual_instance = IReal.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_8_validator: Optional[IInt] = None
        try:
            instance.actual_instance = IInt.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # deserialize data into object
        try:
            # validation
            instance.anyof_schema_9_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.anyof_schema_9_validator
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into Fields with anyOf schemas: IArr, IBool, IDict, IEnum, IInt, IObj, IReal, IStr, object. Details: " + ", ".join(error_messages))
        else:
            return instance

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_dict()
        else:
            return json.dumps(self.actual_instance)
