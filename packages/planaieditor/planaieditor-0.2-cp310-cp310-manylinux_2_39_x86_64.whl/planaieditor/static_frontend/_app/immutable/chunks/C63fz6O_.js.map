{"version":3,"file":"C63fz6O_.js","sources":["../../../../../../node_modules/@codingame/monaco-vscode-api/vscode/src/vs/workbench/services/language/common/languageService.js"],"sourcesContent":["\nimport { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';\nimport { localize } from '../../../../nls.js';\nimport { clearConfiguredLanguageAssociations, registerConfiguredLanguageAssociation } from '../../../../editor/common/services/languagesAssociations.js';\nimport { joinPath } from '../../../../base/common/resources.js';\nimport '../../../../platform/instantiation/common/instantiation.js';\nimport { LanguageService } from '../../../../editor/common/services/languageService.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.service.js';\nimport { IEnvironmentService } from '../../../../platform/environment/common/environment.service.js';\nimport { FILES_ASSOCIATIONS_CONFIG } from '../../../../platform/files/common/files.js';\nimport { IExtensionService } from '../../extensions/common/extensions.service.js';\nimport { ExtensionsRegistry } from '../../extensions/common/extensionsRegistry.js';\nimport '../../../../platform/instantiation/common/extensions.js';\nimport { ILogService } from '../../../../platform/log/common/log.service.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { Extensions } from '../../extensionManagement/common/extensionFeatures.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { SyncDescriptor } from '../../../../platform/instantiation/common/descriptors.js';\nimport { index } from '../../../../base/common/arrays.js';\nimport { MarkdownString } from '../../../../base/common/htmlContent.js';\nimport { isString } from '../../../../base/common/types.js';\n\nconst languagesExtPoint = ExtensionsRegistry.registerExtensionPoint({\n    extensionPoint: 'languages',\n    jsonSchema: {\n        description: ( localize(12320, 'Contributes language declarations.')),\n        type: 'array',\n        items: {\n            type: 'object',\n            defaultSnippets: [{ body: { id: '${1:languageId}', aliases: ['${2:label}'], extensions: ['${3:extension}'], configuration: './language-configuration.json' } }],\n            properties: {\n                id: {\n                    description: ( localize(12321, 'ID of the language.')),\n                    type: 'string'\n                },\n                aliases: {\n                    description: ( localize(12322, 'Name aliases for the language.')),\n                    type: 'array',\n                    items: {\n                        type: 'string'\n                    }\n                },\n                extensions: {\n                    description: ( localize(12323, 'File extensions associated to the language.')),\n                    default: ['.foo'],\n                    type: 'array',\n                    items: {\n                        type: 'string'\n                    }\n                },\n                filenames: {\n                    description: ( localize(12324, 'File names associated to the language.')),\n                    type: 'array',\n                    items: {\n                        type: 'string'\n                    }\n                },\n                filenamePatterns: {\n                    description: ( localize(12325, 'File name glob patterns associated to the language.')),\n                    type: 'array',\n                    items: {\n                        type: 'string'\n                    }\n                },\n                mimetypes: {\n                    description: ( localize(12326, 'Mime types associated to the language.')),\n                    type: 'array',\n                    items: {\n                        type: 'string'\n                    }\n                },\n                firstLine: {\n                    description: ( localize(\n                        12327,\n                        'A regular expression matching the first line of a file of the language.'\n                    )),\n                    type: 'string'\n                },\n                configuration: {\n                    description: ( localize(\n                        12328,\n                        'A relative path to a file containing configuration options for the language.'\n                    )),\n                    type: 'string',\n                    default: './language-configuration.json'\n                },\n                icon: {\n                    type: 'object',\n                    description: ( localize(\n                        12329,\n                        'A icon to use as file icon, if no icon theme provides one for the language.'\n                    )),\n                    properties: {\n                        light: {\n                            description: ( localize(12330, 'Icon path when a light theme is used')),\n                            type: 'string'\n                        },\n                        dark: {\n                            description: ( localize(12331, 'Icon path when a dark theme is used')),\n                            type: 'string'\n                        }\n                    }\n                }\n            }\n        }\n    },\n    activationEventsGenerator: (languageContributions, result) => {\n        for (const languageContribution of languageContributions) {\n            if (languageContribution.id && languageContribution.configuration) {\n                result.push(`onLanguage:${languageContribution.id}`);\n            }\n        }\n    }\n});\nclass LanguageTableRenderer extends Disposable {\n    constructor() {\n        super(...arguments);\n        this.type = 'table';\n    }\n    shouldRender(manifest) {\n        return !!manifest.contributes?.languages;\n    }\n    render(manifest) {\n        const contributes = manifest.contributes;\n        const rawLanguages = contributes?.languages || [];\n        const languages = [];\n        for (const l of rawLanguages) {\n            if (isValidLanguageExtensionPoint(l)) {\n                languages.push({\n                    id: l.id,\n                    name: (l.aliases || [])[0] || l.id,\n                    extensions: l.extensions || [],\n                    hasGrammar: false,\n                    hasSnippets: false\n                });\n            }\n        }\n        const byId = index(languages, l => l.id);\n        const grammars = contributes?.grammars || [];\n        grammars.forEach(grammar => {\n            if (!isString(grammar.language)) {\n                return;\n            }\n            let language = byId[grammar.language];\n            if (language) {\n                language.hasGrammar = true;\n            }\n            else {\n                language = { id: grammar.language, name: grammar.language, extensions: [], hasGrammar: true, hasSnippets: false };\n                byId[language.id] = language;\n                languages.push(language);\n            }\n        });\n        const snippets = contributes?.snippets || [];\n        snippets.forEach(snippet => {\n            if (!isString(snippet.language)) {\n                return;\n            }\n            let language = byId[snippet.language];\n            if (language) {\n                language.hasSnippets = true;\n            }\n            else {\n                language = { id: snippet.language, name: snippet.language, extensions: [], hasGrammar: false, hasSnippets: true };\n                byId[language.id] = language;\n                languages.push(language);\n            }\n        });\n        if (!languages.length) {\n            return { data: { headers: [], rows: [] }, dispose: () => { } };\n        }\n        const headers = [\n            ( localize(12332, \"ID\")),\n            ( localize(12333, \"Name\")),\n            ( localize(12334, \"File Extensions\")),\n            ( localize(12335, \"Grammar\")),\n            ( localize(12336, \"Snippets\"))\n        ];\n        const rows = ( languages.sort((a, b) => a.id.localeCompare(b.id))\n            .map(l => {\n            return [\n                l.id, l.name,\n                ( new MarkdownString()).appendMarkdown(`${( l.extensions.map(e => `\\`${e}\\``)).join('&nbsp;')}`),\n                l.hasGrammar ? '✔︎' : '\\u2014',\n                l.hasSnippets ? '✔︎' : '\\u2014'\n            ];\n        }));\n        return {\n            data: {\n                headers,\n                rows\n            },\n            dispose: () => { }\n        };\n    }\n}\n( Registry.as(Extensions.ExtensionFeaturesRegistry)).registerExtensionFeature({\n    id: 'languages',\n    label: ( localize(12337, \"Programming Languages\")),\n    access: {\n        canToggle: false\n    },\n    renderer: ( new SyncDescriptor(LanguageTableRenderer)),\n});\nlet WorkbenchLanguageService = class WorkbenchLanguageService extends LanguageService {\n    constructor(extensionService, configurationService, environmentService, logService) {\n        super(environmentService.verbose || environmentService.isExtensionDevelopment || !environmentService.isBuilt);\n        this.logService = logService;\n        this._configurationService = configurationService;\n        this._extensionService = extensionService;\n        languagesExtPoint.setHandler((extensions) => {\n            const allValidLanguages = [];\n            for (let i = 0, len = extensions.length; i < len; i++) {\n                const extension = extensions[i];\n                if (!Array.isArray(extension.value)) {\n                    extension.collector.error(( localize(\n                        12338,\n                        \"Invalid `contributes.{0}`. Expected an array.\",\n                        languagesExtPoint.name\n                    )));\n                    continue;\n                }\n                for (let j = 0, lenJ = extension.value.length; j < lenJ; j++) {\n                    const ext = extension.value[j];\n                    if (isValidLanguageExtensionPoint(ext, extension.collector)) {\n                        let configuration = undefined;\n                        if (ext.configuration) {\n                            configuration = joinPath(extension.description.extensionLocation, ext.configuration);\n                        }\n                        allValidLanguages.push({\n                            id: ext.id,\n                            extensions: ext.extensions,\n                            filenames: ext.filenames,\n                            filenamePatterns: ext.filenamePatterns,\n                            firstLine: ext.firstLine,\n                            aliases: ext.aliases,\n                            mimetypes: ext.mimetypes,\n                            configuration: configuration,\n                            icon: ext.icon && {\n                                light: joinPath(extension.description.extensionLocation, ext.icon.light),\n                                dark: joinPath(extension.description.extensionLocation, ext.icon.dark)\n                            }\n                        });\n                    }\n                }\n            }\n            this._registry.setDynamicLanguages(allValidLanguages);\n        });\n        this.updateMime();\n        this._register(this._configurationService.onDidChangeConfiguration(e => {\n            if (e.affectsConfiguration(FILES_ASSOCIATIONS_CONFIG)) {\n                this.updateMime();\n            }\n        }));\n        this._extensionService.whenInstalledExtensionsRegistered().then(() => {\n            this.updateMime();\n        });\n        this._register(this.onDidRequestRichLanguageFeatures((languageId) => {\n            this._extensionService.activateByEvent(`onLanguage:${languageId}`);\n            this._extensionService.activateByEvent(`onLanguage`);\n        }));\n    }\n    updateMime() {\n        const configuration = this._configurationService.getValue();\n        clearConfiguredLanguageAssociations();\n        if (configuration.files?.associations) {\n            ( Object.keys(configuration.files.associations)).forEach(pattern => {\n                const langId = configuration.files.associations[pattern];\n                if (typeof langId !== 'string') {\n                    this.logService.warn(`Ignoring configured 'files.associations' for '${pattern}' because its type is not a string but '${typeof langId}'`);\n                    return;\n                }\n                const mimeType = this.getMimeType(langId) || `text/x-${langId}`;\n                registerConfiguredLanguageAssociation({ id: langId, mime: mimeType, filepattern: pattern });\n            });\n        }\n        this._onDidChange.fire();\n    }\n};\nWorkbenchLanguageService = ( __decorate([\n    ( __param(0, IExtensionService)),\n    ( __param(1, IConfigurationService)),\n    ( __param(2, IEnvironmentService)),\n    ( __param(3, ILogService))\n], WorkbenchLanguageService));\nfunction isUndefinedOrStringArray(value) {\n    if (typeof value === 'undefined') {\n        return true;\n    }\n    if (!Array.isArray(value)) {\n        return false;\n    }\n    return value.every(item => typeof item === 'string');\n}\nfunction isValidLanguageExtensionPoint(value, collector) {\n    if (!value) {\n        collector?.error(( localize(12339, \"Empty value for `contributes.{0}`\", languagesExtPoint.name)));\n        return false;\n    }\n    if (typeof value.id !== 'string') {\n        collector?.error(( localize(12340, \"property `{0}` is mandatory and must be of type `string`\", 'id')));\n        return false;\n    }\n    if (!isUndefinedOrStringArray(value.extensions)) {\n        collector?.error(( localize(\n            12341,\n            \"property `{0}` can be omitted and must be of type `string[]`\",\n            'extensions'\n        )));\n        return false;\n    }\n    if (!isUndefinedOrStringArray(value.filenames)) {\n        collector?.error(( localize(\n            12342,\n            \"property `{0}` can be omitted and must be of type `string[]`\",\n            'filenames'\n        )));\n        return false;\n    }\n    if (typeof value.firstLine !== 'undefined' && typeof value.firstLine !== 'string') {\n        collector?.error(( localize(\n            12343,\n            \"property `{0}` can be omitted and must be of type `string`\",\n            'firstLine'\n        )));\n        return false;\n    }\n    if (typeof value.configuration !== 'undefined' && typeof value.configuration !== 'string') {\n        collector?.error(( localize(\n            12344,\n            \"property `{0}` can be omitted and must be of type `string`\",\n            'configuration'\n        )));\n        return false;\n    }\n    if (!isUndefinedOrStringArray(value.aliases)) {\n        collector?.error(( localize(\n            12345,\n            \"property `{0}` can be omitted and must be of type `string[]`\",\n            'aliases'\n        )));\n        return false;\n    }\n    if (!isUndefinedOrStringArray(value.mimetypes)) {\n        collector?.error(( localize(\n            12346,\n            \"property `{0}` can be omitted and must be of type `string[]`\",\n            'mimetypes'\n        )));\n        return false;\n    }\n    if (typeof value.icon !== 'undefined') {\n        if (typeof value.icon !== 'object' || typeof value.icon.light !== 'string' || typeof value.icon.dark !== 'string') {\n            collector?.error(( localize(\n                12347,\n                \"property `{0}` can be omitted and must be of type `object` with properties `{1}` and `{2}` of type `string`\",\n                'icon',\n                'light',\n                'dark'\n            )));\n            return false;\n        }\n    }\n    return true;\n}\n\nexport { WorkbenchLanguageService, languagesExtPoint };\n"],"names":["languagesExtPoint","ExtensionsRegistry","localize","languageContributions","result","languageContribution","LanguageTableRenderer","Disposable","manifest","_a","contributes","rawLanguages","languages","l","isValidLanguageExtensionPoint","byId","index","grammar","isString","language","snippet","headers","rows","a","b","MarkdownString","e","Registry","Extensions","SyncDescriptor","WorkbenchLanguageService","LanguageService","extensionService","configurationService","environmentService","logService","extensions","allValidLanguages","i","len","extension","j","lenJ","ext","configuration","joinPath","FILES_ASSOCIATIONS_CONFIG","languageId","clearConfiguredLanguageAssociations","pattern","langId","mimeType","registerConfiguredLanguageAssociation","__decorate","__param","IExtensionService","IConfigurationService","IEnvironmentService","ILogService","isUndefinedOrStringArray","value","item","collector"],"mappings":"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","x_google_ignoreList":[0]}