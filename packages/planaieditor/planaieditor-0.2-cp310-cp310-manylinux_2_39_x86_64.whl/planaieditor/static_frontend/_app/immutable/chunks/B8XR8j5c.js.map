{"version":3,"file":"B8XR8j5c.js","sources":["../../../../../../node_modules/@codingame/monaco-vscode-7ba0af96-90c2-5e11-ad7f-befdbbf246c8-common/vscode/src/vs/workbench/services/themes/common/workbenchThemeService.service.js","../../../../../../node_modules/@codingame/monaco-vscode-7ba0af96-90c2-5e11-ad7f-befdbbf246c8-common/vscode/src/vs/platform/theme/common/tokenClassificationRegistry.js"],"sourcesContent":["\nimport { refineServiceDecorator } from '@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation';\nimport { IThemeService } from '@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/themeService.service';\n\nconst IWorkbenchThemeService = refineServiceDecorator(IThemeService);\n\nexport { IWorkbenchThemeService };\n","\nimport { RunOnceScheduler } from '@codingame/monaco-vscode-api/vscode/vs/base/common/async';\nimport { Color } from '@codingame/monaco-vscode-api/vscode/vs/base/common/color';\nimport { Emitter } from '@codingame/monaco-vscode-api/vscode/vs/base/common/event';\nimport { localize } from '@codingame/monaco-vscode-api/vscode/vs/nls';\nimport { Extensions as Extensions$1 } from '@codingame/monaco-vscode-api/vscode/vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport { Registry } from '@codingame/monaco-vscode-api/vscode/vs/platform/registry/common/platform';\n\nconst TOKEN_TYPE_WILDCARD = '*';\nconst TOKEN_CLASSIFIER_LANGUAGE_SEPARATOR = ':';\nconst CLASSIFIER_MODIFIER_SEPARATOR = '.';\nconst idPattern = '\\\\w+[-_\\\\w+]*';\nconst typeAndModifierIdPattern = `^${idPattern}$`;\nconst selectorPattern = `^(${idPattern}|\\\\*)(\\\\${CLASSIFIER_MODIFIER_SEPARATOR}${idPattern})*(${TOKEN_CLASSIFIER_LANGUAGE_SEPARATOR}${idPattern})?$`;\nconst fontStylePattern = '^(\\\\s*(italic|bold|underline|strikethrough))*\\\\s*$';\nclass TokenStyle {\n    constructor(foreground, bold, underline, strikethrough, italic) {\n        this.foreground = foreground;\n        this.bold = bold;\n        this.underline = underline;\n        this.strikethrough = strikethrough;\n        this.italic = italic;\n    }\n}\n(function (TokenStyle) {\n    function toJSONObject(style) {\n        return {\n            _foreground: style.foreground === undefined ? null : Color.Format.CSS.formatHexA(style.foreground, true),\n            _bold: style.bold === undefined ? null : style.bold,\n            _underline: style.underline === undefined ? null : style.underline,\n            _italic: style.italic === undefined ? null : style.italic,\n            _strikethrough: style.strikethrough === undefined ? null : style.strikethrough,\n        };\n    }\n    TokenStyle.toJSONObject = toJSONObject;\n    function fromJSONObject(obj) {\n        if (obj) {\n            const boolOrUndef = (b) => (typeof b === 'boolean') ? b : undefined;\n            const colorOrUndef = (s) => (typeof s === 'string') ? ( Color.fromHex(s)) : undefined;\n            return ( new TokenStyle(\n                colorOrUndef(obj._foreground),\n                boolOrUndef(obj._bold),\n                boolOrUndef(obj._underline),\n                boolOrUndef(obj._strikethrough),\n                boolOrUndef(obj._italic)\n            ));\n        }\n        return undefined;\n    }\n    TokenStyle.fromJSONObject = fromJSONObject;\n    function equals(s1, s2) {\n        if (s1 === s2) {\n            return true;\n        }\n        return s1 !== undefined && s2 !== undefined\n            && (s1.foreground instanceof Color ? s1.foreground.equals(s2.foreground) : s2.foreground === undefined)\n            && s1.bold === s2.bold\n            && s1.underline === s2.underline\n            && s1.strikethrough === s2.strikethrough\n            && s1.italic === s2.italic;\n    }\n    TokenStyle.equals = equals;\n    function is(s) {\n        return s instanceof TokenStyle;\n    }\n    TokenStyle.is = is;\n    function fromData(data) {\n        return ( new TokenStyle(\n            data.foreground,\n            data.bold,\n            data.underline,\n            data.strikethrough,\n            data.italic\n        ));\n    }\n    TokenStyle.fromData = fromData;\n    function fromSettings(foreground, fontStyle, bold, underline, strikethrough, italic) {\n        let foregroundColor = undefined;\n        if (foreground !== undefined) {\n            foregroundColor = ( Color.fromHex(foreground));\n        }\n        if (fontStyle !== undefined) {\n            bold = italic = underline = strikethrough = false;\n            const expression = /italic|bold|underline|strikethrough/g;\n            let match;\n            while ((match = expression.exec(fontStyle))) {\n                switch (match[0]) {\n                    case 'bold':\n                        bold = true;\n                        break;\n                    case 'italic':\n                        italic = true;\n                        break;\n                    case 'underline':\n                        underline = true;\n                        break;\n                    case 'strikethrough':\n                        strikethrough = true;\n                        break;\n                }\n            }\n        }\n        return ( new TokenStyle(foregroundColor, bold, underline, strikethrough, italic));\n    }\n    TokenStyle.fromSettings = fromSettings;\n})(TokenStyle || (TokenStyle = {}));\nvar SemanticTokenRule;\n(function (SemanticTokenRule) {\n    function fromJSONObject(registry, o) {\n        if (o && typeof o._selector === 'string' && o._style) {\n            const style = TokenStyle.fromJSONObject(o._style);\n            if (style) {\n                try {\n                    return { selector: registry.parseTokenSelector(o._selector), style };\n                }\n                catch (_ignore) {\n                }\n            }\n        }\n        return undefined;\n    }\n    SemanticTokenRule.fromJSONObject = fromJSONObject;\n    function toJSONObject(rule) {\n        return {\n            _selector: rule.selector.id,\n            _style: TokenStyle.toJSONObject(rule.style)\n        };\n    }\n    SemanticTokenRule.toJSONObject = toJSONObject;\n    function equals(r1, r2) {\n        if (r1 === r2) {\n            return true;\n        }\n        return r1 !== undefined && r2 !== undefined\n            && r1.selector && r2.selector && r1.selector.id === r2.selector.id\n            && TokenStyle.equals(r1.style, r2.style);\n    }\n    SemanticTokenRule.equals = equals;\n    function is(r) {\n        return r && r.selector && typeof r.selector.id === 'string' && TokenStyle.is(r.style);\n    }\n    SemanticTokenRule.is = is;\n})(SemanticTokenRule || (SemanticTokenRule = {}));\nconst Extensions = {\n    TokenClassificationContribution: 'base.contributions.tokenClassification'\n};\nclass TokenClassificationRegistry {\n    constructor() {\n        this._onDidChangeSchema = ( new Emitter());\n        this.onDidChangeSchema = this._onDidChangeSchema.event;\n        this.currentTypeNumber = 0;\n        this.currentModifierBit = 1;\n        this.tokenStylingDefaultRules = [];\n        this.tokenStylingSchema = {\n            type: 'object',\n            properties: {},\n            patternProperties: {\n                [selectorPattern]: getStylingSchemeEntry()\n            },\n            additionalProperties: false,\n            definitions: {\n                style: {\n                    type: 'object',\n                    description: ( localize(2274, 'Colors and styles for the token.')),\n                    properties: {\n                        foreground: {\n                            type: 'string',\n                            description: ( localize(2275, 'Foreground color for the token.')),\n                            format: 'color-hex',\n                            default: '#ff0000'\n                        },\n                        background: {\n                            type: 'string',\n                            deprecationMessage: ( localize(2276, 'Token background colors are currently not supported.'))\n                        },\n                        fontStyle: {\n                            type: 'string',\n                            description: ( localize(\n                                2277,\n                                'Sets the all font styles of the rule: \\'italic\\', \\'bold\\', \\'underline\\' or \\'strikethrough\\' or a combination. All styles that are not listed are unset. The empty string unsets all styles.'\n                            )),\n                            pattern: fontStylePattern,\n                            patternErrorMessage: ( localize(\n                                2278,\n                                'Font style must be \\'italic\\', \\'bold\\', \\'underline\\' or \\'strikethrough\\' or a combination. The empty string unsets all styles.'\n                            )),\n                            defaultSnippets: [\n                                { label: ( localize(2279, 'None (clear inherited style)')), bodyText: '\"\"' },\n                                { body: 'italic' },\n                                { body: 'bold' },\n                                { body: 'underline' },\n                                { body: 'strikethrough' },\n                                { body: 'italic bold' },\n                                { body: 'italic underline' },\n                                { body: 'italic strikethrough' },\n                                { body: 'bold underline' },\n                                { body: 'bold strikethrough' },\n                                { body: 'underline strikethrough' },\n                                { body: 'italic bold underline' },\n                                { body: 'italic bold strikethrough' },\n                                { body: 'italic underline strikethrough' },\n                                { body: 'bold underline strikethrough' },\n                                { body: 'italic bold underline strikethrough' }\n                            ]\n                        },\n                        bold: {\n                            type: 'boolean',\n                            description: ( localize(\n                                2280,\n                                'Sets or unsets the font style to bold. Note, the presence of \\'fontStyle\\' overrides this setting.'\n                            )),\n                        },\n                        italic: {\n                            type: 'boolean',\n                            description: ( localize(\n                                2281,\n                                'Sets or unsets the font style to italic. Note, the presence of \\'fontStyle\\' overrides this setting.'\n                            )),\n                        },\n                        underline: {\n                            type: 'boolean',\n                            description: ( localize(\n                                2282,\n                                'Sets or unsets the font style to underline. Note, the presence of \\'fontStyle\\' overrides this setting.'\n                            )),\n                        },\n                        strikethrough: {\n                            type: 'boolean',\n                            description: ( localize(\n                                2283,\n                                'Sets or unsets the font style to strikethrough. Note, the presence of \\'fontStyle\\' overrides this setting.'\n                            )),\n                        }\n                    },\n                    defaultSnippets: [{ body: { foreground: '${1:#FF0000}', fontStyle: '${2:bold}' } }]\n                }\n            }\n        };\n        this.tokenTypeById = Object.create(null);\n        this.tokenModifierById = Object.create(null);\n        this.typeHierarchy = Object.create(null);\n    }\n    registerTokenType(id, description, superType, deprecationMessage) {\n        if (!id.match(typeAndModifierIdPattern)) {\n            throw ( new Error('Invalid token type id.'));\n        }\n        if (superType && !superType.match(typeAndModifierIdPattern)) {\n            throw ( new Error('Invalid token super type id.'));\n        }\n        const num = this.currentTypeNumber++;\n        const tokenStyleContribution = { num, id, superType, description, deprecationMessage };\n        this.tokenTypeById[id] = tokenStyleContribution;\n        const stylingSchemeEntry = getStylingSchemeEntry(description, deprecationMessage);\n        this.tokenStylingSchema.properties[id] = stylingSchemeEntry;\n        this.typeHierarchy = Object.create(null);\n    }\n    registerTokenModifier(id, description, deprecationMessage) {\n        if (!id.match(typeAndModifierIdPattern)) {\n            throw ( new Error('Invalid token modifier id.'));\n        }\n        const num = this.currentModifierBit;\n        this.currentModifierBit = this.currentModifierBit * 2;\n        const tokenStyleContribution = { num, id, description, deprecationMessage };\n        this.tokenModifierById[id] = tokenStyleContribution;\n        this.tokenStylingSchema.properties[`*.${id}`] = getStylingSchemeEntry(description, deprecationMessage);\n    }\n    parseTokenSelector(selectorString, language) {\n        const selector = parseClassifierString(selectorString, language);\n        if (!selector.type) {\n            return {\n                match: () => -1,\n                id: '$invalid'\n            };\n        }\n        return {\n            match: (type, modifiers, language) => {\n                let score = 0;\n                if (selector.language !== undefined) {\n                    if (selector.language !== language) {\n                        return -1;\n                    }\n                    score += 10;\n                }\n                if (selector.type !== TOKEN_TYPE_WILDCARD) {\n                    const hierarchy = this.getTypeHierarchy(type);\n                    const level = hierarchy.indexOf(selector.type);\n                    if (level === -1) {\n                        return -1;\n                    }\n                    score += (100 - level);\n                }\n                for (const selectorModifier of selector.modifiers) {\n                    if (modifiers.indexOf(selectorModifier) === -1) {\n                        return -1;\n                    }\n                }\n                return score + selector.modifiers.length * 100;\n            },\n            id: `${[selector.type, ...selector.modifiers.sort()].join('.')}${selector.language !== undefined ? ':' + selector.language : ''}`\n        };\n    }\n    registerTokenStyleDefault(selector, defaults) {\n        this.tokenStylingDefaultRules.push({ selector, defaults });\n    }\n    deregisterTokenStyleDefault(selector) {\n        const selectorString = selector.id;\n        this.tokenStylingDefaultRules = this.tokenStylingDefaultRules.filter(r => r.selector.id !== selectorString);\n    }\n    deregisterTokenType(id) {\n        delete this.tokenTypeById[id];\n        delete this.tokenStylingSchema.properties[id];\n        this.typeHierarchy = Object.create(null);\n    }\n    deregisterTokenModifier(id) {\n        delete this.tokenModifierById[id];\n        delete this.tokenStylingSchema.properties[`*.${id}`];\n    }\n    getTokenTypes() {\n        return ( ( Object.keys(this.tokenTypeById)).map(id => this.tokenTypeById[id]));\n    }\n    getTokenModifiers() {\n        return ( ( Object.keys(this.tokenModifierById)).map(id => this.tokenModifierById[id]));\n    }\n    getTokenStylingSchema() {\n        return this.tokenStylingSchema;\n    }\n    getTokenStylingDefaultRules() {\n        return this.tokenStylingDefaultRules;\n    }\n    getTypeHierarchy(typeId) {\n        let hierarchy = this.typeHierarchy[typeId];\n        if (!hierarchy) {\n            this.typeHierarchy[typeId] = hierarchy = [typeId];\n            let type = this.tokenTypeById[typeId];\n            while (type && type.superType) {\n                hierarchy.push(type.superType);\n                type = this.tokenTypeById[type.superType];\n            }\n        }\n        return hierarchy;\n    }\n    toString() {\n        const sorter = (a, b) => {\n            const cat1 = a.indexOf('.') === -1 ? 0 : 1;\n            const cat2 = b.indexOf('.') === -1 ? 0 : 1;\n            if (cat1 !== cat2) {\n                return cat1 - cat2;\n            }\n            return a.localeCompare(b);\n        };\n        return ( ( Object.keys(this.tokenTypeById)).sort(sorter).map(k => `- \\`${k}\\`: ${this.tokenTypeById[k].description}`)).join('\\n');\n    }\n}\nconst CHAR_LANGUAGE = TOKEN_CLASSIFIER_LANGUAGE_SEPARATOR.charCodeAt(0);\nconst CHAR_MODIFIER = CLASSIFIER_MODIFIER_SEPARATOR.charCodeAt(0);\nfunction parseClassifierString(s, defaultLanguage) {\n    let k = s.length;\n    let language = defaultLanguage;\n    const modifiers = [];\n    for (let i = k - 1; i >= 0; i--) {\n        const ch = s.charCodeAt(i);\n        if (ch === CHAR_LANGUAGE || ch === CHAR_MODIFIER) {\n            const segment = s.substring(i + 1, k);\n            k = i;\n            if (ch === CHAR_LANGUAGE) {\n                language = segment;\n            }\n            else {\n                modifiers.push(segment);\n            }\n        }\n    }\n    const type = s.substring(0, k);\n    return { type, modifiers, language };\n}\nconst tokenClassificationRegistry = createDefaultTokenClassificationRegistry();\nRegistry.add(Extensions.TokenClassificationContribution, tokenClassificationRegistry);\nfunction createDefaultTokenClassificationRegistry() {\n    const registry = ( new TokenClassificationRegistry());\n    function registerTokenType(id, description, scopesToProbe = [], superType, deprecationMessage) {\n        registry.registerTokenType(id, description, superType, deprecationMessage);\n        if (scopesToProbe) {\n            registerTokenStyleDefault(id, scopesToProbe);\n        }\n        return id;\n    }\n    function registerTokenStyleDefault(selectorString, scopesToProbe) {\n        try {\n            const selector = registry.parseTokenSelector(selectorString);\n            registry.registerTokenStyleDefault(selector, { scopesToProbe });\n        }\n        catch (e) {\n            console.log(e);\n        }\n    }\n    registerTokenType('comment', ( localize(2284, \"Style for comments.\")), [['comment']]);\n    registerTokenType('string', ( localize(2285, \"Style for strings.\")), [['string']]);\n    registerTokenType('keyword', ( localize(2286, \"Style for keywords.\")), [['keyword.control']]);\n    registerTokenType('number', ( localize(2287, \"Style for numbers.\")), [['constant.numeric']]);\n    registerTokenType('regexp', ( localize(2288, \"Style for expressions.\")), [['constant.regexp']]);\n    registerTokenType('operator', ( localize(2289, \"Style for operators.\")), [['keyword.operator']]);\n    registerTokenType('namespace', ( localize(2290, \"Style for namespaces.\")), [['entity.name.namespace']]);\n    registerTokenType('type', ( localize(2291, \"Style for types.\")), [['entity.name.type'], ['support.type']]);\n    registerTokenType('struct', ( localize(2292, \"Style for structs.\")), [['entity.name.type.struct']]);\n    registerTokenType('class', ( localize(2293, \"Style for classes.\")), [['entity.name.type.class'], ['support.class']]);\n    registerTokenType('interface', ( localize(2294, \"Style for interfaces.\")), [['entity.name.type.interface']]);\n    registerTokenType('enum', ( localize(2295, \"Style for enums.\")), [['entity.name.type.enum']]);\n    registerTokenType('typeParameter', ( localize(2296, \"Style for type parameters.\")), [['entity.name.type.parameter']]);\n    registerTokenType('function', ( localize(2297, \"Style for functions\")), [['entity.name.function'], ['support.function']]);\n    registerTokenType('member', ( localize(2298, \"Style for member functions\")), [], 'method', 'Deprecated use `method` instead');\n    registerTokenType('method', ( localize(2299, \"Style for method (member functions)\")), [['entity.name.function.member'], ['support.function']]);\n    registerTokenType('macro', ( localize(2300, \"Style for macros.\")), [['entity.name.function.preprocessor']]);\n    registerTokenType('variable', ( localize(2301, \"Style for variables.\")), [['variable.other.readwrite'], ['entity.name.variable']]);\n    registerTokenType('parameter', ( localize(2302, \"Style for parameters.\")), [['variable.parameter']]);\n    registerTokenType('property', ( localize(2303, \"Style for properties.\")), [['variable.other.property']]);\n    registerTokenType('enumMember', ( localize(2304, \"Style for enum members.\")), [['variable.other.enummember']]);\n    registerTokenType('event', ( localize(2305, \"Style for events.\")), [['variable.other.event']]);\n    registerTokenType('decorator', ( localize(2306, \"Style for decorators & annotations.\")), [['entity.name.decorator'], ['entity.name.function']]);\n    registerTokenType('label', ( localize(2307, \"Style for labels. \")), undefined);\n    registry.registerTokenModifier('declaration', ( localize(2308, \"Style for all symbol declarations.\")), undefined);\n    registry.registerTokenModifier('documentation', ( localize(2309, \"Style to use for references in documentation.\")), undefined);\n    registry.registerTokenModifier('static', ( localize(2310, \"Style to use for symbols that are static.\")), undefined);\n    registry.registerTokenModifier('abstract', ( localize(2311, \"Style to use for symbols that are abstract.\")), undefined);\n    registry.registerTokenModifier('deprecated', ( localize(2312, \"Style to use for symbols that are deprecated.\")), undefined);\n    registry.registerTokenModifier('modification', ( localize(2313, \"Style to use for write accesses.\")), undefined);\n    registry.registerTokenModifier('async', ( localize(2314, \"Style to use for symbols that are async.\")), undefined);\n    registry.registerTokenModifier('readonly', ( localize(2315, \"Style to use for symbols that are read-only.\")), undefined);\n    registerTokenStyleDefault('variable.readonly', [['variable.other.constant']]);\n    registerTokenStyleDefault('property.readonly', [['variable.other.constant.property']]);\n    registerTokenStyleDefault('type.defaultLibrary', [['support.type']]);\n    registerTokenStyleDefault('class.defaultLibrary', [['support.class']]);\n    registerTokenStyleDefault('interface.defaultLibrary', [['support.class']]);\n    registerTokenStyleDefault('variable.defaultLibrary', [['support.variable'], ['support.other.variable']]);\n    registerTokenStyleDefault('variable.defaultLibrary.readonly', [['support.constant']]);\n    registerTokenStyleDefault('property.defaultLibrary', [['support.variable.property']]);\n    registerTokenStyleDefault('property.defaultLibrary.readonly', [['support.constant.property']]);\n    registerTokenStyleDefault('function.defaultLibrary', [['support.function']]);\n    registerTokenStyleDefault('member.defaultLibrary', [['support.function']]);\n    return registry;\n}\nfunction getTokenClassificationRegistry() {\n    return tokenClassificationRegistry;\n}\nfunction getStylingSchemeEntry(description, deprecationMessage) {\n    return {\n        description,\n        deprecationMessage,\n        defaultSnippets: [{ body: '${1:#ff0000}' }],\n        anyOf: [\n            {\n                type: 'string',\n                format: 'color-hex'\n            },\n            {\n                $ref: '#/definitions/style'\n            }\n        ]\n    };\n}\nconst tokenStylingSchemaId = 'vscode://schemas/token-styling';\nconst schemaRegistry = Registry.as(Extensions$1.JSONContribution);\nschemaRegistry.registerSchema(tokenStylingSchemaId, tokenClassificationRegistry.getTokenStylingSchema());\nconst delayer = ( new RunOnceScheduler(() => schemaRegistry.notifySchemaChanged(tokenStylingSchemaId), 200));\ntokenClassificationRegistry.onDidChangeSchema(() => {\n    if (!delayer.isScheduled()) {\n        delayer.schedule();\n    }\n});\n\nexport { SemanticTokenRule, TokenStyle, getTokenClassificationRegistry, parseClassifierString, tokenStylingSchemaId, typeAndModifierIdPattern };\n"],"names":["IWorkbenchThemeService","refineServiceDecorator","IThemeService","TOKEN_TYPE_WILDCARD","TOKEN_CLASSIFIER_LANGUAGE_SEPARATOR","CLASSIFIER_MODIFIER_SEPARATOR","idPattern","typeAndModifierIdPattern","selectorPattern","fontStylePattern","TokenStyle","foreground","bold","underline","strikethrough","italic","toJSONObject","style","Color","fromJSONObject","obj","boolOrUndef","b","colorOrUndef","s","equals","s1","s2","is","fromData","data","fromSettings","fontStyle","foregroundColor","expression","match","SemanticTokenRule","registry","o","rule","r1","r2","r","Extensions","TokenClassificationRegistry","Emitter","getStylingSchemeEntry","localize","id","description","superType","deprecationMessage","tokenStyleContribution","stylingSchemeEntry","num","selectorString","language","selector","parseClassifierString","type","modifiers","score","level","selectorModifier","defaults","typeId","hierarchy","sorter","a","cat1","cat2","k","CHAR_LANGUAGE","CHAR_MODIFIER","defaultLanguage","i","ch","segment","tokenClassificationRegistry","createDefaultTokenClassificationRegistry","Registry","registerTokenType","scopesToProbe","registerTokenStyleDefault","e","getTokenClassificationRegistry","tokenStylingSchemaId","schemaRegistry","Extensions$1","delayer","RunOnceScheduler"],"mappings":"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","x_google_ignoreList":[0,1]}