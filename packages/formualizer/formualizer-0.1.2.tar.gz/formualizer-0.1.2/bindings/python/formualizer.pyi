# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import typing
from enum import Enum

class ASTNode:
    def pretty(self) -> builtins.str:
        r"""
        Get the pretty-printed representation of this AST
        """
    def to_formula(self) -> builtins.str:
        r"""
        Round-trips the node back to canonical Excel formula (with leading '=').
        """
    def fingerprint(self) -> builtins.int:
        r"""
        Get a stable fingerprint hash of this AST structure
        """
    def children(self) -> builtins.list[ASTNode]:
        r"""
        Get immediate children of this AST node
        """
    def walk_refs(self) -> PyRefWalker:
        r"""
        Walk through all references in this AST
        """
    def to_dict(self) -> typing.Any:
        r"""
        Convert AST to a dictionary representation
        """
    def node_type(self) -> builtins.str:
        r"""
        Get the node type as a string
        """
    def get_literal_value(self) -> typing.Optional[typing.Any]:
        r"""
        Get the value for literal nodes
        """
    def get_reference_string(self) -> typing.Optional[builtins.str]:
        r"""
        Get the reference string for reference nodes
        """
    def get_reference(self) -> typing.Optional[typing.Any]:
        r"""
        Get the reference as a rich object for reference nodes
        """
    def get_operator(self) -> typing.Optional[builtins.str]:
        r"""
        Get the operator for unary/binary operation nodes
        """
    def get_function_name(self) -> typing.Optional[builtins.str]:
        r"""
        Get the function name for function nodes
        """
    def get_source_token(self) -> typing.Optional[PyToken]:
        r"""
        Get the source token if available
        """
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class CellRef:
    sheet: typing.Optional[builtins.str]
    row: builtins.int
    col: builtins.int
    abs_row: builtins.bool
    abs_col: builtins.bool

class PyRefWalker:
    ...

class PyToken:
    value: builtins.str
    token_type: PyTokenType
    subtype: PyTokenSubType
    start: builtins.int
    end: builtins.int
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...
    def to_dict(self) -> typing.Any: ...
    def is_operator(self) -> builtins.bool:
        r"""
        Check if this token is an operator
        """
    def get_precedence(self) -> typing.Optional[tuple[builtins.int, builtins.str]]:
        r"""
        Get the precedence of this token (if it's an operator)
        """

class PyTokenizer:
    def __new__(cls, formula:builtins.str) -> PyTokenizer: ...
    def tokens(self) -> builtins.list[PyToken]:
        r"""
        Get all tokens as a list
        """
    def render(self) -> builtins.str:
        r"""
        Reconstruct the original formula from tokens
        """
    def __iter__(self) -> PyTokenizerIter:
        r"""
        Make the tokenizer iterable
        """
    def __len__(self) -> builtins.int: ...
    def __getitem__(self, index:builtins.int) -> PyToken: ...
    def __repr__(self) -> builtins.str: ...

class PyTokenizerIter:
    ...

class RangeRef:
    sheet: typing.Optional[builtins.str]
    start: typing.Optional[CellRef]
    end: typing.Optional[CellRef]
    def __new__(cls, sheet:typing.Optional[builtins.str], start:typing.Optional[CellRef], end:typing.Optional[CellRef]) -> RangeRef: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class TableRef:
    name: builtins.str
    spec: typing.Optional[builtins.str]
    def __new__(cls, name:builtins.str, spec:typing.Optional[builtins.str]) -> TableRef: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class UnknownRef:
    raw: builtins.str
    def __new__(cls, raw:builtins.str) -> UnknownRef: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class PyTokenSubType(Enum):
    r"""
    Python-exposed token subtype enum
    """
    None = ...
    Text = ...
    Number = ...
    Logical = ...
    Error = ...
    Range = ...
    Open = ...
    Close = ...
    Arg = ...
    Row = ...

class PyTokenType(Enum):
    r"""
    Python-exposed token type enum
    """
    Literal = ...
    Operand = ...
    Func = ...
    Array = ...
    Paren = ...
    Sep = ...
    OpPrefix = ...
    OpInfix = ...
    OpPostfix = ...
    Whitespace = ...

def parse(formula:builtins.str) -> ASTNode:    r"""
    Convenience function to parse a formula string
    """

def tokenize(formula:builtins.str) -> PyTokenizer:    r"""
    Convenience function to tokenize a formula string
    """

