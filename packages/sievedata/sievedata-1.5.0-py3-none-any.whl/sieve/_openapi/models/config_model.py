# coding: utf-8

"""
    Sieve API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sieve._openapi.models.input_output import InputOutput
from typing import Optional, Set
from typing_extensions import Self

class ConfigModel(BaseModel):
    """
    ConfigModel
    """ # noqa: E501
    name: StrictStr
    version: StrictStr
    inputs: List[InputOutput] = Field(description="The inputs to a function")
    outputs: List[InputOutput] = Field(description="The outputs to a function")
    gpu: StrictStr
    machine_type: StrictStr
    system_version: Optional[StrictStr] = None
    split: Optional[StrictInt] = 1
    private: Optional[StrictBool] = False
    type: StrictStr
    is_iterator_input: StrictBool
    is_iterator_output: StrictBool
    env: Optional[Any]
    public_data: Optional[Dict[str, Any]] = None
    restart_on_error: Optional[StrictBool] = Field(default=True, description="Whether to restart the function on job error")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["name", "version", "inputs", "outputs", "gpu", "machine_type", "system_version", "split", "private", "type", "is_iterator_input", "is_iterator_output", "env", "public_data", "restart_on_error"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConfigModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in inputs (list)
        _items = []
        if self.inputs:
            for _item_inputs in self.inputs:
                if _item_inputs:
                    _items.append(_item_inputs.to_dict())
            _dict['inputs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in outputs (list)
        _items = []
        if self.outputs:
            for _item_outputs in self.outputs:
                if _item_outputs:
                    _items.append(_item_outputs.to_dict())
            _dict['outputs'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if system_version (nullable) is None
        # and model_fields_set contains the field
        if self.system_version is None and "system_version" in self.model_fields_set:
            _dict['system_version'] = None

        # set to None if env (nullable) is None
        # and model_fields_set contains the field
        if self.env is None and "env" in self.model_fields_set:
            _dict['env'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConfigModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "version": obj.get("version"),
            "inputs": [InputOutput.from_dict(_item) for _item in obj["inputs"]] if obj.get("inputs") is not None else None,
            "outputs": [InputOutput.from_dict(_item) for _item in obj["outputs"]] if obj.get("outputs") is not None else None,
            "gpu": obj.get("gpu"),
            "machine_type": obj.get("machine_type"),
            "system_version": obj.get("system_version"),
            "split": obj.get("split") if obj.get("split") is not None else 1,
            "private": obj.get("private") if obj.get("private") is not None else False,
            "type": obj.get("type"),
            "is_iterator_input": obj.get("is_iterator_input"),
            "is_iterator_output": obj.get("is_iterator_output"),
            "env": obj.get("env"),
            "public_data": obj.get("public_data"),
            "restart_on_error": obj.get("restart_on_error") if obj.get("restart_on_error") is not None else True
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


