# coding: utf-8

"""
    Sieve API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from sieve._openapi.models.version import Version
from sieve._openapi.models.webhook_model import WebhookModel
from typing import Optional, Set
from typing_extensions import Self

class FunctionApp(BaseModel):
    """
    FunctionApp
    """ # noqa: E501
    name: StrictStr = Field(description="The name of the function.")
    owner_name: StrictStr = Field(description="The owner name of the function")
    visibility: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    code_url: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    tags: Optional[List[StrictStr]] = None
    cover_image_url: Optional[StrictStr] = None
    examples: Optional[List[StrictStr]] = None
    readme: Optional[StrictStr] = None
    latest_version: Optional[Version] = None
    function_type: Optional[StrictStr] = None
    webhooks: Optional[List[WebhookModel]] = None
    restart_on_error: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["name", "owner_name", "visibility", "title", "code_url", "description", "tags", "cover_image_url", "examples", "readme", "latest_version", "function_type", "webhooks", "restart_on_error"]

    @field_validator('function_type')
    def function_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['function', 'workflow']):
            raise ValueError("must be one of enum values ('function', 'workflow')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FunctionApp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of latest_version
        if self.latest_version:
            _dict['latest_version'] = self.latest_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in webhooks (list)
        _items = []
        if self.webhooks:
            for _item_webhooks in self.webhooks:
                if _item_webhooks:
                    _items.append(_item_webhooks.to_dict())
            _dict['webhooks'] = _items
        # set to None if visibility (nullable) is None
        # and model_fields_set contains the field
        if self.visibility is None and "visibility" in self.model_fields_set:
            _dict['visibility'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if code_url (nullable) is None
        # and model_fields_set contains the field
        if self.code_url is None and "code_url" in self.model_fields_set:
            _dict['code_url'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if cover_image_url (nullable) is None
        # and model_fields_set contains the field
        if self.cover_image_url is None and "cover_image_url" in self.model_fields_set:
            _dict['cover_image_url'] = None

        # set to None if examples (nullable) is None
        # and model_fields_set contains the field
        if self.examples is None and "examples" in self.model_fields_set:
            _dict['examples'] = None

        # set to None if readme (nullable) is None
        # and model_fields_set contains the field
        if self.readme is None and "readme" in self.model_fields_set:
            _dict['readme'] = None

        # set to None if latest_version (nullable) is None
        # and model_fields_set contains the field
        if self.latest_version is None and "latest_version" in self.model_fields_set:
            _dict['latest_version'] = None

        # set to None if function_type (nullable) is None
        # and model_fields_set contains the field
        if self.function_type is None and "function_type" in self.model_fields_set:
            _dict['function_type'] = None

        # set to None if webhooks (nullable) is None
        # and model_fields_set contains the field
        if self.webhooks is None and "webhooks" in self.model_fields_set:
            _dict['webhooks'] = None

        # set to None if restart_on_error (nullable) is None
        # and model_fields_set contains the field
        if self.restart_on_error is None and "restart_on_error" in self.model_fields_set:
            _dict['restart_on_error'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FunctionApp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "owner_name": obj.get("owner_name"),
            "visibility": obj.get("visibility"),
            "title": obj.get("title"),
            "code_url": obj.get("code_url"),
            "description": obj.get("description"),
            "tags": obj.get("tags"),
            "cover_image_url": obj.get("cover_image_url"),
            "examples": obj.get("examples"),
            "readme": obj.get("readme"),
            "latest_version": Version.from_dict(obj["latest_version"]) if obj.get("latest_version") is not None else None,
            "function_type": obj.get("function_type"),
            "webhooks": [WebhookModel.from_dict(_item) for _item in obj["webhooks"]] if obj.get("webhooks") is not None else None,
            "restart_on_error": obj.get("restart_on_error")
        })
        return _obj


