# coding: utf-8

"""
    Sieve API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from sieve._openapi.models.machine_type_usage import MachineTypeUsage
from typing import Optional, Set
from typing_extensions import Self

class DetailedUsage(BaseModel):
    """
    Output schema for detailed usage including machine types.
    """ # noqa: E501
    total_compute_seconds: Union[StrictFloat, StrictInt] = Field(description="Total amount of compute seconds accrued.")
    total_cost_dollars: Union[StrictFloat, StrictInt] = Field(description="Total amount of dollars spent.")
    cpu: Optional[MachineTypeUsage] = None
    a100: Optional[MachineTypeUsage] = None
    a100_20gb: Optional[MachineTypeUsage] = Field(default=None, alias="a100-20gb")
    v100: Optional[MachineTypeUsage] = None
    l4: Optional[MachineTypeUsage] = None
    t4: Optional[MachineTypeUsage] = None
    other: Optional[MachineTypeUsage] = None
    __properties: ClassVar[List[str]] = ["total_compute_seconds", "total_cost_dollars", "cpu", "a100", "a100-20gb", "v100", "l4", "t4", "other"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DetailedUsage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cpu
        if self.cpu:
            _dict['cpu'] = self.cpu.to_dict()
        # override the default output from pydantic by calling `to_dict()` of a100
        if self.a100:
            _dict['a100'] = self.a100.to_dict()
        # override the default output from pydantic by calling `to_dict()` of a100_20gb
        if self.a100_20gb:
            _dict['a100-20gb'] = self.a100_20gb.to_dict()
        # override the default output from pydantic by calling `to_dict()` of v100
        if self.v100:
            _dict['v100'] = self.v100.to_dict()
        # override the default output from pydantic by calling `to_dict()` of l4
        if self.l4:
            _dict['l4'] = self.l4.to_dict()
        # override the default output from pydantic by calling `to_dict()` of t4
        if self.t4:
            _dict['t4'] = self.t4.to_dict()
        # override the default output from pydantic by calling `to_dict()` of other
        if self.other:
            _dict['other'] = self.other.to_dict()
        # set to None if cpu (nullable) is None
        # and model_fields_set contains the field
        if self.cpu is None and "cpu" in self.model_fields_set:
            _dict['cpu'] = None

        # set to None if a100 (nullable) is None
        # and model_fields_set contains the field
        if self.a100 is None and "a100" in self.model_fields_set:
            _dict['a100'] = None

        # set to None if a100_20gb (nullable) is None
        # and model_fields_set contains the field
        if self.a100_20gb is None and "a100_20gb" in self.model_fields_set:
            _dict['a100-20gb'] = None

        # set to None if v100 (nullable) is None
        # and model_fields_set contains the field
        if self.v100 is None and "v100" in self.model_fields_set:
            _dict['v100'] = None

        # set to None if l4 (nullable) is None
        # and model_fields_set contains the field
        if self.l4 is None and "l4" in self.model_fields_set:
            _dict['l4'] = None

        # set to None if t4 (nullable) is None
        # and model_fields_set contains the field
        if self.t4 is None and "t4" in self.model_fields_set:
            _dict['t4'] = None

        # set to None if other (nullable) is None
        # and model_fields_set contains the field
        if self.other is None and "other" in self.model_fields_set:
            _dict['other'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DetailedUsage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "total_compute_seconds": obj.get("total_compute_seconds"),
            "total_cost_dollars": obj.get("total_cost_dollars"),
            "cpu": MachineTypeUsage.from_dict(obj["cpu"]) if obj.get("cpu") is not None else None,
            "a100": MachineTypeUsage.from_dict(obj["a100"]) if obj.get("a100") is not None else None,
            "a100-20gb": MachineTypeUsage.from_dict(obj["a100-20gb"]) if obj.get("a100-20gb") is not None else None,
            "v100": MachineTypeUsage.from_dict(obj["v100"]) if obj.get("v100") is not None else None,
            "l4": MachineTypeUsage.from_dict(obj["l4"]) if obj.get("l4") is not None else None,
            "t4": MachineTypeUsage.from_dict(obj["t4"]) if obj.get("t4") is not None else None,
            "other": MachineTypeUsage.from_dict(obj["other"]) if obj.get("other") is not None else None
        })
        return _obj


