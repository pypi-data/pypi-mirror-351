# coding: utf-8

"""
    Sieve API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sieve._openapi.models.compact_function_app import CompactFunctionApp
from sieve._openapi.models.outputs_inner import OutputsInner
from sieve._openapi.models.restart import Restart
from typing import Optional, Set
from typing_extensions import Self

class Job(BaseModel):
    """
    Job
    """ # noqa: E501
    id: StrictStr = Field(description="The id of the job.")
    function_id: StrictStr = Field(description="The id of the function that the job belongs to. This can be the first 7 characters of the full id.")
    organization_id: StrictStr = Field(description="The ID of the organization that submitted the function.")
    function: Optional[CompactFunctionApp]
    status: StrictStr = Field(description="The status of the job. Possible values: 'queued', 'processing', 'error', 'finished', 'cancelled'")
    created_at: Optional[datetime]
    started_at: Optional[datetime]
    completed_at: Optional[datetime]
    inputs: Optional[Dict[str, Any]] = Field(default=None, description="Show child attributes")
    outputs: Optional[List[OutputsInner]] = Field(default=None, description="Show child attributes")
    error: Optional[StrictStr]
    visibility: StrictStr = Field(description="\"public\" or \"private\".")
    run_id: Optional[StrictStr]
    children: Optional[Dict[str, List[Any]]] = None
    restarts: Optional[List[Restart]] = None
    __properties: ClassVar[List[str]] = ["id", "function_id", "organization_id", "function", "status", "created_at", "started_at", "completed_at", "inputs", "outputs", "error", "visibility", "run_id", "children", "restarts"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Job from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of function
        if self.function:
            _dict['function'] = self.function.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in outputs (list)
        _items = []
        if self.outputs:
            for _item_outputs in self.outputs:
                if _item_outputs:
                    _items.append(_item_outputs.to_dict())
            _dict['outputs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in restarts (list)
        _items = []
        if self.restarts:
            for _item_restarts in self.restarts:
                if _item_restarts:
                    _items.append(_item_restarts.to_dict())
            _dict['restarts'] = _items
        # set to None if function (nullable) is None
        # and model_fields_set contains the field
        if self.function is None and "function" in self.model_fields_set:
            _dict['function'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if started_at (nullable) is None
        # and model_fields_set contains the field
        if self.started_at is None and "started_at" in self.model_fields_set:
            _dict['started_at'] = None

        # set to None if completed_at (nullable) is None
        # and model_fields_set contains the field
        if self.completed_at is None and "completed_at" in self.model_fields_set:
            _dict['completed_at'] = None

        # set to None if error (nullable) is None
        # and model_fields_set contains the field
        if self.error is None and "error" in self.model_fields_set:
            _dict['error'] = None

        # set to None if run_id (nullable) is None
        # and model_fields_set contains the field
        if self.run_id is None and "run_id" in self.model_fields_set:
            _dict['run_id'] = None

        # set to None if children (nullable) is None
        # and model_fields_set contains the field
        if self.children is None and "children" in self.model_fields_set:
            _dict['children'] = None

        # set to None if restarts (nullable) is None
        # and model_fields_set contains the field
        if self.restarts is None and "restarts" in self.model_fields_set:
            _dict['restarts'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Job from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "function_id": obj.get("function_id"),
            "organization_id": obj.get("organization_id"),
            "function": CompactFunctionApp.from_dict(obj["function"]) if obj.get("function") is not None else None,
            "status": obj.get("status"),
            "created_at": obj.get("created_at"),
            "started_at": obj.get("started_at"),
            "completed_at": obj.get("completed_at"),
            "inputs": obj.get("inputs"),
            "outputs": [OutputsInner.from_dict(_item) for _item in obj["outputs"]] if obj.get("outputs") is not None else None,
            "error": obj.get("error"),
            "visibility": obj.get("visibility"),
            "run_id": obj.get("run_id"),
            "children": obj.get("children"),
            "restarts": [Restart.from_dict(_item) for _item in obj["restarts"]] if obj.get("restarts") is not None else None
        })
        return _obj


