# coding: utf-8

"""
    Sieve API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WorkerCounts(BaseModel):
    """
    The current number and status of the model's workers.
    """ # noqa: E501
    starting: Optional[StrictInt]
    setup: Optional[StrictInt]
    active: Optional[StrictInt]
    idle: Optional[StrictInt]
    awaiting_resources: Optional[StrictInt]
    __properties: ClassVar[List[str]] = ["starting", "setup", "active", "idle", "awaiting_resources"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkerCounts from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if starting (nullable) is None
        # and model_fields_set contains the field
        if self.starting is None and "starting" in self.model_fields_set:
            _dict['starting'] = None

        # set to None if setup (nullable) is None
        # and model_fields_set contains the field
        if self.setup is None and "setup" in self.model_fields_set:
            _dict['setup'] = None

        # set to None if active (nullable) is None
        # and model_fields_set contains the field
        if self.active is None and "active" in self.model_fields_set:
            _dict['active'] = None

        # set to None if idle (nullable) is None
        # and model_fields_set contains the field
        if self.idle is None and "idle" in self.model_fields_set:
            _dict['idle'] = None

        # set to None if awaiting_resources (nullable) is None
        # and model_fields_set contains the field
        if self.awaiting_resources is None and "awaiting_resources" in self.model_fields_set:
            _dict['awaiting_resources'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkerCounts from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "starting": obj.get("starting"),
            "setup": obj.get("setup"),
            "active": obj.get("active"),
            "idle": obj.get("idle"),
            "awaiting_resources": obj.get("awaiting_resources")
        })
        return _obj


