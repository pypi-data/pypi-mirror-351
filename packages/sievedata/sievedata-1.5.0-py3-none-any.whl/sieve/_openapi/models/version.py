# coding: utf-8

"""
    Sieve API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sieve._openapi.models.environment_variable import EnvironmentVariable
from sieve._openapi.models.input_output import InputOutput
from sieve._openapi.models.worker_counts import WorkerCounts
from typing import Optional, Set
from typing_extensions import Self

class Version(BaseModel):
    """
    Version
    """ # noqa: E501
    id: StrictStr = Field(description="Id of the model")
    build_status: StrictStr = Field(description="Build status of the function version. Statuses are 'queued', 'building', 'pushing', 'deploying', 'ready', 'error'")
    queued_at: Optional[datetime]
    built_at: Optional[datetime]
    ready_at: Optional[datetime]
    compute_type: StrictStr = Field(description="Machine type to use. See possible values for GPU machine types")
    python_packages: List[StrictStr] = Field(description="An array of the model's python pip packages")
    system_packages: List[StrictStr] = Field(description="An array of the model's system packages")
    cuda_version: Optional[StrictStr] = None
    gpu: StrictBool = Field(description="Whether this model uses gpu")
    split: StrictInt = Field(description="How many functions to allocate per node")
    minimum_replicas: Optional[StrictInt] = Field(default=0, description="The minimum number of replicas of the model. Scale your model's minimum replicas to avoid cold starts")
    maximum_replicas: Optional[StrictInt] = None
    inputs: List[InputOutput] = Field(description="The inputs to a function")
    outputs: List[InputOutput] = Field(description="The outputs to a function")
    current_workers: Optional[WorkerCounts] = None
    environment_variables: Optional[List[EnvironmentVariable]]
    stream_output: Optional[StrictBool] = None
    function_dependencies: List[StrictStr] = Field(description="Function dependencies")
    __properties: ClassVar[List[str]] = ["id", "build_status", "queued_at", "built_at", "ready_at", "compute_type", "python_packages", "system_packages", "cuda_version", "gpu", "split", "minimum_replicas", "maximum_replicas", "inputs", "outputs", "current_workers", "environment_variables", "stream_output", "function_dependencies"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Version from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in inputs (list)
        _items = []
        if self.inputs:
            for _item_inputs in self.inputs:
                if _item_inputs:
                    _items.append(_item_inputs.to_dict())
            _dict['inputs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in outputs (list)
        _items = []
        if self.outputs:
            for _item_outputs in self.outputs:
                if _item_outputs:
                    _items.append(_item_outputs.to_dict())
            _dict['outputs'] = _items
        # override the default output from pydantic by calling `to_dict()` of current_workers
        if self.current_workers:
            _dict['current_workers'] = self.current_workers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in environment_variables (list)
        _items = []
        if self.environment_variables:
            for _item_environment_variables in self.environment_variables:
                if _item_environment_variables:
                    _items.append(_item_environment_variables.to_dict())
            _dict['environment_variables'] = _items
        # set to None if queued_at (nullable) is None
        # and model_fields_set contains the field
        if self.queued_at is None and "queued_at" in self.model_fields_set:
            _dict['queued_at'] = None

        # set to None if built_at (nullable) is None
        # and model_fields_set contains the field
        if self.built_at is None and "built_at" in self.model_fields_set:
            _dict['built_at'] = None

        # set to None if ready_at (nullable) is None
        # and model_fields_set contains the field
        if self.ready_at is None and "ready_at" in self.model_fields_set:
            _dict['ready_at'] = None

        # set to None if cuda_version (nullable) is None
        # and model_fields_set contains the field
        if self.cuda_version is None and "cuda_version" in self.model_fields_set:
            _dict['cuda_version'] = None

        # set to None if maximum_replicas (nullable) is None
        # and model_fields_set contains the field
        if self.maximum_replicas is None and "maximum_replicas" in self.model_fields_set:
            _dict['maximum_replicas'] = None

        # set to None if current_workers (nullable) is None
        # and model_fields_set contains the field
        if self.current_workers is None and "current_workers" in self.model_fields_set:
            _dict['current_workers'] = None

        # set to None if environment_variables (nullable) is None
        # and model_fields_set contains the field
        if self.environment_variables is None and "environment_variables" in self.model_fields_set:
            _dict['environment_variables'] = None

        # set to None if stream_output (nullable) is None
        # and model_fields_set contains the field
        if self.stream_output is None and "stream_output" in self.model_fields_set:
            _dict['stream_output'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Version from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "build_status": obj.get("build_status"),
            "queued_at": obj.get("queued_at"),
            "built_at": obj.get("built_at"),
            "ready_at": obj.get("ready_at"),
            "compute_type": obj.get("compute_type"),
            "python_packages": obj.get("python_packages"),
            "system_packages": obj.get("system_packages"),
            "cuda_version": obj.get("cuda_version"),
            "gpu": obj.get("gpu"),
            "split": obj.get("split"),
            "minimum_replicas": obj.get("minimum_replicas") if obj.get("minimum_replicas") is not None else 0,
            "maximum_replicas": obj.get("maximum_replicas"),
            "inputs": [InputOutput.from_dict(_item) for _item in obj["inputs"]] if obj.get("inputs") is not None else None,
            "outputs": [InputOutput.from_dict(_item) for _item in obj["outputs"]] if obj.get("outputs") is not None else None,
            "current_workers": WorkerCounts.from_dict(obj["current_workers"]) if obj.get("current_workers") is not None else None,
            "environment_variables": [EnvironmentVariable.from_dict(_item) for _item in obj["environment_variables"]] if obj.get("environment_variables") is not None else None,
            "stream_output": obj.get("stream_output"),
            "function_dependencies": obj.get("function_dependencies")
        })
        return _obj


