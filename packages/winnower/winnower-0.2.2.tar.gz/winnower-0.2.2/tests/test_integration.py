"""Integration tests for The Winnower."""

import os
import tempfile
from pathlib import Path
from unittest.mock import Mock, patch

import pytest

from winnower.core import WinnowerProcessor
from winnower.config import DEFAULT_CONFIG


class TestIntegration:

    def setup_method(self):
        self.fixtures_dir = Path(__file__).parent / "fixtures"
        self.temp_dir = Path(tempfile.mkdtemp())

    def teardown_method(self):
        # Clean up temp directory
        import shutil

        shutil.rmtree(self.temp_dir, ignore_errors=True)

    @patch("winnower.extractors.openai.OpenAI")
    def test_ml_paper_processing(self, mock_openai):
        """Test processing ML paper end-to-end."""
        # Mock OpenAI API response
        mock_response = Mock()
        mock_response.choices = [Mock()]
        mock_response.choices[
            0
        ].message.content = """
        **Core Algorithms**: GradientBoost algorithm with momentum updates
        **Mathematical Formulations**: α_t = α_0 / (1 + γt), m = βm + (1-β)g
        **Technical Methods**: Polynomial learning rate decay
        **Key Parameters**: β=0.9, γ=0.001, α_0=0.01
        """

        mock_client = Mock()
        mock_client.chat.completions.create.return_value = mock_response
        mock_openai.return_value = mock_client

        # Process the sample ML paper
        config = DEFAULT_CONFIG.copy()
        processor = WinnowerProcessor(config, "openai", verbose=False)

        ml_paper = self.fixtures_dir / "sample_ml_paper.txt"
        processor.process(str(ml_paper), self.temp_dir)

        # Check output file was created
        output_files = list(self.temp_dir.glob("**/*_summary.md"))
        assert len(output_files) == 1

        output_content = output_files[0].read_text()
        assert "GradientBoost" in output_content
        assert "Technical Summary" in output_content
        assert "Generated by" in output_content and "The Winnower" in output_content

    @patch("winnower.extractors.openai.OpenAI")
    def test_physics_paper_processing(self, mock_openai):
        """Test processing physics paper end-to-end."""
        # Mock OpenAI API response
        mock_response = Mock()
        mock_response.choices = [Mock()]
        mock_response.choices[
            0
        ].message.content = """
        **Mathematical Formulations**: f'(R)R_μν - (1/2)f(R)g_μν = 8πG T_μν
        **Physical Models**: Modified Einstein equations with mass term m²
        **Key Parameters**: m² = (1/3)(R₀ - f(R₀)/f'(R₀)), background curvature R₀
        **Theoretical Framework**: f(R) gravity theory with linearized perturbations
        """

        mock_client = Mock()
        mock_client.chat.completions.create.return_value = mock_response
        mock_openai.return_value = mock_client

        # Process the sample physics paper
        config = DEFAULT_CONFIG.copy()
        processor = WinnowerProcessor(config, "openai", verbose=False)

        physics_paper = self.fixtures_dir / "sample_physics_paper.txt"
        processor.process(str(physics_paper), self.temp_dir)

        # Check output file was created
        output_files = list(self.temp_dir.glob("**/*_summary.md"))
        assert len(output_files) == 1

        output_content = output_files[0].read_text()
        assert "gravity" in output_content.lower()
        assert "Technical Summary" in output_content
        assert "Generated by" in output_content and "The Winnower" in output_content

    @patch("winnower.extractors.openai.OpenAI")
    def test_custom_prompt_processing(self, mock_openai):
        """Test processing with custom prompt."""
        # Mock OpenAI API response
        mock_response = Mock()
        mock_response.choices = [Mock()]
        mock_response.choices[0].message.content = "Custom extraction result"

        mock_client = Mock()
        mock_client.chat.completions.create.return_value = mock_response
        mock_openai.return_value = mock_client

        # Create custom prompt file
        custom_prompt = self.temp_dir / "custom_prompt.txt"
        custom_prompt.write_text(
            "Extract key information from: {title}\n\nContent: {content}"
        )

        # Process with custom prompt
        config = DEFAULT_CONFIG.copy()
        config["prompt_file"] = str(custom_prompt)
        processor = WinnowerProcessor(config, "openai", verbose=False)

        ml_paper = self.fixtures_dir / "sample_ml_paper.txt"
        processor.process(str(ml_paper), self.temp_dir)

        # Check that custom prompt was used
        mock_client.chat.completions.create.assert_called_once()
        call_args = mock_client.chat.completions.create.call_args
        assert "Extract key information from:" in call_args[1]["messages"][1]["content"]

    @patch("winnower.extractors.openai.OpenAI")
    def test_directory_processing(self, mock_openai):
        """Test processing entire directory."""
        # Mock OpenAI API response
        mock_response = Mock()
        mock_response.choices = [Mock()]
        mock_response.choices[0].message.content = "Extracted content"

        mock_client = Mock()
        mock_client.chat.completions.create.return_value = mock_response
        mock_openai.return_value = mock_client

        # Process the fixtures directory
        config = DEFAULT_CONFIG.copy()
        processor = WinnowerProcessor(config, "openai", verbose=False)

        processor.process(str(self.fixtures_dir), self.temp_dir, recursive=False)

        # Should have processed both sample papers
        output_files = list(self.temp_dir.glob("**/*_summary.md"))
        assert len(output_files) == 2

        # Check that OpenAI was called for each paper
        assert mock_client.chat.completions.create.call_count == 2

    @patch.dict(os.environ, {"OPENAI_API_KEY": ""}, clear=False)
    def test_missing_api_key(self):
        """Test behavior when API key is missing."""
        config = DEFAULT_CONFIG.copy()
        
        with pytest.raises(Exception):
            processor = WinnowerProcessor(config, "openai", verbose=False)

            ml_paper = self.fixtures_dir / "sample_ml_paper.txt"

            # Should handle missing API key gracefully
            processor.process(str(ml_paper), self.temp_dir)

            # Check that an output file was still created (with error message)
            output_files = list(self.temp_dir.glob("*_technical_summary.md"))
            assert len(output_files) == 1

            output_content = output_files[0].read_text()
            assert "Error extracting technical content" in output_content
