# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ida_domain
else:
    import _ida_domain

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref


from typing import Iterator, Tuple

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ida_domain.delete_SwigPyIterator

    def value(self):
        r"""value(self) -> PyObject *"""
        return _ida_domain.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""incr(self, n=1) -> SwigPyIterator"""
        return _ida_domain.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""decr(self, n=1) -> SwigPyIterator"""
        return _ida_domain.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""distance(self, x) -> ptrdiff_t"""
        return _ida_domain.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""equal(self, x) -> bool"""
        return _ida_domain.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(self) -> SwigPyIterator"""
        return _ida_domain.SwigPyIterator_copy(self)

    def next(self):
        r"""next(self) -> PyObject *"""
        return _ida_domain.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(self) -> PyObject *"""
        return _ida_domain.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(self) -> PyObject *"""
        return _ida_domain.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""advance(self, n) -> SwigPyIterator"""
        return _ida_domain.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""__eq__(self, x) -> bool"""
        return _ida_domain.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""__ne__(self, x) -> bool"""
        return _ida_domain.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""__iadd__(self, n) -> SwigPyIterator"""
        return _ida_domain.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""__isub__(self, n) -> SwigPyIterator"""
        return _ida_domain.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""__add__(self, n) -> SwigPyIterator"""
        return _ida_domain.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(self, n) -> SwigPyIterator
        __sub__(self, x) -> ptrdiff_t
        """
        return _ida_domain.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ida_domain:
_ida_domain.SwigPyIterator_swigregister(SwigPyIterator)
class Database(object):
    r"""Provides access and control over the loaded IDA database."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(self) -> Database
        Constructs a new interface to the IDA database.

        When running inside IDA, this refers to the currently open database. Use open() to load a new database when using IDA as a library.
        """
        _ida_domain.Database_swiginit(self, _ida_domain.new_Database())

    def open(self, *args):
        r"""
        open(self, db_path, db_args=IdaCommandBuilder()) -> bool
        Opens a database from the specified file path.

        :param db_path: Path to the input file.
        :param db_args: Command builder responsible for passing arguments to IDA kernel.
        :return: True if the database was successfully opened, false otherwise.
        """
        return _ida_domain.Database_open(self, *args)

    def is_open(self):
        r"""
        is_open(self) -> bool
        Checks if the database is loaded.

        :return: True if a database is open, false otherwise.
        """
        return _ida_domain.Database_is_open(self)

    def close(self, save):
        r"""
        close(self, save)
        Closes the currently open database.

        :param save: If true, saves changes before closing; otherwise, discards them.
        """
        return _ida_domain.Database_close(self, save)

    def _get_entry_point(self):
        r"""
        _get_entry_point(self) -> ea_t
        Retrieves the entry point address of the binary.

        :return: The effective address (ea_t) of the entry point.
        """
        return _ida_domain.Database__get_entry_point(self)

    def set_current_ea(self, ea):
        r"""
        set_current_ea(self, ea) -> bool
        Sets the current effective address (equivalent to the "screen EA" in IDA GUI).

        :param ea: 
        :return: True if the address was successfully set, false otherwise.
        """
        return _ida_domain.Database_set_current_ea(self, ea)

    def get_current_ea(self):
        r"""
        get_current_ea(self) -> ea_t
        Get the current effective address (equivalent to the "screen EA" in IDA GUI).

        :return: The current effective address.
        """
        return _ida_domain.Database_get_current_ea(self)

    def _get_minimum_ea(self):
        r"""
        _get_minimum_ea(self) -> ea_t
        Get the minimum effective address from this database.

        :return: The minimum effective address.
        """
        return _ida_domain.Database__get_minimum_ea(self)

    def _get_maximum_ea(self):
        r"""
        _get_maximum_ea(self) -> ea_t
        Get the maximum effective address from this database.

        :return: The maximum effective address.
        """
        return _ida_domain.Database__get_maximum_ea(self)

    def _get_metadata(self):
        r"""
        _get_metadata(self) -> StringToStringMap
        Retrieves a map of key-value metadata about the current database.

        :return: Map of string key-value pairs representing database metadata.
        """
        return _ida_domain.Database__get_metadata(self)
    segments = property(_ida_domain.Database_segments_get, doc=r"""segments""")
    functions = property(_ida_domain.Database_functions_get, doc=r"""functions""")
    basic_blocks = property(_ida_domain.Database_basic_blocks_get, doc=r"""basic_blocks""")
    instructions = property(_ida_domain.Database_instructions_get, doc=r"""instructions""")
    comments = property(_ida_domain.Database_comments_get, doc=r"""comments""")
    strings = property(_ida_domain.Database_strings_get, doc=r"""strings""")
    names = property(_ida_domain.Database_names_get, doc=r"""names""")
    types = property(_ida_domain.Database_types_get, doc=r"""types""")
    bytes = property(_ida_domain.Database_bytes_get, doc=r"""bytes""")
    signature_files = property(_ida_domain.Database_signature_files_get, doc=r"""signature_files""")
    xrefs = property(_ida_domain.Database_xrefs_get, doc=r"""xrefs""")

    maximum_ea = property(_get_maximum_ea, doc=r"""maximum_ea : ea_t""")
    minimum_ea = property(_get_minimum_ea, doc=r"""minimum_ea : ea_t""")
    entry_point = property(_get_entry_point, doc=r"""entry_point : ea_t""")
    metadata = property(_get_metadata, doc=r"""metadata : dict""")

    __swig_destroy__ = _ida_domain.delete_Database

# Register Database in _ida_domain:
_ida_domain.Database_swigregister(Database)
class Segments(object):
    r"""Provides access to segment-related operations in the IDA database."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, database):
        r"""
        __init__(self, database) -> Segments
        Constructs a segments handler for the given database.

        :param database: Reference to the active IDA database.
        """
        _ida_domain.Segments_swiginit(self, _ida_domain.new_Segments(database))

    def get_at(self, ea):
        r"""
        get_at(self, ea) -> segment_t
        Retrieves the segment that contains the given address.

        :param ea: The effective address to search.
        :return: A pointer to the containing segment, or nullptr if none found.
        """
        return _ida_domain.Segments_get_at(self, ea)

    def get_name(self, segment):
        r"""
        get_name(self, segment) -> std::string
        Retrieves the name of the given segment.

        :param segment: Pointer to the segment.
        :return: The segment name as a string, or an empty string if unavailable.
        """
        return _ida_domain.Segments_get_name(self, segment)

    def set_name(self, segment, name):
        r"""
        set_name(self, segment, name) -> bool
        Renames a segment.

        :param segment: Pointer to the segment to rename.
        :param name: The new name to assign to the segment.
        :return: True if the rename operation succeeded, false otherwise.
        """
        return _ida_domain.Segments_set_name(self, segment, name)

    def get_all(self):
        r"""
        get_all(self) -> SegmentsIterator
        Retrieves an iterator over all segments in the database.

        :return: A SegmentsIterator instance.
        """
        return _ida_domain.Segments_get_all(self)
    __swig_destroy__ = _ida_domain.delete_Segments

# Register Segments in _ida_domain:
_ida_domain.Segments_swigregister(Segments)
class SegmentsIterator(object):
    r"""Iterator for segments in the IDA database."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, database):
        r"""
        __init__(self, database) -> SegmentsIterator
        Constructs a segments iterator for the given database.

        :param database: Reference to the active IDA database.
        """
        _ida_domain.SegmentsIterator_swiginit(self, _ida_domain.new_SegmentsIterator(database))

    def get_first(self):
        r"""
        get_first(self) -> segment_t
        Retrieves the first segment in the database.

        :return: A pointer to the first segment, or nullptr if none exist.
        """
        return _ida_domain.SegmentsIterator_get_first(self)

    def get_next(self):
        r"""
        get_next(self) -> segment_t
        Retrieves the next segment in the database.

        :return: A pointer to the next segment, or nullptr if no more segments are available.
        """
        return _ida_domain.SegmentsIterator_get_next(self)

    def __iter__(self) -> "Iterator[segment_t]":
      r"""__iter__(self) -> Iterator[segment_t]"""
      seg = self.get_first()
      while seg:
        yield seg
        seg = self.get_next()

    __swig_destroy__ = _ida_domain.delete_SegmentsIterator

# Register SegmentsIterator in _ida_domain:
_ida_domain.SegmentsIterator_swigregister(SegmentsIterator)
class Functions(object):
    r"""Provides access to function-related operations within the database."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, database):
        r"""
        __init__(self, database) -> Functions
        Constructs a functions handler for the given database.

        :param database: Reference to the active IDA database.
        """
        _ida_domain.Functions_swiginit(self, _ida_domain.new_Functions(database))

    def get_between(self, start, end):
        r"""
        get_between(self, start, end) -> FunctionsIterator
        Retrieves functions between specified addresses.

        :param start: Start address of the range.
        :param end: End address of the range.
        :return: A functions iterator.
        """
        return _ida_domain.Functions_get_between(self, start, end)

    def get_all(self):
        r"""
        get_all(self) -> FunctionsIterator
        Retrieves all functions in the database.

        :return: A functions iterator covering the entire database range.
        """
        return _ida_domain.Functions_get_all(self)

    def get_at(self, ea):
        r"""
        get_at(self, ea) -> func_t
        Retrieves the function associated with the given address.

        :param ea: An effective address within the function body.
        :return: A pointer to the corresponding function (func_t*), or nullptr on failure.
        """
        return _ida_domain.Functions_get_at(self, ea)

    def get_name(self, func):
        r"""
        get_name(self, func) -> std::string
        Retrieves the name of the given function.

        :param func: The function instance.
        :return: The function's name as a string, or an empty string on failure.
        """
        return _ida_domain.Functions_get_name(self, func)

    def set_name(self, func, name):
        r"""
        set_name(self, func, name) -> bool
        Renames the given function.

        :param func: The function instance.
        :param name: The new name to assign to the function.
        :return: True on success, false otherwise.
        """
        return _ida_domain.Functions_set_name(self, func, name)

    def get_basic_blocks(self, func):
        r"""
        get_basic_blocks(self, func) -> BasicBlocksIterator
        Retrieves the basic blocks that compose the given function.

        :param func: The function instance.
        :return: An iterator for the function's basic blocks.
        """
        return _ida_domain.Functions_get_basic_blocks(self, func)

    def get_instructions(self, func):
        r"""
        get_instructions(self, func) -> InstructionsIterator
        Retrieves all instructions within the given function.

        :param func: The function instance.
        :return: An instruction iterator for the function.
        """
        return _ida_domain.Functions_get_instructions(self, func)

    def get_disassembly(self, func):
        r"""
        get_disassembly(self, func) -> StringVector
        Retrieves the disassembly lines for the given function.

        :param func: The function instance.
        :return: A vector of strings, each representing a line of disassembly.
        """
        return _ida_domain.Functions_get_disassembly(self, func)

    def get_pseudocode(self, func, remove_tags=True):
        r"""
        get_pseudocode(self, func, remove_tags=True) -> StringVector
        Retrieves the decompiled pseudocode of the given function.

        :param func: The function instance.
        :param remove_tags: Remove the tags, return a cleaned line.
        :return: A vector of strings, each representing a line of pseudocode.
        """
        return _ida_domain.Functions_get_pseudocode(self, func, remove_tags)

    def get_signature(self, func):
        r"""
        get_signature(self, func) -> std::string
        Retrieves the function's type signature.

        :param func: The function instance.
        :return: The signature as a string, or an empty string if unavailable.
        """
        return _ida_domain.Functions_get_signature(self, func)

    def matches_signature(self, func, signature):
        r"""
        matches_signature(self, func, signature) -> bool
        Checks if a function matches the given signature.

        :param func: The function instance.
        :param signature: The signature string to compare.
        :return: True if the function matches, false otherwise.
        """
        return _ida_domain.Functions_matches_signature(self, func, signature)

    def create(self, ea):
        r"""
        create(self, ea) -> bool
        Creates a new function at the specified address.

        :param ea: The effective address to start the function.
        :return: True if the function was successfully created, false otherwise.
        """
        return _ida_domain.Functions_create(self, ea)

    def remove(self, ea):
        r"""
        remove(self, ea) -> bool
        Deletes the function at the specified address.

        :param ea: The effective address of the function to remove.
        :return: True if the function was successfully removed, false otherwise.
        """
        return _ida_domain.Functions_remove(self, ea)
    __swig_destroy__ = _ida_domain.delete_Functions

# Register Functions in _ida_domain:
_ida_domain.Functions_swigregister(Functions)
class FunctionsIterator(object):
    r"""Iterator for functions within a specified address range."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, database, start_ea, end_ea):
        r"""
        __init__(self, database, start_ea, end_ea) -> FunctionsIterator
        Constructs a functions iterator for the given range.

        :param database: Reference to the active IDA database.
        :param start_ea: Start address of the range.
        :param end_ea: End address of the range.
        """
        _ida_domain.FunctionsIterator_swiginit(self, _ida_domain.new_FunctionsIterator(database, start_ea, end_ea))

    def get_first(self):
        r"""
        get_first(self) -> func_t
        Retrieves the first function in the range.

        :return: A pointer to the first function (func_t*), or nullptr if none exist.
        """
        return _ida_domain.FunctionsIterator_get_first(self)

    def get_next(self):
        r"""
        get_next(self) -> func_t
        Retrieves the next function after the current one.

        :return: A pointer to the next function (func_t*), or nullptr if none remain.
        """
        return _ida_domain.FunctionsIterator_get_next(self)

    def __iter__(self) -> "Iterator[func_t]":
      r"""__iter__(self) -> Iterator[func_t]"""
      func = self.get_first()
      while func:
        yield func
        func = self.get_next()

    __swig_destroy__ = _ida_domain.delete_FunctionsIterator

# Register FunctionsIterator in _ida_domain:
_ida_domain.FunctionsIterator_swigregister(FunctionsIterator)
class Instructions(object):
    r"""Provides access to instruction-related operations."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, database):
        r"""
        __init__(self, database) -> Instructions
        Constructs an instructions handler for the given database.

        :param database: Reference to the active IDA database.
        """
        _ida_domain.Instructions_swiginit(self, _ida_domain.new_Instructions(database))

    def is_valid(self, insn):
        r"""
        is_valid(self, insn) -> bool
        Checks if the given instruction is valid.

        :param insn: The instruction to validate.
        :return: true if the instruction is valid, false otherwise.
        """
        return _ida_domain.Instructions_is_valid(self, insn)

    def decode(self, ea):
        r"""
        decode(self, ea) -> BoolInsntPair
        Decodes the instruction at the specified address.

        :param ea: The effective address of the instruction.
        :return: A pair <bool, insn_t>. The bool indicates success; if false, the instruction is invalid.
        """
        return _ida_domain.Instructions_decode(self, ea)

    def get_disassembly(self, insn):
        r"""
        get_disassembly(self, insn) -> BoolStringPair
        Retrieves the disassembled string representation of the given instruction.

        :param insn: The instruction to disassemble.
        :return: A pair <bool, string>. If disassembly fails, the bool is false.
        """
        return _ida_domain.Instructions_get_disassembly(self, insn)

    def get_between(self, start, end):
        r"""
        get_between(self, start, end) -> InstructionsIterator
        Retrieves instructions between the specified addresses.

        :param start: Start of the address range.
        :param end: End of the address range.
        :return: An instruction iterator.
        """
        return _ida_domain.Instructions_get_between(self, start, end)
    __swig_destroy__ = _ida_domain.delete_Instructions

# Register Instructions in _ida_domain:
_ida_domain.Instructions_swigregister(Instructions)
class InstructionsIterator(object):
    r"""Iterator for instructions within a specified address range."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, database, start_ea, end_ea):
        r"""
        __init__(self, database, start_ea, end_ea) -> InstructionsIterator
        Constructs an instructions iterator for the specified range.

        :param database: Reference to the active IDA database.
        :param start_ea: Start address of the range.
        :param end_ea: End address of the range.
        """
        _ida_domain.InstructionsIterator_swiginit(self, _ida_domain.new_InstructionsIterator(database, start_ea, end_ea))

    def get_first(self):
        r"""
        get_first(self) -> BoolInsntPair
        Retrieves the first instruction in the range.

        :return: A pair <bool, insn_t>. If decoding fails, the bool is false.
        """
        return _ida_domain.InstructionsIterator_get_first(self)

    def get_next(self):
        r"""
        get_next(self) -> BoolInsntPair
        Retrieves the next instruction in the range.

        :return: A pair <bool, insn_t>. If decoding fails, the bool is false.
        """
        return _ida_domain.InstructionsIterator_get_next(self)

    def __iter__(self) -> "Iterator[insn_t]":
      r"""__iter__(self) -> Iterator[insn_t]"""
      stat, insn = self.get_first()
      while stat:
        yield insn
        stat, insn = self.get_next()

    __swig_destroy__ = _ida_domain.delete_InstructionsIterator

# Register InstructionsIterator in _ida_domain:
_ida_domain.InstructionsIterator_swigregister(InstructionsIterator)
class BasicBlocks(object):
    r"""Interface for working with basic blocks in functions."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, database):
        r"""
        __init__(self, database) -> BasicBlocks
        Constructs a basic block handler for the given database.

        :param database: Reference to the active IDA database.
        """
        _ida_domain.BasicBlocks_swiginit(self, _ida_domain.new_BasicBlocks(database))

    def get_instructions(self, block):
        r"""
        get_instructions(self, block) -> InstructionsIterator
        Retrieves the instructions within a given basic block.

        :param block: The basic block.
        :return: An instruction iterator for the block.
        """
        return _ida_domain.BasicBlocks_get_instructions(self, block)

    def get_between(self, start_ea, end_ea):
        r"""
        get_between(self, start_ea, end_ea) -> BasicBlocksIterator
        Retrieves all basic blocks between two addresses.

        :param start_ea: Start address of the range.
        :param end_ea: End address of the range.
        :return: A basic block iterator.
        """
        return _ida_domain.BasicBlocks_get_between(self, start_ea, end_ea)
    __swig_destroy__ = _ida_domain.delete_BasicBlocks

# Register BasicBlocks in _ida_domain:
_ida_domain.BasicBlocks_swigregister(BasicBlocks)
class BasicBlocksIterator(object):
    r"""Iterator for basic blocks in a function."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, database, start_ea, end_ea):
        r"""
        __init__(self, database, start_ea, end_ea) -> BasicBlocksIterator
        Constructs a basic block iterator for the specified function.

        :param database: Reference to the active IDA database.
        :param start_ea: Start address of the function.
        :param end_ea: End address of the function.
        """
        _ida_domain.BasicBlocksIterator_swiginit(self, _ida_domain.new_BasicBlocksIterator(database, start_ea, end_ea))

    def get_count(self):
        r"""
        get_count(self) -> int
        Retrieves the number of basic blocks in the current range.

        :return: The number of basic blocks.
        """
        return _ida_domain.BasicBlocksIterator_get_count(self)

    def get_at_index(self, index):
        r"""
        get_at_index(self, index) -> qbasic_block_t
        Retrieves the basic block at the given index.

        :param index: The index of the block.
        :return: The qbasic_block_t at the specified index, or an empty block on error.
        """
        return _ida_domain.BasicBlocksIterator_get_at_index(self, index)

    def __iter__(self) -> "Iterator[qbasic_block_t]":
      r"""__iter__(self) -> Iterator[qbasic_block_t]"""
      count = self.get_count()
      for index in range(count):
        block = self.get_at_index(index)
        yield block

    __swig_destroy__ = _ida_domain.delete_BasicBlocksIterator

# Register BasicBlocksIterator in _ida_domain:
_ida_domain.BasicBlocksIterator_swigregister(BasicBlocksIterator)
class Strings(object):
    r"""Provides access to string-related operations in the IDA database."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, database):
        r"""
        __init__(self, database) -> Strings
        Constructs a strings handler for the given database.

        :param database: Reference to the active IDA database.
        """
        _ida_domain.Strings_swiginit(self, _ida_domain.new_Strings(database))

    def get_count(self):
        r"""
        get_count(self) -> int
        Retrieves the total number of extracted strings.

        :return: The number of stored strings.
        """
        return _ida_domain.Strings_get_count(self)

    def get_at_index(self, index):
        r"""
        get_at_index(self, index) -> EAStringPair
        Retrieves the string at the specified index.

        :param index: Index of the string to retrieve.
        :return: A pair (effective address, string content) at the given index.
        """
        return _ida_domain.Strings_get_at_index(self, index)

    def get_at(self, ea):
        r"""
        get_at(self, ea) -> BoolStringPair
        Retrieves the string located at the specified address.

        :param ea: The effective address.
        :return: A pair (success, string content). If not found, success is false.
        """
        return _ida_domain.Strings_get_at(self, ea)

    def get_all(self):
        r"""
        get_all(self) -> StringsIterator
        Retrieves an iterator over all extracted strings in the database.

        :return: A StringsIterator instance.
        """
        return _ida_domain.Strings_get_all(self)
    __swig_destroy__ = _ida_domain.delete_Strings

# Register Strings in _ida_domain:
_ida_domain.Strings_swigregister(Strings)
class StringsIterator(object):
    r"""Iterator for strings extracted from the IDA database."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, database):
        r"""
        __init__(self, database) -> StringsIterator
        Constructs a string iterator for the given database.

        :param database: Reference to the active IDA database.
        """
        _ida_domain.StringsIterator_swiginit(self, _ida_domain.new_StringsIterator(database))

    def get_first(self):
        r"""
        get_first(self) -> EAStringPair
        Retrieves the first string in the database.

        :return: A pair (effective address, string content). If none found, the string is empty.
        """
        return _ida_domain.StringsIterator_get_first(self)

    def get_next(self):
        r"""
        get_next(self) -> EAStringPair
        Retrieves the next string in the database.

        :return: A pair (effective address, string content). If no more strings, the string is empty.
        """
        return _ida_domain.StringsIterator_get_next(self)

    def __iter__(self) -> "Iterator[Tuple[ea_t, str]]":
      r"""__iter__(self) -> Iterator[Tuple[ea_t, str]]"""
      pair = self.get_first()
      while pair.first != ida_idaapi.BADADDR:
        yield (pair.first, pair.second)
        pair = self.get_next()

    __swig_destroy__ = _ida_domain.delete_StringsIterator

# Register StringsIterator in _ida_domain:
_ida_domain.StringsIterator_swigregister(StringsIterator)
class Names(object):
    r"""Provides access to symbol and label management in the IDA database."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, database):
        r"""
        __init__(self, database) -> Names
        Constructs a names handler for the given database.

        :param database: Reference to the active IDA database.
        """
        _ida_domain.Names_swiginit(self, _ida_domain.new_Names(database))

    def get_at(self, ea):
        r"""
        get_at(self, ea) -> BoolStringPair
        Retrieves the name at the specified address.

        :param ea: The effective address.
        :return: A pair (bool success, name string). If the name doesn't exist, bool is false.
        """
        return _ida_domain.Names_get_at(self, ea)

    def get_count(self):
        r"""
        get_count(self) -> int
        Retrieves the total number of named elements in the database.

        :return: The count of named elements.
        """
        return _ida_domain.Names_get_count(self)

    def get_at_index(self, index):
        r"""
        get_at_index(self, index) -> EAStringPair
        Retrieves the named element at the specified index.

        :param index: The index in the name list.
        :return: A pair (effective address, name string) at the given index.
        """
        return _ida_domain.Names_get_at_index(self, index)

    def get_all(self):
        r"""
        get_all(self) -> NamesIterator
        Returns an iterator over all named elements in the database.

        :return: A names iterator.
        """
        return _ida_domain.Names_get_all(self)
    __swig_destroy__ = _ida_domain.delete_Names

# Register Names in _ida_domain:
_ida_domain.Names_swigregister(Names)
class NamesIterator(object):
    r"""Iterator for named elements (e.g., labels, symbols) in the IDA database."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, database):
        r"""
        __init__(self, database) -> NamesIterator
        Constructs a names iterator for the given database.

        :param database: Reference to the active IDA database.
        """
        _ida_domain.NamesIterator_swiginit(self, _ida_domain.new_NamesIterator(database))

    def get_first(self):
        r"""
        get_first(self) -> EAStringPair
        Retrieves the first named element in the database.

        :return: A pair (effective address, name string). If none found, the string is empty.
        """
        return _ida_domain.NamesIterator_get_first(self)

    def get_next(self):
        r"""
        get_next(self) -> EAStringPair
        Retrieves the next named element in the database.

        :return: A pair (effective address, name string). If no more names, the string is empty.
        """
        return _ida_domain.NamesIterator_get_next(self)

    def __iter__(self) -> "Iterator[Tuple[ea_t, str]]":
      r"""__iter__(self) -> Iterator[Tuple[ea_t, str]]"""
      pair = self.get_first()
      while pair.first != ida_idaapi.BADADDR:
        yield (pair.first, pair.second)
        pair = self.get_next()

    __swig_destroy__ = _ida_domain.delete_NamesIterator

# Register NamesIterator in _ida_domain:
_ida_domain.NamesIterator_swigregister(NamesIterator)
class Xrefs(object):
    r"""Provides access to cross-reference (xref) analysis in the IDA database."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, database):
        r"""
        __init__(self, database) -> Xrefs
        Constructs an xrefs handler for the given database.

        :param database: Reference to the active IDA database.
        """
        _ida_domain.Xrefs_swiginit(self, _ida_domain.new_Xrefs(database))

    def get_to(self, ea):
        r"""
        get_to(self, ea) -> XrefsToIterator
        Creates an iterator over all xrefs pointing to a given address.

        :param ea: Target effective address.
        :return: An iterator over incoming xrefs.
        """
        return _ida_domain.Xrefs_get_to(self, ea)

    def get_from(self, ea):
        r"""
        get_from(self, ea) -> XrefsFromIterator
        Creates an iterator over all xrefs originating from a given address.

        :param ea: Source effective address.
        :return: An iterator over outgoing xrefs.
        """
        return _ida_domain.Xrefs_get_from(self, ea)
    __swig_destroy__ = _ida_domain.delete_Xrefs

# Register Xrefs in _ida_domain:
_ida_domain.Xrefs_swigregister(Xrefs)
class XrefsIterator(object):
    r"""Base class for cross-reference iterators."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ida_domain.delete_XrefsIterator

# Register XrefsIterator in _ida_domain:
_ida_domain.XrefsIterator_swigregister(XrefsIterator)
class XrefsToIterator(XrefsIterator):
    r"""Iterator for incoming cross-references (to the specified address)."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, database, ea):
        r"""
        __init__(self, database, ea) -> XrefsToIterator
        Constructs an iterator for cross-references

        :param database: Reference to the active IDA database.
        :param ea: The target effective address.
        """
        _ida_domain.XrefsToIterator_swiginit(self, _ida_domain.new_XrefsToIterator(database, ea))

    def get_first(self):
        r"""
        get_first(self) -> BoolXrefBlkPair
        Retrieves the first incoming xref.

        :return: A pair <bool, xrefblk_t>. The bool is false if no xref is found.
        """
        return _ida_domain.XrefsToIterator_get_first(self)

    def get_next(self):
        r"""
        get_next(self) -> BoolXrefBlkPair
        Retrieves the next incoming xref.

        :return: A pair <bool, xrefblk_t>. The bool is false if no more xrefs exist.
        """
        return _ida_domain.XrefsToIterator_get_next(self)

    def __iter__(self) -> "Iterator[xref_t]":
      r"""__iter__(self) -> Iterator[xref_t]"""
      stat, xref = self.get_first()
      while stat:
        yield xref
        stat, xref = self.get_next()

    __swig_destroy__ = _ida_domain.delete_XrefsToIterator

# Register XrefsToIterator in _ida_domain:
_ida_domain.XrefsToIterator_swigregister(XrefsToIterator)
class XrefsFromIterator(XrefsIterator):
    r"""Iterator for outgoing cross-references (from the specified address)."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, database, ea):
        r"""
        __init__(self, database, ea) -> XrefsFromIterator
        Constructs an iterator for cross-references

        :param database: Reference to the active IDA database.
        :param ea: The source effective address.
        """
        _ida_domain.XrefsFromIterator_swiginit(self, _ida_domain.new_XrefsFromIterator(database, ea))

    def get_first(self):
        r"""
        get_first(self) -> BoolXrefBlkPair
        Retrieves the first outgoing xref.

        :return: A pair <bool, xrefblk_t>. The bool is false if no xref is found.
        """
        return _ida_domain.XrefsFromIterator_get_first(self)

    def get_next(self):
        r"""
        get_next(self) -> BoolXrefBlkPair
        Retrieves the next outgoing xref.

        :return: A pair <bool, xrefblk_t>. The bool is false if no more xrefs exist.
        """
        return _ida_domain.XrefsFromIterator_get_next(self)

    def __iter__(self) -> "Iterator[xref_t]":
      r"""__iter__(self) -> Iterator[xref_t]"""
      stat, xref = self.get_first()
      while stat:
        yield xref
        stat, xref = self.get_next()

    __swig_destroy__ = _ida_domain.delete_XrefsFromIterator

# Register XrefsFromIterator in _ida_domain:
_ida_domain.XrefsFromIterator_swigregister(XrefsFromIterator)
class Types(object):
    r"""Provides access to type information and manipulation in the IDA database."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, database):
        r"""
        __init__(self, database) -> Types
        Constructs a types handler for the given database.

        :param database: Reference to the active IDA database.
        """
        _ida_domain.Types_swiginit(self, _ida_domain.new_Types(database))

    def get_type_name(self, ea):
        r"""
        get_type_name(self, ea) -> BoolStringPair
        Retrieves the type information of the item at the given address.

        :param ea: The effective address.
        :return: A pair (success, string representing the type name). If not found, success is false.
        """
        return _ida_domain.Types_get_type_name(self, ea)

    def apply_named_type(self, ea, type):
        r"""
        apply_named_type(self, ea, type) -> bool
        Applies a named type to the given address.

        :param ea: The effective address.
        :param type: The name of the type to apply.
        :return: True if the type was applied successfully, false otherwise.
        """
        return _ida_domain.Types_apply_named_type(self, ea, type)

    def get_all(self):
        r"""
        get_all(self) -> TypesIterator
        Retrieves an iterator over all user-defined types in the database.

        :return: A TypesIterator instance.
        """
        return _ida_domain.Types_get_all(self)
    __swig_destroy__ = _ida_domain.delete_Types

# Register Types in _ida_domain:
_ida_domain.Types_swigregister(Types)
class TypesIterator(object):
    r"""Iterator for user-defined types in the IDA type system."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, database):
        r"""
        __init__(self, database) -> TypesIterator
        Constructs a type iterator for the given database.

        :param database: Reference to the active IDA database.
        """
        _ida_domain.TypesIterator_swiginit(self, _ida_domain.new_TypesIterator(database))

    def get_first(self):
        r"""
        get_first(self) -> BoolTinfoPair
        Retrieves the first user-defined type in the database.

        :return: A pair <bool, tinfo_t>. If no type is found, the bool is false.
        """
        return _ida_domain.TypesIterator_get_first(self)

    def get_next(self):
        r"""
        get_next(self) -> BoolTinfoPair
        Retrieves the next user-defined type in the database.

        :return: A pair <bool, tinfo_t>. If no more types, the bool is false.
        """
        return _ida_domain.TypesIterator_get_next(self)

    def __iter__(self) -> "Iterator[tinfo_t]":
      r"""__iter__(self) -> Iterator[tinfo_t]"""
      stat, tinfo = self.get_first()
      while stat:
        yield tinfo
        stat, tinfo = self.get_next()

    __swig_destroy__ = _ida_domain.delete_TypesIterator

# Register TypesIterator in _ida_domain:
_ida_domain.TypesIterator_swigregister(TypesIterator)
class SignaturesFiles(object):
    r"""Provides access to FLIRT signature (.sig) files in the IDA database."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, database):
        r"""
        __init__(self, database) -> SignaturesFiles
        Constructs a signature handler for the given database.

        :param database: Reference to the active IDA database.
        """
        _ida_domain.SignaturesFiles_swiginit(self, _ida_domain.new_SignaturesFiles(database))

    def get_available_sig_files(self):
        r"""
        get_available_sig_files(self) -> StringVector
        Retrieves a list of available FLIRT signature (.sig) files.

        :return: A vector of available signature file names.
        """
        return _ida_domain.SignaturesFiles_get_available_sig_files(self)
    __swig_destroy__ = _ida_domain.delete_SignaturesFiles

# Register SignaturesFiles in _ida_domain:
_ida_domain.SignaturesFiles_swigregister(SignaturesFiles)
class Comments(object):
    r"""Provides access to user-defined comments in the IDA database."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, database):
        r"""
        __init__(self, database) -> Comments
        Constructs a comment manager for the given database.

        :param database: Reference to the active IDA database.
        """
        _ida_domain.Comments_swiginit(self, _ida_domain.new_Comments(database))

    def get(self, ea):
        r"""
        get(self, ea) -> BoolStringPair
        Retrieves the comment at the specified address.

        :param ea: The effective address.
        :return: A pair (success, comment string). If no comment exists, success is false.
        """
        return _ida_domain.Comments_get(self, ea)

    def set(self, ea, comment):
        r"""
        set(self, ea, comment) -> bool
        Sets a comment at the specified address.

        :param ea: The effective address.
        :param comment: The comment text to assign.
        :return: True if the comment was successfully set, false otherwise.
        """
        return _ida_domain.Comments_set(self, ea, comment)

    def get_all(self, include_repeatable):
        r"""
        get_all(self, include_repeatable) -> CommentsIterator
        Creates an iterator for all comments in the database.

        :param include_repeatable: Whether to include repeatable comments during iteration.
        :return: A CommentsIterator instance.
        """
        return _ida_domain.Comments_get_all(self, include_repeatable)
    __swig_destroy__ = _ida_domain.delete_Comments

# Register Comments in _ida_domain:
_ida_domain.Comments_swigregister(Comments)
class CommentsIterator(object):
    r"""Iterator for user-defined comments in the IDA database."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, database, include_repeatable=False):
        r"""
        Iterator(database, include_repeatable=False) -> CommentsIterator
        Constructs a comment iterator for the given database.

        :param database: Reference to the active IDA database.
        :param include_repeatable: Whether to include repeatable comments during iteration.
        """
        _ida_domain.CommentsIterator_swiginit(self, _ida_domain.new_CommentsIterator(database, include_repeatable))

    def get_first(self):
        r"""
        get_first(self) -> EAStringPair
        Retrieves the first comment in the database.

        :return: A pair (address, comment string). If no comments exist, the string is empty.
        """
        return _ida_domain.CommentsIterator_get_first(self)

    def get_next(self):
        r"""
        get_next(self) -> EAStringPair
        Retrieves the next comment in the database.

        :return: A pair (address, comment string). If no more comments exist, the string is empty.
        """
        return _ida_domain.CommentsIterator_get_next(self)

    def __iter__(self) -> "Iterator[Tuple[ea_t, str]]":
      r"""__iter__(self) -> Iterator[Tuple[ea_t, str]]"""
      comm_pair = self.get_first()
      while comm_pair.first != ida_idaapi.BADADDR:
        yield (comm_pair.first, comm_pair.second)
        comm_pair = self.get_next()

    __swig_destroy__ = _ida_domain.delete_CommentsIterator

# Register CommentsIterator in _ida_domain:
_ida_domain.CommentsIterator_swigregister(CommentsIterator)
class Bytes(object):
    r"""Handles operations related to raw data access from the IDA database."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, database):
        r"""
        __init__(self, database) -> Bytes
        Constructs a bytes handler for the given database.

        :param database: Reference to the active IDA database.
        """
        _ida_domain.Bytes_swiginit(self, _ida_domain.new_Bytes(database))

    def get_byte(self, ea):
        r"""
        get_byte(self, ea) -> BoolUint8Pair
        Retrieves a byte at the specified address.

        :param ea: The effective address.
        :return: A pair of (success flag, value). If the flag is false, the value is undefined.
        """
        return _ida_domain.Bytes_get_byte(self, ea)

    def get_word(self, ea):
        r"""
        get_word(self, ea) -> BoolUint16Pair
        Retrieves a word (2 bytes) at the specified address.

        :param ea: The effective address.
        :return: A pair of (success flag, value). If the flag is false, the value is undefined.
        """
        return _ida_domain.Bytes_get_word(self, ea)

    def get_dword(self, ea):
        r"""
        get_dword(self, ea) -> BoolUint32Pair
        Retrieves a double word (4 bytes) at the specified address.

        :param ea: The effective address.
        :return: A pair of (success flag, value). If the flag is false, the value is undefined.
        """
        return _ida_domain.Bytes_get_dword(self, ea)

    def get_qword(self, ea):
        r"""
        get_qword(self, ea) -> BoolUint64Pair
        Retrieves a quad word (8 bytes) at the specified address.

        :param ea: The effective address.
        :return: A pair of (success flag, value). If the flag is false, the value is undefined.
        """
        return _ida_domain.Bytes_get_qword(self, ea)

    def get_float(self, ea):
        r"""
        get_float(self, ea) -> BoolFloatPair
        Retrieves a float value at the specified address.

        :param ea: The effective address.
        :return: A pair of (success flag, value). If the flag is false, the value is undefined.
        """
        return _ida_domain.Bytes_get_float(self, ea)

    def get_double(self, ea):
        r"""
        get_double(self, ea) -> BoolDoublePair
        Retrieves a double (floating-point) value at the specified address.

        :param ea: The effective address.
        :return: A pair of (success flag, value). If the flag is false, the value is undefined.
        """
        return _ida_domain.Bytes_get_double(self, ea)

    def get_disassembly(self, ea):
        r"""
        get_disassembly(self, ea) -> BoolStringPair
        Retrieves the disassembly text at a specified address.

        :param ea: The effective address.
        :return: A pair of (success flag, disassembly string). If the flag is false, the string is undefined.
        """
        return _ida_domain.Bytes_get_disassembly(self, ea)
    __swig_destroy__ = _ida_domain.delete_Bytes

# Register Bytes in _ida_domain:
_ida_domain.Bytes_swigregister(Bytes)
PROJECT_VERSION_MAJOR = _ida_domain.PROJECT_VERSION_MAJOR

PROJECT_VERSION_MINOR = _ida_domain.PROJECT_VERSION_MINOR

PROJECT_VERSION_PATCH = _ida_domain.PROJECT_VERSION_PATCH

PROJECT_VERSION_PRE_RELEASE = _ida_domain.PROJECT_VERSION_PRE_RELEASE

PROJECT_VERSION_BUILD = _ida_domain.PROJECT_VERSION_BUILD

PROJECT_VERSION = _ida_domain.PROJECT_VERSION

FULL_VERSION = _ida_domain.FULL_VERSION

class VersionInfo(object):
    r"""Provides library version information."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __str__(self):
      return f"Version information: {self.api_version_full} based on IDA SDK version {self.sdk_version}"
    def __repr__(self):
      return self.__str__()

    @classmethod
    def __class_getitem__(cls, key):
      return cls

    __swig_destroy__ = _ida_domain.delete_VersionInfo

# Register VersionInfo in _ida_domain:
_ida_domain.VersionInfo_swigregister(VersionInfo)
cvar = _ida_domain.cvar
VersionInfo.major_version = _ida_domain.cvar.VersionInfo_major_version
VersionInfo.minor_version = _ida_domain.cvar.VersionInfo_minor_version
VersionInfo.patch_version = _ida_domain.cvar.VersionInfo_patch_version
VersionInfo.api_version_full = _ida_domain.cvar.VersionInfo_api_version_full
VersionInfo.api_version = _ida_domain.cvar.VersionInfo_api_version
VersionInfo.sdk_version = _ida_domain.cvar.VersionInfo_sdk_version

class IdaCommandBuilder(object):
    r"""Class to build and manage IDA command line options. Provides a fluent interface to set options and generate command lines for IDA Pro/IDA Free based on the available command line switches."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(self) -> IdaCommandBuilder
        Initialize IDA command line options.
        """
        _ida_domain.IdaCommandBuilder_swiginit(self, _ida_domain.new_IdaCommandBuilder())

    def use_text_mode(self):
        r"""
        use_text_mode(self) -> IdaCommandBuilder
        Use idat (text interface) instead of ida.

        :return: Reference to this object for method chaining
        """
        return _ida_domain.IdaCommandBuilder_use_text_mode(self)

    def auto_analysis(self, enabled=True):
        r"""
        auto_analysis(self, enabled=True) -> IdaCommandBuilder
        Enable or disable auto analysis.

        :param enabled: True to enable, false to disable
        :return: Reference to this object for method chaining
        """
        return _ida_domain.IdaCommandBuilder_auto_analysis(self, enabled)

    def autonomous(self, enabled=True):
        r"""
        autonomous(self, enabled=True) -> IdaCommandBuilder
        Enable or disable autonomous mode (no dialog boxes).

        :param enabled: True to enable, false to disable
        :return: Reference to this object for method chaining
        """
        return _ida_domain.IdaCommandBuilder_autonomous(self, enabled)

    def set_loading_address(self, address):
        r"""
        set_loading_address(self, address) -> IdaCommandBuilder
        Set loading address in paragraphs (hexadecimal).

        :param address: Loading address in paragraphs (16 bytes each)
        :return: Reference to this object for method chaining
        """
        return _ida_domain.IdaCommandBuilder_set_loading_address(self, address)

    def new_database(self, enabled=True):
        r"""
        new_database(self, enabled=True) -> IdaCommandBuilder
        Disassemble a new file (delete old database).

        :param enabled: True to enable, false to disable
        :return: Reference to this object for method chaining
        """
        return _ida_domain.IdaCommandBuilder_new_database(self, enabled)

    def set_compiler(self, *args):
        r"""
        set_compiler(self, name, abi="") -> IdaCommandBuilder
        Set compiler in format name:abi.

        :param name: Compiler name
        :param abi: Optional ABI specification
        :return: Reference to this object for method chaining
        """
        return _ida_domain.IdaCommandBuilder_set_compiler(self, *args)

    def add_first_pass_directive(self, directive):
        r"""
        add_first_pass_directive(self, directive) -> IdaCommandBuilder
        Add a configuration directive processed at first pass.

        :param directive: Directive string (e.g., "VPAGESIZE=8192")
        :return: Reference to this object for method chaining
        """
        return _ida_domain.IdaCommandBuilder_add_first_pass_directive(self, directive)

    def add_second_pass_directive(self, directive):
        r"""
        add_second_pass_directive(self, directive) -> IdaCommandBuilder
        Add a configuration directive processed at second pass.

        :param directive: Directive string
        :return: Reference to this object for method chaining
        """
        return _ida_domain.IdaCommandBuilder_add_second_pass_directive(self, directive)

    def disable_fpp_instructions(self, disabled=True):
        r"""
        disable_fpp_instructions(self, disabled=True) -> IdaCommandBuilder
        Disable FPP instructions (IBM PC only).

        :param disabled: True to disable, false to enable
        :return: Reference to this object for method chaining
        """
        return _ida_domain.IdaCommandBuilder_disable_fpp_instructions(self, disabled)

    def set_entry_point(self, address):
        r"""
        set_entry_point(self, address) -> IdaCommandBuilder
        Set program entry point (hex).

        :param address: Entry point address
        :return: Reference to this object for method chaining
        """
        return _ida_domain.IdaCommandBuilder_set_entry_point(self, address)

    def set_jit_debugger(self, enabled=True):
        r"""
        set_jit_debugger(self, enabled=True) -> IdaCommandBuilder
        Set IDA as just-in-time debugger.

        :param enabled: True to enable, false to disable
        :return: Reference to this object for method chaining
        """
        return _ida_domain.IdaCommandBuilder_set_jit_debugger(self, enabled)

    def set_log_file(self, filename):
        r"""
        set_log_file(self, filename) -> IdaCommandBuilder
        Set the name of the log file.

        :param filename: Log file name
        :return: Reference to this object for method chaining
        """
        return _ida_domain.IdaCommandBuilder_set_log_file(self, filename)

    def disable_mouse(self, disabled=True):
        r"""
        disable_mouse(self, disabled=True) -> IdaCommandBuilder
        Disable mouse (text mode only).

        :param disabled: True to disable, false to enable
        :return: Reference to this object for method chaining
        """
        return _ida_domain.IdaCommandBuilder_disable_mouse(self, disabled)

    def set_plugin_options(self, options):
        r"""
        set_plugin_options(self, options) -> IdaCommandBuilder
        Set options to pass to plugins.

        :param options: Options string
        :return: Reference to this object for method chaining
        """
        return _ida_domain.IdaCommandBuilder_set_plugin_options(self, options)

    def set_output_database(self, path):
        r"""
        set_output_database(self, path) -> IdaCommandBuilder
        Specify the output database (implies -c).

        :param path: Path to the output database
        :return: Reference to this object for method chaining
        """
        return _ida_domain.IdaCommandBuilder_set_output_database(self, path)

    def set_processor(self, processor_type):
        r"""
        set_processor(self, processor_type) -> IdaCommandBuilder
        Set processor type.

        :param processor_type: Processor type string
        :return: Reference to this object for method chaining
        """
        return _ida_domain.IdaCommandBuilder_set_processor(self, processor_type)

    def compress_database(self):
        r"""
        compress_database(self) -> IdaCommandBuilder
        Compress database (create zipped idb).

        :return: Reference to this object for method chaining
        """
        return _ida_domain.IdaCommandBuilder_compress_database(self)

    def pack_database(self):
        r"""
        pack_database(self) -> IdaCommandBuilder
        Pack database (create unzipped idb).

        :return: Reference to this object for method chaining
        """
        return _ida_domain.IdaCommandBuilder_pack_database(self)

    def no_pack_database(self):
        r"""
        no_pack_database(self) -> IdaCommandBuilder
        Do not pack database (not recommended).

        :return: Reference to this object for method chaining
        """
        return _ida_domain.IdaCommandBuilder_no_pack_database(self)

    def run_debugger(self, *args):
        r"""
        run_debugger(self, options="") -> IdaCommandBuilder
        Immediately run the built-in debugger with optional parameters.

        :param options: Optional debugger parameters
        :return: Reference to this object for method chaining
        """
        return _ida_domain.IdaCommandBuilder_run_debugger(self, *args)

    def load_resources(self, enabled=True):
        r"""
        load_resources(self, enabled=True) -> IdaCommandBuilder
        Load MS Windows exe file resources.

        :param enabled: True to enable, false to disable
        :return: Reference to this object for method chaining
        """
        return _ida_domain.IdaCommandBuilder_load_resources(self, enabled)

    def _run_script(self, *args):
        r"""
        _run_script(self, script_file, args={}) -> IdaCommandBuilder
        Execute a script file when the database is opened.

        :param script_file: Path to the script file
        :param args: Optional list of arguments for the script
        :return: Reference to this object for method chaining
        """
        return _ida_domain.IdaCommandBuilder__run_script(self, *args)

    def set_file_type(self, *args):
        r"""
        set_file_type(self, file_type, member="") -> IdaCommandBuilder
        Interpret the input file as the specified file type.

        :param file_type: File type prefix as seen in 'load file' dialog
        :param member: Optional archive member (e.g., "classes.dex" for ZIP)
        :return: Reference to this object for method chaining
        """
        return _ida_domain.IdaCommandBuilder_set_file_type(self, *args)

    def empty_database(self, enabled=True):
        r"""
        empty_database(self, enabled=True) -> IdaCommandBuilder
        Create an empty database.

        :param enabled: True to enable, false to disable
        :return: Reference to this object for method chaining
        """
        return _ida_domain.IdaCommandBuilder_empty_database(self, enabled)

    def set_windows_directory(self, directory):
        r"""
        set_windows_directory(self, directory) -> IdaCommandBuilder
        Specify MS Windows directory.

        :param directory: Windows directory path
        :return: Reference to this object for method chaining
        """
        return _ida_domain.IdaCommandBuilder_set_windows_directory(self, directory)

    def no_segmentation(self, enabled=True):
        r"""
        no_segmentation(self, enabled=True) -> IdaCommandBuilder
        Do not create segmentation (used with Dump database command).

        :param enabled: True to enable, false to disable
        :return: Reference to this object for method chaining
        """
        return _ida_domain.IdaCommandBuilder_no_segmentation(self, enabled)

    def _set_debug_flags(self, *args):
        r"""
        _set_debug_flags(self, flags) -> IdaCommandBuilder
        _set_debug_flags(self, flag_names) -> IdaCommandBuilder
        Set debug flags using a list of flag names.

        :param flag_names: List of flag names
        :return: Reference to this object for method chaining
        """
        return _ida_domain.IdaCommandBuilder__set_debug_flags(self, *args)

    def build_args(self):
        r"""
        build_args(self) -> std::string
        Build the command line arguments based on the set options.

        :return: The command line arguments as a string
        """
        return _ida_domain.IdaCommandBuilder_build_args(self)

    def get_auto_analysis(self):
        r"""
        get_auto_analysis(self) -> bool
        Get auto-analysis option status.

        :return: True if auto-analysis is enabled
        """
        return _ida_domain.IdaCommandBuilder_get_auto_analysis(self)

    def _convert_to_string_vector(self, items):
      """Convert Python list to StringVector"""
      if isinstance(items, list):
        vec = StringVector()
        for item in items:
          vec.append(str(item))
        return vec
      return items

    def run_script(self, script_file, args=None):
      """Python-friendly run_script that accepts lists"""
      if args is None:
        return self._run_script(script_file)
      return self._run_script(script_file, self._convert_to_string_vector(args))

    def set_debug_flags(self, flags):
      """Python-friendly set_debug_flags that accepts lists or ints"""
      if isinstance(flags, int):
        return self._set_debug_flags(flags)
      return self._set_debug_flags(self._convert_to_string_vector(flags))

    __swig_destroy__ = _ida_domain.delete_IdaCommandBuilder

# Register IdaCommandBuilder in _ida_domain:
_ida_domain.IdaCommandBuilder_swigregister(IdaCommandBuilder)
SWIG_PYTHON_LEGACY_BOOL = _ida_domain.SWIG_PYTHON_LEGACY_BOOL


from typing import Tuple, List, Union

import ida_idaapi

BADADDR = _ida_domain.BADADDR

BADADDR32 = _ida_domain.BADADDR32

BADADDR64 = _ida_domain.BADADDR64

BADSEL = _ida_domain.BADSEL

SIZE_MAX = _ida_domain.SIZE_MAX


#<pycode(py_idaapi)>

# Type aliases (we currently still support 3.8, so no `type` statement, or `typing.TypeAlias`es just yet)
ea_t = int

__EA64__ = BADADDR == 0xFFFFFFFFFFFFFFFF

import inspect
import struct
import traceback
import os
import sys
import bisect
try:
    import __builtin__ as builtins
# This basically mimics six's features (it's not ok to ask the IDAPython runtime to rely on six)
    integer_types = (int, long)
    string_types = (str, unicode)
    long_type = long
except:
    import builtins
    integer_types = (int,)
    string_types = (str,)
    long_type = int
import re

def require(modulename, package=None):
    """
    Load, or reload a module.

    When under heavy development, a user's tool might consist of multiple
    modules. If those are imported using the standard 'import' mechanism,
    there is no guarantee that the Python implementation will re-read
    and re-evaluate the module's Python code. In fact, it usually doesn't.
    What should be done instead is 'reload()'-ing that module.

    This is a simple helper function that will do just that: In case the
    module doesn't exist, it 'import's it, and if it does exist,
    'reload()'s it.

    The importing module (i.e., the module calling require()) will have
    the loaded module bound to its globals(), under the name 'modulename'.
    (If require() is called from the command line, the importing module
    will be '__main__'.)

    For more information, see: <http://www.hexblog.com/?p=749>.
    """
    import inspect
    frame_obj, filename, line_number, function_name, lines, index = inspect.stack()[1]
    importer_module = inspect.getmodule(frame_obj)
    if importer_module is None: # No importer module; called from command line
        importer_module = sys.modules['__main__']
    if modulename in sys.modules.keys():
        m = sys.modules[modulename]
        if sys.version_info.major >= 3:
            import importlib
            importlib.reload(m)
        else:
            reload(m)
        m = sys.modules[modulename]
    else:
        import importlib
        m = importlib.import_module(modulename, package)
        sys.modules[modulename] = m
    setattr(importer_module, modulename, m)

def _replace_module_function(replacement):
    name = replacement.__name__
    modname = replacement.__module__
    assert(name)
    assert(modname)
    mod = sys.modules[modname]
    orig = getattr(mod, name)
    replacement.__doc__ = orig.__doc__
    replacement.__name__ = name
    replacement.__dict__["orig"] = orig
    setattr(mod, name, replacement)

def replfun(func):
    _replace_module_function(func)
    return func


# -----------------------------------------------------------------------

# Seek constants
SEEK_SET = 0 # from the file start
SEEK_CUR = 1 # from the current position
SEEK_END = 2 # from the file end

# Plugin constants
PLUGIN_MOD   = 0x0001
PLUGIN_DRAW  = 0x0002
PLUGIN_SEG   = 0x0004
PLUGIN_UNL   = 0x0008
PLUGIN_HIDE  = 0x0010
PLUGIN_DBG   = 0x0020
PLUGIN_PROC  = 0x0040
PLUGIN_FIX   = 0x0080
PLUGIN_MULTI = 0x0100
PLUGIN_SKIP  = 0
PLUGIN_OK    = 1
PLUGIN_KEEP  = 2

# PyIdc conversion object IDs
PY_ICID_INT64  = 0
"""int64 object"""
PY_ICID_BYREF  = 1
"""byref object"""
PY_ICID_OPAQUE = 2
"""opaque object"""

# Step trace options (used with set_step_trace_options())
ST_OVER_DEBUG_SEG  = 0x01
"""step tracing will be disabled when IP is in a debugger segment"""

ST_OVER_LIB_FUNC    = 0x02
"""step tracing will be disabled when IP is in a library function"""

# -----------------------------------------------------------------------
class pyidc_opaque_object_t(object):
    """This is the base class for all Python<->IDC opaque objects"""
    __idc_cvt_id__ = PY_ICID_OPAQUE

# -----------------------------------------------------------------------
class py_clinked_object_t(pyidc_opaque_object_t):
    """
    This is a utility and base class for C linked objects
    """
    def __init__(self, lnk = None):
# static link: if a link was provided
        self.__static_clink__ = True if lnk else False

# Create link if it was not provided
        self.__clink__ = lnk if lnk else self._create_clink()

    def __del__(self):
        """Delete the link upon object destruction (only if not static)"""
        self._free()

    def _free(self):
        """Explicitly delete the link (only if not static)"""
        if not self.__static_clink__ and self.__clink__ is not None:
            self._del_clink(self.__clink__)
            self.__clink__ = None

    def copy(self):
        """Returns a new copy of this class"""

# Create an unlinked instance
        inst = self.__class__()

# Assign self to the new instance
        inst.assign(self)

        return inst

#
# Methods to be overwritten
#
    def _create_clink(self):
        """
        Overwrite me.
        Creates a new clink
        @return: PyCapsule representing the C link
        """
        pass

    def _del_clink(self, lnk):
        """
        Overwrite me.
        This method deletes the link
        """
        pass

    def _get_clink_ptr(self):
        """
        Overwrite me.
        Returns the C link pointer as a 64bit number
        """
        pass

    def assign(self, other):
        """
        Overwrite me.
        This method allows you to assign an instance contents to anothers
        @return: Boolean
        """
        pass

    clink = property(lambda self: self.__clink__)
    """Returns the C link as a PyObject"""

    clink_ptr = property(lambda self: self._get_clink_ptr())
    """Returns the C link pointer as a number"""

# -----------------------------------------------------------------------
class object_t(object):
    """Helper class used to initialize empty objects"""
    def __init__(self, **kwds):
        self.__dict__ = kwds

    def __getitem__(self, idx):
        """Allow access to object attributes by index (like dictionaries)"""
        return getattr(self, idx)

# -----------------------------------------------------------------------
def _qvector_front(self):
    return self.at(0)

# -----------------------------------------------------------------------
def _qvector_back(self):
    return self.at((self.size() - 1) if self.size() else 0)

# -----------------------------------------------------------------------
def _bounded_getitem_iterator(self):
    """Helper function, to be set as __iter__ method for qvector-, or array-based classes."""
    for i in range(len(self)):
        yield self[i]

# -----------------------------------------------------------------------
class plugin_t(pyidc_opaque_object_t):
    """Base class for all scripted plugins."""
    def run(self, arg): pass
    def term(self): pass

# -----------------------------------------------------------------------
class plugmod_t(pyidc_opaque_object_t):
    """Base class for all scripted multi-plugins."""
    pass

# -----------------------------------------------------------------------
class pyidc_cvt_helper__(object):
    """
    This is a special helper object that helps detect which kind
    of object is this python object wrapping and how to convert it
    back and from IDC.
    This object is characterized by its special attribute and its value
    """
    def __init__(self, cvt_id, value):
        self.__idc_cvt_id__ = cvt_id
        self.value = value

    def __set_value(self, v):
        self.__idc_cvt_value__ = v
    def __get_value(self):
        return self.__idc_cvt_value__
    value = property(__get_value, __set_value)

# -----------------------------------------------------------------------
class PyIdc_cvt_int64__(pyidc_cvt_helper__):
    """Helper class for explicitly representing VT_INT64 values"""

    def __init__(self, v):
# id = 0 = int64 object
        super(self.__class__, self).__init__(PY_ICID_INT64, v)

# operation table
    __op_table = \
    {
        0: lambda a, b: a + b,
        1: lambda a, b: a - b,
        2: lambda a, b: a * b,
        3: lambda a, b: a / b
    }
# carries the operation given its number
    def __op(self, op_n, other, rev=False):
        a = self.value
# other operand of same type? then take its value field
        if type(other) == type(self):
            b = other.value
        else:
            b = other
        if rev:
            t = a
            a = b
            b = t
# construct a new object and return as the result
        return self.__class__(self.__op_table[op_n](a, b))

# overloaded operators
    def __add__(self, other):  return self.__op(0, other)
    def __sub__(self, other):  return self.__op(1, other)
    def __mul__(self, other):  return self.__op(2, other)
    def __div__(self, other):  return self.__op(3, other)
    def __radd__(self, other): return self.__op(0, other, True)
    def __rsub__(self, other): return self.__op(1, other, True)
    def __rmul__(self, other): return self.__op(2, other, True)
    def __rdiv__(self, other): return self.__op(3, other, True)

# -----------------------------------------------------------------------
class PyIdc_cvt_refclass__(pyidc_cvt_helper__):
    """Helper class for representing references to immutable objects"""
    def __init__(self, v):
# id = one = byref object
        super(self.__class__, self).__init__(PY_ICID_BYREF, v)

    def cstr(self):
        """Returns the string as a C string (up to the zero termination)"""
        return as_cstr(self.value)

# -----------------------------------------------------------------------
def as_cstr(val):
    """
    Returns a C str from the passed value. The passed value can be of type refclass (returned by a call to buffer() or byref())
    It scans for the first \\x00 and returns the string value up to that point.
    """
    if isinstance(val, PyIdc_cvt_refclass__):
        val = val.value

    n = val.find('\x00')
    return val if n == -1 else val[:n]

# -----------------------------------------------------------------------
def as_UTF16(s):
    """Convenience function to convert a string into appropriate unicode format"""
# use UTF16 big/little endian, depending on the environment?
    import _ida_ida
    if sys.version_info.major >= 3:
        if type(s) == bytes:
            s = s.decode("UTF-8")
    else:
        s = unicode(s)
    return s.encode("UTF-16" + ("BE" if _ida_ida.inf_is_be() else "LE"))
as_unicode = as_UTF16

# -----------------------------------------------------------------------
def as_uint32(v):
    """Returns a number as an unsigned int32 number"""
    return v & 0xffffffff

# -----------------------------------------------------------------------
def as_int32(v):
    """Returns a number as a signed int32 number"""
    return as_signed(v, 32)

# -----------------------------------------------------------------------
def as_signed(v, nbits = 32):
    """
    Returns a number as signed. The number of bits are specified by the user.
    The MSB holds the sign.
    """
    return -(( ~v & ((1 << nbits)-1) ) + 1) if v & (1 << nbits-1) else v & ((1 << nbits)-1)

# ----------------------------------------------------------------------
def TRUNC(ea):
    """ Truncate EA for the current application bitness"""
    import _ida_ida
    return (ea & 0xFFFFFFFFFFFFFFFF) if _ida_ida.inf_is_64bit() else (ea & 0xFFFFFFFF)

# ----------------------------------------------------------------------
def copy_bits(v, s, e=-1):
    """
    Copy bits from a value
    @param v: the value
    @param s: starting bit (0-based)
    @param e: ending bit
    """
# end-bit not specified? use start bit (thus extract one bit)
    if e == -1:
        e = s
# swap start and end if start > end
    if s > e:
        e, s = s, e

    mask = ~(((1 << (e-s+1))-1) << s)

    return (v & mask) >> s

# ----------------------------------------------------------------------
__struct_unpack_table = {
  1: ('b', 'B'),
  2: ('h', 'H'),
  4: ('l', 'L'),
  8: ('q', 'Q')
}

# ----------------------------------------------------------------------
def struct_unpack(buffer, signed = False, offs = 0):
    """
    Unpack a buffer given its length and offset using struct.unpack_from().
    This function will know how to unpack the given buffer by using the lookup table '__struct_unpack_table'
    If the buffer is of unknown length then None is returned. Otherwise the unpacked value is returned.
    """
# Supported length?
    n = len(buffer)
    if n not in __struct_unpack_table:
        return None
# Conver to number
    signed = 1 if signed else 0

# Unpack
    return struct.unpack_from(__struct_unpack_table[n][signed], buffer, offs)[0]

# ------------------------------------------------------------
def IDAPython_ExecSystem(cmd):
    """
    Executes a command with popen().
    """
    try:
        f = os.popen(cmd, "r")
        s = ''.join(f.readlines())
        f.close()
        return s
    except Exception as e:
        return "%s\n%s" % (str(e), traceback.format_exc())

# ------------------------------------------------------------
def IDAPython_FormatExc(etype, value=None, tb=None, limit=None):
    """
    This function is used to format an exception given the
    values returned by a PyErr_Fetch()
    """
    import traceback
    try:
        return ''.join(traceback.format_exception(etype, value, tb, limit))
    except:
        parts = [str(value)]
        if tb:
            try:
                parts.append("".join(traceback.format_tb(tb)))
            finally:
                pass
        return "\n".join(parts)


# ------------------------------------------------------------
def IDAPython_ExecScript(path, g, print_error=True):
    """
    Run the specified script.

    This function is used by the low-level plugin code.
    """
    path_dir = os.path.dirname(path)
    if len(path_dir) and path_dir not in sys.path:
        sys.path.append(path_dir)

    argv = sys.argv
    sys.argv = [path]

# Adjust the __file__ path in the globals we pass to the script
    FILE_ATTR = "__file__"
    has__file__ = FILE_ATTR in g
    if has__file__:
        old__file__ = g[FILE_ATTR]
    g[FILE_ATTR] = path

    try:
        if sys.version_info.major >= 3:
            with open(path, "rb") as fin:
                raw = fin.read()
            encoding = "UTF-8" # UTF-8 by default: https://www.python.org/dev/peps/pep-3120/

# Look for a 'coding' comment
            encoding_pat = re.compile(r'\s*#.*coding[:=]\s*([-\w.]+).*')
            for line in raw.decode("ASCII", errors='replace').split("\n"):
                match = encoding_pat.match(line)
                if match:
                    encoding = match.group(1)
                    break

            code = compile(raw.decode(encoding), path, 'exec')
            exec(code, g)
        else:
            execfile(path, g)
        PY_COMPILE_ERR = None
    except Exception as e:
        PY_COMPILE_ERR = "%s\n%s" % (str(e), traceback.format_exc())
        if print_error:
            print(PY_COMPILE_ERR)
    finally:
# Restore state
        if has__file__:
            g[FILE_ATTR] = old__file__
        else:
            del g[FILE_ATTR]
        sys.argv = argv

    return PY_COMPILE_ERR

# ------------------------------------------------------------
def IDAPython_LoadProcMod(path, g, print_error=True):
    """
    Load processor module.
    """
    pname = g['__name__'] if g and "__name__" in g else '__main__'
    parent = sys.modules[pname]
    path_dir, path_fname = os.path.split(path)
    procmod_name = os.path.splitext(path_fname)[0]
    procobj = None
    fp = None
    try:
        import importlib.util
        spec = importlib.util.spec_from_file_location(procmod_name, path)
        procmod = importlib.util.module_from_spec(spec)
        sys.modules[procmod_name] = procmod
        spec.loader.exec_module(procmod)
        if parent:
            setattr(parent, procmod_name, procmod)
# export attrs from parent to processor module
            parent_attrs = getattr(parent, '__all__',
                                   (attr for attr in dir(parent) if not attr.startswith('_')))
            for pa in parent_attrs:
                setattr(procmod, pa, getattr(parent, pa))
# instantiate processor object
            if getattr(procmod, 'PROCESSOR_ENTRY', None):
                procobj = procmod.PROCESSOR_ENTRY()
        PY_COMPILE_ERR = None
    except Exception as e:
        PY_COMPILE_ERR = "%s\n%s" % (str(e), traceback.format_exc())
        if print_error:
            print(PY_COMPILE_ERR)

    return (PY_COMPILE_ERR, procobj)

# ------------------------------------------------------------
def IDAPython_UnLoadProcMod(script, g, print_error=True):
    """
    Unload processor module.
    """
    pname = g['__name__'] if g and "__name__" in g else '__main__'
    parent = sys.modules[pname]

    script_fname = os.path.split(script)[1]
    procmod_name = os.path.splitext(script_fname)[0]
    if getattr(parent, procmod_name, None):
        delattr(parent, procmod_name)
        del sys.modules[procmod_name]
    PY_COMPILE_ERR = None
    return PY_COMPILE_ERR

# ----------------------------------------------------------------------
# Shameless rip-off of pdoc AST parsing follows
def IDAPython_GetDocstrings(obj):
    import ast
    from itertools import tee
    from itertools import zip_longest
    from typing import TypeVar
    from typing import Optional
    T = TypeVar("T")

    empty: type = inspect.Signature.empty  # type: ignore  # noqa

    if sys.version_info >= (3, 9):
        from functools import cache
    else:  # pragma: no cover
        from functools import lru_cache

        cache = lru_cache(maxsize=None)

    if sys.version_info >= (3, 12):
        from ast import TypeAlias as ast_TypeAlias
    else:  # pragma: no cover
        class ast_TypeAlias:
            pass

    def _dedent(source: str) -> str:
        if not source or source[0] not in (" ", "\t"):
            return source
        source = source.lstrip()
        if not any(source.startswith(x) for x in ["async ", "def ", "class "]):
            first_line, rest = source.split("\n", 1)
            return first_line + "\n" + _dedent(rest)
        else:
            return source

    def _pairwise_longest(iterable):
        """s -> (s0,s1), (s1,s2), (s2, s3),  ..., (sN, None)"""
        a, b = tee(iterable)
        next(b, None)
        return zip_longest(a, b)

    @cache
    def _nodes(tree):
        """
        Returns the list of all nodes in tree's body.
        """
        return list(_nodes_iter(tree))

    def _nodes_iter(tree):
        for a in tree.body:
            yield a

    @cache
    def _walk_tree(tree):
        var_docstrings = {}
        func_docstrings = {}
        nodes = _nodes(tree)
        if len(nodes) == 1 and type(nodes[0]) is ast.ClassDef:
            nodes = nodes[0].body
        for a, b in _pairwise_longest(nodes):
            if isinstance(a, ast_TypeAlias):
                name = a.name.id
            elif (
                isinstance(a, ast.AnnAssign) and isinstance(a.target, ast.Name) and a.simple
            ):
                name = a.target.id
            elif (
                isinstance(a, ast.Assign)
                and len(a.targets) == 1
                and isinstance(a.targets[0], ast.Name)
            ):
                name = a.targets[0].id
            elif isinstance(a, ast.FunctionDef) and a.body:
                continue
            else:
                continue
            if (
                isinstance(b, ast.Expr)
                and isinstance(b.value, ast.Constant)
                and isinstance(b.value.value, str)
            ):
                var_docstrings[name] = inspect.cleandoc(b.value.value).strip()
        return var_docstrings

    res = None
    try:
        res = _walk_tree(ast.parse(inspect.getsource(obj)))
    except:
        pass
    return res

# ----------------------------------------------------------------------
class __IDAPython_Completion_Util(object):
    """Internal utility class for auto-completion support"""
    def __init__(self):
        pass

    def __resolve_type(self, tname):
        rtypes = {
            'char': 'char',
            'short': 'short',
            'int': 'int',
            'long': 'long',
            'long long': 'long long',
            'unsigned char': 'unsigned char',
            'unsigned short': 'unsigned short',
            'unsigned int': 'unsigned int',
            'unsigned long': 'unsigned long',
            'unsigned long long': 'unsigned long long',
            'aflags_t': 'unsigned int',
            'off_t': 'unsigned long long',
            'time_t': 'unsigned long long',
            'size_t': 'unsigned long',
            'uint_fast8_t': 'unsigned char',
            'uint_fast16_t': 'unsigned long',
            'uint_fast32_t': 'unsigned long',
            'uint_fast64_t': 'unsigned long',
            'uintptr_t': 'unsigned long',
            'wint_t': 'unsigned int',
            '__cpu_mask': 'unsigned long',
            '_Atomic_word': 'int',
            'uchar': 'unsigned char',
            'ushort': 'unsigned short',
            'uint': 'unsigned int',
            'int8': 'char',
            'uint8': 'unsigned char',
            'int16': 'short',
            'uint16': 'unsigned short',
            'int32': 'int',
            'uint32': 'unsigned int',
            'uint64': 'unsigned long long',
            'int64': 'long long',
            'ulonglong': 'unsigned long long',
            'longlong': 'long long',
            'wchar16_t': 'unsigned short',
            'wchar32_t': 'unsigned int',
            'ea_t': 'unsigned long long',
            'sel_t': 'unsigned long long',
            'asize_t': 'unsigned long long',
            'adiff_t': 'long long',
            'uval_t': 'unsigned long long',
            'sval_t': 'long long',
            'ea32_t': 'unsigned int',
            'ea64_t': 'unsigned long long',
            'error_t': 'int',
            'op_dtype_t': 'unsigned char',
            'inode_t': 'unsigned long long',
            'diffpos_t': 'unsigned long',
            'qtime32_t': 'int',
            'qtime64_t': 'unsigned long long',
            'flags_t': 'unsigned int',
            'flags64_t': 'unsigned long long',
            'tid_t': 'unsigned long long',
            'bgcolor_t': 'unsigned int',
            'qhandle_t': 'int',
            'comp_t': 'unsigned char',
            'cm_t': 'unsigned char',
            'atype_t': 'int',
            'idastate_t': 'int',
            'nodeidx64_t': 'unsigned long long',
            'nodeidx32_t': 'unsigned int',
            'nodeidx_t': 'unsigned long long',
            'reftype_t': 'unsigned char',
            'type_t': 'unsigned char',
            'p_list': 'unsigned char',
            'color_t': 'unsigned char',
            'enum_t': 'unsigned long long',
            'bmask_t': 'unsigned long long',
            'const_t': 'unsigned long long',
            'tif_cursor_t': 'unsigned long long',
            'cpidx_t': 'int',
            'cplen_t': 'int',
            'twidget_type_t': 'int',
            'input_event_modifiers_t': 'int',
            'view_event_state_t': 'int',
            'optype_t': 'unsigned char',
            'help_t': 'int',
            'pid_t': 'int',
            'thid_t': 'int',
            'register_class_t': 'unsigned char',
            'bpttype_t': 'int',
            'mangled_name_type_t': 'int',
            'diff_degree_t': 'ssize_t',
            'diridx_t': 'unsigned long long',
            'blob_idx_t': 'unsigned long long',
            'fixup_type_t': 'unsigned short',
            'graph_id_t': 'unsigned long long',
            'layout_type_t': 'int',
            'ignore_name_def_t': 'int',
            'p_string': 'unsigned char',
            'bmask64_t': 'unsigned long long',
            'bte_t': 'unsigned char',
            'type_sign_t': 'int',
            'argloc_type_t': 'int',
            'biggest_t': 'unsigned long',
            'regnum_t': 'short',
            'lxtype': 'unsigned short',
            'utc_timestamp_t': 'unsigned long long',
            'lofi_timestamp_t': 'unsigned long long',
            'problist_id_t': 'unsigned char',
            'nfds_t': 'unsigned long',
            'regoff_t': 'unsigned long long',
            'srclang_t': 'int'
        }
        if tname in rtypes.keys():
            resolved = rtypes[tname]
            t2sz = {
                    'char': 1,
                    'short': 2,
                    'int': 4,
                    'long': 8,
                    'long long': 8,
                    'unsigned char': 1,
                    'unsigned short': 2,
                    'unsigned int': 4,
                    'unsigned long': 8,
                    'unsigned long long': 8,
                    'ssize_t': 8,
            }
            size = t2sz[resolved]
        else:
            resolved = tname
            size = None
        return resolved, size

    def __render_rets(self, rets):
        import ida_lines as il
        h = lambda s, c: f"{il.SCOLOR_ON}{c}{s}{il.SCOLOR_OFF}{c}"
        ha = lambda strs, cs: "".join([ h(s, c) for s, c in zip(strs, cs) ])
        tmp = []
        for i in range(len(rets)):
            if rets[i] == "void":
                continue
            tmp.append(ha( [ rets[i] ], [ il.SCOLOR_REG ]))

        retstr = ha([", "], [il.SCOLOR_DEFAULT]).join(tmp)
        return retstr

    def __render_args(self, args, types, defaults):
        import ida_lines as il
        h = lambda s, c: f"{il.SCOLOR_ON}{c}{s}{il.SCOLOR_OFF}{c}"
        ha = lambda strs, cs: "".join([ h(s, c) for s, c in zip(strs, cs) ])
        tmp = []
        for i in range(len(args)):
            if types[i] is None and defaults[i] is None:
                tmp.append(ha( [ f"{args[i]}" ], [ il.SCOLOR_LOCNAME ]))
            elif types[i] is None and defaults[i] is not None:
                tmp.append(ha([ f"{args[i]}", " = ", f"{defaults[i]}" ],
                    [ il.SCOLOR_LOCNAME, il.SCOLOR_DEFAULT, il.SCOLOR_NUMBER ]))
            elif types[i] is not None and defaults[i] is None:
               tmp.append(ha([ f"{args[i]}", ": ", f"{types[i]}", ],
                   [ il.SCOLOR_LOCNAME, il.SCOLOR_DEFAULT, il.SCOLOR_REG, ]))
            elif types[i] is not None and defaults[i] is not None:
               tmp.append(ha([ f"{args[i]}", ": ", f"{types[i]}", " = ", f"{defaults[i]}" ],
                   [ il.SCOLOR_LOCNAME, il.SCOLOR_DEFAULT, il.SCOLOR_REG,
                     il.SCOLOR_DEFAULT, il.SCOLOR_NUMBER ]))

        argstr = ha([", "], [il.SCOLOR_DEFAULT]).join(tmp)
        return argstr


    def __render_proto(self, name, args, types, defaults, rets, is_ctor = False):
        import ida_lines as il
        h = lambda s, c: f"{il.SCOLOR_ON}{c}{s}{il.SCOLOR_OFF}{c}"
        ha = lambda strs, cs: "".join([ h(s, c) for s, c in zip(strs, cs) ])
        argstr = self.__render_args(args, types, defaults)
        if is_ctor and len(rets) == 0:
            rets = [ name ]
        retstr = self.__render_rets(rets)

        proto = ha([ f"{name}", "(" ],
                   [ il.SCOLOR_MACRO if is_ctor else il.SCOLOR_CNAME, il.SCOLOR_DEFAULT ]) + \
                   f"{argstr}"

        if len(retstr) > 0:
            proto += ha( [ ") -> ", ], [ il.SCOLOR_DEFAULT, ]) + retstr
        else:
            proto += ha( [")" ], [ il.SCOLOR_DEFAULT ])

        return proto

    def __render_constant(self, name, attr):
        import ida_lines as il
        h = lambda s, c: f"{il.SCOLOR_ON}{c}{s}{il.SCOLOR_OFF}{c}"
        ha = lambda strs, cs: "".join([ h(s, c) for s, c in zip(strs, cs) ])
        out = ha([ f"{name.ljust(48)}", f" = ",            f"{attr:#018x}", ],
                 [ il.SCOLOR_DNAME,     il.SCOLOR_DEFAULT, il.SCOLOR_NUMBER ])
        return out

    def __render_default(self, name):
        import ida_lines as il
        h = lambda s, c: f"{il.SCOLOR_ON}{c}{s}{il.SCOLOR_OFF}{c}"
        ha = lambda strs, cs: "".join([ h(s, c) for s, c in zip(strs, cs) ])
        out = ha([ f"{name.ljust(48)}", ], [ il.SCOLOR_UNKNAME, ])
        return out

    def __render_int_member(self, name, typ, val):
        import ida_lines as il
        h = lambda s, c: f"{il.SCOLOR_ON}{c}{s}{il.SCOLOR_OFF}{c}"
        ha = lambda strs, cs: "".join([ h(s, c) for s, c in zip(strs, cs) ])
        _, sz = self.__resolve_type(typ)
        if sz is None:
            val_fmt = f"{val:#018x}"
        else:
            val_fmt = {
                1: f"{val:#04x}",
                2: f"{val:#06x}",
                4: f"{val:#010x}",
                8: f"{val:#018x}",
            }[sz]
        pref_len = len(f"{name}: {typ}")
        eq_pad = f" {'='.rjust(48-pref_len)} "
        out = ha([ f"{name}", ": ", f"{typ}", eq_pad, val_fmt ],
                 [ il.SCOLOR_LOCNAME, il.SCOLOR_DEFAULT, il.SCOLOR_REG, il.SCOLOR_DEFAULT,
                   il.SCOLOR_NUMBER ])
        return out

    def __render_docstr(self, doc, name):
        import ida_lines as il
        h = lambda s, c: f"{il.SCOLOR_ON}{c}{s}{il.SCOLOR_OFF}{c}"
        ha = lambda strs, cs: "".join([ h(s, c) for s, c in zip(strs, cs) ])

        if doc is None:
            return ""

# proto = (args, types, defaults, rets)
        out = []
        ign = False
        for l in doc.splitlines():
            l = l.strip(" \n\r\t")
            m = re.match(f"(\\d). {name}\\(", l)
            if len(l) == 0:
                continue
            elif m is not None or "This function has the following signatures:" in l:
# prototype definition
                continue
            else:
# re-wrap docstring to 128 chars
                final = []
                curline = ""
                tmp = l.split(" ")
                for i in range(len(tmp)):
                    if len(curline) + len(tmp[i]) + 1 > 128:
                         final.append(f"{curline}")
                         curline = f"{tmp[i]} "
                    else:
                         curline += f"{tmp[i]} "
                if len(curline) > 0:
                    final.append(f"{curline}")

                out.append("\n".join(final))
        return "\n".join(out)

    def __parse_arg(self, arg):
        arg = arg.strip(" ")
        default = None
        typ = None
        if "=" in arg:
            arg, default = [ z.strip(" ") for z in arg.split("=") ]
        if ":" in arg:
            arg, typ = [ z.strip(" ") for z in arg.split(":") ]
# Swig auto-renames certain argument names if they are also
# python keywords (for example from -> _from)
        arg = arg.lstrip("_")
        return arg, typ, default

    def __proto_from_docstring(self, name, doc, altname = None):
        import re
        out = []
        args, types, defaults, rets = [], [], [], []
        if doc is None or len(doc) == 0:
            out.append((args, types, defaults, rets))
            return out
        if altname is not None:
            name = altname
        for l in doc.splitlines():
            m = re.match(f"    (\\d). {name}\\(", l)
            if m:
                if len(args + types + defaults + rets) > 0:
                    out.append((args, types, defaults, rets))
                args, types, defaults, rets = [], [], [], []

                l = l[len("    0. "):]

# return types
                if " -> " in l:
                    tmp = l.split(" -> ")[1].strip("() ")
                    if tmp == "void":
                        rets = []
                    else:
                        rets = [ t.strip(" ") for t in tmp.split(",") ]
                else:
                    rets = []

# arguments, types, default values in prototype
                o = 0
                lvl = 1
# poor man's context free grammar state machine finding
# outermost group of parentheses
                for o in range(l.find("("), len(l)):
                    if l[o] == "(":
                        lvl += 1
                    elif l[o] == ")":
                        lvl -= 1
                        if lvl == 1:
                            tmp = l[l.find("(") + 1:o]
                            break
                else:
# couldn't find outermost parenthesis group, skip
                    continue

                if "void" in tmp:
                    args = []
                for t in tmp.split(","):
                    arg, typ, default = self.__parse_arg(t)
                    args.append(arg)
                    types.append(typ)
                    defaults.append(default)

        if len(args + types + defaults + rets) > 0:
            out.append((args, types, defaults, rets))
        if len(out) == 0:
            return [([], [], [], [])]
        return out

    def __proto_from_argspec(self, name, args, defaults, annotations):
        types = []
        _defaults = []
        rets = []
        out = []
        def __repr_type(typ):
            if type(typ) is str:
# string annotation, leave as is
                return typ
            elif typ.__class__.__module__ in [ "typing", "types" ]:
# type hint, leave as is
                return typ
            elif typ in [ bool, str, int, float ]:
# builtin type, format as string
                return typ.__name__
            else:
# anything complex, leave as is
                return typ.__class__.__name__

        for i, arg in enumerate(args):
            if arg not in annotations.keys():
                types.append(None)
            else:
                types.append(__repr_type(annotations[arg]))

            if defaults and i >= len(args) - len(defaults):
                z = i - (len(args) - len(defaults))
                _defaults.append(defaults[z])
            else:
                _defaults.append(None)
        if "return" not in annotations.keys():
            rets = []
        elif annotations["return"] == "void":
            rets = []
        elif type(annotations["return"]) == list:
            rets = [ __repr_type(r) for r in annotations["return"] ]
        else:
            rets = [ __repr_type(annotations["return"]) ]

        out.append((args, types, _defaults, rets))
        return out

    def build_hints(self, names, ns):
        out = []
        W_CMEMB = 258
        W_CTOR  = 257
        W_FUNC  = 256
        var_docs = {}
        try:
            var_docs = IDAPython_GetDocstrings(ns)
        except:
            pass

        for name in names:
            try:
                attr = getattr(ns, name)
                is_prop = False
                pclass = None
                try:
                    is_prop = type(getattr(type(ns), name)) is property
                except:
                    pass
                is_int = type(attr) == int
                is_spo = "SwigPyObject" in str(type(attr))
                is_typing = type(attr).__module__ == "typing"
                if is_typing:
# Ignore typing-related imports ("from typing import X" ...)
                    continue
                if is_prop:
                    pclass = getattr(ns, "__class__")
                    mod, cls = pclass.__module__, pclass.__name__
                    var_docs = IDAPython_GetDocstrings(pclass)
                    doc = var_docs[name] if name in var_docs.keys() else ""
                    docr  = self.__render_docstr(doc, name)

                    if is_int or is_spo:
# class member, integral type or SwigPyObject
                        try:
# get low-level swig auto generated function
                            getter = getattr(getattr(sys.modules[mod], f"_{mod}"), f"{cls}_{name}_get")
                            typ = inspect.getdoc(getter).split(" -> ")[1]
                        except:
                            typ = "unk"
                        if is_int:
                            hint = self.__render_int_member(name, typ, attr)
                        else:
                            hint = self.__render_args([ name ], [ typ ], [ None ])
                        out.append((name, hint, docr, [ W_CMEMB ]))
                    else:
# class member, complex type, property, no SwigPyObject
                        annots = getattr(pclass, "__annotations__")
                        if name in annots.keys():
# if we have a type annnotation, pick that
                            typ = annots[name]
                        else:
# if we don't have a type annotation, take the python type
                            typ = type(attr).__name__
                        hint = self.__render_args([ name ], [ typ ], [ None ])
                        out.append((name, hint, docr, [ W_CMEMB ]))
                elif is_int:
# constant
                    hint = self.__render_constant(name, attr)
                    if name in var_docs.keys():
                        doc = var_docs[name]
                    else:
                        doc = ""
                    docr  = self.__render_docstr(doc, name)
                    out.append((name, hint, docr, [ W_CMEMB ]))
                elif inspect.isfunction(attr) or inspect.ismethod(attr) or inspect.isclass(attr):
# function or constructor
                    args, varargs, _, defaults, _, _, annots = inspect.getfullargspec(attr)
                    doc = inspect.getdoc(attr)
                    docr = self.__render_docstr(doc, name)
                    altname = None
                    is_ctor = inspect.isclass(attr)
                    weight = W_CTOR if is_ctor else W_FUNC
                    if name not in str(attr):
# Some functions are mapped to each other. The docstring
# parser can only extract prototypes from overloaded
# functions if it knows the name of the target function
                        altname = str(attr).split(" ")[1]
                    if varargs == "args" and doc is not None:
# Overloaded function, retrieve prototype from comment and
# insert one entry per prototype
                        prots = self.__proto_from_docstring(name, doc, altname = altname)
                        for prot in prots:
                            hint = self.__render_proto(name, *prot, is_ctor = is_ctor)
                            out.append((name, hint, docr, [ weight ]))
                    else:
# Regular function, retrieve prototype from argspec
                        prot = self.__proto_from_argspec(name, args, defaults, annots)[0]
                        hint = self.__render_proto(name, *prot, is_ctor = is_ctor)
                        out.append((name, hint, docr, [ weight ]))
                elif inspect.isclass(type(attr)) and type(attr).__name__ == "str":
# class member, string
                    if name in var_docs.keys():
                        doc = var_docs[name]
                    else:
                        doc = ""
                    docr  = self.__render_docstr(doc, name)
                    hint = self.__render_default(name)
                    out.append((name, hint, docr, [] ))
                elif inspect.isclass(type(attr)) and not callable(attr):
# class member, complex type
                    typ = type(attr).__name__
                    if typ == "module" and ns.__name__ != "__main__":
# hide submodules that show up just because they were
# imported by code in the module we're inspecting
                        continue
                    doc = inspect.getdoc(attr)
                    if doc is None:
                        doc = ""
                    docr  = self.__render_docstr(doc, name)
                    hint = self.__render_args([ name ], [ typ ], [ None ])
                    out.append((name, hint, docr, [ W_CMEMB ]))
                else:
                    doc = inspect.getdoc(attr)
                    if doc is None:
                        doc = ""
                    docr  = self.__render_docstr(doc, name)
                    hint = self.__render_default(name)
                    out.append((name, hint, docr, [] ))
            except:
                out.append((name, name, "", [] ))
# self.debug("build_hint(%s) got an exception:\n%s", name, traceback.format_exc())
                pass

        out = sorted(out, key = lambda r: sum([ 1 << x for x in r[3] ]))
        comps, hints, docs, _ = zip(*out)
        return list(comps), list(hints), list(docs)

    def debug(self, *args):
        try:
            msg = args[0] % args[1:]
            print("IDAPython_Completion_Util: %s" % msg)
        except Exception as e:
            print("debug() got exception during debug(*args=%s):\n%s" % (
                str(args),
                traceback.format_exc()))

    def dir_namespace(self, m, prefix):
        return [x for x in dir(m) if x.startswith(prefix)]

    def maybe_extend_syntactically(self, ns, name, line, syntax_char):
        to_add = None
        try:
            attr = getattr(ns, name)
# Is it callable?
            if callable(attr):
                if not line.startswith("?"):
                    to_add = "("
# Is it iterable?
            elif isinstance(attr, string_types) or getattr(attr, '__iter__', False):
                to_add = "["
        except:
# self.debug("maybe_extend_syntactically() got an exception:\n%s", traceback.format_exc())
            pass
        if to_add is not None and (syntax_char is None or to_add == syntax_char):
            name += to_add
        return name

    def get_candidates(self, qname, line, match_syntax_char):
# self.debug("get_candidates(qname=%s, line=%s, match_syntax_char=%s)", qname, line, match_syntax_char)
        results = []
        MAGIC_METHODS = [ f"__{m}__" for m in [
# as per https://docs.python.org/3/reference/datamodel.html (v3.12.3)
            "abs", "add", "aenter", "aexit", "aiter", "and", "anext",
            "annotations", "await", "bases", "bool", "buffer", "bytes", "call",
            "ceil", "class", "class_getitem", "closure", "code", "complex",
            "contains", "copy", "deepcopy", "defaults", "del", "delattr",
            "delete", "delitem", "dict", "dir", "divmod", "doc", "enter", "eq",
            "exit", "file", "float", "floor", "floordiv", "format", "fspath",
            "func", "future", "ge", "get", "getattr", "getattribute", "getitem",
            "getnewargs", "getstate", "globals", "gt", "hash", "iadd", "iand",
            "ifloordiv", "ilshift", "imatmul", "imod", "imul", "index", "init",
            "init_subclass", "instancecheck", "int", "invert", "ior", "ipow",
            "irshift", "isub", "iter", "itruediv", "ixor", "kwdefaults", "le",
            "len", "length_hint", "lshift", "lt", "match_args", "matmul",
            "missing", "mod", "module", "mro_entries", "mul", "name", "ne",
            "neg", "new", "next", "objclass", "or", "pos", "pow", "prepare",
            "qualname", "radd", "rand", "rdivmod", "reduce", "reduce_ex",
            "release_buffer", "repr", "reversed", "rfloordiv", "rlshift",
            "rmatmul", "rmod", "rmul", "ror", "round", "rpow", "rrshift",
            "rshift", "rsub", "rtruediv", "rxor", "self", "set", "set_name",
            "setattr", "setitem", "sizeof", "slots", "str", "sub",
            "subclasscheck", "subclasses", "traceback", "truediv", "trunc",
            "type_params", "typing_prepare_subst", "typing_subst", "weakref",
            "xor", "builtins",
# and some more (manually picked)
            "cached", "loader", "package", "spec", "subclasshook",
        ]]

# and some Swig internals that are decorated differently
        MAGIC_METHODS.extend([
            "__swig_destroy__",
            "_SwigNonDynamicMeta",
            "_swig_python_version_info",
            "_swig_add_metaclass",
            "_swig_repr",
            "_swig_setattr_nondynamic_class_variable",
            "_swig_setattr_nondynamic_instance_variable",
            "thisown", "this", "weakref",
            "cvar", "_real_cvar", "_wrap_cvar",
            "SWIG_PYTHON_LEGACY_BOOL",
        ])

        try:
            ns = sys.modules['__main__']
            parts = qname.split('.')
# self.debug("get_candidates() got parts: %s", parts)
            for i in range(0, len(parts) - 1):
                ns = getattr(ns, parts[i])
        except Exception as e:
# self.debug("get_candidates() got exception:\n%s", traceback.format_exc())
            pass
        else:
# search in the namespace
            last_token = parts[-1]
            results = self.dir_namespace(ns, last_token)
# self.debug("get_candidates() completions for %s in %s: %s", last_token, ns, results)

# no completion found? looking from the global scope? then try the builtins
            if not results and len(parts) == 1:
                results = self.dir_namespace(builtins, last_token)
# self.debug("get_candidates() completions for %s in %s: %s", last_token, builtins, results)
            if last_token not in [ "_", "__" ]:
# only filter out __magic_methods__ if user doesn't explicitly
# look for something with a "_" or "__" prefix.
                results = [ r for r in results if
                    not (r in MAGIC_METHODS) and # magic methods
                    not (r.startswith(f"_ida_") and r in sys.modules) and # low-level module
                    not (r.startswith(f"__get")) and # property getters
                    not (r.startswith(f"__set")) and # property setters
                    not (r.endswith(f"__from_ptrval__")) # swig
                ]

            results, hints, docs = self.build_hints(results, ns)

            docs = [ "    " + d.replace("\n", "\n    ") if len(d) > 0 else "" for d in docs ]

            results = map(lambda r: self.maybe_extend_syntactically(ns, r, line, match_syntax_char), results)

            ns_parts = parts[:-1]
            results = list(map(lambda r: ".".join(ns_parts + [r]), results))
# self.debug("get_candidates() => '%s', '%s'", str(results), str(hints))
            return results, hints, docs

    QNAME_PAT = re.compile(r"([a-zA-Z_]([a-zA-Z0-9_\.]*)?)")

    def __call__(self, line, x):
        try:
# self.debug("__call__(line=%s, x=%s)", line, x)
            uline = line.decode("UTF-8") if sys.version_info.major < 3 else line
            result = None

# Kludge: if the we are past the last char, and that char is syntax:
#    idaapi.print(
#                 ^
# then we want to backtrack to the previous non-syntax char,
# and then instruct get_candidates() to not extend the match
# with possible syntax.
            match_syntax_char = None
            if x > 0 and uline[x-1] in "[({":
                match_syntax_char = uline[x-1]
                x -= 1

# Find what looks like an identifier (possibly qualified)
            for match in re.finditer(self.QNAME_PAT, uline):
                qname, start, end = match.group(1), match.start(1), match.end(1)
                if sys.version_info.major < 3:
                    qname = qname.encode("UTF-8")
                if x >= start and x <= end:
                    matches, hints, docs = self.get_candidates(qname, line, match_syntax_char)
                    rep_x, end = start, end + (1 if match_syntax_char else 0)
                    result = matches, hints, docs, rep_x, end

# self.debug("__call__() => '%s'", str(result))
            return result
        except Exception as e:
# self.debug("__call__() got exception:\n%s", traceback.format_exc())
            pass

# Instantiate an IDAPython command completion object (for use with IDA's CLI bar)
IDAPython_Completion = __IDAPython_Completion_Util()

def _listify_types(*classes):
    for cls in classes:
        cls.at = cls.__getitem__ # '__getitem__' has bounds checkings
        cls.__len__ = cls.size
        cls.__iter__ = _bounded_getitem_iterator
        cls.append = cls.push_back

# The general callback format of notify_when() is:
#    def notify_when_callback(nw_code)
# In the case of NW_OPENIDB, the callback is:
#    def notify_when_callback(nw_code, is_old_database)
NW_OPENIDB    = 0x0001
"""Notify when the database is opened. Its callback is of the form: def notify_when_callback(nw_code, is_old_database)"""
NW_CLOSEIDB   = 0x0002
"""Notify when the database is closed. Its callback is of the form: def notify_when_callback(nw_code)"""
NW_INITIDA    = 0x0004
"""Notify when the IDA starts. Its callback is of the form: def notify_when_callback(nw_code)"""
NW_TERMIDA    = 0x0008
"""Notify when the IDA terminates. Its callback is of the form: def notify_when_callback(nw_code)"""
NW_REMOVE     = 0x0010
"""Use this flag with other flags to uninstall a notifywhen callback"""


_notify_when_dispatcher = None

def notify_when(when, callback):
    """
    Register a callback that will be called when an event happens.
    @param when: one of NW_XXXX constants
    @param callback: This callback prototype varies depending on the 'when' parameter:
                     The general callback format:
                         def notify_when_callback(nw_code)
                     In the case of NW_OPENIDB:
                         def notify_when_callback(nw_code, is_old_database)
    @return: Boolean
    """
    global _notify_when_dispatcher
    import ida_idp
    if _notify_when_dispatcher is None:
        _notify_when_dispatcher = ida_idp._notify_when_dispatcher_t()
    return _notify_when_dispatcher.notify_when(when, callback)


# Since version 5.5, PyQt5 doesn't simply print the PyQt exceptions by default
# anymore: https://github.com/baoboa/pyqt5/commit/1e1d8a3ba677ef3e47b916b8a5b9c281d0f8e4b5#diff-848704a82f6a6e3a13112145ce32ac69L63
# The default behavior now is that qFatal() is called, causing the application
# to abort().
# We do not want that to happen in IDA, and simply having a sys.excepthook
# that is different from sys.__excepthook__ is enough for PyQt5 to return
# to the previous behavior
def __install_excepthook():
    real_hook = sys.excepthook
    sys.excepthook = lambda *args: real_hook(*args)
__install_excepthook()


# ------------------------------------------------------------
class IDAPython_displayhook:
    def __init__(self):
        self.orig_displayhook = sys.displayhook

    def format_seq(self, num_printer, storage, item, opn, cls):
        storage.append(opn)
        for idx, el in enumerate(item):
            if idx > 0:
                storage.append(', ')
            self.format_item(num_printer, storage, el)
        storage.append(cls)

    def format_item(self, num_printer, storage, item):
        if item is None or isinstance(item, bool):
            storage.append(repr(item))
        elif isinstance(item, string_types):
            storage.append(format_basestring(item))
        elif isinstance(item, integer_types):
            storage.append(num_printer(item))
        elif isinstance(item, list):
            self.format_seq(num_printer, storage, item, '[', ']')
        elif isinstance(item, tuple):
            self.format_seq(num_printer, storage, item, '(', ')')
        elif isinstance(item, set):
            self.format_seq(num_printer, storage, item, 'set([', '])')
        elif isinstance(item, (dict,)):
            storage.append('{')
            for idx, pair in enumerate(item.items()):
                if idx > 0:
                    storage.append(', ')
                self.format_item(num_printer, storage, pair[0])
                storage.append(": ")
                self.format_item(num_printer, storage, pair[1])
            storage.append('}')
        else:
            storage.append(repr(item))

    def _print_hex(self, x):
        return hex(x)

    def displayhook_format(self, item):
        storage = []
        import ida_idp
        num_printer = self._print_hex
        dn = ida_idp.ph_get_flag() & ida_idp.PR_DEFNUM
        if dn == ida_idp.PRN_OCT:
            num_printer = oct
        elif dn == ida_idp.PRN_DEC:
            num_printer = str
        elif dn == ida_idp.PRN_BIN:
            num_printer = bin
        self.format_item(num_printer, storage, item)
        return "".join(storage)

    def displayhook(self, item):
        if item is None or type(item) is bool:
            self.orig_displayhook(item)
            return
        try:
            clob = self.displayhook_format(item)
            sys.stdout.write("%s\n" % clob)
        except:
            import traceback
            traceback.print_exc()
            self.orig_displayhook(item)

_IDAPython_displayhook = IDAPython_displayhook()
sys.displayhook = _IDAPython_displayhook.displayhook

def _make_one_time_warning_message(bad_attr, new_attr):
    warned = [False]
    def f():
        if not warned[0]:
            import traceback
# skip two frames to get the actual line which triggered the  access
            f = sys._getframe().f_back.f_back
            traceback.print_stack(f)
            print("Please use \"%s\" instead of \"%s\" (\"%s\" is kept for backward-compatibility, and will be removed soon.)" % (new_attr, bad_attr, bad_attr))
            warned[0] = True
    return f

def _make_missed_695bwcompat_property(bad_attr, new_attr, has_setter):
    _notify_bwcompat = _make_one_time_warning_message(bad_attr, new_attr)
    def _getter(self):
        _notify_bwcompat()
        return getattr(self, new_attr)
    def _setter(self, v):
        _notify_bwcompat()
        return setattr(self, new_attr, v)
    return property(_getter, _setter if has_setter else None)



#</pycode(py_idaapi)>

HBF_CALL_WITH_NEW_EXEC = _ida_domain.HBF_CALL_WITH_NEW_EXEC

HBF_VOLATILE_METHOD_SET = _ida_domain.HBF_VOLATILE_METHOD_SET


def parse_command_line3(cmdline: "char const *") -> "PyObject *":
    r"""parse_command_line3(cmdline) -> PyObject *"""
    return _ida_domain.parse_command_line3(cmdline)

def set_script_timeout(timeout: "int") -> "int":
    r"""set_script_timeout(timeout) -> int"""
    return _ida_domain.set_script_timeout(timeout)

def disable_script_timeout() -> "void":
    r"""disable_script_timeout()"""
    return _ida_domain.disable_script_timeout()

def enable_extlang_python(enable: "bool") -> "void":
    r"""enable_extlang_python(enable)"""
    return _ida_domain.enable_extlang_python(enable)

def enable_python_cli(enable: "bool") -> "void":
    r"""enable_python_cli(enable)"""
    return _ida_domain.enable_python_cli(enable)

def format_basestring(_in: "PyObject *") -> "qstring":
    r"""format_basestring(_in) -> qstring"""
    return _ida_domain.format_basestring(_in)

def pygc_refresh(_self: "PyObject *") -> "void":
    r"""pygc_refresh(_self)"""
    return _ida_domain.pygc_refresh(_self)

def pygc_create_groups(_self: "PyObject *", groups_infos: "PyObject *") -> "PyObject *":
    r"""pygc_create_groups(_self, groups_infos) -> PyObject *"""
    return _ida_domain.pygc_create_groups(_self, groups_infos)

def pygc_delete_groups(_self: "PyObject *", groups: "PyObject *", new_current: "PyObject *") -> "PyObject *":
    r"""pygc_delete_groups(_self, groups, new_current) -> PyObject *"""
    return _ida_domain.pygc_delete_groups(_self, groups, new_current)

def pygc_set_groups_visibility(_self: "PyObject *", groups: "PyObject *", expand: "PyObject *", new_current: "PyObject *") -> "PyObject *":
    r"""pygc_set_groups_visibility(_self, groups, expand, new_current) -> PyObject *"""
    return _ida_domain.pygc_set_groups_visibility(_self, groups, expand, new_current)

def pycim_get_widget(_self: "PyObject *") -> "TWidget *":
    r"""pycim_get_widget(_self) -> TWidget *"""
    return _ida_domain.pycim_get_widget(_self)

def pycim_view_close(_self: "PyObject *") -> "void":
    r"""pycim_view_close(_self)"""
    return _ida_domain.pycim_view_close(_self)
class loader_input_t(object):
    r"""Proxy of C++ loader_input_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __idc_cvt_id__: "int" = property(_ida_domain.loader_input_t___idc_cvt_id___get, _ida_domain.loader_input_t___idc_cvt_id___set, doc=r"""__idc_cvt_id__""")

    def __init__(self, pycapsule: "PyObject *"=None):
        r"""__init__(self, pycapsule=None) -> loader_input_t"""
        _ida_domain.loader_input_t_swiginit(self, _ida_domain.new_loader_input_t(pycapsule))

    def close(self) -> "void":
        r"""close(self)"""
        return _ida_domain.loader_input_t_close(self)
    __swig_destroy__ = _ida_domain.delete_loader_input_t

    def open(self, filename: "char const *", remote: "bool") -> "bool":
        r"""open(self, filename, remote) -> bool"""
        return _ida_domain.loader_input_t_open(self, filename, remote)

    def set_linput(self, linput: "linput_t *") -> "void":
        r"""set_linput(self, linput)"""
        return _ida_domain.loader_input_t_set_linput(self, linput)

    @staticmethod
    def from_linput(linput: "linput_t *") -> "loader_input_t *":
        r"""from_linput(linput) -> loader_input_t"""
        return _ida_domain.loader_input_t_from_linput(linput)

    @staticmethod
    def from_capsule(pycapsule: "PyObject *") -> "loader_input_t *":
        r"""from_capsule(pycapsule) -> loader_input_t"""
        return _ida_domain.loader_input_t_from_capsule(pycapsule)

    @staticmethod
    def from_fp(fp: "FILE *") -> "loader_input_t *":
        r"""from_fp(fp) -> loader_input_t"""
        return _ida_domain.loader_input_t_from_fp(fp)

    def get_linput(self) -> "linput_t *":
        r"""get_linput(self) -> linput_t *"""
        return _ida_domain.loader_input_t_get_linput(self)

    def open_memory(self, start: "ea_t", size: "int64") -> "bool":
        r"""open_memory(self, start, size) -> bool"""
        return _ida_domain.loader_input_t_open_memory(self, start, size)

    def seek(self, offset: "int64", whence: "int") -> "int64":
        r"""seek(self, offset, whence) -> int64"""
        return _ida_domain.loader_input_t_seek(self, offset, whence)

    def tell(self) -> "int64":
        r"""tell(self) -> int64"""
        return _ida_domain.loader_input_t_tell(self)

    def getz(self, size: "size_t", fpos: "int64") -> "PyObject *":
        r"""getz(self, size, fpos) -> PyObject *"""
        return _ida_domain.loader_input_t_getz(self, size, fpos)

    def gets(self, len: "int64") -> "PyObject *":
        r"""gets(self, len) -> PyObject *"""
        return _ida_domain.loader_input_t_gets(self, len)

    def read(self, size: "int64") -> "PyObject *":
        r"""read(self, size) -> PyObject *"""
        return _ida_domain.loader_input_t_read(self, size)

    def opened(self) -> "bool":
        r"""opened(self) -> bool"""
        return _ida_domain.loader_input_t_opened(self)

    def readbytes(self, size: "size_t", big_endian: "bool") -> "PyObject *":
        r"""readbytes(self, size, big_endian) -> PyObject *"""
        return _ida_domain.loader_input_t_readbytes(self, size, big_endian)

    def file2base(self, pos: "int64", ea1: "ea_t", ea2: "ea_t", patchable: "int") -> "int":
        r"""file2base(self, pos, ea1, ea2, patchable) -> int"""
        return _ida_domain.loader_input_t_file2base(self, pos, ea1, ea2, patchable)

    def size(self) -> "int64":
        r"""size(self) -> int64"""
        return _ida_domain.loader_input_t_size(self)

    def filename(self) -> "PyObject *":
        r"""filename(self) -> PyObject *"""
        return _ida_domain.loader_input_t_filename(self)

    def get_byte(self) -> "PyObject *":
        r"""get_byte(self) -> PyObject *"""
        return _ida_domain.loader_input_t_get_byte(self)

# Register loader_input_t in _ida_domain:
_ida_domain.loader_input_t_swigregister(loader_input_t)
BADDIFF = _ida_domain.BADDIFF

IDA_SDK_VERSION = _ida_domain.IDA_SDK_VERSION

BADMEMSIZE = _ida_domain.BADMEMSIZE

_CRT_DECLARE_NONSTDC_NAMES = _ida_domain._CRT_DECLARE_NONSTDC_NAMES

MAXSTR = _ida_domain.MAXSTR

__MF__ = _ida_domain.__MF__


def qatoll(nptr: "char const *") -> "int64":
    r"""qatoll(nptr) -> int64"""
    return _ida_domain.qatoll(nptr)

def qexit(code: "int") -> "void":
    r"""qexit(code)"""
    return _ida_domain.qexit(code)

def log2ceil(d64: "uint64") -> "int":
    r"""log2ceil(d64) -> int"""
    return _ida_domain.log2ceil(d64)

def log2floor(d64: "uint64") -> "int":
    r"""log2floor(d64) -> int"""
    return _ida_domain.log2floor(d64)

def extend_sign(v: "uint64", nbytes: "int", sign_extend: "bool") -> "uint64":
    r"""extend_sign(v, nbytes, sign_extend) -> uint64"""
    return _ida_domain.extend_sign(v, nbytes, sign_extend)

def readbytes(h: "int", res: "uint32 *", size: "int", mf: "bool") -> "int":
    r"""readbytes(h, res, size, mf) -> int"""
    return _ida_domain.readbytes(h, res, size, mf)

def writebytes(h: "int", l: "uint32", size: "int", mf: "bool") -> "int":
    r"""writebytes(h, l, size, mf) -> int"""
    return _ida_domain.writebytes(h, l, size, mf)

def reloc_value(value: "void *", size: "int", delta: "adiff_t", mf: "bool") -> "void":
    r"""reloc_value(value, size, delta, mf)"""
    return _ida_domain.reloc_value(value, size, delta, mf)

def qvector_reserve(vec: "void *", old: "void *", cnt: "size_t", elsize: "size_t") -> "void *":
    r"""qvector_reserve(vec, old, cnt, elsize) -> void *"""
    return _ida_domain.qvector_reserve(vec, old, cnt, elsize)
class qrefcnt_obj_t(object):
    r"""Proxy of C++ qrefcnt_obj_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    refcnt: "int" = property(_ida_domain.qrefcnt_obj_t_refcnt_get, _ida_domain.qrefcnt_obj_t_refcnt_set, doc=r"""refcnt""")

    def release(self) -> "void":
        r"""release(self)"""
        return _ida_domain.qrefcnt_obj_t_release(self)
    __swig_destroy__ = _ida_domain.delete_qrefcnt_obj_t

# Register qrefcnt_obj_t in _ida_domain:
_ida_domain.qrefcnt_obj_t_swigregister(qrefcnt_obj_t)

def relocate_relobj(_relobj: "relobj_t *", ea: "ea_t", mf: "bool") -> "bool":
    r"""relocate_relobj(_relobj, ea, mf) -> bool"""
    return _ida_domain.relocate_relobj(_relobj, ea, mf)
IDBDEC_ESCAPE = _ida_domain.IDBDEC_ESCAPE

CP_ACP = _ida_domain.CP_ACP

CP_OEM = _ida_domain.CP_OEM

CP_UTF8 = _ida_domain.CP_UTF8

CP_BOM = _ida_domain.CP_BOM

UTF8_BOM = _ida_domain.UTF8_BOM

UTF16LE_BOM = _ida_domain.UTF16LE_BOM

UTF16BE_BOM = _ida_domain.UTF16BE_BOM

UTF32LE_BOM = _ida_domain.UTF32LE_BOM

UTF32BE_BOM = _ida_domain.UTF32BE_BOM

CP_ELLIPSIS = _ida_domain.CP_ELLIPSIS

UTF8_ELLIPSIS = _ida_domain.UTF8_ELLIPSIS

CP_REPLCHAR = _ida_domain.CP_REPLCHAR

UTF8_REPLCHAR = _ida_domain.UTF8_REPLCHAR

MAX_UTF8_SEQ_LEN = _ida_domain.MAX_UTF8_SEQ_LEN


def is_cvt64() -> "bool":
    r"""is_cvt64() -> bool"""
    return _ida_domain.is_cvt64()
CEF_RETERR = _ida_domain.CEF_RETERR

ENC_WIN1252 = _ida_domain.ENC_WIN1252

ENC_UTF8 = _ida_domain.ENC_UTF8

ENC_MUTF8 = _ida_domain.ENC_MUTF8

ENC_UTF16 = _ida_domain.ENC_UTF16

ENC_UTF16LE = _ida_domain.ENC_UTF16LE

ENC_UTF16BE = _ida_domain.ENC_UTF16BE

ENC_UTF32 = _ida_domain.ENC_UTF32

ENC_UTF32LE = _ida_domain.ENC_UTF32LE

ENC_UTF32BE = _ida_domain.ENC_UTF32BE

CP_UTF16 = _ida_domain.CP_UTF16

SUBSTCHAR = _ida_domain.SUBSTCHAR

class channel_redir_t(object):
    r"""Proxy of C++ channel_redir_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fd: "int" = property(_ida_domain.channel_redir_t_fd_get, _ida_domain.channel_redir_t_fd_set, doc=r"""fd""")
    file: "qstring" = property(_ida_domain.channel_redir_t_file_get, _ida_domain.channel_redir_t_file_set, doc=r"""file""")
    flags: "int" = property(_ida_domain.channel_redir_t_flags_get, _ida_domain.channel_redir_t_flags_set, doc=r"""flags""")

    def is_input(self) -> "bool":
        r"""is_input(self) -> bool"""
        return _ida_domain.channel_redir_t_is_input(self)

    def is_output(self) -> "bool":
        r"""is_output(self) -> bool"""
        return _ida_domain.channel_redir_t_is_output(self)

    def is_append(self) -> "bool":
        r"""is_append(self) -> bool"""
        return _ida_domain.channel_redir_t_is_append(self)

    def is_quoted(self) -> "bool":
        r"""is_quoted(self) -> bool"""
        return _ida_domain.channel_redir_t_is_quoted(self)
    start: "int" = property(_ida_domain.channel_redir_t_start_get, _ida_domain.channel_redir_t_start_set, doc=r"""start""")
    length: "int" = property(_ida_domain.channel_redir_t_length_get, _ida_domain.channel_redir_t_length_set, doc=r"""length""")

    def __init__(self):
        r"""__init__(self) -> channel_redir_t"""
        _ida_domain.channel_redir_t_swiginit(self, _ida_domain.new_channel_redir_t())
    __swig_destroy__ = _ida_domain.delete_channel_redir_t

# Register channel_redir_t in _ida_domain:
_ida_domain.channel_redir_t_swigregister(channel_redir_t)
IOREDIR_INPUT = _ida_domain.IOREDIR_INPUT

IOREDIR_OUTPUT = _ida_domain.IOREDIR_OUTPUT

IOREDIR_APPEND = _ida_domain.IOREDIR_APPEND

IOREDIR_QUOTED = _ida_domain.IOREDIR_QUOTED



def quote_cmdline_arg(arg: "qstring *") -> "bool":
    r"""quote_cmdline_arg(arg) -> bool"""
    return _ida_domain.quote_cmdline_arg(arg)
class plugin_options_t(object):
    r"""Proxy of C++ plugin_options_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def find(self, name: "qstring const &") -> "plugin_option_t const *":
        r"""find(self, name) -> plugin_option_t const *"""
        return _ida_domain.plugin_options_t_find(self, name)

    def erase(self, name: "char const *") -> "bool":
        r"""erase(self, name) -> bool"""
        return _ida_domain.plugin_options_t_erase(self, name)

    def __init__(self):
        r"""__init__(self) -> plugin_options_t"""
        _ida_domain.plugin_options_t_swiginit(self, _ida_domain.new_plugin_options_t())
    __swig_destroy__ = _ida_domain.delete_plugin_options_t

# Register plugin_options_t in _ida_domain:
_ida_domain.plugin_options_t_swigregister(plugin_options_t)
class instant_dbgopts_t(object):
    r"""Proxy of C++ instant_dbgopts_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    debmod: "qstring" = property(_ida_domain.instant_dbgopts_t_debmod_get, _ida_domain.instant_dbgopts_t_debmod_set, doc=r"""debmod""")
    env: "qstring" = property(_ida_domain.instant_dbgopts_t_env_get, _ida_domain.instant_dbgopts_t_env_set, doc=r"""env""")
    host: "qstring" = property(_ida_domain.instant_dbgopts_t_host_get, _ida_domain.instant_dbgopts_t_host_set, doc=r"""host""")
    _pass: "qstring" = property(_ida_domain.instant_dbgopts_t__pass_get, _ida_domain.instant_dbgopts_t__pass_set, doc=r"""_pass""")
    port: "int" = property(_ida_domain.instant_dbgopts_t_port_get, _ida_domain.instant_dbgopts_t_port_set, doc=r"""port""")
    pid: "int" = property(_ida_domain.instant_dbgopts_t_pid_get, _ida_domain.instant_dbgopts_t_pid_set, doc=r"""pid""")
    event_id: "int" = property(_ida_domain.instant_dbgopts_t_event_id_get, _ida_domain.instant_dbgopts_t_event_id_set, doc=r"""event_id""")
    attach: "bool" = property(_ida_domain.instant_dbgopts_t_attach_get, _ida_domain.instant_dbgopts_t_attach_set, doc=r"""attach""")

    def __init__(self):
        r"""__init__(self) -> instant_dbgopts_t"""
        _ida_domain.instant_dbgopts_t_swiginit(self, _ida_domain.new_instant_dbgopts_t())
    __swig_destroy__ = _ida_domain.delete_instant_dbgopts_t

# Register instant_dbgopts_t in _ida_domain:
_ida_domain.instant_dbgopts_t_swigregister(instant_dbgopts_t)

def parse_dbgopts(ido: "instant_dbgopts_t", r_switch: "char const *") -> "bool":
    r"""parse_dbgopts(ido, r_switch) -> bool"""
    return _ida_domain.parse_dbgopts(ido, r_switch)

def check_process_exit(handle: "void *", exit_code: "int *", msecs: "int"=-1) -> "int":
    r"""check_process_exit(handle, exit_code, msecs=-1) -> int"""
    return _ida_domain.check_process_exit(handle, exit_code, msecs)
TCT_UNKNOWN = _ida_domain.TCT_UNKNOWN

TCT_OWNER = _ida_domain.TCT_OWNER

TCT_NOT_OWNER = _ida_domain.TCT_NOT_OWNER


def is_control_tty(fd: "int") -> "enum tty_control_t":
    r"""is_control_tty(fd) -> enum tty_control_t"""
    return _ida_domain.is_control_tty(fd)

def qdetach_tty() -> "void":
    r"""qdetach_tty()"""
    return _ida_domain.qdetach_tty()

def qcontrol_tty() -> "void":
    r"""qcontrol_tty()"""
    return _ida_domain.qcontrol_tty()
class __qthread_t(object):
    r"""Proxy of C++ __qthread_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> __qthread_t"""
        _ida_domain.__qthread_t_swiginit(self, _ida_domain.new___qthread_t())
    __swig_destroy__ = _ida_domain.delete___qthread_t

# Register __qthread_t in _ida_domain:
_ida_domain.__qthread_t_swigregister(__qthread_t)

def qthread_equal(q1: "__qthread_t", q2: "__qthread_t") -> "bool":
    r"""qthread_equal(q1, q2) -> bool"""
    return _ida_domain.qthread_equal(q1, q2)

def is_main_thread() -> "bool":
    r"""is_main_thread() -> bool"""
    return _ida_domain.is_main_thread()
class __qsemaphore_t(object):
    r"""Proxy of C++ __qsemaphore_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> __qsemaphore_t"""
        _ida_domain.__qsemaphore_t_swiginit(self, _ida_domain.new___qsemaphore_t())
    __swig_destroy__ = _ida_domain.delete___qsemaphore_t

# Register __qsemaphore_t in _ida_domain:
_ida_domain.__qsemaphore_t_swigregister(__qsemaphore_t)
class __qmutex_t(object):
    r"""Proxy of C++ __qmutex_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> __qmutex_t"""
        _ida_domain.__qmutex_t_swiginit(self, _ida_domain.new___qmutex_t())
    __swig_destroy__ = _ida_domain.delete___qmutex_t

# Register __qmutex_t in _ida_domain:
_ida_domain.__qmutex_t_swigregister(__qmutex_t)
class qmutex_locker_t(object):
    r"""Proxy of C++ qmutex_locker_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _lock: "__qmutex_t"):
        r"""__init__(self, _lock) -> qmutex_locker_t"""
        _ida_domain.qmutex_locker_t_swiginit(self, _ida_domain.new_qmutex_locker_t(_lock))
    __swig_destroy__ = _ida_domain.delete_qmutex_locker_t

# Register qmutex_locker_t in _ida_domain:
_ida_domain.qmutex_locker_t_swigregister(qmutex_locker_t)

def get_login_name() -> "qstring *":
    r"""get_login_name() -> bool"""
    return _ida_domain.get_login_name()

def get_physical_core_count() -> "int":
    r"""get_physical_core_count() -> int"""
    return _ida_domain.get_physical_core_count()

def get_logical_core_count() -> "int":
    r"""get_logical_core_count() -> int"""
    return _ida_domain.get_logical_core_count()

def get_available_core_count() -> "int":
    r"""get_available_core_count() -> int"""
    return _ida_domain.get_available_core_count()
class intvec_t(object):
    r"""Proxy of C++ qvector< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> intvec_t
        __init__(self, x) -> intvec_t
        """
        _ida_domain.intvec_t_swiginit(self, _ida_domain.new_intvec_t(*args))
    __swig_destroy__ = _ida_domain.delete_intvec_t

    def push_back(self, *args) -> "int &":
        r"""
        push_back(self, x)
        push_back(self) -> int &
        """
        return _ida_domain.intvec_t_push_back(self, *args)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.intvec_t_pop_back(self)

    def size(self) -> "size_t":
        r"""size(self) -> size_t"""
        return _ida_domain.intvec_t_size(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.intvec_t_empty(self)

    def at(self, _idx: "size_t") -> "int const &":
        r"""at(self, _idx) -> int const &"""
        return _ida_domain.intvec_t_at(self, _idx)

    def qclear(self) -> "void":
        r"""qclear(self)"""
        return _ida_domain.intvec_t_qclear(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.intvec_t_clear(self)

    def resize(self, *args) -> "void":
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_domain.intvec_t_resize(self, *args)

    def capacity(self) -> "size_t":
        r"""capacity(self) -> size_t"""
        return _ida_domain.intvec_t_capacity(self)

    def reserve(self, cnt: "size_t") -> "void":
        r"""reserve(self, cnt)"""
        return _ida_domain.intvec_t_reserve(self, cnt)

    def truncate(self) -> "void":
        r"""truncate(self)"""
        return _ida_domain.intvec_t_truncate(self)

    def swap(self, r: "intvec_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.intvec_t_swap(self, r)

    def extract(self) -> "int *":
        r"""extract(self) -> int *"""
        return _ida_domain.intvec_t_extract(self)

    def inject(self, s: "int *", len: "size_t") -> "void":
        r"""inject(self, s, len)"""
        return _ida_domain.intvec_t_inject(self, s, len)

    def __eq__(self, r: "intvec_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.intvec_t___eq__(self, r)

    def __ne__(self, r: "intvec_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.intvec_t___ne__(self, r)

    def begin(self, *args) -> "qvector< int >::const_iterator":
        r"""
        begin(self) -> qvector< int >::iterator
        begin(self) -> qvector< int >::const_iterator
        """
        return _ida_domain.intvec_t_begin(self, *args)

    def end(self, *args) -> "qvector< int >::const_iterator":
        r"""
        end(self) -> qvector< int >::iterator
        end(self) -> qvector< int >::const_iterator
        """
        return _ida_domain.intvec_t_end(self, *args)

    def insert(self, it: "qvector< int >::iterator", x: "int const &") -> "qvector< int >::iterator":
        r"""insert(self, it, x) -> qvector< int >::iterator"""
        return _ida_domain.intvec_t_insert(self, it, x)

    def erase(self, *args) -> "qvector< int >::iterator":
        r"""
        erase(self, it) -> qvector< int >::iterator
        erase(self, first, last) -> qvector< int >::iterator
        """
        return _ida_domain.intvec_t_erase(self, *args)

    def find(self, *args) -> "qvector< int >::const_iterator":
        r"""
        find(self, x) -> qvector< int >::iterator
        find(self, x) -> qvector< int >::const_iterator
        """
        return _ida_domain.intvec_t_find(self, *args)

    def has(self, x: "int const &") -> "bool":
        r"""has(self, x) -> bool"""
        return _ida_domain.intvec_t_has(self, x)

    def add_unique(self, x: "int const &") -> "bool":
        r"""add_unique(self, x) -> bool"""
        return _ida_domain.intvec_t_add_unique(self, x)

    def _del(self, x: "int const &") -> "bool":
        r"""_del(self, x) -> bool"""
        return _ida_domain.intvec_t__del(self, x)

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.intvec_t___len__(self)

    def __getitem__(self, i: "size_t") -> "int const &":
        r"""__getitem__(self, i) -> int const &"""
        return _ida_domain.intvec_t___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "int const &") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.intvec_t___setitem__(self, i, v)

    def append(self, x: "int const &") -> "void":
        r"""append(self, x)"""
        return _ida_domain.intvec_t_append(self, x)

    def extend(self, x: "intvec_t") -> "void":
        r"""extend(self, x)"""
        return _ida_domain.intvec_t_extend(self, x)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register intvec_t in _ida_domain:
_ida_domain.intvec_t_swigregister(intvec_t)
NULL_PIPE_HANDLE = cvar.NULL_PIPE_HANDLE

class uintvec_t(object):
    r"""Proxy of C++ qvector< unsigned int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> uintvec_t
        __init__(self, x) -> uintvec_t
        """
        _ida_domain.uintvec_t_swiginit(self, _ida_domain.new_uintvec_t(*args))
    __swig_destroy__ = _ida_domain.delete_uintvec_t

    def push_back(self, *args) -> "unsigned int &":
        r"""
        push_back(self, x)
        push_back(self) -> unsigned int &
        """
        return _ida_domain.uintvec_t_push_back(self, *args)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.uintvec_t_pop_back(self)

    def size(self) -> "size_t":
        r"""size(self) -> size_t"""
        return _ida_domain.uintvec_t_size(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.uintvec_t_empty(self)

    def at(self, _idx: "size_t") -> "unsigned int const &":
        r"""at(self, _idx) -> unsigned int const &"""
        return _ida_domain.uintvec_t_at(self, _idx)

    def qclear(self) -> "void":
        r"""qclear(self)"""
        return _ida_domain.uintvec_t_qclear(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.uintvec_t_clear(self)

    def resize(self, *args) -> "void":
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_domain.uintvec_t_resize(self, *args)

    def capacity(self) -> "size_t":
        r"""capacity(self) -> size_t"""
        return _ida_domain.uintvec_t_capacity(self)

    def reserve(self, cnt: "size_t") -> "void":
        r"""reserve(self, cnt)"""
        return _ida_domain.uintvec_t_reserve(self, cnt)

    def truncate(self) -> "void":
        r"""truncate(self)"""
        return _ida_domain.uintvec_t_truncate(self)

    def swap(self, r: "uintvec_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.uintvec_t_swap(self, r)

    def extract(self) -> "unsigned int *":
        r"""extract(self) -> unsigned int *"""
        return _ida_domain.uintvec_t_extract(self)

    def inject(self, s: "unsigned int *", len: "size_t") -> "void":
        r"""inject(self, s, len)"""
        return _ida_domain.uintvec_t_inject(self, s, len)

    def __eq__(self, r: "uintvec_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.uintvec_t___eq__(self, r)

    def __ne__(self, r: "uintvec_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.uintvec_t___ne__(self, r)

    def begin(self, *args) -> "qvector< unsigned int >::const_iterator":
        r"""
        begin(self) -> qvector< unsigned int >::iterator
        begin(self) -> qvector< unsigned int >::const_iterator
        """
        return _ida_domain.uintvec_t_begin(self, *args)

    def end(self, *args) -> "qvector< unsigned int >::const_iterator":
        r"""
        end(self) -> qvector< unsigned int >::iterator
        end(self) -> qvector< unsigned int >::const_iterator
        """
        return _ida_domain.uintvec_t_end(self, *args)

    def insert(self, it: "qvector< unsigned int >::iterator", x: "unsigned int const &") -> "qvector< unsigned int >::iterator":
        r"""insert(self, it, x) -> qvector< unsigned int >::iterator"""
        return _ida_domain.uintvec_t_insert(self, it, x)

    def erase(self, *args) -> "qvector< unsigned int >::iterator":
        r"""
        erase(self, it) -> qvector< unsigned int >::iterator
        erase(self, first, last) -> qvector< unsigned int >::iterator
        """
        return _ida_domain.uintvec_t_erase(self, *args)

    def find(self, *args) -> "qvector< unsigned int >::const_iterator":
        r"""
        find(self, x) -> qvector< unsigned int >::iterator
        find(self, x) -> qvector< unsigned int >::const_iterator
        """
        return _ida_domain.uintvec_t_find(self, *args)

    def has(self, x: "unsigned int const &") -> "bool":
        r"""has(self, x) -> bool"""
        return _ida_domain.uintvec_t_has(self, x)

    def add_unique(self, x: "unsigned int const &") -> "bool":
        r"""add_unique(self, x) -> bool"""
        return _ida_domain.uintvec_t_add_unique(self, x)

    def _del(self, x: "unsigned int const &") -> "bool":
        r"""_del(self, x) -> bool"""
        return _ida_domain.uintvec_t__del(self, x)

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.uintvec_t___len__(self)

    def __getitem__(self, i: "size_t") -> "unsigned int const &":
        r"""__getitem__(self, i) -> unsigned int const &"""
        return _ida_domain.uintvec_t___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "unsigned int const &") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.uintvec_t___setitem__(self, i, v)

    def append(self, x: "unsigned int const &") -> "void":
        r"""append(self, x)"""
        return _ida_domain.uintvec_t_append(self, x)

    def extend(self, x: "uintvec_t") -> "void":
        r"""extend(self, x)"""
        return _ida_domain.uintvec_t_extend(self, x)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register uintvec_t in _ida_domain:
_ida_domain.uintvec_t_swigregister(uintvec_t)
class int64vec_t(object):
    r"""Proxy of C++ qvector< long long > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> int64vec_t
        __init__(self, x) -> int64vec_t
        """
        _ida_domain.int64vec_t_swiginit(self, _ida_domain.new_int64vec_t(*args))
    __swig_destroy__ = _ida_domain.delete_int64vec_t

    def push_back(self, *args) -> "long long &":
        r"""
        push_back(self, x)
        push_back(self) -> long long &
        """
        return _ida_domain.int64vec_t_push_back(self, *args)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.int64vec_t_pop_back(self)

    def size(self) -> "size_t":
        r"""size(self) -> size_t"""
        return _ida_domain.int64vec_t_size(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.int64vec_t_empty(self)

    def at(self, _idx: "size_t") -> "long long const &":
        r"""at(self, _idx) -> long long const &"""
        return _ida_domain.int64vec_t_at(self, _idx)

    def qclear(self) -> "void":
        r"""qclear(self)"""
        return _ida_domain.int64vec_t_qclear(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.int64vec_t_clear(self)

    def resize(self, *args) -> "void":
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_domain.int64vec_t_resize(self, *args)

    def capacity(self) -> "size_t":
        r"""capacity(self) -> size_t"""
        return _ida_domain.int64vec_t_capacity(self)

    def reserve(self, cnt: "size_t") -> "void":
        r"""reserve(self, cnt)"""
        return _ida_domain.int64vec_t_reserve(self, cnt)

    def truncate(self) -> "void":
        r"""truncate(self)"""
        return _ida_domain.int64vec_t_truncate(self)

    def swap(self, r: "int64vec_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.int64vec_t_swap(self, r)

    def extract(self) -> "long long *":
        r"""extract(self) -> long long *"""
        return _ida_domain.int64vec_t_extract(self)

    def inject(self, s: "long long *", len: "size_t") -> "void":
        r"""inject(self, s, len)"""
        return _ida_domain.int64vec_t_inject(self, s, len)

    def __eq__(self, r: "int64vec_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.int64vec_t___eq__(self, r)

    def __ne__(self, r: "int64vec_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.int64vec_t___ne__(self, r)

    def begin(self, *args) -> "qvector< long long >::const_iterator":
        r"""
        begin(self) -> qvector< long long >::iterator
        begin(self) -> qvector< long long >::const_iterator
        """
        return _ida_domain.int64vec_t_begin(self, *args)

    def end(self, *args) -> "qvector< long long >::const_iterator":
        r"""
        end(self) -> qvector< long long >::iterator
        end(self) -> qvector< long long >::const_iterator
        """
        return _ida_domain.int64vec_t_end(self, *args)

    def insert(self, it: "qvector< long long >::iterator", x: "long long const &") -> "qvector< long long >::iterator":
        r"""insert(self, it, x) -> qvector< long long >::iterator"""
        return _ida_domain.int64vec_t_insert(self, it, x)

    def erase(self, *args) -> "qvector< long long >::iterator":
        r"""
        erase(self, it) -> qvector< long long >::iterator
        erase(self, first, last) -> qvector< long long >::iterator
        """
        return _ida_domain.int64vec_t_erase(self, *args)

    def find(self, *args) -> "qvector< long long >::const_iterator":
        r"""
        find(self, x) -> qvector< long long >::iterator
        find(self, x) -> qvector< long long >::const_iterator
        """
        return _ida_domain.int64vec_t_find(self, *args)

    def has(self, x: "long long const &") -> "bool":
        r"""has(self, x) -> bool"""
        return _ida_domain.int64vec_t_has(self, x)

    def add_unique(self, x: "long long const &") -> "bool":
        r"""add_unique(self, x) -> bool"""
        return _ida_domain.int64vec_t_add_unique(self, x)

    def _del(self, x: "long long const &") -> "bool":
        r"""_del(self, x) -> bool"""
        return _ida_domain.int64vec_t__del(self, x)

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.int64vec_t___len__(self)

    def __getitem__(self, i: "size_t") -> "long long const &":
        r"""__getitem__(self, i) -> long long const &"""
        return _ida_domain.int64vec_t___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "long long const &") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.int64vec_t___setitem__(self, i, v)

    def append(self, x: "long long const &") -> "void":
        r"""append(self, x)"""
        return _ida_domain.int64vec_t_append(self, x)

    def extend(self, x: "int64vec_t") -> "void":
        r"""extend(self, x)"""
        return _ida_domain.int64vec_t_extend(self, x)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register int64vec_t in _ida_domain:
_ida_domain.int64vec_t_swigregister(int64vec_t)
class uint64vec_t(object):
    r"""Proxy of C++ qvector< unsigned long long > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> uint64vec_t
        __init__(self, x) -> uint64vec_t
        """
        _ida_domain.uint64vec_t_swiginit(self, _ida_domain.new_uint64vec_t(*args))
    __swig_destroy__ = _ida_domain.delete_uint64vec_t

    def push_back(self, *args) -> "unsigned long long &":
        r"""
        push_back(self, x)
        push_back(self) -> unsigned long long &
        """
        return _ida_domain.uint64vec_t_push_back(self, *args)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.uint64vec_t_pop_back(self)

    def size(self) -> "size_t":
        r"""size(self) -> size_t"""
        return _ida_domain.uint64vec_t_size(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.uint64vec_t_empty(self)

    def at(self, _idx: "size_t") -> "unsigned long long const &":
        r"""at(self, _idx) -> unsigned long long const &"""
        return _ida_domain.uint64vec_t_at(self, _idx)

    def qclear(self) -> "void":
        r"""qclear(self)"""
        return _ida_domain.uint64vec_t_qclear(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.uint64vec_t_clear(self)

    def resize(self, *args) -> "void":
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_domain.uint64vec_t_resize(self, *args)

    def capacity(self) -> "size_t":
        r"""capacity(self) -> size_t"""
        return _ida_domain.uint64vec_t_capacity(self)

    def reserve(self, cnt: "size_t") -> "void":
        r"""reserve(self, cnt)"""
        return _ida_domain.uint64vec_t_reserve(self, cnt)

    def truncate(self) -> "void":
        r"""truncate(self)"""
        return _ida_domain.uint64vec_t_truncate(self)

    def swap(self, r: "uint64vec_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.uint64vec_t_swap(self, r)

    def extract(self) -> "unsigned long long *":
        r"""extract(self) -> unsigned long long *"""
        return _ida_domain.uint64vec_t_extract(self)

    def inject(self, s: "unsigned long long *", len: "size_t") -> "void":
        r"""inject(self, s, len)"""
        return _ida_domain.uint64vec_t_inject(self, s, len)

    def __eq__(self, r: "uint64vec_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.uint64vec_t___eq__(self, r)

    def __ne__(self, r: "uint64vec_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.uint64vec_t___ne__(self, r)

    def begin(self, *args) -> "qvector< unsigned long long >::const_iterator":
        r"""
        begin(self) -> qvector< unsigned long long >::iterator
        begin(self) -> qvector< unsigned long long >::const_iterator
        """
        return _ida_domain.uint64vec_t_begin(self, *args)

    def end(self, *args) -> "qvector< unsigned long long >::const_iterator":
        r"""
        end(self) -> qvector< unsigned long long >::iterator
        end(self) -> qvector< unsigned long long >::const_iterator
        """
        return _ida_domain.uint64vec_t_end(self, *args)

    def insert(self, it: "qvector< unsigned long long >::iterator", x: "unsigned long long const &") -> "qvector< unsigned long long >::iterator":
        r"""insert(self, it, x) -> qvector< unsigned long long >::iterator"""
        return _ida_domain.uint64vec_t_insert(self, it, x)

    def erase(self, *args) -> "qvector< unsigned long long >::iterator":
        r"""
        erase(self, it) -> qvector< unsigned long long >::iterator
        erase(self, first, last) -> qvector< unsigned long long >::iterator
        """
        return _ida_domain.uint64vec_t_erase(self, *args)

    def find(self, *args) -> "qvector< unsigned long long >::const_iterator":
        r"""
        find(self, x) -> qvector< unsigned long long >::iterator
        find(self, x) -> qvector< unsigned long long >::const_iterator
        """
        return _ida_domain.uint64vec_t_find(self, *args)

    def has(self, x: "unsigned long long const &") -> "bool":
        r"""has(self, x) -> bool"""
        return _ida_domain.uint64vec_t_has(self, x)

    def add_unique(self, x: "unsigned long long const &") -> "bool":
        r"""add_unique(self, x) -> bool"""
        return _ida_domain.uint64vec_t_add_unique(self, x)

    def _del(self, x: "unsigned long long const &") -> "bool":
        r"""_del(self, x) -> bool"""
        return _ida_domain.uint64vec_t__del(self, x)

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.uint64vec_t___len__(self)

    def __getitem__(self, i: "size_t") -> "unsigned long long const &":
        r"""__getitem__(self, i) -> unsigned long long const &"""
        return _ida_domain.uint64vec_t___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "unsigned long long const &") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.uint64vec_t___setitem__(self, i, v)

    def append(self, x: "unsigned long long const &") -> "void":
        r"""append(self, x)"""
        return _ida_domain.uint64vec_t_append(self, x)

    def extend(self, x: "uint64vec_t") -> "void":
        r"""extend(self, x)"""
        return _ida_domain.uint64vec_t_extend(self, x)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register uint64vec_t in _ida_domain:
_ida_domain.uint64vec_t_swigregister(uint64vec_t)
class boolvec_t(object):
    r"""Proxy of C++ qvector< bool > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> boolvec_t
        __init__(self, x) -> boolvec_t
        """
        _ida_domain.boolvec_t_swiginit(self, _ida_domain.new_boolvec_t(*args))
    __swig_destroy__ = _ida_domain.delete_boolvec_t

    def push_back(self, *args) -> "bool &":
        r"""
        push_back(self, x)
        push_back(self) -> bool &
        """
        return _ida_domain.boolvec_t_push_back(self, *args)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.boolvec_t_pop_back(self)

    def size(self) -> "size_t":
        r"""size(self) -> size_t"""
        return _ida_domain.boolvec_t_size(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.boolvec_t_empty(self)

    def at(self, _idx: "size_t") -> "bool const &":
        r"""at(self, _idx) -> bool const &"""
        return _ida_domain.boolvec_t_at(self, _idx)

    def qclear(self) -> "void":
        r"""qclear(self)"""
        return _ida_domain.boolvec_t_qclear(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.boolvec_t_clear(self)

    def resize(self, *args) -> "void":
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_domain.boolvec_t_resize(self, *args)

    def grow(self, *args) -> "void":
        r"""grow(self, x=bool())"""
        return _ida_domain.boolvec_t_grow(self, *args)

    def capacity(self) -> "size_t":
        r"""capacity(self) -> size_t"""
        return _ida_domain.boolvec_t_capacity(self)

    def reserve(self, cnt: "size_t") -> "void":
        r"""reserve(self, cnt)"""
        return _ida_domain.boolvec_t_reserve(self, cnt)

    def truncate(self) -> "void":
        r"""truncate(self)"""
        return _ida_domain.boolvec_t_truncate(self)

    def swap(self, r: "boolvec_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.boolvec_t_swap(self, r)

    def extract(self) -> "bool *":
        r"""extract(self) -> bool *"""
        return _ida_domain.boolvec_t_extract(self)

    def inject(self, s: "bool *", len: "size_t") -> "void":
        r"""inject(self, s, len)"""
        return _ida_domain.boolvec_t_inject(self, s, len)

    def __eq__(self, r: "boolvec_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.boolvec_t___eq__(self, r)

    def __ne__(self, r: "boolvec_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.boolvec_t___ne__(self, r)

    def begin(self, *args) -> "qvector< bool >::const_iterator":
        r"""
        begin(self) -> qvector< bool >::iterator
        begin(self) -> qvector< bool >::const_iterator
        """
        return _ida_domain.boolvec_t_begin(self, *args)

    def end(self, *args) -> "qvector< bool >::const_iterator":
        r"""
        end(self) -> qvector< bool >::iterator
        end(self) -> qvector< bool >::const_iterator
        """
        return _ida_domain.boolvec_t_end(self, *args)

    def insert(self, it: "qvector< bool >::iterator", x: "bool const &") -> "qvector< bool >::iterator":
        r"""insert(self, it, x) -> qvector< bool >::iterator"""
        return _ida_domain.boolvec_t_insert(self, it, x)

    def erase(self, *args) -> "qvector< bool >::iterator":
        r"""
        erase(self, it) -> qvector< bool >::iterator
        erase(self, first, last) -> qvector< bool >::iterator
        """
        return _ida_domain.boolvec_t_erase(self, *args)

    def find(self, *args) -> "qvector< bool >::const_iterator":
        r"""
        find(self, x) -> qvector< bool >::iterator
        find(self, x) -> qvector< bool >::const_iterator
        """
        return _ida_domain.boolvec_t_find(self, *args)

    def has(self, x: "bool const &") -> "bool":
        r"""has(self, x) -> bool"""
        return _ida_domain.boolvec_t_has(self, x)

    def add_unique(self, x: "bool const &") -> "bool":
        r"""add_unique(self, x) -> bool"""
        return _ida_domain.boolvec_t_add_unique(self, x)

    def _del(self, x: "bool const &") -> "bool":
        r"""_del(self, x) -> bool"""
        return _ida_domain.boolvec_t__del(self, x)

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.boolvec_t___len__(self)

    def __getitem__(self, i: "size_t") -> "bool const &":
        r"""__getitem__(self, i) -> bool const &"""
        return _ida_domain.boolvec_t___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "bool const &") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.boolvec_t___setitem__(self, i, v)

    def append(self, x: "bool const &") -> "void":
        r"""append(self, x)"""
        return _ida_domain.boolvec_t_append(self, x)

    def extend(self, x: "boolvec_t") -> "void":
        r"""extend(self, x)"""
        return _ida_domain.boolvec_t_extend(self, x)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register boolvec_t in _ida_domain:
_ida_domain.boolvec_t_swigregister(boolvec_t)
class strvec_t(object):
    r"""Proxy of C++ qvector< simpleline_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> strvec_t
        __init__(self, x) -> strvec_t
        """
        _ida_domain.strvec_t_swiginit(self, _ida_domain.new_strvec_t(*args))
    __swig_destroy__ = _ida_domain.delete_strvec_t

    def push_back(self, *args) -> "simpleline_t &":
        r"""
        push_back(self, x)
        push_back(self) -> simpleline_t &
        """
        return _ida_domain.strvec_t_push_back(self, *args)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.strvec_t_pop_back(self)

    def size(self) -> "size_t":
        r"""size(self) -> size_t"""
        return _ida_domain.strvec_t_size(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.strvec_t_empty(self)

    def at(self, _idx: "size_t") -> "simpleline_t const &":
        r"""at(self, _idx) -> simpleline_t const &"""
        return _ida_domain.strvec_t_at(self, _idx)

    def qclear(self) -> "void":
        r"""qclear(self)"""
        return _ida_domain.strvec_t_qclear(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.strvec_t_clear(self)

    def resize(self, *args) -> "void":
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_domain.strvec_t_resize(self, *args)

    def grow(self, *args) -> "void":
        r"""grow(self, x=simpleline_t())"""
        return _ida_domain.strvec_t_grow(self, *args)

    def capacity(self) -> "size_t":
        r"""capacity(self) -> size_t"""
        return _ida_domain.strvec_t_capacity(self)

    def reserve(self, cnt: "size_t") -> "void":
        r"""reserve(self, cnt)"""
        return _ida_domain.strvec_t_reserve(self, cnt)

    def truncate(self) -> "void":
        r"""truncate(self)"""
        return _ida_domain.strvec_t_truncate(self)

    def swap(self, r: "strvec_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.strvec_t_swap(self, r)

    def extract(self) -> "simpleline_t *":
        r"""extract(self) -> simpleline_t *"""
        return _ida_domain.strvec_t_extract(self)

    def inject(self, s: "simpleline_t *", len: "size_t") -> "void":
        r"""inject(self, s, len)"""
        return _ida_domain.strvec_t_inject(self, s, len)

    def begin(self, *args) -> "qvector< simpleline_t >::const_iterator":
        r"""
        begin(self) -> qvector< simpleline_t >::iterator
        begin(self) -> qvector< simpleline_t >::const_iterator
        """
        return _ida_domain.strvec_t_begin(self, *args)

    def end(self, *args) -> "qvector< simpleline_t >::const_iterator":
        r"""
        end(self) -> qvector< simpleline_t >::iterator
        end(self) -> qvector< simpleline_t >::const_iterator
        """
        return _ida_domain.strvec_t_end(self, *args)

    def insert(self, it: "qvector< simpleline_t >::iterator", x: "simpleline_t const &") -> "qvector< simpleline_t >::iterator":
        r"""insert(self, it, x) -> qvector< simpleline_t >::iterator"""
        return _ida_domain.strvec_t_insert(self, it, x)

    def erase(self, *args) -> "qvector< simpleline_t >::iterator":
        r"""
        erase(self, it) -> qvector< simpleline_t >::iterator
        erase(self, first, last) -> qvector< simpleline_t >::iterator
        """
        return _ida_domain.strvec_t_erase(self, *args)

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.strvec_t___len__(self)

    def __getitem__(self, i: "size_t") -> "simpleline_t const &":
        r"""__getitem__(self, i) -> simpleline_t const &"""
        return _ida_domain.strvec_t___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "simpleline_t const &") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.strvec_t___setitem__(self, i, v)

    def append(self, x: "simpleline_t const &") -> "void":
        r"""append(self, x)"""
        return _ida_domain.strvec_t_append(self, x)

    def extend(self, x: "strvec_t") -> "void":
        r"""extend(self, x)"""
        return _ida_domain.strvec_t_extend(self, x)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register strvec_t in _ida_domain:
_ida_domain.strvec_t_swigregister(strvec_t)
class sizevec_t(object):
    r"""Proxy of C++ qvector< size_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> sizevec_t
        __init__(self, x) -> sizevec_t
        """
        _ida_domain.sizevec_t_swiginit(self, _ida_domain.new_sizevec_t(*args))
    __swig_destroy__ = _ida_domain.delete_sizevec_t

    def push_back(self, *args) -> "size_t &":
        r"""
        push_back(self, x)
        push_back(self) -> size_t &
        """
        return _ida_domain.sizevec_t_push_back(self, *args)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.sizevec_t_pop_back(self)

    def size(self) -> "size_t":
        r"""size(self) -> size_t"""
        return _ida_domain.sizevec_t_size(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.sizevec_t_empty(self)

    def at(self, _idx: "size_t") -> "size_t const &":
        r"""at(self, _idx) -> size_t const &"""
        return _ida_domain.sizevec_t_at(self, _idx)

    def qclear(self) -> "void":
        r"""qclear(self)"""
        return _ida_domain.sizevec_t_qclear(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.sizevec_t_clear(self)

    def resize(self, *args) -> "void":
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_domain.sizevec_t_resize(self, *args)

    def grow(self, *args) -> "void":
        r"""grow(self, x=size_t())"""
        return _ida_domain.sizevec_t_grow(self, *args)

    def capacity(self) -> "size_t":
        r"""capacity(self) -> size_t"""
        return _ida_domain.sizevec_t_capacity(self)

    def reserve(self, cnt: "size_t") -> "void":
        r"""reserve(self, cnt)"""
        return _ida_domain.sizevec_t_reserve(self, cnt)

    def truncate(self) -> "void":
        r"""truncate(self)"""
        return _ida_domain.sizevec_t_truncate(self)

    def swap(self, r: "sizevec_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.sizevec_t_swap(self, r)

    def extract(self) -> "size_t *":
        r"""extract(self) -> size_t *"""
        return _ida_domain.sizevec_t_extract(self)

    def inject(self, s: "size_t *", len: "size_t") -> "void":
        r"""inject(self, s, len)"""
        return _ida_domain.sizevec_t_inject(self, s, len)

    def __eq__(self, r: "sizevec_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.sizevec_t___eq__(self, r)

    def __ne__(self, r: "sizevec_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.sizevec_t___ne__(self, r)

    def begin(self, *args) -> "qvector< size_t >::const_iterator":
        r"""
        begin(self) -> qvector< size_t >::iterator
        begin(self) -> qvector< size_t >::const_iterator
        """
        return _ida_domain.sizevec_t_begin(self, *args)

    def end(self, *args) -> "qvector< size_t >::const_iterator":
        r"""
        end(self) -> qvector< size_t >::iterator
        end(self) -> qvector< size_t >::const_iterator
        """
        return _ida_domain.sizevec_t_end(self, *args)

    def insert(self, it: "qvector< size_t >::iterator", x: "size_t const &") -> "qvector< size_t >::iterator":
        r"""insert(self, it, x) -> qvector< size_t >::iterator"""
        return _ida_domain.sizevec_t_insert(self, it, x)

    def erase(self, *args) -> "qvector< size_t >::iterator":
        r"""
        erase(self, it) -> qvector< size_t >::iterator
        erase(self, first, last) -> qvector< size_t >::iterator
        """
        return _ida_domain.sizevec_t_erase(self, *args)

    def find(self, *args) -> "qvector< size_t >::const_iterator":
        r"""
        find(self, x) -> qvector< size_t >::iterator
        find(self, x) -> qvector< size_t >::const_iterator
        """
        return _ida_domain.sizevec_t_find(self, *args)

    def has(self, x: "size_t const &") -> "bool":
        r"""has(self, x) -> bool"""
        return _ida_domain.sizevec_t_has(self, x)

    def add_unique(self, x: "size_t const &") -> "bool":
        r"""add_unique(self, x) -> bool"""
        return _ida_domain.sizevec_t_add_unique(self, x)

    def _del(self, x: "size_t const &") -> "bool":
        r"""_del(self, x) -> bool"""
        return _ida_domain.sizevec_t__del(self, x)

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.sizevec_t___len__(self)

    def __getitem__(self, i: "size_t") -> "size_t const &":
        r"""__getitem__(self, i) -> size_t const &"""
        return _ida_domain.sizevec_t___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "size_t const &") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.sizevec_t___setitem__(self, i, v)

    def append(self, x: "size_t const &") -> "void":
        r"""append(self, x)"""
        return _ida_domain.sizevec_t_append(self, x)

    def extend(self, x: "sizevec_t") -> "void":
        r"""extend(self, x)"""
        return _ida_domain.sizevec_t_extend(self, x)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register sizevec_t in _ida_domain:
_ida_domain.sizevec_t_swigregister(sizevec_t)

def qstrvec_t_create() -> "PyObject *":
    r"""qstrvec_t_create() -> PyObject *"""
    return _ida_domain.qstrvec_t_create()

def qstrvec_t_destroy(py_obj: "PyObject *") -> "bool":
    r"""qstrvec_t_destroy(py_obj) -> bool"""
    return _ida_domain.qstrvec_t_destroy(py_obj)

def qstrvec_t_get_clink(_self: "PyObject *") -> "qstrvec_t *":
    r"""qstrvec_t_get_clink(_self) -> qstrvec_t *"""
    return _ida_domain.qstrvec_t_get_clink(_self)

def qstrvec_t_get_clink_ptr(_self: "PyObject *") -> "PyObject *":
    r"""qstrvec_t_get_clink_ptr(_self) -> PyObject *"""
    return _ida_domain.qstrvec_t_get_clink_ptr(_self)

def qstrvec_t_assign(_self: "PyObject *", other: "PyObject *") -> "bool":
    r"""qstrvec_t_assign(_self, other) -> bool"""
    return _ida_domain.qstrvec_t_assign(_self, other)

def qstrvec_t_addressof(_self: "PyObject *", idx: "size_t") -> "PyObject *":
    r"""qstrvec_t_addressof(_self, idx) -> PyObject *"""
    return _ida_domain.qstrvec_t_addressof(_self, idx)

def qstrvec_t_set(_self: "PyObject *", idx: "size_t", s: "char const *") -> "bool":
    r"""qstrvec_t_set(_self, idx, s) -> bool"""
    return _ida_domain.qstrvec_t_set(_self, idx, s)

def qstrvec_t_from_list(_self: "PyObject *", py_list: "PyObject *") -> "bool":
    r"""qstrvec_t_from_list(_self, py_list) -> bool"""
    return _ida_domain.qstrvec_t_from_list(_self, py_list)

def qstrvec_t_size(_self: "PyObject *") -> "size_t":
    r"""qstrvec_t_size(_self) -> size_t"""
    return _ida_domain.qstrvec_t_size(_self)

def qstrvec_t_get(_self: "PyObject *", idx: "size_t") -> "PyObject *":
    r"""qstrvec_t_get(_self, idx) -> PyObject *"""
    return _ida_domain.qstrvec_t_get(_self, idx)

def qstrvec_t_add(_self: "PyObject *", s: "char const *") -> "bool":
    r"""qstrvec_t_add(_self, s) -> bool"""
    return _ida_domain.qstrvec_t_add(_self, s)

def qstrvec_t_clear(_self: "PyObject *", qclear: "bool") -> "bool":
    r"""qstrvec_t_clear(_self, qclear) -> bool"""
    return _ida_domain.qstrvec_t_clear(_self, qclear)

def qstrvec_t_insert(_self: "PyObject *", idx: "size_t", s: "char const *") -> "bool":
    r"""qstrvec_t_insert(_self, idx, s) -> bool"""
    return _ida_domain.qstrvec_t_insert(_self, idx, s)

def qstrvec_t_remove(_self: "PyObject *", idx: "size_t") -> "bool":
    r"""qstrvec_t_remove(_self, idx) -> bool"""
    return _ida_domain.qstrvec_t_remove(_self, idx)

def str2user(str: "char const *") -> "PyObject *":
    r"""str2user(str) -> PyObject *"""
    return _ida_domain.str2user(str)

#<pycode(py_pro)>
import ida_idaapi

longlongvec_t = int64vec_t
ulonglongvec_t = uint64vec_t

if ida_idaapi.__EA64__:
    svalvec_t = int64vec_t
    uvalvec_t = uint64vec_t
else:
    svalvec_t = intvec_t
    uvalvec_t = uintvec_t
eavec_t = uvalvec_t

ida_idaapi._listify_types(
        intvec_t,
        uintvec_t,
        int64vec_t,
        uint64vec_t,
        boolvec_t,
        strvec_t)

# -----------------------------------------------------------------------
# qstrvec_t clinked object
class _qstrvec_t(ida_idaapi.py_clinked_object_t):
    """
    WARNING: It is very unlikely an IDAPython user should ever, ever
    have to use this type. It should only be used for IDAPython internals.

    For example, in py_askusingform.py, we ctypes-expose to the IDA
    kernel & UI a qstrvec instance, in case a DropdownListControl is
    constructed.
    That's because that's what ask_form expects, and we have no
    choice but to make a DropdownListControl hold a qstrvec_t.
    This is, afaict, the only situation where a Python
    _qstrvec_t is required.
    """

    def __init__(self, items=None):
        ida_idaapi.py_clinked_object_t.__init__(self)
# Populate the list if needed
        if items:
            self.from_list(items)

    def _create_clink(self):
        return _ida_pro.qstrvec_t_create()

    def _del_clink(self, lnk):
        return _ida_pro.qstrvec_t_destroy(lnk)

    def _get_clink_ptr(self):
        return _ida_pro.qstrvec_t_get_clink_ptr(self)

    def assign(self, other):
        """Copies the contents of 'other' to 'self'"""
        return _ida_pro.qstrvec_t_assign(self, other)

    def __setitem__(self, idx, s):
        """Sets string at the given index"""
        return _ida_pro.qstrvec_t_set(self, idx, s)

    def __getitem__(self, idx):
        """Gets the string at the given index"""
        return _ida_pro.qstrvec_t_get(self, idx)

    def __get_size(self):
        return _ida_pro.qstrvec_t_size(self)

    size = property(__get_size)
    """Returns the count of elements"""

    def addressof(self, idx):
        """Returns the address (as number) of the qstring at the given index"""
        return _ida_pro.qstrvec_t_addressof(self, idx)

    def add(self, s):
        """Add a string to the vector"""
        return _ida_pro.qstrvec_t_add(self, s)

    def from_list(self, lst):
        """Populates the vector from a Python string list"""
        return _ida_pro.qstrvec_t_from_list(self, lst)

    def clear(self, qclear=False):
        """
        Clears all strings from the vector.
        @param qclear: Just reset the size but do not actually free the memory
        """
        return _ida_pro.qstrvec_t_clear(self, qclear)

    def insert(self, idx, s):
        """Insert a string into the vector"""
        return _ida_pro.qstrvec_t_insert(self, idx, s)

    def remove(self, idx):
        """Removes a string from the vector"""
        return _ida_pro.qstrvec_t_remove(self, idx)

#</pycode(py_pro)>


def compile_idc_file(nonnul_line: "char const *") -> "qstring *":
    r"""compile_idc_file(nonnul_line) -> bool"""
    return _ida_domain.compile_idc_file(nonnul_line)

def compile_idc_text(nonnul_line: "char const *") -> "qstring *":
    r"""compile_idc_text(nonnul_line) -> bool"""
    return _ida_domain.compile_idc_text(nonnul_line)

def py_get_call_idc_func() -> "size_t":
    r"""py_get_call_idc_func() -> size_t"""
    return _ida_domain.py_get_call_idc_func()

def pyw_register_idc_func(name: "char const *", args: "char const *", py_fp: "PyObject *") -> "size_t":
    r"""pyw_register_idc_func(name, args, py_fp) -> size_t"""
    return _ida_domain.pyw_register_idc_func(name, args, py_fp)

def pyw_unregister_idc_func(ctxptr: "size_t") -> "bool":
    r"""pyw_unregister_idc_func(ctxptr) -> bool"""
    return _ida_domain.pyw_unregister_idc_func(ctxptr)

def pyw_convert_defvals(out: "idc_values_t", py_seq: "PyObject *") -> "bool":
    r"""pyw_convert_defvals(out, py_seq) -> bool"""
    return _ida_domain.pyw_convert_defvals(out, py_seq)

def py_add_idc_func(name: "char const *", fp_ptr: "size_t", args: "char const *", defvals: "idc_values_t", flags: "int") -> "bool":
    r"""py_add_idc_func(name, fp_ptr, args, defvals, flags) -> bool"""
    return _ida_domain.py_add_idc_func(name, fp_ptr, args, defvals, flags)

def eval_expr(rv: "idc_value_t", where: "ea_t", line: "char const *") -> "qstring *":
    r"""eval_expr(rv, where, line) -> bool"""
    return _ida_domain.eval_expr(rv, where, line)

def eval_idc_expr(rv: "idc_value_t", where: "ea_t", line: "char const *") -> "qstring *":
    r"""eval_idc_expr(rv, where, line) -> bool"""
    return _ida_domain.eval_idc_expr(rv, where, line)
IDC_LANG_EXT = _ida_domain.IDC_LANG_EXT


def idcv_long(v: "idc_value_t") -> "error_t":
    r"""idcv_long(v) -> error_t"""
    return _ida_domain.idcv_long(v)

def idcv_int64(v: "idc_value_t") -> "error_t":
    r"""idcv_int64(v) -> error_t"""
    return _ida_domain.idcv_int64(v)

def idcv_num(v: "idc_value_t") -> "error_t":
    r"""idcv_num(v) -> error_t"""
    return _ida_domain.idcv_num(v)

def idcv_string(v: "idc_value_t") -> "error_t":
    r"""idcv_string(v) -> error_t"""
    return _ida_domain.idcv_string(v)

def idcv_float(v: "idc_value_t") -> "error_t":
    r"""idcv_float(v) -> error_t"""
    return _ida_domain.idcv_float(v)

def idcv_object(v: "idc_value_t", icls: "idc_class_t const *"=None) -> "error_t":
    r"""idcv_object(v, icls=None) -> error_t"""
    return _ida_domain.idcv_object(v, icls)

def move_idcv(dst: "idc_value_t", src: "idc_value_t") -> "error_t":
    r"""move_idcv(dst, src) -> error_t"""
    return _ida_domain.move_idcv(dst, src)

def copy_idcv(dst: "idc_value_t", src: "idc_value_t") -> "error_t":
    r"""copy_idcv(dst, src) -> error_t"""
    return _ida_domain.copy_idcv(dst, src)

def deep_copy_idcv(dst: "idc_value_t", src: "idc_value_t") -> "error_t":
    r"""deep_copy_idcv(dst, src) -> error_t"""
    return _ida_domain.deep_copy_idcv(dst, src)

def free_idcv(v: "idc_value_t") -> "void":
    r"""free_idcv(v)"""
    return _ida_domain.free_idcv(v)

def swap_idcvs(v1: "idc_value_t", v2: "idc_value_t") -> "void":
    r"""swap_idcvs(v1, v2)"""
    return _ida_domain.swap_idcvs(v1, v2)

def get_idcv_class_name(obj: "idc_value_t") -> "qstring *":
    r"""get_idcv_class_name(obj) -> error_t"""
    return _ida_domain.get_idcv_class_name(obj)

def get_idcv_attr(res: "idc_value_t", obj: "idc_value_t", attr: "char const *", may_use_getattr: "bool"=False) -> "error_t":
    r"""get_idcv_attr(res, obj, attr, may_use_getattr=False) -> error_t"""
    return _ida_domain.get_idcv_attr(res, obj, attr, may_use_getattr)

def set_idcv_attr(obj: "idc_value_t", attr: "char const *", value: "idc_value_t", may_use_setattr: "bool"=False) -> "error_t":
    r"""set_idcv_attr(obj, attr, value, may_use_setattr=False) -> error_t"""
    return _ida_domain.set_idcv_attr(obj, attr, value, may_use_setattr)

def del_idcv_attr(obj: "idc_value_t", attr: "char const *") -> "error_t":
    r"""del_idcv_attr(obj, attr) -> error_t"""
    return _ida_domain.del_idcv_attr(obj, attr)

def first_idcv_attr(obj: "idc_value_t") -> "char const *":
    r"""first_idcv_attr(obj) -> char const *"""
    return _ida_domain.first_idcv_attr(obj)

def last_idcv_attr(obj: "idc_value_t") -> "char const *":
    r"""last_idcv_attr(obj) -> char const *"""
    return _ida_domain.last_idcv_attr(obj)

def next_idcv_attr(obj: "idc_value_t", attr: "char const *") -> "char const *":
    r"""next_idcv_attr(obj, attr) -> char const *"""
    return _ida_domain.next_idcv_attr(obj, attr)

def prev_idcv_attr(obj: "idc_value_t", attr: "char const *") -> "char const *":
    r"""prev_idcv_attr(obj, attr) -> char const *"""
    return _ida_domain.prev_idcv_attr(obj, attr)

def print_idcv(v: "idc_value_t", name: "char const *"=None, indent: "int"=0) -> "qstring *":
    r"""print_idcv(v, name=None, indent=0) -> bool"""
    return _ida_domain.print_idcv(v, name, indent)

def get_idcv_slice(res: "idc_value_t", v: "idc_value_t", i1: "uval_t", i2: "uval_t", flags: "int"=0) -> "error_t":
    r"""get_idcv_slice(res, v, i1, i2, flags=0) -> error_t"""
    return _ida_domain.get_idcv_slice(res, v, i1, i2, flags)
VARSLICE_SINGLE = _ida_domain.VARSLICE_SINGLE


def set_idcv_slice(v: "idc_value_t", i1: "uval_t", i2: "uval_t", _in: "idc_value_t", flags: "int"=0) -> "error_t":
    r"""set_idcv_slice(v, i1, i2, _in, flags=0) -> error_t"""
    return _ida_domain.set_idcv_slice(v, i1, i2, _in, flags)

def add_idc_class(name: "char const *", super: "idc_class_t const *"=None) -> "idc_class_t *":
    r"""add_idc_class(name, super=None) -> idc_class_t"""
    return _ida_domain.add_idc_class(name, super)

def find_idc_class(name: "char const *") -> "idc_class_t *":
    r"""find_idc_class(name) -> idc_class_t *"""
    return _ida_domain.find_idc_class(name)

def deref_idcv(v: "idc_value_t", vref_flags: "int") -> "idc_value_t *":
    r"""deref_idcv(v, vref_flags) -> idc_value_t"""
    return _ida_domain.deref_idcv(v, vref_flags)
VREF_LOOP = _ida_domain.VREF_LOOP

VREF_ONCE = _ida_domain.VREF_ONCE

VREF_COPY = _ida_domain.VREF_COPY


def create_idcv_ref(ref: "idc_value_t", v: "idc_value_t") -> "bool":
    r"""create_idcv_ref(ref, v) -> bool"""
    return _ida_domain.create_idcv_ref(ref, v)

def add_idc_gvar(name: "char const *") -> "idc_value_t *":
    r"""add_idc_gvar(name) -> idc_value_t"""
    return _ida_domain.add_idc_gvar(name)

def find_idc_gvar(name: "char const *") -> "idc_value_t *":
    r"""find_idc_gvar(name) -> idc_value_t"""
    return _ida_domain.find_idc_gvar(name)
class idc_value_t(object):
    r"""Proxy of C++ idc_value_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    vtype: "char" = property(_ida_domain.idc_value_t_vtype_get, _ida_domain.idc_value_t_vtype_set, doc=r"""vtype""")
    num: "sval_t" = property(_ida_domain.idc_value_t_num_get, _ida_domain.idc_value_t_num_set, doc=r"""num""")
    e: "fpvalue_t" = property(_ida_domain.idc_value_t_e_get, _ida_domain.idc_value_t_e_set, doc=r"""e""")
    obj: "idc_object_t *" = property(_ida_domain.idc_value_t_obj_get, _ida_domain.idc_value_t_obj_set, doc=r"""obj""")
    funcidx: "int" = property(_ida_domain.idc_value_t_funcidx_get, _ida_domain.idc_value_t_funcidx_set, doc=r"""funcidx""")
    pvoid: "void *" = property(_ida_domain.idc_value_t_pvoid_get, _ida_domain.idc_value_t_pvoid_set, doc=r"""pvoid""")
    i64: "int64" = property(_ida_domain.idc_value_t_i64_get, _ida_domain.idc_value_t_i64_set, doc=r"""i64""")
    reserve: "uchar [sizeof(qstring)]" = property(_ida_domain.idc_value_t_reserve_get, _ida_domain.idc_value_t_reserve_set, doc=r"""reserve""")

    def __init__(self, *args):
        r"""
        __init__(self, n=0) -> idc_value_t
        __init__(self, r) -> idc_value_t
        __init__(self, _str) -> idc_value_t
        """
        _ida_domain.idc_value_t_swiginit(self, _ida_domain.new_idc_value_t(*args))
    __swig_destroy__ = _ida_domain.delete_idc_value_t

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.idc_value_t_clear(self)

    def qstr(self) -> "qstring const &":
        r"""qstr(self) -> qstring const &"""
        return _ida_domain.idc_value_t_qstr(self)

    def c_str(self) -> "char const *":
        r"""c_str(self) -> char const *"""
        return _ida_domain.idc_value_t_c_str(self)

    def u_str(self) -> "uchar const *":
        r"""u_str(self) -> uchar const *"""
        return _ida_domain.idc_value_t_u_str(self)

    def swap(self, v: "idc_value_t") -> "void":
        r"""swap(self, v)"""
        return _ida_domain.idc_value_t_swap(self, v)

    def is_zero(self) -> "bool":
        r"""is_zero(self) -> bool"""
        return _ida_domain.idc_value_t_is_zero(self)

    def is_integral(self) -> "bool":
        r"""is_integral(self) -> bool"""
        return _ida_domain.idc_value_t_is_integral(self)

    def is_convertible(self) -> "bool":
        r"""is_convertible(self) -> bool"""
        return _ida_domain.idc_value_t_is_convertible(self)

    def _create_empty_string(self) -> "void":
        r"""_create_empty_string(self)"""
        return _ida_domain.idc_value_t__create_empty_string(self)

    def create_empty_string(self) -> "void":
        r"""create_empty_string(self)"""
        return _ida_domain.idc_value_t_create_empty_string(self)

    def set_string(self, *args) -> "void":
        r"""
        set_string(self, _str, len)
        set_string(self, _str)
        """
        return _ida_domain.idc_value_t_set_string(self, *args)

    def set_long(self, v: "sval_t") -> "void":
        r"""set_long(self, v)"""
        return _ida_domain.idc_value_t_set_long(self, v)

    def set_pvoid(self, p: "void *") -> "void":
        r"""set_pvoid(self, p)"""
        return _ida_domain.idc_value_t_set_pvoid(self, p)

    def set_int64(self, v: "int64") -> "void":
        r"""set_int64(self, v)"""
        return _ida_domain.idc_value_t_set_int64(self, v)

    def set_float(self, f: "fpvalue_t const &") -> "void":
        r"""set_float(self, f)"""
        return _ida_domain.idc_value_t_set_float(self, f)

    str = property(lambda self: self.c_str(), lambda self, v: self.set_string(v))


# Register idc_value_t in _ida_domain:
_ida_domain.idc_value_t_swigregister(idc_value_t)
VT_LONG = _ida_domain.VT_LONG

VT_FLOAT = _ida_domain.VT_FLOAT

VT_WILD = _ida_domain.VT_WILD

VT_OBJ = _ida_domain.VT_OBJ

VT_FUNC = _ida_domain.VT_FUNC

VT_STR = _ida_domain.VT_STR

VT_PVOID = _ida_domain.VT_PVOID

VT_INT64 = _ida_domain.VT_INT64

VT_REF = _ida_domain.VT_REF


class idc_global_t(object):
    r"""Proxy of C++ idc_global_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name: "qstring" = property(_ida_domain.idc_global_t_name_get, _ida_domain.idc_global_t_name_set, doc=r"""name""")
    value: "idc_value_t" = property(_ida_domain.idc_global_t_value_get, _ida_domain.idc_global_t_value_set, doc=r"""value""")

    def __init__(self, *args):
        r"""
        __init__(self) -> idc_global_t
        __init__(self, n) -> idc_global_t
        """
        _ida_domain.idc_global_t_swiginit(self, _ida_domain.new_idc_global_t(*args))
    __swig_destroy__ = _ida_domain.delete_idc_global_t

# Register idc_global_t in _ida_domain:
_ida_domain.idc_global_t_swigregister(idc_global_t)
eExecThrow = _ida_domain.eExecThrow


def find_idc_func(prefix: "char const *", n: "int"=0) -> "qstring *":
    r"""find_idc_func(prefix, n=0) -> bool"""
    return _ida_domain.find_idc_func(prefix, n)
HF_DEFAULT = _ida_domain.HF_DEFAULT

HF_KEYWORD1 = _ida_domain.HF_KEYWORD1

HF_KEYWORD2 = _ida_domain.HF_KEYWORD2

HF_KEYWORD3 = _ida_domain.HF_KEYWORD3

HF_STRING = _ida_domain.HF_STRING

HF_COMMENT = _ida_domain.HF_COMMENT

HF_PREPROC = _ida_domain.HF_PREPROC

HF_NUMBER = _ida_domain.HF_NUMBER

HF_USER1 = _ida_domain.HF_USER1

HF_USER2 = _ida_domain.HF_USER2

HF_USER3 = _ida_domain.HF_USER3

HF_USER4 = _ida_domain.HF_USER4

HF_MAX = _ida_domain.HF_MAX

class highlighter_cbs_t(object):
    r"""Proxy of C++ highlighter_cbs_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _ida_domain.delete_highlighter_cbs_t

    def set_style(self, arg0: "int32", arg1: "int32", arg2: "syntax_highlight_style") -> "void":
        r"""set_style(self, arg0, arg1, arg2)"""
        return _ida_domain.highlighter_cbs_t_set_style(self, arg0, arg1, arg2)

    def prev_block_state(self) -> "int32":
        r"""prev_block_state(self) -> int32"""
        return _ida_domain.highlighter_cbs_t_prev_block_state(self)

    def cur_block_state(self) -> "int32":
        r"""cur_block_state(self) -> int32"""
        return _ida_domain.highlighter_cbs_t_cur_block_state(self)

    def set_block_state(self, arg0: "int32") -> "void":
        r"""set_block_state(self, arg0)"""
        return _ida_domain.highlighter_cbs_t_set_block_state(self, arg0)

    def __init__(self):
        r"""__init__(self) -> highlighter_cbs_t"""
        if self.__class__ == highlighter_cbs_t:
            _self = None
        else:
            _self = self
        _ida_domain.highlighter_cbs_t_swiginit(self, _ida_domain.new_highlighter_cbs_t(_self, ))
    def __disown__(self):
        self.this.disown()
        _ida_domain.disown_highlighter_cbs_t(self)
        return weakref.proxy(self)

# Register highlighter_cbs_t in _ida_domain:
_ida_domain.highlighter_cbs_t_swigregister(highlighter_cbs_t)

def set_header_path(path: "char const *", add: "bool") -> "bool":
    r"""set_header_path(path, add) -> bool"""
    return _ida_domain.set_header_path(path, add)

def get_idc_filename(file: "char const *") -> "char const *":
    r"""get_idc_filename(file) -> char *"""
    return _ida_domain.get_idc_filename(file)

def exec_system_script(file: "char const *", complain_if_no_file: "bool"=True) -> "bool":
    r"""exec_system_script(file, complain_if_no_file=True) -> bool"""
    return _ida_domain.exec_system_script(file, complain_if_no_file)
CPL_DEL_MACROS = _ida_domain.CPL_DEL_MACROS

CPL_USE_LABELS = _ida_domain.CPL_USE_LABELS

CPL_ONLY_SAFE = _ida_domain.CPL_ONLY_SAFE


def compile_idc_snippet(func: "char const *", text: "char const *", resolver: "idc_resolver_t *"=None, only_safe_funcs: "bool"=False) -> "qstring *":
    r"""compile_idc_snippet(func, text, resolver=None, only_safe_funcs=False) -> bool"""
    return _ida_domain.compile_idc_snippet(func, text, resolver, only_safe_funcs)

def exec_idc_script(result: "idc_value_t", path: "char const *", func: "char const *", args: "idc_value_t", argsnum: "size_t") -> "qstring *":
    r"""exec_idc_script(result, path, func, args, argsnum) -> bool"""
    return _ida_domain.exec_idc_script(result, path, func, args, argsnum)

def throw_idc_exception(r: "idc_value_t", desc: "char const *") -> "error_t":
    r"""throw_idc_exception(r, desc) -> error_t"""
    return _ida_domain.throw_idc_exception(r, desc)
class idc_values_t(object):
    r"""Proxy of C++ qvector< idc_value_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> idc_values_t
        __init__(self, x) -> idc_values_t
        """
        _ida_domain.idc_values_t_swiginit(self, _ida_domain.new_idc_values_t(*args))
    __swig_destroy__ = _ida_domain.delete_idc_values_t

    def push_back(self, *args) -> "idc_value_t &":
        r"""
        push_back(self, x)
        push_back(self) -> idc_value_t
        """
        return _ida_domain.idc_values_t_push_back(self, *args)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.idc_values_t_pop_back(self)

    def size(self) -> "size_t":
        r"""size(self) -> size_t"""
        return _ida_domain.idc_values_t_size(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.idc_values_t_empty(self)

    def at(self, _idx: "size_t") -> "idc_value_t const &":
        r"""at(self, _idx) -> idc_value_t"""
        return _ida_domain.idc_values_t_at(self, _idx)

    def qclear(self) -> "void":
        r"""qclear(self)"""
        return _ida_domain.idc_values_t_qclear(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.idc_values_t_clear(self)

    def resize(self, *args) -> "void":
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_domain.idc_values_t_resize(self, *args)

    def grow(self, *args) -> "void":
        r"""grow(self, x=idc_value_t())"""
        return _ida_domain.idc_values_t_grow(self, *args)

    def capacity(self) -> "size_t":
        r"""capacity(self) -> size_t"""
        return _ida_domain.idc_values_t_capacity(self)

    def reserve(self, cnt: "size_t") -> "void":
        r"""reserve(self, cnt)"""
        return _ida_domain.idc_values_t_reserve(self, cnt)

    def truncate(self) -> "void":
        r"""truncate(self)"""
        return _ida_domain.idc_values_t_truncate(self)

    def swap(self, r: "idc_values_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.idc_values_t_swap(self, r)

    def extract(self) -> "idc_value_t *":
        r"""extract(self) -> idc_value_t"""
        return _ida_domain.idc_values_t_extract(self)

    def inject(self, s: "idc_value_t", len: "size_t") -> "void":
        r"""inject(self, s, len)"""
        return _ida_domain.idc_values_t_inject(self, s, len)

    def begin(self, *args) -> "qvector< idc_value_t >::const_iterator":
        r"""
        begin(self) -> idc_value_t
        begin(self) -> idc_value_t
        """
        return _ida_domain.idc_values_t_begin(self, *args)

    def end(self, *args) -> "qvector< idc_value_t >::const_iterator":
        r"""
        end(self) -> idc_value_t
        end(self) -> idc_value_t
        """
        return _ida_domain.idc_values_t_end(self, *args)

    def insert(self, it: "idc_value_t", x: "idc_value_t") -> "qvector< idc_value_t >::iterator":
        r"""insert(self, it, x) -> idc_value_t"""
        return _ida_domain.idc_values_t_insert(self, it, x)

    def erase(self, *args) -> "qvector< idc_value_t >::iterator":
        r"""
        erase(self, it) -> idc_value_t
        erase(self, first, last) -> idc_value_t
        """
        return _ida_domain.idc_values_t_erase(self, *args)

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.idc_values_t___len__(self)

    def __getitem__(self, i: "size_t") -> "idc_value_t const &":
        r"""__getitem__(self, i) -> idc_value_t"""
        return _ida_domain.idc_values_t___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "idc_value_t") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.idc_values_t___setitem__(self, i, v)

    def append(self, x: "idc_value_t") -> "void":
        r"""append(self, x)"""
        return _ida_domain.idc_values_t_append(self, x)

    def extend(self, x: "idc_values_t") -> "void":
        r"""extend(self, x)"""
        return _ida_domain.idc_values_t_extend(self, x)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register idc_values_t in _ida_domain:
_ida_domain.idc_values_t_swigregister(idc_values_t)

#<pycode(py_expr)>
try:
    import types
    import ctypes
# Callback for IDC func callback (On Windows, we use stdcall)
# typedef error_t idaapi idc_func_t(idc_value_t *argv,idc_value_t *r);
    try:
        _IDCFUNC_CB_T = ctypes.WINFUNCTYPE(ctypes.c_int, ctypes.c_void_p, ctypes.c_void_p)
    except:
        _IDCFUNC_CB_T = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_void_p, ctypes.c_void_p)

# A trampoline function that is called from idcfunc_t that will
# call the Python callback with the argv and r properly serialized to python
    call_idc_func__ = ctypes.CFUNCTYPE(ctypes.c_long, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p)(_ida_expr.py_get_call_idc_func())
except:
    def call_idc_func__(*args):
        warning("IDC extensions need ctypes library in order to work")
        return 0
    _IDCFUNC_CB_T = None

# --------------------------------------------------------------------------
EXTFUN_BASE  = 0x0001
"""requires open database"""
EXTFUN_NORET = 0x0002
"""does not return. the interpreter may clean up its state before calling it."""
EXTFUN_SAFE  = 0x0004
"""thread safe function. may be called"""

# --------------------------------------------------------------------------
class _IdcFunction(object):
    """
    Internal class that calls pyw_call_idc_func() with a context
    """
    def __init__(self, ctxptr):
        self.ctxptr = ctxptr
# Take a reference to the ctypes callback
# (note: this will create a circular reference)
        self.cb = _IDCFUNC_CB_T(self)

    fp_ptr = property(lambda self: ctypes.cast(self.cb, ctypes.c_void_p).value)

    def __call__(self, args, res):
        return call_idc_func__(self.ctxptr, args, res)


# --------------------------------------------------------------------------
# Dictionary to remember IDC function names along with the context pointer
# retrieved by using the internal pyw_register_idc_func()
__IDC_FUNC_CTXS = {}

def del_idc_func(name):
    """
    Unregisters the specified IDC function

    @param name: IDC function name to unregister

    @return: Boolean
    """
    global __IDC_FUNC_CTXS

# Get the context
    f = __IDC_FUNC_CTXS.get(name, None)

    if f is None:
        return False # Not registered

# Break circular reference
    del f.cb

# Delete the name from the dictionary
    del __IDC_FUNC_CTXS[name]

# Delete the context and unregister the function
    return _ida_expr.pyw_unregister_idc_func(f.ctxptr)

# --------------------------------------------------------------------------
def add_idc_func(name, fp, args, defvals=(), flags=0):
    """
    Extends the IDC language by exposing a new IDC function that is backed up by a Python function

    @param name: IDC function name to expose
    @param fp: Python callable that will receive the arguments and return a tuple.
    @param args: Arguments. A tuple of idaapi.VT_XXX constants
    @param defvals: default argument values (optional)
    @param flags: IDC function flags. A combination of EXTFUN_XXX constants (optional)

    @return: Boolean
    """
    global __IDC_FUNC_CTXS

# Get the context
    f = __IDC_FUNC_CTXS.get(name, None)

# Registering a function that is already registered?
    if f is not None:
# Unregister it first
        del_idc_func(name)

# Convert the tupple argument info to a string
    args = "".join([chr(x) for x in args])

# make sure we don't have an obvious discrepancy between
# the number of args, and the provided default values
    if len(defvals) > len(args):
        return False

    vdefvals = idc_values_t()
    if not _ida_expr.pyw_convert_defvals(vdefvals, defvals):
        return False

# Create a context
    ctxptr = _ida_expr.pyw_register_idc_func(name, args, fp)
    if ctxptr == 0:
        return False

# Bind the context with the IdcFunc object
    f = _IdcFunction(ctxptr)

# Remember the Python context
    __IDC_FUNC_CTXS[name] = f

# Register IDC function with a callback
    return _ida_expr.py_add_idc_func(
                name,
                f.fp_ptr,
                args,
                vdefvals,
                flags)

#</pycode(py_expr)>

class rangevec_base_t(object):
    r"""Proxy of C++ qvector< range_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> rangevec_base_t
        __init__(self, x) -> rangevec_base_t
        """
        _ida_domain.rangevec_base_t_swiginit(self, _ida_domain.new_rangevec_base_t(*args))
    __swig_destroy__ = _ida_domain.delete_rangevec_base_t

    def push_back(self, *args) -> "range_t &":
        r"""
        push_back(self, x)
        push_back(self) -> range_t
        """
        return _ida_domain.rangevec_base_t_push_back(self, *args)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.rangevec_base_t_pop_back(self)

    def size(self) -> "size_t":
        r"""size(self) -> size_t"""
        return _ida_domain.rangevec_base_t_size(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.rangevec_base_t_empty(self)

    def at(self, _idx: "size_t") -> "range_t const &":
        r"""at(self, _idx) -> range_t"""
        return _ida_domain.rangevec_base_t_at(self, _idx)

    def qclear(self) -> "void":
        r"""qclear(self)"""
        return _ida_domain.rangevec_base_t_qclear(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.rangevec_base_t_clear(self)

    def resize(self, *args) -> "void":
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_domain.rangevec_base_t_resize(self, *args)

    def grow(self, *args) -> "void":
        r"""grow(self, x=range_t())"""
        return _ida_domain.rangevec_base_t_grow(self, *args)

    def capacity(self) -> "size_t":
        r"""capacity(self) -> size_t"""
        return _ida_domain.rangevec_base_t_capacity(self)

    def reserve(self, cnt: "size_t") -> "void":
        r"""reserve(self, cnt)"""
        return _ida_domain.rangevec_base_t_reserve(self, cnt)

    def truncate(self) -> "void":
        r"""truncate(self)"""
        return _ida_domain.rangevec_base_t_truncate(self)

    def swap(self, r: "rangevec_base_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.rangevec_base_t_swap(self, r)

    def extract(self) -> "range_t *":
        r"""extract(self) -> range_t"""
        return _ida_domain.rangevec_base_t_extract(self)

    def inject(self, s: "range_t", len: "size_t") -> "void":
        r"""inject(self, s, len)"""
        return _ida_domain.rangevec_base_t_inject(self, s, len)

    def __eq__(self, r: "rangevec_base_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.rangevec_base_t___eq__(self, r)

    def __ne__(self, r: "rangevec_base_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.rangevec_base_t___ne__(self, r)

    def begin(self, *args) -> "qvector< range_t >::const_iterator":
        r"""
        begin(self) -> range_t
        begin(self) -> range_t
        """
        return _ida_domain.rangevec_base_t_begin(self, *args)

    def end(self, *args) -> "qvector< range_t >::const_iterator":
        r"""
        end(self) -> range_t
        end(self) -> range_t
        """
        return _ida_domain.rangevec_base_t_end(self, *args)

    def insert(self, it: "range_t", x: "range_t") -> "qvector< range_t >::iterator":
        r"""insert(self, it, x) -> range_t"""
        return _ida_domain.rangevec_base_t_insert(self, it, x)

    def erase(self, *args) -> "qvector< range_t >::iterator":
        r"""
        erase(self, it) -> range_t
        erase(self, first, last) -> range_t
        """
        return _ida_domain.rangevec_base_t_erase(self, *args)

    def find(self, *args) -> "qvector< range_t >::const_iterator":
        r"""
        find(self, x) -> range_t
        find(self, x) -> range_t
        """
        return _ida_domain.rangevec_base_t_find(self, *args)

    def has(self, x: "range_t") -> "bool":
        r"""has(self, x) -> bool"""
        return _ida_domain.rangevec_base_t_has(self, x)

    def add_unique(self, x: "range_t") -> "bool":
        r"""add_unique(self, x) -> bool"""
        return _ida_domain.rangevec_base_t_add_unique(self, x)

    def _del(self, x: "range_t") -> "bool":
        r"""_del(self, x) -> bool"""
        return _ida_domain.rangevec_base_t__del(self, x)

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.rangevec_base_t___len__(self)

    def __getitem__(self, i: "size_t") -> "range_t const &":
        r"""__getitem__(self, i) -> range_t"""
        return _ida_domain.rangevec_base_t___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "range_t") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.rangevec_base_t___setitem__(self, i, v)

    def append(self, x: "range_t") -> "void":
        r"""append(self, x)"""
        return _ida_domain.rangevec_base_t_append(self, x)

    def extend(self, x: "rangevec_base_t") -> "void":
        r"""extend(self, x)"""
        return _ida_domain.rangevec_base_t_extend(self, x)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register rangevec_base_t in _ida_domain:
_ida_domain.rangevec_base_t_swigregister(rangevec_base_t)
class array_of_rangesets(object):
    r"""Proxy of C++ qvector< rangeset_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> array_of_rangesets
        __init__(self, x) -> array_of_rangesets
        """
        _ida_domain.array_of_rangesets_swiginit(self, _ida_domain.new_array_of_rangesets(*args))
    __swig_destroy__ = _ida_domain.delete_array_of_rangesets

    def push_back(self, *args) -> "rangeset_t &":
        r"""
        push_back(self, x)
        push_back(self) -> rangeset_t
        """
        return _ida_domain.array_of_rangesets_push_back(self, *args)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.array_of_rangesets_pop_back(self)

    def size(self) -> "size_t":
        r"""size(self) -> size_t"""
        return _ida_domain.array_of_rangesets_size(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.array_of_rangesets_empty(self)

    def at(self, _idx: "size_t") -> "rangeset_t const &":
        r"""at(self, _idx) -> rangeset_t"""
        return _ida_domain.array_of_rangesets_at(self, _idx)

    def qclear(self) -> "void":
        r"""qclear(self)"""
        return _ida_domain.array_of_rangesets_qclear(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.array_of_rangesets_clear(self)

    def resize(self, *args) -> "void":
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_domain.array_of_rangesets_resize(self, *args)

    def grow(self, *args) -> "void":
        r"""grow(self, x=rangeset_t())"""
        return _ida_domain.array_of_rangesets_grow(self, *args)

    def capacity(self) -> "size_t":
        r"""capacity(self) -> size_t"""
        return _ida_domain.array_of_rangesets_capacity(self)

    def reserve(self, cnt: "size_t") -> "void":
        r"""reserve(self, cnt)"""
        return _ida_domain.array_of_rangesets_reserve(self, cnt)

    def truncate(self) -> "void":
        r"""truncate(self)"""
        return _ida_domain.array_of_rangesets_truncate(self)

    def swap(self, r: "array_of_rangesets") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.array_of_rangesets_swap(self, r)

    def extract(self) -> "rangeset_t *":
        r"""extract(self) -> rangeset_t"""
        return _ida_domain.array_of_rangesets_extract(self)

    def inject(self, s: "rangeset_t", len: "size_t") -> "void":
        r"""inject(self, s, len)"""
        return _ida_domain.array_of_rangesets_inject(self, s, len)

    def __eq__(self, r: "array_of_rangesets") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.array_of_rangesets___eq__(self, r)

    def __ne__(self, r: "array_of_rangesets") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.array_of_rangesets___ne__(self, r)

    def begin(self, *args) -> "qvector< rangeset_t >::const_iterator":
        r"""
        begin(self) -> rangeset_t
        begin(self) -> rangeset_t
        """
        return _ida_domain.array_of_rangesets_begin(self, *args)

    def end(self, *args) -> "qvector< rangeset_t >::const_iterator":
        r"""
        end(self) -> rangeset_t
        end(self) -> rangeset_t
        """
        return _ida_domain.array_of_rangesets_end(self, *args)

    def insert(self, it: "rangeset_t", x: "rangeset_t") -> "qvector< rangeset_t >::iterator":
        r"""insert(self, it, x) -> rangeset_t"""
        return _ida_domain.array_of_rangesets_insert(self, it, x)

    def erase(self, *args) -> "qvector< rangeset_t >::iterator":
        r"""
        erase(self, it) -> rangeset_t
        erase(self, first, last) -> rangeset_t
        """
        return _ida_domain.array_of_rangesets_erase(self, *args)

    def find(self, *args) -> "qvector< rangeset_t >::const_iterator":
        r"""
        find(self, x) -> rangeset_t
        find(self, x) -> rangeset_t
        """
        return _ida_domain.array_of_rangesets_find(self, *args)

    def has(self, x: "rangeset_t") -> "bool":
        r"""has(self, x) -> bool"""
        return _ida_domain.array_of_rangesets_has(self, x)

    def add_unique(self, x: "rangeset_t") -> "bool":
        r"""add_unique(self, x) -> bool"""
        return _ida_domain.array_of_rangesets_add_unique(self, x)

    def _del(self, x: "rangeset_t") -> "bool":
        r"""_del(self, x) -> bool"""
        return _ida_domain.array_of_rangesets__del(self, x)

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.array_of_rangesets___len__(self)

    def __getitem__(self, i: "size_t") -> "rangeset_t const &":
        r"""__getitem__(self, i) -> rangeset_t"""
        return _ida_domain.array_of_rangesets___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "rangeset_t") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.array_of_rangesets___setitem__(self, i, v)

    def append(self, x: "rangeset_t") -> "void":
        r"""append(self, x)"""
        return _ida_domain.array_of_rangesets_append(self, x)

    def extend(self, x: "array_of_rangesets") -> "void":
        r"""extend(self, x)"""
        return _ida_domain.array_of_rangesets_extend(self, x)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register array_of_rangesets in _ida_domain:
_ida_domain.array_of_rangesets_swigregister(array_of_rangesets)

#<pycode(py_range)>
import ida_idaapi
#</pycode(py_range)>

class range_t(object):
    r"""Proxy of C++ range_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    start_ea: "ea_t" = property(_ida_domain.range_t_start_ea_get, _ida_domain.range_t_start_ea_set, doc=r"""start_ea""")
    end_ea: "ea_t" = property(_ida_domain.range_t_end_ea_get, _ida_domain.range_t_end_ea_set, doc=r"""end_ea""")

    def __init__(self, ea1: "ea_t"=0, ea2: "ea_t"=0):
        r"""__init__(self, ea1=0, ea2=0) -> range_t"""
        _ida_domain.range_t_swiginit(self, _ida_domain.new_range_t(ea1, ea2))

    def __eq__(self, r: "range_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.range_t___eq__(self, r)

    def __ne__(self, r: "range_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.range_t___ne__(self, r)

    def __lt__(self, r: "range_t") -> "bool":
        r"""__lt__(self, r) -> bool"""
        return _ida_domain.range_t___lt__(self, r)

    def __gt__(self, r: "range_t") -> "bool":
        r"""__gt__(self, r) -> bool"""
        return _ida_domain.range_t___gt__(self, r)

    def __le__(self, r: "range_t") -> "bool":
        r"""__le__(self, r) -> bool"""
        return _ida_domain.range_t___le__(self, r)

    def __ge__(self, r: "range_t") -> "bool":
        r"""__ge__(self, r) -> bool"""
        return _ida_domain.range_t___ge__(self, r)

    def compare(self, r: "range_t") -> "int":
        r"""compare(self, r) -> int"""
        return _ida_domain.range_t_compare(self, r)

    def contains(self, *args) -> "bool":
        r"""
        contains(self, ea) -> bool
        contains(self, r) -> bool
        """
        return _ida_domain.range_t_contains(self, *args)

    def overlaps(self, r: "range_t") -> "bool":
        r"""overlaps(self, r) -> bool"""
        return _ida_domain.range_t_overlaps(self, r)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.range_t_clear(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.range_t_empty(self)

    def size(self) -> "asize_t":
        r"""size(self) -> asize_t"""
        return _ida_domain.range_t_size(self)

    def intersect(self, r: "range_t") -> "void":
        r"""intersect(self, r)"""
        return _ida_domain.range_t_intersect(self, r)

    def extend(self, ea: "ea_t") -> "void":
        r"""extend(self, ea)"""
        return _ida_domain.range_t_extend(self, ea)

    def _print(self, *args) -> "size_t":
        r"""_print(self) -> size_t"""
        return _ida_domain.range_t__print(self, *args)
    __swig_destroy__ = _ida_domain.delete_range_t

# Register range_t in _ida_domain:
_ida_domain.range_t_swigregister(range_t)

def range_t_print(cb: "range_t") -> "size_t":
    r"""range_t_print(cb) -> size_t"""
    return _ida_domain.range_t_print(cb)

class rangevec_t(rangevec_base_t):
    r"""Proxy of C++ rangevec_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> rangevec_t"""
        _ida_domain.rangevec_t_swiginit(self, _ida_domain.new_rangevec_t())
    __swig_destroy__ = _ida_domain.delete_rangevec_t

# Register rangevec_t in _ida_domain:
_ida_domain.rangevec_t_swigregister(rangevec_t)
RANGE_KIND_UNKNOWN = _ida_domain.RANGE_KIND_UNKNOWN

RANGE_KIND_FUNC = _ida_domain.RANGE_KIND_FUNC

RANGE_KIND_SEGMENT = _ida_domain.RANGE_KIND_SEGMENT

RANGE_KIND_HIDDEN_RANGE = _ida_domain.RANGE_KIND_HIDDEN_RANGE

class rangeset_t(object):
    r"""Proxy of C++ rangeset_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> rangeset_t
        __init__(self, range) -> rangeset_t
        __init__(self, ivs) -> rangeset_t
        """
        _ida_domain.rangeset_t_swiginit(self, _ida_domain.new_rangeset_t(*args))

    def swap(self, r: "rangeset_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.rangeset_t_swap(self, r)

    def add(self, *args) -> "bool":
        r"""
        add(self, range) -> bool
        add(self, start, _end) -> bool
        add(self, aset) -> bool
        """
        return _ida_domain.rangeset_t_add(self, *args)

    def sub(self, *args) -> "bool":
        r"""
        sub(self, range) -> bool
        sub(self, ea) -> bool
        sub(self, aset) -> bool
        """
        return _ida_domain.rangeset_t_sub(self, *args)

    def includes(self, range: "range_t") -> "bool":
        r"""includes(self, range) -> bool"""
        return _ida_domain.rangeset_t_includes(self, range)

    def _print(self, *args) -> "size_t":
        r"""_print(self) -> size_t"""
        return _ida_domain.rangeset_t__print(self, *args)

    def getrange(self, idx: "int") -> "range_t const &":
        r"""getrange(self, idx) -> range_t"""
        return _ida_domain.rangeset_t_getrange(self, idx)

    def lastrange(self) -> "range_t const &":
        r"""lastrange(self) -> range_t"""
        return _ida_domain.rangeset_t_lastrange(self)

    def nranges(self) -> "size_t":
        r"""nranges(self) -> size_t"""
        return _ida_domain.rangeset_t_nranges(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.rangeset_t_empty(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.rangeset_t_clear(self)

    def has_common(self, *args) -> "bool":
        r"""
        has_common(self, range) -> bool
        has_common(self, aset) -> bool
        """
        return _ida_domain.rangeset_t_has_common(self, *args)

    def contains(self, *args) -> "bool":
        r"""
        contains(self, ea) -> bool
        contains(self, aset) -> bool
        """
        return _ida_domain.rangeset_t_contains(self, *args)

    def intersect(self, aset: "rangeset_t") -> "bool":
        r"""intersect(self, aset) -> bool"""
        return _ida_domain.rangeset_t_intersect(self, aset)

    def is_subset_of(self, aset: "rangeset_t") -> "bool":
        r"""is_subset_of(self, aset) -> bool"""
        return _ida_domain.rangeset_t_is_subset_of(self, aset)

    def is_equal(self, aset: "rangeset_t") -> "bool":
        r"""is_equal(self, aset) -> bool"""
        return _ida_domain.rangeset_t_is_equal(self, aset)

    def __eq__(self, aset: "rangeset_t") -> "bool":
        r"""__eq__(self, aset) -> bool"""
        return _ida_domain.rangeset_t___eq__(self, aset)

    def __ne__(self, aset: "rangeset_t") -> "bool":
        r"""__ne__(self, aset) -> bool"""
        return _ida_domain.rangeset_t___ne__(self, aset)

    def begin(self) -> "rangeset_t::iterator":
        r"""begin(self) -> range_t"""
        return _ida_domain.rangeset_t_begin(self)

    def end(self) -> "rangeset_t::iterator":
        r"""end(self) -> range_t"""
        return _ida_domain.rangeset_t_end(self)

    def find_range(self, ea: "ea_t") -> "range_t const *":
        r"""find_range(self, ea) -> range_t"""
        return _ida_domain.rangeset_t_find_range(self, ea)

    def cached_range(self) -> "range_t const *":
        r"""cached_range(self) -> range_t"""
        return _ida_domain.rangeset_t_cached_range(self)

    def next_addr(self, ea: "ea_t") -> "ea_t":
        r"""next_addr(self, ea) -> ea_t"""
        return _ida_domain.rangeset_t_next_addr(self, ea)

    def prev_addr(self, ea: "ea_t") -> "ea_t":
        r"""prev_addr(self, ea) -> ea_t"""
        return _ida_domain.rangeset_t_prev_addr(self, ea)

    def next_range(self, ea: "ea_t") -> "ea_t":
        r"""next_range(self, ea) -> ea_t"""
        return _ida_domain.rangeset_t_next_range(self, ea)

    def prev_range(self, ea: "ea_t") -> "ea_t":
        r"""prev_range(self, ea) -> ea_t"""
        return _ida_domain.rangeset_t_prev_range(self, ea)

    def as_rangevec(self) -> "rangevec_t const &":
        r"""as_rangevec(self) -> rangevec_t"""
        return _ida_domain.rangeset_t_as_rangevec(self)

    def __getitem__(self, idx):
        return self.getrange(idx)

    __len__ = nranges
    __iter__ = ida_idaapi._bounded_getitem_iterator

    __swig_destroy__ = _ida_domain.delete_rangeset_t

# Register rangeset_t in _ida_domain:
_ida_domain.rangeset_t_swigregister(rangeset_t)
fcb_normal = _ida_domain.fcb_normal

fcb_indjump = _ida_domain.fcb_indjump

fcb_ret = _ida_domain.fcb_ret

fcb_cndret = _ida_domain.fcb_cndret

fcb_noret = _ida_domain.fcb_noret

fcb_enoret = _ida_domain.fcb_enoret

fcb_extern = _ida_domain.fcb_extern

fcb_error = _ida_domain.fcb_error

class edge_t(object):
    r"""Proxy of C++ edge_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    src: "int" = property(_ida_domain.edge_t_src_get, _ida_domain.edge_t_src_set, doc=r"""src""")
    dst: "int" = property(_ida_domain.edge_t_dst_get, _ida_domain.edge_t_dst_set, doc=r"""dst""")

    def __init__(self, x: "int"=0, y: "int"=0):
        r"""__init__(self, x=0, y=0) -> edge_t"""
        _ida_domain.edge_t_swiginit(self, _ida_domain.new_edge_t(x, y))

    def __lt__(self, y: "edge_t") -> "bool":
        r"""__lt__(self, y) -> bool"""
        return _ida_domain.edge_t___lt__(self, y)

    def __eq__(self, y: "edge_t") -> "bool":
        r"""__eq__(self, y) -> bool"""
        return _ida_domain.edge_t___eq__(self, y)

    def __ne__(self, y: "edge_t") -> "bool":
        r"""__ne__(self, y) -> bool"""
        return _ida_domain.edge_t___ne__(self, y)
    __swig_destroy__ = _ida_domain.delete_edge_t

# Register edge_t in _ida_domain:
_ida_domain.edge_t_swigregister(edge_t)
class edgevec_t(object):
    r"""Proxy of C++ edgevec_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> edgevec_t"""
        _ida_domain.edgevec_t_swiginit(self, _ida_domain.new_edgevec_t())
    __swig_destroy__ = _ida_domain.delete_edgevec_t

# Register edgevec_t in _ida_domain:
_ida_domain.edgevec_t_swigregister(edgevec_t)
EDGE_NONE = _ida_domain.EDGE_NONE

EDGE_TREE = _ida_domain.EDGE_TREE

EDGE_FORWARD = _ida_domain.EDGE_FORWARD

EDGE_BACK = _ida_domain.EDGE_BACK

EDGE_CROSS = _ida_domain.EDGE_CROSS

EDGE_SUBGRAPH = _ida_domain.EDGE_SUBGRAPH

class node_ordering_t(object):
    r"""Proxy of C++ node_ordering_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.node_ordering_t_clear(self)

    def resize(self, n: "int") -> "void":
        r"""resize(self, n)"""
        return _ida_domain.node_ordering_t_resize(self, n)

    def size(self) -> "size_t":
        r"""size(self) -> size_t"""
        return _ida_domain.node_ordering_t_size(self)

    def set(self, _node: "int", num: "int") -> "void":
        r"""set(self, _node, num)"""
        return _ida_domain.node_ordering_t_set(self, _node, num)

    def clr(self, _node: "int") -> "bool":
        r"""clr(self, _node) -> bool"""
        return _ida_domain.node_ordering_t_clr(self, _node)

    def node(self, _order: "size_t") -> "int":
        r"""node(self, _order) -> int"""
        return _ida_domain.node_ordering_t_node(self, _order)

    def order(self, _node: "int") -> "int":
        r"""order(self, _node) -> int"""
        return _ida_domain.node_ordering_t_order(self, _node)

    def __init__(self):
        r"""__init__(self) -> node_ordering_t"""
        _ida_domain.node_ordering_t_swiginit(self, _ida_domain.new_node_ordering_t())
    __swig_destroy__ = _ida_domain.delete_node_ordering_t

# Register node_ordering_t in _ida_domain:
_ida_domain.node_ordering_t_swigregister(node_ordering_t)
class node_iterator(object):
    r"""Proxy of C++ node_iterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _g: "gdl_graph_t", n: "int"):
        r"""__init__(self, _g, n) -> node_iterator"""
        _ida_domain.node_iterator_swiginit(self, _ida_domain.new_node_iterator(_g, n))

    def __eq__(self, n: "node_iterator") -> "bool":
        r"""__eq__(self, n) -> bool"""
        return _ida_domain.node_iterator___eq__(self, n)

    def __ne__(self, n: "node_iterator") -> "bool":
        r"""__ne__(self, n) -> bool"""
        return _ida_domain.node_iterator___ne__(self, n)

    def __ref__(self) -> "int":
        r"""__ref__(self) -> int"""
        return _ida_domain.node_iterator___ref__(self)
    __swig_destroy__ = _ida_domain.delete_node_iterator

# Register node_iterator in _ida_domain:
_ida_domain.node_iterator_swigregister(node_iterator)
class gdl_graph_t(object):
    r"""Proxy of C++ gdl_graph_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _ida_domain.delete_gdl_graph_t

    def get_node_label(self, n: "int") -> "char *":
        r"""get_node_label(self, n) -> char *"""
        return _ida_domain.gdl_graph_t_get_node_label(self, n)

    def print_graph_attributes(self, fp: "FILE *") -> "void":
        r"""print_graph_attributes(self, fp)"""
        return _ida_domain.gdl_graph_t_print_graph_attributes(self, fp)

    def print_node(self, fp: "FILE *", n: "int") -> "bool":
        r"""print_node(self, fp, n) -> bool"""
        return _ida_domain.gdl_graph_t_print_node(self, fp, n)

    def print_edge(self, fp: "FILE *", i: "int", j: "int") -> "bool":
        r"""print_edge(self, fp, i, j) -> bool"""
        return _ida_domain.gdl_graph_t_print_edge(self, fp, i, j)

    def print_node_attributes(self, fp: "FILE *", n: "int") -> "void":
        r"""print_node_attributes(self, fp, n)"""
        return _ida_domain.gdl_graph_t_print_node_attributes(self, fp, n)

    def size(self) -> "int":
        r"""size(self) -> int"""
        return _ida_domain.gdl_graph_t_size(self)

    def node_qty(self) -> "int":
        r"""node_qty(self) -> int"""
        return _ida_domain.gdl_graph_t_node_qty(self)

    def exists(self, node: "int") -> "bool":
        r"""exists(self, node) -> bool"""
        return _ida_domain.gdl_graph_t_exists(self, node)

    def entry(self) -> "int":
        r"""entry(self) -> int"""
        return _ida_domain.gdl_graph_t_entry(self)

    def exit(self) -> "int":
        r"""exit(self) -> int"""
        return _ida_domain.gdl_graph_t_exit(self)

    def nsucc(self, node: "int") -> "int":
        r"""nsucc(self, node) -> int"""
        return _ida_domain.gdl_graph_t_nsucc(self, node)

    def npred(self, node: "int") -> "int":
        r"""npred(self, node) -> int"""
        return _ida_domain.gdl_graph_t_npred(self, node)

    def succ(self, node: "int", i: "int") -> "int":
        r"""succ(self, node, i) -> int"""
        return _ida_domain.gdl_graph_t_succ(self, node, i)

    def pred(self, node: "int", i: "int") -> "int":
        r"""pred(self, node, i) -> int"""
        return _ida_domain.gdl_graph_t_pred(self, node, i)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.gdl_graph_t_empty(self)

    def get_node_color(self, n: "int") -> "bgcolor_t":
        r"""get_node_color(self, n) -> bgcolor_t"""
        return _ida_domain.gdl_graph_t_get_node_color(self, n)

    def get_edge_color(self, i: "int", j: "int") -> "bgcolor_t":
        r"""get_edge_color(self, i, j) -> bgcolor_t"""
        return _ida_domain.gdl_graph_t_get_edge_color(self, i, j)

    def nedge(self, node: "int", ispred: "bool") -> "size_t":
        r"""nedge(self, node, ispred) -> size_t"""
        return _ida_domain.gdl_graph_t_nedge(self, node, ispred)

    def edge(self, node: "int", i: "int", ispred: "bool") -> "int":
        r"""edge(self, node, i, ispred) -> int"""
        return _ida_domain.gdl_graph_t_edge(self, node, i, ispred)

    def front(self) -> "int":
        r"""front(self) -> int"""
        return _ida_domain.gdl_graph_t_front(self)

    def begin(self) -> "node_iterator":
        r"""begin(self) -> node_iterator"""
        return _ida_domain.gdl_graph_t_begin(self)

    def end(self) -> "node_iterator":
        r"""end(self) -> node_iterator"""
        return _ida_domain.gdl_graph_t_end(self)

    def __init__(self):
        r"""__init__(self) -> gdl_graph_t"""
        if self.__class__ == gdl_graph_t:
            _self = None
        else:
            _self = self
        _ida_domain.gdl_graph_t_swiginit(self, _ida_domain.new_gdl_graph_t(_self, ))
    def __disown__(self):
        self.this.disown()
        _ida_domain.disown_gdl_graph_t(self)
        return weakref.proxy(self)

# Register gdl_graph_t in _ida_domain:
_ida_domain.gdl_graph_t_swigregister(gdl_graph_t)

def gen_gdl(g: "gdl_graph_t", fname: "char const *") -> "void":
    r"""gen_gdl(g, fname)"""
    return _ida_domain.gen_gdl(g, fname)

def display_gdl(fname: "char const *") -> "int":
    r"""display_gdl(fname) -> int"""
    return _ida_domain.display_gdl(fname)

def gen_flow_graph(filename: "char const *", title: "char const *", pfn: "func_t", ea1: "ea_t", ea2: "ea_t", gflags: "int") -> "bool":
    r"""gen_flow_graph(filename, title, pfn, ea1, ea2, gflags) -> bool"""
    return _ida_domain.gen_flow_graph(filename, title, pfn, ea1, ea2, gflags)
CHART_PRINT_NAMES = _ida_domain.CHART_PRINT_NAMES

CHART_GEN_DOT = _ida_domain.CHART_GEN_DOT

CHART_GEN_GDL = _ida_domain.CHART_GEN_GDL

CHART_WINGRAPH = _ida_domain.CHART_WINGRAPH


def gen_simple_call_chart(filename: "char const *", wait: "char const *", title: "char const *", gflags: "int") -> "bool":
    r"""gen_simple_call_chart(filename, wait, title, gflags) -> bool"""
    return _ida_domain.gen_simple_call_chart(filename, wait, title, gflags)

def gen_complex_call_chart(filename: "char const *", wait: "char const *", title: "char const *", ea1: "ea_t", ea2: "ea_t", flags: "int", recursion_depth: "int32"=-1) -> "bool":
    r"""gen_complex_call_chart(filename, wait, title, ea1, ea2, flags, recursion_depth=-1) -> bool"""
    return _ida_domain.gen_complex_call_chart(filename, wait, title, ea1, ea2, flags, recursion_depth)
CHART_NOLIBFUNCS = _ida_domain.CHART_NOLIBFUNCS

CHART_REFERENCING = _ida_domain.CHART_REFERENCING

CHART_REFERENCED = _ida_domain.CHART_REFERENCED

CHART_RECURSIVE = _ida_domain.CHART_RECURSIVE

CHART_FOLLOW_DIRECTION = _ida_domain.CHART_FOLLOW_DIRECTION

CHART_IGNORE_XTRN = _ida_domain.CHART_IGNORE_XTRN

CHART_IGNORE_DATA_BSS = _ida_domain.CHART_IGNORE_DATA_BSS

CHART_IGNORE_LIB_TO = _ida_domain.CHART_IGNORE_LIB_TO

CHART_IGNORE_LIB_FROM = _ida_domain.CHART_IGNORE_LIB_FROM

CHART_PRINT_COMMENTS = _ida_domain.CHART_PRINT_COMMENTS

CHART_PRINT_DOTS = _ida_domain.CHART_PRINT_DOTS

class cancellable_graph_t(gdl_graph_t):
    r"""Proxy of C++ cancellable_graph_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cancelled: "bool" = property(_ida_domain.cancellable_graph_t_cancelled_get, _ida_domain.cancellable_graph_t_cancelled_set, doc=r"""cancelled""")
    __swig_destroy__ = _ida_domain.delete_cancellable_graph_t

    def __init__(self):
        r"""__init__(self) -> cancellable_graph_t"""
        if self.__class__ == cancellable_graph_t:
            _self = None
        else:
            _self = self
        _ida_domain.cancellable_graph_t_swiginit(self, _ida_domain.new_cancellable_graph_t(_self, ))
    def __disown__(self):
        self.this.disown()
        _ida_domain.disown_cancellable_graph_t(self)
        return weakref.proxy(self)

# Register cancellable_graph_t in _ida_domain:
_ida_domain.cancellable_graph_t_swigregister(cancellable_graph_t)
class qbasic_block_t(range_t):
    r"""Proxy of C++ qbasic_block_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> qbasic_block_t"""
        _ida_domain.qbasic_block_t_swiginit(self, _ida_domain.new_qbasic_block_t())
    __swig_destroy__ = _ida_domain.delete_qbasic_block_t

# Register qbasic_block_t in _ida_domain:
_ida_domain.qbasic_block_t_swigregister(qbasic_block_t)

def is_noret_block(btype: "fc_block_type_t") -> "bool":
    r"""is_noret_block(btype) -> bool"""
    return _ida_domain.is_noret_block(btype)

def is_ret_block(btype: "fc_block_type_t") -> "bool":
    r"""is_ret_block(btype) -> bool"""
    return _ida_domain.is_ret_block(btype)
FC_PRINT = _ida_domain.FC_PRINT

FC_NOEXT = _ida_domain.FC_NOEXT

FC_RESERVED = _ida_domain.FC_RESERVED

FC_APPND = _ida_domain.FC_APPND

FC_CHKBREAK = _ida_domain.FC_CHKBREAK

FC_CALL_ENDS = _ida_domain.FC_CALL_ENDS

FC_NOPREDS = _ida_domain.FC_NOPREDS

FC_OUTLINES = _ida_domain.FC_OUTLINES

class qflow_chart_t(cancellable_graph_t):
    r"""Proxy of C++ qflow_chart_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    title: "qstring" = property(_ida_domain.qflow_chart_t_title_get, _ida_domain.qflow_chart_t_title_set, doc=r"""title""")
    bounds: "range_t" = property(_ida_domain.qflow_chart_t_bounds_get, _ida_domain.qflow_chart_t_bounds_set, doc=r"""bounds""")
    pfn: "func_t *" = property(_ida_domain.qflow_chart_t_pfn_get, _ida_domain.qflow_chart_t_pfn_set, doc=r"""pfn""")
    flags: "int" = property(_ida_domain.qflow_chart_t_flags_get, _ida_domain.qflow_chart_t_flags_set, doc=r"""flags""")
    nproper: "int" = property(_ida_domain.qflow_chart_t_nproper_get, _ida_domain.qflow_chart_t_nproper_set, doc=r"""nproper""")

    def __init__(self, *args):
        r"""
        __init__(self) -> qflow_chart_t
        __init__(self, _title, _pfn, _ea1, _ea2, _flags) -> qflow_chart_t
        """
        _ida_domain.qflow_chart_t_swiginit(self, _ida_domain.new_qflow_chart_t(*args))
    __swig_destroy__ = _ida_domain.delete_qflow_chart_t

    def create(self, *args) -> "void":
        r"""
        create(self, _title, _pfn, _ea1, _ea2, _flags)
        create(self, _title, ranges, _flags)
        """
        return _ida_domain.qflow_chart_t_create(self, *args)

    def append_to_flowchart(self, ea1: "ea_t", ea2: "ea_t") -> "void":
        r"""append_to_flowchart(self, ea1, ea2)"""
        return _ida_domain.qflow_chart_t_append_to_flowchart(self, ea1, ea2)

    def refresh(self) -> "void":
        r"""refresh(self)"""
        return _ida_domain.qflow_chart_t_refresh(self)

    def calc_block_type(self, blknum: "size_t") -> "fc_block_type_t":
        r"""calc_block_type(self, blknum) -> fc_block_type_t"""
        return _ida_domain.qflow_chart_t_calc_block_type(self, blknum)

    def is_ret_block(self, blknum: "size_t") -> "bool":
        r"""is_ret_block(self, blknum) -> bool"""
        return _ida_domain.qflow_chart_t_is_ret_block(self, blknum)

    def is_noret_block(self, blknum: "size_t") -> "bool":
        r"""is_noret_block(self, blknum) -> bool"""
        return _ida_domain.qflow_chart_t_is_noret_block(self, blknum)

    def print_node_attributes(self, fp: "FILE *", n: "int") -> "void":
        r"""print_node_attributes(self, fp, n)"""
        return _ida_domain.qflow_chart_t_print_node_attributes(self, fp, n)

    def nsucc(self, node: "int") -> "int":
        r"""nsucc(self, node) -> int"""
        return _ida_domain.qflow_chart_t_nsucc(self, node)

    def npred(self, node: "int") -> "int":
        r"""npred(self, node) -> int"""
        return _ida_domain.qflow_chart_t_npred(self, node)

    def succ(self, node: "int", i: "int") -> "int":
        r"""succ(self, node, i) -> int"""
        return _ida_domain.qflow_chart_t_succ(self, node, i)

    def pred(self, node: "int", i: "int") -> "int":
        r"""pred(self, node, i) -> int"""
        return _ida_domain.qflow_chart_t_pred(self, node, i)

    def get_node_label(self, *args) -> "char *":
        r"""get_node_label(self, n) -> char *"""
        return _ida_domain.qflow_chart_t_get_node_label(self, *args)

    def size(self) -> "int":
        r"""size(self) -> int"""
        return _ida_domain.qflow_chart_t_size(self)

    def print_names(self) -> "bool":
        r"""print_names(self) -> bool"""
        return _ida_domain.qflow_chart_t_print_names(self)

    def __getitem__(self, n: "int") -> "qbasic_block_t *":
        r"""__getitem__(self, n) -> qbasic_block_t"""
        return _ida_domain.qflow_chart_t___getitem__(self, n)

# Register qflow_chart_t in _ida_domain:
_ida_domain.qflow_chart_t_swigregister(qflow_chart_t)

#<pycode(py_gdl)>
import types

import _ida_idaapi
import ida_idaapi
# -----------------------------------------------------------------------
class BasicBlock(object):
    """Basic block class. It is returned by the Flowchart class"""
    def __init__(self, id, bb, fc):
        self._fc = fc

        self.id = id
        """Basic block ID"""

        self.start_ea = bb.start_ea
        """start_ea of basic block"""

        self.end_ea = bb.end_ea
        """end_ea of basic block"""

        self.type  = self._fc._q.calc_block_type(self.id)
        """Block type (check fc_block_type_t enum)"""


    def preds(self):
        """
        Iterates the predecessors list
        """
        q = self._fc._q
        for i in range(0, self._fc._q.npred(self.id)):
            yield self._fc[q.pred(self.id, i)]


    def succs(self):
        """
        Iterates the successors list
        """
        q = self._fc._q
        for i in range(0, q.nsucc(self.id)):
            yield self._fc[q.succ(self.id, i)]

# -----------------------------------------------------------------------
class FlowChart(object):
    """
    Flowchart class used to determine basic blocks.
    Check ex_gdl_qflow_chart.py for sample usage.
    """
    def __init__(self, f=None, bounds=None, flags=0):
        """
        Constructor
        @param f: A func_t type, use get_func(ea) to get a reference
        @param bounds: A tuple of the form (start, end). Used if "f" is None
        @param flags: one of the FC_xxxx flags.
        """
        if (f is None) and (bounds is None or type(bounds) != tuple):
            raise Exception("Please specifiy either a function or start/end pair")

        if bounds is None:
            bounds = (_ida_idaapi.BADADDR, _ida_idaapi.BADADDR)

# Create the flowchart
        self._q = qflow_chart_t("", f, bounds[0], bounds[1], flags)

    size = property(lambda self: self._q.size())
    """Number of blocks in the flow chart"""


    def refresh(self):
        """Refreshes the flow chart"""
        self._q.refresh()


    def _getitem(self, index):
        return BasicBlock(index, self._q[index], self)


    def __iter__(self):
        return (self._getitem(index) for index in range(0, self.size))


    def __getitem__(self, index):
        """
        Returns a basic block

        @return: BasicBlock
        """
        if index >= self.size:
            raise KeyError
        else:
            return self._getitem(index)

FC_PREDS = 0 # obsolete bit, do not use

#</pycode(py_gdl)>

NN_null = _ida_domain.NN_null

NN_aaa = _ida_domain.NN_aaa

NN_aad = _ida_domain.NN_aad

NN_aam = _ida_domain.NN_aam

NN_aas = _ida_domain.NN_aas

NN_adc = _ida_domain.NN_adc

NN_add = _ida_domain.NN_add

NN_and = _ida_domain.NN_and

NN_arpl = _ida_domain.NN_arpl

NN_bound = _ida_domain.NN_bound

NN_bsf = _ida_domain.NN_bsf

NN_bsr = _ida_domain.NN_bsr

NN_bt = _ida_domain.NN_bt

NN_btc = _ida_domain.NN_btc

NN_btr = _ida_domain.NN_btr

NN_bts = _ida_domain.NN_bts

NN_call = _ida_domain.NN_call

NN_callfi = _ida_domain.NN_callfi

NN_callni = _ida_domain.NN_callni

NN_cbw = _ida_domain.NN_cbw

NN_cwde = _ida_domain.NN_cwde

NN_cdqe = _ida_domain.NN_cdqe

NN_clc = _ida_domain.NN_clc

NN_cld = _ida_domain.NN_cld

NN_cli = _ida_domain.NN_cli

NN_clts = _ida_domain.NN_clts

NN_cmc = _ida_domain.NN_cmc

NN_cmp = _ida_domain.NN_cmp

NN_cmps = _ida_domain.NN_cmps

NN_cwd = _ida_domain.NN_cwd

NN_cdq = _ida_domain.NN_cdq

NN_cqo = _ida_domain.NN_cqo

NN_daa = _ida_domain.NN_daa

NN_das = _ida_domain.NN_das

NN_dec = _ida_domain.NN_dec

NN_div = _ida_domain.NN_div

NN_enterw = _ida_domain.NN_enterw

NN_enter = _ida_domain.NN_enter

NN_enterd = _ida_domain.NN_enterd

NN_enterq = _ida_domain.NN_enterq

NN_hlt = _ida_domain.NN_hlt

NN_idiv = _ida_domain.NN_idiv

NN_imul = _ida_domain.NN_imul

NN_in = _ida_domain.NN_in

NN_inc = _ida_domain.NN_inc

NN_ins = _ida_domain.NN_ins

NN_int = _ida_domain.NN_int

NN_into = _ida_domain.NN_into

NN_int3 = _ida_domain.NN_int3

NN_iretw = _ida_domain.NN_iretw

NN_iret = _ida_domain.NN_iret

NN_iretd = _ida_domain.NN_iretd

NN_iretq = _ida_domain.NN_iretq

NN_ja = _ida_domain.NN_ja

NN_jae = _ida_domain.NN_jae

NN_jb = _ida_domain.NN_jb

NN_jbe = _ida_domain.NN_jbe

NN_jc = _ida_domain.NN_jc

NN_jcxz = _ida_domain.NN_jcxz

NN_jecxz = _ida_domain.NN_jecxz

NN_jrcxz = _ida_domain.NN_jrcxz

NN_je = _ida_domain.NN_je

NN_jg = _ida_domain.NN_jg

NN_jge = _ida_domain.NN_jge

NN_jl = _ida_domain.NN_jl

NN_jle = _ida_domain.NN_jle

NN_jna = _ida_domain.NN_jna

NN_jnae = _ida_domain.NN_jnae

NN_jnb = _ida_domain.NN_jnb

NN_jnbe = _ida_domain.NN_jnbe

NN_jnc = _ida_domain.NN_jnc

NN_jne = _ida_domain.NN_jne

NN_jng = _ida_domain.NN_jng

NN_jnge = _ida_domain.NN_jnge

NN_jnl = _ida_domain.NN_jnl

NN_jnle = _ida_domain.NN_jnle

NN_jno = _ida_domain.NN_jno

NN_jnp = _ida_domain.NN_jnp

NN_jns = _ida_domain.NN_jns

NN_jnz = _ida_domain.NN_jnz

NN_jo = _ida_domain.NN_jo

NN_jp = _ida_domain.NN_jp

NN_jpe = _ida_domain.NN_jpe

NN_jpo = _ida_domain.NN_jpo

NN_js = _ida_domain.NN_js

NN_jz = _ida_domain.NN_jz

NN_jmp = _ida_domain.NN_jmp

NN_jmpfi = _ida_domain.NN_jmpfi

NN_jmpni = _ida_domain.NN_jmpni

NN_jmpshort = _ida_domain.NN_jmpshort

NN_lahf = _ida_domain.NN_lahf

NN_lar = _ida_domain.NN_lar

NN_lea = _ida_domain.NN_lea

NN_leavew = _ida_domain.NN_leavew

NN_leave = _ida_domain.NN_leave

NN_leaved = _ida_domain.NN_leaved

NN_leaveq = _ida_domain.NN_leaveq

NN_lgdt = _ida_domain.NN_lgdt

NN_lidt = _ida_domain.NN_lidt

NN_lgs = _ida_domain.NN_lgs

NN_lss = _ida_domain.NN_lss

NN_lds = _ida_domain.NN_lds

NN_les = _ida_domain.NN_les

NN_lfs = _ida_domain.NN_lfs

NN_lldt = _ida_domain.NN_lldt

NN_lmsw = _ida_domain.NN_lmsw

NN_lock = _ida_domain.NN_lock

NN_lods = _ida_domain.NN_lods

NN_loopw = _ida_domain.NN_loopw

NN_loop = _ida_domain.NN_loop

NN_loopd = _ida_domain.NN_loopd

NN_loopq = _ida_domain.NN_loopq

NN_loopwe = _ida_domain.NN_loopwe

NN_loope = _ida_domain.NN_loope

NN_loopde = _ida_domain.NN_loopde

NN_loopqe = _ida_domain.NN_loopqe

NN_loopwne = _ida_domain.NN_loopwne

NN_loopne = _ida_domain.NN_loopne

NN_loopdne = _ida_domain.NN_loopdne

NN_loopqne = _ida_domain.NN_loopqne

NN_lsl = _ida_domain.NN_lsl

NN_ltr = _ida_domain.NN_ltr

NN_mov = _ida_domain.NN_mov

NN_movsp = _ida_domain.NN_movsp

NN_movs = _ida_domain.NN_movs

NN_movsx = _ida_domain.NN_movsx

NN_movzx = _ida_domain.NN_movzx

NN_mul = _ida_domain.NN_mul

NN_neg = _ida_domain.NN_neg

NN_nop = _ida_domain.NN_nop

NN_not = _ida_domain.NN_not

NN_or = _ida_domain.NN_or

NN_out = _ida_domain.NN_out

NN_outs = _ida_domain.NN_outs

NN_pop = _ida_domain.NN_pop

NN_popaw = _ida_domain.NN_popaw

NN_popa = _ida_domain.NN_popa

NN_popad = _ida_domain.NN_popad

NN_popaq = _ida_domain.NN_popaq

NN_popfw = _ida_domain.NN_popfw

NN_popf = _ida_domain.NN_popf

NN_popfd = _ida_domain.NN_popfd

NN_popfq = _ida_domain.NN_popfq

NN_push = _ida_domain.NN_push

NN_pushaw = _ida_domain.NN_pushaw

NN_pusha = _ida_domain.NN_pusha

NN_pushad = _ida_domain.NN_pushad

NN_pushaq = _ida_domain.NN_pushaq

NN_pushfw = _ida_domain.NN_pushfw

NN_pushf = _ida_domain.NN_pushf

NN_pushfd = _ida_domain.NN_pushfd

NN_pushfq = _ida_domain.NN_pushfq

NN_rcl = _ida_domain.NN_rcl

NN_rcr = _ida_domain.NN_rcr

NN_rol = _ida_domain.NN_rol

NN_ror = _ida_domain.NN_ror

NN_rep = _ida_domain.NN_rep

NN_repe = _ida_domain.NN_repe

NN_repne = _ida_domain.NN_repne

NN_retn = _ida_domain.NN_retn

NN_retf = _ida_domain.NN_retf

NN_sahf = _ida_domain.NN_sahf

NN_sal = _ida_domain.NN_sal

NN_sar = _ida_domain.NN_sar

NN_shl = _ida_domain.NN_shl

NN_shr = _ida_domain.NN_shr

NN_sbb = _ida_domain.NN_sbb

NN_scas = _ida_domain.NN_scas

NN_seta = _ida_domain.NN_seta

NN_setae = _ida_domain.NN_setae

NN_setb = _ida_domain.NN_setb

NN_setbe = _ida_domain.NN_setbe

NN_setc = _ida_domain.NN_setc

NN_sete = _ida_domain.NN_sete

NN_setg = _ida_domain.NN_setg

NN_setge = _ida_domain.NN_setge

NN_setl = _ida_domain.NN_setl

NN_setle = _ida_domain.NN_setle

NN_setna = _ida_domain.NN_setna

NN_setnae = _ida_domain.NN_setnae

NN_setnb = _ida_domain.NN_setnb

NN_setnbe = _ida_domain.NN_setnbe

NN_setnc = _ida_domain.NN_setnc

NN_setne = _ida_domain.NN_setne

NN_setng = _ida_domain.NN_setng

NN_setnge = _ida_domain.NN_setnge

NN_setnl = _ida_domain.NN_setnl

NN_setnle = _ida_domain.NN_setnle

NN_setno = _ida_domain.NN_setno

NN_setnp = _ida_domain.NN_setnp

NN_setns = _ida_domain.NN_setns

NN_setnz = _ida_domain.NN_setnz

NN_seto = _ida_domain.NN_seto

NN_setp = _ida_domain.NN_setp

NN_setpe = _ida_domain.NN_setpe

NN_setpo = _ida_domain.NN_setpo

NN_sets = _ida_domain.NN_sets

NN_setz = _ida_domain.NN_setz

NN_sgdt = _ida_domain.NN_sgdt

NN_sidt = _ida_domain.NN_sidt

NN_shld = _ida_domain.NN_shld

NN_shrd = _ida_domain.NN_shrd

NN_sldt = _ida_domain.NN_sldt

NN_smsw = _ida_domain.NN_smsw

NN_stc = _ida_domain.NN_stc

NN_std = _ida_domain.NN_std

NN_sti = _ida_domain.NN_sti

NN_stos = _ida_domain.NN_stos

NN_str = _ida_domain.NN_str

NN_sub = _ida_domain.NN_sub

NN_test = _ida_domain.NN_test

NN_verr = _ida_domain.NN_verr

NN_verw = _ida_domain.NN_verw

NN_wait = _ida_domain.NN_wait

NN_xchg = _ida_domain.NN_xchg

NN_xlat = _ida_domain.NN_xlat

NN_xor = _ida_domain.NN_xor

NN_cmpxchg = _ida_domain.NN_cmpxchg

NN_bswap = _ida_domain.NN_bswap

NN_xadd = _ida_domain.NN_xadd

NN_invd = _ida_domain.NN_invd

NN_wbinvd = _ida_domain.NN_wbinvd

NN_invlpg = _ida_domain.NN_invlpg

NN_rdmsr = _ida_domain.NN_rdmsr

NN_wrmsr = _ida_domain.NN_wrmsr

NN_cpuid = _ida_domain.NN_cpuid

NN_cmpxchg8b = _ida_domain.NN_cmpxchg8b

NN_rdtsc = _ida_domain.NN_rdtsc

NN_rsm = _ida_domain.NN_rsm

NN_cmova = _ida_domain.NN_cmova

NN_cmovb = _ida_domain.NN_cmovb

NN_cmovbe = _ida_domain.NN_cmovbe

NN_cmovg = _ida_domain.NN_cmovg

NN_cmovge = _ida_domain.NN_cmovge

NN_cmovl = _ida_domain.NN_cmovl

NN_cmovle = _ida_domain.NN_cmovle

NN_cmovnb = _ida_domain.NN_cmovnb

NN_cmovno = _ida_domain.NN_cmovno

NN_cmovnp = _ida_domain.NN_cmovnp

NN_cmovns = _ida_domain.NN_cmovns

NN_cmovnz = _ida_domain.NN_cmovnz

NN_cmovo = _ida_domain.NN_cmovo

NN_cmovp = _ida_domain.NN_cmovp

NN_cmovs = _ida_domain.NN_cmovs

NN_cmovz = _ida_domain.NN_cmovz

NN_fcmovb = _ida_domain.NN_fcmovb

NN_fcmove = _ida_domain.NN_fcmove

NN_fcmovbe = _ida_domain.NN_fcmovbe

NN_fcmovu = _ida_domain.NN_fcmovu

NN_fcmovnb = _ida_domain.NN_fcmovnb

NN_fcmovne = _ida_domain.NN_fcmovne

NN_fcmovnbe = _ida_domain.NN_fcmovnbe

NN_fcmovnu = _ida_domain.NN_fcmovnu

NN_fcomi = _ida_domain.NN_fcomi

NN_fucomi = _ida_domain.NN_fucomi

NN_fcomip = _ida_domain.NN_fcomip

NN_fucomip = _ida_domain.NN_fucomip

NN_rdpmc = _ida_domain.NN_rdpmc

NN_fld = _ida_domain.NN_fld

NN_fst = _ida_domain.NN_fst

NN_fstp = _ida_domain.NN_fstp

NN_fxch = _ida_domain.NN_fxch

NN_fild = _ida_domain.NN_fild

NN_fist = _ida_domain.NN_fist

NN_fistp = _ida_domain.NN_fistp

NN_fbld = _ida_domain.NN_fbld

NN_fbstp = _ida_domain.NN_fbstp

NN_fadd = _ida_domain.NN_fadd

NN_faddp = _ida_domain.NN_faddp

NN_fiadd = _ida_domain.NN_fiadd

NN_fsub = _ida_domain.NN_fsub

NN_fsubp = _ida_domain.NN_fsubp

NN_fisub = _ida_domain.NN_fisub

NN_fsubr = _ida_domain.NN_fsubr

NN_fsubrp = _ida_domain.NN_fsubrp

NN_fisubr = _ida_domain.NN_fisubr

NN_fmul = _ida_domain.NN_fmul

NN_fmulp = _ida_domain.NN_fmulp

NN_fimul = _ida_domain.NN_fimul

NN_fdiv = _ida_domain.NN_fdiv

NN_fdivp = _ida_domain.NN_fdivp

NN_fidiv = _ida_domain.NN_fidiv

NN_fdivr = _ida_domain.NN_fdivr

NN_fdivrp = _ida_domain.NN_fdivrp

NN_fidivr = _ida_domain.NN_fidivr

NN_fsqrt = _ida_domain.NN_fsqrt

NN_fscale = _ida_domain.NN_fscale

NN_fprem = _ida_domain.NN_fprem

NN_frndint = _ida_domain.NN_frndint

NN_fxtract = _ida_domain.NN_fxtract

NN_fabs = _ida_domain.NN_fabs

NN_fchs = _ida_domain.NN_fchs

NN_fcom = _ida_domain.NN_fcom

NN_fcomp = _ida_domain.NN_fcomp

NN_fcompp = _ida_domain.NN_fcompp

NN_ficom = _ida_domain.NN_ficom

NN_ficomp = _ida_domain.NN_ficomp

NN_ftst = _ida_domain.NN_ftst

NN_fxam = _ida_domain.NN_fxam

NN_fptan = _ida_domain.NN_fptan

NN_fpatan = _ida_domain.NN_fpatan

NN_f2xm1 = _ida_domain.NN_f2xm1

NN_fyl2x = _ida_domain.NN_fyl2x

NN_fyl2xp1 = _ida_domain.NN_fyl2xp1

NN_fldz = _ida_domain.NN_fldz

NN_fld1 = _ida_domain.NN_fld1

NN_fldpi = _ida_domain.NN_fldpi

NN_fldl2t = _ida_domain.NN_fldl2t

NN_fldl2e = _ida_domain.NN_fldl2e

NN_fldlg2 = _ida_domain.NN_fldlg2

NN_fldln2 = _ida_domain.NN_fldln2

NN_finit = _ida_domain.NN_finit

NN_fninit = _ida_domain.NN_fninit

NN_fsetpm = _ida_domain.NN_fsetpm

NN_fldcw = _ida_domain.NN_fldcw

NN_fstcw = _ida_domain.NN_fstcw

NN_fnstcw = _ida_domain.NN_fnstcw

NN_fstsw = _ida_domain.NN_fstsw

NN_fnstsw = _ida_domain.NN_fnstsw

NN_fclex = _ida_domain.NN_fclex

NN_fnclex = _ida_domain.NN_fnclex

NN_fstenv = _ida_domain.NN_fstenv

NN_fnstenv = _ida_domain.NN_fnstenv

NN_fldenv = _ida_domain.NN_fldenv

NN_fsave = _ida_domain.NN_fsave

NN_fnsave = _ida_domain.NN_fnsave

NN_frstor = _ida_domain.NN_frstor

NN_fincstp = _ida_domain.NN_fincstp

NN_fdecstp = _ida_domain.NN_fdecstp

NN_ffree = _ida_domain.NN_ffree

NN_fnop = _ida_domain.NN_fnop

NN_feni = _ida_domain.NN_feni

NN_fneni = _ida_domain.NN_fneni

NN_fdisi = _ida_domain.NN_fdisi

NN_fndisi = _ida_domain.NN_fndisi

NN_fprem1 = _ida_domain.NN_fprem1

NN_fsincos = _ida_domain.NN_fsincos

NN_fsin = _ida_domain.NN_fsin

NN_fcos = _ida_domain.NN_fcos

NN_fucom = _ida_domain.NN_fucom

NN_fucomp = _ida_domain.NN_fucomp

NN_fucompp = _ida_domain.NN_fucompp

NN_setalc = _ida_domain.NN_setalc

NN_svdc = _ida_domain.NN_svdc

NN_rsdc = _ida_domain.NN_rsdc

NN_svldt = _ida_domain.NN_svldt

NN_rsldt = _ida_domain.NN_rsldt

NN_svts = _ida_domain.NN_svts

NN_rsts = _ida_domain.NN_rsts

NN_icebp = _ida_domain.NN_icebp

NN_loadall = _ida_domain.NN_loadall

NN_emms = _ida_domain.NN_emms

NN_movd = _ida_domain.NN_movd

NN_movq = _ida_domain.NN_movq

NN_packsswb = _ida_domain.NN_packsswb

NN_packssdw = _ida_domain.NN_packssdw

NN_packuswb = _ida_domain.NN_packuswb

NN_paddb = _ida_domain.NN_paddb

NN_paddw = _ida_domain.NN_paddw

NN_paddd = _ida_domain.NN_paddd

NN_paddsb = _ida_domain.NN_paddsb

NN_paddsw = _ida_domain.NN_paddsw

NN_paddusb = _ida_domain.NN_paddusb

NN_paddusw = _ida_domain.NN_paddusw

NN_pand = _ida_domain.NN_pand

NN_pandn = _ida_domain.NN_pandn

NN_pcmpeqb = _ida_domain.NN_pcmpeqb

NN_pcmpeqw = _ida_domain.NN_pcmpeqw

NN_pcmpeqd = _ida_domain.NN_pcmpeqd

NN_pcmpgtb = _ida_domain.NN_pcmpgtb

NN_pcmpgtw = _ida_domain.NN_pcmpgtw

NN_pcmpgtd = _ida_domain.NN_pcmpgtd

NN_pmaddwd = _ida_domain.NN_pmaddwd

NN_pmulhw = _ida_domain.NN_pmulhw

NN_pmullw = _ida_domain.NN_pmullw

NN_por = _ida_domain.NN_por

NN_psllw = _ida_domain.NN_psllw

NN_pslld = _ida_domain.NN_pslld

NN_psllq = _ida_domain.NN_psllq

NN_psraw = _ida_domain.NN_psraw

NN_psrad = _ida_domain.NN_psrad

NN_psrlw = _ida_domain.NN_psrlw

NN_psrld = _ida_domain.NN_psrld

NN_psrlq = _ida_domain.NN_psrlq

NN_psubb = _ida_domain.NN_psubb

NN_psubw = _ida_domain.NN_psubw

NN_psubd = _ida_domain.NN_psubd

NN_psubsb = _ida_domain.NN_psubsb

NN_psubsw = _ida_domain.NN_psubsw

NN_psubusb = _ida_domain.NN_psubusb

NN_psubusw = _ida_domain.NN_psubusw

NN_punpckhbw = _ida_domain.NN_punpckhbw

NN_punpckhwd = _ida_domain.NN_punpckhwd

NN_punpckhdq = _ida_domain.NN_punpckhdq

NN_punpcklbw = _ida_domain.NN_punpcklbw

NN_punpcklwd = _ida_domain.NN_punpcklwd

NN_punpckldq = _ida_domain.NN_punpckldq

NN_pxor = _ida_domain.NN_pxor

NN_fxsave = _ida_domain.NN_fxsave

NN_fxrstor = _ida_domain.NN_fxrstor

NN_sysenter = _ida_domain.NN_sysenter

NN_sysexit = _ida_domain.NN_sysexit

NN_pavgusb = _ida_domain.NN_pavgusb

NN_pfadd = _ida_domain.NN_pfadd

NN_pfsub = _ida_domain.NN_pfsub

NN_pfsubr = _ida_domain.NN_pfsubr

NN_pfacc = _ida_domain.NN_pfacc

NN_pfcmpge = _ida_domain.NN_pfcmpge

NN_pfcmpgt = _ida_domain.NN_pfcmpgt

NN_pfcmpeq = _ida_domain.NN_pfcmpeq

NN_pfmin = _ida_domain.NN_pfmin

NN_pfmax = _ida_domain.NN_pfmax

NN_pi2fd = _ida_domain.NN_pi2fd

NN_pf2id = _ida_domain.NN_pf2id

NN_pfrcp = _ida_domain.NN_pfrcp

NN_pfrsqrt = _ida_domain.NN_pfrsqrt

NN_pfmul = _ida_domain.NN_pfmul

NN_pfrcpit1 = _ida_domain.NN_pfrcpit1

NN_pfrsqit1 = _ida_domain.NN_pfrsqit1

NN_pfrcpit2 = _ida_domain.NN_pfrcpit2

NN_pmulhrw = _ida_domain.NN_pmulhrw

NN_femms = _ida_domain.NN_femms

NN_prefetch = _ida_domain.NN_prefetch

NN_prefetchw = _ida_domain.NN_prefetchw

NN_addps = _ida_domain.NN_addps

NN_addss = _ida_domain.NN_addss

NN_andnps = _ida_domain.NN_andnps

NN_andps = _ida_domain.NN_andps

NN_cmpps = _ida_domain.NN_cmpps

NN_cmpss = _ida_domain.NN_cmpss

NN_comiss = _ida_domain.NN_comiss

NN_cvtpi2ps = _ida_domain.NN_cvtpi2ps

NN_cvtps2pi = _ida_domain.NN_cvtps2pi

NN_cvtsi2ss = _ida_domain.NN_cvtsi2ss

NN_cvtss2si = _ida_domain.NN_cvtss2si

NN_cvttps2pi = _ida_domain.NN_cvttps2pi

NN_cvttss2si = _ida_domain.NN_cvttss2si

NN_divps = _ida_domain.NN_divps

NN_divss = _ida_domain.NN_divss

NN_ldmxcsr = _ida_domain.NN_ldmxcsr

NN_maxps = _ida_domain.NN_maxps

NN_maxss = _ida_domain.NN_maxss

NN_minps = _ida_domain.NN_minps

NN_minss = _ida_domain.NN_minss

NN_movaps = _ida_domain.NN_movaps

NN_movhlps = _ida_domain.NN_movhlps

NN_movhps = _ida_domain.NN_movhps

NN_movlhps = _ida_domain.NN_movlhps

NN_movlps = _ida_domain.NN_movlps

NN_movmskps = _ida_domain.NN_movmskps

NN_movss = _ida_domain.NN_movss

NN_movups = _ida_domain.NN_movups

NN_mulps = _ida_domain.NN_mulps

NN_mulss = _ida_domain.NN_mulss

NN_orps = _ida_domain.NN_orps

NN_rcpps = _ida_domain.NN_rcpps

NN_rcpss = _ida_domain.NN_rcpss

NN_rsqrtps = _ida_domain.NN_rsqrtps

NN_rsqrtss = _ida_domain.NN_rsqrtss

NN_shufps = _ida_domain.NN_shufps

NN_sqrtps = _ida_domain.NN_sqrtps

NN_sqrtss = _ida_domain.NN_sqrtss

NN_stmxcsr = _ida_domain.NN_stmxcsr

NN_subps = _ida_domain.NN_subps

NN_subss = _ida_domain.NN_subss

NN_ucomiss = _ida_domain.NN_ucomiss

NN_unpckhps = _ida_domain.NN_unpckhps

NN_unpcklps = _ida_domain.NN_unpcklps

NN_xorps = _ida_domain.NN_xorps

NN_pavgb = _ida_domain.NN_pavgb

NN_pavgw = _ida_domain.NN_pavgw

NN_pextrw = _ida_domain.NN_pextrw

NN_pinsrw = _ida_domain.NN_pinsrw

NN_pmaxsw = _ida_domain.NN_pmaxsw

NN_pmaxub = _ida_domain.NN_pmaxub

NN_pminsw = _ida_domain.NN_pminsw

NN_pminub = _ida_domain.NN_pminub

NN_pmovmskb = _ida_domain.NN_pmovmskb

NN_pmulhuw = _ida_domain.NN_pmulhuw

NN_psadbw = _ida_domain.NN_psadbw

NN_pshufw = _ida_domain.NN_pshufw

NN_maskmovq = _ida_domain.NN_maskmovq

NN_movntps = _ida_domain.NN_movntps

NN_movntq = _ida_domain.NN_movntq

NN_prefetcht0 = _ida_domain.NN_prefetcht0

NN_prefetcht1 = _ida_domain.NN_prefetcht1

NN_prefetcht2 = _ida_domain.NN_prefetcht2

NN_prefetchnta = _ida_domain.NN_prefetchnta

NN_sfence = _ida_domain.NN_sfence

NN_cmpeqps = _ida_domain.NN_cmpeqps

NN_cmpltps = _ida_domain.NN_cmpltps

NN_cmpleps = _ida_domain.NN_cmpleps

NN_cmpunordps = _ida_domain.NN_cmpunordps

NN_cmpneqps = _ida_domain.NN_cmpneqps

NN_cmpnltps = _ida_domain.NN_cmpnltps

NN_cmpnleps = _ida_domain.NN_cmpnleps

NN_cmpordps = _ida_domain.NN_cmpordps

NN_cmpeqss = _ida_domain.NN_cmpeqss

NN_cmpltss = _ida_domain.NN_cmpltss

NN_cmpless = _ida_domain.NN_cmpless

NN_cmpunordss = _ida_domain.NN_cmpunordss

NN_cmpneqss = _ida_domain.NN_cmpneqss

NN_cmpnltss = _ida_domain.NN_cmpnltss

NN_cmpnless = _ida_domain.NN_cmpnless

NN_cmpordss = _ida_domain.NN_cmpordss

NN_pf2iw = _ida_domain.NN_pf2iw

NN_pfnacc = _ida_domain.NN_pfnacc

NN_pfpnacc = _ida_domain.NN_pfpnacc

NN_pi2fw = _ida_domain.NN_pi2fw

NN_pswapd = _ida_domain.NN_pswapd

NN_fstp1 = _ida_domain.NN_fstp1

NN_fcom2 = _ida_domain.NN_fcom2

NN_fcomp3 = _ida_domain.NN_fcomp3

NN_fxch4 = _ida_domain.NN_fxch4

NN_fcomp5 = _ida_domain.NN_fcomp5

NN_ffreep = _ida_domain.NN_ffreep

NN_fxch7 = _ida_domain.NN_fxch7

NN_fstp8 = _ida_domain.NN_fstp8

NN_fstp9 = _ida_domain.NN_fstp9

NN_addpd = _ida_domain.NN_addpd

NN_addsd = _ida_domain.NN_addsd

NN_andnpd = _ida_domain.NN_andnpd

NN_andpd = _ida_domain.NN_andpd

NN_clflush = _ida_domain.NN_clflush

NN_cmppd = _ida_domain.NN_cmppd

NN_cmpsd = _ida_domain.NN_cmpsd

NN_comisd = _ida_domain.NN_comisd

NN_cvtdq2pd = _ida_domain.NN_cvtdq2pd

NN_cvtdq2ps = _ida_domain.NN_cvtdq2ps

NN_cvtpd2dq = _ida_domain.NN_cvtpd2dq

NN_cvtpd2pi = _ida_domain.NN_cvtpd2pi

NN_cvtpd2ps = _ida_domain.NN_cvtpd2ps

NN_cvtpi2pd = _ida_domain.NN_cvtpi2pd

NN_cvtps2dq = _ida_domain.NN_cvtps2dq

NN_cvtps2pd = _ida_domain.NN_cvtps2pd

NN_cvtsd2si = _ida_domain.NN_cvtsd2si

NN_cvtsd2ss = _ida_domain.NN_cvtsd2ss

NN_cvtsi2sd = _ida_domain.NN_cvtsi2sd

NN_cvtss2sd = _ida_domain.NN_cvtss2sd

NN_cvttpd2dq = _ida_domain.NN_cvttpd2dq

NN_cvttpd2pi = _ida_domain.NN_cvttpd2pi

NN_cvttps2dq = _ida_domain.NN_cvttps2dq

NN_cvttsd2si = _ida_domain.NN_cvttsd2si

NN_divpd = _ida_domain.NN_divpd

NN_divsd = _ida_domain.NN_divsd

NN_lfence = _ida_domain.NN_lfence

NN_maskmovdqu = _ida_domain.NN_maskmovdqu

NN_maxpd = _ida_domain.NN_maxpd

NN_maxsd = _ida_domain.NN_maxsd

NN_mfence = _ida_domain.NN_mfence

NN_minpd = _ida_domain.NN_minpd

NN_minsd = _ida_domain.NN_minsd

NN_movapd = _ida_domain.NN_movapd

NN_movdq2q = _ida_domain.NN_movdq2q

NN_movdqa = _ida_domain.NN_movdqa

NN_movdqu = _ida_domain.NN_movdqu

NN_movhpd = _ida_domain.NN_movhpd

NN_movlpd = _ida_domain.NN_movlpd

NN_movmskpd = _ida_domain.NN_movmskpd

NN_movntdq = _ida_domain.NN_movntdq

NN_movnti = _ida_domain.NN_movnti

NN_movntpd = _ida_domain.NN_movntpd

NN_movq2dq = _ida_domain.NN_movq2dq

NN_movsd = _ida_domain.NN_movsd

NN_movupd = _ida_domain.NN_movupd

NN_mulpd = _ida_domain.NN_mulpd

NN_mulsd = _ida_domain.NN_mulsd

NN_orpd = _ida_domain.NN_orpd

NN_paddq = _ida_domain.NN_paddq

NN_pause = _ida_domain.NN_pause

NN_pmuludq = _ida_domain.NN_pmuludq

NN_pshufd = _ida_domain.NN_pshufd

NN_pshufhw = _ida_domain.NN_pshufhw

NN_pshuflw = _ida_domain.NN_pshuflw

NN_pslldq = _ida_domain.NN_pslldq

NN_psrldq = _ida_domain.NN_psrldq

NN_psubq = _ida_domain.NN_psubq

NN_punpckhqdq = _ida_domain.NN_punpckhqdq

NN_punpcklqdq = _ida_domain.NN_punpcklqdq

NN_shufpd = _ida_domain.NN_shufpd

NN_sqrtpd = _ida_domain.NN_sqrtpd

NN_sqrtsd = _ida_domain.NN_sqrtsd

NN_subpd = _ida_domain.NN_subpd

NN_subsd = _ida_domain.NN_subsd

NN_ucomisd = _ida_domain.NN_ucomisd

NN_unpckhpd = _ida_domain.NN_unpckhpd

NN_unpcklpd = _ida_domain.NN_unpcklpd

NN_xorpd = _ida_domain.NN_xorpd

NN_syscall = _ida_domain.NN_syscall

NN_sysret = _ida_domain.NN_sysret

NN_swapgs = _ida_domain.NN_swapgs

NN_movddup = _ida_domain.NN_movddup

NN_movshdup = _ida_domain.NN_movshdup

NN_movsldup = _ida_domain.NN_movsldup

NN_movsxd = _ida_domain.NN_movsxd

NN_cmpxchg16b = _ida_domain.NN_cmpxchg16b

NN_addsubpd = _ida_domain.NN_addsubpd

NN_addsubps = _ida_domain.NN_addsubps

NN_haddpd = _ida_domain.NN_haddpd

NN_haddps = _ida_domain.NN_haddps

NN_hsubpd = _ida_domain.NN_hsubpd

NN_hsubps = _ida_domain.NN_hsubps

NN_monitor = _ida_domain.NN_monitor

NN_mwait = _ida_domain.NN_mwait

NN_fisttp = _ida_domain.NN_fisttp

NN_lddqu = _ida_domain.NN_lddqu

NN_psignb = _ida_domain.NN_psignb

NN_psignw = _ida_domain.NN_psignw

NN_psignd = _ida_domain.NN_psignd

NN_pshufb = _ida_domain.NN_pshufb

NN_pmulhrsw = _ida_domain.NN_pmulhrsw

NN_pmaddubsw = _ida_domain.NN_pmaddubsw

NN_phsubsw = _ida_domain.NN_phsubsw

NN_phaddsw = _ida_domain.NN_phaddsw

NN_phaddw = _ida_domain.NN_phaddw

NN_phaddd = _ida_domain.NN_phaddd

NN_phsubw = _ida_domain.NN_phsubw

NN_phsubd = _ida_domain.NN_phsubd

NN_palignr = _ida_domain.NN_palignr

NN_pabsb = _ida_domain.NN_pabsb

NN_pabsw = _ida_domain.NN_pabsw

NN_pabsd = _ida_domain.NN_pabsd

NN_vmcall = _ida_domain.NN_vmcall

NN_vmclear = _ida_domain.NN_vmclear

NN_vmlaunch = _ida_domain.NN_vmlaunch

NN_vmresume = _ida_domain.NN_vmresume

NN_vmptrld = _ida_domain.NN_vmptrld

NN_vmptrst = _ida_domain.NN_vmptrst

NN_vmread = _ida_domain.NN_vmread

NN_vmwrite = _ida_domain.NN_vmwrite

NN_vmxoff = _ida_domain.NN_vmxoff

NN_vmxon = _ida_domain.NN_vmxon

NN_ud2 = _ida_domain.NN_ud2

NN_rdtscp = _ida_domain.NN_rdtscp

NN_pfrcpv = _ida_domain.NN_pfrcpv

NN_pfrsqrtv = _ida_domain.NN_pfrsqrtv

NN_cmpeqpd = _ida_domain.NN_cmpeqpd

NN_cmpltpd = _ida_domain.NN_cmpltpd

NN_cmplepd = _ida_domain.NN_cmplepd

NN_cmpunordpd = _ida_domain.NN_cmpunordpd

NN_cmpneqpd = _ida_domain.NN_cmpneqpd

NN_cmpnltpd = _ida_domain.NN_cmpnltpd

NN_cmpnlepd = _ida_domain.NN_cmpnlepd

NN_cmpordpd = _ida_domain.NN_cmpordpd

NN_cmpeqsd = _ida_domain.NN_cmpeqsd

NN_cmpltsd = _ida_domain.NN_cmpltsd

NN_cmplesd = _ida_domain.NN_cmplesd

NN_cmpunordsd = _ida_domain.NN_cmpunordsd

NN_cmpneqsd = _ida_domain.NN_cmpneqsd

NN_cmpnltsd = _ida_domain.NN_cmpnltsd

NN_cmpnlesd = _ida_domain.NN_cmpnlesd

NN_cmpordsd = _ida_domain.NN_cmpordsd

NN_blendpd = _ida_domain.NN_blendpd

NN_blendps = _ida_domain.NN_blendps

NN_blendvpd = _ida_domain.NN_blendvpd

NN_blendvps = _ida_domain.NN_blendvps

NN_dppd = _ida_domain.NN_dppd

NN_dpps = _ida_domain.NN_dpps

NN_extractps = _ida_domain.NN_extractps

NN_insertps = _ida_domain.NN_insertps

NN_movntdqa = _ida_domain.NN_movntdqa

NN_mpsadbw = _ida_domain.NN_mpsadbw

NN_packusdw = _ida_domain.NN_packusdw

NN_pblendvb = _ida_domain.NN_pblendvb

NN_pblendw = _ida_domain.NN_pblendw

NN_pcmpeqq = _ida_domain.NN_pcmpeqq

NN_pextrb = _ida_domain.NN_pextrb

NN_pextrd = _ida_domain.NN_pextrd

NN_pextrq = _ida_domain.NN_pextrq

NN_phminposuw = _ida_domain.NN_phminposuw

NN_pinsrb = _ida_domain.NN_pinsrb

NN_pinsrd = _ida_domain.NN_pinsrd

NN_pinsrq = _ida_domain.NN_pinsrq

NN_pmaxsb = _ida_domain.NN_pmaxsb

NN_pmaxsd = _ida_domain.NN_pmaxsd

NN_pmaxud = _ida_domain.NN_pmaxud

NN_pmaxuw = _ida_domain.NN_pmaxuw

NN_pminsb = _ida_domain.NN_pminsb

NN_pminsd = _ida_domain.NN_pminsd

NN_pminud = _ida_domain.NN_pminud

NN_pminuw = _ida_domain.NN_pminuw

NN_pmovsxbw = _ida_domain.NN_pmovsxbw

NN_pmovsxbd = _ida_domain.NN_pmovsxbd

NN_pmovsxbq = _ida_domain.NN_pmovsxbq

NN_pmovsxwd = _ida_domain.NN_pmovsxwd

NN_pmovsxwq = _ida_domain.NN_pmovsxwq

NN_pmovsxdq = _ida_domain.NN_pmovsxdq

NN_pmovzxbw = _ida_domain.NN_pmovzxbw

NN_pmovzxbd = _ida_domain.NN_pmovzxbd

NN_pmovzxbq = _ida_domain.NN_pmovzxbq

NN_pmovzxwd = _ida_domain.NN_pmovzxwd

NN_pmovzxwq = _ida_domain.NN_pmovzxwq

NN_pmovzxdq = _ida_domain.NN_pmovzxdq

NN_pmuldq = _ida_domain.NN_pmuldq

NN_pmulld = _ida_domain.NN_pmulld

NN_ptest = _ida_domain.NN_ptest

NN_roundpd = _ida_domain.NN_roundpd

NN_roundps = _ida_domain.NN_roundps

NN_roundsd = _ida_domain.NN_roundsd

NN_roundss = _ida_domain.NN_roundss

NN_crc32 = _ida_domain.NN_crc32

NN_pcmpestri = _ida_domain.NN_pcmpestri

NN_pcmpestrm = _ida_domain.NN_pcmpestrm

NN_pcmpistri = _ida_domain.NN_pcmpistri

NN_pcmpistrm = _ida_domain.NN_pcmpistrm

NN_pcmpgtq = _ida_domain.NN_pcmpgtq

NN_popcnt = _ida_domain.NN_popcnt

NN_extrq = _ida_domain.NN_extrq

NN_insertq = _ida_domain.NN_insertq

NN_movntsd = _ida_domain.NN_movntsd

NN_movntss = _ida_domain.NN_movntss

NN_lzcnt = _ida_domain.NN_lzcnt

NN_xgetbv = _ida_domain.NN_xgetbv

NN_xrstor = _ida_domain.NN_xrstor

NN_xsave = _ida_domain.NN_xsave

NN_xsetbv = _ida_domain.NN_xsetbv

NN_getsec = _ida_domain.NN_getsec

NN_clgi = _ida_domain.NN_clgi

NN_invlpga = _ida_domain.NN_invlpga

NN_skinit = _ida_domain.NN_skinit

NN_stgi = _ida_domain.NN_stgi

NN_vmexit = _ida_domain.NN_vmexit

NN_vmload = _ida_domain.NN_vmload

NN_vmmcall = _ida_domain.NN_vmmcall

NN_vmrun = _ida_domain.NN_vmrun

NN_vmsave = _ida_domain.NN_vmsave

NN_invept = _ida_domain.NN_invept

NN_invvpid = _ida_domain.NN_invvpid

NN_movbe = _ida_domain.NN_movbe

NN_aesenc = _ida_domain.NN_aesenc

NN_aesenclast = _ida_domain.NN_aesenclast

NN_aesdec = _ida_domain.NN_aesdec

NN_aesdeclast = _ida_domain.NN_aesdeclast

NN_aesimc = _ida_domain.NN_aesimc

NN_aeskeygenassist = _ida_domain.NN_aeskeygenassist

NN_pclmulqdq = _ida_domain.NN_pclmulqdq

NN_retnw = _ida_domain.NN_retnw

NN_retnd = _ida_domain.NN_retnd

NN_retnq = _ida_domain.NN_retnq

NN_retfw = _ida_domain.NN_retfw

NN_retfd = _ida_domain.NN_retfd

NN_retfq = _ida_domain.NN_retfq

NN_rdrand = _ida_domain.NN_rdrand

NN_adcx = _ida_domain.NN_adcx

NN_adox = _ida_domain.NN_adox

NN_andn = _ida_domain.NN_andn

NN_bextr = _ida_domain.NN_bextr

NN_blsi = _ida_domain.NN_blsi

NN_blsmsk = _ida_domain.NN_blsmsk

NN_blsr = _ida_domain.NN_blsr

NN_bzhi = _ida_domain.NN_bzhi

NN_clac = _ida_domain.NN_clac

NN_mulx = _ida_domain.NN_mulx

NN_pdep = _ida_domain.NN_pdep

NN_pext = _ida_domain.NN_pext

NN_rorx = _ida_domain.NN_rorx

NN_sarx = _ida_domain.NN_sarx

NN_shlx = _ida_domain.NN_shlx

NN_shrx = _ida_domain.NN_shrx

NN_stac = _ida_domain.NN_stac

NN_tzcnt = _ida_domain.NN_tzcnt

NN_xsaveopt = _ida_domain.NN_xsaveopt

NN_invpcid = _ida_domain.NN_invpcid

NN_rdseed = _ida_domain.NN_rdseed

NN_rdfsbase = _ida_domain.NN_rdfsbase

NN_rdgsbase = _ida_domain.NN_rdgsbase

NN_wrfsbase = _ida_domain.NN_wrfsbase

NN_wrgsbase = _ida_domain.NN_wrgsbase

NN_vaddpd = _ida_domain.NN_vaddpd

NN_vaddps = _ida_domain.NN_vaddps

NN_vaddsd = _ida_domain.NN_vaddsd

NN_vaddss = _ida_domain.NN_vaddss

NN_vaddsubpd = _ida_domain.NN_vaddsubpd

NN_vaddsubps = _ida_domain.NN_vaddsubps

NN_vaesdec = _ida_domain.NN_vaesdec

NN_vaesdeclast = _ida_domain.NN_vaesdeclast

NN_vaesenc = _ida_domain.NN_vaesenc

NN_vaesenclast = _ida_domain.NN_vaesenclast

NN_vaesimc = _ida_domain.NN_vaesimc

NN_vaeskeygenassist = _ida_domain.NN_vaeskeygenassist

NN_vandnpd = _ida_domain.NN_vandnpd

NN_vandnps = _ida_domain.NN_vandnps

NN_vandpd = _ida_domain.NN_vandpd

NN_vandps = _ida_domain.NN_vandps

NN_vblendpd = _ida_domain.NN_vblendpd

NN_vblendps = _ida_domain.NN_vblendps

NN_vblendvpd = _ida_domain.NN_vblendvpd

NN_vblendvps = _ida_domain.NN_vblendvps

NN_vbroadcastf128 = _ida_domain.NN_vbroadcastf128

NN_vbroadcasti128 = _ida_domain.NN_vbroadcasti128

NN_vbroadcastsd = _ida_domain.NN_vbroadcastsd

NN_vbroadcastss = _ida_domain.NN_vbroadcastss

NN_vcmppd = _ida_domain.NN_vcmppd

NN_vcmpps = _ida_domain.NN_vcmpps

NN_vcmpsd = _ida_domain.NN_vcmpsd

NN_vcmpss = _ida_domain.NN_vcmpss

NN_vcomisd = _ida_domain.NN_vcomisd

NN_vcomiss = _ida_domain.NN_vcomiss

NN_vcvtdq2pd = _ida_domain.NN_vcvtdq2pd

NN_vcvtdq2ps = _ida_domain.NN_vcvtdq2ps

NN_vcvtpd2dq = _ida_domain.NN_vcvtpd2dq

NN_vcvtpd2ps = _ida_domain.NN_vcvtpd2ps

NN_vcvtph2ps = _ida_domain.NN_vcvtph2ps

NN_vcvtps2dq = _ida_domain.NN_vcvtps2dq

NN_vcvtps2pd = _ida_domain.NN_vcvtps2pd

NN_vcvtps2ph = _ida_domain.NN_vcvtps2ph

NN_vcvtsd2si = _ida_domain.NN_vcvtsd2si

NN_vcvtsd2ss = _ida_domain.NN_vcvtsd2ss

NN_vcvtsi2sd = _ida_domain.NN_vcvtsi2sd

NN_vcvtsi2ss = _ida_domain.NN_vcvtsi2ss

NN_vcvtss2sd = _ida_domain.NN_vcvtss2sd

NN_vcvtss2si = _ida_domain.NN_vcvtss2si

NN_vcvttpd2dq = _ida_domain.NN_vcvttpd2dq

NN_vcvttps2dq = _ida_domain.NN_vcvttps2dq

NN_vcvttsd2si = _ida_domain.NN_vcvttsd2si

NN_vcvttss2si = _ida_domain.NN_vcvttss2si

NN_vdivpd = _ida_domain.NN_vdivpd

NN_vdivps = _ida_domain.NN_vdivps

NN_vdivsd = _ida_domain.NN_vdivsd

NN_vdivss = _ida_domain.NN_vdivss

NN_vdppd = _ida_domain.NN_vdppd

NN_vdpps = _ida_domain.NN_vdpps

NN_vextractf128 = _ida_domain.NN_vextractf128

NN_vextracti128 = _ida_domain.NN_vextracti128

NN_vextractps = _ida_domain.NN_vextractps

NN_vfmadd132pd = _ida_domain.NN_vfmadd132pd

NN_vfmadd132ps = _ida_domain.NN_vfmadd132ps

NN_vfmadd132sd = _ida_domain.NN_vfmadd132sd

NN_vfmadd132ss = _ida_domain.NN_vfmadd132ss

NN_vfmadd213pd = _ida_domain.NN_vfmadd213pd

NN_vfmadd213ps = _ida_domain.NN_vfmadd213ps

NN_vfmadd213sd = _ida_domain.NN_vfmadd213sd

NN_vfmadd213ss = _ida_domain.NN_vfmadd213ss

NN_vfmadd231pd = _ida_domain.NN_vfmadd231pd

NN_vfmadd231ps = _ida_domain.NN_vfmadd231ps

NN_vfmadd231sd = _ida_domain.NN_vfmadd231sd

NN_vfmadd231ss = _ida_domain.NN_vfmadd231ss

NN_vfmaddsub132pd = _ida_domain.NN_vfmaddsub132pd

NN_vfmaddsub132ps = _ida_domain.NN_vfmaddsub132ps

NN_vfmaddsub213pd = _ida_domain.NN_vfmaddsub213pd

NN_vfmaddsub213ps = _ida_domain.NN_vfmaddsub213ps

NN_vfmaddsub231pd = _ida_domain.NN_vfmaddsub231pd

NN_vfmaddsub231ps = _ida_domain.NN_vfmaddsub231ps

NN_vfmsub132pd = _ida_domain.NN_vfmsub132pd

NN_vfmsub132ps = _ida_domain.NN_vfmsub132ps

NN_vfmsub132sd = _ida_domain.NN_vfmsub132sd

NN_vfmsub132ss = _ida_domain.NN_vfmsub132ss

NN_vfmsub213pd = _ida_domain.NN_vfmsub213pd

NN_vfmsub213ps = _ida_domain.NN_vfmsub213ps

NN_vfmsub213sd = _ida_domain.NN_vfmsub213sd

NN_vfmsub213ss = _ida_domain.NN_vfmsub213ss

NN_vfmsub231pd = _ida_domain.NN_vfmsub231pd

NN_vfmsub231ps = _ida_domain.NN_vfmsub231ps

NN_vfmsub231sd = _ida_domain.NN_vfmsub231sd

NN_vfmsub231ss = _ida_domain.NN_vfmsub231ss

NN_vfmsubadd132pd = _ida_domain.NN_vfmsubadd132pd

NN_vfmsubadd132ps = _ida_domain.NN_vfmsubadd132ps

NN_vfmsubadd213pd = _ida_domain.NN_vfmsubadd213pd

NN_vfmsubadd213ps = _ida_domain.NN_vfmsubadd213ps

NN_vfmsubadd231pd = _ida_domain.NN_vfmsubadd231pd

NN_vfmsubadd231ps = _ida_domain.NN_vfmsubadd231ps

NN_vfnmadd132pd = _ida_domain.NN_vfnmadd132pd

NN_vfnmadd132ps = _ida_domain.NN_vfnmadd132ps

NN_vfnmadd132sd = _ida_domain.NN_vfnmadd132sd

NN_vfnmadd132ss = _ida_domain.NN_vfnmadd132ss

NN_vfnmadd213pd = _ida_domain.NN_vfnmadd213pd

NN_vfnmadd213ps = _ida_domain.NN_vfnmadd213ps

NN_vfnmadd213sd = _ida_domain.NN_vfnmadd213sd

NN_vfnmadd213ss = _ida_domain.NN_vfnmadd213ss

NN_vfnmadd231pd = _ida_domain.NN_vfnmadd231pd

NN_vfnmadd231ps = _ida_domain.NN_vfnmadd231ps

NN_vfnmadd231sd = _ida_domain.NN_vfnmadd231sd

NN_vfnmadd231ss = _ida_domain.NN_vfnmadd231ss

NN_vfnmsub132pd = _ida_domain.NN_vfnmsub132pd

NN_vfnmsub132ps = _ida_domain.NN_vfnmsub132ps

NN_vfnmsub132sd = _ida_domain.NN_vfnmsub132sd

NN_vfnmsub132ss = _ida_domain.NN_vfnmsub132ss

NN_vfnmsub213pd = _ida_domain.NN_vfnmsub213pd

NN_vfnmsub213ps = _ida_domain.NN_vfnmsub213ps

NN_vfnmsub213sd = _ida_domain.NN_vfnmsub213sd

NN_vfnmsub213ss = _ida_domain.NN_vfnmsub213ss

NN_vfnmsub231pd = _ida_domain.NN_vfnmsub231pd

NN_vfnmsub231ps = _ida_domain.NN_vfnmsub231ps

NN_vfnmsub231sd = _ida_domain.NN_vfnmsub231sd

NN_vfnmsub231ss = _ida_domain.NN_vfnmsub231ss

NN_vgatherdps = _ida_domain.NN_vgatherdps

NN_vgatherdpd = _ida_domain.NN_vgatherdpd

NN_vgatherqps = _ida_domain.NN_vgatherqps

NN_vgatherqpd = _ida_domain.NN_vgatherqpd

NN_vhaddpd = _ida_domain.NN_vhaddpd

NN_vhaddps = _ida_domain.NN_vhaddps

NN_vhsubpd = _ida_domain.NN_vhsubpd

NN_vhsubps = _ida_domain.NN_vhsubps

NN_vinsertf128 = _ida_domain.NN_vinsertf128

NN_vinserti128 = _ida_domain.NN_vinserti128

NN_vinsertps = _ida_domain.NN_vinsertps

NN_vlddqu = _ida_domain.NN_vlddqu

NN_vldmxcsr = _ida_domain.NN_vldmxcsr

NN_vmaskmovdqu = _ida_domain.NN_vmaskmovdqu

NN_vmaskmovpd = _ida_domain.NN_vmaskmovpd

NN_vmaskmovps = _ida_domain.NN_vmaskmovps

NN_vmaxpd = _ida_domain.NN_vmaxpd

NN_vmaxps = _ida_domain.NN_vmaxps

NN_vmaxsd = _ida_domain.NN_vmaxsd

NN_vmaxss = _ida_domain.NN_vmaxss

NN_vminpd = _ida_domain.NN_vminpd

NN_vminps = _ida_domain.NN_vminps

NN_vminsd = _ida_domain.NN_vminsd

NN_vminss = _ida_domain.NN_vminss

NN_vmovapd = _ida_domain.NN_vmovapd

NN_vmovaps = _ida_domain.NN_vmovaps

NN_vmovd = _ida_domain.NN_vmovd

NN_vmovddup = _ida_domain.NN_vmovddup

NN_vmovdqa = _ida_domain.NN_vmovdqa

NN_vmovdqu = _ida_domain.NN_vmovdqu

NN_vmovhlps = _ida_domain.NN_vmovhlps

NN_vmovhpd = _ida_domain.NN_vmovhpd

NN_vmovhps = _ida_domain.NN_vmovhps

NN_vmovlhps = _ida_domain.NN_vmovlhps

NN_vmovlpd = _ida_domain.NN_vmovlpd

NN_vmovlps = _ida_domain.NN_vmovlps

NN_vmovmskpd = _ida_domain.NN_vmovmskpd

NN_vmovmskps = _ida_domain.NN_vmovmskps

NN_vmovntdq = _ida_domain.NN_vmovntdq

NN_vmovntdqa = _ida_domain.NN_vmovntdqa

NN_vmovntpd = _ida_domain.NN_vmovntpd

NN_vmovntps = _ida_domain.NN_vmovntps

NN_vmovq = _ida_domain.NN_vmovq

NN_vmovsd = _ida_domain.NN_vmovsd

NN_vmovshdup = _ida_domain.NN_vmovshdup

NN_vmovsldup = _ida_domain.NN_vmovsldup

NN_vmovss = _ida_domain.NN_vmovss

NN_vmovupd = _ida_domain.NN_vmovupd

NN_vmovups = _ida_domain.NN_vmovups

NN_vmpsadbw = _ida_domain.NN_vmpsadbw

NN_vmulpd = _ida_domain.NN_vmulpd

NN_vmulps = _ida_domain.NN_vmulps

NN_vmulsd = _ida_domain.NN_vmulsd

NN_vmulss = _ida_domain.NN_vmulss

NN_vorpd = _ida_domain.NN_vorpd

NN_vorps = _ida_domain.NN_vorps

NN_vpabsb = _ida_domain.NN_vpabsb

NN_vpabsd = _ida_domain.NN_vpabsd

NN_vpabsw = _ida_domain.NN_vpabsw

NN_vpackssdw = _ida_domain.NN_vpackssdw

NN_vpacksswb = _ida_domain.NN_vpacksswb

NN_vpackusdw = _ida_domain.NN_vpackusdw

NN_vpackuswb = _ida_domain.NN_vpackuswb

NN_vpaddb = _ida_domain.NN_vpaddb

NN_vpaddd = _ida_domain.NN_vpaddd

NN_vpaddq = _ida_domain.NN_vpaddq

NN_vpaddsb = _ida_domain.NN_vpaddsb

NN_vpaddsw = _ida_domain.NN_vpaddsw

NN_vpaddusb = _ida_domain.NN_vpaddusb

NN_vpaddusw = _ida_domain.NN_vpaddusw

NN_vpaddw = _ida_domain.NN_vpaddw

NN_vpalignr = _ida_domain.NN_vpalignr

NN_vpand = _ida_domain.NN_vpand

NN_vpandn = _ida_domain.NN_vpandn

NN_vpavgb = _ida_domain.NN_vpavgb

NN_vpavgw = _ida_domain.NN_vpavgw

NN_vpblendd = _ida_domain.NN_vpblendd

NN_vpblendvb = _ida_domain.NN_vpblendvb

NN_vpblendw = _ida_domain.NN_vpblendw

NN_vpbroadcastb = _ida_domain.NN_vpbroadcastb

NN_vpbroadcastd = _ida_domain.NN_vpbroadcastd

NN_vpbroadcastq = _ida_domain.NN_vpbroadcastq

NN_vpbroadcastw = _ida_domain.NN_vpbroadcastw

NN_vpclmulqdq = _ida_domain.NN_vpclmulqdq

NN_vpcmpeqb = _ida_domain.NN_vpcmpeqb

NN_vpcmpeqd = _ida_domain.NN_vpcmpeqd

NN_vpcmpeqq = _ida_domain.NN_vpcmpeqq

NN_vpcmpeqw = _ida_domain.NN_vpcmpeqw

NN_vpcmpestri = _ida_domain.NN_vpcmpestri

NN_vpcmpestrm = _ida_domain.NN_vpcmpestrm

NN_vpcmpgtb = _ida_domain.NN_vpcmpgtb

NN_vpcmpgtd = _ida_domain.NN_vpcmpgtd

NN_vpcmpgtq = _ida_domain.NN_vpcmpgtq

NN_vpcmpgtw = _ida_domain.NN_vpcmpgtw

NN_vpcmpistri = _ida_domain.NN_vpcmpistri

NN_vpcmpistrm = _ida_domain.NN_vpcmpistrm

NN_vperm2f128 = _ida_domain.NN_vperm2f128

NN_vperm2i128 = _ida_domain.NN_vperm2i128

NN_vpermd = _ida_domain.NN_vpermd

NN_vpermilpd = _ida_domain.NN_vpermilpd

NN_vpermilps = _ida_domain.NN_vpermilps

NN_vpermpd = _ida_domain.NN_vpermpd

NN_vpermps = _ida_domain.NN_vpermps

NN_vpermq = _ida_domain.NN_vpermq

NN_vpextrb = _ida_domain.NN_vpextrb

NN_vpextrd = _ida_domain.NN_vpextrd

NN_vpextrq = _ida_domain.NN_vpextrq

NN_vpextrw = _ida_domain.NN_vpextrw

NN_vpgatherdd = _ida_domain.NN_vpgatherdd

NN_vpgatherdq = _ida_domain.NN_vpgatherdq

NN_vpgatherqd = _ida_domain.NN_vpgatherqd

NN_vpgatherqq = _ida_domain.NN_vpgatherqq

NN_vphaddd = _ida_domain.NN_vphaddd

NN_vphaddsw = _ida_domain.NN_vphaddsw

NN_vphaddw = _ida_domain.NN_vphaddw

NN_vphminposuw = _ida_domain.NN_vphminposuw

NN_vphsubd = _ida_domain.NN_vphsubd

NN_vphsubsw = _ida_domain.NN_vphsubsw

NN_vphsubw = _ida_domain.NN_vphsubw

NN_vpinsrb = _ida_domain.NN_vpinsrb

NN_vpinsrd = _ida_domain.NN_vpinsrd

NN_vpinsrq = _ida_domain.NN_vpinsrq

NN_vpinsrw = _ida_domain.NN_vpinsrw

NN_vpmaddubsw = _ida_domain.NN_vpmaddubsw

NN_vpmaddwd = _ida_domain.NN_vpmaddwd

NN_vpmaskmovd = _ida_domain.NN_vpmaskmovd

NN_vpmaskmovq = _ida_domain.NN_vpmaskmovq

NN_vpmaxsb = _ida_domain.NN_vpmaxsb

NN_vpmaxsd = _ida_domain.NN_vpmaxsd

NN_vpmaxsw = _ida_domain.NN_vpmaxsw

NN_vpmaxub = _ida_domain.NN_vpmaxub

NN_vpmaxud = _ida_domain.NN_vpmaxud

NN_vpmaxuw = _ida_domain.NN_vpmaxuw

NN_vpminsb = _ida_domain.NN_vpminsb

NN_vpminsd = _ida_domain.NN_vpminsd

NN_vpminsw = _ida_domain.NN_vpminsw

NN_vpminub = _ida_domain.NN_vpminub

NN_vpminud = _ida_domain.NN_vpminud

NN_vpminuw = _ida_domain.NN_vpminuw

NN_vpmovmskb = _ida_domain.NN_vpmovmskb

NN_vpmovsxbd = _ida_domain.NN_vpmovsxbd

NN_vpmovsxbq = _ida_domain.NN_vpmovsxbq

NN_vpmovsxbw = _ida_domain.NN_vpmovsxbw

NN_vpmovsxdq = _ida_domain.NN_vpmovsxdq

NN_vpmovsxwd = _ida_domain.NN_vpmovsxwd

NN_vpmovsxwq = _ida_domain.NN_vpmovsxwq

NN_vpmovzxbd = _ida_domain.NN_vpmovzxbd

NN_vpmovzxbq = _ida_domain.NN_vpmovzxbq

NN_vpmovzxbw = _ida_domain.NN_vpmovzxbw

NN_vpmovzxdq = _ida_domain.NN_vpmovzxdq

NN_vpmovzxwd = _ida_domain.NN_vpmovzxwd

NN_vpmovzxwq = _ida_domain.NN_vpmovzxwq

NN_vpmuldq = _ida_domain.NN_vpmuldq

NN_vpmulhrsw = _ida_domain.NN_vpmulhrsw

NN_vpmulhuw = _ida_domain.NN_vpmulhuw

NN_vpmulhw = _ida_domain.NN_vpmulhw

NN_vpmulld = _ida_domain.NN_vpmulld

NN_vpmullw = _ida_domain.NN_vpmullw

NN_vpmuludq = _ida_domain.NN_vpmuludq

NN_vpor = _ida_domain.NN_vpor

NN_vpsadbw = _ida_domain.NN_vpsadbw

NN_vpshufb = _ida_domain.NN_vpshufb

NN_vpshufd = _ida_domain.NN_vpshufd

NN_vpshufhw = _ida_domain.NN_vpshufhw

NN_vpshuflw = _ida_domain.NN_vpshuflw

NN_vpsignb = _ida_domain.NN_vpsignb

NN_vpsignd = _ida_domain.NN_vpsignd

NN_vpsignw = _ida_domain.NN_vpsignw

NN_vpslld = _ida_domain.NN_vpslld

NN_vpslldq = _ida_domain.NN_vpslldq

NN_vpsllq = _ida_domain.NN_vpsllq

NN_vpsllvd = _ida_domain.NN_vpsllvd

NN_vpsllvq = _ida_domain.NN_vpsllvq

NN_vpsllw = _ida_domain.NN_vpsllw

NN_vpsrad = _ida_domain.NN_vpsrad

NN_vpsravd = _ida_domain.NN_vpsravd

NN_vpsraw = _ida_domain.NN_vpsraw

NN_vpsrld = _ida_domain.NN_vpsrld

NN_vpsrldq = _ida_domain.NN_vpsrldq

NN_vpsrlq = _ida_domain.NN_vpsrlq

NN_vpsrlvd = _ida_domain.NN_vpsrlvd

NN_vpsrlvq = _ida_domain.NN_vpsrlvq

NN_vpsrlw = _ida_domain.NN_vpsrlw

NN_vpsubb = _ida_domain.NN_vpsubb

NN_vpsubd = _ida_domain.NN_vpsubd

NN_vpsubq = _ida_domain.NN_vpsubq

NN_vpsubsb = _ida_domain.NN_vpsubsb

NN_vpsubsw = _ida_domain.NN_vpsubsw

NN_vpsubusb = _ida_domain.NN_vpsubusb

NN_vpsubusw = _ida_domain.NN_vpsubusw

NN_vpsubw = _ida_domain.NN_vpsubw

NN_vptest = _ida_domain.NN_vptest

NN_vpunpckhbw = _ida_domain.NN_vpunpckhbw

NN_vpunpckhdq = _ida_domain.NN_vpunpckhdq

NN_vpunpckhqdq = _ida_domain.NN_vpunpckhqdq

NN_vpunpckhwd = _ida_domain.NN_vpunpckhwd

NN_vpunpcklbw = _ida_domain.NN_vpunpcklbw

NN_vpunpckldq = _ida_domain.NN_vpunpckldq

NN_vpunpcklqdq = _ida_domain.NN_vpunpcklqdq

NN_vpunpcklwd = _ida_domain.NN_vpunpcklwd

NN_vpxor = _ida_domain.NN_vpxor

NN_vrcpps = _ida_domain.NN_vrcpps

NN_vrcpss = _ida_domain.NN_vrcpss

NN_vroundpd = _ida_domain.NN_vroundpd

NN_vroundps = _ida_domain.NN_vroundps

NN_vroundsd = _ida_domain.NN_vroundsd

NN_vroundss = _ida_domain.NN_vroundss

NN_vrsqrtps = _ida_domain.NN_vrsqrtps

NN_vrsqrtss = _ida_domain.NN_vrsqrtss

NN_vshufpd = _ida_domain.NN_vshufpd

NN_vshufps = _ida_domain.NN_vshufps

NN_vsqrtpd = _ida_domain.NN_vsqrtpd

NN_vsqrtps = _ida_domain.NN_vsqrtps

NN_vsqrtsd = _ida_domain.NN_vsqrtsd

NN_vsqrtss = _ida_domain.NN_vsqrtss

NN_vstmxcsr = _ida_domain.NN_vstmxcsr

NN_vsubpd = _ida_domain.NN_vsubpd

NN_vsubps = _ida_domain.NN_vsubps

NN_vsubsd = _ida_domain.NN_vsubsd

NN_vsubss = _ida_domain.NN_vsubss

NN_vtestpd = _ida_domain.NN_vtestpd

NN_vtestps = _ida_domain.NN_vtestps

NN_vucomisd = _ida_domain.NN_vucomisd

NN_vucomiss = _ida_domain.NN_vucomiss

NN_vunpckhpd = _ida_domain.NN_vunpckhpd

NN_vunpckhps = _ida_domain.NN_vunpckhps

NN_vunpcklpd = _ida_domain.NN_vunpcklpd

NN_vunpcklps = _ida_domain.NN_vunpcklps

NN_vxorpd = _ida_domain.NN_vxorpd

NN_vxorps = _ida_domain.NN_vxorps

NN_vzeroall = _ida_domain.NN_vzeroall

NN_vzeroupper = _ida_domain.NN_vzeroupper

NN_xabort = _ida_domain.NN_xabort

NN_xbegin = _ida_domain.NN_xbegin

NN_xend = _ida_domain.NN_xend

NN_xtest = _ida_domain.NN_xtest

NN_vmgetinfo = _ida_domain.NN_vmgetinfo

NN_vmsetinfo = _ida_domain.NN_vmsetinfo

NN_vmdxdsbl = _ida_domain.NN_vmdxdsbl

NN_vmdxenbl = _ida_domain.NN_vmdxenbl

NN_vmcpuid = _ida_domain.NN_vmcpuid

NN_vmhlt = _ida_domain.NN_vmhlt

NN_vmsplaf = _ida_domain.NN_vmsplaf

NN_vmpushfd = _ida_domain.NN_vmpushfd

NN_vmpopfd = _ida_domain.NN_vmpopfd

NN_vmcli = _ida_domain.NN_vmcli

NN_vmsti = _ida_domain.NN_vmsti

NN_vmiretd = _ida_domain.NN_vmiretd

NN_vmsgdt = _ida_domain.NN_vmsgdt

NN_vmsidt = _ida_domain.NN_vmsidt

NN_vmsldt = _ida_domain.NN_vmsldt

NN_vmstr = _ida_domain.NN_vmstr

NN_vmsdte = _ida_domain.NN_vmsdte

NN_vpcext = _ida_domain.NN_vpcext

NN_vfmaddsubps = _ida_domain.NN_vfmaddsubps

NN_vfmaddsubpd = _ida_domain.NN_vfmaddsubpd

NN_vfmsubaddps = _ida_domain.NN_vfmsubaddps

NN_vfmsubaddpd = _ida_domain.NN_vfmsubaddpd

NN_vfmaddps = _ida_domain.NN_vfmaddps

NN_vfmaddpd = _ida_domain.NN_vfmaddpd

NN_vfmaddss = _ida_domain.NN_vfmaddss

NN_vfmaddsd = _ida_domain.NN_vfmaddsd

NN_vfmsubps = _ida_domain.NN_vfmsubps

NN_vfmsubpd = _ida_domain.NN_vfmsubpd

NN_vfmsubss = _ida_domain.NN_vfmsubss

NN_vfmsubsd = _ida_domain.NN_vfmsubsd

NN_vfnmaddps = _ida_domain.NN_vfnmaddps

NN_vfnmaddpd = _ida_domain.NN_vfnmaddpd

NN_vfnmaddss = _ida_domain.NN_vfnmaddss

NN_vfnmaddsd = _ida_domain.NN_vfnmaddsd

NN_vfnmsubps = _ida_domain.NN_vfnmsubps

NN_vfnmsubpd = _ida_domain.NN_vfnmsubpd

NN_vfnmsubss = _ida_domain.NN_vfnmsubss

NN_vfnmsubsd = _ida_domain.NN_vfnmsubsd

NN_bndmk = _ida_domain.NN_bndmk

NN_bndcl = _ida_domain.NN_bndcl

NN_bndcu = _ida_domain.NN_bndcu

NN_bndcn = _ida_domain.NN_bndcn

NN_bndmov = _ida_domain.NN_bndmov

NN_bndldx = _ida_domain.NN_bndldx

NN_bndstx = _ida_domain.NN_bndstx

NN_xrstors = _ida_domain.NN_xrstors

NN_xsavec = _ida_domain.NN_xsavec

NN_xsaves = _ida_domain.NN_xsaves

NN_prefetchwt1 = _ida_domain.NN_prefetchwt1

NN_clflushopt = _ida_domain.NN_clflushopt

NN_clwb = _ida_domain.NN_clwb

NN_pcommit = _ida_domain.NN_pcommit

NN_rdpkru = _ida_domain.NN_rdpkru

NN_wrpkru = _ida_domain.NN_wrpkru

NN_vcmpeqpd = _ida_domain.NN_vcmpeqpd

NN_vcmpltpd = _ida_domain.NN_vcmpltpd

NN_vcmplepd = _ida_domain.NN_vcmplepd

NN_vcmpunordpd = _ida_domain.NN_vcmpunordpd

NN_vcmpneqpd = _ida_domain.NN_vcmpneqpd

NN_vcmpnltpd = _ida_domain.NN_vcmpnltpd

NN_vcmpnlepd = _ida_domain.NN_vcmpnlepd

NN_vcmpordpd = _ida_domain.NN_vcmpordpd

NN_vcmpeq_uqpd = _ida_domain.NN_vcmpeq_uqpd

NN_vcmpngepd = _ida_domain.NN_vcmpngepd

NN_vcmpngtpd = _ida_domain.NN_vcmpngtpd

NN_vcmpfalsepd = _ida_domain.NN_vcmpfalsepd

NN_vcmpneq_oqpd = _ida_domain.NN_vcmpneq_oqpd

NN_vcmpgepd = _ida_domain.NN_vcmpgepd

NN_vcmpgtpd = _ida_domain.NN_vcmpgtpd

NN_vcmptruepd = _ida_domain.NN_vcmptruepd

NN_vcmpeq_ospd = _ida_domain.NN_vcmpeq_ospd

NN_vcmplt_oqpd = _ida_domain.NN_vcmplt_oqpd

NN_vcmple_oqpd = _ida_domain.NN_vcmple_oqpd

NN_vcmpunord_spd = _ida_domain.NN_vcmpunord_spd

NN_vcmpneq_uspd = _ida_domain.NN_vcmpneq_uspd

NN_vcmpnlt_uqpd = _ida_domain.NN_vcmpnlt_uqpd

NN_vcmpnle_uqpd = _ida_domain.NN_vcmpnle_uqpd

NN_vcmpord_spd = _ida_domain.NN_vcmpord_spd

NN_vcmpeq_uspd = _ida_domain.NN_vcmpeq_uspd

NN_vcmpnge_uqpd = _ida_domain.NN_vcmpnge_uqpd

NN_vcmpngt_uqpd = _ida_domain.NN_vcmpngt_uqpd

NN_vcmpfalse_ospd = _ida_domain.NN_vcmpfalse_ospd

NN_vcmpneq_ospd = _ida_domain.NN_vcmpneq_ospd

NN_vcmpge_oqpd = _ida_domain.NN_vcmpge_oqpd

NN_vcmpgt_oqpd = _ida_domain.NN_vcmpgt_oqpd

NN_vcmptrue_uspd = _ida_domain.NN_vcmptrue_uspd

NN_vcmpeqps = _ida_domain.NN_vcmpeqps

NN_vcmpltps = _ida_domain.NN_vcmpltps

NN_vcmpleps = _ida_domain.NN_vcmpleps

NN_vcmpunordps = _ida_domain.NN_vcmpunordps

NN_vcmpneqps = _ida_domain.NN_vcmpneqps

NN_vcmpnltps = _ida_domain.NN_vcmpnltps

NN_vcmpnleps = _ida_domain.NN_vcmpnleps

NN_vcmpordps = _ida_domain.NN_vcmpordps

NN_vcmpeq_uqps = _ida_domain.NN_vcmpeq_uqps

NN_vcmpngeps = _ida_domain.NN_vcmpngeps

NN_vcmpngtps = _ida_domain.NN_vcmpngtps

NN_vcmpfalseps = _ida_domain.NN_vcmpfalseps

NN_vcmpneq_oqps = _ida_domain.NN_vcmpneq_oqps

NN_vcmpgeps = _ida_domain.NN_vcmpgeps

NN_vcmpgtps = _ida_domain.NN_vcmpgtps

NN_vcmptrueps = _ida_domain.NN_vcmptrueps

NN_vcmpeq_osps = _ida_domain.NN_vcmpeq_osps

NN_vcmplt_oqps = _ida_domain.NN_vcmplt_oqps

NN_vcmple_oqps = _ida_domain.NN_vcmple_oqps

NN_vcmpunord_sps = _ida_domain.NN_vcmpunord_sps

NN_vcmpneq_usps = _ida_domain.NN_vcmpneq_usps

NN_vcmpnlt_uqps = _ida_domain.NN_vcmpnlt_uqps

NN_vcmpnle_uqps = _ida_domain.NN_vcmpnle_uqps

NN_vcmpord_sps = _ida_domain.NN_vcmpord_sps

NN_vcmpeq_usps = _ida_domain.NN_vcmpeq_usps

NN_vcmpnge_uqps = _ida_domain.NN_vcmpnge_uqps

NN_vcmpngt_uqps = _ida_domain.NN_vcmpngt_uqps

NN_vcmpfalse_osps = _ida_domain.NN_vcmpfalse_osps

NN_vcmpneq_osps = _ida_domain.NN_vcmpneq_osps

NN_vcmpge_oqps = _ida_domain.NN_vcmpge_oqps

NN_vcmpgt_oqps = _ida_domain.NN_vcmpgt_oqps

NN_vcmptrue_usps = _ida_domain.NN_vcmptrue_usps

NN_vcmpeqsd = _ida_domain.NN_vcmpeqsd

NN_vcmpltsd = _ida_domain.NN_vcmpltsd

NN_vcmplesd = _ida_domain.NN_vcmplesd

NN_vcmpunordsd = _ida_domain.NN_vcmpunordsd

NN_vcmpneqsd = _ida_domain.NN_vcmpneqsd

NN_vcmpnltsd = _ida_domain.NN_vcmpnltsd

NN_vcmpnlesd = _ida_domain.NN_vcmpnlesd

NN_vcmpordsd = _ida_domain.NN_vcmpordsd

NN_vcmpeq_uqsd = _ida_domain.NN_vcmpeq_uqsd

NN_vcmpngesd = _ida_domain.NN_vcmpngesd

NN_vcmpngtsd = _ida_domain.NN_vcmpngtsd

NN_vcmpfalsesd = _ida_domain.NN_vcmpfalsesd

NN_vcmpneq_oqsd = _ida_domain.NN_vcmpneq_oqsd

NN_vcmpgesd = _ida_domain.NN_vcmpgesd

NN_vcmpgtsd = _ida_domain.NN_vcmpgtsd

NN_vcmptruesd = _ida_domain.NN_vcmptruesd

NN_vcmpeq_ossd = _ida_domain.NN_vcmpeq_ossd

NN_vcmplt_oqsd = _ida_domain.NN_vcmplt_oqsd

NN_vcmple_oqsd = _ida_domain.NN_vcmple_oqsd

NN_vcmpunord_ssd = _ida_domain.NN_vcmpunord_ssd

NN_vcmpneq_ussd = _ida_domain.NN_vcmpneq_ussd

NN_vcmpnlt_uqsd = _ida_domain.NN_vcmpnlt_uqsd

NN_vcmpnle_uqsd = _ida_domain.NN_vcmpnle_uqsd

NN_vcmpord_ssd = _ida_domain.NN_vcmpord_ssd

NN_vcmpeq_ussd = _ida_domain.NN_vcmpeq_ussd

NN_vcmpnge_uqsd = _ida_domain.NN_vcmpnge_uqsd

NN_vcmpngt_uqsd = _ida_domain.NN_vcmpngt_uqsd

NN_vcmpfalse_ossd = _ida_domain.NN_vcmpfalse_ossd

NN_vcmpneq_ossd = _ida_domain.NN_vcmpneq_ossd

NN_vcmpge_oqsd = _ida_domain.NN_vcmpge_oqsd

NN_vcmpgt_oqsd = _ida_domain.NN_vcmpgt_oqsd

NN_vcmptrue_ussd = _ida_domain.NN_vcmptrue_ussd

NN_vcmpeqss = _ida_domain.NN_vcmpeqss

NN_vcmpltss = _ida_domain.NN_vcmpltss

NN_vcmpless = _ida_domain.NN_vcmpless

NN_vcmpunordss = _ida_domain.NN_vcmpunordss

NN_vcmpneqss = _ida_domain.NN_vcmpneqss

NN_vcmpnltss = _ida_domain.NN_vcmpnltss

NN_vcmpnless = _ida_domain.NN_vcmpnless

NN_vcmpordss = _ida_domain.NN_vcmpordss

NN_vcmpeq_uqss = _ida_domain.NN_vcmpeq_uqss

NN_vcmpngess = _ida_domain.NN_vcmpngess

NN_vcmpngtss = _ida_domain.NN_vcmpngtss

NN_vcmpfalsess = _ida_domain.NN_vcmpfalsess

NN_vcmpneq_oqss = _ida_domain.NN_vcmpneq_oqss

NN_vcmpgess = _ida_domain.NN_vcmpgess

NN_vcmpgtss = _ida_domain.NN_vcmpgtss

NN_vcmptruess = _ida_domain.NN_vcmptruess

NN_vcmpeq_osss = _ida_domain.NN_vcmpeq_osss

NN_vcmplt_oqss = _ida_domain.NN_vcmplt_oqss

NN_vcmple_oqss = _ida_domain.NN_vcmple_oqss

NN_vcmpunord_sss = _ida_domain.NN_vcmpunord_sss

NN_vcmpneq_usss = _ida_domain.NN_vcmpneq_usss

NN_vcmpnlt_uqss = _ida_domain.NN_vcmpnlt_uqss

NN_vcmpnle_uqss = _ida_domain.NN_vcmpnle_uqss

NN_vcmpord_sss = _ida_domain.NN_vcmpord_sss

NN_vcmpeq_usss = _ida_domain.NN_vcmpeq_usss

NN_vcmpnge_uqss = _ida_domain.NN_vcmpnge_uqss

NN_vcmpngt_uqss = _ida_domain.NN_vcmpngt_uqss

NN_vcmpfalse_osss = _ida_domain.NN_vcmpfalse_osss

NN_vcmpneq_osss = _ida_domain.NN_vcmpneq_osss

NN_vcmpge_oqss = _ida_domain.NN_vcmpge_oqss

NN_vcmpgt_oqss = _ida_domain.NN_vcmpgt_oqss

NN_vcmptrue_usss = _ida_domain.NN_vcmptrue_usss

NN_valignd = _ida_domain.NN_valignd

NN_valignq = _ida_domain.NN_valignq

NN_vblendmpd = _ida_domain.NN_vblendmpd

NN_vblendmps = _ida_domain.NN_vblendmps

NN_vpblendmb = _ida_domain.NN_vpblendmb

NN_vpblendmw = _ida_domain.NN_vpblendmw

NN_vpblendmd = _ida_domain.NN_vpblendmd

NN_vpblendmq = _ida_domain.NN_vpblendmq

NN_vbroadcastf32x2 = _ida_domain.NN_vbroadcastf32x2

NN_vbroadcastf32x4 = _ida_domain.NN_vbroadcastf32x4

NN_vbroadcastf64x2 = _ida_domain.NN_vbroadcastf64x2

NN_vbroadcastf32x8 = _ida_domain.NN_vbroadcastf32x8

NN_vbroadcastf64x4 = _ida_domain.NN_vbroadcastf64x4

NN_vbroadcasti32x2 = _ida_domain.NN_vbroadcasti32x2

NN_vbroadcasti32x4 = _ida_domain.NN_vbroadcasti32x4

NN_vbroadcasti64x2 = _ida_domain.NN_vbroadcasti64x2

NN_vbroadcasti32x8 = _ida_domain.NN_vbroadcasti32x8

NN_vbroadcasti64x4 = _ida_domain.NN_vbroadcasti64x4

NN_vcompresspd = _ida_domain.NN_vcompresspd

NN_vcompressps = _ida_domain.NN_vcompressps

NN_vcvtpd2qq = _ida_domain.NN_vcvtpd2qq

NN_vcvtpd2udq = _ida_domain.NN_vcvtpd2udq

NN_vcvtpd2uqq = _ida_domain.NN_vcvtpd2uqq

NN_vcvtps2udq = _ida_domain.NN_vcvtps2udq

NN_vcvtps2qq = _ida_domain.NN_vcvtps2qq

NN_vcvtps2uqq = _ida_domain.NN_vcvtps2uqq

NN_vcvtqq2pd = _ida_domain.NN_vcvtqq2pd

NN_vcvtqq2ps = _ida_domain.NN_vcvtqq2ps

NN_vcvtsd2usi = _ida_domain.NN_vcvtsd2usi

NN_vcvtss2usi = _ida_domain.NN_vcvtss2usi

NN_vcvttpd2qq = _ida_domain.NN_vcvttpd2qq

NN_vcvttpd2udq = _ida_domain.NN_vcvttpd2udq

NN_vcvttpd2uqq = _ida_domain.NN_vcvttpd2uqq

NN_vcvttps2udq = _ida_domain.NN_vcvttps2udq

NN_vcvttps2qq = _ida_domain.NN_vcvttps2qq

NN_vcvttps2uqq = _ida_domain.NN_vcvttps2uqq

NN_vcvttsd2usi = _ida_domain.NN_vcvttsd2usi

NN_vcvttss2usi = _ida_domain.NN_vcvttss2usi

NN_vcvtudq2pd = _ida_domain.NN_vcvtudq2pd

NN_vcvtudq2ps = _ida_domain.NN_vcvtudq2ps

NN_vcvtuqq2pd = _ida_domain.NN_vcvtuqq2pd

NN_vcvtuqq2ps = _ida_domain.NN_vcvtuqq2ps

NN_vcvtusi2sd = _ida_domain.NN_vcvtusi2sd

NN_vcvtusi2ss = _ida_domain.NN_vcvtusi2ss

NN_vdbpsadbw = _ida_domain.NN_vdbpsadbw

NN_vexpandpd = _ida_domain.NN_vexpandpd

NN_vexpandps = _ida_domain.NN_vexpandps

NN_vextractf32x4 = _ida_domain.NN_vextractf32x4

NN_vextractf64x2 = _ida_domain.NN_vextractf64x2

NN_vextractf32x8 = _ida_domain.NN_vextractf32x8

NN_vextractf64x4 = _ida_domain.NN_vextractf64x4

NN_vextracti32x4 = _ida_domain.NN_vextracti32x4

NN_vextracti64x2 = _ida_domain.NN_vextracti64x2

NN_vextracti32x8 = _ida_domain.NN_vextracti32x8

NN_vextracti64x4 = _ida_domain.NN_vextracti64x4

NN_vfixupimmpd = _ida_domain.NN_vfixupimmpd

NN_vfixupimmps = _ida_domain.NN_vfixupimmps

NN_vfixupimmsd = _ida_domain.NN_vfixupimmsd

NN_vfixupimmss = _ida_domain.NN_vfixupimmss

NN_vfpclasspd = _ida_domain.NN_vfpclasspd

NN_vfpclassps = _ida_domain.NN_vfpclassps

NN_vfpclasssd = _ida_domain.NN_vfpclasssd

NN_vfpclassss = _ida_domain.NN_vfpclassss

NN_vgetexppd = _ida_domain.NN_vgetexppd

NN_vgetexpps = _ida_domain.NN_vgetexpps

NN_vgetexpsd = _ida_domain.NN_vgetexpsd

NN_vgetexpss = _ida_domain.NN_vgetexpss

NN_vgetmantpd = _ida_domain.NN_vgetmantpd

NN_vgetmantps = _ida_domain.NN_vgetmantps

NN_vgetmantsd = _ida_domain.NN_vgetmantsd

NN_vgetmantss = _ida_domain.NN_vgetmantss

NN_vinsertf32x4 = _ida_domain.NN_vinsertf32x4

NN_vinsertf64x2 = _ida_domain.NN_vinsertf64x2

NN_vinsertf32x8 = _ida_domain.NN_vinsertf32x8

NN_vinsertf64x4 = _ida_domain.NN_vinsertf64x4

NN_vinserti32x4 = _ida_domain.NN_vinserti32x4

NN_vinserti64x2 = _ida_domain.NN_vinserti64x2

NN_vinserti32x8 = _ida_domain.NN_vinserti32x8

NN_vinserti64x4 = _ida_domain.NN_vinserti64x4

NN_vmovdqa32 = _ida_domain.NN_vmovdqa32

NN_vmovdqa64 = _ida_domain.NN_vmovdqa64

NN_vmovdqu8 = _ida_domain.NN_vmovdqu8

NN_vmovdqu16 = _ida_domain.NN_vmovdqu16

NN_vmovdqu32 = _ida_domain.NN_vmovdqu32

NN_vmovdqu64 = _ida_domain.NN_vmovdqu64

NN_vpabsq = _ida_domain.NN_vpabsq

NN_vpandd = _ida_domain.NN_vpandd

NN_vpandq = _ida_domain.NN_vpandq

NN_vpandnd = _ida_domain.NN_vpandnd

NN_vpandnq = _ida_domain.NN_vpandnq

NN_vpbroadcastmb2q = _ida_domain.NN_vpbroadcastmb2q

NN_vpbroadcastmw2d = _ida_domain.NN_vpbroadcastmw2d

NN_vpcmpb = _ida_domain.NN_vpcmpb

NN_vpcmpub = _ida_domain.NN_vpcmpub

NN_vpcmpd = _ida_domain.NN_vpcmpd

NN_vpcmpud = _ida_domain.NN_vpcmpud

NN_vpcmpq = _ida_domain.NN_vpcmpq

NN_vpcmpuq = _ida_domain.NN_vpcmpuq

NN_vpcmpw = _ida_domain.NN_vpcmpw

NN_vpcmpuw = _ida_domain.NN_vpcmpuw

NN_vpcompressd = _ida_domain.NN_vpcompressd

NN_vpcompressq = _ida_domain.NN_vpcompressq

NN_vpconflictd = _ida_domain.NN_vpconflictd

NN_vpconflictq = _ida_domain.NN_vpconflictq

NN_vpermb = _ida_domain.NN_vpermb

NN_vpermw = _ida_domain.NN_vpermw

NN_vpermi2b = _ida_domain.NN_vpermi2b

NN_vpermi2w = _ida_domain.NN_vpermi2w

NN_vpermi2d = _ida_domain.NN_vpermi2d

NN_vpermi2q = _ida_domain.NN_vpermi2q

NN_vpermi2ps = _ida_domain.NN_vpermi2ps

NN_vpermi2pd = _ida_domain.NN_vpermi2pd

NN_vpermt2b = _ida_domain.NN_vpermt2b

NN_vpermt2w = _ida_domain.NN_vpermt2w

NN_vpermt2d = _ida_domain.NN_vpermt2d

NN_vpermt2q = _ida_domain.NN_vpermt2q

NN_vpermt2ps = _ida_domain.NN_vpermt2ps

NN_vpermt2pd = _ida_domain.NN_vpermt2pd

NN_vpexpandd = _ida_domain.NN_vpexpandd

NN_vpexpandq = _ida_domain.NN_vpexpandq

NN_vplzcntd = _ida_domain.NN_vplzcntd

NN_vplzcntq = _ida_domain.NN_vplzcntq

NN_vpmadd52luq = _ida_domain.NN_vpmadd52luq

NN_vpmadd52huq = _ida_domain.NN_vpmadd52huq

NN_vpmaxsq = _ida_domain.NN_vpmaxsq

NN_vpmaxuq = _ida_domain.NN_vpmaxuq

NN_vpminsq = _ida_domain.NN_vpminsq

NN_vpminuq = _ida_domain.NN_vpminuq

NN_vpmovm2b = _ida_domain.NN_vpmovm2b

NN_vpmovm2w = _ida_domain.NN_vpmovm2w

NN_vpmovm2d = _ida_domain.NN_vpmovm2d

NN_vpmovm2q = _ida_domain.NN_vpmovm2q

NN_vpmovb2m = _ida_domain.NN_vpmovb2m

NN_vpmovw2m = _ida_domain.NN_vpmovw2m

NN_vpmovd2m = _ida_domain.NN_vpmovd2m

NN_vpmovq2m = _ida_domain.NN_vpmovq2m

NN_vpmovqb = _ida_domain.NN_vpmovqb

NN_vpmovsqb = _ida_domain.NN_vpmovsqb

NN_vpmovusqb = _ida_domain.NN_vpmovusqb

NN_vpmovqw = _ida_domain.NN_vpmovqw

NN_vpmovsqw = _ida_domain.NN_vpmovsqw

NN_vpmovusqw = _ida_domain.NN_vpmovusqw

NN_vpmovqd = _ida_domain.NN_vpmovqd

NN_vpmovsqd = _ida_domain.NN_vpmovsqd

NN_vpmovusqd = _ida_domain.NN_vpmovusqd

NN_vpmovdb = _ida_domain.NN_vpmovdb

NN_vpmovsdb = _ida_domain.NN_vpmovsdb

NN_vpmovusdb = _ida_domain.NN_vpmovusdb

NN_vpmovdw = _ida_domain.NN_vpmovdw

NN_vpmovsdw = _ida_domain.NN_vpmovsdw

NN_vpmovusdw = _ida_domain.NN_vpmovusdw

NN_vpmovwb = _ida_domain.NN_vpmovwb

NN_vpmovswb = _ida_domain.NN_vpmovswb

NN_vpmovuswb = _ida_domain.NN_vpmovuswb

NN_vpmullq = _ida_domain.NN_vpmullq

NN_vpmultishiftqb = _ida_domain.NN_vpmultishiftqb

NN_vpord = _ida_domain.NN_vpord

NN_vporq = _ida_domain.NN_vporq

NN_vprold = _ida_domain.NN_vprold

NN_vprolvd = _ida_domain.NN_vprolvd

NN_vprolq = _ida_domain.NN_vprolq

NN_vprolvq = _ida_domain.NN_vprolvq

NN_vprord = _ida_domain.NN_vprord

NN_vprorvd = _ida_domain.NN_vprorvd

NN_vprorq = _ida_domain.NN_vprorq

NN_vprorvq = _ida_domain.NN_vprorvq

NN_vpscatterdd = _ida_domain.NN_vpscatterdd

NN_vpscatterdq = _ida_domain.NN_vpscatterdq

NN_vpscatterqd = _ida_domain.NN_vpscatterqd

NN_vpscatterqq = _ida_domain.NN_vpscatterqq

NN_vpsraq = _ida_domain.NN_vpsraq

NN_vpsllvw = _ida_domain.NN_vpsllvw

NN_vpsrlvw = _ida_domain.NN_vpsrlvw

NN_vptestnmb = _ida_domain.NN_vptestnmb

NN_vptestnmw = _ida_domain.NN_vptestnmw

NN_vptestnmd = _ida_domain.NN_vptestnmd

NN_vptestnmq = _ida_domain.NN_vptestnmq

NN_vshuff32x4 = _ida_domain.NN_vshuff32x4

NN_vshuff64x2 = _ida_domain.NN_vshuff64x2

NN_vshufi32x4 = _ida_domain.NN_vshufi32x4

NN_vshufi64x2 = _ida_domain.NN_vshufi64x2

NN_vpternlogd = _ida_domain.NN_vpternlogd

NN_vpternlogq = _ida_domain.NN_vpternlogq

NN_vptestmb = _ida_domain.NN_vptestmb

NN_vptestmw = _ida_domain.NN_vptestmw

NN_vptestmd = _ida_domain.NN_vptestmd

NN_vptestmq = _ida_domain.NN_vptestmq

NN_vpsravw = _ida_domain.NN_vpsravw

NN_vpsravq = _ida_domain.NN_vpsravq

NN_vpxord = _ida_domain.NN_vpxord

NN_vpxorq = _ida_domain.NN_vpxorq

NN_vrangepd = _ida_domain.NN_vrangepd

NN_vrangeps = _ida_domain.NN_vrangeps

NN_vrangesd = _ida_domain.NN_vrangesd

NN_vrangess = _ida_domain.NN_vrangess

NN_vrcp14pd = _ida_domain.NN_vrcp14pd

NN_vrcp14sd = _ida_domain.NN_vrcp14sd

NN_vrcp14ps = _ida_domain.NN_vrcp14ps

NN_vrcp14ss = _ida_domain.NN_vrcp14ss

NN_vreducepd = _ida_domain.NN_vreducepd

NN_vreducesd = _ida_domain.NN_vreducesd

NN_vreduceps = _ida_domain.NN_vreduceps

NN_vreducess = _ida_domain.NN_vreducess

NN_vrndscalepd = _ida_domain.NN_vrndscalepd

NN_vrndscalesd = _ida_domain.NN_vrndscalesd

NN_vrndscaleps = _ida_domain.NN_vrndscaleps

NN_vrndscaless = _ida_domain.NN_vrndscaless

NN_vrsqrt14pd = _ida_domain.NN_vrsqrt14pd

NN_vrsqrt14sd = _ida_domain.NN_vrsqrt14sd

NN_vrsqrt14ps = _ida_domain.NN_vrsqrt14ps

NN_vrsqrt14ss = _ida_domain.NN_vrsqrt14ss

NN_vscalefpd = _ida_domain.NN_vscalefpd

NN_vscalefsd = _ida_domain.NN_vscalefsd

NN_vscalefps = _ida_domain.NN_vscalefps

NN_vscalefss = _ida_domain.NN_vscalefss

NN_vscatterdps = _ida_domain.NN_vscatterdps

NN_vscatterdpd = _ida_domain.NN_vscatterdpd

NN_vscatterqps = _ida_domain.NN_vscatterqps

NN_vscatterqpd = _ida_domain.NN_vscatterqpd

NN_vexp2pd = _ida_domain.NN_vexp2pd

NN_vexp2ps = _ida_domain.NN_vexp2ps

NN_vrcp28pd = _ida_domain.NN_vrcp28pd

NN_vrcp28sd = _ida_domain.NN_vrcp28sd

NN_vrcp28ps = _ida_domain.NN_vrcp28ps

NN_vrcp28ss = _ida_domain.NN_vrcp28ss

NN_vrsqrt28pd = _ida_domain.NN_vrsqrt28pd

NN_vrsqrt28sd = _ida_domain.NN_vrsqrt28sd

NN_vrsqrt28ps = _ida_domain.NN_vrsqrt28ps

NN_vrsqrt28ss = _ida_domain.NN_vrsqrt28ss

NN_vgatherpf0dps = _ida_domain.NN_vgatherpf0dps

NN_vgatherpf0qps = _ida_domain.NN_vgatherpf0qps

NN_vgatherpf0dpd = _ida_domain.NN_vgatherpf0dpd

NN_vgatherpf0qpd = _ida_domain.NN_vgatherpf0qpd

NN_vgatherpf1dps = _ida_domain.NN_vgatherpf1dps

NN_vgatherpf1qps = _ida_domain.NN_vgatherpf1qps

NN_vgatherpf1dpd = _ida_domain.NN_vgatherpf1dpd

NN_vgatherpf1qpd = _ida_domain.NN_vgatherpf1qpd

NN_vscatterpf0dps = _ida_domain.NN_vscatterpf0dps

NN_vscatterpf0qps = _ida_domain.NN_vscatterpf0qps

NN_vscatterpf0dpd = _ida_domain.NN_vscatterpf0dpd

NN_vscatterpf0qpd = _ida_domain.NN_vscatterpf0qpd

NN_vscatterpf1dps = _ida_domain.NN_vscatterpf1dps

NN_vscatterpf1qps = _ida_domain.NN_vscatterpf1qps

NN_vscatterpf1dpd = _ida_domain.NN_vscatterpf1dpd

NN_vscatterpf1qpd = _ida_domain.NN_vscatterpf1qpd

NN_vpcmpltd = _ida_domain.NN_vpcmpltd

NN_vpcmpled = _ida_domain.NN_vpcmpled

NN_vpcmpneqd = _ida_domain.NN_vpcmpneqd

NN_vpcmpnltd = _ida_domain.NN_vpcmpnltd

NN_vpcmpnled = _ida_domain.NN_vpcmpnled

NN_vpcmpequd = _ida_domain.NN_vpcmpequd

NN_vpcmpltud = _ida_domain.NN_vpcmpltud

NN_vpcmpleud = _ida_domain.NN_vpcmpleud

NN_vpcmpnequd = _ida_domain.NN_vpcmpnequd

NN_vpcmpnltud = _ida_domain.NN_vpcmpnltud

NN_vpcmpnleud = _ida_domain.NN_vpcmpnleud

NN_vpcmpltq = _ida_domain.NN_vpcmpltq

NN_vpcmpleq = _ida_domain.NN_vpcmpleq

NN_vpcmpneqq = _ida_domain.NN_vpcmpneqq

NN_vpcmpnltq = _ida_domain.NN_vpcmpnltq

NN_vpcmpnleq = _ida_domain.NN_vpcmpnleq

NN_vpcmpequq = _ida_domain.NN_vpcmpequq

NN_vpcmpltuq = _ida_domain.NN_vpcmpltuq

NN_vpcmpleuq = _ida_domain.NN_vpcmpleuq

NN_vpcmpnequq = _ida_domain.NN_vpcmpnequq

NN_vpcmpnltuq = _ida_domain.NN_vpcmpnltuq

NN_vpcmpnleuq = _ida_domain.NN_vpcmpnleuq

NN_kaddw = _ida_domain.NN_kaddw

NN_kaddb = _ida_domain.NN_kaddb

NN_kaddq = _ida_domain.NN_kaddq

NN_kaddd = _ida_domain.NN_kaddd

NN_kandw = _ida_domain.NN_kandw

NN_kandb = _ida_domain.NN_kandb

NN_kandq = _ida_domain.NN_kandq

NN_kandd = _ida_domain.NN_kandd

NN_kandnw = _ida_domain.NN_kandnw

NN_kandnb = _ida_domain.NN_kandnb

NN_kandnq = _ida_domain.NN_kandnq

NN_kandnd = _ida_domain.NN_kandnd

NN_kmovw = _ida_domain.NN_kmovw

NN_kmovb = _ida_domain.NN_kmovb

NN_kmovq = _ida_domain.NN_kmovq

NN_kmovd = _ida_domain.NN_kmovd

NN_kunpckbw = _ida_domain.NN_kunpckbw

NN_kunpckwd = _ida_domain.NN_kunpckwd

NN_kunpckdq = _ida_domain.NN_kunpckdq

NN_knotw = _ida_domain.NN_knotw

NN_knotb = _ida_domain.NN_knotb

NN_knotq = _ida_domain.NN_knotq

NN_knotd = _ida_domain.NN_knotd

NN_korw = _ida_domain.NN_korw

NN_korb = _ida_domain.NN_korb

NN_korq = _ida_domain.NN_korq

NN_kord = _ida_domain.NN_kord

NN_kortestw = _ida_domain.NN_kortestw

NN_kortestb = _ida_domain.NN_kortestb

NN_kortestq = _ida_domain.NN_kortestq

NN_kortestd = _ida_domain.NN_kortestd

NN_kshiftlw = _ida_domain.NN_kshiftlw

NN_kshiftlb = _ida_domain.NN_kshiftlb

NN_kshiftlq = _ida_domain.NN_kshiftlq

NN_kshiftld = _ida_domain.NN_kshiftld

NN_kshiftrw = _ida_domain.NN_kshiftrw

NN_kshiftrb = _ida_domain.NN_kshiftrb

NN_kshiftrq = _ida_domain.NN_kshiftrq

NN_kshiftrd = _ida_domain.NN_kshiftrd

NN_kxnorw = _ida_domain.NN_kxnorw

NN_kxnorb = _ida_domain.NN_kxnorb

NN_kxnorq = _ida_domain.NN_kxnorq

NN_kxnord = _ida_domain.NN_kxnord

NN_ktestw = _ida_domain.NN_ktestw

NN_ktestb = _ida_domain.NN_ktestb

NN_ktestq = _ida_domain.NN_ktestq

NN_ktestd = _ida_domain.NN_ktestd

NN_kxorw = _ida_domain.NN_kxorw

NN_kxorb = _ida_domain.NN_kxorb

NN_kxorq = _ida_domain.NN_kxorq

NN_kxord = _ida_domain.NN_kxord

NN_sha1rnds4 = _ida_domain.NN_sha1rnds4

NN_sha1nexte = _ida_domain.NN_sha1nexte

NN_sha1msg1 = _ida_domain.NN_sha1msg1

NN_sha1msg2 = _ida_domain.NN_sha1msg2

NN_sha256rnds2 = _ida_domain.NN_sha256rnds2

NN_sha256msg1 = _ida_domain.NN_sha256msg1

NN_sha256msg2 = _ida_domain.NN_sha256msg2

NN_encls = _ida_domain.NN_encls

NN_enclu = _ida_domain.NN_enclu

NN_vfrczpd = _ida_domain.NN_vfrczpd

NN_vfrczps = _ida_domain.NN_vfrczps

NN_vfrczsd = _ida_domain.NN_vfrczsd

NN_vfrczss = _ida_domain.NN_vfrczss

NN_vpcmov = _ida_domain.NN_vpcmov

NN_vpcomb = _ida_domain.NN_vpcomb

NN_vpcomd = _ida_domain.NN_vpcomd

NN_vpcomq = _ida_domain.NN_vpcomq

NN_vpcomub = _ida_domain.NN_vpcomub

NN_vpcomud = _ida_domain.NN_vpcomud

NN_vpcomuq = _ida_domain.NN_vpcomuq

NN_vpcomuw = _ida_domain.NN_vpcomuw

NN_vpcomw = _ida_domain.NN_vpcomw

NN_vpermil2pd = _ida_domain.NN_vpermil2pd

NN_vpermil2ps = _ida_domain.NN_vpermil2ps

NN_vphaddbd = _ida_domain.NN_vphaddbd

NN_vphaddbq = _ida_domain.NN_vphaddbq

NN_vphaddbw = _ida_domain.NN_vphaddbw

NN_vphadddq = _ida_domain.NN_vphadddq

NN_vphaddubd = _ida_domain.NN_vphaddubd

NN_vphaddubq = _ida_domain.NN_vphaddubq

NN_vphaddubw = _ida_domain.NN_vphaddubw

NN_vphaddudq = _ida_domain.NN_vphaddudq

NN_vphadduwd = _ida_domain.NN_vphadduwd

NN_vphadduwq = _ida_domain.NN_vphadduwq

NN_vphaddwd = _ida_domain.NN_vphaddwd

NN_vphaddwq = _ida_domain.NN_vphaddwq

NN_vphsubbw = _ida_domain.NN_vphsubbw

NN_vphsubdq = _ida_domain.NN_vphsubdq

NN_vphsubwd = _ida_domain.NN_vphsubwd

NN_vpmacsdd = _ida_domain.NN_vpmacsdd

NN_vpmacsdqh = _ida_domain.NN_vpmacsdqh

NN_vpmacsdql = _ida_domain.NN_vpmacsdql

NN_vpmacssdd = _ida_domain.NN_vpmacssdd

NN_vpmacssdqh = _ida_domain.NN_vpmacssdqh

NN_vpmacssdql = _ida_domain.NN_vpmacssdql

NN_vpmacsswd = _ida_domain.NN_vpmacsswd

NN_vpmacssww = _ida_domain.NN_vpmacssww

NN_vpmacswd = _ida_domain.NN_vpmacswd

NN_vpmacsww = _ida_domain.NN_vpmacsww

NN_vpmadcsswd = _ida_domain.NN_vpmadcsswd

NN_vpmadcswd = _ida_domain.NN_vpmadcswd

NN_vpperm = _ida_domain.NN_vpperm

NN_vprotb = _ida_domain.NN_vprotb

NN_vprotd = _ida_domain.NN_vprotd

NN_vprotq = _ida_domain.NN_vprotq

NN_vprotw = _ida_domain.NN_vprotw

NN_vpshab = _ida_domain.NN_vpshab

NN_vpshad = _ida_domain.NN_vpshad

NN_vpshaq = _ida_domain.NN_vpshaq

NN_vpshaw = _ida_domain.NN_vpshaw

NN_vpshlb = _ida_domain.NN_vpshlb

NN_vpshld = _ida_domain.NN_vpshld

NN_vpshlq = _ida_domain.NN_vpshlq

NN_vpshlw = _ida_domain.NN_vpshlw

NN_vpcomltb = _ida_domain.NN_vpcomltb

NN_vpcomleb = _ida_domain.NN_vpcomleb

NN_vpcomgtb = _ida_domain.NN_vpcomgtb

NN_vpcomgeb = _ida_domain.NN_vpcomgeb

NN_vpcomeqb = _ida_domain.NN_vpcomeqb

NN_vpcomneqb = _ida_domain.NN_vpcomneqb

NN_vpcomfalseb = _ida_domain.NN_vpcomfalseb

NN_vpcomtrueb = _ida_domain.NN_vpcomtrueb

NN_vpcomltw = _ida_domain.NN_vpcomltw

NN_vpcomlew = _ida_domain.NN_vpcomlew

NN_vpcomgtw = _ida_domain.NN_vpcomgtw

NN_vpcomgew = _ida_domain.NN_vpcomgew

NN_vpcomeqw = _ida_domain.NN_vpcomeqw

NN_vpcomneqw = _ida_domain.NN_vpcomneqw

NN_vpcomfalsew = _ida_domain.NN_vpcomfalsew

NN_vpcomtruew = _ida_domain.NN_vpcomtruew

NN_vpcomltd = _ida_domain.NN_vpcomltd

NN_vpcomled = _ida_domain.NN_vpcomled

NN_vpcomgtd = _ida_domain.NN_vpcomgtd

NN_vpcomged = _ida_domain.NN_vpcomged

NN_vpcomeqd = _ida_domain.NN_vpcomeqd

NN_vpcomneqd = _ida_domain.NN_vpcomneqd

NN_vpcomfalsed = _ida_domain.NN_vpcomfalsed

NN_vpcomtrued = _ida_domain.NN_vpcomtrued

NN_vpcomltq = _ida_domain.NN_vpcomltq

NN_vpcomleq = _ida_domain.NN_vpcomleq

NN_vpcomgtq = _ida_domain.NN_vpcomgtq

NN_vpcomgeq = _ida_domain.NN_vpcomgeq

NN_vpcomeqq = _ida_domain.NN_vpcomeqq

NN_vpcomneqq = _ida_domain.NN_vpcomneqq

NN_vpcomfalseq = _ida_domain.NN_vpcomfalseq

NN_vpcomtrueq = _ida_domain.NN_vpcomtrueq

NN_vpcomltub = _ida_domain.NN_vpcomltub

NN_vpcomleub = _ida_domain.NN_vpcomleub

NN_vpcomgtub = _ida_domain.NN_vpcomgtub

NN_vpcomgeub = _ida_domain.NN_vpcomgeub

NN_vpcomequb = _ida_domain.NN_vpcomequb

NN_vpcomnequb = _ida_domain.NN_vpcomnequb

NN_vpcomfalseub = _ida_domain.NN_vpcomfalseub

NN_vpcomtrueub = _ida_domain.NN_vpcomtrueub

NN_vpcomltuw = _ida_domain.NN_vpcomltuw

NN_vpcomleuw = _ida_domain.NN_vpcomleuw

NN_vpcomgtuw = _ida_domain.NN_vpcomgtuw

NN_vpcomgeuw = _ida_domain.NN_vpcomgeuw

NN_vpcomequw = _ida_domain.NN_vpcomequw

NN_vpcomnequw = _ida_domain.NN_vpcomnequw

NN_vpcomfalseuw = _ida_domain.NN_vpcomfalseuw

NN_vpcomtrueuw = _ida_domain.NN_vpcomtrueuw

NN_vpcomltud = _ida_domain.NN_vpcomltud

NN_vpcomleud = _ida_domain.NN_vpcomleud

NN_vpcomgtud = _ida_domain.NN_vpcomgtud

NN_vpcomgeud = _ida_domain.NN_vpcomgeud

NN_vpcomequd = _ida_domain.NN_vpcomequd

NN_vpcomnequd = _ida_domain.NN_vpcomnequd

NN_vpcomfalseud = _ida_domain.NN_vpcomfalseud

NN_vpcomtrueud = _ida_domain.NN_vpcomtrueud

NN_vpcomltuq = _ida_domain.NN_vpcomltuq

NN_vpcomleuq = _ida_domain.NN_vpcomleuq

NN_vpcomgtuq = _ida_domain.NN_vpcomgtuq

NN_vpcomgeuq = _ida_domain.NN_vpcomgeuq

NN_vpcomequq = _ida_domain.NN_vpcomequq

NN_vpcomnequq = _ida_domain.NN_vpcomnequq

NN_vpcomfalseuq = _ida_domain.NN_vpcomfalseuq

NN_vpcomtrueuq = _ida_domain.NN_vpcomtrueuq

NN_monitorx = _ida_domain.NN_monitorx

NN_mwaitx = _ida_domain.NN_mwaitx

NN_clzero = _ida_domain.NN_clzero

NN_ptwrite = _ida_domain.NN_ptwrite

NN_v4fmaddps = _ida_domain.NN_v4fmaddps

NN_v4fnmaddps = _ida_domain.NN_v4fnmaddps

NN_v4fmaddss = _ida_domain.NN_v4fmaddss

NN_v4fnmaddss = _ida_domain.NN_v4fnmaddss

NN_vp4dpwssd = _ida_domain.NN_vp4dpwssd

NN_vp4dpwssds = _ida_domain.NN_vp4dpwssds

NN_vpopcntd = _ida_domain.NN_vpopcntd

NN_vpopcntq = _ida_domain.NN_vpopcntq

NN_rdpid = _ida_domain.NN_rdpid

NN_vmfunc = _ida_domain.NN_vmfunc

NN_incsspd = _ida_domain.NN_incsspd

NN_incsspq = _ida_domain.NN_incsspq

NN_rdsspd = _ida_domain.NN_rdsspd

NN_rdsspq = _ida_domain.NN_rdsspq

NN_saveprevssp = _ida_domain.NN_saveprevssp

NN_rstorssp = _ida_domain.NN_rstorssp

NN_wrssd = _ida_domain.NN_wrssd

NN_wrssq = _ida_domain.NN_wrssq

NN_wrussd = _ida_domain.NN_wrussd

NN_wrussq = _ida_domain.NN_wrussq

NN_setssbsy = _ida_domain.NN_setssbsy

NN_clrssbsy = _ida_domain.NN_clrssbsy

NN_endbr64 = _ida_domain.NN_endbr64

NN_endbr32 = _ida_domain.NN_endbr32

NN_ud0 = _ida_domain.NN_ud0

NN_ud1 = _ida_domain.NN_ud1

NN_enqcmd = _ida_domain.NN_enqcmd

NN_enqcmds = _ida_domain.NN_enqcmds

NN_mcommit = _ida_domain.NN_mcommit

NN_rdpru = _ida_domain.NN_rdpru

NN_cldemote = _ida_domain.NN_cldemote

NN_enclv = _ida_domain.NN_enclv

NN_movdiri = _ida_domain.NN_movdiri

NN_movdir64b = _ida_domain.NN_movdir64b

NN_tpause = _ida_domain.NN_tpause

NN_umonitor = _ida_domain.NN_umonitor

NN_umwait = _ida_domain.NN_umwait

NN_serialize = _ida_domain.NN_serialize

NN_xresldtrk = _ida_domain.NN_xresldtrk

NN_xsusldtrk = _ida_domain.NN_xsusldtrk

NN_gf2p8mulb = _ida_domain.NN_gf2p8mulb

NN_gf2p8affineqb = _ida_domain.NN_gf2p8affineqb

NN_gf2p8affineinvqb = _ida_domain.NN_gf2p8affineinvqb

NN_vgf2p8mulb = _ida_domain.NN_vgf2p8mulb

NN_vgf2p8affineqb = _ida_domain.NN_vgf2p8affineqb

NN_vgf2p8affineinvqb = _ida_domain.NN_vgf2p8affineinvqb

NN_fxsave64 = _ida_domain.NN_fxsave64

NN_fxrstor64 = _ida_domain.NN_fxrstor64

NN_vpdpbusd = _ida_domain.NN_vpdpbusd

NN_vpdpbusds = _ida_domain.NN_vpdpbusds

NN_vpdpwssd = _ida_domain.NN_vpdpwssd

NN_vpdpwssds = _ida_domain.NN_vpdpwssds

NN_vpcompressb = _ida_domain.NN_vpcompressb

NN_vpcompressw = _ida_domain.NN_vpcompressw

NN_vpexpandb = _ida_domain.NN_vpexpandb

NN_vpexpandw = _ida_domain.NN_vpexpandw

NN_vpshldw = _ida_domain.NN_vpshldw

NN_vpshldd = _ida_domain.NN_vpshldd

NN_vpshldq = _ida_domain.NN_vpshldq

NN_vpshldvw = _ida_domain.NN_vpshldvw

NN_vpshldvd = _ida_domain.NN_vpshldvd

NN_vpshldvq = _ida_domain.NN_vpshldvq

NN_vpshrdw = _ida_domain.NN_vpshrdw

NN_vpshrdd = _ida_domain.NN_vpshrdd

NN_vpshrdq = _ida_domain.NN_vpshrdq

NN_vpshrdvw = _ida_domain.NN_vpshrdvw

NN_vpshrdvd = _ida_domain.NN_vpshrdvd

NN_vpshrdvq = _ida_domain.NN_vpshrdvq

NN_vpopcntb = _ida_domain.NN_vpopcntb

NN_vpopcntw = _ida_domain.NN_vpopcntw

NN_vpshufbitqmb = _ida_domain.NN_vpshufbitqmb

NN_vp2intersectd = _ida_domain.NN_vp2intersectd

NN_vp2intersectq = _ida_domain.NN_vp2intersectq

NN_vcvtne2ps2bf16 = _ida_domain.NN_vcvtne2ps2bf16

NN_vcvtneps2bf16 = _ida_domain.NN_vcvtneps2bf16

NN_vdpbf16ps = _ida_domain.NN_vdpbf16ps

NN_vaddph = _ida_domain.NN_vaddph

NN_vcmpph = _ida_domain.NN_vcmpph

NN_vcvtdq2ph = _ida_domain.NN_vcvtdq2ph

NN_vcvtpd2ph = _ida_domain.NN_vcvtpd2ph

NN_vcvtph2dq = _ida_domain.NN_vcvtph2dq

NN_vcvtph2pd = _ida_domain.NN_vcvtph2pd

NN_vcvtph2psx = _ida_domain.NN_vcvtph2psx

NN_vcvtph2qq = _ida_domain.NN_vcvtph2qq

NN_vcvtph2udq = _ida_domain.NN_vcvtph2udq

NN_vcvtph2uqq = _ida_domain.NN_vcvtph2uqq

NN_vcvtph2uw = _ida_domain.NN_vcvtph2uw

NN_vcvtph2w = _ida_domain.NN_vcvtph2w

NN_vcvtps2phx = _ida_domain.NN_vcvtps2phx

NN_vcvtqq2ph = _ida_domain.NN_vcvtqq2ph

NN_vcvttph2dq = _ida_domain.NN_vcvttph2dq

NN_vcvttph2qq = _ida_domain.NN_vcvttph2qq

NN_vcvttph2udq = _ida_domain.NN_vcvttph2udq

NN_vcvttph2uqq = _ida_domain.NN_vcvttph2uqq

NN_vcvttph2uw = _ida_domain.NN_vcvttph2uw

NN_vcvttph2w = _ida_domain.NN_vcvttph2w

NN_vcvtudq2ph = _ida_domain.NN_vcvtudq2ph

NN_vcvtuqq2ph = _ida_domain.NN_vcvtuqq2ph

NN_vcvtuw2ph = _ida_domain.NN_vcvtuw2ph

NN_vcvtw2ph = _ida_domain.NN_vcvtw2ph

NN_vdivph = _ida_domain.NN_vdivph

NN_vfcmaddcph = _ida_domain.NN_vfcmaddcph

NN_vfcmulcph = _ida_domain.NN_vfcmulcph

NN_vfmadd132ph = _ida_domain.NN_vfmadd132ph

NN_vfmadd213ph = _ida_domain.NN_vfmadd213ph

NN_vfmadd231ph = _ida_domain.NN_vfmadd231ph

NN_vfmaddcph = _ida_domain.NN_vfmaddcph

NN_vfmaddsub132ph = _ida_domain.NN_vfmaddsub132ph

NN_vfmaddsub213ph = _ida_domain.NN_vfmaddsub213ph

NN_vfmaddsub231ph = _ida_domain.NN_vfmaddsub231ph

NN_vfmsub132ph = _ida_domain.NN_vfmsub132ph

NN_vfmsub213ph = _ida_domain.NN_vfmsub213ph

NN_vfmsub231ph = _ida_domain.NN_vfmsub231ph

NN_vfmsubadd132ph = _ida_domain.NN_vfmsubadd132ph

NN_vfmsubadd213ph = _ida_domain.NN_vfmsubadd213ph

NN_vfmsubadd231ph = _ida_domain.NN_vfmsubadd231ph

NN_vfmulcph = _ida_domain.NN_vfmulcph

NN_vfnmadd132ph = _ida_domain.NN_vfnmadd132ph

NN_vfnmadd213ph = _ida_domain.NN_vfnmadd213ph

NN_vfnmadd231ph = _ida_domain.NN_vfnmadd231ph

NN_vfnmsub132ph = _ida_domain.NN_vfnmsub132ph

NN_vfnmsub213ph = _ida_domain.NN_vfnmsub213ph

NN_vfnmsub231ph = _ida_domain.NN_vfnmsub231ph

NN_vfpclassph = _ida_domain.NN_vfpclassph

NN_vgetexpph = _ida_domain.NN_vgetexpph

NN_vgetmantph = _ida_domain.NN_vgetmantph

NN_vmaxph = _ida_domain.NN_vmaxph

NN_vminph = _ida_domain.NN_vminph

NN_vmulph = _ida_domain.NN_vmulph

NN_vrcpph = _ida_domain.NN_vrcpph

NN_vreduceph = _ida_domain.NN_vreduceph

NN_vrndscaleph = _ida_domain.NN_vrndscaleph

NN_vrsqrtph = _ida_domain.NN_vrsqrtph

NN_vscalefph = _ida_domain.NN_vscalefph

NN_vsqrtph = _ida_domain.NN_vsqrtph

NN_vsubph = _ida_domain.NN_vsubph

NN_vmovw = _ida_domain.NN_vmovw

NN_vaddsh = _ida_domain.NN_vaddsh

NN_vcmpsh = _ida_domain.NN_vcmpsh

NN_vcomish = _ida_domain.NN_vcomish

NN_vcvtsd2sh = _ida_domain.NN_vcvtsd2sh

NN_vcvtsh2sd = _ida_domain.NN_vcvtsh2sd

NN_vcvtsh2si = _ida_domain.NN_vcvtsh2si

NN_vcvtsh2ss = _ida_domain.NN_vcvtsh2ss

NN_vcvtsh2usi = _ida_domain.NN_vcvtsh2usi

NN_vcvtsi2sh = _ida_domain.NN_vcvtsi2sh

NN_vcvtss2sh = _ida_domain.NN_vcvtss2sh

NN_vcvttsh2si = _ida_domain.NN_vcvttsh2si

NN_vcvttsh2usi = _ida_domain.NN_vcvttsh2usi

NN_vcvtusi2sh = _ida_domain.NN_vcvtusi2sh

NN_vdivsh = _ida_domain.NN_vdivsh

NN_vfcmaddcsh = _ida_domain.NN_vfcmaddcsh

NN_vfcmulcsh = _ida_domain.NN_vfcmulcsh

NN_vfmadd132sh = _ida_domain.NN_vfmadd132sh

NN_vfmadd213sh = _ida_domain.NN_vfmadd213sh

NN_vfmadd231sh = _ida_domain.NN_vfmadd231sh

NN_vfmaddcsh = _ida_domain.NN_vfmaddcsh

NN_vfmsub132sh = _ida_domain.NN_vfmsub132sh

NN_vfmsub213sh = _ida_domain.NN_vfmsub213sh

NN_vfmsub231sh = _ida_domain.NN_vfmsub231sh

NN_vfmulcsh = _ida_domain.NN_vfmulcsh

NN_vfnmadd132sh = _ida_domain.NN_vfnmadd132sh

NN_vfnmadd213sh = _ida_domain.NN_vfnmadd213sh

NN_vfnmadd231sh = _ida_domain.NN_vfnmadd231sh

NN_vfnmsub132sh = _ida_domain.NN_vfnmsub132sh

NN_vfnmsub213sh = _ida_domain.NN_vfnmsub213sh

NN_vfnmsub231sh = _ida_domain.NN_vfnmsub231sh

NN_vfpclasssh = _ida_domain.NN_vfpclasssh

NN_vgetexpsh = _ida_domain.NN_vgetexpsh

NN_vgetmantsh = _ida_domain.NN_vgetmantsh

NN_vmaxsh = _ida_domain.NN_vmaxsh

NN_vminsh = _ida_domain.NN_vminsh

NN_vmovsh = _ida_domain.NN_vmovsh

NN_vmulsh = _ida_domain.NN_vmulsh

NN_vrcpsh = _ida_domain.NN_vrcpsh

NN_vreducesh = _ida_domain.NN_vreducesh

NN_vrndscalesh = _ida_domain.NN_vrndscalesh

NN_vrsqrtsh = _ida_domain.NN_vrsqrtsh

NN_vscalefsh = _ida_domain.NN_vscalefsh

NN_vsqrtsh = _ida_domain.NN_vsqrtsh

NN_vsubsh = _ida_domain.NN_vsubsh

NN_vucomish = _ida_domain.NN_vucomish

NN_clui = _ida_domain.NN_clui

NN_stui = _ida_domain.NN_stui

NN_testui = _ida_domain.NN_testui

NN_uiret = _ida_domain.NN_uiret

NN_senduipi = _ida_domain.NN_senduipi

NN_hreset = _ida_domain.NN_hreset

NN_last = _ida_domain.NN_last

I5_null = _ida_domain.I5_null

I5_aci = _ida_domain.I5_aci

I5_adc = _ida_domain.I5_adc

Z80_adc = _ida_domain.Z80_adc

I5_add = _ida_domain.I5_add

Z80_add = _ida_domain.Z80_add

I5_adi = _ida_domain.I5_adi

I5_ana = _ida_domain.I5_ana

I5_ani = _ida_domain.I5_ani

I5_call = _ida_domain.I5_call

I5_cnz = _ida_domain.I5_cnz

I5_cz = _ida_domain.I5_cz

I5_cnc = _ida_domain.I5_cnc

I5_cc = _ida_domain.I5_cc

I5_cpo = _ida_domain.I5_cpo

I5_cpe = _ida_domain.I5_cpe

I5_cp = _ida_domain.I5_cp

I5_cm = _ida_domain.I5_cm

I5_cmc = _ida_domain.I5_cmc

I5_cmp = _ida_domain.I5_cmp

I5_cpi = _ida_domain.I5_cpi

I5_cma = _ida_domain.I5_cma

I5_daa = _ida_domain.I5_daa

I5_dad = _ida_domain.I5_dad

I5_dcr = _ida_domain.I5_dcr

I5_dcx = _ida_domain.I5_dcx

I5_di = _ida_domain.I5_di

Z80_di = _ida_domain.Z80_di

I5_ei = _ida_domain.I5_ei

Z80_ei = _ida_domain.Z80_ei

I5_halt = _ida_domain.I5_halt

I5_in = _ida_domain.I5_in

Z80_in = _ida_domain.Z80_in

I5_inr = _ida_domain.I5_inr

I5_inx = _ida_domain.I5_inx

I5_jmp = _ida_domain.I5_jmp

I5_jnz = _ida_domain.I5_jnz

I5_jz = _ida_domain.I5_jz

I5_jnc = _ida_domain.I5_jnc

I5_jc = _ida_domain.I5_jc

I5_jpo = _ida_domain.I5_jpo

I5_jpe = _ida_domain.I5_jpe

I5_jp = _ida_domain.I5_jp

I5_jm = _ida_domain.I5_jm

I5_lda = _ida_domain.I5_lda

I5_ldax = _ida_domain.I5_ldax

I5_lhld = _ida_domain.I5_lhld

I5_lxi = _ida_domain.I5_lxi

I5_mov = _ida_domain.I5_mov

I5_mvi = _ida_domain.I5_mvi

I5_nop = _ida_domain.I5_nop

I5_ora = _ida_domain.I5_ora

I5_ori = _ida_domain.I5_ori

I5_out = _ida_domain.I5_out

Z80_out = _ida_domain.Z80_out

I5_pchl = _ida_domain.I5_pchl

I5_pop = _ida_domain.I5_pop

Z80_pop = _ida_domain.Z80_pop

I5_push = _ida_domain.I5_push

Z80_push = _ida_domain.Z80_push

I5_ret = _ida_domain.I5_ret

I5_rnz = _ida_domain.I5_rnz

I5_rz = _ida_domain.I5_rz

I5_rnc = _ida_domain.I5_rnc

I5_rc = _ida_domain.I5_rc

I5_rpo = _ida_domain.I5_rpo

I5_rpe = _ida_domain.I5_rpe

I5_rp = _ida_domain.I5_rp

I5_rm = _ida_domain.I5_rm

I5_ral = _ida_domain.I5_ral

I5_rlc = _ida_domain.I5_rlc

I5_rar = _ida_domain.I5_rar

I5_rrc = _ida_domain.I5_rrc

I5_rst = _ida_domain.I5_rst

I5_sbb = _ida_domain.I5_sbb

I5_sbi = _ida_domain.I5_sbi

I5_stc = _ida_domain.I5_stc

I5_sphl = _ida_domain.I5_sphl

I5_sta = _ida_domain.I5_sta

I5_stax = _ida_domain.I5_stax

I5_shld = _ida_domain.I5_shld

I5_sui = _ida_domain.I5_sui

I5_sub = _ida_domain.I5_sub

Z80_sub = _ida_domain.Z80_sub

I5_xra = _ida_domain.I5_xra

I5_xri = _ida_domain.I5_xri

I5_xchg = _ida_domain.I5_xchg

I5_xthl = _ida_domain.I5_xthl

I5_rim = _ida_domain.I5_rim

I5_sim = _ida_domain.I5_sim

Z80_and = _ida_domain.Z80_and

Z80_bit = _ida_domain.Z80_bit

Z80_call = _ida_domain.Z80_call

Z80_ccf = _ida_domain.Z80_ccf

Z80_cp = _ida_domain.Z80_cp

Z80_cpd = _ida_domain.Z80_cpd

Z80_cpdr = _ida_domain.Z80_cpdr

Z80_cpi = _ida_domain.Z80_cpi

Z80_cpir = _ida_domain.Z80_cpir

Z80_cpl = _ida_domain.Z80_cpl

Z80_dec = _ida_domain.Z80_dec

Z80_djnz = _ida_domain.Z80_djnz

Z80_ex = _ida_domain.Z80_ex

Z80_exx = _ida_domain.Z80_exx

Z80_halt = _ida_domain.Z80_halt

Z80_im = _ida_domain.Z80_im

Z80_inc = _ida_domain.Z80_inc

Z80_ind = _ida_domain.Z80_ind

Z80_indr = _ida_domain.Z80_indr

Z80_ini = _ida_domain.Z80_ini

Z80_inir = _ida_domain.Z80_inir

Z80_jp = _ida_domain.Z80_jp

Z80_jr = _ida_domain.Z80_jr

Z80_ld = _ida_domain.Z80_ld

Z80_ldd = _ida_domain.Z80_ldd

Z80_lddr = _ida_domain.Z80_lddr

Z80_ldi = _ida_domain.Z80_ldi

Z80_ldir = _ida_domain.Z80_ldir

Z80_neg = _ida_domain.Z80_neg

Z80_or = _ida_domain.Z80_or

Z80_otdr = _ida_domain.Z80_otdr

Z80_otir = _ida_domain.Z80_otir

Z80_outd = _ida_domain.Z80_outd

Z80_outi = _ida_domain.Z80_outi

Z80_res = _ida_domain.Z80_res

Z80_ret = _ida_domain.Z80_ret

Z80_reti = _ida_domain.Z80_reti

Z80_retn = _ida_domain.Z80_retn

Z80_rl = _ida_domain.Z80_rl

Z80_rla = _ida_domain.Z80_rla

Z80_rlc = _ida_domain.Z80_rlc

Z80_rlca = _ida_domain.Z80_rlca

Z80_rld = _ida_domain.Z80_rld

Z80_rr = _ida_domain.Z80_rr

Z80_rra = _ida_domain.Z80_rra

Z80_rrc = _ida_domain.Z80_rrc

Z80_rrca = _ida_domain.Z80_rrca

Z80_rrd = _ida_domain.Z80_rrd

Z80_scf = _ida_domain.Z80_scf

Z80_sbc = _ida_domain.Z80_sbc

Z80_set = _ida_domain.Z80_set

Z80_sla = _ida_domain.Z80_sla

Z80_sra = _ida_domain.Z80_sra

Z80_srl = _ida_domain.Z80_srl

Z80_xor = _ida_domain.Z80_xor

Z80_inp = _ida_domain.Z80_inp

Z80_outp = _ida_domain.Z80_outp

Z80_srr = _ida_domain.Z80_srr

HD_in0 = _ida_domain.HD_in0

Z80_in0 = _ida_domain.Z80_in0

HD_mlt = _ida_domain.HD_mlt

Z80_mlt = _ida_domain.Z80_mlt

HD_otim = _ida_domain.HD_otim

Z80_otim = _ida_domain.Z80_otim

HD_otimr = _ida_domain.HD_otimr

Z80_otimr = _ida_domain.Z80_otimr

HD_otdm = _ida_domain.HD_otdm

Z80_otdm = _ida_domain.Z80_otdm

HD_otdmr = _ida_domain.HD_otdmr

Z80_otdmr = _ida_domain.Z80_otdmr

HD_out0 = _ida_domain.HD_out0

Z80_out0 = _ida_domain.Z80_out0

HD_slp = _ida_domain.HD_slp

Z80_slp = _ida_domain.Z80_slp

HD_tst = _ida_domain.HD_tst

Z80_tst = _ida_domain.Z80_tst

HD_tstio = _ida_domain.HD_tstio

Z80_tstio = _ida_domain.Z80_tstio

A80_lbcd = _ida_domain.A80_lbcd

A80_lded = _ida_domain.A80_lded

A80_lspd = _ida_domain.A80_lspd

A80_lixd = _ida_domain.A80_lixd

A80_liyd = _ida_domain.A80_liyd

A80_sbcd = _ida_domain.A80_sbcd

A80_sded = _ida_domain.A80_sded

A80_sspd = _ida_domain.A80_sspd

A80_sixd = _ida_domain.A80_sixd

A80_siyd = _ida_domain.A80_siyd

A80_xtix = _ida_domain.A80_xtix

A80_xtiy = _ida_domain.A80_xtiy

A80_spix = _ida_domain.A80_spix

A80_spiy = _ida_domain.A80_spiy

A80_pcix = _ida_domain.A80_pcix

A80_pciy = _ida_domain.A80_pciy

A80_mvra = _ida_domain.A80_mvra

A80_mvia = _ida_domain.A80_mvia

A80_mvar = _ida_domain.A80_mvar

A80_mvai = _ida_domain.A80_mvai

A80_addix = _ida_domain.A80_addix

A80_addiy = _ida_domain.A80_addiy

A80_addc = _ida_domain.A80_addc

A80_addcix = _ida_domain.A80_addcix

A80_addciy = _ida_domain.A80_addciy

A80_subc = _ida_domain.A80_subc

A80_subcix = _ida_domain.A80_subcix

A80_subciy = _ida_domain.A80_subciy

A80_jrc = _ida_domain.A80_jrc

A80_jrnc = _ida_domain.A80_jrnc

A80_jrz = _ida_domain.A80_jrz

A80_jrnz = _ida_domain.A80_jrnz

A80_cmpi = _ida_domain.A80_cmpi

A80_cmpd = _ida_domain.A80_cmpd

A80_im0 = _ida_domain.A80_im0

A80_im1 = _ida_domain.A80_im1

A80_im2 = _ida_domain.A80_im2

A80_otd = _ida_domain.A80_otd

A80_oti = _ida_domain.A80_oti

I5_dsub = _ida_domain.I5_dsub

I5_arhl = _ida_domain.I5_arhl

I5_rdel = _ida_domain.I5_rdel

I5_ldhi = _ida_domain.I5_ldhi

I5_ldsi = _ida_domain.I5_ldsi

I5_shlx = _ida_domain.I5_shlx

I5_lhlx = _ida_domain.I5_lhlx

I5_rstv = _ida_domain.I5_rstv

I5_jx5 = _ida_domain.I5_jx5

I5_jnx5 = _ida_domain.I5_jnx5

Z80_cplw = _ida_domain.Z80_cplw

Z80_swap = _ida_domain.Z80_swap

Z80_inw = _ida_domain.Z80_inw

Z80_outw = _ida_domain.Z80_outw

Z80_ldw = _ida_domain.Z80_ldw

Z80_addw = _ida_domain.Z80_addw

Z80_subw = _ida_domain.Z80_subw

Z80_adcw = _ida_domain.Z80_adcw

Z80_sbcw = _ida_domain.Z80_sbcw

Z80_andw = _ida_domain.Z80_andw

Z80_xorw = _ida_domain.Z80_xorw

Z80_orw = _ida_domain.Z80_orw

Z80_cpw = _ida_domain.Z80_cpw

Z80_ddir = _ida_domain.Z80_ddir

Z80_calr = _ida_domain.Z80_calr

Z80_ldctl = _ida_domain.Z80_ldctl

Z80_mtest = _ida_domain.Z80_mtest

Z80_exxx = _ida_domain.Z80_exxx

Z80_exxy = _ida_domain.Z80_exxy

Z80_exall = _ida_domain.Z80_exall

Z80_setc = _ida_domain.Z80_setc

Z80_resc = _ida_domain.Z80_resc

Z80_rlcw = _ida_domain.Z80_rlcw

Z80_rrcw = _ida_domain.Z80_rrcw

Z80_rlw = _ida_domain.Z80_rlw

Z80_rrw = _ida_domain.Z80_rrw

Z80_slaw = _ida_domain.Z80_slaw

Z80_sraw = _ida_domain.Z80_sraw

Z80_srlw = _ida_domain.Z80_srlw

Z80_multw = _ida_domain.Z80_multw

Z80_multuw = _ida_domain.Z80_multuw

Z80_divuw = _ida_domain.Z80_divuw

Z80_outaw = _ida_domain.Z80_outaw

Z80_inaw = _ida_domain.Z80_inaw

Z80_outa = _ida_domain.Z80_outa

Z80_ina = _ida_domain.Z80_ina

Z80_negw = _ida_domain.Z80_negw

Z80_exts = _ida_domain.Z80_exts

Z80_extsw = _ida_domain.Z80_extsw

Z80_btest = _ida_domain.Z80_btest

Z80_ldiw = _ida_domain.Z80_ldiw

Z80_ldirw = _ida_domain.Z80_ldirw

Z80_lddw = _ida_domain.Z80_lddw

Z80_lddrw = _ida_domain.Z80_lddrw

Z80_iniw = _ida_domain.Z80_iniw

Z80_inirw = _ida_domain.Z80_inirw

Z80_indw = _ida_domain.Z80_indw

Z80_indrw = _ida_domain.Z80_indrw

Z80_outiw = _ida_domain.Z80_outiw

Z80_otirw = _ida_domain.Z80_otirw

Z80_outdw = _ida_domain.Z80_outdw

Z80_otdrw = _ida_domain.Z80_otdrw

GB_ldh = _ida_domain.GB_ldh

GB_stop = _ida_domain.GB_stop

I5_last = _ida_domain.I5_last

I860_null = _ida_domain.I860_null

I860_adds = _ida_domain.I860_adds

I860_addu = _ida_domain.I860_addu

I860_and = _ida_domain.I860_and

I860_andh = _ida_domain.I860_andh

I860_andnot = _ida_domain.I860_andnot

I860_andnoth = _ida_domain.I860_andnoth

I860_bc = _ida_domain.I860_bc

I860_bc_t = _ida_domain.I860_bc_t

I860_bla = _ida_domain.I860_bla

I860_bnc = _ida_domain.I860_bnc

I860_bnc_t = _ida_domain.I860_bnc_t

I860_br = _ida_domain.I860_br

I860_bri = _ida_domain.I860_bri

I860_bte = _ida_domain.I860_bte

I860_btne = _ida_domain.I860_btne

I860_call = _ida_domain.I860_call

I860_calli = _ida_domain.I860_calli

I860_fadd = _ida_domain.I860_fadd

I860_faddp = _ida_domain.I860_faddp

I860_faddz = _ida_domain.I860_faddz

I860_famov = _ida_domain.I860_famov

I860_fiadd = _ida_domain.I860_fiadd

I860_fisub = _ida_domain.I860_fisub

I860_fix = _ida_domain.I860_fix

I860_fld = _ida_domain.I860_fld

I860_flush = _ida_domain.I860_flush

I860_fmlow_dd = _ida_domain.I860_fmlow_dd

I860_fmul = _ida_domain.I860_fmul

I860_form = _ida_domain.I860_form

I860_frcp = _ida_domain.I860_frcp

I860_frsqr = _ida_domain.I860_frsqr

I860_fst = _ida_domain.I860_fst

I860_fsub = _ida_domain.I860_fsub

I860_ftrunc = _ida_domain.I860_ftrunc

I860_fxfr = _ida_domain.I860_fxfr

I860_fzchkl = _ida_domain.I860_fzchkl

I860_fzchks = _ida_domain.I860_fzchks

I860_introvr = _ida_domain.I860_introvr

I860_ixfr = _ida_domain.I860_ixfr

I860_ld_c = _ida_domain.I860_ld_c

I860_ld = _ida_domain.I860_ld

I860_ldint = _ida_domain.I860_ldint

I860_ldio = _ida_domain.I860_ldio

I860_lock = _ida_domain.I860_lock

I860_or = _ida_domain.I860_or

I860_orh = _ida_domain.I860_orh

I860_pfadd = _ida_domain.I860_pfadd

I860_pfaddp = _ida_domain.I860_pfaddp

I860_pfaddz = _ida_domain.I860_pfaddz

I860_pfamov = _ida_domain.I860_pfamov

I860_pfeq = _ida_domain.I860_pfeq

I860_pfgt = _ida_domain.I860_pfgt

I860_pfiadd = _ida_domain.I860_pfiadd

I860_pfisub = _ida_domain.I860_pfisub

I860_pfix = _ida_domain.I860_pfix

I860_pfld = _ida_domain.I860_pfld

I860_pfle = _ida_domain.I860_pfle

I860_pfmul = _ida_domain.I860_pfmul

I860_pfmul3_dd = _ida_domain.I860_pfmul3_dd

I860_pform = _ida_domain.I860_pform

I860_pfsub = _ida_domain.I860_pfsub

I860_pftrunc = _ida_domain.I860_pftrunc

I860_pfzchkl = _ida_domain.I860_pfzchkl

I860_pfzchks = _ida_domain.I860_pfzchks

I860_pst_d = _ida_domain.I860_pst_d

I860_scyc = _ida_domain.I860_scyc

I860_shl = _ida_domain.I860_shl

I860_shr = _ida_domain.I860_shr

I860_shra = _ida_domain.I860_shra

I860_shrd = _ida_domain.I860_shrd

I860_st_c = _ida_domain.I860_st_c

I860_st = _ida_domain.I860_st

I860_stio = _ida_domain.I860_stio

I860_subs = _ida_domain.I860_subs

I860_subu = _ida_domain.I860_subu

I860_trap = _ida_domain.I860_trap

I860_unlock = _ida_domain.I860_unlock

I860_xor = _ida_domain.I860_xor

I860_xorh = _ida_domain.I860_xorh

I860_r2p1 = _ida_domain.I860_r2p1

I860_r2pt = _ida_domain.I860_r2pt

I860_r2ap1 = _ida_domain.I860_r2ap1

I860_r2apt = _ida_domain.I860_r2apt

I860_i2p1 = _ida_domain.I860_i2p1

I860_i2pt = _ida_domain.I860_i2pt

I860_i2ap1 = _ida_domain.I860_i2ap1

I860_i2apt = _ida_domain.I860_i2apt

I860_rat1p2 = _ida_domain.I860_rat1p2

I860_m12apm = _ida_domain.I860_m12apm

I860_ra1p2 = _ida_domain.I860_ra1p2

I860_m12ttpa = _ida_domain.I860_m12ttpa

I860_iat1p2 = _ida_domain.I860_iat1p2

I860_m12tpm = _ida_domain.I860_m12tpm

I860_ia1p2 = _ida_domain.I860_ia1p2

I860_m12tpa = _ida_domain.I860_m12tpa

I860_r2s1 = _ida_domain.I860_r2s1

I860_r2st = _ida_domain.I860_r2st

I860_r2as1 = _ida_domain.I860_r2as1

I860_r2ast = _ida_domain.I860_r2ast

I860_i2s1 = _ida_domain.I860_i2s1

I860_i2st = _ida_domain.I860_i2st

I860_i2as1 = _ida_domain.I860_i2as1

I860_i2ast = _ida_domain.I860_i2ast

I860_rat1s2 = _ida_domain.I860_rat1s2

I860_m12asm = _ida_domain.I860_m12asm

I860_ra1s2 = _ida_domain.I860_ra1s2

I860_m12ttsa = _ida_domain.I860_m12ttsa

I860_iat1s2 = _ida_domain.I860_iat1s2

I860_m12tsm = _ida_domain.I860_m12tsm

I860_ia1s2 = _ida_domain.I860_ia1s2

I860_m12tsa = _ida_domain.I860_m12tsa

I860_mr2p1 = _ida_domain.I860_mr2p1

I860_mr2pt = _ida_domain.I860_mr2pt

I860_mr2mp1 = _ida_domain.I860_mr2mp1

I860_mr2mpt = _ida_domain.I860_mr2mpt

I860_mi2p1 = _ida_domain.I860_mi2p1

I860_mi2pt = _ida_domain.I860_mi2pt

I860_mi2mp1 = _ida_domain.I860_mi2mp1

I860_mi2mpt = _ida_domain.I860_mi2mpt

I860_mrmt1p2 = _ida_domain.I860_mrmt1p2

I860_mm12mpm = _ida_domain.I860_mm12mpm

I860_mrm1p2 = _ida_domain.I860_mrm1p2

I860_mm12ttpm = _ida_domain.I860_mm12ttpm

I860_mimt1p2 = _ida_domain.I860_mimt1p2

I860_mm12tpm = _ida_domain.I860_mm12tpm

I860_mim1p2 = _ida_domain.I860_mim1p2

I860_mr2s1 = _ida_domain.I860_mr2s1

I860_mr2st = _ida_domain.I860_mr2st

I860_mr2ms1 = _ida_domain.I860_mr2ms1

I860_mr2mst = _ida_domain.I860_mr2mst

I860_mi2s1 = _ida_domain.I860_mi2s1

I860_mi2st = _ida_domain.I860_mi2st

I860_mi2ms1 = _ida_domain.I860_mi2ms1

I860_mi2mst = _ida_domain.I860_mi2mst

I860_mrmt1s2 = _ida_domain.I860_mrmt1s2

I860_mm12msm = _ida_domain.I860_mm12msm

I860_mrm1s2 = _ida_domain.I860_mrm1s2

I860_mm12ttsm = _ida_domain.I860_mm12ttsm

I860_mimt1s2 = _ida_domain.I860_mimt1s2

I860_mm12tsm = _ida_domain.I860_mm12tsm

I860_mim1s2 = _ida_domain.I860_mim1s2

I860_last = _ida_domain.I860_last

I51_null = _ida_domain.I51_null

I51_acall = _ida_domain.I51_acall

I51_add = _ida_domain.I51_add

I51_addc = _ida_domain.I51_addc

I51_ajmp = _ida_domain.I51_ajmp

I51_anl = _ida_domain.I51_anl

I51_cjne = _ida_domain.I51_cjne

I51_clr = _ida_domain.I51_clr

I51_cpl = _ida_domain.I51_cpl

I51_da = _ida_domain.I51_da

I51_dec = _ida_domain.I51_dec

I51_div = _ida_domain.I51_div

I51_djnz = _ida_domain.I51_djnz

I51_inc = _ida_domain.I51_inc

I51_jb = _ida_domain.I51_jb

I51_jbc = _ida_domain.I51_jbc

I51_jc = _ida_domain.I51_jc

I51_jmp = _ida_domain.I51_jmp

I51_jnb = _ida_domain.I51_jnb

I51_jnc = _ida_domain.I51_jnc

I51_jnz = _ida_domain.I51_jnz

I51_jz = _ida_domain.I51_jz

I51_lcall = _ida_domain.I51_lcall

I51_ljmp = _ida_domain.I51_ljmp

I51_mov = _ida_domain.I51_mov

I51_movc = _ida_domain.I51_movc

I51_movx = _ida_domain.I51_movx

I51_mul = _ida_domain.I51_mul

I51_nop = _ida_domain.I51_nop

I51_orl = _ida_domain.I51_orl

I51_pop = _ida_domain.I51_pop

I51_push = _ida_domain.I51_push

I51_ret = _ida_domain.I51_ret

I51_reti = _ida_domain.I51_reti

I51_rl = _ida_domain.I51_rl

I51_rlc = _ida_domain.I51_rlc

I51_rr = _ida_domain.I51_rr

I51_rrc = _ida_domain.I51_rrc

I51_setb = _ida_domain.I51_setb

I51_sjmp = _ida_domain.I51_sjmp

I51_subb = _ida_domain.I51_subb

I51_swap = _ida_domain.I51_swap

I51_xch = _ida_domain.I51_xch

I51_xchd = _ida_domain.I51_xchd

I51_xrl = _ida_domain.I51_xrl

I51_jsle = _ida_domain.I51_jsle

I51_jsg = _ida_domain.I51_jsg

I51_jle = _ida_domain.I51_jle

I51_jg = _ida_domain.I51_jg

I51_jsl = _ida_domain.I51_jsl

I51_jsge = _ida_domain.I51_jsge

I51_je = _ida_domain.I51_je

I51_jne = _ida_domain.I51_jne

I51_trap = _ida_domain.I51_trap

I51_ejmp = _ida_domain.I51_ejmp

I51_ecall = _ida_domain.I51_ecall

I51_eret = _ida_domain.I51_eret

I51_movh = _ida_domain.I51_movh

I51_movz = _ida_domain.I51_movz

I51_movs = _ida_domain.I51_movs

I51_srl = _ida_domain.I51_srl

I51_sra = _ida_domain.I51_sra

I51_sll = _ida_domain.I51_sll

I51_sub = _ida_domain.I51_sub

I51_cmp = _ida_domain.I51_cmp

I51_emov = _ida_domain.I51_emov

I51_last = _ida_domain.I51_last

TMS_null = _ida_domain.TMS_null

TMS_abs = _ida_domain.TMS_abs

TMS_adcb = _ida_domain.TMS_adcb

TMS_add = _ida_domain.TMS_add

TMS_addb = _ida_domain.TMS_addb

TMS_addc = _ida_domain.TMS_addc

TMS_adds = _ida_domain.TMS_adds

TMS_addt = _ida_domain.TMS_addt

TMS_adrk = _ida_domain.TMS_adrk

TMS_and = _ida_domain.TMS_and

TMS_andb = _ida_domain.TMS_andb

TMS_apac = _ida_domain.TMS_apac

TMS_apl = _ida_domain.TMS_apl

TMS_apl2 = _ida_domain.TMS_apl2

TMS_b = _ida_domain.TMS_b

TMS_bacc = _ida_domain.TMS_bacc

TMS_baccd = _ida_domain.TMS_baccd

TMS_banz = _ida_domain.TMS_banz

TMS_banzd = _ida_domain.TMS_banzd

TMS_bcnd = _ida_domain.TMS_bcnd

TMS_bcndd = _ida_domain.TMS_bcndd

TMS_bd = _ida_domain.TMS_bd

TMS_bit = _ida_domain.TMS_bit

TMS_bitt = _ida_domain.TMS_bitt

TMS_bldd = _ida_domain.TMS_bldd

TMS_bldp = _ida_domain.TMS_bldp

TMS_blpd = _ida_domain.TMS_blpd

TMS_bsar = _ida_domain.TMS_bsar

TMS_cala = _ida_domain.TMS_cala

TMS_calad = _ida_domain.TMS_calad

TMS_call = _ida_domain.TMS_call

TMS_calld = _ida_domain.TMS_calld

TMS_cc = _ida_domain.TMS_cc

TMS_ccd = _ida_domain.TMS_ccd

TMS_clrc = _ida_domain.TMS_clrc

TMS_cmpl = _ida_domain.TMS_cmpl

TMS_cmpr = _ida_domain.TMS_cmpr

TMS_cpl = _ida_domain.TMS_cpl

TMS_cpl2 = _ida_domain.TMS_cpl2

TMS_crgt = _ida_domain.TMS_crgt

TMS_crlt = _ida_domain.TMS_crlt

TMS_dmov = _ida_domain.TMS_dmov

TMS_estop = _ida_domain.TMS_estop

TMS_exar = _ida_domain.TMS_exar

TMS_idle = _ida_domain.TMS_idle

TMS_idle2 = _ida_domain.TMS_idle2

TMS_in = _ida_domain.TMS_in

TMS_intr = _ida_domain.TMS_intr

TMS_lacb = _ida_domain.TMS_lacb

TMS_lacc = _ida_domain.TMS_lacc

TMS_lacl = _ida_domain.TMS_lacl

TMS_lact = _ida_domain.TMS_lact

TMS_lamm = _ida_domain.TMS_lamm

TMS_lar = _ida_domain.TMS_lar

TMS_ldp = _ida_domain.TMS_ldp

TMS_lmmr = _ida_domain.TMS_lmmr

TMS_lph = _ida_domain.TMS_lph

TMS_lst = _ida_domain.TMS_lst

TMS_lt = _ida_domain.TMS_lt

TMS_lta = _ida_domain.TMS_lta

TMS_ltd = _ida_domain.TMS_ltd

TMS_ltp = _ida_domain.TMS_ltp

TMS_lts = _ida_domain.TMS_lts

TMS_mac = _ida_domain.TMS_mac

TMS_macd = _ida_domain.TMS_macd

TMS_madd = _ida_domain.TMS_madd

TMS_mads = _ida_domain.TMS_mads

TMS_mar = _ida_domain.TMS_mar

TMS_mpy = _ida_domain.TMS_mpy

TMS_mpya = _ida_domain.TMS_mpya

TMS_mpys = _ida_domain.TMS_mpys

TMS_mpyu = _ida_domain.TMS_mpyu

TMS_neg = _ida_domain.TMS_neg

TMS_nmi = _ida_domain.TMS_nmi

TMS_nop = _ida_domain.TMS_nop

TMS_norm = _ida_domain.TMS_norm

TMS_opl = _ida_domain.TMS_opl

TMS_opl2 = _ida_domain.TMS_opl2

TMS_or = _ida_domain.TMS_or

TMS_orb = _ida_domain.TMS_orb

TMS_out = _ida_domain.TMS_out

TMS_pac = _ida_domain.TMS_pac

TMS_pop = _ida_domain.TMS_pop

TMS_popd = _ida_domain.TMS_popd

TMS_pshd = _ida_domain.TMS_pshd

TMS_push = _ida_domain.TMS_push

TMS_ret = _ida_domain.TMS_ret

TMS_retc = _ida_domain.TMS_retc

TMS_retcd = _ida_domain.TMS_retcd

TMS_retd = _ida_domain.TMS_retd

TMS_rete = _ida_domain.TMS_rete

TMS_reti = _ida_domain.TMS_reti

TMS_rol = _ida_domain.TMS_rol

TMS_rolb = _ida_domain.TMS_rolb

TMS_ror = _ida_domain.TMS_ror

TMS_rorb = _ida_domain.TMS_rorb

TMS_rpt = _ida_domain.TMS_rpt

TMS_rptb = _ida_domain.TMS_rptb

TMS_rptz = _ida_domain.TMS_rptz

TMS_sacb = _ida_domain.TMS_sacb

TMS_sach = _ida_domain.TMS_sach

TMS_sacl = _ida_domain.TMS_sacl

TMS_samm = _ida_domain.TMS_samm

TMS_sar = _ida_domain.TMS_sar

TMS_sath = _ida_domain.TMS_sath

TMS_satl = _ida_domain.TMS_satl

TMS_sbb = _ida_domain.TMS_sbb

TMS_sbbb = _ida_domain.TMS_sbbb

TMS_sbrk = _ida_domain.TMS_sbrk

TMS_setc = _ida_domain.TMS_setc

TMS_sfl = _ida_domain.TMS_sfl

TMS_sflb = _ida_domain.TMS_sflb

TMS_sfr = _ida_domain.TMS_sfr

TMS_sfrb = _ida_domain.TMS_sfrb

TMS_smmr = _ida_domain.TMS_smmr

TMS_spac = _ida_domain.TMS_spac

TMS_sph = _ida_domain.TMS_sph

TMS_spl = _ida_domain.TMS_spl

TMS_splk = _ida_domain.TMS_splk

TMS_spm = _ida_domain.TMS_spm

TMS_sqra = _ida_domain.TMS_sqra

TMS_sqrs = _ida_domain.TMS_sqrs

TMS_sst = _ida_domain.TMS_sst

TMS_sub = _ida_domain.TMS_sub

TMS_subb = _ida_domain.TMS_subb

TMS_subc = _ida_domain.TMS_subc

TMS_subs = _ida_domain.TMS_subs

TMS_subt = _ida_domain.TMS_subt

TMS_tblr = _ida_domain.TMS_tblr

TMS_tblw = _ida_domain.TMS_tblw

TMS_trap = _ida_domain.TMS_trap

TMS_xc = _ida_domain.TMS_xc

TMS_xor = _ida_domain.TMS_xor

TMS_xorb = _ida_domain.TMS_xorb

TMS_xpl = _ida_domain.TMS_xpl

TMS_xpl2 = _ida_domain.TMS_xpl2

TMS_zalr = _ida_domain.TMS_zalr

TMS_zap = _ida_domain.TMS_zap

TMS_zpr = _ida_domain.TMS_zpr

TMS2_abs = _ida_domain.TMS2_abs

TMS2_add = _ida_domain.TMS2_add

TMS2_addc = _ida_domain.TMS2_addc

TMS2_addh = _ida_domain.TMS2_addh

TMS2_addk = _ida_domain.TMS2_addk

TMS2_adds = _ida_domain.TMS2_adds

TMS2_addt = _ida_domain.TMS2_addt

TMS2_adlk = _ida_domain.TMS2_adlk

TMS2_adrk = _ida_domain.TMS2_adrk

TMS2_and = _ida_domain.TMS2_and

TMS2_andk = _ida_domain.TMS2_andk

TMS2_apac = _ida_domain.TMS2_apac

TMS2_b = _ida_domain.TMS2_b

TMS2_bacc = _ida_domain.TMS2_bacc

TMS2_banz = _ida_domain.TMS2_banz

TMS2_bbnz = _ida_domain.TMS2_bbnz

TMS2_bbz = _ida_domain.TMS2_bbz

TMS2_bc = _ida_domain.TMS2_bc

TMS2_bgez = _ida_domain.TMS2_bgez

TMS2_bgz = _ida_domain.TMS2_bgz

TMS2_bioz = _ida_domain.TMS2_bioz

TMS2_bit = _ida_domain.TMS2_bit

TMS2_bitt = _ida_domain.TMS2_bitt

TMS2_blez = _ida_domain.TMS2_blez

TMS2_blkd = _ida_domain.TMS2_blkd

TMS2_blkp = _ida_domain.TMS2_blkp

TMS2_blz = _ida_domain.TMS2_blz

TMS2_bnc = _ida_domain.TMS2_bnc

TMS2_bnv = _ida_domain.TMS2_bnv

TMS2_bnz = _ida_domain.TMS2_bnz

TMS2_bv = _ida_domain.TMS2_bv

TMS2_bz = _ida_domain.TMS2_bz

TMS2_cala = _ida_domain.TMS2_cala

TMS2_call = _ida_domain.TMS2_call

TMS2_cmpl = _ida_domain.TMS2_cmpl

TMS2_cmpr = _ida_domain.TMS2_cmpr

TMS2_cnfd = _ida_domain.TMS2_cnfd

TMS2_cnfp = _ida_domain.TMS2_cnfp

TMS2_conf = _ida_domain.TMS2_conf

TMS2_dint = _ida_domain.TMS2_dint

TMS2_dmov = _ida_domain.TMS2_dmov

TMS2_eint = _ida_domain.TMS2_eint

TMS2_fort = _ida_domain.TMS2_fort

TMS2_idle = _ida_domain.TMS2_idle

TMS2_in = _ida_domain.TMS2_in

TMS2_lac = _ida_domain.TMS2_lac

TMS2_lack = _ida_domain.TMS2_lack

TMS2_lact = _ida_domain.TMS2_lact

TMS2_lalk = _ida_domain.TMS2_lalk

TMS2_lar = _ida_domain.TMS2_lar

TMS2_lark = _ida_domain.TMS2_lark

TMS2_larp = _ida_domain.TMS2_larp

TMS2_ldp = _ida_domain.TMS2_ldp

TMS2_ldpk = _ida_domain.TMS2_ldpk

TMS2_lph = _ida_domain.TMS2_lph

TMS2_lrlk = _ida_domain.TMS2_lrlk

TMS2_lst = _ida_domain.TMS2_lst

TMS2_lst1 = _ida_domain.TMS2_lst1

TMS2_lt = _ida_domain.TMS2_lt

TMS2_lta = _ida_domain.TMS2_lta

TMS2_ltd = _ida_domain.TMS2_ltd

TMS2_ltp = _ida_domain.TMS2_ltp

TMS2_lts = _ida_domain.TMS2_lts

TMS2_mac = _ida_domain.TMS2_mac

TMS2_macd = _ida_domain.TMS2_macd

TMS2_mar = _ida_domain.TMS2_mar

TMS2_mpy = _ida_domain.TMS2_mpy

TMS2_mpya = _ida_domain.TMS2_mpya

TMS2_mpyk = _ida_domain.TMS2_mpyk

TMS2_mpys = _ida_domain.TMS2_mpys

TMS2_mpyu = _ida_domain.TMS2_mpyu

TMS2_neg = _ida_domain.TMS2_neg

TMS2_nop = _ida_domain.TMS2_nop

TMS2_norm = _ida_domain.TMS2_norm

TMS2_or = _ida_domain.TMS2_or

TMS2_ork = _ida_domain.TMS2_ork

TMS2_out = _ida_domain.TMS2_out

TMS2_pac = _ida_domain.TMS2_pac

TMS2_pop = _ida_domain.TMS2_pop

TMS2_popd = _ida_domain.TMS2_popd

TMS2_pshd = _ida_domain.TMS2_pshd

TMS2_push = _ida_domain.TMS2_push

TMS2_rc = _ida_domain.TMS2_rc

TMS2_ret = _ida_domain.TMS2_ret

TMS2_rfsm = _ida_domain.TMS2_rfsm

TMS2_rhm = _ida_domain.TMS2_rhm

TMS2_rol = _ida_domain.TMS2_rol

TMS2_ror = _ida_domain.TMS2_ror

TMS2_rovm = _ida_domain.TMS2_rovm

TMS2_rpt = _ida_domain.TMS2_rpt

TMS2_rptk = _ida_domain.TMS2_rptk

TMS2_rsxm = _ida_domain.TMS2_rsxm

TMS2_rtc = _ida_domain.TMS2_rtc

TMS2_rtxm = _ida_domain.TMS2_rtxm

TMS2_rxf = _ida_domain.TMS2_rxf

TMS2_sach = _ida_domain.TMS2_sach

TMS2_sacl = _ida_domain.TMS2_sacl

TMS2_sar = _ida_domain.TMS2_sar

TMS2_sblk = _ida_domain.TMS2_sblk

TMS2_sbrk = _ida_domain.TMS2_sbrk

TMS2_sc = _ida_domain.TMS2_sc

TMS2_sfl = _ida_domain.TMS2_sfl

TMS2_sfr = _ida_domain.TMS2_sfr

TMS2_sfsm = _ida_domain.TMS2_sfsm

TMS2_shm = _ida_domain.TMS2_shm

TMS2_sovm = _ida_domain.TMS2_sovm

TMS2_spac = _ida_domain.TMS2_spac

TMS2_sph = _ida_domain.TMS2_sph

TMS2_spl = _ida_domain.TMS2_spl

TMS2_spm = _ida_domain.TMS2_spm

TMS2_sqra = _ida_domain.TMS2_sqra

TMS2_sqrs = _ida_domain.TMS2_sqrs

TMS2_sst = _ida_domain.TMS2_sst

TMS2_sst1 = _ida_domain.TMS2_sst1

TMS2_ssxm = _ida_domain.TMS2_ssxm

TMS2_stc = _ida_domain.TMS2_stc

TMS2_stxm = _ida_domain.TMS2_stxm

TMS2_sub = _ida_domain.TMS2_sub

TMS2_subb = _ida_domain.TMS2_subb

TMS2_subc = _ida_domain.TMS2_subc

TMS2_subh = _ida_domain.TMS2_subh

TMS2_subk = _ida_domain.TMS2_subk

TMS2_subs = _ida_domain.TMS2_subs

TMS2_subt = _ida_domain.TMS2_subt

TMS2_sxf = _ida_domain.TMS2_sxf

TMS2_tblr = _ida_domain.TMS2_tblr

TMS2_tblw = _ida_domain.TMS2_tblw

TMS2_trap = _ida_domain.TMS2_trap

TMS2_xor = _ida_domain.TMS2_xor

TMS2_xork = _ida_domain.TMS2_xork

TMS2_zac = _ida_domain.TMS2_zac

TMS2_zalh = _ida_domain.TMS2_zalh

TMS2_zalr = _ida_domain.TMS2_zalr

TMS2_zals = _ida_domain.TMS2_zals

TMS_last = _ida_domain.TMS_last

M65_null = _ida_domain.M65_null

M65_adc = _ida_domain.M65_adc

M65_anc = _ida_domain.M65_anc

M65_and = _ida_domain.M65_and

M65_ane = _ida_domain.M65_ane

M65_arr = _ida_domain.M65_arr

M65_asl = _ida_domain.M65_asl

M65_asr = _ida_domain.M65_asr

M65_bcc = _ida_domain.M65_bcc

M65_bcs = _ida_domain.M65_bcs

M65_beq = _ida_domain.M65_beq

M65_bit = _ida_domain.M65_bit

M65_bmi = _ida_domain.M65_bmi

M65_bne = _ida_domain.M65_bne

M65_bpl = _ida_domain.M65_bpl

M65_brk = _ida_domain.M65_brk

M65_bvc = _ida_domain.M65_bvc

M65_bvs = _ida_domain.M65_bvs

M65_clc = _ida_domain.M65_clc

M65_cld = _ida_domain.M65_cld

M65_cli = _ida_domain.M65_cli

M65_clv = _ida_domain.M65_clv

M65_cmp = _ida_domain.M65_cmp

M65_cpx = _ida_domain.M65_cpx

M65_cpy = _ida_domain.M65_cpy

M65_dcp = _ida_domain.M65_dcp

M65_dec = _ida_domain.M65_dec

M65_dex = _ida_domain.M65_dex

M65_dey = _ida_domain.M65_dey

M65_eor = _ida_domain.M65_eor

M65_inc = _ida_domain.M65_inc

M65_inx = _ida_domain.M65_inx

M65_iny = _ida_domain.M65_iny

M65_isb = _ida_domain.M65_isb

M65_jmp = _ida_domain.M65_jmp

M65_jmpi = _ida_domain.M65_jmpi

M65_jsr = _ida_domain.M65_jsr

M65_lae = _ida_domain.M65_lae

M65_lax = _ida_domain.M65_lax

M65_lda = _ida_domain.M65_lda

M65_ldx = _ida_domain.M65_ldx

M65_ldy = _ida_domain.M65_ldy

M65_lsr = _ida_domain.M65_lsr

M65_lxa = _ida_domain.M65_lxa

M65_nop = _ida_domain.M65_nop

M65_ora = _ida_domain.M65_ora

M65_pha = _ida_domain.M65_pha

M65_php = _ida_domain.M65_php

M65_pla = _ida_domain.M65_pla

M65_plp = _ida_domain.M65_plp

M65_rla = _ida_domain.M65_rla

M65_rol = _ida_domain.M65_rol

M65_ror = _ida_domain.M65_ror

M65_rra = _ida_domain.M65_rra

M65_rti = _ida_domain.M65_rti

M65_rts = _ida_domain.M65_rts

M65_sax = _ida_domain.M65_sax

M65_sbc = _ida_domain.M65_sbc

M65_sbx = _ida_domain.M65_sbx

M65_sec = _ida_domain.M65_sec

M65_sed = _ida_domain.M65_sed

M65_sei = _ida_domain.M65_sei

M65_sha = _ida_domain.M65_sha

M65_shs = _ida_domain.M65_shs

M65_shx = _ida_domain.M65_shx

M65_shy = _ida_domain.M65_shy

M65_slo = _ida_domain.M65_slo

M65_sre = _ida_domain.M65_sre

M65_sta = _ida_domain.M65_sta

M65_stx = _ida_domain.M65_stx

M65_sty = _ida_domain.M65_sty

M65_tax = _ida_domain.M65_tax

M65_tay = _ida_domain.M65_tay

M65_tsx = _ida_domain.M65_tsx

M65_txa = _ida_domain.M65_txa

M65_txs = _ida_domain.M65_txs

M65_tya = _ida_domain.M65_tya

M65_bbr0 = _ida_domain.M65_bbr0

M65_bbr1 = _ida_domain.M65_bbr1

M65_bbr2 = _ida_domain.M65_bbr2

M65_bbr3 = _ida_domain.M65_bbr3

M65_bbr4 = _ida_domain.M65_bbr4

M65_bbr5 = _ida_domain.M65_bbr5

M65_bbr6 = _ida_domain.M65_bbr6

M65_bbr7 = _ida_domain.M65_bbr7

M65_bbs0 = _ida_domain.M65_bbs0

M65_bbs1 = _ida_domain.M65_bbs1

M65_bbs2 = _ida_domain.M65_bbs2

M65_bbs3 = _ida_domain.M65_bbs3

M65_bbs4 = _ida_domain.M65_bbs4

M65_bbs5 = _ida_domain.M65_bbs5

M65_bbs6 = _ida_domain.M65_bbs6

M65_bbs7 = _ida_domain.M65_bbs7

M65_rmb0 = _ida_domain.M65_rmb0

M65_rmb1 = _ida_domain.M65_rmb1

M65_rmb2 = _ida_domain.M65_rmb2

M65_rmb3 = _ida_domain.M65_rmb3

M65_rmb4 = _ida_domain.M65_rmb4

M65_rmb5 = _ida_domain.M65_rmb5

M65_rmb6 = _ida_domain.M65_rmb6

M65_rmb7 = _ida_domain.M65_rmb7

M65_smb0 = _ida_domain.M65_smb0

M65_smb1 = _ida_domain.M65_smb1

M65_smb2 = _ida_domain.M65_smb2

M65_smb3 = _ida_domain.M65_smb3

M65_smb4 = _ida_domain.M65_smb4

M65_smb5 = _ida_domain.M65_smb5

M65_smb6 = _ida_domain.M65_smb6

M65_smb7 = _ida_domain.M65_smb7

M65_stz = _ida_domain.M65_stz

M65_tsb = _ida_domain.M65_tsb

M65_trb = _ida_domain.M65_trb

M65_phy = _ida_domain.M65_phy

M65_ply = _ida_domain.M65_ply

M65_phx = _ida_domain.M65_phx

M65_plx = _ida_domain.M65_plx

M65_bra = _ida_domain.M65_bra

M65_wai = _ida_domain.M65_wai

M65_stp = _ida_domain.M65_stp

M65_last = _ida_domain.M65_last

M65816_null = _ida_domain.M65816_null

M65816_adc = _ida_domain.M65816_adc

M65816_and = _ida_domain.M65816_and

M65816_asl = _ida_domain.M65816_asl

M65816_bcc = _ida_domain.M65816_bcc

M65816_bcs = _ida_domain.M65816_bcs

M65816_beq = _ida_domain.M65816_beq

M65816_bit = _ida_domain.M65816_bit

M65816_bmi = _ida_domain.M65816_bmi

M65816_bne = _ida_domain.M65816_bne

M65816_bpl = _ida_domain.M65816_bpl

M65816_bra = _ida_domain.M65816_bra

M65816_brk = _ida_domain.M65816_brk

M65816_brl = _ida_domain.M65816_brl

M65816_bvc = _ida_domain.M65816_bvc

M65816_bvs = _ida_domain.M65816_bvs

M65816_clc = _ida_domain.M65816_clc

M65816_cld = _ida_domain.M65816_cld

M65816_cli = _ida_domain.M65816_cli

M65816_clv = _ida_domain.M65816_clv

M65816_cmp = _ida_domain.M65816_cmp

M65816_cop = _ida_domain.M65816_cop

M65816_cpx = _ida_domain.M65816_cpx

M65816_cpy = _ida_domain.M65816_cpy

M65816_dec = _ida_domain.M65816_dec

M65816_dex = _ida_domain.M65816_dex

M65816_dey = _ida_domain.M65816_dey

M65816_eor = _ida_domain.M65816_eor

M65816_inc = _ida_domain.M65816_inc

M65816_inx = _ida_domain.M65816_inx

M65816_iny = _ida_domain.M65816_iny

M65816_jml = _ida_domain.M65816_jml

M65816_jmp = _ida_domain.M65816_jmp

M65816_jsl = _ida_domain.M65816_jsl

M65816_jsr = _ida_domain.M65816_jsr

M65816_lda = _ida_domain.M65816_lda

M65816_ldx = _ida_domain.M65816_ldx

M65816_ldy = _ida_domain.M65816_ldy

M65816_lsr = _ida_domain.M65816_lsr

M65816_mvn = _ida_domain.M65816_mvn

M65816_mvp = _ida_domain.M65816_mvp

M65816_nop = _ida_domain.M65816_nop

M65816_ora = _ida_domain.M65816_ora

M65816_pea = _ida_domain.M65816_pea

M65816_pei = _ida_domain.M65816_pei

M65816_per = _ida_domain.M65816_per

M65816_pha = _ida_domain.M65816_pha

M65816_phb = _ida_domain.M65816_phb

M65816_phd = _ida_domain.M65816_phd

M65816_phk = _ida_domain.M65816_phk

M65816_php = _ida_domain.M65816_php

M65816_phx = _ida_domain.M65816_phx

M65816_phy = _ida_domain.M65816_phy

M65816_pla = _ida_domain.M65816_pla

M65816_plb = _ida_domain.M65816_plb

M65816_pld = _ida_domain.M65816_pld

M65816_plp = _ida_domain.M65816_plp

M65816_plx = _ida_domain.M65816_plx

M65816_ply = _ida_domain.M65816_ply

M65816_rep = _ida_domain.M65816_rep

M65816_rol = _ida_domain.M65816_rol

M65816_ror = _ida_domain.M65816_ror

M65816_rti = _ida_domain.M65816_rti

M65816_rtl = _ida_domain.M65816_rtl

M65816_rts = _ida_domain.M65816_rts

M65816_sbc = _ida_domain.M65816_sbc

M65816_sec = _ida_domain.M65816_sec

M65816_sed = _ida_domain.M65816_sed

M65816_sei = _ida_domain.M65816_sei

M65816_sep = _ida_domain.M65816_sep

M65816_sta = _ida_domain.M65816_sta

M65816_stp = _ida_domain.M65816_stp

M65816_stx = _ida_domain.M65816_stx

M65816_sty = _ida_domain.M65816_sty

M65816_stz = _ida_domain.M65816_stz

M65816_tax = _ida_domain.M65816_tax

M65816_tay = _ida_domain.M65816_tay

M65816_tcd = _ida_domain.M65816_tcd

M65816_tcs = _ida_domain.M65816_tcs

M65816_tdc = _ida_domain.M65816_tdc

M65816_trb = _ida_domain.M65816_trb

M65816_tsb = _ida_domain.M65816_tsb

M65816_tsc = _ida_domain.M65816_tsc

M65816_tsx = _ida_domain.M65816_tsx

M65816_txa = _ida_domain.M65816_txa

M65816_txs = _ida_domain.M65816_txs

M65816_txy = _ida_domain.M65816_txy

M65816_tya = _ida_domain.M65816_tya

M65816_tyx = _ida_domain.M65816_tyx

M65816_wai = _ida_domain.M65816_wai

M65816_wdm = _ida_domain.M65816_wdm

M65816_xba = _ida_domain.M65816_xba

M65816_xce = _ida_domain.M65816_xce

M65816_last = _ida_domain.M65816_last

pdp_null = _ida_domain.pdp_null

pdp_halt = _ida_domain.pdp_halt

pdp_wait = _ida_domain.pdp_wait

pdp_rti = _ida_domain.pdp_rti

pdp_bpt = _ida_domain.pdp_bpt

pdp_iot = _ida_domain.pdp_iot

pdp_reset = _ida_domain.pdp_reset

pdp_rtt = _ida_domain.pdp_rtt

pdp_mfpt = _ida_domain.pdp_mfpt

pdp_jmp = _ida_domain.pdp_jmp

pdp_rts = _ida_domain.pdp_rts

pdp_spl = _ida_domain.pdp_spl

pdp_nop = _ida_domain.pdp_nop

pdp_clc = _ida_domain.pdp_clc

pdp_clv = _ida_domain.pdp_clv

pdp_clz = _ida_domain.pdp_clz

pdp_cln = _ida_domain.pdp_cln

pdp_ccc = _ida_domain.pdp_ccc

pdp_sec = _ida_domain.pdp_sec

pdp_sev = _ida_domain.pdp_sev

pdp_sez = _ida_domain.pdp_sez

pdp_sen = _ida_domain.pdp_sen

pdp_scc = _ida_domain.pdp_scc

pdp_swab = _ida_domain.pdp_swab

pdp_br = _ida_domain.pdp_br

pdp_bne = _ida_domain.pdp_bne

pdp_beq = _ida_domain.pdp_beq

pdp_bge = _ida_domain.pdp_bge

pdp_blt = _ida_domain.pdp_blt

pdp_bgt = _ida_domain.pdp_bgt

pdp_ble = _ida_domain.pdp_ble

pdp_jsr = _ida_domain.pdp_jsr

pdp_clr = _ida_domain.pdp_clr

pdp_com = _ida_domain.pdp_com

pdp_inc = _ida_domain.pdp_inc

pdp_dec = _ida_domain.pdp_dec

pdp_neg = _ida_domain.pdp_neg

pdp_adc = _ida_domain.pdp_adc

pdp_sbc = _ida_domain.pdp_sbc

pdp_tst = _ida_domain.pdp_tst

pdp_ror = _ida_domain.pdp_ror

pdp_rol = _ida_domain.pdp_rol

pdp_asr = _ida_domain.pdp_asr

pdp_asl = _ida_domain.pdp_asl

pdp_mark = _ida_domain.pdp_mark

pdp_mfpi = _ida_domain.pdp_mfpi

pdp_mtpi = _ida_domain.pdp_mtpi

pdp_sxt = _ida_domain.pdp_sxt

pdp_mov = _ida_domain.pdp_mov

pdp_cmp = _ida_domain.pdp_cmp

pdp_bit = _ida_domain.pdp_bit

pdp_bic = _ida_domain.pdp_bic

pdp_bis = _ida_domain.pdp_bis

pdp_add = _ida_domain.pdp_add

pdp_sub = _ida_domain.pdp_sub

pdp_mul = _ida_domain.pdp_mul

pdp_div = _ida_domain.pdp_div

pdp_ash = _ida_domain.pdp_ash

pdp_ashc = _ida_domain.pdp_ashc

pdp_xor = _ida_domain.pdp_xor

pdp_fadd = _ida_domain.pdp_fadd

pdp_fsub = _ida_domain.pdp_fsub

pdp_fmul = _ida_domain.pdp_fmul

pdp_fdiv = _ida_domain.pdp_fdiv

pdp_sob = _ida_domain.pdp_sob

pdp_bpl = _ida_domain.pdp_bpl

pdp_bmi = _ida_domain.pdp_bmi

pdp_bhi = _ida_domain.pdp_bhi

pdp_blos = _ida_domain.pdp_blos

pdp_bvc = _ida_domain.pdp_bvc

pdp_bvs = _ida_domain.pdp_bvs

pdp_bcc = _ida_domain.pdp_bcc

pdp_bcs = _ida_domain.pdp_bcs

pdp_emt = _ida_domain.pdp_emt

pdp_trap = _ida_domain.pdp_trap

pdp_mtps = _ida_domain.pdp_mtps

pdp_mfpd = _ida_domain.pdp_mfpd

pdp_mtpd = _ida_domain.pdp_mtpd

pdp_mfps = _ida_domain.pdp_mfps

pdp_cfcc = _ida_domain.pdp_cfcc

pdp_setf = _ida_domain.pdp_setf

pdp_seti = _ida_domain.pdp_seti

pdp_setd = _ida_domain.pdp_setd

pdp_setl = _ida_domain.pdp_setl

pdp_ldfps = _ida_domain.pdp_ldfps

pdp_stfps = _ida_domain.pdp_stfps

pdp_stst = _ida_domain.pdp_stst

pdp_clrd = _ida_domain.pdp_clrd

pdp_tstd = _ida_domain.pdp_tstd

pdp_absd = _ida_domain.pdp_absd

pdp_negd = _ida_domain.pdp_negd

pdp_muld = _ida_domain.pdp_muld

pdp_modd = _ida_domain.pdp_modd

pdp_addd = _ida_domain.pdp_addd

pdp_ldd = _ida_domain.pdp_ldd

pdp_subd = _ida_domain.pdp_subd

pdp_cmpd = _ida_domain.pdp_cmpd

pdp_std = _ida_domain.pdp_std

pdp_divd = _ida_domain.pdp_divd

pdp_stexp = _ida_domain.pdp_stexp

pdp_stcdi = _ida_domain.pdp_stcdi

pdp_stcdf = _ida_domain.pdp_stcdf

pdp_ldexp = _ida_domain.pdp_ldexp

pdp_ldcif = _ida_domain.pdp_ldcif

pdp_ldcfd = _ida_domain.pdp_ldcfd

pdp_call = _ida_domain.pdp_call

pdp_return = _ida_domain.pdp_return

pdp_compcc = _ida_domain.pdp_compcc

pdp_last = _ida_domain.pdp_last

mc_null = _ida_domain.mc_null

mc_abcd = _ida_domain.mc_abcd

mc_add = _ida_domain.mc_add

mc_adda = _ida_domain.mc_adda

mc_addi = _ida_domain.mc_addi

mc_addq = _ida_domain.mc_addq

mc_addx = _ida_domain.mc_addx

mc_and = _ida_domain.mc_and

mc_andi = _ida_domain.mc_andi

mc_asl = _ida_domain.mc_asl

mc_asr = _ida_domain.mc_asr

mc_b = _ida_domain.mc_b

mc_bchg = _ida_domain.mc_bchg

mc_bclr = _ida_domain.mc_bclr

mc_bftst = _ida_domain.mc_bftst

mc_bfchg = _ida_domain.mc_bfchg

mc_bfclr = _ida_domain.mc_bfclr

mc_bfset = _ida_domain.mc_bfset

mc_bfextu = _ida_domain.mc_bfextu

mc_bfexts = _ida_domain.mc_bfexts

mc_bfffo = _ida_domain.mc_bfffo

mc_bfins = _ida_domain.mc_bfins

mc_bgnd = _ida_domain.mc_bgnd

mc_bkpt = _ida_domain.mc_bkpt

mc_bra = _ida_domain.mc_bra

mc_bset = _ida_domain.mc_bset

mc_bsr = _ida_domain.mc_bsr

mc_btst = _ida_domain.mc_btst

mc_callm = _ida_domain.mc_callm

mc_cas = _ida_domain.mc_cas

mc_cas2 = _ida_domain.mc_cas2

mc_chk = _ida_domain.mc_chk

mc_chk2 = _ida_domain.mc_chk2

mc_cinv = _ida_domain.mc_cinv

mc_clr = _ida_domain.mc_clr

mc_cmp = _ida_domain.mc_cmp

mc_cmp2 = _ida_domain.mc_cmp2

mc_cmpa = _ida_domain.mc_cmpa

mc_cmpi = _ida_domain.mc_cmpi

mc_cmpm = _ida_domain.mc_cmpm

mc_cpush = _ida_domain.mc_cpush

mc_db = _ida_domain.mc_db

mc_divs = _ida_domain.mc_divs

mc_divsl = _ida_domain.mc_divsl

mc_divu = _ida_domain.mc_divu

mc_divul = _ida_domain.mc_divul

mc_eor = _ida_domain.mc_eor

mc_eori = _ida_domain.mc_eori

mc_exg = _ida_domain.mc_exg

mc_ext = _ida_domain.mc_ext

mc_extb = _ida_domain.mc_extb

mc_fabs = _ida_domain.mc_fabs

mc_facos = _ida_domain.mc_facos

mc_fadd = _ida_domain.mc_fadd

mc_fasin = _ida_domain.mc_fasin

mc_fatan = _ida_domain.mc_fatan

mc_fatanh = _ida_domain.mc_fatanh

mc_fb = _ida_domain.mc_fb

mc_fcmp = _ida_domain.mc_fcmp

mc_fcos = _ida_domain.mc_fcos

mc_fcosh = _ida_domain.mc_fcosh

mc_fdabs = _ida_domain.mc_fdabs

mc_fdadd = _ida_domain.mc_fdadd

mc_fdb = _ida_domain.mc_fdb

mc_fddiv = _ida_domain.mc_fddiv

mc_fdiv = _ida_domain.mc_fdiv

mc_fdmove = _ida_domain.mc_fdmove

mc_fdmul = _ida_domain.mc_fdmul

mc_fdneg = _ida_domain.mc_fdneg

mc_fdsqrt = _ida_domain.mc_fdsqrt

mc_fdsub = _ida_domain.mc_fdsub

mc_fetox = _ida_domain.mc_fetox

mc_fetoxm1 = _ida_domain.mc_fetoxm1

mc_fgetexp = _ida_domain.mc_fgetexp

mc_fgetman = _ida_domain.mc_fgetman

mc_fint = _ida_domain.mc_fint

mc_fintrz = _ida_domain.mc_fintrz

mc_flog2 = _ida_domain.mc_flog2

mc_flog10 = _ida_domain.mc_flog10

mc_flogn = _ida_domain.mc_flogn

mc_flognp1 = _ida_domain.mc_flognp1

mc_fmod = _ida_domain.mc_fmod

mc_fmove = _ida_domain.mc_fmove

mc_fmovecr = _ida_domain.mc_fmovecr

mc_fmovem = _ida_domain.mc_fmovem

mc_fmul = _ida_domain.mc_fmul

mc_fneg = _ida_domain.mc_fneg

mc_fnop = _ida_domain.mc_fnop

mc_frem = _ida_domain.mc_frem

mc_frestore = _ida_domain.mc_frestore

mc_fs = _ida_domain.mc_fs

mc_fsabs = _ida_domain.mc_fsabs

mc_fsadd = _ida_domain.mc_fsadd

mc_fsave = _ida_domain.mc_fsave

mc_fscale = _ida_domain.mc_fscale

mc_fsdiv = _ida_domain.mc_fsdiv

mc_fsgldiv = _ida_domain.mc_fsgldiv

mc_fsglmul = _ida_domain.mc_fsglmul

mc_fsin = _ida_domain.mc_fsin

mc_fsincos = _ida_domain.mc_fsincos

mc_fsinh = _ida_domain.mc_fsinh

mc_fsmove = _ida_domain.mc_fsmove

mc_fsmul = _ida_domain.mc_fsmul

mc_fsneg = _ida_domain.mc_fsneg

mc_fsqrt = _ida_domain.mc_fsqrt

mc_fssqrt = _ida_domain.mc_fssqrt

mc_fssub = _ida_domain.mc_fssub

mc_fsub = _ida_domain.mc_fsub

mc_ftan = _ida_domain.mc_ftan

mc_ftanh = _ida_domain.mc_ftanh

mc_ftentox = _ida_domain.mc_ftentox

mc_ftrap = _ida_domain.mc_ftrap

mc_ftst = _ida_domain.mc_ftst

mc_ftwotox = _ida_domain.mc_ftwotox

mc_halt = _ida_domain.mc_halt

mc_illegal = _ida_domain.mc_illegal

mc_jmp = _ida_domain.mc_jmp

mc_jsr = _ida_domain.mc_jsr

mc_lea = _ida_domain.mc_lea

mc_link = _ida_domain.mc_link

mc_lpstop = _ida_domain.mc_lpstop

mc_lsl = _ida_domain.mc_lsl

mc_lsr = _ida_domain.mc_lsr

mc_mac = _ida_domain.mc_mac

mc_macl = _ida_domain.mc_macl

mc_move = _ida_domain.mc_move

mc_move16 = _ida_domain.mc_move16

mc_movea = _ida_domain.mc_movea

mc_movec = _ida_domain.mc_movec

mc_movem = _ida_domain.mc_movem

mc_movep = _ida_domain.mc_movep

mc_moveq = _ida_domain.mc_moveq

mc_moves = _ida_domain.mc_moves

mc_msac = _ida_domain.mc_msac

mc_msacl = _ida_domain.mc_msacl

mc_muls = _ida_domain.mc_muls

mc_mulu = _ida_domain.mc_mulu

mc_nbcd = _ida_domain.mc_nbcd

mc_neg = _ida_domain.mc_neg

mc_negx = _ida_domain.mc_negx

mc_nop = _ida_domain.mc_nop

mc_not = _ida_domain.mc_not

mc_or = _ida_domain.mc_or

mc_ori = _ida_domain.mc_ori

mc_pack = _ida_domain.mc_pack

mc_pea = _ida_domain.mc_pea

mc_pb = _ida_domain.mc_pb

mc_pdb = _ida_domain.mc_pdb

mc_pflush = _ida_domain.mc_pflush

mc_pflushr = _ida_domain.mc_pflushr

mc_ploadr = _ida_domain.mc_ploadr

mc_ploadw = _ida_domain.mc_ploadw

mc_pmove = _ida_domain.mc_pmove

mc_prestore = _ida_domain.mc_prestore

mc_psave = _ida_domain.mc_psave

mc_ps = _ida_domain.mc_ps

mc_ptestr = _ida_domain.mc_ptestr

mc_ptestw = _ida_domain.mc_ptestw

mc_ptrap = _ida_domain.mc_ptrap

mc_pulse = _ida_domain.mc_pulse

mc_pvalid = _ida_domain.mc_pvalid

mc_rol = _ida_domain.mc_rol

mc_ror = _ida_domain.mc_ror

mc_roxl = _ida_domain.mc_roxl

mc_roxr = _ida_domain.mc_roxr

mc_reset = _ida_domain.mc_reset

mc_rtd = _ida_domain.mc_rtd

mc_rte = _ida_domain.mc_rte

mc_rtm = _ida_domain.mc_rtm

mc_rtr = _ida_domain.mc_rtr

mc_rts = _ida_domain.mc_rts

mc_sbcd = _ida_domain.mc_sbcd

mc_s = _ida_domain.mc_s

mc_stop = _ida_domain.mc_stop

mc_sub = _ida_domain.mc_sub

mc_suba = _ida_domain.mc_suba

mc_subi = _ida_domain.mc_subi

mc_subq = _ida_domain.mc_subq

mc_subx = _ida_domain.mc_subx

mc_swap = _ida_domain.mc_swap

mc_tas = _ida_domain.mc_tas

mc_tbl = _ida_domain.mc_tbl

mc_trap = _ida_domain.mc_trap

mc_trapv = _ida_domain.mc_trapv

mc_tst = _ida_domain.mc_tst

mc_unlk = _ida_domain.mc_unlk

mc_unpk = _ida_domain.mc_unpk

mc_wddata = _ida_domain.mc_wddata

mc_wdebug = _ida_domain.mc_wdebug

mc_atrap = _ida_domain.mc_atrap

mc_bitrev = _ida_domain.mc_bitrev

mc_byterev = _ida_domain.mc_byterev

mc_ff1 = _ida_domain.mc_ff1

mc_intouch = _ida_domain.mc_intouch

mc_mov3q = _ida_domain.mc_mov3q

mc_mvs = _ida_domain.mc_mvs

mc_mvz = _ida_domain.mc_mvz

mc_sats = _ida_domain.mc_sats

mc_movclr = _ida_domain.mc_movclr

mc_maaac = _ida_domain.mc_maaac

mc_masac = _ida_domain.mc_masac

mc_msaac = _ida_domain.mc_msaac

mc_mssac = _ida_domain.mc_mssac

mc_remsl = _ida_domain.mc_remsl

mc_remul = _ida_domain.mc_remul

mc_last = _ida_domain.mc_last

mc8_null = _ida_domain.mc8_null

mc8_aba = _ida_domain.mc8_aba

mc8_ab = _ida_domain.mc8_ab

mc8_adc = _ida_domain.mc8_adc

mc8_add = _ida_domain.mc8_add

mc8_addd = _ida_domain.mc8_addd

mc8_ais = _ida_domain.mc8_ais

mc8_aix = _ida_domain.mc8_aix

mc8_and = _ida_domain.mc8_and

mc8_andcc = _ida_domain.mc8_andcc

mc8_asr = _ida_domain.mc8_asr

mc8_bcc = _ida_domain.mc8_bcc

mc8_bclr = _ida_domain.mc8_bclr

mc8_bcs = _ida_domain.mc8_bcs

mc8_beq = _ida_domain.mc8_beq

mc8_bge = _ida_domain.mc8_bge

mc8_bgt = _ida_domain.mc8_bgt

mc8_bhcc = _ida_domain.mc8_bhcc

mc8_bhcs = _ida_domain.mc8_bhcs

mc8_bhi = _ida_domain.mc8_bhi

mc8_bhs = _ida_domain.mc8_bhs

mc8_bih = _ida_domain.mc8_bih

mc8_bil = _ida_domain.mc8_bil

mc8_bit = _ida_domain.mc8_bit

mc8_ble = _ida_domain.mc8_ble

mc8_blo = _ida_domain.mc8_blo

mc8_bls = _ida_domain.mc8_bls

mc8_blt = _ida_domain.mc8_blt

mc8_bmc = _ida_domain.mc8_bmc

mc8_bmi = _ida_domain.mc8_bmi

mc8_bms = _ida_domain.mc8_bms

mc8_bne = _ida_domain.mc8_bne

mc8_bpl = _ida_domain.mc8_bpl

mc8_bra = _ida_domain.mc8_bra

mc8_brclr = _ida_domain.mc8_brclr

mc8_brn = _ida_domain.mc8_brn

mc8_brset = _ida_domain.mc8_brset

mc8_bset = _ida_domain.mc8_bset

mc8_bsr = _ida_domain.mc8_bsr

mc8_bvc = _ida_domain.mc8_bvc

mc8_bvs = _ida_domain.mc8_bvs

mc8_cba = _ida_domain.mc8_cba

mc8_cbeq = _ida_domain.mc8_cbeq

mc8_clc = _ida_domain.mc8_clc

mc8_cli = _ida_domain.mc8_cli

mc8_clr = _ida_domain.mc8_clr

mc8_clv = _ida_domain.mc8_clv

mc8_cmp = _ida_domain.mc8_cmp

mc8_com = _ida_domain.mc8_com

mc8_cp = _ida_domain.mc8_cp

mc8_cpd = _ida_domain.mc8_cpd

mc8_cphx = _ida_domain.mc8_cphx

mc8_cpx = _ida_domain.mc8_cpx

mc8_cwai = _ida_domain.mc8_cwai

mc8_daa = _ida_domain.mc8_daa

mc8_dbnz = _ida_domain.mc8_dbnz

mc8_de = _ida_domain.mc8_de

mc8_dec = _ida_domain.mc8_dec

mc8_des = _ida_domain.mc8_des

mc8_div = _ida_domain.mc8_div

mc8_eor = _ida_domain.mc8_eor

mc8_exg = _ida_domain.mc8_exg

mc8_fdiv = _ida_domain.mc8_fdiv

mc8_idiv = _ida_domain.mc8_idiv

mc8_in = _ida_domain.mc8_in

mc8_inc = _ida_domain.mc8_inc

mc8_ins = _ida_domain.mc8_ins

mc8_jmp = _ida_domain.mc8_jmp

mc8_jsr = _ida_domain.mc8_jsr

mc8_ld = _ida_domain.mc8_ld

mc8_lda = _ida_domain.mc8_lda

mc8_ldd = _ida_domain.mc8_ldd

mc8_ldhx = _ida_domain.mc8_ldhx

mc8_lds = _ida_domain.mc8_lds

mc8_ldx = _ida_domain.mc8_ldx

mc8_lea = _ida_domain.mc8_lea

mc8_lsl = _ida_domain.mc8_lsl

mc8_lsld = _ida_domain.mc8_lsld

mc8_lsr = _ida_domain.mc8_lsr

mc8_lsrd = _ida_domain.mc8_lsrd

mc8_mov = _ida_domain.mc8_mov

mc8_mul = _ida_domain.mc8_mul

mc8_neg = _ida_domain.mc8_neg

mc8_nop = _ida_domain.mc8_nop

mc8_nsa = _ida_domain.mc8_nsa

mc8_ora = _ida_domain.mc8_ora

mc8_orcc = _ida_domain.mc8_orcc

mc8_psh = _ida_domain.mc8_psh

mc8_psha = _ida_domain.mc8_psha

mc8_pshb = _ida_domain.mc8_pshb

mc8_pshh = _ida_domain.mc8_pshh

mc8_pshx = _ida_domain.mc8_pshx

mc8_pul = _ida_domain.mc8_pul

mc8_pula = _ida_domain.mc8_pula

mc8_pulb = _ida_domain.mc8_pulb

mc8_pulh = _ida_domain.mc8_pulh

mc8_pulx = _ida_domain.mc8_pulx

mc8_rol = _ida_domain.mc8_rol

mc8_ror = _ida_domain.mc8_ror

mc8_rsp = _ida_domain.mc8_rsp

mc8_rti = _ida_domain.mc8_rti

mc8_rts = _ida_domain.mc8_rts

mc8_sba = _ida_domain.mc8_sba

mc8_sbc = _ida_domain.mc8_sbc

mc8_sec = _ida_domain.mc8_sec

mc8_sei = _ida_domain.mc8_sei

mc8_sev = _ida_domain.mc8_sev

mc8_sex = _ida_domain.mc8_sex

mc8_slp = _ida_domain.mc8_slp

mc8_st = _ida_domain.mc8_st

mc8_sta = _ida_domain.mc8_sta

mc8_std = _ida_domain.mc8_std

mc8_sthx = _ida_domain.mc8_sthx

mc8_stop = _ida_domain.mc8_stop

mc8_sts = _ida_domain.mc8_sts

mc8_stx = _ida_domain.mc8_stx

mc8_sub = _ida_domain.mc8_sub

mc8_subd = _ida_domain.mc8_subd

mc8_swi = _ida_domain.mc8_swi

mc8_sync = _ida_domain.mc8_sync

mc8_tab = _ida_domain.mc8_tab

mc8_tap = _ida_domain.mc8_tap

mc8_tax = _ida_domain.mc8_tax

mc8_tba = _ida_domain.mc8_tba

mc8_test = _ida_domain.mc8_test

mc8_tfr = _ida_domain.mc8_tfr

mc8_tpa = _ida_domain.mc8_tpa

mc8_ts = _ida_domain.mc8_ts

mc8_tst = _ida_domain.mc8_tst

mc8_tsx = _ida_domain.mc8_tsx

mc8_txa = _ida_domain.mc8_txa

mc8_txs = _ida_domain.mc8_txs

mc8_tys = _ida_domain.mc8_tys

mc8_wai = _ida_domain.mc8_wai

mc8_wait = _ida_domain.mc8_wait

mc8_xgd = _ida_domain.mc8_xgd

mc8_1 = _ida_domain.mc8_1

mc8_2 = _ida_domain.mc8_2

mc8_os9 = _ida_domain.mc8_os9

mc8_aim = _ida_domain.mc8_aim

mc8_oim = _ida_domain.mc8_oim

mc8_eim = _ida_domain.mc8_eim

mc8_tim = _ida_domain.mc8_tim

mc8_bgnd = _ida_domain.mc8_bgnd

mc8_call = _ida_domain.mc8_call

mc8_rtc = _ida_domain.mc8_rtc

mc8_skip1 = _ida_domain.mc8_skip1

mc8_skip2 = _ida_domain.mc8_skip2

mc8_last = _ida_domain.mc8_last

j_nop = _ida_domain.j_nop

j_aconst_null = _ida_domain.j_aconst_null

j_iconst_m1 = _ida_domain.j_iconst_m1

j_iconst_0 = _ida_domain.j_iconst_0

j_iconst_1 = _ida_domain.j_iconst_1

j_iconst_2 = _ida_domain.j_iconst_2

j_iconst_3 = _ida_domain.j_iconst_3

j_iconst_4 = _ida_domain.j_iconst_4

j_iconst_5 = _ida_domain.j_iconst_5

j_lconst_0 = _ida_domain.j_lconst_0

j_lconst_1 = _ida_domain.j_lconst_1

j_fconst_0 = _ida_domain.j_fconst_0

j_fconst_1 = _ida_domain.j_fconst_1

j_fconst_2 = _ida_domain.j_fconst_2

j_dconst_0 = _ida_domain.j_dconst_0

j_dconst_1 = _ida_domain.j_dconst_1

j_bipush = _ida_domain.j_bipush

j_sipush = _ida_domain.j_sipush

j_ldc = _ida_domain.j_ldc

j_ldcw = _ida_domain.j_ldcw

j_ldc2w = _ida_domain.j_ldc2w

j_iload = _ida_domain.j_iload

j_lload = _ida_domain.j_lload

j_fload = _ida_domain.j_fload

j_dload = _ida_domain.j_dload

j_aload = _ida_domain.j_aload

j_iload_0 = _ida_domain.j_iload_0

j_iload_1 = _ida_domain.j_iload_1

j_iload_2 = _ida_domain.j_iload_2

j_iload_3 = _ida_domain.j_iload_3

j_lload_0 = _ida_domain.j_lload_0

j_lload_1 = _ida_domain.j_lload_1

j_lload_2 = _ida_domain.j_lload_2

j_lload_3 = _ida_domain.j_lload_3

j_fload_0 = _ida_domain.j_fload_0

j_fload_1 = _ida_domain.j_fload_1

j_fload_2 = _ida_domain.j_fload_2

j_fload_3 = _ida_domain.j_fload_3

j_dload_0 = _ida_domain.j_dload_0

j_dload_1 = _ida_domain.j_dload_1

j_dload_2 = _ida_domain.j_dload_2

j_dload_3 = _ida_domain.j_dload_3

j_aload_0 = _ida_domain.j_aload_0

j_aload_1 = _ida_domain.j_aload_1

j_aload_2 = _ida_domain.j_aload_2

j_aload_3 = _ida_domain.j_aload_3

j_iaload = _ida_domain.j_iaload

j_laload = _ida_domain.j_laload

j_faload = _ida_domain.j_faload

j_daload = _ida_domain.j_daload

j_aaload = _ida_domain.j_aaload

j_baload = _ida_domain.j_baload

j_caload = _ida_domain.j_caload

j_saload = _ida_domain.j_saload

j_istore = _ida_domain.j_istore

j_lstore = _ida_domain.j_lstore

j_fstore = _ida_domain.j_fstore

j_dstore = _ida_domain.j_dstore

j_astore = _ida_domain.j_astore

j_istore_0 = _ida_domain.j_istore_0

j_istore_1 = _ida_domain.j_istore_1

j_istore_2 = _ida_domain.j_istore_2

j_istore_3 = _ida_domain.j_istore_3

j_lstore_0 = _ida_domain.j_lstore_0

j_lstore_1 = _ida_domain.j_lstore_1

j_lstore_2 = _ida_domain.j_lstore_2

j_lstore_3 = _ida_domain.j_lstore_3

j_fstore_0 = _ida_domain.j_fstore_0

j_fstore_1 = _ida_domain.j_fstore_1

j_fstore_2 = _ida_domain.j_fstore_2

j_fstore_3 = _ida_domain.j_fstore_3

j_dstore_0 = _ida_domain.j_dstore_0

j_dstore_1 = _ida_domain.j_dstore_1

j_dstore_2 = _ida_domain.j_dstore_2

j_dstore_3 = _ida_domain.j_dstore_3

j_astore_0 = _ida_domain.j_astore_0

j_astore_1 = _ida_domain.j_astore_1

j_astore_2 = _ida_domain.j_astore_2

j_astore_3 = _ida_domain.j_astore_3

j_iastore = _ida_domain.j_iastore

j_lastore = _ida_domain.j_lastore

j_fastore = _ida_domain.j_fastore

j_dastore = _ida_domain.j_dastore

j_aastore = _ida_domain.j_aastore

j_bastore = _ida_domain.j_bastore

j_castore = _ida_domain.j_castore

j_sastore = _ida_domain.j_sastore

j_pop = _ida_domain.j_pop

j_pop2 = _ida_domain.j_pop2

j_dup = _ida_domain.j_dup

j_dup_x1 = _ida_domain.j_dup_x1

j_dup_x2 = _ida_domain.j_dup_x2

j_dup2 = _ida_domain.j_dup2

j_dup2_x1 = _ida_domain.j_dup2_x1

j_dup2_x2 = _ida_domain.j_dup2_x2

j_swap = _ida_domain.j_swap

j_iadd = _ida_domain.j_iadd

j_ladd = _ida_domain.j_ladd

j_fadd = _ida_domain.j_fadd

j_dadd = _ida_domain.j_dadd

j_isub = _ida_domain.j_isub

j_lsub = _ida_domain.j_lsub

j_fsub = _ida_domain.j_fsub

j_dsub = _ida_domain.j_dsub

j_imul = _ida_domain.j_imul

j_lmul = _ida_domain.j_lmul

j_fmul = _ida_domain.j_fmul

j_dmul = _ida_domain.j_dmul

j_idiv = _ida_domain.j_idiv

j_ldiv = _ida_domain.j_ldiv

j_fdiv = _ida_domain.j_fdiv

j_ddiv = _ida_domain.j_ddiv

j_irem = _ida_domain.j_irem

j_lrem = _ida_domain.j_lrem

j_frem = _ida_domain.j_frem

j_drem = _ida_domain.j_drem

j_ineg = _ida_domain.j_ineg

j_lneg = _ida_domain.j_lneg

j_fneg = _ida_domain.j_fneg

j_dneg = _ida_domain.j_dneg

j_ishl = _ida_domain.j_ishl

j_lshl = _ida_domain.j_lshl

j_ishr = _ida_domain.j_ishr

j_lshr = _ida_domain.j_lshr

j_iushr = _ida_domain.j_iushr

j_lushr = _ida_domain.j_lushr

j_iand = _ida_domain.j_iand

j_land = _ida_domain.j_land

j_ior = _ida_domain.j_ior

j_lor = _ida_domain.j_lor

j_ixor = _ida_domain.j_ixor

j_lxor = _ida_domain.j_lxor

j_iinc = _ida_domain.j_iinc

j_i2l = _ida_domain.j_i2l

j_i2f = _ida_domain.j_i2f

j_i2d = _ida_domain.j_i2d

j_l2i = _ida_domain.j_l2i

j_l2f = _ida_domain.j_l2f

j_l2d = _ida_domain.j_l2d

j_f2i = _ida_domain.j_f2i

j_f2l = _ida_domain.j_f2l

j_f2d = _ida_domain.j_f2d

j_d2i = _ida_domain.j_d2i

j_d2l = _ida_domain.j_d2l

j_d2f = _ida_domain.j_d2f

j_i2b = _ida_domain.j_i2b

j_i2c = _ida_domain.j_i2c

j_i2s = _ida_domain.j_i2s

j_lcmp = _ida_domain.j_lcmp

j_fcmpl = _ida_domain.j_fcmpl

j_fcmpg = _ida_domain.j_fcmpg

j_dcmpl = _ida_domain.j_dcmpl

j_dcmpg = _ida_domain.j_dcmpg

j_ifeq = _ida_domain.j_ifeq

j_ifne = _ida_domain.j_ifne

j_iflt = _ida_domain.j_iflt

j_ifge = _ida_domain.j_ifge

j_ifgt = _ida_domain.j_ifgt

j_ifle = _ida_domain.j_ifle

j_if_icmpeq = _ida_domain.j_if_icmpeq

j_if_icmpne = _ida_domain.j_if_icmpne

j_if_icmplt = _ida_domain.j_if_icmplt

j_if_icmpge = _ida_domain.j_if_icmpge

j_if_icmpgt = _ida_domain.j_if_icmpgt

j_if_icmple = _ida_domain.j_if_icmple

j_if_acmpeq = _ida_domain.j_if_acmpeq

j_if_acmpne = _ida_domain.j_if_acmpne

j_goto = _ida_domain.j_goto

j_jsr = _ida_domain.j_jsr

j_ret = _ida_domain.j_ret

j_tableswitch = _ida_domain.j_tableswitch

j_lookupswitch = _ida_domain.j_lookupswitch

j_ireturn = _ida_domain.j_ireturn

j_lreturn = _ida_domain.j_lreturn

j_freturn = _ida_domain.j_freturn

j_dreturn = _ida_domain.j_dreturn

j_areturn = _ida_domain.j_areturn

j_return = _ida_domain.j_return

j_getstatic = _ida_domain.j_getstatic

j_putstatic = _ida_domain.j_putstatic

j_getfield = _ida_domain.j_getfield

j_putfield = _ida_domain.j_putfield

j_invokevirtual = _ida_domain.j_invokevirtual

j_invokespecial = _ida_domain.j_invokespecial

j_invokestatic = _ida_domain.j_invokestatic

j_invokeinterface = _ida_domain.j_invokeinterface

j_invokedynamic = _ida_domain.j_invokedynamic

j_new = _ida_domain.j_new

j_newarray = _ida_domain.j_newarray

j_anewarray = _ida_domain.j_anewarray

j_arraylength = _ida_domain.j_arraylength

j_athrow = _ida_domain.j_athrow

j_checkcast = _ida_domain.j_checkcast

j_instanceof = _ida_domain.j_instanceof

j_monitorenter = _ida_domain.j_monitorenter

j_monitorexit = _ida_domain.j_monitorexit

j_wide = _ida_domain.j_wide

j_multianewarray = _ida_domain.j_multianewarray

j_ifnull = _ida_domain.j_ifnull

j_ifnonnull = _ida_domain.j_ifnonnull

j_goto_w = _ida_domain.j_goto_w

j_jsr_w = _ida_domain.j_jsr_w

j_breakpoint = _ida_domain.j_breakpoint

j_lastnorm = _ida_domain.j_lastnorm

j_a_invokesuper = _ida_domain.j_a_invokesuper

j_a_invokevirtualobject = _ida_domain.j_a_invokevirtualobject

j_a_invokeignored = _ida_domain.j_a_invokeignored

j_a_software = _ida_domain.j_a_software

j_a_hardware = _ida_domain.j_a_hardware

j_last = _ida_domain.j_last

j_ldc_quick = _ida_domain.j_ldc_quick

j_ldcw_quick = _ida_domain.j_ldcw_quick

j_ldc2w_quick = _ida_domain.j_ldc2w_quick

j_getfield_quick = _ida_domain.j_getfield_quick

j_putfield_quick = _ida_domain.j_putfield_quick

j_getfield2_quick = _ida_domain.j_getfield2_quick

j_putfield2_quick = _ida_domain.j_putfield2_quick

j_getstatic_quick = _ida_domain.j_getstatic_quick

j_putstatic_quick = _ida_domain.j_putstatic_quick

j_getstatic2_quick = _ida_domain.j_getstatic2_quick

j_putstatic2_quick = _ida_domain.j_putstatic2_quick

j_invokevirtual_quick = _ida_domain.j_invokevirtual_quick

j_invokenonvirtual_quick = _ida_domain.j_invokenonvirtual_quick

j_invokesuper_quick = _ida_domain.j_invokesuper_quick

j_invokestatic_quick = _ida_domain.j_invokestatic_quick

j_invokeinterface_quick = _ida_domain.j_invokeinterface_quick

j_invokevirtualobject_quick = _ida_domain.j_invokevirtualobject_quick

j_invokeignored_quick = _ida_domain.j_invokeignored_quick

j_new_quick = _ida_domain.j_new_quick

j_anewarray_quick = _ida_domain.j_anewarray_quick

j_multianewarray_quick = _ida_domain.j_multianewarray_quick

j_checkcast_quick = _ida_domain.j_checkcast_quick

j_instanceof_quick = _ida_domain.j_instanceof_quick

j_invokevirtual_quick_w = _ida_domain.j_invokevirtual_quick_w

j_getfield_quick_w = _ida_domain.j_getfield_quick_w

j_putfield_quick_w = _ida_domain.j_putfield_quick_w

j_quick_last = _ida_domain.j_quick_last

ARM_null = _ida_domain.ARM_null

ARM_ret = _ida_domain.ARM_ret

ARM_nop = _ida_domain.ARM_nop

ARM_b = _ida_domain.ARM_b

ARM_bl = _ida_domain.ARM_bl

ARM_asr = _ida_domain.ARM_asr

ARM_lsl = _ida_domain.ARM_lsl

ARM_lsr = _ida_domain.ARM_lsr

ARM_ror = _ida_domain.ARM_ror

ARM_neg = _ida_domain.ARM_neg

ARM_and = _ida_domain.ARM_and

ARM_eor = _ida_domain.ARM_eor

ARM_sub = _ida_domain.ARM_sub

ARM_rsb = _ida_domain.ARM_rsb

ARM_add = _ida_domain.ARM_add

ARM_adc = _ida_domain.ARM_adc

ARM_sbc = _ida_domain.ARM_sbc

ARM_rsc = _ida_domain.ARM_rsc

ARM_tst = _ida_domain.ARM_tst

ARM_teq = _ida_domain.ARM_teq

ARM_cmp = _ida_domain.ARM_cmp

ARM_cmn = _ida_domain.ARM_cmn

ARM_orr = _ida_domain.ARM_orr

ARM_mov = _ida_domain.ARM_mov

ARM_bic = _ida_domain.ARM_bic

ARM_mvn = _ida_domain.ARM_mvn

ARM_mrs = _ida_domain.ARM_mrs

ARM_msr = _ida_domain.ARM_msr

ARM_mul = _ida_domain.ARM_mul

ARM_mla = _ida_domain.ARM_mla

ARM_ldr = _ida_domain.ARM_ldr

ARM_ldrpc = _ida_domain.ARM_ldrpc

ARM_str = _ida_domain.ARM_str

ARM_ldm = _ida_domain.ARM_ldm

ARM_stm = _ida_domain.ARM_stm

ARM_swp = _ida_domain.ARM_swp

ARM_svc = _ida_domain.ARM_svc

ARM_smull = _ida_domain.ARM_smull

ARM_smlal = _ida_domain.ARM_smlal

ARM_umull = _ida_domain.ARM_umull

ARM_umlal = _ida_domain.ARM_umlal

ARM_bx = _ida_domain.ARM_bx

ARM_pop = _ida_domain.ARM_pop

ARM_push = _ida_domain.ARM_push

ARM_adr = _ida_domain.ARM_adr

ARM_bkpt = _ida_domain.ARM_bkpt

ARM_blx1 = _ida_domain.ARM_blx1

ARM_blx2 = _ida_domain.ARM_blx2

ARM_clz = _ida_domain.ARM_clz

ARM_ldrd = _ida_domain.ARM_ldrd

ARM_pld = _ida_domain.ARM_pld

ARM_qadd = _ida_domain.ARM_qadd

ARM_qdadd = _ida_domain.ARM_qdadd

ARM_qdsub = _ida_domain.ARM_qdsub

ARM_qsub = _ida_domain.ARM_qsub

ARM_smlabb = _ida_domain.ARM_smlabb

ARM_smlatb = _ida_domain.ARM_smlatb

ARM_smlabt = _ida_domain.ARM_smlabt

ARM_smlatt = _ida_domain.ARM_smlatt

ARM_smlalbb = _ida_domain.ARM_smlalbb

ARM_smlaltb = _ida_domain.ARM_smlaltb

ARM_smlalbt = _ida_domain.ARM_smlalbt

ARM_smlaltt = _ida_domain.ARM_smlaltt

ARM_smlawb = _ida_domain.ARM_smlawb

ARM_smulwb = _ida_domain.ARM_smulwb

ARM_smlawt = _ida_domain.ARM_smlawt

ARM_smulwt = _ida_domain.ARM_smulwt

ARM_smulbb = _ida_domain.ARM_smulbb

ARM_smultb = _ida_domain.ARM_smultb

ARM_smulbt = _ida_domain.ARM_smulbt

ARM_smultt = _ida_domain.ARM_smultt

ARM_strd = _ida_domain.ARM_strd

xScale_mia = _ida_domain.xScale_mia

xScale_miaph = _ida_domain.xScale_miaph

xScale_miabb = _ida_domain.xScale_miabb

xScale_miabt = _ida_domain.xScale_miabt

xScale_miatb = _ida_domain.xScale_miatb

xScale_miatt = _ida_domain.xScale_miatt

xScale_mar = _ida_domain.xScale_mar

xScale_mra = _ida_domain.xScale_mra

ARM_movl = _ida_domain.ARM_movl

ARM_adrl = _ida_domain.ARM_adrl

ARM_swbkpt = _ida_domain.ARM_swbkpt

ARM_cdp = _ida_domain.ARM_cdp

ARM_cdp2 = _ida_domain.ARM_cdp2

ARM_ldc = _ida_domain.ARM_ldc

ARM_ldc2 = _ida_domain.ARM_ldc2

ARM_stc = _ida_domain.ARM_stc

ARM_stc2 = _ida_domain.ARM_stc2

ARM_mrc = _ida_domain.ARM_mrc

ARM_mrc2 = _ida_domain.ARM_mrc2

ARM_mcr = _ida_domain.ARM_mcr

ARM_mcr2 = _ida_domain.ARM_mcr2

ARM_mcrr = _ida_domain.ARM_mcrr

ARM_mrrc = _ida_domain.ARM_mrrc

ARM_fabsd = _ida_domain.ARM_fabsd

ARM_fabss = _ida_domain.ARM_fabss

ARM_faddd = _ida_domain.ARM_faddd

ARM_fadds = _ida_domain.ARM_fadds

ARM_fcmpd = _ida_domain.ARM_fcmpd

ARM_fcmps = _ida_domain.ARM_fcmps

ARM_fcmped = _ida_domain.ARM_fcmped

ARM_fcmpes = _ida_domain.ARM_fcmpes

ARM_fcmpezd = _ida_domain.ARM_fcmpezd

ARM_fcmpezs = _ida_domain.ARM_fcmpezs

ARM_fcmpzd = _ida_domain.ARM_fcmpzd

ARM_fcmpzs = _ida_domain.ARM_fcmpzs

ARM_fcpyd = _ida_domain.ARM_fcpyd

ARM_fcpys = _ida_domain.ARM_fcpys

ARM_fcvtsd = _ida_domain.ARM_fcvtsd

ARM_fcvtds = _ida_domain.ARM_fcvtds

ARM_fdivd = _ida_domain.ARM_fdivd

ARM_fdivs = _ida_domain.ARM_fdivs

ARM_fldd = _ida_domain.ARM_fldd

ARM_flds = _ida_domain.ARM_flds

ARM_fldmd = _ida_domain.ARM_fldmd

ARM_fldms = _ida_domain.ARM_fldms

ARM_fldmx = _ida_domain.ARM_fldmx

ARM_fmacd = _ida_domain.ARM_fmacd

ARM_fmacs = _ida_domain.ARM_fmacs

ARM_fmscd = _ida_domain.ARM_fmscd

ARM_fmscs = _ida_domain.ARM_fmscs

ARM_fmstat = _ida_domain.ARM_fmstat

ARM_fmuld = _ida_domain.ARM_fmuld

ARM_fmuls = _ida_domain.ARM_fmuls

ARM_fnegd = _ida_domain.ARM_fnegd

ARM_fnegs = _ida_domain.ARM_fnegs

ARM_fnmacd = _ida_domain.ARM_fnmacd

ARM_fnmacs = _ida_domain.ARM_fnmacs

ARM_fnmscd = _ida_domain.ARM_fnmscd

ARM_fnmscs = _ida_domain.ARM_fnmscs

ARM_fnmuld = _ida_domain.ARM_fnmuld

ARM_fnmuls = _ida_domain.ARM_fnmuls

ARM_fsitod = _ida_domain.ARM_fsitod

ARM_fsitos = _ida_domain.ARM_fsitos

ARM_fsqrtd = _ida_domain.ARM_fsqrtd

ARM_fsqrts = _ida_domain.ARM_fsqrts

ARM_fstd = _ida_domain.ARM_fstd

ARM_fsts = _ida_domain.ARM_fsts

ARM_fstmd = _ida_domain.ARM_fstmd

ARM_fstms = _ida_domain.ARM_fstms

ARM_fstmx = _ida_domain.ARM_fstmx

ARM_fsubd = _ida_domain.ARM_fsubd

ARM_fsubs = _ida_domain.ARM_fsubs

ARM_ftosid = _ida_domain.ARM_ftosid

ARM_ftosis = _ida_domain.ARM_ftosis

ARM_ftosizd = _ida_domain.ARM_ftosizd

ARM_ftosizs = _ida_domain.ARM_ftosizs

ARM_ftouid = _ida_domain.ARM_ftouid

ARM_ftouis = _ida_domain.ARM_ftouis

ARM_ftouizd = _ida_domain.ARM_ftouizd

ARM_ftouizs = _ida_domain.ARM_ftouizs

ARM_fuitod = _ida_domain.ARM_fuitod

ARM_fuitos = _ida_domain.ARM_fuitos

ARM_fmdhr = _ida_domain.ARM_fmdhr

ARM_fmrdh = _ida_domain.ARM_fmrdh

ARM_fmdlr = _ida_domain.ARM_fmdlr

ARM_fmrdl = _ida_domain.ARM_fmrdl

ARM_fmxr = _ida_domain.ARM_fmxr

ARM_fmrx = _ida_domain.ARM_fmrx

ARM_fmsr = _ida_domain.ARM_fmsr

ARM_fmrs = _ida_domain.ARM_fmrs

ARM_fmdrr = _ida_domain.ARM_fmdrr

ARM_fmrrd = _ida_domain.ARM_fmrrd

ARM_fmsrr = _ida_domain.ARM_fmsrr

ARM_fmrrs = _ida_domain.ARM_fmrrs

ARM_bxj = _ida_domain.ARM_bxj

ARM_mcrr2 = _ida_domain.ARM_mcrr2

ARM_mrrc2 = _ida_domain.ARM_mrrc2

ARM_cps = _ida_domain.ARM_cps

ARM_cpsid = _ida_domain.ARM_cpsid

ARM_cpsie = _ida_domain.ARM_cpsie

ARM_ldrex = _ida_domain.ARM_ldrex

ARM_pkhbt = _ida_domain.ARM_pkhbt

ARM_pkhtb = _ida_domain.ARM_pkhtb

ARM_qadd16 = _ida_domain.ARM_qadd16

ARM_qadd8 = _ida_domain.ARM_qadd8

ARM_qaddsubx = _ida_domain.ARM_qaddsubx

ARM_qsub16 = _ida_domain.ARM_qsub16

ARM_qsub8 = _ida_domain.ARM_qsub8

ARM_qsubaddx = _ida_domain.ARM_qsubaddx

ARM_rev = _ida_domain.ARM_rev

ARM_rev16 = _ida_domain.ARM_rev16

ARM_revsh = _ida_domain.ARM_revsh

ARM_rfe = _ida_domain.ARM_rfe

ARM_sadd16 = _ida_domain.ARM_sadd16

ARM_sadd8 = _ida_domain.ARM_sadd8

ARM_saddsubx = _ida_domain.ARM_saddsubx

ARM_sel = _ida_domain.ARM_sel

ARM_setend = _ida_domain.ARM_setend

ARM_shadd16 = _ida_domain.ARM_shadd16

ARM_shadd8 = _ida_domain.ARM_shadd8

ARM_shaddsubx = _ida_domain.ARM_shaddsubx

ARM_shsub16 = _ida_domain.ARM_shsub16

ARM_shsub8 = _ida_domain.ARM_shsub8

ARM_shsubaddx = _ida_domain.ARM_shsubaddx

ARM_smlad = _ida_domain.ARM_smlad

ARM_smladx = _ida_domain.ARM_smladx

ARM_smuad = _ida_domain.ARM_smuad

ARM_smuadx = _ida_domain.ARM_smuadx

ARM_smlald = _ida_domain.ARM_smlald

ARM_smlaldx = _ida_domain.ARM_smlaldx

ARM_smlsd = _ida_domain.ARM_smlsd

ARM_smlsdx = _ida_domain.ARM_smlsdx

ARM_smusd = _ida_domain.ARM_smusd

ARM_smusdx = _ida_domain.ARM_smusdx

ARM_smlsld = _ida_domain.ARM_smlsld

ARM_smlsldx = _ida_domain.ARM_smlsldx

ARM_smmla = _ida_domain.ARM_smmla

ARM_smmlar = _ida_domain.ARM_smmlar

ARM_smmul = _ida_domain.ARM_smmul

ARM_smmulr = _ida_domain.ARM_smmulr

ARM_smmls = _ida_domain.ARM_smmls

ARM_smmlsr = _ida_domain.ARM_smmlsr

ARM_srs = _ida_domain.ARM_srs

ARM_ssat = _ida_domain.ARM_ssat

ARM_ssat16 = _ida_domain.ARM_ssat16

ARM_ssub16 = _ida_domain.ARM_ssub16

ARM_ssub8 = _ida_domain.ARM_ssub8

ARM_ssubaddx = _ida_domain.ARM_ssubaddx

ARM_strex = _ida_domain.ARM_strex

ARM_sxtab = _ida_domain.ARM_sxtab

ARM_sxtb = _ida_domain.ARM_sxtb

ARM_sxtab16 = _ida_domain.ARM_sxtab16

ARM_sxtb16 = _ida_domain.ARM_sxtb16

ARM_sxtah = _ida_domain.ARM_sxtah

ARM_sxth = _ida_domain.ARM_sxth

ARM_uadd16 = _ida_domain.ARM_uadd16

ARM_uadd8 = _ida_domain.ARM_uadd8

ARM_uaddsubx = _ida_domain.ARM_uaddsubx

ARM_uhadd16 = _ida_domain.ARM_uhadd16

ARM_uhadd8 = _ida_domain.ARM_uhadd8

ARM_uhaddsubx = _ida_domain.ARM_uhaddsubx

ARM_uhsub16 = _ida_domain.ARM_uhsub16

ARM_uhsub8 = _ida_domain.ARM_uhsub8

ARM_uhsubaddx = _ida_domain.ARM_uhsubaddx

ARM_umaal = _ida_domain.ARM_umaal

ARM_uqadd16 = _ida_domain.ARM_uqadd16

ARM_uqadd8 = _ida_domain.ARM_uqadd8

ARM_uqaddsubx = _ida_domain.ARM_uqaddsubx

ARM_uqsub16 = _ida_domain.ARM_uqsub16

ARM_uqsub8 = _ida_domain.ARM_uqsub8

ARM_uqsubaddx = _ida_domain.ARM_uqsubaddx

ARM_usada8 = _ida_domain.ARM_usada8

ARM_usad8 = _ida_domain.ARM_usad8

ARM_usat = _ida_domain.ARM_usat

ARM_usat16 = _ida_domain.ARM_usat16

ARM_usub16 = _ida_domain.ARM_usub16

ARM_usub8 = _ida_domain.ARM_usub8

ARM_usubaddx = _ida_domain.ARM_usubaddx

ARM_uxtab = _ida_domain.ARM_uxtab

ARM_uxtb = _ida_domain.ARM_uxtb

ARM_uxtab16 = _ida_domain.ARM_uxtab16

ARM_uxtb16 = _ida_domain.ARM_uxtb16

ARM_uxtah = _ida_domain.ARM_uxtah

ARM_uxth = _ida_domain.ARM_uxth

ARM_clrex = _ida_domain.ARM_clrex

ARM_ldrexb = _ida_domain.ARM_ldrexb

ARM_ldrexd = _ida_domain.ARM_ldrexd

ARM_ldrexh = _ida_domain.ARM_ldrexh

ARM_strexb = _ida_domain.ARM_strexb

ARM_strexd = _ida_domain.ARM_strexd

ARM_strexh = _ida_domain.ARM_strexh

ARM_yield = _ida_domain.ARM_yield

ARM_sev = _ida_domain.ARM_sev

ARM_wfe = _ida_domain.ARM_wfe

ARM_wfi = _ida_domain.ARM_wfi

ARM_smc = _ida_domain.ARM_smc

ARM_orn = _ida_domain.ARM_orn

ARM_movt = _ida_domain.ARM_movt

ARM_sbfx = _ida_domain.ARM_sbfx

ARM_ubfx = _ida_domain.ARM_ubfx

ARM_bfi = _ida_domain.ARM_bfi

ARM_bfc = _ida_domain.ARM_bfc

ARM_tbb = _ida_domain.ARM_tbb

ARM_tbh = _ida_domain.ARM_tbh

ARM_pli = _ida_domain.ARM_pli

ARM_rbit = _ida_domain.ARM_rbit

ARM_it = _ida_domain.ARM_it

ARM_mls = _ida_domain.ARM_mls

ARM_sdiv = _ida_domain.ARM_sdiv

ARM_udiv = _ida_domain.ARM_udiv

ARM_cbz = _ida_domain.ARM_cbz

ARM_cbnz = _ida_domain.ARM_cbnz

ARM_dsb = _ida_domain.ARM_dsb

ARM_dmb = _ida_domain.ARM_dmb

ARM_isb = _ida_domain.ARM_isb

ARM_dbg = _ida_domain.ARM_dbg

ARM_und = _ida_domain.ARM_und

ARM_rrx = _ida_domain.ARM_rrx

ARM_enterx = _ida_domain.ARM_enterx

ARM_leavex = _ida_domain.ARM_leavex

ARM_chka = _ida_domain.ARM_chka

ARM_hb = _ida_domain.ARM_hb

ARM_hbl = _ida_domain.ARM_hbl

ARM_hblp = _ida_domain.ARM_hblp

ARM_hbp = _ida_domain.ARM_hbp

ARM_vaba = _ida_domain.ARM_vaba

ARM_vabal = _ida_domain.ARM_vabal

ARM_vabd = _ida_domain.ARM_vabd

ARM_vabdl = _ida_domain.ARM_vabdl

ARM_vabs = _ida_domain.ARM_vabs

ARM_vacge = _ida_domain.ARM_vacge

ARM_vacgt = _ida_domain.ARM_vacgt

ARM_vacle = _ida_domain.ARM_vacle

ARM_vaclt = _ida_domain.ARM_vaclt

ARM_vadd = _ida_domain.ARM_vadd

ARM_vaddhn = _ida_domain.ARM_vaddhn

ARM_vaddl = _ida_domain.ARM_vaddl

ARM_vaddw = _ida_domain.ARM_vaddw

ARM_vand = _ida_domain.ARM_vand

ARM_vbic = _ida_domain.ARM_vbic

ARM_vbif = _ida_domain.ARM_vbif

ARM_vbit = _ida_domain.ARM_vbit

ARM_vbsl = _ida_domain.ARM_vbsl

ARM_vceq = _ida_domain.ARM_vceq

ARM_vcge = _ida_domain.ARM_vcge

ARM_vcgt = _ida_domain.ARM_vcgt

ARM_vcle = _ida_domain.ARM_vcle

ARM_vcls = _ida_domain.ARM_vcls

ARM_vclt = _ida_domain.ARM_vclt

ARM_vclz = _ida_domain.ARM_vclz

ARM_vcmp = _ida_domain.ARM_vcmp

ARM_vcmpe = _ida_domain.ARM_vcmpe

ARM_vcnt = _ida_domain.ARM_vcnt

ARM_vcvt = _ida_domain.ARM_vcvt

ARM_vcvtr = _ida_domain.ARM_vcvtr

ARM_vcvtb = _ida_domain.ARM_vcvtb

ARM_vcvtt = _ida_domain.ARM_vcvtt

ARM_vdiv = _ida_domain.ARM_vdiv

ARM_vdup = _ida_domain.ARM_vdup

ARM_veor = _ida_domain.ARM_veor

ARM_vext = _ida_domain.ARM_vext

ARM_vfma = _ida_domain.ARM_vfma

ARM_vfms = _ida_domain.ARM_vfms

ARM_vfnma = _ida_domain.ARM_vfnma

ARM_vfnms = _ida_domain.ARM_vfnms

ARM_vhadd = _ida_domain.ARM_vhadd

ARM_vhsub = _ida_domain.ARM_vhsub

ARM_vld1 = _ida_domain.ARM_vld1

ARM_vld2 = _ida_domain.ARM_vld2

ARM_vld3 = _ida_domain.ARM_vld3

ARM_vld4 = _ida_domain.ARM_vld4

ARM_vldm = _ida_domain.ARM_vldm

ARM_vldr = _ida_domain.ARM_vldr

ARM_vmax = _ida_domain.ARM_vmax

ARM_vmin = _ida_domain.ARM_vmin

ARM_vmla = _ida_domain.ARM_vmla

ARM_vmlal = _ida_domain.ARM_vmlal

ARM_vmls = _ida_domain.ARM_vmls

ARM_vmlsl = _ida_domain.ARM_vmlsl

ARM_vmov = _ida_domain.ARM_vmov

ARM_vmovl = _ida_domain.ARM_vmovl

ARM_vmovn = _ida_domain.ARM_vmovn

ARM_vmrs = _ida_domain.ARM_vmrs

ARM_vmsr = _ida_domain.ARM_vmsr

ARM_vmul = _ida_domain.ARM_vmul

ARM_vmull = _ida_domain.ARM_vmull

ARM_vmvn = _ida_domain.ARM_vmvn

ARM_vneg = _ida_domain.ARM_vneg

ARM_vnmla = _ida_domain.ARM_vnmla

ARM_vnmls = _ida_domain.ARM_vnmls

ARM_vnmul = _ida_domain.ARM_vnmul

ARM_vorn = _ida_domain.ARM_vorn

ARM_vorr = _ida_domain.ARM_vorr

ARM_vpadal = _ida_domain.ARM_vpadal

ARM_vpadd = _ida_domain.ARM_vpadd

ARM_vpaddl = _ida_domain.ARM_vpaddl

ARM_vpmax = _ida_domain.ARM_vpmax

ARM_vpmin = _ida_domain.ARM_vpmin

ARM_vpop = _ida_domain.ARM_vpop

ARM_vpush = _ida_domain.ARM_vpush

ARM_vqabs = _ida_domain.ARM_vqabs

ARM_vqadd = _ida_domain.ARM_vqadd

ARM_vqdmlal = _ida_domain.ARM_vqdmlal

ARM_vqdmlsl = _ida_domain.ARM_vqdmlsl

ARM_vqdmulh = _ida_domain.ARM_vqdmulh

ARM_vqdmull = _ida_domain.ARM_vqdmull

ARM_vqmovn = _ida_domain.ARM_vqmovn

ARM_vqmovun = _ida_domain.ARM_vqmovun

ARM_vqneg = _ida_domain.ARM_vqneg

ARM_vqrdmulh = _ida_domain.ARM_vqrdmulh

ARM_vqrshl = _ida_domain.ARM_vqrshl

ARM_vqrshrn = _ida_domain.ARM_vqrshrn

ARM_vqrshrun = _ida_domain.ARM_vqrshrun

ARM_vqshl = _ida_domain.ARM_vqshl

ARM_vqshlu = _ida_domain.ARM_vqshlu

ARM_vqshrn = _ida_domain.ARM_vqshrn

ARM_vqshrun = _ida_domain.ARM_vqshrun

ARM_vqsub = _ida_domain.ARM_vqsub

ARM_vraddhn = _ida_domain.ARM_vraddhn

ARM_vrecpe = _ida_domain.ARM_vrecpe

ARM_vrecps = _ida_domain.ARM_vrecps

ARM_vrev16 = _ida_domain.ARM_vrev16

ARM_vrev32 = _ida_domain.ARM_vrev32

ARM_vrev64 = _ida_domain.ARM_vrev64

ARM_vrhadd = _ida_domain.ARM_vrhadd

ARM_vrshl = _ida_domain.ARM_vrshl

ARM_vrshr = _ida_domain.ARM_vrshr

ARM_vrshrn = _ida_domain.ARM_vrshrn

ARM_vrsqrte = _ida_domain.ARM_vrsqrte

ARM_vrsqrts = _ida_domain.ARM_vrsqrts

ARM_vrsra = _ida_domain.ARM_vrsra

ARM_vrsubhn = _ida_domain.ARM_vrsubhn

ARM_vshl = _ida_domain.ARM_vshl

ARM_vshll = _ida_domain.ARM_vshll

ARM_vshr = _ida_domain.ARM_vshr

ARM_vshrn = _ida_domain.ARM_vshrn

ARM_vsli = _ida_domain.ARM_vsli

ARM_vsqrt = _ida_domain.ARM_vsqrt

ARM_vsra = _ida_domain.ARM_vsra

ARM_vsri = _ida_domain.ARM_vsri

ARM_vst1 = _ida_domain.ARM_vst1

ARM_vst2 = _ida_domain.ARM_vst2

ARM_vst3 = _ida_domain.ARM_vst3

ARM_vst4 = _ida_domain.ARM_vst4

ARM_vstm = _ida_domain.ARM_vstm

ARM_vstr = _ida_domain.ARM_vstr

ARM_vsub = _ida_domain.ARM_vsub

ARM_vsubhn = _ida_domain.ARM_vsubhn

ARM_vsubl = _ida_domain.ARM_vsubl

ARM_vsubw = _ida_domain.ARM_vsubw

ARM_vswp = _ida_domain.ARM_vswp

ARM_vtbl = _ida_domain.ARM_vtbl

ARM_vtbx = _ida_domain.ARM_vtbx

ARM_vtrn = _ida_domain.ARM_vtrn

ARM_vtst = _ida_domain.ARM_vtst

ARM_vuzp = _ida_domain.ARM_vuzp

ARM_vzip = _ida_domain.ARM_vzip

ARM_eret = _ida_domain.ARM_eret

ARM_hvc = _ida_domain.ARM_hvc

ARM_lda = _ida_domain.ARM_lda

ARM_stl = _ida_domain.ARM_stl

ARM_ldaex = _ida_domain.ARM_ldaex

ARM_stlex = _ida_domain.ARM_stlex

ARM_vsel = _ida_domain.ARM_vsel

ARM_vmaxnm = _ida_domain.ARM_vmaxnm

ARM_vminnm = _ida_domain.ARM_vminnm

ARM_vcvta = _ida_domain.ARM_vcvta

ARM_vcvtn = _ida_domain.ARM_vcvtn

ARM_vcvtp = _ida_domain.ARM_vcvtp

ARM_vcvtm = _ida_domain.ARM_vcvtm

ARM_vrintx = _ida_domain.ARM_vrintx

ARM_vrintr = _ida_domain.ARM_vrintr

ARM_vrintz = _ida_domain.ARM_vrintz

ARM_vrinta = _ida_domain.ARM_vrinta

ARM_vrintn = _ida_domain.ARM_vrintn

ARM_vrintp = _ida_domain.ARM_vrintp

ARM_vrintm = _ida_domain.ARM_vrintm

ARM_aesd = _ida_domain.ARM_aesd

ARM_aese = _ida_domain.ARM_aese

ARM_aesimc = _ida_domain.ARM_aesimc

ARM_aesmc = _ida_domain.ARM_aesmc

ARM_sha1c = _ida_domain.ARM_sha1c

ARM_sha1m = _ida_domain.ARM_sha1m

ARM_sha1p = _ida_domain.ARM_sha1p

ARM_sha1h = _ida_domain.ARM_sha1h

ARM_sha1su0 = _ida_domain.ARM_sha1su0

ARM_sha1su1 = _ida_domain.ARM_sha1su1

ARM_sha256h = _ida_domain.ARM_sha256h

ARM_sha256h2 = _ida_domain.ARM_sha256h2

ARM_sha256su0 = _ida_domain.ARM_sha256su0

ARM_sha256su1 = _ida_domain.ARM_sha256su1

ARM_dcps1 = _ida_domain.ARM_dcps1

ARM_dcps2 = _ida_domain.ARM_dcps2

ARM_dcps3 = _ida_domain.ARM_dcps3

ARM_hlt = _ida_domain.ARM_hlt

ARM_sevl = _ida_domain.ARM_sevl

ARM_tbz = _ida_domain.ARM_tbz

ARM_tbnz = _ida_domain.ARM_tbnz

ARM_br = _ida_domain.ARM_br

ARM_blr = _ida_domain.ARM_blr

ARM_ldur = _ida_domain.ARM_ldur

ARM_stur = _ida_domain.ARM_stur

ARM_ldp = _ida_domain.ARM_ldp

ARM_stp = _ida_domain.ARM_stp

ARM_ldnp = _ida_domain.ARM_ldnp

ARM_stnp = _ida_domain.ARM_stnp

ARM_ldtr = _ida_domain.ARM_ldtr

ARM_sttr = _ida_domain.ARM_sttr

ARM_ldxr = _ida_domain.ARM_ldxr

ARM_stxr = _ida_domain.ARM_stxr

ARM_ldxp = _ida_domain.ARM_ldxp

ARM_stxp = _ida_domain.ARM_stxp

ARM_ldar = _ida_domain.ARM_ldar

ARM_stlr = _ida_domain.ARM_stlr

ARM_ldaxr = _ida_domain.ARM_ldaxr

ARM_stlxr = _ida_domain.ARM_stlxr

ARM_ldaxp = _ida_domain.ARM_ldaxp

ARM_stlxp = _ida_domain.ARM_stlxp

ARM_prfm = _ida_domain.ARM_prfm

ARM_prfum = _ida_domain.ARM_prfum

ARM_movi = _ida_domain.ARM_movi

ARM_mvni = _ida_domain.ARM_mvni

ARM_movz = _ida_domain.ARM_movz

ARM_movn = _ida_domain.ARM_movn

ARM_movk = _ida_domain.ARM_movk

ARM_adrp = _ida_domain.ARM_adrp

ARM_bfm = _ida_domain.ARM_bfm

ARM_sbfm = _ida_domain.ARM_sbfm

ARM_ubfm = _ida_domain.ARM_ubfm

ARM_bfxil = _ida_domain.ARM_bfxil

ARM_sbfiz = _ida_domain.ARM_sbfiz

ARM_ubfiz = _ida_domain.ARM_ubfiz

ARM_extr = _ida_domain.ARM_extr

ARM_sxtw = _ida_domain.ARM_sxtw

ARM_uxtw = _ida_domain.ARM_uxtw

ARM_eon = _ida_domain.ARM_eon

ARM_not = _ida_domain.ARM_not

ARM_cls = _ida_domain.ARM_cls

ARM_rev32 = _ida_domain.ARM_rev32

ARM_csel = _ida_domain.ARM_csel

ARM_csinc = _ida_domain.ARM_csinc

ARM_csinv = _ida_domain.ARM_csinv

ARM_csneg = _ida_domain.ARM_csneg

ARM_cset = _ida_domain.ARM_cset

ARM_csetm = _ida_domain.ARM_csetm

ARM_cinc = _ida_domain.ARM_cinc

ARM_cinv = _ida_domain.ARM_cinv

ARM_cneg = _ida_domain.ARM_cneg

ARM_ngc = _ida_domain.ARM_ngc

ARM_ccmn = _ida_domain.ARM_ccmn

ARM_ccmp = _ida_domain.ARM_ccmp

ARM_madd = _ida_domain.ARM_madd

ARM_msub = _ida_domain.ARM_msub

ARM_mneg = _ida_domain.ARM_mneg

ARM_smaddl = _ida_domain.ARM_smaddl

ARM_smsubl = _ida_domain.ARM_smsubl

ARM_smnegl = _ida_domain.ARM_smnegl

ARM_smulh = _ida_domain.ARM_smulh

ARM_umaddl = _ida_domain.ARM_umaddl

ARM_umsubl = _ida_domain.ARM_umsubl

ARM_umnegl = _ida_domain.ARM_umnegl

ARM_umulh = _ida_domain.ARM_umulh

ARM_drps = _ida_domain.ARM_drps

ARM_sys = _ida_domain.ARM_sys

ARM_sysl = _ida_domain.ARM_sysl

ARM_ic = _ida_domain.ARM_ic

ARM_dc = _ida_domain.ARM_dc

ARM_at = _ida_domain.ARM_at

ARM_tlbi = _ida_domain.ARM_tlbi

ARM_hint = _ida_domain.ARM_hint

ARM_brk = _ida_domain.ARM_brk

ARM_uaba = _ida_domain.ARM_uaba

ARM_saba = _ida_domain.ARM_saba

ARM_uabal = _ida_domain.ARM_uabal

ARM_uabal2 = _ida_domain.ARM_uabal2

ARM_sabal = _ida_domain.ARM_sabal

ARM_sabal2 = _ida_domain.ARM_sabal2

ARM_uabd = _ida_domain.ARM_uabd

ARM_sabd = _ida_domain.ARM_sabd

ARM_fabd = _ida_domain.ARM_fabd

ARM_uabdl = _ida_domain.ARM_uabdl

ARM_uabdl2 = _ida_domain.ARM_uabdl2

ARM_sabdl = _ida_domain.ARM_sabdl

ARM_sabdl2 = _ida_domain.ARM_sabdl2

ARM_abs = _ida_domain.ARM_abs

ARM_fabs = _ida_domain.ARM_fabs

ARM_facge = _ida_domain.ARM_facge

ARM_facgt = _ida_domain.ARM_facgt

ARM_facle = _ida_domain.ARM_facle

ARM_faclt = _ida_domain.ARM_faclt

ARM_fadd = _ida_domain.ARM_fadd

ARM_addhn = _ida_domain.ARM_addhn

ARM_addhn2 = _ida_domain.ARM_addhn2

ARM_uaddl = _ida_domain.ARM_uaddl

ARM_uaddl2 = _ida_domain.ARM_uaddl2

ARM_saddl = _ida_domain.ARM_saddl

ARM_saddl2 = _ida_domain.ARM_saddl2

ARM_uaddw = _ida_domain.ARM_uaddw

ARM_uaddw2 = _ida_domain.ARM_uaddw2

ARM_saddw = _ida_domain.ARM_saddw

ARM_saddw2 = _ida_domain.ARM_saddw2

ARM_bif = _ida_domain.ARM_bif

ARM_bit = _ida_domain.ARM_bit

ARM_bsl = _ida_domain.ARM_bsl

ARM_cmeq = _ida_domain.ARM_cmeq

ARM_fcmeq = _ida_domain.ARM_fcmeq

ARM_cmhs = _ida_domain.ARM_cmhs

ARM_cmge = _ida_domain.ARM_cmge

ARM_fcmge = _ida_domain.ARM_fcmge

ARM_cmhi = _ida_domain.ARM_cmhi

ARM_cmgt = _ida_domain.ARM_cmgt

ARM_fcmgt = _ida_domain.ARM_fcmgt

ARM_cmls = _ida_domain.ARM_cmls

ARM_cmle = _ida_domain.ARM_cmle

ARM_fcmle = _ida_domain.ARM_fcmle

ARM_cmlo = _ida_domain.ARM_cmlo

ARM_cmlt = _ida_domain.ARM_cmlt

ARM_fcmlt = _ida_domain.ARM_fcmlt

ARM_fcmp = _ida_domain.ARM_fcmp

ARM_fcmpe = _ida_domain.ARM_fcmpe

ARM_fccmp = _ida_domain.ARM_fccmp

ARM_fccmpe = _ida_domain.ARM_fccmpe

ARM_fcsel = _ida_domain.ARM_fcsel

ARM_cnt = _ida_domain.ARM_cnt

ARM_fcvt = _ida_domain.ARM_fcvt

ARM_fcvtzs = _ida_domain.ARM_fcvtzs

ARM_fcvtas = _ida_domain.ARM_fcvtas

ARM_fcvtns = _ida_domain.ARM_fcvtns

ARM_fcvtps = _ida_domain.ARM_fcvtps

ARM_fcvtms = _ida_domain.ARM_fcvtms

ARM_fcvtzu = _ida_domain.ARM_fcvtzu

ARM_fcvtau = _ida_domain.ARM_fcvtau

ARM_fcvtnu = _ida_domain.ARM_fcvtnu

ARM_fcvtpu = _ida_domain.ARM_fcvtpu

ARM_fcvtmu = _ida_domain.ARM_fcvtmu

ARM_ucvtf = _ida_domain.ARM_ucvtf

ARM_scvtf = _ida_domain.ARM_scvtf

ARM_fcvtn = _ida_domain.ARM_fcvtn

ARM_fcvtn2 = _ida_domain.ARM_fcvtn2

ARM_fcvtl = _ida_domain.ARM_fcvtl

ARM_fcvtl2 = _ida_domain.ARM_fcvtl2

ARM_fcvtxn = _ida_domain.ARM_fcvtxn

ARM_fcvtxn2 = _ida_domain.ARM_fcvtxn2

ARM_frinta = _ida_domain.ARM_frinta

ARM_frinti = _ida_domain.ARM_frinti

ARM_frintm = _ida_domain.ARM_frintm

ARM_frintn = _ida_domain.ARM_frintn

ARM_frintp = _ida_domain.ARM_frintp

ARM_frintx = _ida_domain.ARM_frintx

ARM_frintz = _ida_domain.ARM_frintz

ARM_fmadd = _ida_domain.ARM_fmadd

ARM_fmsub = _ida_domain.ARM_fmsub

ARM_fnmadd = _ida_domain.ARM_fnmadd

ARM_fnmsub = _ida_domain.ARM_fnmsub

ARM_fdiv = _ida_domain.ARM_fdiv

ARM_dup = _ida_domain.ARM_dup

ARM_ins = _ida_domain.ARM_ins

ARM_ext = _ida_domain.ARM_ext

ARM_uhadd = _ida_domain.ARM_uhadd

ARM_shadd = _ida_domain.ARM_shadd

ARM_uhsub = _ida_domain.ARM_uhsub

ARM_shsub = _ida_domain.ARM_shsub

ARM_ld1 = _ida_domain.ARM_ld1

ARM_ld2 = _ida_domain.ARM_ld2

ARM_ld3 = _ida_domain.ARM_ld3

ARM_ld4 = _ida_domain.ARM_ld4

ARM_ld1r = _ida_domain.ARM_ld1r

ARM_ld2r = _ida_domain.ARM_ld2r

ARM_ld3r = _ida_domain.ARM_ld3r

ARM_ld4r = _ida_domain.ARM_ld4r

ARM_umax = _ida_domain.ARM_umax

ARM_smax = _ida_domain.ARM_smax

ARM_fmax = _ida_domain.ARM_fmax

ARM_fmaxnm = _ida_domain.ARM_fmaxnm

ARM_umin = _ida_domain.ARM_umin

ARM_smin = _ida_domain.ARM_smin

ARM_fmin = _ida_domain.ARM_fmin

ARM_fminnm = _ida_domain.ARM_fminnm

ARM_fmla = _ida_domain.ARM_fmla

ARM_umlal2 = _ida_domain.ARM_umlal2

ARM_smlal2 = _ida_domain.ARM_smlal2

ARM_fmls = _ida_domain.ARM_fmls

ARM_umlsl = _ida_domain.ARM_umlsl

ARM_umlsl2 = _ida_domain.ARM_umlsl2

ARM_smlsl = _ida_domain.ARM_smlsl

ARM_smlsl2 = _ida_domain.ARM_smlsl2

ARM_umov = _ida_domain.ARM_umov

ARM_smov = _ida_domain.ARM_smov

ARM_fmov = _ida_domain.ARM_fmov

ARM_uxtl = _ida_domain.ARM_uxtl

ARM_uxtl2 = _ida_domain.ARM_uxtl2

ARM_sxtl = _ida_domain.ARM_sxtl

ARM_sxtl2 = _ida_domain.ARM_sxtl2

ARM_xtn = _ida_domain.ARM_xtn

ARM_xtn2 = _ida_domain.ARM_xtn2

ARM_fmul = _ida_domain.ARM_fmul

ARM_pmul = _ida_domain.ARM_pmul

ARM_fmulx = _ida_domain.ARM_fmulx

ARM_fnmul = _ida_domain.ARM_fnmul

ARM_umull2 = _ida_domain.ARM_umull2

ARM_smull2 = _ida_domain.ARM_smull2

ARM_pmull = _ida_domain.ARM_pmull

ARM_pmull2 = _ida_domain.ARM_pmull2

ARM_fneg = _ida_domain.ARM_fneg

ARM_uadalp = _ida_domain.ARM_uadalp

ARM_sadalp = _ida_domain.ARM_sadalp

ARM_addp = _ida_domain.ARM_addp

ARM_faddp = _ida_domain.ARM_faddp

ARM_uaddlp = _ida_domain.ARM_uaddlp

ARM_saddlp = _ida_domain.ARM_saddlp

ARM_umaxp = _ida_domain.ARM_umaxp

ARM_smaxp = _ida_domain.ARM_smaxp

ARM_fmaxp = _ida_domain.ARM_fmaxp

ARM_fmaxnmp = _ida_domain.ARM_fmaxnmp

ARM_uminp = _ida_domain.ARM_uminp

ARM_sminp = _ida_domain.ARM_sminp

ARM_fminp = _ida_domain.ARM_fminp

ARM_fminnmp = _ida_domain.ARM_fminnmp

ARM_sqabs = _ida_domain.ARM_sqabs

ARM_uqadd = _ida_domain.ARM_uqadd

ARM_sqadd = _ida_domain.ARM_sqadd

ARM_suqadd = _ida_domain.ARM_suqadd

ARM_usqadd = _ida_domain.ARM_usqadd

ARM_sqdmlal = _ida_domain.ARM_sqdmlal

ARM_sqdmlal2 = _ida_domain.ARM_sqdmlal2

ARM_sqdmlsl = _ida_domain.ARM_sqdmlsl

ARM_sqdmlsl2 = _ida_domain.ARM_sqdmlsl2

ARM_sqdmulh = _ida_domain.ARM_sqdmulh

ARM_sqdmull = _ida_domain.ARM_sqdmull

ARM_sqdmull2 = _ida_domain.ARM_sqdmull2

ARM_uqxtn = _ida_domain.ARM_uqxtn

ARM_uqxtn2 = _ida_domain.ARM_uqxtn2

ARM_sqxtn = _ida_domain.ARM_sqxtn

ARM_sqxtn2 = _ida_domain.ARM_sqxtn2

ARM_sqxtun = _ida_domain.ARM_sqxtun

ARM_sqxtun2 = _ida_domain.ARM_sqxtun2

ARM_sqneg = _ida_domain.ARM_sqneg

ARM_sqrdmulh = _ida_domain.ARM_sqrdmulh

ARM_uqrshl = _ida_domain.ARM_uqrshl

ARM_sqrshl = _ida_domain.ARM_sqrshl

ARM_uqrshrn = _ida_domain.ARM_uqrshrn

ARM_uqrshrn2 = _ida_domain.ARM_uqrshrn2

ARM_sqrshrn = _ida_domain.ARM_sqrshrn

ARM_sqrshrn2 = _ida_domain.ARM_sqrshrn2

ARM_sqrshrun = _ida_domain.ARM_sqrshrun

ARM_sqrshrun2 = _ida_domain.ARM_sqrshrun2

ARM_uqshl = _ida_domain.ARM_uqshl

ARM_sqshl = _ida_domain.ARM_sqshl

ARM_sqshlu = _ida_domain.ARM_sqshlu

ARM_uqshrn = _ida_domain.ARM_uqshrn

ARM_uqshrn2 = _ida_domain.ARM_uqshrn2

ARM_sqshrn = _ida_domain.ARM_sqshrn

ARM_sqshrn2 = _ida_domain.ARM_sqshrn2

ARM_sqshrun = _ida_domain.ARM_sqshrun

ARM_sqshrun2 = _ida_domain.ARM_sqshrun2

ARM_uqsub = _ida_domain.ARM_uqsub

ARM_sqsub = _ida_domain.ARM_sqsub

ARM_raddhn = _ida_domain.ARM_raddhn

ARM_raddhn2 = _ida_domain.ARM_raddhn2

ARM_urecpe = _ida_domain.ARM_urecpe

ARM_frecpe = _ida_domain.ARM_frecpe

ARM_frecps = _ida_domain.ARM_frecps

ARM_frecpx = _ida_domain.ARM_frecpx

ARM_rev64 = _ida_domain.ARM_rev64

ARM_urhadd = _ida_domain.ARM_urhadd

ARM_srhadd = _ida_domain.ARM_srhadd

ARM_urshl = _ida_domain.ARM_urshl

ARM_srshl = _ida_domain.ARM_srshl

ARM_urshr = _ida_domain.ARM_urshr

ARM_srshr = _ida_domain.ARM_srshr

ARM_rshrn = _ida_domain.ARM_rshrn

ARM_rshrn2 = _ida_domain.ARM_rshrn2

ARM_ursqrte = _ida_domain.ARM_ursqrte

ARM_frsqrte = _ida_domain.ARM_frsqrte

ARM_frsqrts = _ida_domain.ARM_frsqrts

ARM_ursra = _ida_domain.ARM_ursra

ARM_srsra = _ida_domain.ARM_srsra

ARM_rsubhn = _ida_domain.ARM_rsubhn

ARM_rsubhn2 = _ida_domain.ARM_rsubhn2

ARM_ushl = _ida_domain.ARM_ushl

ARM_sshl = _ida_domain.ARM_sshl

ARM_ushll = _ida_domain.ARM_ushll

ARM_ushll2 = _ida_domain.ARM_ushll2

ARM_sshll = _ida_domain.ARM_sshll

ARM_sshll2 = _ida_domain.ARM_sshll2

ARM_ushr = _ida_domain.ARM_ushr

ARM_sshr = _ida_domain.ARM_sshr

ARM_shrn = _ida_domain.ARM_shrn

ARM_shrn2 = _ida_domain.ARM_shrn2

ARM_shl = _ida_domain.ARM_shl

ARM_shll = _ida_domain.ARM_shll

ARM_shll2 = _ida_domain.ARM_shll2

ARM_sli = _ida_domain.ARM_sli

ARM_fsqrt = _ida_domain.ARM_fsqrt

ARM_usra = _ida_domain.ARM_usra

ARM_ssra = _ida_domain.ARM_ssra

ARM_sri = _ida_domain.ARM_sri

ARM_st1 = _ida_domain.ARM_st1

ARM_st2 = _ida_domain.ARM_st2

ARM_st3 = _ida_domain.ARM_st3

ARM_st4 = _ida_domain.ARM_st4

ARM_fsub = _ida_domain.ARM_fsub

ARM_subhn = _ida_domain.ARM_subhn

ARM_subhn2 = _ida_domain.ARM_subhn2

ARM_usubl = _ida_domain.ARM_usubl

ARM_usubl2 = _ida_domain.ARM_usubl2

ARM_ssubl = _ida_domain.ARM_ssubl

ARM_ssubl2 = _ida_domain.ARM_ssubl2

ARM_usubw = _ida_domain.ARM_usubw

ARM_usubw2 = _ida_domain.ARM_usubw2

ARM_ssubw = _ida_domain.ARM_ssubw

ARM_ssubw2 = _ida_domain.ARM_ssubw2

ARM_tbl = _ida_domain.ARM_tbl

ARM_tbx = _ida_domain.ARM_tbx

ARM_trn1 = _ida_domain.ARM_trn1

ARM_trn2 = _ida_domain.ARM_trn2

ARM_cmtst = _ida_domain.ARM_cmtst

ARM_uzp1 = _ida_domain.ARM_uzp1

ARM_uzp2 = _ida_domain.ARM_uzp2

ARM_zip1 = _ida_domain.ARM_zip1

ARM_zip2 = _ida_domain.ARM_zip2

ARM_addv = _ida_domain.ARM_addv

ARM_uaddlv = _ida_domain.ARM_uaddlv

ARM_saddlv = _ida_domain.ARM_saddlv

ARM_umaxv = _ida_domain.ARM_umaxv

ARM_smaxv = _ida_domain.ARM_smaxv

ARM_fmaxv = _ida_domain.ARM_fmaxv

ARM_fmaxnmv = _ida_domain.ARM_fmaxnmv

ARM_uminv = _ida_domain.ARM_uminv

ARM_sminv = _ida_domain.ARM_sminv

ARM_fminv = _ida_domain.ARM_fminv

ARM_fminnmv = _ida_domain.ARM_fminnmv

ARM_swpl = _ida_domain.ARM_swpl

ARM_swpa = _ida_domain.ARM_swpa

ARM_swpal = _ida_domain.ARM_swpal

ARM_ldapr = _ida_domain.ARM_ldapr

ARM_ldadd = _ida_domain.ARM_ldadd

ARM_ldaddl = _ida_domain.ARM_ldaddl

ARM_ldadda = _ida_domain.ARM_ldadda

ARM_ldaddal = _ida_domain.ARM_ldaddal

ARM_stadd = _ida_domain.ARM_stadd

ARM_staddl = _ida_domain.ARM_staddl

ARM_ldclr = _ida_domain.ARM_ldclr

ARM_ldclrl = _ida_domain.ARM_ldclrl

ARM_ldclra = _ida_domain.ARM_ldclra

ARM_ldclral = _ida_domain.ARM_ldclral

ARM_stclr = _ida_domain.ARM_stclr

ARM_stclrl = _ida_domain.ARM_stclrl

ARM_ldeor = _ida_domain.ARM_ldeor

ARM_ldeorl = _ida_domain.ARM_ldeorl

ARM_ldeora = _ida_domain.ARM_ldeora

ARM_ldeoral = _ida_domain.ARM_ldeoral

ARM_steor = _ida_domain.ARM_steor

ARM_steorl = _ida_domain.ARM_steorl

ARM_ldset = _ida_domain.ARM_ldset

ARM_ldsetl = _ida_domain.ARM_ldsetl

ARM_ldseta = _ida_domain.ARM_ldseta

ARM_ldsetal = _ida_domain.ARM_ldsetal

ARM_stset = _ida_domain.ARM_stset

ARM_stsetl = _ida_domain.ARM_stsetl

ARM_ldsmax = _ida_domain.ARM_ldsmax

ARM_ldsmaxl = _ida_domain.ARM_ldsmaxl

ARM_ldsmaxa = _ida_domain.ARM_ldsmaxa

ARM_ldsmaxal = _ida_domain.ARM_ldsmaxal

ARM_stsmax = _ida_domain.ARM_stsmax

ARM_stsmaxl = _ida_domain.ARM_stsmaxl

ARM_ldsmin = _ida_domain.ARM_ldsmin

ARM_ldsminl = _ida_domain.ARM_ldsminl

ARM_ldsmina = _ida_domain.ARM_ldsmina

ARM_ldsminal = _ida_domain.ARM_ldsminal

ARM_stsmin = _ida_domain.ARM_stsmin

ARM_stsminl = _ida_domain.ARM_stsminl

ARM_ldumax = _ida_domain.ARM_ldumax

ARM_ldumaxl = _ida_domain.ARM_ldumaxl

ARM_ldumaxa = _ida_domain.ARM_ldumaxa

ARM_ldumaxal = _ida_domain.ARM_ldumaxal

ARM_stumax = _ida_domain.ARM_stumax

ARM_stumaxl = _ida_domain.ARM_stumaxl

ARM_ldumin = _ida_domain.ARM_ldumin

ARM_lduminl = _ida_domain.ARM_lduminl

ARM_ldumina = _ida_domain.ARM_ldumina

ARM_lduminal = _ida_domain.ARM_lduminal

ARM_stumin = _ida_domain.ARM_stumin

ARM_stuminl = _ida_domain.ARM_stuminl

ARM_cas = _ida_domain.ARM_cas

ARM_casl = _ida_domain.ARM_casl

ARM_casa = _ida_domain.ARM_casa

ARM_casal = _ida_domain.ARM_casal

ARM_casp = _ida_domain.ARM_casp

ARM_caspl = _ida_domain.ARM_caspl

ARM_caspa = _ida_domain.ARM_caspa

ARM_caspal = _ida_domain.ARM_caspal

ARM_ldlar = _ida_domain.ARM_ldlar

ARM_stllr = _ida_domain.ARM_stllr

ARM_sqrdmlah = _ida_domain.ARM_sqrdmlah

ARM_sqrdmlsh = _ida_domain.ARM_sqrdmlsh

ARM_pac = _ida_domain.ARM_pac

ARM_aut = _ida_domain.ARM_aut

ARM_xpac = _ida_domain.ARM_xpac

ARM_ldrd2 = _ida_domain.ARM_ldrd2

ARM_strd2 = _ida_domain.ARM_strd2

ARM_crc32 = _ida_domain.ARM_crc32

ARM_crc32c = _ida_domain.ARM_crc32c

ARM_tt = _ida_domain.ARM_tt

ARM_tta = _ida_domain.ARM_tta

ARM_sg = _ida_domain.ARM_sg

ARM_vlldm = _ida_domain.ARM_vlldm

ARM_vlstm = _ida_domain.ARM_vlstm

ARM_pldw = _ida_domain.ARM_pldw

ARM_vqrdmlah = _ida_domain.ARM_vqrdmlah

ARM_vqrdmlsh = _ida_domain.ARM_vqrdmlsh

ARM_vmovx = _ida_domain.ARM_vmovx

ARM_vins = _ida_domain.ARM_vins

ARM_vjcvt = _ida_domain.ARM_vjcvt

ARM_fjcvtzs = _ida_domain.ARM_fjcvtzs

ARM_ldapur = _ida_domain.ARM_ldapur

ARM_stlur = _ida_domain.ARM_stlur

ARM_cfinv = _ida_domain.ARM_cfinv

ARM_rmif = _ida_domain.ARM_rmif

ARM_setf8 = _ida_domain.ARM_setf8

ARM_setf16 = _ida_domain.ARM_setf16

ARM_xaflag = _ida_domain.ARM_xaflag

ARM_axflag = _ida_domain.ARM_axflag

ARM_addg = _ida_domain.ARM_addg

ARM_subg = _ida_domain.ARM_subg

ARM_subp = _ida_domain.ARM_subp

ARM_cmpp = _ida_domain.ARM_cmpp

ARM_irg = _ida_domain.ARM_irg

ARM_gmi = _ida_domain.ARM_gmi

ARM_stg = _ida_domain.ARM_stg

ARM_stzg = _ida_domain.ARM_stzg

ARM_stzgm = _ida_domain.ARM_stzgm

ARM_st2g = _ida_domain.ARM_st2g

ARM_stz2g = _ida_domain.ARM_stz2g

ARM_stgm = _ida_domain.ARM_stgm

ARM_stgp = _ida_domain.ARM_stgp

ARM_ldg = _ida_domain.ARM_ldg

ARM_ldgm = _ida_domain.ARM_ldgm

ARM_bti = _ida_domain.ARM_bti

ARM_sb = _ida_domain.ARM_sb

ARM_ssbb = _ida_domain.ARM_ssbb

ARM_pssbb = _ida_domain.ARM_pssbb

ARM_frint32x = _ida_domain.ARM_frint32x

ARM_frint32z = _ida_domain.ARM_frint32z

ARM_frint64x = _ida_domain.ARM_frint64x

ARM_frint64z = _ida_domain.ARM_frint64z

ARM_bcax = _ida_domain.ARM_bcax

ARM_eor3 = _ida_domain.ARM_eor3

ARM_rax1 = _ida_domain.ARM_rax1

ARM_xar = _ida_domain.ARM_xar

ARM_sha512h = _ida_domain.ARM_sha512h

ARM_sha512h2 = _ida_domain.ARM_sha512h2

ARM_sha512su0 = _ida_domain.ARM_sha512su0

ARM_sha512su1 = _ida_domain.ARM_sha512su1

ARM_sm3partw1 = _ida_domain.ARM_sm3partw1

ARM_sm3partw2 = _ida_domain.ARM_sm3partw2

ARM_sm3ss1 = _ida_domain.ARM_sm3ss1

ARM_sm3tt1a = _ida_domain.ARM_sm3tt1a

ARM_sm3tt1b = _ida_domain.ARM_sm3tt1b

ARM_sm3tt2a = _ida_domain.ARM_sm3tt2a

ARM_sm3tt2b = _ida_domain.ARM_sm3tt2b

ARM_sm4e = _ida_domain.ARM_sm4e

ARM_sm4ekey = _ida_domain.ARM_sm4ekey

ARM_sudot = _ida_domain.ARM_sudot

ARM_ummla = _ida_domain.ARM_ummla

ARM_usdot = _ida_domain.ARM_usdot

ARM_usmmla = _ida_domain.ARM_usmmla

ARM_sdot = _ida_domain.ARM_sdot

ARM_udot = _ida_domain.ARM_udot

ARM_fmlal = _ida_domain.ARM_fmlal

ARM_fmlal2 = _ida_domain.ARM_fmlal2

ARM_fmlsl = _ida_domain.ARM_fmlsl

ARM_fmlsl2 = _ida_domain.ARM_fmlsl2

ARM_bfmmla = _ida_domain.ARM_bfmmla

ARM_bfmlalb = _ida_domain.ARM_bfmlalb

ARM_bfmlalt = _ida_domain.ARM_bfmlalt

ARM_bfdot = _ida_domain.ARM_bfdot

ARM_bfcvtn = _ida_domain.ARM_bfcvtn

ARM_bfcvtn2 = _ida_domain.ARM_bfcvtn2

ARM_bfcvt = _ida_domain.ARM_bfcvt

ARM_trap = _ida_domain.ARM_trap

ARM_trap2 = _ida_domain.ARM_trap2

ARM_genter = _ida_domain.ARM_genter

ARM_gexit = _ida_domain.ARM_gexit

ARM_wkdmc = _ida_domain.ARM_wkdmc

ARM_wkdmd = _ida_domain.ARM_wkdmd

ARM_sdsb = _ida_domain.ARM_sdsb

ARM_amx = _ida_domain.ARM_amx

ARM_mul53lo = _ida_domain.ARM_mul53lo

ARM_mul53hi = _ida_domain.ARM_mul53hi

ARM_last = _ida_domain.ARM_last

TMS6_null = _ida_domain.TMS6_null

TMS6_abs = _ida_domain.TMS6_abs

TMS6_add = _ida_domain.TMS6_add

TMS6_addu = _ida_domain.TMS6_addu

TMS6_addab = _ida_domain.TMS6_addab

TMS6_addah = _ida_domain.TMS6_addah

TMS6_addaw = _ida_domain.TMS6_addaw

TMS6_addk = _ida_domain.TMS6_addk

TMS6_add2 = _ida_domain.TMS6_add2

TMS6_and = _ida_domain.TMS6_and

TMS6_b = _ida_domain.TMS6_b

TMS6_clr = _ida_domain.TMS6_clr

TMS6_cmpeq = _ida_domain.TMS6_cmpeq

TMS6_cmpgt = _ida_domain.TMS6_cmpgt

TMS6_cmpgtu = _ida_domain.TMS6_cmpgtu

TMS6_cmplt = _ida_domain.TMS6_cmplt

TMS6_cmpltu = _ida_domain.TMS6_cmpltu

TMS6_ext = _ida_domain.TMS6_ext

TMS6_extu = _ida_domain.TMS6_extu

TMS6_idle = _ida_domain.TMS6_idle

TMS6_ldb = _ida_domain.TMS6_ldb

TMS6_ldbu = _ida_domain.TMS6_ldbu

TMS6_ldh = _ida_domain.TMS6_ldh

TMS6_ldhu = _ida_domain.TMS6_ldhu

TMS6_ldw = _ida_domain.TMS6_ldw

TMS6_lmbd = _ida_domain.TMS6_lmbd

TMS6_mpy = _ida_domain.TMS6_mpy

TMS6_mpyu = _ida_domain.TMS6_mpyu

TMS6_mpyus = _ida_domain.TMS6_mpyus

TMS6_mpysu = _ida_domain.TMS6_mpysu

TMS6_mpyh = _ida_domain.TMS6_mpyh

TMS6_mpyhu = _ida_domain.TMS6_mpyhu

TMS6_mpyhus = _ida_domain.TMS6_mpyhus

TMS6_mpyhsu = _ida_domain.TMS6_mpyhsu

TMS6_mpyhl = _ida_domain.TMS6_mpyhl

TMS6_mpyhlu = _ida_domain.TMS6_mpyhlu

TMS6_mpyhuls = _ida_domain.TMS6_mpyhuls

TMS6_mpyhslu = _ida_domain.TMS6_mpyhslu

TMS6_mpylh = _ida_domain.TMS6_mpylh

TMS6_mpylhu = _ida_domain.TMS6_mpylhu

TMS6_mpyluhs = _ida_domain.TMS6_mpyluhs

TMS6_mpylshu = _ida_domain.TMS6_mpylshu

TMS6_mv = _ida_domain.TMS6_mv

TMS6_mvc = _ida_domain.TMS6_mvc

TMS6_mvk = _ida_domain.TMS6_mvk

TMS6_mvkh = _ida_domain.TMS6_mvkh

TMS6_mvklh = _ida_domain.TMS6_mvklh

TMS6_neg = _ida_domain.TMS6_neg

TMS6_nop = _ida_domain.TMS6_nop

TMS6_norm = _ida_domain.TMS6_norm

TMS6_not = _ida_domain.TMS6_not

TMS6_or = _ida_domain.TMS6_or

TMS6_sadd = _ida_domain.TMS6_sadd

TMS6_sat = _ida_domain.TMS6_sat

TMS6_set = _ida_domain.TMS6_set

TMS6_shl = _ida_domain.TMS6_shl

TMS6_shr = _ida_domain.TMS6_shr

TMS6_shru = _ida_domain.TMS6_shru

TMS6_smpy = _ida_domain.TMS6_smpy

TMS6_smpyhl = _ida_domain.TMS6_smpyhl

TMS6_smpylh = _ida_domain.TMS6_smpylh

TMS6_smpyh = _ida_domain.TMS6_smpyh

TMS6_sshl = _ida_domain.TMS6_sshl

TMS6_ssub = _ida_domain.TMS6_ssub

TMS6_stb = _ida_domain.TMS6_stb

TMS6_stbu = _ida_domain.TMS6_stbu

TMS6_sth = _ida_domain.TMS6_sth

TMS6_sthu = _ida_domain.TMS6_sthu

TMS6_stw = _ida_domain.TMS6_stw

TMS6_sub = _ida_domain.TMS6_sub

TMS6_subu = _ida_domain.TMS6_subu

TMS6_subab = _ida_domain.TMS6_subab

TMS6_subah = _ida_domain.TMS6_subah

TMS6_subaw = _ida_domain.TMS6_subaw

TMS6_subc = _ida_domain.TMS6_subc

TMS6_sub2 = _ida_domain.TMS6_sub2

TMS6_xor = _ida_domain.TMS6_xor

TMS6_zero = _ida_domain.TMS6_zero

TMS6_abs2 = _ida_domain.TMS6_abs2

TMS6_absdp = _ida_domain.TMS6_absdp

TMS6_abssp = _ida_domain.TMS6_abssp

TMS6_add4 = _ida_domain.TMS6_add4

TMS6_addad = _ida_domain.TMS6_addad

TMS6_adddp = _ida_domain.TMS6_adddp

TMS6_addkpc = _ida_domain.TMS6_addkpc

TMS6_addsp = _ida_domain.TMS6_addsp

TMS6_addsub = _ida_domain.TMS6_addsub

TMS6_addsub2 = _ida_domain.TMS6_addsub2

TMS6_andn = _ida_domain.TMS6_andn

TMS6_avg2 = _ida_domain.TMS6_avg2

TMS6_avgu4 = _ida_domain.TMS6_avgu4

TMS6_bdec = _ida_domain.TMS6_bdec

TMS6_bitc4 = _ida_domain.TMS6_bitc4

TMS6_bitr = _ida_domain.TMS6_bitr

TMS6_bnop = _ida_domain.TMS6_bnop

TMS6_bpos = _ida_domain.TMS6_bpos

TMS6_callp = _ida_domain.TMS6_callp

TMS6_cmpeq2 = _ida_domain.TMS6_cmpeq2

TMS6_cmpeq4 = _ida_domain.TMS6_cmpeq4

TMS6_cmpeqdp = _ida_domain.TMS6_cmpeqdp

TMS6_cmpeqsp = _ida_domain.TMS6_cmpeqsp

TMS6_cmpgt2 = _ida_domain.TMS6_cmpgt2

TMS6_cmpgtdp = _ida_domain.TMS6_cmpgtdp

TMS6_cmpgtsp = _ida_domain.TMS6_cmpgtsp

TMS6_cmpgtu4 = _ida_domain.TMS6_cmpgtu4

TMS6_cmplt2 = _ida_domain.TMS6_cmplt2

TMS6_cmpltdp = _ida_domain.TMS6_cmpltdp

TMS6_cmpltsp = _ida_domain.TMS6_cmpltsp

TMS6_cmpltu4 = _ida_domain.TMS6_cmpltu4

TMS6_cmpy = _ida_domain.TMS6_cmpy

TMS6_cmpyr = _ida_domain.TMS6_cmpyr

TMS6_cmpyr1 = _ida_domain.TMS6_cmpyr1

TMS6_ddotp4 = _ida_domain.TMS6_ddotp4

TMS6_ddotph2 = _ida_domain.TMS6_ddotph2

TMS6_ddotph2r = _ida_domain.TMS6_ddotph2r

TMS6_ddotpl2 = _ida_domain.TMS6_ddotpl2

TMS6_ddotpl2r = _ida_domain.TMS6_ddotpl2r

TMS6_deal = _ida_domain.TMS6_deal

TMS6_dint = _ida_domain.TMS6_dint

TMS6_dmv = _ida_domain.TMS6_dmv

TMS6_dotp2 = _ida_domain.TMS6_dotp2

TMS6_dotpn2 = _ida_domain.TMS6_dotpn2

TMS6_dotpnrsu2 = _ida_domain.TMS6_dotpnrsu2

TMS6_dotpnrus2 = _ida_domain.TMS6_dotpnrus2

TMS6_dotprsu2 = _ida_domain.TMS6_dotprsu2

TMS6_dotprus2 = _ida_domain.TMS6_dotprus2

TMS6_dotpsu4 = _ida_domain.TMS6_dotpsu4

TMS6_dotpu4 = _ida_domain.TMS6_dotpu4

TMS6_dotpus4 = _ida_domain.TMS6_dotpus4

TMS6_dpack2 = _ida_domain.TMS6_dpack2

TMS6_dpackx2 = _ida_domain.TMS6_dpackx2

TMS6_dpint = _ida_domain.TMS6_dpint

TMS6_dpsp = _ida_domain.TMS6_dpsp

TMS6_dptrunc = _ida_domain.TMS6_dptrunc

TMS6_gmpy = _ida_domain.TMS6_gmpy

TMS6_gmpy4 = _ida_domain.TMS6_gmpy4

TMS6_intdp = _ida_domain.TMS6_intdp

TMS6_intdpu = _ida_domain.TMS6_intdpu

TMS6_intsp = _ida_domain.TMS6_intsp

TMS6_intspu = _ida_domain.TMS6_intspu

TMS6_lddw = _ida_domain.TMS6_lddw

TMS6_ldndw = _ida_domain.TMS6_ldndw

TMS6_ldnw = _ida_domain.TMS6_ldnw

TMS6_max2 = _ida_domain.TMS6_max2

TMS6_maxu4 = _ida_domain.TMS6_maxu4

TMS6_min2 = _ida_domain.TMS6_min2

TMS6_minu4 = _ida_domain.TMS6_minu4

TMS6_mpy2 = _ida_domain.TMS6_mpy2

TMS6_mpy2ir = _ida_domain.TMS6_mpy2ir

TMS6_mpy32 = _ida_domain.TMS6_mpy32

TMS6_mpy32su = _ida_domain.TMS6_mpy32su

TMS6_mpy32u = _ida_domain.TMS6_mpy32u

TMS6_mpy32us = _ida_domain.TMS6_mpy32us

TMS6_mpydp = _ida_domain.TMS6_mpydp

TMS6_mpyhi = _ida_domain.TMS6_mpyhi

TMS6_mpyhir = _ida_domain.TMS6_mpyhir

TMS6_mpyi = _ida_domain.TMS6_mpyi

TMS6_mpyid = _ida_domain.TMS6_mpyid

TMS6_mpyih = _ida_domain.TMS6_mpyih

TMS6_mpyihr = _ida_domain.TMS6_mpyihr

TMS6_mpyil = _ida_domain.TMS6_mpyil

TMS6_mpyilr = _ida_domain.TMS6_mpyilr

TMS6_mpyli = _ida_domain.TMS6_mpyli

TMS6_mpylir = _ida_domain.TMS6_mpylir

TMS6_mpysp = _ida_domain.TMS6_mpysp

TMS6_mpysp2dp = _ida_domain.TMS6_mpysp2dp

TMS6_mpyspdp = _ida_domain.TMS6_mpyspdp

TMS6_mpysu4 = _ida_domain.TMS6_mpysu4

TMS6_mpyu4 = _ida_domain.TMS6_mpyu4

TMS6_mpyus4 = _ida_domain.TMS6_mpyus4

TMS6_mvd = _ida_domain.TMS6_mvd

TMS6_mvkl = _ida_domain.TMS6_mvkl

TMS6_pack2 = _ida_domain.TMS6_pack2

TMS6_packh2 = _ida_domain.TMS6_packh2

TMS6_packh4 = _ida_domain.TMS6_packh4

TMS6_packhl2 = _ida_domain.TMS6_packhl2

TMS6_packl4 = _ida_domain.TMS6_packl4

TMS6_packlh2 = _ida_domain.TMS6_packlh2

TMS6_rcpdp = _ida_domain.TMS6_rcpdp

TMS6_rcpsp = _ida_domain.TMS6_rcpsp

TMS6_rint = _ida_domain.TMS6_rint

TMS6_rotl = _ida_domain.TMS6_rotl

TMS6_rpack2 = _ida_domain.TMS6_rpack2

TMS6_rsqrdp = _ida_domain.TMS6_rsqrdp

TMS6_rsqrsp = _ida_domain.TMS6_rsqrsp

TMS6_sadd2 = _ida_domain.TMS6_sadd2

TMS6_saddsu2 = _ida_domain.TMS6_saddsu2

TMS6_saddsub = _ida_domain.TMS6_saddsub

TMS6_saddsub2 = _ida_domain.TMS6_saddsub2

TMS6_saddu4 = _ida_domain.TMS6_saddu4

TMS6_saddus2 = _ida_domain.TMS6_saddus2

TMS6_shfl = _ida_domain.TMS6_shfl

TMS6_shfl3 = _ida_domain.TMS6_shfl3

TMS6_shlmb = _ida_domain.TMS6_shlmb

TMS6_shr2 = _ida_domain.TMS6_shr2

TMS6_shrmb = _ida_domain.TMS6_shrmb

TMS6_shru2 = _ida_domain.TMS6_shru2

TMS6_smpy2 = _ida_domain.TMS6_smpy2

TMS6_smpy32 = _ida_domain.TMS6_smpy32

TMS6_spack2 = _ida_domain.TMS6_spack2

TMS6_spacku4 = _ida_domain.TMS6_spacku4

TMS6_spdp = _ida_domain.TMS6_spdp

TMS6_spint = _ida_domain.TMS6_spint

TMS6_spkernel = _ida_domain.TMS6_spkernel

TMS6_spkernelr = _ida_domain.TMS6_spkernelr

TMS6_sploop = _ida_domain.TMS6_sploop

TMS6_sploopd = _ida_domain.TMS6_sploopd

TMS6_sploopw = _ida_domain.TMS6_sploopw

TMS6_spmask = _ida_domain.TMS6_spmask

TMS6_spmaskr = _ida_domain.TMS6_spmaskr

TMS6_sptrunc = _ida_domain.TMS6_sptrunc

TMS6_sshvl = _ida_domain.TMS6_sshvl

TMS6_sshvr = _ida_domain.TMS6_sshvr

TMS6_ssub2 = _ida_domain.TMS6_ssub2

TMS6_stdw = _ida_domain.TMS6_stdw

TMS6_stndw = _ida_domain.TMS6_stndw

TMS6_stnw = _ida_domain.TMS6_stnw

TMS6_sub4 = _ida_domain.TMS6_sub4

TMS6_subabs4 = _ida_domain.TMS6_subabs4

TMS6_subdp = _ida_domain.TMS6_subdp

TMS6_subsp = _ida_domain.TMS6_subsp

TMS6_swap2 = _ida_domain.TMS6_swap2

TMS6_swap4 = _ida_domain.TMS6_swap4

TMS6_swe = _ida_domain.TMS6_swe

TMS6_swenr = _ida_domain.TMS6_swenr

TMS6_unpkhu4 = _ida_domain.TMS6_unpkhu4

TMS6_unpklu4 = _ida_domain.TMS6_unpklu4

TMS6_xormpy = _ida_domain.TMS6_xormpy

TMS6_xpnd2 = _ida_domain.TMS6_xpnd2

TMS6_xpnd4 = _ida_domain.TMS6_xpnd4

TMS6_fphead = _ida_domain.TMS6_fphead

TMS6_last = _ida_domain.TMS6_last

I196_null = _ida_domain.I196_null

I196_add2 = _ida_domain.I196_add2

I196_add3 = _ida_domain.I196_add3

I196_addb2 = _ida_domain.I196_addb2

I196_addb3 = _ida_domain.I196_addb3

I196_addc = _ida_domain.I196_addc

I196_addcb = _ida_domain.I196_addcb

I196_and2 = _ida_domain.I196_and2

I196_and3 = _ida_domain.I196_and3

I196_andb2 = _ida_domain.I196_andb2

I196_andb3 = _ida_domain.I196_andb3

I196_bmov = _ida_domain.I196_bmov

I196_bmovi = _ida_domain.I196_bmovi

I196_br = _ida_domain.I196_br

I196_clr = _ida_domain.I196_clr

I196_clrb = _ida_domain.I196_clrb

I196_clrc = _ida_domain.I196_clrc

I196_clrvt = _ida_domain.I196_clrvt

I196_cmp = _ida_domain.I196_cmp

I196_cmpb = _ida_domain.I196_cmpb

I196_cmpl = _ida_domain.I196_cmpl

I196_dec = _ida_domain.I196_dec

I196_decb = _ida_domain.I196_decb

I196_di = _ida_domain.I196_di

I196_div = _ida_domain.I196_div

I196_divb = _ida_domain.I196_divb

I196_divu = _ida_domain.I196_divu

I196_divub = _ida_domain.I196_divub

I196_djnz = _ida_domain.I196_djnz

I196_djnzw = _ida_domain.I196_djnzw

I196_dpts = _ida_domain.I196_dpts

I196_ei = _ida_domain.I196_ei

I196_epts = _ida_domain.I196_epts

I196_ext = _ida_domain.I196_ext

I196_extb = _ida_domain.I196_extb

I196_idlpd = _ida_domain.I196_idlpd

I196_inc = _ida_domain.I196_inc

I196_incb = _ida_domain.I196_incb

I196_jbc = _ida_domain.I196_jbc

I196_jbs = _ida_domain.I196_jbs

I196_jc = _ida_domain.I196_jc

I196_je = _ida_domain.I196_je

I196_jge = _ida_domain.I196_jge

I196_jgt = _ida_domain.I196_jgt

I196_jh = _ida_domain.I196_jh

I196_jle = _ida_domain.I196_jle

I196_jlt = _ida_domain.I196_jlt

I196_jnc = _ida_domain.I196_jnc

I196_jne = _ida_domain.I196_jne

I196_jnh = _ida_domain.I196_jnh

I196_jnst = _ida_domain.I196_jnst

I196_jnv = _ida_domain.I196_jnv

I196_jnvt = _ida_domain.I196_jnvt

I196_jst = _ida_domain.I196_jst

I196_jv = _ida_domain.I196_jv

I196_jvt = _ida_domain.I196_jvt

I196_lcall = _ida_domain.I196_lcall

I196_ld = _ida_domain.I196_ld

I196_ldb = _ida_domain.I196_ldb

I196_ldbse = _ida_domain.I196_ldbse

I196_ldbze = _ida_domain.I196_ldbze

I196_ljmp = _ida_domain.I196_ljmp

I196_mul2 = _ida_domain.I196_mul2

I196_mul3 = _ida_domain.I196_mul3

I196_mulb2 = _ida_domain.I196_mulb2

I196_mulb3 = _ida_domain.I196_mulb3

I196_mulu2 = _ida_domain.I196_mulu2

I196_mulu3 = _ida_domain.I196_mulu3

I196_mulub2 = _ida_domain.I196_mulub2

I196_mulub3 = _ida_domain.I196_mulub3

I196_neg = _ida_domain.I196_neg

I196_negb = _ida_domain.I196_negb

I196_nop = _ida_domain.I196_nop

I196_norml = _ida_domain.I196_norml

I196_not = _ida_domain.I196_not

I196_notb = _ida_domain.I196_notb

I196_or = _ida_domain.I196_or

I196_orb = _ida_domain.I196_orb

I196_pop = _ida_domain.I196_pop

I196_popa = _ida_domain.I196_popa

I196_popf = _ida_domain.I196_popf

I196_push = _ida_domain.I196_push

I196_pusha = _ida_domain.I196_pusha

I196_pushf = _ida_domain.I196_pushf

I196_ret = _ida_domain.I196_ret

I196_rst = _ida_domain.I196_rst

I196_scall = _ida_domain.I196_scall

I196_setc = _ida_domain.I196_setc

I196_shl = _ida_domain.I196_shl

I196_shlb = _ida_domain.I196_shlb

I196_shll = _ida_domain.I196_shll

I196_shr = _ida_domain.I196_shr

I196_shra = _ida_domain.I196_shra

I196_shrab = _ida_domain.I196_shrab

I196_shral = _ida_domain.I196_shral

I196_shrb = _ida_domain.I196_shrb

I196_shrl = _ida_domain.I196_shrl

I196_sjmp = _ida_domain.I196_sjmp

I196_skip = _ida_domain.I196_skip

I196_st = _ida_domain.I196_st

I196_stb = _ida_domain.I196_stb

I196_sub2 = _ida_domain.I196_sub2

I196_sub3 = _ida_domain.I196_sub3

I196_subb2 = _ida_domain.I196_subb2

I196_subb3 = _ida_domain.I196_subb3

I196_subc = _ida_domain.I196_subc

I196_subcb = _ida_domain.I196_subcb

I196_tijmp = _ida_domain.I196_tijmp

I196_trap = _ida_domain.I196_trap

I196_xch = _ida_domain.I196_xch

I196_xchb = _ida_domain.I196_xchb

I196_xor = _ida_domain.I196_xor

I196_xorb = _ida_domain.I196_xorb

I196_ebmovi = _ida_domain.I196_ebmovi

I196_ebr = _ida_domain.I196_ebr

I196_ecall = _ida_domain.I196_ecall

I196_ejmp = _ida_domain.I196_ejmp

I196_eld = _ida_domain.I196_eld

I196_eldb = _ida_domain.I196_eldb

I196_est = _ida_domain.I196_est

I196_estb = _ida_domain.I196_estb

I196_last = _ida_domain.I196_last

SH3_null = _ida_domain.SH3_null

SH3_add = _ida_domain.SH3_add

SH3_addc = _ida_domain.SH3_addc

SH3_addv = _ida_domain.SH3_addv

SH3_and = _ida_domain.SH3_and

SH3_and_b = _ida_domain.SH3_and_b

SH3_bf = _ida_domain.SH3_bf

SH3_bf_s = _ida_domain.SH3_bf_s

SH3_bra = _ida_domain.SH3_bra

SH3_braf = _ida_domain.SH3_braf

SH3_bsr = _ida_domain.SH3_bsr

SH3_bsrf = _ida_domain.SH3_bsrf

SH3_bt = _ida_domain.SH3_bt

SH3_bt_s = _ida_domain.SH3_bt_s

SH3_clrmac = _ida_domain.SH3_clrmac

SH3_clrs = _ida_domain.SH3_clrs

SH3_clrt = _ida_domain.SH3_clrt

SH3_cmp_eq = _ida_domain.SH3_cmp_eq

SH3_cmp_ge = _ida_domain.SH3_cmp_ge

SH3_cmp_gt = _ida_domain.SH3_cmp_gt

SH3_cmp_hi = _ida_domain.SH3_cmp_hi

SH3_cmp_hs = _ida_domain.SH3_cmp_hs

SH3_cmp_pl = _ida_domain.SH3_cmp_pl

SH3_cmp_pz = _ida_domain.SH3_cmp_pz

SH3_cmp_str = _ida_domain.SH3_cmp_str

SH3_div0s = _ida_domain.SH3_div0s

SH3_div0u = _ida_domain.SH3_div0u

SH3_div1 = _ida_domain.SH3_div1

SH3_dmuls_l = _ida_domain.SH3_dmuls_l

SH3_dmulu_l = _ida_domain.SH3_dmulu_l

SH3_dt = _ida_domain.SH3_dt

SH3_exts_b = _ida_domain.SH3_exts_b

SH3_exts_w = _ida_domain.SH3_exts_w

SH3_extu_b = _ida_domain.SH3_extu_b

SH3_extu_w = _ida_domain.SH3_extu_w

SH3_jmp = _ida_domain.SH3_jmp

SH3_jsr = _ida_domain.SH3_jsr

SH3_ldc = _ida_domain.SH3_ldc

SH3_ldc_l = _ida_domain.SH3_ldc_l

SH3_lds = _ida_domain.SH3_lds

SH3_lds_l = _ida_domain.SH3_lds_l

SH3_ldtlb = _ida_domain.SH3_ldtlb

SH3_mac_w = _ida_domain.SH3_mac_w

SH3_mac_l = _ida_domain.SH3_mac_l

SH3_mov = _ida_domain.SH3_mov

SH3_mov_b = _ida_domain.SH3_mov_b

SH3_mov_w = _ida_domain.SH3_mov_w

SH3_mov_l = _ida_domain.SH3_mov_l

SH3_movi = _ida_domain.SH3_movi

SH3_movi_w = _ida_domain.SH3_movi_w

SH3_movi_l = _ida_domain.SH3_movi_l

SH3_movp_b = _ida_domain.SH3_movp_b

SH3_movp_w = _ida_domain.SH3_movp_w

SH3_movp_l = _ida_domain.SH3_movp_l

SH3_movs_b = _ida_domain.SH3_movs_b

SH3_movs_w = _ida_domain.SH3_movs_w

SH3_movs_l = _ida_domain.SH3_movs_l

SH3_mova = _ida_domain.SH3_mova

SH3_movt = _ida_domain.SH3_movt

SH3_mul = _ida_domain.SH3_mul

SH3_muls = _ida_domain.SH3_muls

SH3_mulu = _ida_domain.SH3_mulu

SH3_neg = _ida_domain.SH3_neg

SH3_negc = _ida_domain.SH3_negc

SH3_nop = _ida_domain.SH3_nop

SH3_not = _ida_domain.SH3_not

SH3_or = _ida_domain.SH3_or

SH3_or_b = _ida_domain.SH3_or_b

SH3_pref = _ida_domain.SH3_pref

SH3_rotcl = _ida_domain.SH3_rotcl

SH3_rotcr = _ida_domain.SH3_rotcr

SH3_rotl = _ida_domain.SH3_rotl

SH3_rotr = _ida_domain.SH3_rotr

SH3_rte = _ida_domain.SH3_rte

SH3_rts = _ida_domain.SH3_rts

SH3_sets = _ida_domain.SH3_sets

SH3_sett = _ida_domain.SH3_sett

SH3_shad = _ida_domain.SH3_shad

SH3_shal = _ida_domain.SH3_shal

SH3_shar = _ida_domain.SH3_shar

SH3_shld = _ida_domain.SH3_shld

SH3_shll = _ida_domain.SH3_shll

SH3_shll2 = _ida_domain.SH3_shll2

SH3_shll8 = _ida_domain.SH3_shll8

SH3_shll16 = _ida_domain.SH3_shll16

SH3_shlr = _ida_domain.SH3_shlr

SH3_shlr2 = _ida_domain.SH3_shlr2

SH3_shlr8 = _ida_domain.SH3_shlr8

SH3_shlr16 = _ida_domain.SH3_shlr16

SH3_sleep = _ida_domain.SH3_sleep

SH3_stc = _ida_domain.SH3_stc

SH3_stc_l = _ida_domain.SH3_stc_l

SH3_sts = _ida_domain.SH3_sts

SH3_sts_l = _ida_domain.SH3_sts_l

SH3_sub = _ida_domain.SH3_sub

SH3_subc = _ida_domain.SH3_subc

SH3_subv = _ida_domain.SH3_subv

SH3_swap_b = _ida_domain.SH3_swap_b

SH3_swap_w = _ida_domain.SH3_swap_w

SH3_tas_b = _ida_domain.SH3_tas_b

SH3_trapa = _ida_domain.SH3_trapa

SH3_tst = _ida_domain.SH3_tst

SH3_tst_b = _ida_domain.SH3_tst_b

SH3_xor = _ida_domain.SH3_xor

SH3_xor_b = _ida_domain.SH3_xor_b

SH3_xtrct = _ida_domain.SH3_xtrct

SH4_fabs = _ida_domain.SH4_fabs

SH4_fadd = _ida_domain.SH4_fadd

SH4_fcmp_eq = _ida_domain.SH4_fcmp_eq

SH4_fcmp_gt = _ida_domain.SH4_fcmp_gt

SH4_fcnvds = _ida_domain.SH4_fcnvds

SH4_fcnvsd = _ida_domain.SH4_fcnvsd

SH4_fdiv = _ida_domain.SH4_fdiv

SH4_fipr = _ida_domain.SH4_fipr

SH4_fldi0 = _ida_domain.SH4_fldi0

SH4_fldi1 = _ida_domain.SH4_fldi1

SH4_flds = _ida_domain.SH4_flds

SH4_float = _ida_domain.SH4_float

SH4_fmac = _ida_domain.SH4_fmac

SH4_fmov = _ida_domain.SH4_fmov

SH4_fmov_s = _ida_domain.SH4_fmov_s

SH4_fmovex = _ida_domain.SH4_fmovex

SH4_fmul = _ida_domain.SH4_fmul

SH4_fneg = _ida_domain.SH4_fneg

SH4_frchg = _ida_domain.SH4_frchg

SH4_fschg = _ida_domain.SH4_fschg

SH4_fsqrt = _ida_domain.SH4_fsqrt

SH4_fsts = _ida_domain.SH4_fsts

SH4_fsub = _ida_domain.SH4_fsub

SH4_ftrc = _ida_domain.SH4_ftrc

SH4_ftrv = _ida_domain.SH4_ftrv

SH4_ftstn = _ida_domain.SH4_ftstn

SH4_movca_l = _ida_domain.SH4_movca_l

SH4_ocbi = _ida_domain.SH4_ocbi

SH4_ocbp = _ida_domain.SH4_ocbp

SH4_ocbwb = _ida_domain.SH4_ocbwb

SH4_fsca = _ida_domain.SH4_fsca

SH2a_band_b = _ida_domain.SH2a_band_b

SH2a_bandnot_b = _ida_domain.SH2a_bandnot_b

SH2a_bclr = _ida_domain.SH2a_bclr

SH2a_bclr_b = _ida_domain.SH2a_bclr_b

SH2a_bld = _ida_domain.SH2a_bld

SH2a_bld_b = _ida_domain.SH2a_bld_b

SH2a_bldnot_b = _ida_domain.SH2a_bldnot_b

SH2a_bor_b = _ida_domain.SH2a_bor_b

SH2a_bornot_b = _ida_domain.SH2a_bornot_b

SH2a_bset = _ida_domain.SH2a_bset

SH2a_bset_b = _ida_domain.SH2a_bset_b

SH2a_bst = _ida_domain.SH2a_bst

SH2a_bst_b = _ida_domain.SH2a_bst_b

SH2a_bxor_b = _ida_domain.SH2a_bxor_b

SH2a_clips_b = _ida_domain.SH2a_clips_b

SH2a_clips_w = _ida_domain.SH2a_clips_w

SH2a_clipu_b = _ida_domain.SH2a_clipu_b

SH2a_clipu_w = _ida_domain.SH2a_clipu_w

SH2a_divs = _ida_domain.SH2a_divs

SH2a_divu = _ida_domain.SH2a_divu

SH2a_jsr_n = _ida_domain.SH2a_jsr_n

SH2a_ldbank = _ida_domain.SH2a_ldbank

SH2a_movi20 = _ida_domain.SH2a_movi20

SH2a_movi20s = _ida_domain.SH2a_movi20s

SH2a_movml_l = _ida_domain.SH2a_movml_l

SH2a_movmu_l = _ida_domain.SH2a_movmu_l

SH2a_movrt = _ida_domain.SH2a_movrt

SH2a_movu_b = _ida_domain.SH2a_movu_b

SH2a_movu_w = _ida_domain.SH2a_movu_w

SH2a_mulr = _ida_domain.SH2a_mulr

SH2a_nott = _ida_domain.SH2a_nott

SH2a_resbank = _ida_domain.SH2a_resbank

SH2a_rts_n = _ida_domain.SH2a_rts_n

SH2a_rtv_n = _ida_domain.SH2a_rtv_n

SH2a_stbank = _ida_domain.SH2a_stbank

SH4a_movco_l = _ida_domain.SH4a_movco_l

SH4a_movli_l = _ida_domain.SH4a_movli_l

SH4a_movua_l = _ida_domain.SH4a_movua_l

SH4a_icbi = _ida_domain.SH4a_icbi

SH4a_prefi = _ida_domain.SH4a_prefi

SH4a_synco = _ida_domain.SH4a_synco

SH4a_fsrra = _ida_domain.SH4a_fsrra

SH4a_fpchg = _ida_domain.SH4a_fpchg

SH4_last = _ida_domain.SH4_last

Z8_null = _ida_domain.Z8_null

Z8_adc = _ida_domain.Z8_adc

Z8_add = _ida_domain.Z8_add

Z8_and = _ida_domain.Z8_and

Z8_call = _ida_domain.Z8_call

Z8_ccf = _ida_domain.Z8_ccf

Z8_clr = _ida_domain.Z8_clr

Z8_com = _ida_domain.Z8_com

Z8_cp = _ida_domain.Z8_cp

Z8_da = _ida_domain.Z8_da

Z8_dec = _ida_domain.Z8_dec

Z8_decw = _ida_domain.Z8_decw

Z8_di = _ida_domain.Z8_di

Z8_djnz = _ida_domain.Z8_djnz

Z8_ei = _ida_domain.Z8_ei

Z8_halt = _ida_domain.Z8_halt

Z8_inc = _ida_domain.Z8_inc

Z8_incw = _ida_domain.Z8_incw

Z8_iret = _ida_domain.Z8_iret

Z8_jp = _ida_domain.Z8_jp

Z8_jpcond = _ida_domain.Z8_jpcond

Z8_jr = _ida_domain.Z8_jr

Z8_jrcond = _ida_domain.Z8_jrcond

Z8_ld = _ida_domain.Z8_ld

Z8_ldc = _ida_domain.Z8_ldc

Z8_ldci = _ida_domain.Z8_ldci

Z8_lde = _ida_domain.Z8_lde

Z8_ldei = _ida_domain.Z8_ldei

Z8_nop = _ida_domain.Z8_nop

Z8_or = _ida_domain.Z8_or

Z8_pop = _ida_domain.Z8_pop

Z8_push = _ida_domain.Z8_push

Z8_rcf = _ida_domain.Z8_rcf

Z8_ret = _ida_domain.Z8_ret

Z8_rl = _ida_domain.Z8_rl

Z8_rlc = _ida_domain.Z8_rlc

Z8_rr = _ida_domain.Z8_rr

Z8_rrc = _ida_domain.Z8_rrc

Z8_sbc = _ida_domain.Z8_sbc

Z8_scf = _ida_domain.Z8_scf

Z8_sra = _ida_domain.Z8_sra

Z8_srp = _ida_domain.Z8_srp

Z8_stop = _ida_domain.Z8_stop

Z8_sub = _ida_domain.Z8_sub

Z8_swap = _ida_domain.Z8_swap

Z8_tm = _ida_domain.Z8_tm

Z8_tcm = _ida_domain.Z8_tcm

Z8_xor = _ida_domain.Z8_xor

Z8_wdh = _ida_domain.Z8_wdh

Z8_wdt = _ida_domain.Z8_wdt

Z8_last = _ida_domain.Z8_last

AVR_null = _ida_domain.AVR_null

AVR_add = _ida_domain.AVR_add

AVR_adc = _ida_domain.AVR_adc

AVR_adiw = _ida_domain.AVR_adiw

AVR_sub = _ida_domain.AVR_sub

AVR_subi = _ida_domain.AVR_subi

AVR_sbc = _ida_domain.AVR_sbc

AVR_sbci = _ida_domain.AVR_sbci

AVR_sbiw = _ida_domain.AVR_sbiw

AVR_and = _ida_domain.AVR_and

AVR_andi = _ida_domain.AVR_andi

AVR_or = _ida_domain.AVR_or

AVR_ori = _ida_domain.AVR_ori

AVR_eor = _ida_domain.AVR_eor

AVR_com = _ida_domain.AVR_com

AVR_neg = _ida_domain.AVR_neg

AVR_sbr = _ida_domain.AVR_sbr

AVR_cbr = _ida_domain.AVR_cbr

AVR_inc = _ida_domain.AVR_inc

AVR_dec = _ida_domain.AVR_dec

AVR_tst = _ida_domain.AVR_tst

AVR_clr = _ida_domain.AVR_clr

AVR_ser = _ida_domain.AVR_ser

AVR_cp = _ida_domain.AVR_cp

AVR_cpc = _ida_domain.AVR_cpc

AVR_cpi = _ida_domain.AVR_cpi

AVR_mul = _ida_domain.AVR_mul

AVR_rjmp = _ida_domain.AVR_rjmp

AVR_ijmp = _ida_domain.AVR_ijmp

AVR_jmp = _ida_domain.AVR_jmp

AVR_rcall = _ida_domain.AVR_rcall

AVR_icall = _ida_domain.AVR_icall

AVR_call = _ida_domain.AVR_call

AVR_ret = _ida_domain.AVR_ret

AVR_reti = _ida_domain.AVR_reti

AVR_cpse = _ida_domain.AVR_cpse

AVR_sbrc = _ida_domain.AVR_sbrc

AVR_sbrs = _ida_domain.AVR_sbrs

AVR_sbic = _ida_domain.AVR_sbic

AVR_sbis = _ida_domain.AVR_sbis

AVR_brbs = _ida_domain.AVR_brbs

AVR_brbc = _ida_domain.AVR_brbc

AVR_breq = _ida_domain.AVR_breq

AVR_brne = _ida_domain.AVR_brne

AVR_brcs = _ida_domain.AVR_brcs

AVR_brcc = _ida_domain.AVR_brcc

AVR_brsh = _ida_domain.AVR_brsh

AVR_brlo = _ida_domain.AVR_brlo

AVR_brmi = _ida_domain.AVR_brmi

AVR_brpl = _ida_domain.AVR_brpl

AVR_brge = _ida_domain.AVR_brge

AVR_brlt = _ida_domain.AVR_brlt

AVR_brhs = _ida_domain.AVR_brhs

AVR_brhc = _ida_domain.AVR_brhc

AVR_brts = _ida_domain.AVR_brts

AVR_brtc = _ida_domain.AVR_brtc

AVR_brvs = _ida_domain.AVR_brvs

AVR_brvc = _ida_domain.AVR_brvc

AVR_brie = _ida_domain.AVR_brie

AVR_brid = _ida_domain.AVR_brid

AVR_mov = _ida_domain.AVR_mov

AVR_ldi = _ida_domain.AVR_ldi

AVR_lds = _ida_domain.AVR_lds

AVR_ld = _ida_domain.AVR_ld

AVR_ldd = _ida_domain.AVR_ldd

AVR_sts = _ida_domain.AVR_sts

AVR_st = _ida_domain.AVR_st

AVR_std = _ida_domain.AVR_std

AVR_lpm = _ida_domain.AVR_lpm

AVR_in = _ida_domain.AVR_in

AVR_out = _ida_domain.AVR_out

AVR_push = _ida_domain.AVR_push

AVR_pop = _ida_domain.AVR_pop

AVR_lsl = _ida_domain.AVR_lsl

AVR_lsr = _ida_domain.AVR_lsr

AVR_rol = _ida_domain.AVR_rol

AVR_ror = _ida_domain.AVR_ror

AVR_asr = _ida_domain.AVR_asr

AVR_swap = _ida_domain.AVR_swap

AVR_bset = _ida_domain.AVR_bset

AVR_bclr = _ida_domain.AVR_bclr

AVR_sbi = _ida_domain.AVR_sbi

AVR_cbi = _ida_domain.AVR_cbi

AVR_bst = _ida_domain.AVR_bst

AVR_bld = _ida_domain.AVR_bld

AVR_sec = _ida_domain.AVR_sec

AVR_clc = _ida_domain.AVR_clc

AVR_sen = _ida_domain.AVR_sen

AVR_cln = _ida_domain.AVR_cln

AVR_sez = _ida_domain.AVR_sez

AVR_clz = _ida_domain.AVR_clz

AVR_sei = _ida_domain.AVR_sei

AVR_cli = _ida_domain.AVR_cli

AVR_ses = _ida_domain.AVR_ses

AVR_cls = _ida_domain.AVR_cls

AVR_sev = _ida_domain.AVR_sev

AVR_clv = _ida_domain.AVR_clv

AVR_set = _ida_domain.AVR_set

AVR_clt = _ida_domain.AVR_clt

AVR_seh = _ida_domain.AVR_seh

AVR_clh = _ida_domain.AVR_clh

AVR_nop = _ida_domain.AVR_nop

AVR_sleep = _ida_domain.AVR_sleep

AVR_wdr = _ida_domain.AVR_wdr

AVR_elpm = _ida_domain.AVR_elpm

AVR_espm = _ida_domain.AVR_espm

AVR_fmul = _ida_domain.AVR_fmul

AVR_fmuls = _ida_domain.AVR_fmuls

AVR_fmulsu = _ida_domain.AVR_fmulsu

AVR_movw = _ida_domain.AVR_movw

AVR_muls = _ida_domain.AVR_muls

AVR_mulsu = _ida_domain.AVR_mulsu

AVR_spm = _ida_domain.AVR_spm

AVR_eicall = _ida_domain.AVR_eicall

AVR_eijmp = _ida_domain.AVR_eijmp

AVR_des = _ida_domain.AVR_des

AVR_lac = _ida_domain.AVR_lac

AVR_las = _ida_domain.AVR_las

AVR_lat = _ida_domain.AVR_lat

AVR_xch = _ida_domain.AVR_xch

AVR_last = _ida_domain.AVR_last

MIPS_null = _ida_domain.MIPS_null

MIPS_add = _ida_domain.MIPS_add

MIPS_addu = _ida_domain.MIPS_addu

MIPS_and = _ida_domain.MIPS_and

MIPS_dadd = _ida_domain.MIPS_dadd

MIPS_daddu = _ida_domain.MIPS_daddu

MIPS_dsub = _ida_domain.MIPS_dsub

MIPS_dsubu = _ida_domain.MIPS_dsubu

MIPS_nor = _ida_domain.MIPS_nor

MIPS_or = _ida_domain.MIPS_or

MIPS_slt = _ida_domain.MIPS_slt

MIPS_sltu = _ida_domain.MIPS_sltu

MIPS_sub = _ida_domain.MIPS_sub

MIPS_subu = _ida_domain.MIPS_subu

MIPS_xor = _ida_domain.MIPS_xor

MIPS_dsll = _ida_domain.MIPS_dsll

MIPS_dsll32 = _ida_domain.MIPS_dsll32

MIPS_dsra = _ida_domain.MIPS_dsra

MIPS_dsra32 = _ida_domain.MIPS_dsra32

MIPS_dsrl = _ida_domain.MIPS_dsrl

MIPS_dsrl32 = _ida_domain.MIPS_dsrl32

MIPS_sll = _ida_domain.MIPS_sll

MIPS_sra = _ida_domain.MIPS_sra

MIPS_srl = _ida_domain.MIPS_srl

MIPS_dsllv = _ida_domain.MIPS_dsllv

MIPS_dsrav = _ida_domain.MIPS_dsrav

MIPS_dsrlv = _ida_domain.MIPS_dsrlv

MIPS_sllv = _ida_domain.MIPS_sllv

MIPS_srav = _ida_domain.MIPS_srav

MIPS_srlv = _ida_domain.MIPS_srlv

MIPS_addi = _ida_domain.MIPS_addi

MIPS_addiu = _ida_domain.MIPS_addiu

MIPS_daddi = _ida_domain.MIPS_daddi

MIPS_daddiu = _ida_domain.MIPS_daddiu

MIPS_slti = _ida_domain.MIPS_slti

MIPS_sltiu = _ida_domain.MIPS_sltiu

MIPS_andi = _ida_domain.MIPS_andi

MIPS_ori = _ida_domain.MIPS_ori

MIPS_xori = _ida_domain.MIPS_xori

MIPS_teq = _ida_domain.MIPS_teq

MIPS_tge = _ida_domain.MIPS_tge

MIPS_tgeu = _ida_domain.MIPS_tgeu

MIPS_tlt = _ida_domain.MIPS_tlt

MIPS_tltu = _ida_domain.MIPS_tltu

MIPS_tne = _ida_domain.MIPS_tne

MIPS_cfc1 = _ida_domain.MIPS_cfc1

MIPS_cfc2 = _ida_domain.MIPS_cfc2

MIPS_ctc1 = _ida_domain.MIPS_ctc1

MIPS_ctc2 = _ida_domain.MIPS_ctc2

MIPS_dmfc0 = _ida_domain.MIPS_dmfc0

MIPS_qmfc2 = _ida_domain.MIPS_qmfc2

MIPS_dmtc0 = _ida_domain.MIPS_dmtc0

MIPS_qmtc2 = _ida_domain.MIPS_qmtc2

MIPS_mfc0 = _ida_domain.MIPS_mfc0

MIPS_mfc1 = _ida_domain.MIPS_mfc1

MIPS_mfc2 = _ida_domain.MIPS_mfc2

MIPS_mtc0 = _ida_domain.MIPS_mtc0

MIPS_mtc1 = _ida_domain.MIPS_mtc1

MIPS_mtc2 = _ida_domain.MIPS_mtc2

MIPS_teqi = _ida_domain.MIPS_teqi

MIPS_tgei = _ida_domain.MIPS_tgei

MIPS_tgeiu = _ida_domain.MIPS_tgeiu

MIPS_tlti = _ida_domain.MIPS_tlti

MIPS_tltiu = _ida_domain.MIPS_tltiu

MIPS_tnei = _ida_domain.MIPS_tnei

MIPS_ddiv = _ida_domain.MIPS_ddiv

MIPS_ddivu = _ida_domain.MIPS_ddivu

MIPS_div = _ida_domain.MIPS_div

MIPS_divu = _ida_domain.MIPS_divu

MIPS_dmult = _ida_domain.MIPS_dmult

MIPS_dmultu = _ida_domain.MIPS_dmultu

MIPS_mult = _ida_domain.MIPS_mult

MIPS_multu = _ida_domain.MIPS_multu

MIPS_mthi = _ida_domain.MIPS_mthi

MIPS_mtlo = _ida_domain.MIPS_mtlo

MIPS_mfhi = _ida_domain.MIPS_mfhi

MIPS_mflo = _ida_domain.MIPS_mflo

MIPS_cop0 = _ida_domain.MIPS_cop0

MIPS_cop1 = _ida_domain.MIPS_cop1

MIPS_cop2 = _ida_domain.MIPS_cop2

MIPS_break = _ida_domain.MIPS_break

MIPS_syscall = _ida_domain.MIPS_syscall

MIPS_bc0f = _ida_domain.MIPS_bc0f

MIPS_bc1f = _ida_domain.MIPS_bc1f

MIPS_bc2f = _ida_domain.MIPS_bc2f

MIPS_bc3f = _ida_domain.MIPS_bc3f

MIPS_bc0fl = _ida_domain.MIPS_bc0fl

MIPS_bc1fl = _ida_domain.MIPS_bc1fl

MIPS_bc2fl = _ida_domain.MIPS_bc2fl

MIPS_bc3fl = _ida_domain.MIPS_bc3fl

MIPS_bc0t = _ida_domain.MIPS_bc0t

MIPS_bc1t = _ida_domain.MIPS_bc1t

MIPS_bc2t = _ida_domain.MIPS_bc2t

MIPS_bc3t = _ida_domain.MIPS_bc3t

MIPS_bc0tl = _ida_domain.MIPS_bc0tl

MIPS_bc1tl = _ida_domain.MIPS_bc1tl

MIPS_bc2tl = _ida_domain.MIPS_bc2tl

MIPS_bc3tl = _ida_domain.MIPS_bc3tl

MIPS_bgez = _ida_domain.MIPS_bgez

MIPS_bgezal = _ida_domain.MIPS_bgezal

MIPS_bgezall = _ida_domain.MIPS_bgezall

MIPS_bgezl = _ida_domain.MIPS_bgezl

MIPS_bgtz = _ida_domain.MIPS_bgtz

MIPS_bgtzl = _ida_domain.MIPS_bgtzl

MIPS_blez = _ida_domain.MIPS_blez

MIPS_blezl = _ida_domain.MIPS_blezl

MIPS_bltz = _ida_domain.MIPS_bltz

MIPS_bltzal = _ida_domain.MIPS_bltzal

MIPS_bltzall = _ida_domain.MIPS_bltzall

MIPS_bltzl = _ida_domain.MIPS_bltzl

MIPS_beq = _ida_domain.MIPS_beq

MIPS_beql = _ida_domain.MIPS_beql

MIPS_bne = _ida_domain.MIPS_bne

MIPS_bnel = _ida_domain.MIPS_bnel

MIPS_jalr = _ida_domain.MIPS_jalr

MIPS_j = _ida_domain.MIPS_j

MIPS_jr = _ida_domain.MIPS_jr

MIPS_jal = _ida_domain.MIPS_jal

MIPS_jalx = _ida_domain.MIPS_jalx

MIPS_cache = _ida_domain.MIPS_cache

MIPS_lb = _ida_domain.MIPS_lb

MIPS_lbu = _ida_domain.MIPS_lbu

MIPS_ldl = _ida_domain.MIPS_ldl

MIPS_ldr = _ida_domain.MIPS_ldr

MIPS_lwl = _ida_domain.MIPS_lwl

MIPS_lwr = _ida_domain.MIPS_lwr

MIPS_ld = _ida_domain.MIPS_ld

MIPS_lld = _ida_domain.MIPS_lld

MIPS_ldc1 = _ida_domain.MIPS_ldc1

MIPS_ldc2 = _ida_domain.MIPS_ldc2

MIPS_ll = _ida_domain.MIPS_ll

MIPS_lw = _ida_domain.MIPS_lw

MIPS_lwu = _ida_domain.MIPS_lwu

MIPS_lh = _ida_domain.MIPS_lh

MIPS_lhu = _ida_domain.MIPS_lhu

MIPS_lui = _ida_domain.MIPS_lui

MIPS_lwc1 = _ida_domain.MIPS_lwc1

MIPS_lwc2 = _ida_domain.MIPS_lwc2

MIPS_sb = _ida_domain.MIPS_sb

MIPS_sdl = _ida_domain.MIPS_sdl

MIPS_sdr = _ida_domain.MIPS_sdr

MIPS_swl = _ida_domain.MIPS_swl

MIPS_swr = _ida_domain.MIPS_swr

MIPS_scd = _ida_domain.MIPS_scd

MIPS_sd = _ida_domain.MIPS_sd

MIPS_sdc1 = _ida_domain.MIPS_sdc1

MIPS_sdc2 = _ida_domain.MIPS_sdc2

MIPS_sc = _ida_domain.MIPS_sc

MIPS_sw = _ida_domain.MIPS_sw

MIPS_sh = _ida_domain.MIPS_sh

MIPS_swc1 = _ida_domain.MIPS_swc1

MIPS_swc2 = _ida_domain.MIPS_swc2

MIPS_sync = _ida_domain.MIPS_sync

MIPS_eret = _ida_domain.MIPS_eret

MIPS_tlbp = _ida_domain.MIPS_tlbp

MIPS_tlbr = _ida_domain.MIPS_tlbr

MIPS_tlbwi = _ida_domain.MIPS_tlbwi

MIPS_tlbwr = _ida_domain.MIPS_tlbwr

MIPS_fadd = _ida_domain.MIPS_fadd

MIPS_fsub = _ida_domain.MIPS_fsub

MIPS_fmul = _ida_domain.MIPS_fmul

MIPS_fdiv = _ida_domain.MIPS_fdiv

MIPS_fabs = _ida_domain.MIPS_fabs

MIPS_fcvt_s = _ida_domain.MIPS_fcvt_s

MIPS_fcvt_d = _ida_domain.MIPS_fcvt_d

MIPS_fcvt_w = _ida_domain.MIPS_fcvt_w

MIPS_fcvt_l = _ida_domain.MIPS_fcvt_l

MIPS_fround_l = _ida_domain.MIPS_fround_l

MIPS_ftrunc_l = _ida_domain.MIPS_ftrunc_l

MIPS_fceil_l = _ida_domain.MIPS_fceil_l

MIPS_ffloor_l = _ida_domain.MIPS_ffloor_l

MIPS_fround_w = _ida_domain.MIPS_fround_w

MIPS_ftrunc_w = _ida_domain.MIPS_ftrunc_w

MIPS_fceil_w = _ida_domain.MIPS_fceil_w

MIPS_ffloor_w = _ida_domain.MIPS_ffloor_w

MIPS_fmov = _ida_domain.MIPS_fmov

MIPS_fneg = _ida_domain.MIPS_fneg

MIPS_fsqrt = _ida_domain.MIPS_fsqrt

MIPS_fc_f = _ida_domain.MIPS_fc_f

MIPS_fc_un = _ida_domain.MIPS_fc_un

MIPS_fc_eq = _ida_domain.MIPS_fc_eq

MIPS_fc_ueq = _ida_domain.MIPS_fc_ueq

MIPS_fc_olt = _ida_domain.MIPS_fc_olt

MIPS_fc_ult = _ida_domain.MIPS_fc_ult

MIPS_fc_ole = _ida_domain.MIPS_fc_ole

MIPS_fc_ule = _ida_domain.MIPS_fc_ule

MIPS_fc_sf = _ida_domain.MIPS_fc_sf

MIPS_fc_ngle = _ida_domain.MIPS_fc_ngle

MIPS_fc_seq = _ida_domain.MIPS_fc_seq

MIPS_fc_ngl = _ida_domain.MIPS_fc_ngl

MIPS_fc_lt = _ida_domain.MIPS_fc_lt

MIPS_fc_nge = _ida_domain.MIPS_fc_nge

MIPS_fc_le = _ida_domain.MIPS_fc_le

MIPS_fc_ngt = _ida_domain.MIPS_fc_ngt

MIPS_nop = _ida_domain.MIPS_nop

MIPS_mov = _ida_domain.MIPS_mov

MIPS_neg = _ida_domain.MIPS_neg

MIPS_negu = _ida_domain.MIPS_negu

MIPS_bnez = _ida_domain.MIPS_bnez

MIPS_bnezl = _ida_domain.MIPS_bnezl

MIPS_beqz = _ida_domain.MIPS_beqz

MIPS_beqzl = _ida_domain.MIPS_beqzl

MIPS_b = _ida_domain.MIPS_b

MIPS_bal = _ida_domain.MIPS_bal

MIPS_li = _ida_domain.MIPS_li

MIPS_la = _ida_domain.MIPS_la

MIPS_pref = _ida_domain.MIPS_pref

MIPS_ldxc1 = _ida_domain.MIPS_ldxc1

MIPS_lwxc1 = _ida_domain.MIPS_lwxc1

MIPS_sdxc1 = _ida_domain.MIPS_sdxc1

MIPS_swxc1 = _ida_domain.MIPS_swxc1

MIPS_madd_s = _ida_domain.MIPS_madd_s

MIPS_madd_d = _ida_domain.MIPS_madd_d

MIPS_msub_s = _ida_domain.MIPS_msub_s

MIPS_msub_d = _ida_domain.MIPS_msub_d

MIPS_movf = _ida_domain.MIPS_movf

MIPS_movt = _ida_domain.MIPS_movt

MIPS_movn = _ida_domain.MIPS_movn

MIPS_movz = _ida_domain.MIPS_movz

MIPS_fmovf = _ida_domain.MIPS_fmovf

MIPS_fmovt = _ida_domain.MIPS_fmovt

MIPS_fmovn = _ida_domain.MIPS_fmovn

MIPS_fmovz = _ida_domain.MIPS_fmovz

MIPS_nmadd_s = _ida_domain.MIPS_nmadd_s

MIPS_nmadd_d = _ida_domain.MIPS_nmadd_d

MIPS_nmsub_s = _ida_domain.MIPS_nmsub_s

MIPS_nmsub_d = _ida_domain.MIPS_nmsub_d

MIPS_prefx = _ida_domain.MIPS_prefx

MIPS_frecip = _ida_domain.MIPS_frecip

MIPS_frsqrt = _ida_domain.MIPS_frsqrt

MIPS_lbv = _ida_domain.MIPS_lbv

MIPS_lsv = _ida_domain.MIPS_lsv

MIPS_llv = _ida_domain.MIPS_llv

MIPS_ldv = _ida_domain.MIPS_ldv

MIPS_lqv = _ida_domain.MIPS_lqv

MIPS_lrv = _ida_domain.MIPS_lrv

MIPS_lpv = _ida_domain.MIPS_lpv

MIPS_luv = _ida_domain.MIPS_luv

MIPS_lhv = _ida_domain.MIPS_lhv

MIPS_lfv = _ida_domain.MIPS_lfv

MIPS_lwv = _ida_domain.MIPS_lwv

MIPS_ltv = _ida_domain.MIPS_ltv

MIPS_sbv = _ida_domain.MIPS_sbv

MIPS_ssv = _ida_domain.MIPS_ssv

MIPS_slv = _ida_domain.MIPS_slv

MIPS_sdv = _ida_domain.MIPS_sdv

MIPS_sqv = _ida_domain.MIPS_sqv

MIPS_srv = _ida_domain.MIPS_srv

MIPS_spv = _ida_domain.MIPS_spv

MIPS_suv = _ida_domain.MIPS_suv

MIPS_shv = _ida_domain.MIPS_shv

MIPS_sfv = _ida_domain.MIPS_sfv

MIPS_swv = _ida_domain.MIPS_swv

MIPS_stv = _ida_domain.MIPS_stv

MIPS_vmulf = _ida_domain.MIPS_vmulf

MIPS_vmacf = _ida_domain.MIPS_vmacf

MIPS_vmulu = _ida_domain.MIPS_vmulu

MIPS_vmacu = _ida_domain.MIPS_vmacu

MIPS_vrndp = _ida_domain.MIPS_vrndp

MIPS_vrndn = _ida_domain.MIPS_vrndn

MIPS_vmulq = _ida_domain.MIPS_vmulq

MIPS_vmacq = _ida_domain.MIPS_vmacq

MIPS_vmudh = _ida_domain.MIPS_vmudh

MIPS_vmadh = _ida_domain.MIPS_vmadh

MIPS_vmudm = _ida_domain.MIPS_vmudm

MIPS_vmadm = _ida_domain.MIPS_vmadm

MIPS_vmudn = _ida_domain.MIPS_vmudn

MIPS_vmadn = _ida_domain.MIPS_vmadn

MIPS_vmudl = _ida_domain.MIPS_vmudl

MIPS_vmadl = _ida_domain.MIPS_vmadl

MIPS_vadd = _ida_domain.MIPS_vadd

MIPS_vsub = _ida_domain.MIPS_vsub

MIPS_vsut = _ida_domain.MIPS_vsut

MIPS_vabs = _ida_domain.MIPS_vabs

MIPS_vaddc = _ida_domain.MIPS_vaddc

MIPS_vsubc = _ida_domain.MIPS_vsubc

MIPS_vaddb = _ida_domain.MIPS_vaddb

MIPS_vsubb = _ida_domain.MIPS_vsubb

MIPS_vaccb = _ida_domain.MIPS_vaccb

MIPS_vsucb = _ida_domain.MIPS_vsucb

MIPS_vsad = _ida_domain.MIPS_vsad

MIPS_vsac = _ida_domain.MIPS_vsac

MIPS_vsum = _ida_domain.MIPS_vsum

MIPS_vsaw = _ida_domain.MIPS_vsaw

MIPS_vlt = _ida_domain.MIPS_vlt

MIPS_veq = _ida_domain.MIPS_veq

MIPS_vne = _ida_domain.MIPS_vne

MIPS_vge = _ida_domain.MIPS_vge

MIPS_vcl = _ida_domain.MIPS_vcl

MIPS_vch = _ida_domain.MIPS_vch

MIPS_vcr = _ida_domain.MIPS_vcr

MIPS_vmrg = _ida_domain.MIPS_vmrg

MIPS_vand = _ida_domain.MIPS_vand

MIPS_vnand = _ida_domain.MIPS_vnand

MIPS_vor = _ida_domain.MIPS_vor

MIPS_vnor = _ida_domain.MIPS_vnor

MIPS_vxor = _ida_domain.MIPS_vxor

MIPS_vnxor = _ida_domain.MIPS_vnxor

MIPS_vnoop = _ida_domain.MIPS_vnoop

MIPS_vmov = _ida_domain.MIPS_vmov

MIPS_vrcp = _ida_domain.MIPS_vrcp

MIPS_vrsq = _ida_domain.MIPS_vrsq

MIPS_vrcph = _ida_domain.MIPS_vrcph

MIPS_vrsqh = _ida_domain.MIPS_vrsqh

MIPS_vrcpl = _ida_domain.MIPS_vrcpl

MIPS_vrsql = _ida_domain.MIPS_vrsql

MIPS_vinst = _ida_domain.MIPS_vinst

MIPS_vextt = _ida_domain.MIPS_vextt

MIPS_vinsq = _ida_domain.MIPS_vinsq

MIPS_vextq = _ida_domain.MIPS_vextq

MIPS_vinsn = _ida_domain.MIPS_vinsn

MIPS_vextn = _ida_domain.MIPS_vextn

MIPS_cfc0 = _ida_domain.MIPS_cfc0

MIPS_ctc0 = _ida_domain.MIPS_ctc0

MIPS_mtsa = _ida_domain.MIPS_mtsa

MIPS_R5900_first = _ida_domain.MIPS_R5900_first

MIPS_mfsa = _ida_domain.MIPS_mfsa

MIPS_mtsab = _ida_domain.MIPS_mtsab

MIPS_mtsah = _ida_domain.MIPS_mtsah

MIPS_fadda = _ida_domain.MIPS_fadda

MIPS_fsuba = _ida_domain.MIPS_fsuba

MIPS_fmula = _ida_domain.MIPS_fmula

MIPS_fmadda = _ida_domain.MIPS_fmadda

MIPS_fmsuba = _ida_domain.MIPS_fmsuba

MIPS_fmadd = _ida_domain.MIPS_fmadd

MIPS_fmsub = _ida_domain.MIPS_fmsub

MIPS_fmax = _ida_domain.MIPS_fmax

MIPS_fmin = _ida_domain.MIPS_fmin

MIPS_plzcw = _ida_domain.MIPS_plzcw

MIPS_mthi1 = _ida_domain.MIPS_mthi1

MIPS_mtlo1 = _ida_domain.MIPS_mtlo1

MIPS_pmthl_lw = _ida_domain.MIPS_pmthl_lw

MIPS_pmthi = _ida_domain.MIPS_pmthi

MIPS_pmtlo = _ida_domain.MIPS_pmtlo

MIPS_div1 = _ida_domain.MIPS_div1

MIPS_divu1 = _ida_domain.MIPS_divu1

MIPS_pdivw = _ida_domain.MIPS_pdivw

MIPS_pdivuw = _ida_domain.MIPS_pdivuw

MIPS_pdivbw = _ida_domain.MIPS_pdivbw

MIPS_paddw = _ida_domain.MIPS_paddw

MIPS_pmaddw = _ida_domain.MIPS_pmaddw

MIPS_mult1 = _ida_domain.MIPS_mult1

MIPS_multu1 = _ida_domain.MIPS_multu1

MIPS_madd1 = _ida_domain.MIPS_madd1

MIPS_maddu1 = _ida_domain.MIPS_maddu1

MIPS_pmadduw = _ida_domain.MIPS_pmadduw

MIPS_psubw = _ida_domain.MIPS_psubw

MIPS_pcgtw = _ida_domain.MIPS_pcgtw

MIPS_psllvw = _ida_domain.MIPS_psllvw

MIPS_pceqw = _ida_domain.MIPS_pceqw

MIPS_pmaxw = _ida_domain.MIPS_pmaxw

MIPS_psrlvw = _ida_domain.MIPS_psrlvw

MIPS_pminw = _ida_domain.MIPS_pminw

MIPS_psravw = _ida_domain.MIPS_psravw

MIPS_paddh = _ida_domain.MIPS_paddh

MIPS_pmsubw = _ida_domain.MIPS_pmsubw

MIPS_padsbh = _ida_domain.MIPS_padsbh

MIPS_psubh = _ida_domain.MIPS_psubh

MIPS_pcgth = _ida_domain.MIPS_pcgth

MIPS_pceqh = _ida_domain.MIPS_pceqh

MIPS_pmaxh = _ida_domain.MIPS_pmaxh

MIPS_pminh = _ida_domain.MIPS_pminh

MIPS_paddb = _ida_domain.MIPS_paddb

MIPS_psubb = _ida_domain.MIPS_psubb

MIPS_pcgtb = _ida_domain.MIPS_pcgtb

MIPS_pinth = _ida_domain.MIPS_pinth

MIPS_pceqb = _ida_domain.MIPS_pceqb

MIPS_pintoh = _ida_domain.MIPS_pintoh

MIPS_pmultw = _ida_domain.MIPS_pmultw

MIPS_pmultuw = _ida_domain.MIPS_pmultuw

MIPS_pcpyld = _ida_domain.MIPS_pcpyld

MIPS_pcpyud = _ida_domain.MIPS_pcpyud

MIPS_paddsw = _ida_domain.MIPS_paddsw

MIPS_pmaddh = _ida_domain.MIPS_pmaddh

MIPS_padduw = _ida_domain.MIPS_padduw

MIPS_psubsw = _ida_domain.MIPS_psubsw

MIPS_phmadh = _ida_domain.MIPS_phmadh

MIPS_psubuw = _ida_domain.MIPS_psubuw

MIPS_pextlw = _ida_domain.MIPS_pextlw

MIPS_pand = _ida_domain.MIPS_pand

MIPS_pextuw = _ida_domain.MIPS_pextuw

MIPS_por = _ida_domain.MIPS_por

MIPS_ppacw = _ida_domain.MIPS_ppacw

MIPS_pxor = _ida_domain.MIPS_pxor

MIPS_pnor = _ida_domain.MIPS_pnor

MIPS_paddsh = _ida_domain.MIPS_paddsh

MIPS_pmsubh = _ida_domain.MIPS_pmsubh

MIPS_padduh = _ida_domain.MIPS_padduh

MIPS_psubsh = _ida_domain.MIPS_psubsh

MIPS_phmsbh = _ida_domain.MIPS_phmsbh

MIPS_psubuh = _ida_domain.MIPS_psubuh

MIPS_pextlh = _ida_domain.MIPS_pextlh

MIPS_pextuh = _ida_domain.MIPS_pextuh

MIPS_ppach = _ida_domain.MIPS_ppach

MIPS_paddsb = _ida_domain.MIPS_paddsb

MIPS_paddub = _ida_domain.MIPS_paddub

MIPS_psubsb = _ida_domain.MIPS_psubsb

MIPS_psubub = _ida_domain.MIPS_psubub

MIPS_pextlb = _ida_domain.MIPS_pextlb

MIPS_pextub = _ida_domain.MIPS_pextub

MIPS_ppacb = _ida_domain.MIPS_ppacb

MIPS_qfsrv = _ida_domain.MIPS_qfsrv

MIPS_pmulth = _ida_domain.MIPS_pmulth

MIPS_pabsw = _ida_domain.MIPS_pabsw

MIPS_pabsh = _ida_domain.MIPS_pabsh

MIPS_pexoh = _ida_domain.MIPS_pexoh

MIPS_pexch = _ida_domain.MIPS_pexch

MIPS_prevh = _ida_domain.MIPS_prevh

MIPS_pcpyh = _ida_domain.MIPS_pcpyh

MIPS_pext5 = _ida_domain.MIPS_pext5

MIPS_pexow = _ida_domain.MIPS_pexow

MIPS_pexcw = _ida_domain.MIPS_pexcw

MIPS_ppac5 = _ida_domain.MIPS_ppac5

MIPS_prot3w = _ida_domain.MIPS_prot3w

MIPS_psllh = _ida_domain.MIPS_psllh

MIPS_psrlh = _ida_domain.MIPS_psrlh

MIPS_psrah = _ida_domain.MIPS_psrah

MIPS_psllw = _ida_domain.MIPS_psllw

MIPS_psrlw = _ida_domain.MIPS_psrlw

MIPS_psraw = _ida_domain.MIPS_psraw

MIPS_mfhi1 = _ida_domain.MIPS_mfhi1

MIPS_mflo1 = _ida_domain.MIPS_mflo1

MIPS_pmfhi = _ida_domain.MIPS_pmfhi

MIPS_pmflo = _ida_domain.MIPS_pmflo

MIPS_pmfhl = _ida_domain.MIPS_pmfhl

MIPS_lq = _ida_domain.MIPS_lq

MIPS_sq = _ida_domain.MIPS_sq

MIPS_lqc2 = _ida_domain.MIPS_lqc2

MIPS_sqc2 = _ida_domain.MIPS_sqc2

MIPS_madd_r5900 = _ida_domain.MIPS_madd_r5900

MIPS_maddu_r5900 = _ida_domain.MIPS_maddu_r5900

MIPS_R5900_last = _ida_domain.MIPS_R5900_last

MIPS_mult3 = _ida_domain.MIPS_mult3

MIPS_multu3 = _ida_domain.MIPS_multu3

MIPS_bteqz = _ida_domain.MIPS_bteqz

MIPS_btnez = _ida_domain.MIPS_btnez

MIPS_cmp = _ida_domain.MIPS_cmp

MIPS_cmpi = _ida_domain.MIPS_cmpi

MIPS_extend = _ida_domain.MIPS_extend

MIPS_move = _ida_domain.MIPS_move

MIPS_not = _ida_domain.MIPS_not

MIPS_dla = _ida_domain.MIPS_dla

MIPS_clo = _ida_domain.MIPS_clo

MIPS_clz = _ida_domain.MIPS_clz

MIPS_madd = _ida_domain.MIPS_madd

MIPS_maddu = _ida_domain.MIPS_maddu

MIPS_msub = _ida_domain.MIPS_msub

MIPS_msubu = _ida_domain.MIPS_msubu

MIPS_mul = _ida_domain.MIPS_mul

MIPS_sdbbp = _ida_domain.MIPS_sdbbp

MIPS_wait = _ida_domain.MIPS_wait

MIPS_alnv_ps = _ida_domain.MIPS_alnv_ps

MIPS_deret = _ida_domain.MIPS_deret

MIPS_di = _ida_domain.MIPS_di

MIPS_ehb = _ida_domain.MIPS_ehb

MIPS_ei = _ida_domain.MIPS_ei

MIPS_ext = _ida_domain.MIPS_ext

MIPS_fcvt_ps = _ida_domain.MIPS_fcvt_ps

MIPS_fcvt_s_pl = _ida_domain.MIPS_fcvt_s_pl

MIPS_fcvt_s_pu = _ida_domain.MIPS_fcvt_s_pu

MIPS_ins = _ida_domain.MIPS_ins

MIPS_jalr_hb = _ida_domain.MIPS_jalr_hb

MIPS_jr_hb = _ida_domain.MIPS_jr_hb

MIPS_luxc1 = _ida_domain.MIPS_luxc1

MIPS_madd_ps = _ida_domain.MIPS_madd_ps

MIPS_mfhc1 = _ida_domain.MIPS_mfhc1

MIPS_mfhc2 = _ida_domain.MIPS_mfhc2

MIPS_msub_ps = _ida_domain.MIPS_msub_ps

MIPS_mthc1 = _ida_domain.MIPS_mthc1

MIPS_mthc2 = _ida_domain.MIPS_mthc2

MIPS_nmadd_ps = _ida_domain.MIPS_nmadd_ps

MIPS_nmsub_ps = _ida_domain.MIPS_nmsub_ps

MIPS_pll = _ida_domain.MIPS_pll

MIPS_plu = _ida_domain.MIPS_plu

MIPS_pul = _ida_domain.MIPS_pul

MIPS_puu = _ida_domain.MIPS_puu

MIPS_rdhwr = _ida_domain.MIPS_rdhwr

MIPS_rdpgpr = _ida_domain.MIPS_rdpgpr

MIPS_rotr = _ida_domain.MIPS_rotr

MIPS_rotrv = _ida_domain.MIPS_rotrv

MIPS_seb = _ida_domain.MIPS_seb

MIPS_seh = _ida_domain.MIPS_seh

MIPS_suxc1 = _ida_domain.MIPS_suxc1

MIPS_synci = _ida_domain.MIPS_synci

MIPS_wrpgpr = _ida_domain.MIPS_wrpgpr

MIPS_wsbh = _ida_domain.MIPS_wsbh

MIPS_dmfc1 = _ida_domain.MIPS_dmfc1

MIPS_dmtc1 = _ida_domain.MIPS_dmtc1

MIPS_save = _ida_domain.MIPS_save

MIPS_restore = _ida_domain.MIPS_restore

MIPS_jalrc = _ida_domain.MIPS_jalrc

MIPS_jrc = _ida_domain.MIPS_jrc

MIPS_sew = _ida_domain.MIPS_sew

MIPS_zeb = _ida_domain.MIPS_zeb

MIPS_zeh = _ida_domain.MIPS_zeh

MIPS_zew = _ida_domain.MIPS_zew

MIPS_ssnop = _ida_domain.MIPS_ssnop

MIPS_li_s = _ida_domain.MIPS_li_s

MIPS_li_d = _ida_domain.MIPS_li_d

MIPS_dneg = _ida_domain.MIPS_dneg

MIPS_dnegu = _ida_domain.MIPS_dnegu

MIPS_pause = _ida_domain.MIPS_pause

MIPS_dclo = _ida_domain.MIPS_dclo

MIPS_dclz = _ida_domain.MIPS_dclz

MIPS_dext = _ida_domain.MIPS_dext

MIPS_dextm = _ida_domain.MIPS_dextm

MIPS_dextu = _ida_domain.MIPS_dextu

MIPS_dins = _ida_domain.MIPS_dins

MIPS_dinsm = _ida_domain.MIPS_dinsm

MIPS_dinsu = _ida_domain.MIPS_dinsu

MIPS_dmfc2 = _ida_domain.MIPS_dmfc2

MIPS_dmtc2 = _ida_domain.MIPS_dmtc2

MIPS_drotr = _ida_domain.MIPS_drotr

MIPS_drotr32 = _ida_domain.MIPS_drotr32

MIPS_drotrv = _ida_domain.MIPS_drotrv

MIPS_dsbh = _ida_domain.MIPS_dsbh

MIPS_dshd = _ida_domain.MIPS_dshd

MIPS_baddu = _ida_domain.MIPS_baddu

MIPS_bbit0 = _ida_domain.MIPS_bbit0

MIPS_bbit032 = _ida_domain.MIPS_bbit032

MIPS_bbit1 = _ida_domain.MIPS_bbit1

MIPS_bbit132 = _ida_domain.MIPS_bbit132

MIPS_cins = _ida_domain.MIPS_cins

MIPS_cins32 = _ida_domain.MIPS_cins32

MIPS_dmul = _ida_domain.MIPS_dmul

MIPS_dpop = _ida_domain.MIPS_dpop

MIPS_exts = _ida_domain.MIPS_exts

MIPS_exts32 = _ida_domain.MIPS_exts32

MIPS_mtm0 = _ida_domain.MIPS_mtm0

MIPS_mtm1 = _ida_domain.MIPS_mtm1

MIPS_mtm2 = _ida_domain.MIPS_mtm2

MIPS_mtp0 = _ida_domain.MIPS_mtp0

MIPS_mtp1 = _ida_domain.MIPS_mtp1

MIPS_mtp2 = _ida_domain.MIPS_mtp2

MIPS_pop = _ida_domain.MIPS_pop

MIPS_saa = _ida_domain.MIPS_saa

MIPS_saad = _ida_domain.MIPS_saad

MIPS_seq = _ida_domain.MIPS_seq

MIPS_seqi = _ida_domain.MIPS_seqi

MIPS_sne = _ida_domain.MIPS_sne

MIPS_snei = _ida_domain.MIPS_snei

MIPS_synciobdma = _ida_domain.MIPS_synciobdma

MIPS_syncs = _ida_domain.MIPS_syncs

MIPS_syncw = _ida_domain.MIPS_syncw

MIPS_syncws = _ida_domain.MIPS_syncws

MIPS_uld = _ida_domain.MIPS_uld

MIPS_ulw = _ida_domain.MIPS_ulw

MIPS_usd = _ida_domain.MIPS_usd

MIPS_usw = _ida_domain.MIPS_usw

MIPS_v3mulu = _ida_domain.MIPS_v3mulu

MIPS_vmm0 = _ida_domain.MIPS_vmm0

MIPS_vmulu_cn = _ida_domain.MIPS_vmulu_cn

MIPS_dbreak = _ida_domain.MIPS_dbreak

MIPS_dret = _ida_domain.MIPS_dret

MIPS_mfdr = _ida_domain.MIPS_mfdr

MIPS_mtdr = _ida_domain.MIPS_mtdr

PSP_bitrev = _ida_domain.PSP_bitrev

PSP_max = _ida_domain.PSP_max

PSP_min = _ida_domain.PSP_min

PSP_mfic = _ida_domain.PSP_mfic

PSP_mtic = _ida_domain.PSP_mtic

PSP_wsbw = _ida_domain.PSP_wsbw

PSP_sleep = _ida_domain.PSP_sleep

PSP_lv = _ida_domain.PSP_lv

PSP_lvl = _ida_domain.PSP_lvl

PSP_lvr = _ida_domain.PSP_lvr

PSP_sv = _ida_domain.PSP_sv

PSP_svl = _ida_domain.PSP_svl

PSP_svr = _ida_domain.PSP_svr

PSP_mfv = _ida_domain.PSP_mfv

PSP_mtv = _ida_domain.PSP_mtv

PSP_mfvc = _ida_domain.PSP_mfvc

PSP_mtvc = _ida_domain.PSP_mtvc

PSP_bvf = _ida_domain.PSP_bvf

PSP_bvt = _ida_domain.PSP_bvt

PSP_bvfl = _ida_domain.PSP_bvfl

PSP_bvtl = _ida_domain.PSP_bvtl

PSP_vnop = _ida_domain.PSP_vnop

PSP_vflush = _ida_domain.PSP_vflush

PSP_vsync = _ida_domain.PSP_vsync

PSP_vabs = _ida_domain.PSP_vabs

PSP_vadd = _ida_domain.PSP_vadd

PSP_vasin = _ida_domain.PSP_vasin

PSP_vavg = _ida_domain.PSP_vavg

PSP_vbfy1 = _ida_domain.PSP_vbfy1

PSP_vbfy2 = _ida_domain.PSP_vbfy2

PSP_vc2i = _ida_domain.PSP_vc2i

PSP_vcmovf = _ida_domain.PSP_vcmovf

PSP_vcmovt = _ida_domain.PSP_vcmovt

PSP_vcmp = _ida_domain.PSP_vcmp

PSP_vcos = _ida_domain.PSP_vcos

PSP_vcrs = _ida_domain.PSP_vcrs

PSP_vcrsp = _ida_domain.PSP_vcrsp

PSP_vcst = _ida_domain.PSP_vcst

PSP_vdet = _ida_domain.PSP_vdet

PSP_vdiv = _ida_domain.PSP_vdiv

PSP_vdot = _ida_domain.PSP_vdot

PSP_vexp2 = _ida_domain.PSP_vexp2

PSP_vf2h = _ida_domain.PSP_vf2h

PSP_vf2id = _ida_domain.PSP_vf2id

PSP_vf2in = _ida_domain.PSP_vf2in

PSP_vf2iu = _ida_domain.PSP_vf2iu

PSP_vf2iz = _ida_domain.PSP_vf2iz

PSP_vfad = _ida_domain.PSP_vfad

PSP_vfim = _ida_domain.PSP_vfim

PSP_vh2f = _ida_domain.PSP_vh2f

PSP_vhdp = _ida_domain.PSP_vhdp

PSP_vhtfm2 = _ida_domain.PSP_vhtfm2

PSP_vhtfm3 = _ida_domain.PSP_vhtfm3

PSP_vhtfm4 = _ida_domain.PSP_vhtfm4

PSP_vi2c = _ida_domain.PSP_vi2c

PSP_vi2f = _ida_domain.PSP_vi2f

PSP_vi2s = _ida_domain.PSP_vi2s

PSP_vi2uc = _ida_domain.PSP_vi2uc

PSP_vi2us = _ida_domain.PSP_vi2us

PSP_vidt = _ida_domain.PSP_vidt

PSP_viim = _ida_domain.PSP_viim

PSP_vlgb = _ida_domain.PSP_vlgb

PSP_vlog2 = _ida_domain.PSP_vlog2

PSP_vmax = _ida_domain.PSP_vmax

PSP_vmfvc = _ida_domain.PSP_vmfvc

PSP_vmidt = _ida_domain.PSP_vmidt

PSP_vmin = _ida_domain.PSP_vmin

PSP_vmmov = _ida_domain.PSP_vmmov

PSP_vmmul = _ida_domain.PSP_vmmul

PSP_vmone = _ida_domain.PSP_vmone

PSP_vmov = _ida_domain.PSP_vmov

PSP_vmscl = _ida_domain.PSP_vmscl

PSP_vmtvc = _ida_domain.PSP_vmtvc

PSP_vmul = _ida_domain.PSP_vmul

PSP_vmzero = _ida_domain.PSP_vmzero

PSP_vneg = _ida_domain.PSP_vneg

PSP_vnrcp = _ida_domain.PSP_vnrcp

PSP_vnsin = _ida_domain.PSP_vnsin

PSP_vocp = _ida_domain.PSP_vocp

PSP_vone = _ida_domain.PSP_vone

PSP_vpfxd = _ida_domain.PSP_vpfxd

PSP_vpfxs = _ida_domain.PSP_vpfxs

PSP_vpfxt = _ida_domain.PSP_vpfxt

PSP_vqmul = _ida_domain.PSP_vqmul

PSP_vrcp = _ida_domain.PSP_vrcp

PSP_vrexp2 = _ida_domain.PSP_vrexp2

PSP_vrndf1 = _ida_domain.PSP_vrndf1

PSP_vrndf2 = _ida_domain.PSP_vrndf2

PSP_vrndi = _ida_domain.PSP_vrndi

PSP_vrnds = _ida_domain.PSP_vrnds

PSP_vrot = _ida_domain.PSP_vrot

PSP_vrsq = _ida_domain.PSP_vrsq

PSP_vs2i = _ida_domain.PSP_vs2i

PSP_vsat0 = _ida_domain.PSP_vsat0

PSP_vsat1 = _ida_domain.PSP_vsat1

PSP_vsbn = _ida_domain.PSP_vsbn

PSP_vsbz = _ida_domain.PSP_vsbz

PSP_vscl = _ida_domain.PSP_vscl

PSP_vscmp = _ida_domain.PSP_vscmp

PSP_vsge = _ida_domain.PSP_vsge

PSP_vsgn = _ida_domain.PSP_vsgn

PSP_vsin = _ida_domain.PSP_vsin

PSP_vslt = _ida_domain.PSP_vslt

PSP_vsocp = _ida_domain.PSP_vsocp

PSP_vsqrt = _ida_domain.PSP_vsqrt

PSP_vsrt1 = _ida_domain.PSP_vsrt1

PSP_vsrt2 = _ida_domain.PSP_vsrt2

PSP_vsrt3 = _ida_domain.PSP_vsrt3

PSP_vsrt4 = _ida_domain.PSP_vsrt4

PSP_vsub = _ida_domain.PSP_vsub

PSP_vt4444 = _ida_domain.PSP_vt4444

PSP_vt5551 = _ida_domain.PSP_vt5551

PSP_vt5650 = _ida_domain.PSP_vt5650

PSP_vtfm2 = _ida_domain.PSP_vtfm2

PSP_vtfm3 = _ida_domain.PSP_vtfm3

PSP_vtfm4 = _ida_domain.PSP_vtfm4

PSP_vuc2i = _ida_domain.PSP_vuc2i

PSP_vus2i = _ida_domain.PSP_vus2i

PSP_vwbn = _ida_domain.PSP_vwbn

PSP_vzero = _ida_domain.PSP_vzero

PSP_mfvme = _ida_domain.PSP_mfvme

PSP_mtvme = _ida_domain.PSP_mtvme

MIPS_ac0iu = _ida_domain.MIPS_ac0iu

MIPS_bs1f = _ida_domain.MIPS_bs1f

MIPS_bfins = _ida_domain.MIPS_bfins

MIPS_addmiu = _ida_domain.MIPS_addmiu

MIPS_sadd = _ida_domain.MIPS_sadd

MIPS_ssub = _ida_domain.MIPS_ssub

MIPS_btst = _ida_domain.MIPS_btst

MIPS_bclr = _ida_domain.MIPS_bclr

MIPS_bset = _ida_domain.MIPS_bset

MIPS_bins = _ida_domain.MIPS_bins

MIPS_bext = _ida_domain.MIPS_bext

MIPS_dive = _ida_domain.MIPS_dive

MIPS_diveu = _ida_domain.MIPS_diveu

MIPS_min = _ida_domain.MIPS_min

MIPS_max = _ida_domain.MIPS_max

MIPS_madd3 = _ida_domain.MIPS_madd3

MIPS_maddu3 = _ida_domain.MIPS_maddu3

MIPS_msub3 = _ida_domain.MIPS_msub3

MIPS_msubu3 = _ida_domain.MIPS_msubu3

MIPS_dvpe = _ida_domain.MIPS_dvpe

MIPS_evpe = _ida_domain.MIPS_evpe

MIPS_dmt = _ida_domain.MIPS_dmt

MIPS_emt = _ida_domain.MIPS_emt

MIPS_fork = _ida_domain.MIPS_fork

MIPS_yield = _ida_domain.MIPS_yield

MIPS_mftr = _ida_domain.MIPS_mftr

MIPS_mftc0 = _ida_domain.MIPS_mftc0

MIPS_mfthc0 = _ida_domain.MIPS_mfthc0

MIPS_mftlo = _ida_domain.MIPS_mftlo

MIPS_mfthi = _ida_domain.MIPS_mfthi

MIPS_mftacx = _ida_domain.MIPS_mftacx

MIPS_mftdsp = _ida_domain.MIPS_mftdsp

MIPS_mfthc1 = _ida_domain.MIPS_mfthc1

MIPS_mftc1 = _ida_domain.MIPS_mftc1

MIPS_cftc1 = _ida_domain.MIPS_cftc1

MIPS_mfthc2 = _ida_domain.MIPS_mfthc2

MIPS_mftc2 = _ida_domain.MIPS_mftc2

MIPS_cftc2 = _ida_domain.MIPS_cftc2

MIPS_mftgpr = _ida_domain.MIPS_mftgpr

MIPS_mttr = _ida_domain.MIPS_mttr

MIPS_mttc0 = _ida_domain.MIPS_mttc0

MIPS_mtthc0 = _ida_domain.MIPS_mtthc0

MIPS_mttlo = _ida_domain.MIPS_mttlo

MIPS_mtthi = _ida_domain.MIPS_mtthi

MIPS_mttacx = _ida_domain.MIPS_mttacx

MIPS_mttdsp = _ida_domain.MIPS_mttdsp

MIPS_mtthc1 = _ida_domain.MIPS_mtthc1

MIPS_mttc1 = _ida_domain.MIPS_mttc1

MIPS_cttc1 = _ida_domain.MIPS_cttc1

MIPS_mtthc2 = _ida_domain.MIPS_mtthc2

MIPS_mttc2 = _ida_domain.MIPS_mttc2

MIPS_cttc2 = _ida_domain.MIPS_cttc2

MIPS_mttgpr = _ida_domain.MIPS_mttgpr

MIPS_faddr = _ida_domain.MIPS_faddr

MIPS_bc1any2f = _ida_domain.MIPS_bc1any2f

MIPS_bc1any2t = _ida_domain.MIPS_bc1any2t

MIPS_bc1any4f = _ida_domain.MIPS_bc1any4f

MIPS_bc1any4t = _ida_domain.MIPS_bc1any4t

MIPS_fcabs_f = _ida_domain.MIPS_fcabs_f

MIPS_fcabs_un = _ida_domain.MIPS_fcabs_un

MIPS_fcabs_eq = _ida_domain.MIPS_fcabs_eq

MIPS_fcabs_ueq = _ida_domain.MIPS_fcabs_ueq

MIPS_fcabs_olt = _ida_domain.MIPS_fcabs_olt

MIPS_fcabs_ult = _ida_domain.MIPS_fcabs_ult

MIPS_fcabs_ole = _ida_domain.MIPS_fcabs_ole

MIPS_fcabs_ule = _ida_domain.MIPS_fcabs_ule

MIPS_fcabs_sf = _ida_domain.MIPS_fcabs_sf

MIPS_fcabs_ngle = _ida_domain.MIPS_fcabs_ngle

MIPS_fcabs_seq = _ida_domain.MIPS_fcabs_seq

MIPS_fcabs_ngl = _ida_domain.MIPS_fcabs_ngl

MIPS_fcabs_lt = _ida_domain.MIPS_fcabs_lt

MIPS_fcabs_nge = _ida_domain.MIPS_fcabs_nge

MIPS_fcabs_le = _ida_domain.MIPS_fcabs_le

MIPS_fcabs_ngt = _ida_domain.MIPS_fcabs_ngt

MIPS_fcvt_pw_ps = _ida_domain.MIPS_fcvt_pw_ps

MIPS_fcvt_ps_pw = _ida_domain.MIPS_fcvt_ps_pw

MIPS_fmulr = _ida_domain.MIPS_fmulr

MIPS_frecip1 = _ida_domain.MIPS_frecip1

MIPS_frecip2 = _ida_domain.MIPS_frecip2

MIPS_frsqrt1 = _ida_domain.MIPS_frsqrt1

MIPS_frsqrt2 = _ida_domain.MIPS_frsqrt2

MIPS_lwxs = _ida_domain.MIPS_lwxs

MIPS_maddp = _ida_domain.MIPS_maddp

MIPS_mflhxu = _ida_domain.MIPS_mflhxu

MIPS_mtlhx = _ida_domain.MIPS_mtlhx

MIPS_multp = _ida_domain.MIPS_multp

MIPS_pperm = _ida_domain.MIPS_pperm

MIPS_jals = _ida_domain.MIPS_jals

MIPS_lwp = _ida_domain.MIPS_lwp

MIPS_ldp = _ida_domain.MIPS_ldp

MIPS_lwm = _ida_domain.MIPS_lwm

MIPS_ldm = _ida_domain.MIPS_ldm

MIPS_swp = _ida_domain.MIPS_swp

MIPS_sdp = _ida_domain.MIPS_sdp

MIPS_swm = _ida_domain.MIPS_swm

MIPS_sdm = _ida_domain.MIPS_sdm

MIPS_bnezc = _ida_domain.MIPS_bnezc

MIPS_bltzals = _ida_domain.MIPS_bltzals

MIPS_beqzc = _ida_domain.MIPS_beqzc

MIPS_bgezals = _ida_domain.MIPS_bgezals

MIPS_jraddiusp = _ida_domain.MIPS_jraddiusp

MIPS_jalrs = _ida_domain.MIPS_jalrs

MIPS_jalrs_hb = _ida_domain.MIPS_jalrs_hb

MIPS_movep = _ida_domain.MIPS_movep

MIPS_dli = _ida_domain.MIPS_dli

MIPS_insv = _ida_domain.MIPS_insv

MIPS_dinsv = _ida_domain.MIPS_dinsv

MIPS_bposge32 = _ida_domain.MIPS_bposge32

MIPS_bposge64 = _ida_domain.MIPS_bposge64

MIPS_addu_qb = _ida_domain.MIPS_addu_qb

MIPS_addu_ph = _ida_domain.MIPS_addu_ph

MIPS_addsc = _ida_domain.MIPS_addsc

MIPS_subu_qb = _ida_domain.MIPS_subu_qb

MIPS_subu_ph = _ida_domain.MIPS_subu_ph

MIPS_addwc = _ida_domain.MIPS_addwc

MIPS_addq_ph = _ida_domain.MIPS_addq_ph

MIPS_modsub = _ida_domain.MIPS_modsub

MIPS_subq_ph = _ida_domain.MIPS_subq_ph

MIPS_addu_s_qb = _ida_domain.MIPS_addu_s_qb

MIPS_addu_s_ph = _ida_domain.MIPS_addu_s_ph

MIPS_raddu_w_qb = _ida_domain.MIPS_raddu_w_qb

MIPS_muleq_s_w_phl = _ida_domain.MIPS_muleq_s_w_phl

MIPS_subu_s_qb = _ida_domain.MIPS_subu_s_qb

MIPS_subu_s_ph = _ida_domain.MIPS_subu_s_ph

MIPS_muleq_s_w_phr = _ida_domain.MIPS_muleq_s_w_phr

MIPS_muleu_s_ph_qbl = _ida_domain.MIPS_muleu_s_ph_qbl

MIPS_addq_s_ph = _ida_domain.MIPS_addq_s_ph

MIPS_addq_s_w = _ida_domain.MIPS_addq_s_w

MIPS_mulq_s_ph = _ida_domain.MIPS_mulq_s_ph

MIPS_muleu_s_ph_qbr = _ida_domain.MIPS_muleu_s_ph_qbr

MIPS_subq_s_ph = _ida_domain.MIPS_subq_s_ph

MIPS_subq_s_w = _ida_domain.MIPS_subq_s_w

MIPS_mulq_rs_ph = _ida_domain.MIPS_mulq_rs_ph

MIPS_addu_ob = _ida_domain.MIPS_addu_ob

MIPS_subu_ob = _ida_domain.MIPS_subu_ob

MIPS_addq_qh = _ida_domain.MIPS_addq_qh

MIPS_addq_pw = _ida_domain.MIPS_addq_pw

MIPS_subq_qh = _ida_domain.MIPS_subq_qh

MIPS_subq_pw = _ida_domain.MIPS_subq_pw

MIPS_addu_s_ob = _ida_domain.MIPS_addu_s_ob

MIPS_raddu_l_ob = _ida_domain.MIPS_raddu_l_ob

MIPS_muleq_s_pw_qhl = _ida_domain.MIPS_muleq_s_pw_qhl

MIPS_subu_s_ob = _ida_domain.MIPS_subu_s_ob

MIPS_muleq_s_pw_qhr = _ida_domain.MIPS_muleq_s_pw_qhr

MIPS_muleu_s_qh_obl = _ida_domain.MIPS_muleu_s_qh_obl

MIPS_addq_s_qh = _ida_domain.MIPS_addq_s_qh

MIPS_addq_s_pw = _ida_domain.MIPS_addq_s_pw

MIPS_muleu_s_qh_obr = _ida_domain.MIPS_muleu_s_qh_obr

MIPS_subq_s_qh = _ida_domain.MIPS_subq_s_qh

MIPS_subq_s_pw = _ida_domain.MIPS_subq_s_pw

MIPS_mulq_rs_qh = _ida_domain.MIPS_mulq_rs_qh

MIPS_cmpu_eq_qb = _ida_domain.MIPS_cmpu_eq_qb

MIPS_cmp_eq_ph = _ida_domain.MIPS_cmp_eq_ph

MIPS_cmpgdu_eq_qb = _ida_domain.MIPS_cmpgdu_eq_qb

MIPS_cmpu_lt_qb = _ida_domain.MIPS_cmpu_lt_qb

MIPS_cmp_lt_ph = _ida_domain.MIPS_cmp_lt_ph

MIPS_cmpgdu_lt_qb = _ida_domain.MIPS_cmpgdu_lt_qb

MIPS_cmpu_le_qb = _ida_domain.MIPS_cmpu_le_qb

MIPS_cmp_le_ph = _ida_domain.MIPS_cmp_le_ph

MIPS_cmpgdu_le_qb = _ida_domain.MIPS_cmpgdu_le_qb

MIPS_pick_qb = _ida_domain.MIPS_pick_qb

MIPS_pick_ph = _ida_domain.MIPS_pick_ph

MIPS_cmpgu_eq_qb = _ida_domain.MIPS_cmpgu_eq_qb

MIPS_precrq_qb_ph = _ida_domain.MIPS_precrq_qb_ph

MIPS_precrq_ph_w = _ida_domain.MIPS_precrq_ph_w

MIPS_cmpgu_lt_qb = _ida_domain.MIPS_cmpgu_lt_qb

MIPS_precr_qb_ph = _ida_domain.MIPS_precr_qb_ph

MIPS_precrq_rs_ph_w = _ida_domain.MIPS_precrq_rs_ph_w

MIPS_cmpgu_le_qb = _ida_domain.MIPS_cmpgu_le_qb

MIPS_packrl_ph = _ida_domain.MIPS_packrl_ph

MIPS_precr_sra_ph_w = _ida_domain.MIPS_precr_sra_ph_w

MIPS_precrqu_s_qb_ph = _ida_domain.MIPS_precrqu_s_qb_ph

MIPS_precr_sra_r_ph_w = _ida_domain.MIPS_precr_sra_r_ph_w

MIPS_cmpu_eq_ob = _ida_domain.MIPS_cmpu_eq_ob

MIPS_cmp_eq_qh = _ida_domain.MIPS_cmp_eq_qh

MIPS_cmp_eq_pw = _ida_domain.MIPS_cmp_eq_pw

MIPS_cmpu_lt_ob = _ida_domain.MIPS_cmpu_lt_ob

MIPS_cmp_lt_qh = _ida_domain.MIPS_cmp_lt_qh

MIPS_cmp_lt_pw = _ida_domain.MIPS_cmp_lt_pw

MIPS_cmpu_le_ob = _ida_domain.MIPS_cmpu_le_ob

MIPS_cmp_le_qh = _ida_domain.MIPS_cmp_le_qh

MIPS_cmp_le_pw = _ida_domain.MIPS_cmp_le_pw

MIPS_pick_ob = _ida_domain.MIPS_pick_ob

MIPS_pick_qh = _ida_domain.MIPS_pick_qh

MIPS_pick_pw = _ida_domain.MIPS_pick_pw

MIPS_cmpgu_eq_ob = _ida_domain.MIPS_cmpgu_eq_ob

MIPS_precrq_ob_qh = _ida_domain.MIPS_precrq_ob_qh

MIPS_precrq_qh_pw = _ida_domain.MIPS_precrq_qh_pw

MIPS_precrq_pw_l = _ida_domain.MIPS_precrq_pw_l

MIPS_cmpgu_lt_ob = _ida_domain.MIPS_cmpgu_lt_ob

MIPS_precrq_rs_qh_pw = _ida_domain.MIPS_precrq_rs_qh_pw

MIPS_cmpgu_le_ob = _ida_domain.MIPS_cmpgu_le_ob

MIPS_packrl_pw = _ida_domain.MIPS_packrl_pw

MIPS_precrqu_s_ob_qh = _ida_domain.MIPS_precrqu_s_ob_qh

MIPS_absq_s_qb = _ida_domain.MIPS_absq_s_qb

MIPS_absq_s_ph = _ida_domain.MIPS_absq_s_ph

MIPS_absq_s_w = _ida_domain.MIPS_absq_s_w

MIPS_repl_qb = _ida_domain.MIPS_repl_qb

MIPS_repl_ph = _ida_domain.MIPS_repl_ph

MIPS_replv_qb = _ida_domain.MIPS_replv_qb

MIPS_replv_ph = _ida_domain.MIPS_replv_ph

MIPS_bitrev = _ida_domain.MIPS_bitrev

MIPS_precequ_ph_qbl = _ida_domain.MIPS_precequ_ph_qbl

MIPS_preceq_w_phl = _ida_domain.MIPS_preceq_w_phl

MIPS_preceu_ph_qbl = _ida_domain.MIPS_preceu_ph_qbl

MIPS_precequ_ph_qbr = _ida_domain.MIPS_precequ_ph_qbr

MIPS_preceq_w_phr = _ida_domain.MIPS_preceq_w_phr

MIPS_preceu_ph_qbr = _ida_domain.MIPS_preceu_ph_qbr

MIPS_precequ_ph_qbla = _ida_domain.MIPS_precequ_ph_qbla

MIPS_preceu_ph_qbla = _ida_domain.MIPS_preceu_ph_qbla

MIPS_precequ_ph_qbra = _ida_domain.MIPS_precequ_ph_qbra

MIPS_preceu_ph_qbra = _ida_domain.MIPS_preceu_ph_qbra

MIPS_absq_s_qh = _ida_domain.MIPS_absq_s_qh

MIPS_absq_s_pw = _ida_domain.MIPS_absq_s_pw

MIPS_repl_ob = _ida_domain.MIPS_repl_ob

MIPS_repl_qh = _ida_domain.MIPS_repl_qh

MIPS_repl_pw = _ida_domain.MIPS_repl_pw

MIPS_replv_ob = _ida_domain.MIPS_replv_ob

MIPS_replv_qh = _ida_domain.MIPS_replv_qh

MIPS_replv_pw = _ida_domain.MIPS_replv_pw

MIPS_precequ_pw_qhl = _ida_domain.MIPS_precequ_pw_qhl

MIPS_preceq_pw_qhl = _ida_domain.MIPS_preceq_pw_qhl

MIPS_preceq_s_l_pwl = _ida_domain.MIPS_preceq_s_l_pwl

MIPS_preceu_qh_obl = _ida_domain.MIPS_preceu_qh_obl

MIPS_precequ_pw_qhr = _ida_domain.MIPS_precequ_pw_qhr

MIPS_preceq_pw_qhr = _ida_domain.MIPS_preceq_pw_qhr

MIPS_preceq_s_l_pwr = _ida_domain.MIPS_preceq_s_l_pwr

MIPS_preceu_qh_obr = _ida_domain.MIPS_preceu_qh_obr

MIPS_precequ_pw_qhla = _ida_domain.MIPS_precequ_pw_qhla

MIPS_preceq_pw_qhla = _ida_domain.MIPS_preceq_pw_qhla

MIPS_preceu_qh_obla = _ida_domain.MIPS_preceu_qh_obla

MIPS_precequ_pw_qhra = _ida_domain.MIPS_precequ_pw_qhra

MIPS_preceq_pw_qhra = _ida_domain.MIPS_preceq_pw_qhra

MIPS_preceu_qh_obra = _ida_domain.MIPS_preceu_qh_obra

MIPS_shll_qb = _ida_domain.MIPS_shll_qb

MIPS_shll_ph = _ida_domain.MIPS_shll_ph

MIPS_shrl_qb = _ida_domain.MIPS_shrl_qb

MIPS_shra_ph = _ida_domain.MIPS_shra_ph

MIPS_shrl_ph = _ida_domain.MIPS_shrl_ph

MIPS_shllv_qb = _ida_domain.MIPS_shllv_qb

MIPS_shllv_ph = _ida_domain.MIPS_shllv_ph

MIPS_shrlv_qb = _ida_domain.MIPS_shrlv_qb

MIPS_shrav_ph = _ida_domain.MIPS_shrav_ph

MIPS_shrlv_ph = _ida_domain.MIPS_shrlv_ph

MIPS_shra_qb = _ida_domain.MIPS_shra_qb

MIPS_shll_s_ph = _ida_domain.MIPS_shll_s_ph

MIPS_shll_s_w = _ida_domain.MIPS_shll_s_w

MIPS_shra_r_qb = _ida_domain.MIPS_shra_r_qb

MIPS_shra_r_ph = _ida_domain.MIPS_shra_r_ph

MIPS_shra_r_w = _ida_domain.MIPS_shra_r_w

MIPS_shrav_qb = _ida_domain.MIPS_shrav_qb

MIPS_shllv_s_ph = _ida_domain.MIPS_shllv_s_ph

MIPS_shllv_s_w = _ida_domain.MIPS_shllv_s_w

MIPS_shrav_r_qb = _ida_domain.MIPS_shrav_r_qb

MIPS_shrav_r_ph = _ida_domain.MIPS_shrav_r_ph

MIPS_shrav_r_w = _ida_domain.MIPS_shrav_r_w

MIPS_shll_ob = _ida_domain.MIPS_shll_ob

MIPS_shll_qh = _ida_domain.MIPS_shll_qh

MIPS_shll_pw = _ida_domain.MIPS_shll_pw

MIPS_shrl_ob = _ida_domain.MIPS_shrl_ob

MIPS_shra_qh = _ida_domain.MIPS_shra_qh

MIPS_shra_pw = _ida_domain.MIPS_shra_pw

MIPS_shllv_ob = _ida_domain.MIPS_shllv_ob

MIPS_shllv_qh = _ida_domain.MIPS_shllv_qh

MIPS_shllv_pw = _ida_domain.MIPS_shllv_pw

MIPS_shrlv_ob = _ida_domain.MIPS_shrlv_ob

MIPS_shrav_qh = _ida_domain.MIPS_shrav_qh

MIPS_shrav_pw = _ida_domain.MIPS_shrav_pw

MIPS_shll_s_qh = _ida_domain.MIPS_shll_s_qh

MIPS_shll_s_pw = _ida_domain.MIPS_shll_s_pw

MIPS_shra_r_qh = _ida_domain.MIPS_shra_r_qh

MIPS_shra_r_pw = _ida_domain.MIPS_shra_r_pw

MIPS_shllv_s_qh = _ida_domain.MIPS_shllv_s_qh

MIPS_shllv_s_pw = _ida_domain.MIPS_shllv_s_pw

MIPS_shrav_r_qh = _ida_domain.MIPS_shrav_r_qh

MIPS_shrav_r_pw = _ida_domain.MIPS_shrav_r_pw

MIPS_lwx = _ida_domain.MIPS_lwx

MIPS_ldx = _ida_domain.MIPS_ldx

MIPS_lhx = _ida_domain.MIPS_lhx

MIPS_lbux = _ida_domain.MIPS_lbux

MIPS_dpa_w_ph = _ida_domain.MIPS_dpa_w_ph

MIPS_dpax_w_ph = _ida_domain.MIPS_dpax_w_ph

MIPS_maq_sa_w_phl = _ida_domain.MIPS_maq_sa_w_phl

MIPS_dpaqx_s_w_ph = _ida_domain.MIPS_dpaqx_s_w_ph

MIPS_dps_w_ph = _ida_domain.MIPS_dps_w_ph

MIPS_dpsx_w_ph = _ida_domain.MIPS_dpsx_w_ph

MIPS_dpsqx_s_w_ph = _ida_domain.MIPS_dpsqx_s_w_ph

MIPS_mulsa_w_ph = _ida_domain.MIPS_mulsa_w_ph

MIPS_maq_sa_w_phr = _ida_domain.MIPS_maq_sa_w_phr

MIPS_dpaqx_sa_w_ph = _ida_domain.MIPS_dpaqx_sa_w_ph

MIPS_dpau_h_qbl = _ida_domain.MIPS_dpau_h_qbl

MIPS_dpsu_h_qbl = _ida_domain.MIPS_dpsu_h_qbl

MIPS_dpsqx_sa_w_ph = _ida_domain.MIPS_dpsqx_sa_w_ph

MIPS_dpaq_s_w_ph = _ida_domain.MIPS_dpaq_s_w_ph

MIPS_dpaq_sa_l_w = _ida_domain.MIPS_dpaq_sa_l_w

MIPS_maq_s_w_phl = _ida_domain.MIPS_maq_s_w_phl

MIPS_dpsq_s_w_ph = _ida_domain.MIPS_dpsq_s_w_ph

MIPS_dpsq_sa_l_w = _ida_domain.MIPS_dpsq_sa_l_w

MIPS_mulsaq_s_w_ph = _ida_domain.MIPS_mulsaq_s_w_ph

MIPS_maq_s_w_phr = _ida_domain.MIPS_maq_s_w_phr

MIPS_dpau_h_qbr = _ida_domain.MIPS_dpau_h_qbr

MIPS_dpsu_h_qbr = _ida_domain.MIPS_dpsu_h_qbr

MIPS_maq_sa_w_qhll = _ida_domain.MIPS_maq_sa_w_qhll

MIPS_maq_sa_w_qhlr = _ida_domain.MIPS_maq_sa_w_qhlr

MIPS_dmadd = _ida_domain.MIPS_dmadd

MIPS_dmsub = _ida_domain.MIPS_dmsub

MIPS_maq_sa_w_qhrl = _ida_domain.MIPS_maq_sa_w_qhrl

MIPS_dpau_h_obl = _ida_domain.MIPS_dpau_h_obl

MIPS_dpsu_h_obl = _ida_domain.MIPS_dpsu_h_obl

MIPS_maq_sa_w_qhrr = _ida_domain.MIPS_maq_sa_w_qhrr

MIPS_dpaq_s_w_qh = _ida_domain.MIPS_dpaq_s_w_qh

MIPS_dpaq_sa_l_pw = _ida_domain.MIPS_dpaq_sa_l_pw

MIPS_maq_s_w_qhll = _ida_domain.MIPS_maq_s_w_qhll

MIPS_maq_s_l_pwl = _ida_domain.MIPS_maq_s_l_pwl

MIPS_dpsq_s_w_qh = _ida_domain.MIPS_dpsq_s_w_qh

MIPS_dpsq_sa_l_pw = _ida_domain.MIPS_dpsq_sa_l_pw

MIPS_maq_s_w_qhlr = _ida_domain.MIPS_maq_s_w_qhlr

MIPS_dmaddu = _ida_domain.MIPS_dmaddu

MIPS_mulsaq_s_w_qh = _ida_domain.MIPS_mulsaq_s_w_qh

MIPS_mulsaq_s_l_pw = _ida_domain.MIPS_mulsaq_s_l_pw

MIPS_maq_s_w_qhrl = _ida_domain.MIPS_maq_s_w_qhrl

MIPS_maq_s_l_pwr = _ida_domain.MIPS_maq_s_l_pwr

MIPS_dpau_h_obr = _ida_domain.MIPS_dpau_h_obr

MIPS_dpsu_h_obr = _ida_domain.MIPS_dpsu_h_obr

MIPS_maq_s_w_qhrr = _ida_domain.MIPS_maq_s_w_qhrr

MIPS_dmsubu = _ida_domain.MIPS_dmsubu

MIPS_extr_w = _ida_domain.MIPS_extr_w

MIPS_extrv_w = _ida_domain.MIPS_extrv_w

MIPS_extp = _ida_domain.MIPS_extp

MIPS_extpdp = _ida_domain.MIPS_extpdp

MIPS_rddsp = _ida_domain.MIPS_rddsp

MIPS_shilo = _ida_domain.MIPS_shilo

MIPS_extpv = _ida_domain.MIPS_extpv

MIPS_extpdpv = _ida_domain.MIPS_extpdpv

MIPS_wrdsp = _ida_domain.MIPS_wrdsp

MIPS_shilov = _ida_domain.MIPS_shilov

MIPS_extr_r_w = _ida_domain.MIPS_extr_r_w

MIPS_extrv_r_w = _ida_domain.MIPS_extrv_r_w

MIPS_extr_rs_w = _ida_domain.MIPS_extr_rs_w

MIPS_extr_s_h = _ida_domain.MIPS_extr_s_h

MIPS_extrv_rs_w = _ida_domain.MIPS_extrv_rs_w

MIPS_extrv_s_h = _ida_domain.MIPS_extrv_s_h

MIPS_mthlip = _ida_domain.MIPS_mthlip

MIPS_dextr_w = _ida_domain.MIPS_dextr_w

MIPS_dextr_l = _ida_domain.MIPS_dextr_l

MIPS_dextrv_w = _ida_domain.MIPS_dextrv_w

MIPS_dextrv_l = _ida_domain.MIPS_dextrv_l

MIPS_dextp = _ida_domain.MIPS_dextp

MIPS_dextpdp = _ida_domain.MIPS_dextpdp

MIPS_dshilo = _ida_domain.MIPS_dshilo

MIPS_dextpv = _ida_domain.MIPS_dextpv

MIPS_dextpdpv = _ida_domain.MIPS_dextpdpv

MIPS_dshilov = _ida_domain.MIPS_dshilov

MIPS_dextr_r_w = _ida_domain.MIPS_dextr_r_w

MIPS_dextr_r_l = _ida_domain.MIPS_dextr_r_l

MIPS_dextrv_r_w = _ida_domain.MIPS_dextrv_r_w

MIPS_dextrv_r_l = _ida_domain.MIPS_dextrv_r_l

MIPS_dextr_rs_w = _ida_domain.MIPS_dextr_rs_w

MIPS_dextr_s_h = _ida_domain.MIPS_dextr_s_h

MIPS_dextr_rs_l = _ida_domain.MIPS_dextr_rs_l

MIPS_dextrv_rs_w = _ida_domain.MIPS_dextrv_rs_w

MIPS_dextrv_s_h = _ida_domain.MIPS_dextrv_s_h

MIPS_dextrv_rs_l = _ida_domain.MIPS_dextrv_rs_l

MIPS_dmthlip = _ida_domain.MIPS_dmthlip

MIPS_adduh_qb = _ida_domain.MIPS_adduh_qb

MIPS_addqh_ph = _ida_domain.MIPS_addqh_ph

MIPS_addqh_w = _ida_domain.MIPS_addqh_w

MIPS_subuh_qb = _ida_domain.MIPS_subuh_qb

MIPS_subqh_ph = _ida_domain.MIPS_subqh_ph

MIPS_subqh_w = _ida_domain.MIPS_subqh_w

MIPS_adduh_r_qb = _ida_domain.MIPS_adduh_r_qb

MIPS_addqh_r_ph = _ida_domain.MIPS_addqh_r_ph

MIPS_addqh_r_w = _ida_domain.MIPS_addqh_r_w

MIPS_subuh_r_qb = _ida_domain.MIPS_subuh_r_qb

MIPS_subqh_r_ph = _ida_domain.MIPS_subqh_r_ph

MIPS_subqh_r_w = _ida_domain.MIPS_subqh_r_w

MIPS_mul_ph = _ida_domain.MIPS_mul_ph

MIPS_mul_s_ph = _ida_domain.MIPS_mul_s_ph

MIPS_mulq_s_w = _ida_domain.MIPS_mulq_s_w

MIPS_mulq_rs_w = _ida_domain.MIPS_mulq_rs_w

MIPS_append = _ida_domain.MIPS_append

MIPS_balign = _ida_domain.MIPS_balign

MIPS_prepend = _ida_domain.MIPS_prepend

MIPS_laa = _ida_domain.MIPS_laa

MIPS_laad = _ida_domain.MIPS_laad

MIPS_lac = _ida_domain.MIPS_lac

MIPS_lacd = _ida_domain.MIPS_lacd

MIPS_lad = _ida_domain.MIPS_lad

MIPS_ladd = _ida_domain.MIPS_ladd

MIPS_lai = _ida_domain.MIPS_lai

MIPS_laid = _ida_domain.MIPS_laid

MIPS_las = _ida_domain.MIPS_las

MIPS_lasd = _ida_domain.MIPS_lasd

MIPS_law = _ida_domain.MIPS_law

MIPS_lawd = _ida_domain.MIPS_lawd

MIPS_lbx = _ida_domain.MIPS_lbx

MIPS_lhux = _ida_domain.MIPS_lhux

MIPS_lwux = _ida_domain.MIPS_lwux

MIPS_qmac_00 = _ida_domain.MIPS_qmac_00

MIPS_qmac_01 = _ida_domain.MIPS_qmac_01

MIPS_qmac_02 = _ida_domain.MIPS_qmac_02

MIPS_qmac_03 = _ida_domain.MIPS_qmac_03

MIPS_qmacs_00 = _ida_domain.MIPS_qmacs_00

MIPS_qmacs_01 = _ida_domain.MIPS_qmacs_01

MIPS_qmacs_02 = _ida_domain.MIPS_qmacs_02

MIPS_qmacs_03 = _ida_domain.MIPS_qmacs_03

MIPS_zcb = _ida_domain.MIPS_zcb

MIPS_zcbt = _ida_domain.MIPS_zcbt

MIPS_msa_sll_b = _ida_domain.MIPS_msa_sll_b

MIPS_msa_sll_h = _ida_domain.MIPS_msa_sll_h

MIPS_msa_sll_w = _ida_domain.MIPS_msa_sll_w

MIPS_msa_sll_d = _ida_domain.MIPS_msa_sll_d

MIPS_msa_slli_b = _ida_domain.MIPS_msa_slli_b

MIPS_msa_slli_h = _ida_domain.MIPS_msa_slli_h

MIPS_msa_slli_w = _ida_domain.MIPS_msa_slli_w

MIPS_msa_slli_d = _ida_domain.MIPS_msa_slli_d

MIPS_msa_sra_b = _ida_domain.MIPS_msa_sra_b

MIPS_msa_sra_h = _ida_domain.MIPS_msa_sra_h

MIPS_msa_sra_w = _ida_domain.MIPS_msa_sra_w

MIPS_msa_sra_d = _ida_domain.MIPS_msa_sra_d

MIPS_msa_srai_b = _ida_domain.MIPS_msa_srai_b

MIPS_msa_srai_h = _ida_domain.MIPS_msa_srai_h

MIPS_msa_srai_w = _ida_domain.MIPS_msa_srai_w

MIPS_msa_srai_d = _ida_domain.MIPS_msa_srai_d

MIPS_msa_srl_b = _ida_domain.MIPS_msa_srl_b

MIPS_msa_srl_h = _ida_domain.MIPS_msa_srl_h

MIPS_msa_srl_w = _ida_domain.MIPS_msa_srl_w

MIPS_msa_srl_d = _ida_domain.MIPS_msa_srl_d

MIPS_msa_srli_b = _ida_domain.MIPS_msa_srli_b

MIPS_msa_srli_h = _ida_domain.MIPS_msa_srli_h

MIPS_msa_srli_w = _ida_domain.MIPS_msa_srli_w

MIPS_msa_srli_d = _ida_domain.MIPS_msa_srli_d

MIPS_msa_bclr_b = _ida_domain.MIPS_msa_bclr_b

MIPS_msa_bclr_h = _ida_domain.MIPS_msa_bclr_h

MIPS_msa_bclr_w = _ida_domain.MIPS_msa_bclr_w

MIPS_msa_bclr_d = _ida_domain.MIPS_msa_bclr_d

MIPS_msa_bclri_b = _ida_domain.MIPS_msa_bclri_b

MIPS_msa_bclri_h = _ida_domain.MIPS_msa_bclri_h

MIPS_msa_bclri_w = _ida_domain.MIPS_msa_bclri_w

MIPS_msa_bclri_d = _ida_domain.MIPS_msa_bclri_d

MIPS_msa_bset_b = _ida_domain.MIPS_msa_bset_b

MIPS_msa_bset_h = _ida_domain.MIPS_msa_bset_h

MIPS_msa_bset_w = _ida_domain.MIPS_msa_bset_w

MIPS_msa_bset_d = _ida_domain.MIPS_msa_bset_d

MIPS_msa_bseti_b = _ida_domain.MIPS_msa_bseti_b

MIPS_msa_bseti_h = _ida_domain.MIPS_msa_bseti_h

MIPS_msa_bseti_w = _ida_domain.MIPS_msa_bseti_w

MIPS_msa_bseti_d = _ida_domain.MIPS_msa_bseti_d

MIPS_msa_bneg_b = _ida_domain.MIPS_msa_bneg_b

MIPS_msa_bneg_h = _ida_domain.MIPS_msa_bneg_h

MIPS_msa_bneg_w = _ida_domain.MIPS_msa_bneg_w

MIPS_msa_bneg_d = _ida_domain.MIPS_msa_bneg_d

MIPS_msa_bnegi_b = _ida_domain.MIPS_msa_bnegi_b

MIPS_msa_bnegi_h = _ida_domain.MIPS_msa_bnegi_h

MIPS_msa_bnegi_w = _ida_domain.MIPS_msa_bnegi_w

MIPS_msa_bnegi_d = _ida_domain.MIPS_msa_bnegi_d

MIPS_msa_binsl_b = _ida_domain.MIPS_msa_binsl_b

MIPS_msa_binsl_h = _ida_domain.MIPS_msa_binsl_h

MIPS_msa_binsl_w = _ida_domain.MIPS_msa_binsl_w

MIPS_msa_binsl_d = _ida_domain.MIPS_msa_binsl_d

MIPS_msa_binsli_b = _ida_domain.MIPS_msa_binsli_b

MIPS_msa_binsli_h = _ida_domain.MIPS_msa_binsli_h

MIPS_msa_binsli_w = _ida_domain.MIPS_msa_binsli_w

MIPS_msa_binsli_d = _ida_domain.MIPS_msa_binsli_d

MIPS_msa_binsr_b = _ida_domain.MIPS_msa_binsr_b

MIPS_msa_binsr_h = _ida_domain.MIPS_msa_binsr_h

MIPS_msa_binsr_w = _ida_domain.MIPS_msa_binsr_w

MIPS_msa_binsr_d = _ida_domain.MIPS_msa_binsr_d

MIPS_msa_binsri_b = _ida_domain.MIPS_msa_binsri_b

MIPS_msa_binsri_h = _ida_domain.MIPS_msa_binsri_h

MIPS_msa_binsri_w = _ida_domain.MIPS_msa_binsri_w

MIPS_msa_binsri_d = _ida_domain.MIPS_msa_binsri_d

MIPS_msa_addv_b = _ida_domain.MIPS_msa_addv_b

MIPS_msa_addv_h = _ida_domain.MIPS_msa_addv_h

MIPS_msa_addv_w = _ida_domain.MIPS_msa_addv_w

MIPS_msa_addv_d = _ida_domain.MIPS_msa_addv_d

MIPS_msa_addvi_b = _ida_domain.MIPS_msa_addvi_b

MIPS_msa_addvi_h = _ida_domain.MIPS_msa_addvi_h

MIPS_msa_addvi_w = _ida_domain.MIPS_msa_addvi_w

MIPS_msa_addvi_d = _ida_domain.MIPS_msa_addvi_d

MIPS_msa_subv_b = _ida_domain.MIPS_msa_subv_b

MIPS_msa_subv_h = _ida_domain.MIPS_msa_subv_h

MIPS_msa_subv_w = _ida_domain.MIPS_msa_subv_w

MIPS_msa_subv_d = _ida_domain.MIPS_msa_subv_d

MIPS_msa_subvi_b = _ida_domain.MIPS_msa_subvi_b

MIPS_msa_subvi_h = _ida_domain.MIPS_msa_subvi_h

MIPS_msa_subvi_w = _ida_domain.MIPS_msa_subvi_w

MIPS_msa_subvi_d = _ida_domain.MIPS_msa_subvi_d

MIPS_msa_max_s_b = _ida_domain.MIPS_msa_max_s_b

MIPS_msa_max_s_h = _ida_domain.MIPS_msa_max_s_h

MIPS_msa_max_s_w = _ida_domain.MIPS_msa_max_s_w

MIPS_msa_max_s_d = _ida_domain.MIPS_msa_max_s_d

MIPS_msa_maxi_s_b = _ida_domain.MIPS_msa_maxi_s_b

MIPS_msa_maxi_s_h = _ida_domain.MIPS_msa_maxi_s_h

MIPS_msa_maxi_s_w = _ida_domain.MIPS_msa_maxi_s_w

MIPS_msa_maxi_s_d = _ida_domain.MIPS_msa_maxi_s_d

MIPS_msa_max_u_b = _ida_domain.MIPS_msa_max_u_b

MIPS_msa_max_u_h = _ida_domain.MIPS_msa_max_u_h

MIPS_msa_max_u_w = _ida_domain.MIPS_msa_max_u_w

MIPS_msa_max_u_d = _ida_domain.MIPS_msa_max_u_d

MIPS_msa_maxi_u_b = _ida_domain.MIPS_msa_maxi_u_b

MIPS_msa_maxi_u_h = _ida_domain.MIPS_msa_maxi_u_h

MIPS_msa_maxi_u_w = _ida_domain.MIPS_msa_maxi_u_w

MIPS_msa_maxi_u_d = _ida_domain.MIPS_msa_maxi_u_d

MIPS_msa_min_s_b = _ida_domain.MIPS_msa_min_s_b

MIPS_msa_min_s_h = _ida_domain.MIPS_msa_min_s_h

MIPS_msa_min_s_w = _ida_domain.MIPS_msa_min_s_w

MIPS_msa_min_s_d = _ida_domain.MIPS_msa_min_s_d

MIPS_msa_mini_s_b = _ida_domain.MIPS_msa_mini_s_b

MIPS_msa_mini_s_h = _ida_domain.MIPS_msa_mini_s_h

MIPS_msa_mini_s_w = _ida_domain.MIPS_msa_mini_s_w

MIPS_msa_mini_s_d = _ida_domain.MIPS_msa_mini_s_d

MIPS_msa_min_u_b = _ida_domain.MIPS_msa_min_u_b

MIPS_msa_min_u_h = _ida_domain.MIPS_msa_min_u_h

MIPS_msa_min_u_w = _ida_domain.MIPS_msa_min_u_w

MIPS_msa_min_u_d = _ida_domain.MIPS_msa_min_u_d

MIPS_msa_mini_u_b = _ida_domain.MIPS_msa_mini_u_b

MIPS_msa_mini_u_h = _ida_domain.MIPS_msa_mini_u_h

MIPS_msa_mini_u_w = _ida_domain.MIPS_msa_mini_u_w

MIPS_msa_mini_u_d = _ida_domain.MIPS_msa_mini_u_d

MIPS_msa_max_a_b = _ida_domain.MIPS_msa_max_a_b

MIPS_msa_max_a_h = _ida_domain.MIPS_msa_max_a_h

MIPS_msa_max_a_w = _ida_domain.MIPS_msa_max_a_w

MIPS_msa_max_a_d = _ida_domain.MIPS_msa_max_a_d

MIPS_msa_min_a_b = _ida_domain.MIPS_msa_min_a_b

MIPS_msa_min_a_h = _ida_domain.MIPS_msa_min_a_h

MIPS_msa_min_a_w = _ida_domain.MIPS_msa_min_a_w

MIPS_msa_min_a_d = _ida_domain.MIPS_msa_min_a_d

MIPS_msa_ceq_b = _ida_domain.MIPS_msa_ceq_b

MIPS_msa_ceq_h = _ida_domain.MIPS_msa_ceq_h

MIPS_msa_ceq_w = _ida_domain.MIPS_msa_ceq_w

MIPS_msa_ceq_d = _ida_domain.MIPS_msa_ceq_d

MIPS_msa_ceqi_b = _ida_domain.MIPS_msa_ceqi_b

MIPS_msa_ceqi_h = _ida_domain.MIPS_msa_ceqi_h

MIPS_msa_ceqi_w = _ida_domain.MIPS_msa_ceqi_w

MIPS_msa_ceqi_d = _ida_domain.MIPS_msa_ceqi_d

MIPS_msa_clt_s_b = _ida_domain.MIPS_msa_clt_s_b

MIPS_msa_clt_s_h = _ida_domain.MIPS_msa_clt_s_h

MIPS_msa_clt_s_w = _ida_domain.MIPS_msa_clt_s_w

MIPS_msa_clt_s_d = _ida_domain.MIPS_msa_clt_s_d

MIPS_msa_clti_s_b = _ida_domain.MIPS_msa_clti_s_b

MIPS_msa_clti_s_h = _ida_domain.MIPS_msa_clti_s_h

MIPS_msa_clti_s_w = _ida_domain.MIPS_msa_clti_s_w

MIPS_msa_clti_s_d = _ida_domain.MIPS_msa_clti_s_d

MIPS_msa_clt_u_b = _ida_domain.MIPS_msa_clt_u_b

MIPS_msa_clt_u_h = _ida_domain.MIPS_msa_clt_u_h

MIPS_msa_clt_u_w = _ida_domain.MIPS_msa_clt_u_w

MIPS_msa_clt_u_d = _ida_domain.MIPS_msa_clt_u_d

MIPS_msa_clti_u_b = _ida_domain.MIPS_msa_clti_u_b

MIPS_msa_clti_u_h = _ida_domain.MIPS_msa_clti_u_h

MIPS_msa_clti_u_w = _ida_domain.MIPS_msa_clti_u_w

MIPS_msa_clti_u_d = _ida_domain.MIPS_msa_clti_u_d

MIPS_msa_cle_s_b = _ida_domain.MIPS_msa_cle_s_b

MIPS_msa_cle_s_h = _ida_domain.MIPS_msa_cle_s_h

MIPS_msa_cle_s_w = _ida_domain.MIPS_msa_cle_s_w

MIPS_msa_cle_s_d = _ida_domain.MIPS_msa_cle_s_d

MIPS_msa_clei_s_b = _ida_domain.MIPS_msa_clei_s_b

MIPS_msa_clei_s_h = _ida_domain.MIPS_msa_clei_s_h

MIPS_msa_clei_s_w = _ida_domain.MIPS_msa_clei_s_w

MIPS_msa_clei_s_d = _ida_domain.MIPS_msa_clei_s_d

MIPS_msa_cle_u_b = _ida_domain.MIPS_msa_cle_u_b

MIPS_msa_cle_u_h = _ida_domain.MIPS_msa_cle_u_h

MIPS_msa_cle_u_w = _ida_domain.MIPS_msa_cle_u_w

MIPS_msa_cle_u_d = _ida_domain.MIPS_msa_cle_u_d

MIPS_msa_clei_u_b = _ida_domain.MIPS_msa_clei_u_b

MIPS_msa_clei_u_h = _ida_domain.MIPS_msa_clei_u_h

MIPS_msa_clei_u_w = _ida_domain.MIPS_msa_clei_u_w

MIPS_msa_clei_u_d = _ida_domain.MIPS_msa_clei_u_d

MIPS_msa_ld_b = _ida_domain.MIPS_msa_ld_b

MIPS_msa_ld_h = _ida_domain.MIPS_msa_ld_h

MIPS_msa_ld_w = _ida_domain.MIPS_msa_ld_w

MIPS_msa_ld_d = _ida_domain.MIPS_msa_ld_d

MIPS_msa_st_b = _ida_domain.MIPS_msa_st_b

MIPS_msa_st_h = _ida_domain.MIPS_msa_st_h

MIPS_msa_st_w = _ida_domain.MIPS_msa_st_w

MIPS_msa_st_d = _ida_domain.MIPS_msa_st_d

MIPS_msa_sat_s_b = _ida_domain.MIPS_msa_sat_s_b

MIPS_msa_sat_s_h = _ida_domain.MIPS_msa_sat_s_h

MIPS_msa_sat_s_w = _ida_domain.MIPS_msa_sat_s_w

MIPS_msa_sat_s_d = _ida_domain.MIPS_msa_sat_s_d

MIPS_msa_sat_u_b = _ida_domain.MIPS_msa_sat_u_b

MIPS_msa_sat_u_h = _ida_domain.MIPS_msa_sat_u_h

MIPS_msa_sat_u_w = _ida_domain.MIPS_msa_sat_u_w

MIPS_msa_sat_u_d = _ida_domain.MIPS_msa_sat_u_d

MIPS_msa_add_a_b = _ida_domain.MIPS_msa_add_a_b

MIPS_msa_add_a_h = _ida_domain.MIPS_msa_add_a_h

MIPS_msa_add_a_w = _ida_domain.MIPS_msa_add_a_w

MIPS_msa_add_a_d = _ida_domain.MIPS_msa_add_a_d

MIPS_msa_adds_a_b = _ida_domain.MIPS_msa_adds_a_b

MIPS_msa_adds_a_h = _ida_domain.MIPS_msa_adds_a_h

MIPS_msa_adds_a_w = _ida_domain.MIPS_msa_adds_a_w

MIPS_msa_adds_a_d = _ida_domain.MIPS_msa_adds_a_d

MIPS_msa_adds_s_b = _ida_domain.MIPS_msa_adds_s_b

MIPS_msa_adds_s_h = _ida_domain.MIPS_msa_adds_s_h

MIPS_msa_adds_s_w = _ida_domain.MIPS_msa_adds_s_w

MIPS_msa_adds_s_d = _ida_domain.MIPS_msa_adds_s_d

MIPS_msa_adds_u_b = _ida_domain.MIPS_msa_adds_u_b

MIPS_msa_adds_u_h = _ida_domain.MIPS_msa_adds_u_h

MIPS_msa_adds_u_w = _ida_domain.MIPS_msa_adds_u_w

MIPS_msa_adds_u_d = _ida_domain.MIPS_msa_adds_u_d

MIPS_msa_ave_s_b = _ida_domain.MIPS_msa_ave_s_b

MIPS_msa_ave_s_h = _ida_domain.MIPS_msa_ave_s_h

MIPS_msa_ave_s_w = _ida_domain.MIPS_msa_ave_s_w

MIPS_msa_ave_s_d = _ida_domain.MIPS_msa_ave_s_d

MIPS_msa_ave_u_b = _ida_domain.MIPS_msa_ave_u_b

MIPS_msa_ave_u_h = _ida_domain.MIPS_msa_ave_u_h

MIPS_msa_ave_u_w = _ida_domain.MIPS_msa_ave_u_w

MIPS_msa_ave_u_d = _ida_domain.MIPS_msa_ave_u_d

MIPS_msa_aver_s_b = _ida_domain.MIPS_msa_aver_s_b

MIPS_msa_aver_s_h = _ida_domain.MIPS_msa_aver_s_h

MIPS_msa_aver_s_w = _ida_domain.MIPS_msa_aver_s_w

MIPS_msa_aver_s_d = _ida_domain.MIPS_msa_aver_s_d

MIPS_msa_aver_u_b = _ida_domain.MIPS_msa_aver_u_b

MIPS_msa_aver_u_h = _ida_domain.MIPS_msa_aver_u_h

MIPS_msa_aver_u_w = _ida_domain.MIPS_msa_aver_u_w

MIPS_msa_aver_u_d = _ida_domain.MIPS_msa_aver_u_d

MIPS_msa_subs_s_b = _ida_domain.MIPS_msa_subs_s_b

MIPS_msa_subs_s_h = _ida_domain.MIPS_msa_subs_s_h

MIPS_msa_subs_s_w = _ida_domain.MIPS_msa_subs_s_w

MIPS_msa_subs_s_d = _ida_domain.MIPS_msa_subs_s_d

MIPS_msa_subs_u_b = _ida_domain.MIPS_msa_subs_u_b

MIPS_msa_subs_u_h = _ida_domain.MIPS_msa_subs_u_h

MIPS_msa_subs_u_w = _ida_domain.MIPS_msa_subs_u_w

MIPS_msa_subs_u_d = _ida_domain.MIPS_msa_subs_u_d

MIPS_msa_subsus_u_b = _ida_domain.MIPS_msa_subsus_u_b

MIPS_msa_subsus_u_h = _ida_domain.MIPS_msa_subsus_u_h

MIPS_msa_subsus_u_w = _ida_domain.MIPS_msa_subsus_u_w

MIPS_msa_subsus_u_d = _ida_domain.MIPS_msa_subsus_u_d

MIPS_msa_subsuu_s_b = _ida_domain.MIPS_msa_subsuu_s_b

MIPS_msa_subsuu_s_h = _ida_domain.MIPS_msa_subsuu_s_h

MIPS_msa_subsuu_s_w = _ida_domain.MIPS_msa_subsuu_s_w

MIPS_msa_subsuu_s_d = _ida_domain.MIPS_msa_subsuu_s_d

MIPS_msa_asub_s_b = _ida_domain.MIPS_msa_asub_s_b

MIPS_msa_asub_s_h = _ida_domain.MIPS_msa_asub_s_h

MIPS_msa_asub_s_w = _ida_domain.MIPS_msa_asub_s_w

MIPS_msa_asub_s_d = _ida_domain.MIPS_msa_asub_s_d

MIPS_msa_asub_u_b = _ida_domain.MIPS_msa_asub_u_b

MIPS_msa_asub_u_h = _ida_domain.MIPS_msa_asub_u_h

MIPS_msa_asub_u_w = _ida_domain.MIPS_msa_asub_u_w

MIPS_msa_asub_u_d = _ida_domain.MIPS_msa_asub_u_d

MIPS_msa_mulv_b = _ida_domain.MIPS_msa_mulv_b

MIPS_msa_mulv_h = _ida_domain.MIPS_msa_mulv_h

MIPS_msa_mulv_w = _ida_domain.MIPS_msa_mulv_w

MIPS_msa_mulv_d = _ida_domain.MIPS_msa_mulv_d

MIPS_msa_maddv_b = _ida_domain.MIPS_msa_maddv_b

MIPS_msa_maddv_h = _ida_domain.MIPS_msa_maddv_h

MIPS_msa_maddv_w = _ida_domain.MIPS_msa_maddv_w

MIPS_msa_maddv_d = _ida_domain.MIPS_msa_maddv_d

MIPS_msa_msubv_b = _ida_domain.MIPS_msa_msubv_b

MIPS_msa_msubv_h = _ida_domain.MIPS_msa_msubv_h

MIPS_msa_msubv_w = _ida_domain.MIPS_msa_msubv_w

MIPS_msa_msubv_d = _ida_domain.MIPS_msa_msubv_d

MIPS_msa_div_s_b = _ida_domain.MIPS_msa_div_s_b

MIPS_msa_div_s_h = _ida_domain.MIPS_msa_div_s_h

MIPS_msa_div_s_w = _ida_domain.MIPS_msa_div_s_w

MIPS_msa_div_s_d = _ida_domain.MIPS_msa_div_s_d

MIPS_msa_div_u_b = _ida_domain.MIPS_msa_div_u_b

MIPS_msa_div_u_h = _ida_domain.MIPS_msa_div_u_h

MIPS_msa_div_u_w = _ida_domain.MIPS_msa_div_u_w

MIPS_msa_div_u_d = _ida_domain.MIPS_msa_div_u_d

MIPS_msa_mod_s_b = _ida_domain.MIPS_msa_mod_s_b

MIPS_msa_mod_s_h = _ida_domain.MIPS_msa_mod_s_h

MIPS_msa_mod_s_w = _ida_domain.MIPS_msa_mod_s_w

MIPS_msa_mod_s_d = _ida_domain.MIPS_msa_mod_s_d

MIPS_msa_mod_u_b = _ida_domain.MIPS_msa_mod_u_b

MIPS_msa_mod_u_h = _ida_domain.MIPS_msa_mod_u_h

MIPS_msa_mod_u_w = _ida_domain.MIPS_msa_mod_u_w

MIPS_msa_mod_u_d = _ida_domain.MIPS_msa_mod_u_d

MIPS_msa_dotp_s_h = _ida_domain.MIPS_msa_dotp_s_h

MIPS_msa_dotp_s_w = _ida_domain.MIPS_msa_dotp_s_w

MIPS_msa_dotp_s_d = _ida_domain.MIPS_msa_dotp_s_d

MIPS_msa_dotp_u_h = _ida_domain.MIPS_msa_dotp_u_h

MIPS_msa_dotp_u_w = _ida_domain.MIPS_msa_dotp_u_w

MIPS_msa_dotp_u_d = _ida_domain.MIPS_msa_dotp_u_d

MIPS_msa_dpadd_s_h = _ida_domain.MIPS_msa_dpadd_s_h

MIPS_msa_dpadd_s_w = _ida_domain.MIPS_msa_dpadd_s_w

MIPS_msa_dpadd_s_d = _ida_domain.MIPS_msa_dpadd_s_d

MIPS_msa_dpadd_u_h = _ida_domain.MIPS_msa_dpadd_u_h

MIPS_msa_dpadd_u_w = _ida_domain.MIPS_msa_dpadd_u_w

MIPS_msa_dpadd_u_d = _ida_domain.MIPS_msa_dpadd_u_d

MIPS_msa_dpsub_s_h = _ida_domain.MIPS_msa_dpsub_s_h

MIPS_msa_dpsub_s_w = _ida_domain.MIPS_msa_dpsub_s_w

MIPS_msa_dpsub_s_d = _ida_domain.MIPS_msa_dpsub_s_d

MIPS_msa_dpsub_u_h = _ida_domain.MIPS_msa_dpsub_u_h

MIPS_msa_dpsub_u_w = _ida_domain.MIPS_msa_dpsub_u_w

MIPS_msa_dpsub_u_d = _ida_domain.MIPS_msa_dpsub_u_d

MIPS_msa_sld_b = _ida_domain.MIPS_msa_sld_b

MIPS_msa_sld_h = _ida_domain.MIPS_msa_sld_h

MIPS_msa_sld_w = _ida_domain.MIPS_msa_sld_w

MIPS_msa_sld_d = _ida_domain.MIPS_msa_sld_d

MIPS_msa_sldi_b = _ida_domain.MIPS_msa_sldi_b

MIPS_msa_sldi_h = _ida_domain.MIPS_msa_sldi_h

MIPS_msa_sldi_w = _ida_domain.MIPS_msa_sldi_w

MIPS_msa_sldi_d = _ida_domain.MIPS_msa_sldi_d

MIPS_msa_splat_b = _ida_domain.MIPS_msa_splat_b

MIPS_msa_splat_h = _ida_domain.MIPS_msa_splat_h

MIPS_msa_splat_w = _ida_domain.MIPS_msa_splat_w

MIPS_msa_splat_d = _ida_domain.MIPS_msa_splat_d

MIPS_msa_splati_b = _ida_domain.MIPS_msa_splati_b

MIPS_msa_splati_h = _ida_domain.MIPS_msa_splati_h

MIPS_msa_splati_w = _ida_domain.MIPS_msa_splati_w

MIPS_msa_splati_d = _ida_domain.MIPS_msa_splati_d

MIPS_msa_pckev_b = _ida_domain.MIPS_msa_pckev_b

MIPS_msa_pckev_h = _ida_domain.MIPS_msa_pckev_h

MIPS_msa_pckev_w = _ida_domain.MIPS_msa_pckev_w

MIPS_msa_pckev_d = _ida_domain.MIPS_msa_pckev_d

MIPS_msa_pckod_b = _ida_domain.MIPS_msa_pckod_b

MIPS_msa_pckod_h = _ida_domain.MIPS_msa_pckod_h

MIPS_msa_pckod_w = _ida_domain.MIPS_msa_pckod_w

MIPS_msa_pckod_d = _ida_domain.MIPS_msa_pckod_d

MIPS_msa_ilvl_b = _ida_domain.MIPS_msa_ilvl_b

MIPS_msa_ilvl_h = _ida_domain.MIPS_msa_ilvl_h

MIPS_msa_ilvl_w = _ida_domain.MIPS_msa_ilvl_w

MIPS_msa_ilvl_d = _ida_domain.MIPS_msa_ilvl_d

MIPS_msa_ilvr_b = _ida_domain.MIPS_msa_ilvr_b

MIPS_msa_ilvr_h = _ida_domain.MIPS_msa_ilvr_h

MIPS_msa_ilvr_w = _ida_domain.MIPS_msa_ilvr_w

MIPS_msa_ilvr_d = _ida_domain.MIPS_msa_ilvr_d

MIPS_msa_ilvev_b = _ida_domain.MIPS_msa_ilvev_b

MIPS_msa_ilvev_h = _ida_domain.MIPS_msa_ilvev_h

MIPS_msa_ilvev_w = _ida_domain.MIPS_msa_ilvev_w

MIPS_msa_ilvev_d = _ida_domain.MIPS_msa_ilvev_d

MIPS_msa_ilvod_b = _ida_domain.MIPS_msa_ilvod_b

MIPS_msa_ilvod_h = _ida_domain.MIPS_msa_ilvod_h

MIPS_msa_ilvod_w = _ida_domain.MIPS_msa_ilvod_w

MIPS_msa_ilvod_d = _ida_domain.MIPS_msa_ilvod_d

MIPS_msa_vshf_b = _ida_domain.MIPS_msa_vshf_b

MIPS_msa_vshf_h = _ida_domain.MIPS_msa_vshf_h

MIPS_msa_vshf_w = _ida_domain.MIPS_msa_vshf_w

MIPS_msa_vshf_d = _ida_domain.MIPS_msa_vshf_d

MIPS_msa_srar_b = _ida_domain.MIPS_msa_srar_b

MIPS_msa_srar_h = _ida_domain.MIPS_msa_srar_h

MIPS_msa_srar_w = _ida_domain.MIPS_msa_srar_w

MIPS_msa_srar_d = _ida_domain.MIPS_msa_srar_d

MIPS_msa_srari_b = _ida_domain.MIPS_msa_srari_b

MIPS_msa_srari_h = _ida_domain.MIPS_msa_srari_h

MIPS_msa_srari_w = _ida_domain.MIPS_msa_srari_w

MIPS_msa_srari_d = _ida_domain.MIPS_msa_srari_d

MIPS_msa_srlr_b = _ida_domain.MIPS_msa_srlr_b

MIPS_msa_srlr_h = _ida_domain.MIPS_msa_srlr_h

MIPS_msa_srlr_w = _ida_domain.MIPS_msa_srlr_w

MIPS_msa_srlr_d = _ida_domain.MIPS_msa_srlr_d

MIPS_msa_srlri_b = _ida_domain.MIPS_msa_srlri_b

MIPS_msa_srlri_h = _ida_domain.MIPS_msa_srlri_h

MIPS_msa_srlri_w = _ida_domain.MIPS_msa_srlri_w

MIPS_msa_srlri_d = _ida_domain.MIPS_msa_srlri_d

MIPS_msa_hadd_s_h = _ida_domain.MIPS_msa_hadd_s_h

MIPS_msa_hadd_s_w = _ida_domain.MIPS_msa_hadd_s_w

MIPS_msa_hadd_s_d = _ida_domain.MIPS_msa_hadd_s_d

MIPS_msa_hadd_u_h = _ida_domain.MIPS_msa_hadd_u_h

MIPS_msa_hadd_u_w = _ida_domain.MIPS_msa_hadd_u_w

MIPS_msa_hadd_u_d = _ida_domain.MIPS_msa_hadd_u_d

MIPS_msa_hsub_s_h = _ida_domain.MIPS_msa_hsub_s_h

MIPS_msa_hsub_s_w = _ida_domain.MIPS_msa_hsub_s_w

MIPS_msa_hsub_s_d = _ida_domain.MIPS_msa_hsub_s_d

MIPS_msa_hsub_u_h = _ida_domain.MIPS_msa_hsub_u_h

MIPS_msa_hsub_u_w = _ida_domain.MIPS_msa_hsub_u_w

MIPS_msa_hsub_u_d = _ida_domain.MIPS_msa_hsub_u_d

MIPS_msa_and_v = _ida_domain.MIPS_msa_and_v

MIPS_msa_andi_b = _ida_domain.MIPS_msa_andi_b

MIPS_msa_or_v = _ida_domain.MIPS_msa_or_v

MIPS_msa_ori_b = _ida_domain.MIPS_msa_ori_b

MIPS_msa_nor_v = _ida_domain.MIPS_msa_nor_v

MIPS_msa_nori_b = _ida_domain.MIPS_msa_nori_b

MIPS_msa_xor_v = _ida_domain.MIPS_msa_xor_v

MIPS_msa_xori_b = _ida_domain.MIPS_msa_xori_b

MIPS_msa_bmnz_v = _ida_domain.MIPS_msa_bmnz_v

MIPS_msa_bmnzi_b = _ida_domain.MIPS_msa_bmnzi_b

MIPS_msa_bmz_v = _ida_domain.MIPS_msa_bmz_v

MIPS_msa_bmzi_b = _ida_domain.MIPS_msa_bmzi_b

MIPS_msa_bsel_v = _ida_domain.MIPS_msa_bsel_v

MIPS_msa_bseli_b = _ida_domain.MIPS_msa_bseli_b

MIPS_msa_shf_b = _ida_domain.MIPS_msa_shf_b

MIPS_msa_shf_h = _ida_domain.MIPS_msa_shf_h

MIPS_msa_shf_w = _ida_domain.MIPS_msa_shf_w

MIPS_msa_bnz_v = _ida_domain.MIPS_msa_bnz_v

MIPS_msa_bz_v = _ida_domain.MIPS_msa_bz_v

MIPS_msa_fill_b = _ida_domain.MIPS_msa_fill_b

MIPS_msa_fill_h = _ida_domain.MIPS_msa_fill_h

MIPS_msa_fill_w = _ida_domain.MIPS_msa_fill_w

MIPS_msa_fill_d = _ida_domain.MIPS_msa_fill_d

MIPS_msa_pcnt_b = _ida_domain.MIPS_msa_pcnt_b

MIPS_msa_pcnt_h = _ida_domain.MIPS_msa_pcnt_h

MIPS_msa_pcnt_w = _ida_domain.MIPS_msa_pcnt_w

MIPS_msa_pcnt_d = _ida_domain.MIPS_msa_pcnt_d

MIPS_msa_nloc_b = _ida_domain.MIPS_msa_nloc_b

MIPS_msa_nloc_h = _ida_domain.MIPS_msa_nloc_h

MIPS_msa_nloc_w = _ida_domain.MIPS_msa_nloc_w

MIPS_msa_nloc_d = _ida_domain.MIPS_msa_nloc_d

MIPS_msa_nlzc_b = _ida_domain.MIPS_msa_nlzc_b

MIPS_msa_nlzc_h = _ida_domain.MIPS_msa_nlzc_h

MIPS_msa_nlzc_w = _ida_domain.MIPS_msa_nlzc_w

MIPS_msa_nlzc_d = _ida_domain.MIPS_msa_nlzc_d

MIPS_msa_copy_s_b = _ida_domain.MIPS_msa_copy_s_b

MIPS_msa_copy_s_h = _ida_domain.MIPS_msa_copy_s_h

MIPS_msa_copy_s_w = _ida_domain.MIPS_msa_copy_s_w

MIPS_msa_copy_s_d = _ida_domain.MIPS_msa_copy_s_d

MIPS_msa_copy_u_b = _ida_domain.MIPS_msa_copy_u_b

MIPS_msa_copy_u_h = _ida_domain.MIPS_msa_copy_u_h

MIPS_msa_copy_u_w = _ida_domain.MIPS_msa_copy_u_w

MIPS_msa_copy_u_d = _ida_domain.MIPS_msa_copy_u_d

MIPS_msa_insert_b = _ida_domain.MIPS_msa_insert_b

MIPS_msa_insert_h = _ida_domain.MIPS_msa_insert_h

MIPS_msa_insert_w = _ida_domain.MIPS_msa_insert_w

MIPS_msa_insert_d = _ida_domain.MIPS_msa_insert_d

MIPS_msa_insve_b = _ida_domain.MIPS_msa_insve_b

MIPS_msa_insve_h = _ida_domain.MIPS_msa_insve_h

MIPS_msa_insve_w = _ida_domain.MIPS_msa_insve_w

MIPS_msa_insve_d = _ida_domain.MIPS_msa_insve_d

MIPS_msa_bnz_b = _ida_domain.MIPS_msa_bnz_b

MIPS_msa_bnz_h = _ida_domain.MIPS_msa_bnz_h

MIPS_msa_bnz_w = _ida_domain.MIPS_msa_bnz_w

MIPS_msa_bnz_d = _ida_domain.MIPS_msa_bnz_d

MIPS_msa_bz_b = _ida_domain.MIPS_msa_bz_b

MIPS_msa_bz_h = _ida_domain.MIPS_msa_bz_h

MIPS_msa_bz_w = _ida_domain.MIPS_msa_bz_w

MIPS_msa_bz_d = _ida_domain.MIPS_msa_bz_d

MIPS_msa_ldi_b = _ida_domain.MIPS_msa_ldi_b

MIPS_msa_ldi_h = _ida_domain.MIPS_msa_ldi_h

MIPS_msa_ldi_w = _ida_domain.MIPS_msa_ldi_w

MIPS_msa_ldi_d = _ida_domain.MIPS_msa_ldi_d

MIPS_msa_fcaf_w = _ida_domain.MIPS_msa_fcaf_w

MIPS_msa_fcaf_d = _ida_domain.MIPS_msa_fcaf_d

MIPS_msa_fcun_w = _ida_domain.MIPS_msa_fcun_w

MIPS_msa_fcun_d = _ida_domain.MIPS_msa_fcun_d

MIPS_msa_fceq_w = _ida_domain.MIPS_msa_fceq_w

MIPS_msa_fceq_d = _ida_domain.MIPS_msa_fceq_d

MIPS_msa_fcueq_w = _ida_domain.MIPS_msa_fcueq_w

MIPS_msa_fcueq_d = _ida_domain.MIPS_msa_fcueq_d

MIPS_msa_fclt_w = _ida_domain.MIPS_msa_fclt_w

MIPS_msa_fclt_d = _ida_domain.MIPS_msa_fclt_d

MIPS_msa_fcult_w = _ida_domain.MIPS_msa_fcult_w

MIPS_msa_fcult_d = _ida_domain.MIPS_msa_fcult_d

MIPS_msa_fcle_w = _ida_domain.MIPS_msa_fcle_w

MIPS_msa_fcle_d = _ida_domain.MIPS_msa_fcle_d

MIPS_msa_fcule_w = _ida_domain.MIPS_msa_fcule_w

MIPS_msa_fcule_d = _ida_domain.MIPS_msa_fcule_d

MIPS_msa_fsaf_w = _ida_domain.MIPS_msa_fsaf_w

MIPS_msa_fsaf_d = _ida_domain.MIPS_msa_fsaf_d

MIPS_msa_fsun_w = _ida_domain.MIPS_msa_fsun_w

MIPS_msa_fsun_d = _ida_domain.MIPS_msa_fsun_d

MIPS_msa_fseq_w = _ida_domain.MIPS_msa_fseq_w

MIPS_msa_fseq_d = _ida_domain.MIPS_msa_fseq_d

MIPS_msa_fsueq_w = _ida_domain.MIPS_msa_fsueq_w

MIPS_msa_fsueq_d = _ida_domain.MIPS_msa_fsueq_d

MIPS_msa_fslt_w = _ida_domain.MIPS_msa_fslt_w

MIPS_msa_fslt_d = _ida_domain.MIPS_msa_fslt_d

MIPS_msa_fsult_w = _ida_domain.MIPS_msa_fsult_w

MIPS_msa_fsult_d = _ida_domain.MIPS_msa_fsult_d

MIPS_msa_fsle_w = _ida_domain.MIPS_msa_fsle_w

MIPS_msa_fsle_d = _ida_domain.MIPS_msa_fsle_d

MIPS_msa_fsule_w = _ida_domain.MIPS_msa_fsule_w

MIPS_msa_fsule_d = _ida_domain.MIPS_msa_fsule_d

MIPS_msa_fadd_w = _ida_domain.MIPS_msa_fadd_w

MIPS_msa_fadd_d = _ida_domain.MIPS_msa_fadd_d

MIPS_msa_fsub_w = _ida_domain.MIPS_msa_fsub_w

MIPS_msa_fsub_d = _ida_domain.MIPS_msa_fsub_d

MIPS_msa_fmul_w = _ida_domain.MIPS_msa_fmul_w

MIPS_msa_fmul_d = _ida_domain.MIPS_msa_fmul_d

MIPS_msa_fdiv_w = _ida_domain.MIPS_msa_fdiv_w

MIPS_msa_fdiv_d = _ida_domain.MIPS_msa_fdiv_d

MIPS_msa_fmadd_w = _ida_domain.MIPS_msa_fmadd_w

MIPS_msa_fmadd_d = _ida_domain.MIPS_msa_fmadd_d

MIPS_msa_fmsub_w = _ida_domain.MIPS_msa_fmsub_w

MIPS_msa_fmsub_d = _ida_domain.MIPS_msa_fmsub_d

MIPS_msa_fexp2_w = _ida_domain.MIPS_msa_fexp2_w

MIPS_msa_fexp2_d = _ida_domain.MIPS_msa_fexp2_d

MIPS_msa_fexdo_h = _ida_domain.MIPS_msa_fexdo_h

MIPS_msa_fexdo_w = _ida_domain.MIPS_msa_fexdo_w

MIPS_msa_ftq_h = _ida_domain.MIPS_msa_ftq_h

MIPS_msa_ftq_w = _ida_domain.MIPS_msa_ftq_w

MIPS_msa_fmin_w = _ida_domain.MIPS_msa_fmin_w

MIPS_msa_fmin_d = _ida_domain.MIPS_msa_fmin_d

MIPS_msa_fmin_a_w = _ida_domain.MIPS_msa_fmin_a_w

MIPS_msa_fmin_a_d = _ida_domain.MIPS_msa_fmin_a_d

MIPS_msa_fmax_w = _ida_domain.MIPS_msa_fmax_w

MIPS_msa_fmax_d = _ida_domain.MIPS_msa_fmax_d

MIPS_msa_fmax_a_w = _ida_domain.MIPS_msa_fmax_a_w

MIPS_msa_fmax_a_d = _ida_domain.MIPS_msa_fmax_a_d

MIPS_msa_fcor_w = _ida_domain.MIPS_msa_fcor_w

MIPS_msa_fcor_d = _ida_domain.MIPS_msa_fcor_d

MIPS_msa_fcune_w = _ida_domain.MIPS_msa_fcune_w

MIPS_msa_fcune_d = _ida_domain.MIPS_msa_fcune_d

MIPS_msa_fcne_w = _ida_domain.MIPS_msa_fcne_w

MIPS_msa_fcne_d = _ida_domain.MIPS_msa_fcne_d

MIPS_msa_mul_q_h = _ida_domain.MIPS_msa_mul_q_h

MIPS_msa_mul_q_w = _ida_domain.MIPS_msa_mul_q_w

MIPS_msa_madd_q_h = _ida_domain.MIPS_msa_madd_q_h

MIPS_msa_madd_q_w = _ida_domain.MIPS_msa_madd_q_w

MIPS_msa_msub_q_h = _ida_domain.MIPS_msa_msub_q_h

MIPS_msa_msub_q_w = _ida_domain.MIPS_msa_msub_q_w

MIPS_msa_fsor_w = _ida_domain.MIPS_msa_fsor_w

MIPS_msa_fsor_d = _ida_domain.MIPS_msa_fsor_d

MIPS_msa_fsune_w = _ida_domain.MIPS_msa_fsune_w

MIPS_msa_fsune_d = _ida_domain.MIPS_msa_fsune_d

MIPS_msa_fsne_w = _ida_domain.MIPS_msa_fsne_w

MIPS_msa_fsne_d = _ida_domain.MIPS_msa_fsne_d

MIPS_msa_mulr_q_h = _ida_domain.MIPS_msa_mulr_q_h

MIPS_msa_mulr_q_w = _ida_domain.MIPS_msa_mulr_q_w

MIPS_msa_maddr_q_h = _ida_domain.MIPS_msa_maddr_q_h

MIPS_msa_maddr_q_w = _ida_domain.MIPS_msa_maddr_q_w

MIPS_msa_msubr_q_h = _ida_domain.MIPS_msa_msubr_q_h

MIPS_msa_msubr_q_w = _ida_domain.MIPS_msa_msubr_q_w

MIPS_msa_fclass_w = _ida_domain.MIPS_msa_fclass_w

MIPS_msa_fclass_d = _ida_domain.MIPS_msa_fclass_d

MIPS_msa_ftrunc_s_w = _ida_domain.MIPS_msa_ftrunc_s_w

MIPS_msa_ftrunc_s_d = _ida_domain.MIPS_msa_ftrunc_s_d

MIPS_msa_ftrunc_u_w = _ida_domain.MIPS_msa_ftrunc_u_w

MIPS_msa_ftrunc_u_d = _ida_domain.MIPS_msa_ftrunc_u_d

MIPS_msa_fsqrt_w = _ida_domain.MIPS_msa_fsqrt_w

MIPS_msa_fsqrt_d = _ida_domain.MIPS_msa_fsqrt_d

MIPS_msa_frsqrt_w = _ida_domain.MIPS_msa_frsqrt_w

MIPS_msa_frsqrt_d = _ida_domain.MIPS_msa_frsqrt_d

MIPS_msa_frcp_w = _ida_domain.MIPS_msa_frcp_w

MIPS_msa_frcp_d = _ida_domain.MIPS_msa_frcp_d

MIPS_msa_frint_w = _ida_domain.MIPS_msa_frint_w

MIPS_msa_frint_d = _ida_domain.MIPS_msa_frint_d

MIPS_msa_flog2_w = _ida_domain.MIPS_msa_flog2_w

MIPS_msa_flog2_d = _ida_domain.MIPS_msa_flog2_d

MIPS_msa_fexupl_w = _ida_domain.MIPS_msa_fexupl_w

MIPS_msa_fexupl_d = _ida_domain.MIPS_msa_fexupl_d

MIPS_msa_fexupr_w = _ida_domain.MIPS_msa_fexupr_w

MIPS_msa_fexupr_d = _ida_domain.MIPS_msa_fexupr_d

MIPS_msa_ffql_w = _ida_domain.MIPS_msa_ffql_w

MIPS_msa_ffql_d = _ida_domain.MIPS_msa_ffql_d

MIPS_msa_ffqr_w = _ida_domain.MIPS_msa_ffqr_w

MIPS_msa_ffqr_d = _ida_domain.MIPS_msa_ffqr_d

MIPS_msa_ftint_s_w = _ida_domain.MIPS_msa_ftint_s_w

MIPS_msa_ftint_s_d = _ida_domain.MIPS_msa_ftint_s_d

MIPS_msa_ftint_u_w = _ida_domain.MIPS_msa_ftint_u_w

MIPS_msa_ftint_u_d = _ida_domain.MIPS_msa_ftint_u_d

MIPS_msa_ffint_s_w = _ida_domain.MIPS_msa_ffint_s_w

MIPS_msa_ffint_s_d = _ida_domain.MIPS_msa_ffint_s_d

MIPS_msa_ffint_u_w = _ida_domain.MIPS_msa_ffint_u_w

MIPS_msa_ffint_u_d = _ida_domain.MIPS_msa_ffint_u_d

MIPS_msa_ctcmsa = _ida_domain.MIPS_msa_ctcmsa

MIPS_msa_cfcmsa = _ida_domain.MIPS_msa_cfcmsa

MIPS_msa_move_v = _ida_domain.MIPS_msa_move_v

MIPS_lsa = _ida_domain.MIPS_lsa

MIPS_dlsa = _ida_domain.MIPS_dlsa

MIPS_lbe = _ida_domain.MIPS_lbe

MIPS_lbue = _ida_domain.MIPS_lbue

MIPS_lhe = _ida_domain.MIPS_lhe

MIPS_lhue = _ida_domain.MIPS_lhue

MIPS_lwe = _ida_domain.MIPS_lwe

MIPS_sbe = _ida_domain.MIPS_sbe

MIPS_she = _ida_domain.MIPS_she

MIPS_swe = _ida_domain.MIPS_swe

MIPS_lle = _ida_domain.MIPS_lle

MIPS_sce = _ida_domain.MIPS_sce

MIPS_cachee = _ida_domain.MIPS_cachee

MIPS_prefe = _ida_domain.MIPS_prefe

MIPS_lwle = _ida_domain.MIPS_lwle

MIPS_lwre = _ida_domain.MIPS_lwre

MIPS_swle = _ida_domain.MIPS_swle

MIPS_swre = _ida_domain.MIPS_swre

MIPS_movtz = _ida_domain.MIPS_movtz

MIPS_movtn = _ida_domain.MIPS_movtn

MIPS_copyw = _ida_domain.MIPS_copyw

MIPS_ucopyw = _ida_domain.MIPS_ucopyw

MIPS_muh = _ida_domain.MIPS_muh

MIPS_mulu = _ida_domain.MIPS_mulu

MIPS_muhu = _ida_domain.MIPS_muhu

MIPS_mod = _ida_domain.MIPS_mod

MIPS_modu = _ida_domain.MIPS_modu

MIPS_sov = _ida_domain.MIPS_sov

MIPS_crc32b = _ida_domain.MIPS_crc32b

MIPS_crc32h = _ida_domain.MIPS_crc32h

MIPS_crc32w = _ida_domain.MIPS_crc32w

MIPS_crc32cb = _ida_domain.MIPS_crc32cb

MIPS_crc32ch = _ida_domain.MIPS_crc32ch

MIPS_crc32cw = _ida_domain.MIPS_crc32cw

MIPS_sbx = _ida_domain.MIPS_sbx

MIPS_shx = _ida_domain.MIPS_shx

MIPS_shxs = _ida_domain.MIPS_shxs

MIPS_swx = _ida_domain.MIPS_swx

MIPS_swxs = _ida_domain.MIPS_swxs

MIPS_lhxs = _ida_domain.MIPS_lhxs

MIPS_lhuxs = _ida_domain.MIPS_lhuxs

MIPS_mfhc0 = _ida_domain.MIPS_mfhc0

MIPS_mthc0 = _ida_domain.MIPS_mthc0

MIPS_extw = _ida_domain.MIPS_extw

MIPS_tlbinv = _ida_domain.MIPS_tlbinv

MIPS_tlbinvf = _ida_domain.MIPS_tlbinvf

MIPS_ginvt = _ida_domain.MIPS_ginvt

MIPS_ginvi = _ida_domain.MIPS_ginvi

MIPS_eretnc = _ida_domain.MIPS_eretnc

MIPS_lwpc = _ida_domain.MIPS_lwpc

MIPS_swpc = _ida_domain.MIPS_swpc

MIPS_rotx = _ida_domain.MIPS_rotx

MIPS_llwp = _ida_domain.MIPS_llwp

MIPS_llwpe = _ida_domain.MIPS_llwpe

MIPS_scwp = _ida_domain.MIPS_scwp

MIPS_scwpe = _ida_domain.MIPS_scwpe

MIPS_ualwm = _ida_domain.MIPS_ualwm

MIPS_uaswm = _ida_domain.MIPS_uaswm

MIPS_ualh = _ida_domain.MIPS_ualh

MIPS_uash = _ida_domain.MIPS_uash

MIPS_syncie = _ida_domain.MIPS_syncie

MIPS_dvp = _ida_domain.MIPS_dvp

MIPS_evp = _ida_domain.MIPS_evp

MIPS_sigrie = _ida_domain.MIPS_sigrie

MIPS_bc = _ida_domain.MIPS_bc

MIPS_balc = _ida_domain.MIPS_balc

MIPS_restore_jrc = _ida_domain.MIPS_restore_jrc

MIPS_move_balc = _ida_domain.MIPS_move_balc

MIPS_addiupc = _ida_domain.MIPS_addiupc

MIPS_jalrc_hb = _ida_domain.MIPS_jalrc_hb

MIPS_aluipc = _ida_domain.MIPS_aluipc

MIPS_beqic = _ida_domain.MIPS_beqic

MIPS_bbeqzc = _ida_domain.MIPS_bbeqzc

MIPS_bgeic = _ida_domain.MIPS_bgeic

MIPS_bgeiuc = _ida_domain.MIPS_bgeiuc

MIPS_bneic = _ida_domain.MIPS_bneic

MIPS_bbnezc = _ida_domain.MIPS_bbnezc

MIPS_bltic = _ida_domain.MIPS_bltic

MIPS_bltiuc = _ida_domain.MIPS_bltiuc

MIPS_bnec = _ida_domain.MIPS_bnec

MIPS_bltc = _ida_domain.MIPS_bltc

MIPS_bltuc = _ida_domain.MIPS_bltuc

MIPS_beqc = _ida_domain.MIPS_beqc

MIPS_bgec = _ida_domain.MIPS_bgec

MIPS_bgeuc = _ida_domain.MIPS_bgeuc

MIPS_brsc = _ida_domain.MIPS_brsc

MIPS_balrsc = _ida_domain.MIPS_balrsc

MIPS_bitrevw = _ida_domain.MIPS_bitrevw

MIPS_bitrevh = _ida_domain.MIPS_bitrevh

MIPS_bitrevb = _ida_domain.MIPS_bitrevb

MIPS_byterevw = _ida_domain.MIPS_byterevw

MIPS_byterevh = _ida_domain.MIPS_byterevh

MIPS_last = _ida_domain.MIPS_last

H8_null = _ida_domain.H8_null

H8_add = _ida_domain.H8_add

H8_adds = _ida_domain.H8_adds

H8_addx = _ida_domain.H8_addx

H8_and = _ida_domain.H8_and

H8_andc = _ida_domain.H8_andc

H8_band = _ida_domain.H8_band

H8_bra = _ida_domain.H8_bra

H8_brn = _ida_domain.H8_brn

H8_bhi = _ida_domain.H8_bhi

H8_bls = _ida_domain.H8_bls

H8_bcc = _ida_domain.H8_bcc

H8_bcs = _ida_domain.H8_bcs

H8_bne = _ida_domain.H8_bne

H8_beq = _ida_domain.H8_beq

H8_bvc = _ida_domain.H8_bvc

H8_bvs = _ida_domain.H8_bvs

H8_bpl = _ida_domain.H8_bpl

H8_bmi = _ida_domain.H8_bmi

H8_bge = _ida_domain.H8_bge

H8_blt = _ida_domain.H8_blt

H8_bgt = _ida_domain.H8_bgt

H8_ble = _ida_domain.H8_ble

H8_bclr = _ida_domain.H8_bclr

H8_biand = _ida_domain.H8_biand

H8_bild = _ida_domain.H8_bild

H8_bior = _ida_domain.H8_bior

H8_bist = _ida_domain.H8_bist

H8_bixor = _ida_domain.H8_bixor

H8_bld = _ida_domain.H8_bld

H8_bnot = _ida_domain.H8_bnot

H8_bor = _ida_domain.H8_bor

H8_bset = _ida_domain.H8_bset

H8_bsr = _ida_domain.H8_bsr

H8_bst = _ida_domain.H8_bst

H8_btst = _ida_domain.H8_btst

H8_bxor = _ida_domain.H8_bxor

H8_clrmac = _ida_domain.H8_clrmac

H8_cmp = _ida_domain.H8_cmp

H8_daa = _ida_domain.H8_daa

H8_das = _ida_domain.H8_das

H8_dec = _ida_domain.H8_dec

H8_divxs = _ida_domain.H8_divxs

H8_divxu = _ida_domain.H8_divxu

H8_eepmov = _ida_domain.H8_eepmov

H8_exts = _ida_domain.H8_exts

H8_extu = _ida_domain.H8_extu

H8_inc = _ida_domain.H8_inc

H8_jmp = _ida_domain.H8_jmp

H8_jsr = _ida_domain.H8_jsr

H8_ldc = _ida_domain.H8_ldc

H8_ldm = _ida_domain.H8_ldm

H8_ldmac = _ida_domain.H8_ldmac

H8_mac = _ida_domain.H8_mac

H8_mov = _ida_domain.H8_mov

H8_movfpe = _ida_domain.H8_movfpe

H8_movtpe = _ida_domain.H8_movtpe

H8_mulxs = _ida_domain.H8_mulxs

H8_mulxu = _ida_domain.H8_mulxu

H8_neg = _ida_domain.H8_neg

H8_nop = _ida_domain.H8_nop

H8_not = _ida_domain.H8_not

H8_or = _ida_domain.H8_or

H8_orc = _ida_domain.H8_orc

H8_pop = _ida_domain.H8_pop

H8_push = _ida_domain.H8_push

H8_rotl = _ida_domain.H8_rotl

H8_rotr = _ida_domain.H8_rotr

H8_rotxl = _ida_domain.H8_rotxl

H8_rotxr = _ida_domain.H8_rotxr

H8_rte = _ida_domain.H8_rte

H8_rts = _ida_domain.H8_rts

H8_shal = _ida_domain.H8_shal

H8_shar = _ida_domain.H8_shar

H8_shll = _ida_domain.H8_shll

H8_shlr = _ida_domain.H8_shlr

H8_sleep = _ida_domain.H8_sleep

H8_stc = _ida_domain.H8_stc

H8_stm = _ida_domain.H8_stm

H8_stmac = _ida_domain.H8_stmac

H8_sub = _ida_domain.H8_sub

H8_subs = _ida_domain.H8_subs

H8_subx = _ida_domain.H8_subx

H8_tas = _ida_domain.H8_tas

H8_trapa = _ida_domain.H8_trapa

H8_xor = _ida_domain.H8_xor

H8_xorc = _ida_domain.H8_xorc

H8_rtel = _ida_domain.H8_rtel

H8_rtsl = _ida_domain.H8_rtsl

H8_movmd = _ida_domain.H8_movmd

H8_movsd = _ida_domain.H8_movsd

H8_bras = _ida_domain.H8_bras

H8_movab = _ida_domain.H8_movab

H8_movaw = _ida_domain.H8_movaw

H8_moval = _ida_domain.H8_moval

H8_bsetne = _ida_domain.H8_bsetne

H8_bseteq = _ida_domain.H8_bseteq

H8_bclrne = _ida_domain.H8_bclrne

H8_bclreq = _ida_domain.H8_bclreq

H8_bstz = _ida_domain.H8_bstz

H8_bistz = _ida_domain.H8_bistz

H8_bfld = _ida_domain.H8_bfld

H8_bfst = _ida_domain.H8_bfst

H8_muls = _ida_domain.H8_muls

H8_divs = _ida_domain.H8_divs

H8_mulu = _ida_domain.H8_mulu

H8_divu = _ida_domain.H8_divu

H8_mulsu = _ida_domain.H8_mulsu

H8_muluu = _ida_domain.H8_muluu

H8_brabc = _ida_domain.H8_brabc

H8_brabs = _ida_domain.H8_brabs

H8_bsrbc = _ida_domain.H8_bsrbc

H8_bsrbs = _ida_domain.H8_bsrbs

H8_last = _ida_domain.H8_last

PIC_null = _ida_domain.PIC_null

PIC_addwf = _ida_domain.PIC_addwf

PIC_andwf = _ida_domain.PIC_andwf

PIC_clrf = _ida_domain.PIC_clrf

PIC_clrw = _ida_domain.PIC_clrw

PIC_comf = _ida_domain.PIC_comf

PIC_decf = _ida_domain.PIC_decf

PIC_decfsz = _ida_domain.PIC_decfsz

PIC_incf = _ida_domain.PIC_incf

PIC_incfsz = _ida_domain.PIC_incfsz

PIC_iorwf = _ida_domain.PIC_iorwf

PIC_movf = _ida_domain.PIC_movf

PIC_movwf = _ida_domain.PIC_movwf

PIC_nop = _ida_domain.PIC_nop

PIC_rlf = _ida_domain.PIC_rlf

PIC_rrf = _ida_domain.PIC_rrf

PIC_subwf = _ida_domain.PIC_subwf

PIC_swapf = _ida_domain.PIC_swapf

PIC_xorwf = _ida_domain.PIC_xorwf

PIC_bcf = _ida_domain.PIC_bcf

PIC_bsf = _ida_domain.PIC_bsf

PIC_btfsc = _ida_domain.PIC_btfsc

PIC_btfss = _ida_domain.PIC_btfss

PIC_addlw = _ida_domain.PIC_addlw

PIC_andlw = _ida_domain.PIC_andlw

PIC_call = _ida_domain.PIC_call

PIC_clrwdt = _ida_domain.PIC_clrwdt

PIC_goto = _ida_domain.PIC_goto

PIC_iorlw = _ida_domain.PIC_iorlw

PIC_movlw = _ida_domain.PIC_movlw

PIC_retfie = _ida_domain.PIC_retfie

PIC_retlw = _ida_domain.PIC_retlw

PIC_return = _ida_domain.PIC_return

PIC_sleep = _ida_domain.PIC_sleep

PIC_sublw = _ida_domain.PIC_sublw

PIC_xorlw = _ida_domain.PIC_xorlw

PIC_option = _ida_domain.PIC_option

PIC_tris = _ida_domain.PIC_tris

PIC_movfw = _ida_domain.PIC_movfw

PIC_tstf = _ida_domain.PIC_tstf

PIC_negf = _ida_domain.PIC_negf

PIC_b = _ida_domain.PIC_b

PIC_clrc = _ida_domain.PIC_clrc

PIC_clrdc = _ida_domain.PIC_clrdc

PIC_clrz = _ida_domain.PIC_clrz

PIC_setc = _ida_domain.PIC_setc

PIC_setdc = _ida_domain.PIC_setdc

PIC_setz = _ida_domain.PIC_setz

PIC_skpc = _ida_domain.PIC_skpc

PIC_skpdc = _ida_domain.PIC_skpdc

PIC_skpnc = _ida_domain.PIC_skpnc

PIC_skpndc = _ida_domain.PIC_skpndc

PIC_skpnz = _ida_domain.PIC_skpnz

PIC_skpz = _ida_domain.PIC_skpz

PIC_bc = _ida_domain.PIC_bc

PIC_bdc = _ida_domain.PIC_bdc

PIC_bnc = _ida_domain.PIC_bnc

PIC_bndc = _ida_domain.PIC_bndc

PIC_bnz = _ida_domain.PIC_bnz

PIC_bz = _ida_domain.PIC_bz

PIC_addcf = _ida_domain.PIC_addcf

PIC_adddcf = _ida_domain.PIC_adddcf

PIC_subcf = _ida_domain.PIC_subcf

PIC_addwf3 = _ida_domain.PIC_addwf3

PIC_addwfc3 = _ida_domain.PIC_addwfc3

PIC_andwf3 = _ida_domain.PIC_andwf3

PIC_clrf2 = _ida_domain.PIC_clrf2

PIC_comf3 = _ida_domain.PIC_comf3

PIC_cpfseq2 = _ida_domain.PIC_cpfseq2

PIC_cpfsgt2 = _ida_domain.PIC_cpfsgt2

PIC_cpfslt2 = _ida_domain.PIC_cpfslt2

PIC_decf3 = _ida_domain.PIC_decf3

PIC_decfsz3 = _ida_domain.PIC_decfsz3

PIC_dcfsnz3 = _ida_domain.PIC_dcfsnz3

PIC_incf3 = _ida_domain.PIC_incf3

PIC_incfsz3 = _ida_domain.PIC_incfsz3

PIC_infsnz3 = _ida_domain.PIC_infsnz3

PIC_iorwf3 = _ida_domain.PIC_iorwf3

PIC_movf3 = _ida_domain.PIC_movf3

PIC_movff2 = _ida_domain.PIC_movff2

PIC_movwf2 = _ida_domain.PIC_movwf2

PIC_mulwf2 = _ida_domain.PIC_mulwf2

PIC_negf2 = _ida_domain.PIC_negf2

PIC_rlcf3 = _ida_domain.PIC_rlcf3

PIC_rlncf3 = _ida_domain.PIC_rlncf3

PIC_rrcf3 = _ida_domain.PIC_rrcf3

PIC_rrncf3 = _ida_domain.PIC_rrncf3

PIC_setf2 = _ida_domain.PIC_setf2

PIC_subfwb3 = _ida_domain.PIC_subfwb3

PIC_subwf3 = _ida_domain.PIC_subwf3

PIC_subwfb3 = _ida_domain.PIC_subwfb3

PIC_swapf3 = _ida_domain.PIC_swapf3

PIC_tstfsz2 = _ida_domain.PIC_tstfsz2

PIC_xorwf3 = _ida_domain.PIC_xorwf3

PIC_bcf3 = _ida_domain.PIC_bcf3

PIC_bsf3 = _ida_domain.PIC_bsf3

PIC_btfsc3 = _ida_domain.PIC_btfsc3

PIC_btfss3 = _ida_domain.PIC_btfss3

PIC_btg3 = _ida_domain.PIC_btg3

PIC_bc1 = _ida_domain.PIC_bc1

PIC_bn1 = _ida_domain.PIC_bn1

PIC_bnc1 = _ida_domain.PIC_bnc1

PIC_bnn1 = _ida_domain.PIC_bnn1

PIC_bnov1 = _ida_domain.PIC_bnov1

PIC_bnz1 = _ida_domain.PIC_bnz1

PIC_bov1 = _ida_domain.PIC_bov1

PIC_bra1 = _ida_domain.PIC_bra1

PIC_bz1 = _ida_domain.PIC_bz1

PIC_call2 = _ida_domain.PIC_call2

PIC_daw0 = _ida_domain.PIC_daw0

PIC_pop0 = _ida_domain.PIC_pop0

PIC_push0 = _ida_domain.PIC_push0

PIC_rcall1 = _ida_domain.PIC_rcall1

PIC_reset0 = _ida_domain.PIC_reset0

PIC_retfie1 = _ida_domain.PIC_retfie1

PIC_return1 = _ida_domain.PIC_return1

PIC_lfsr2 = _ida_domain.PIC_lfsr2

PIC_movlb1 = _ida_domain.PIC_movlb1

PIC_mullw1 = _ida_domain.PIC_mullw1

PIC_tblrd0 = _ida_domain.PIC_tblrd0

PIC_tblrd0p = _ida_domain.PIC_tblrd0p

PIC_tblrd0m = _ida_domain.PIC_tblrd0m

PIC_tblrdp0 = _ida_domain.PIC_tblrdp0

PIC_tblwt0 = _ida_domain.PIC_tblwt0

PIC_tblwt0p = _ida_domain.PIC_tblwt0p

PIC_tblwt0m = _ida_domain.PIC_tblwt0m

PIC_tblwtp0 = _ida_domain.PIC_tblwtp0

PIC_addwfc = _ida_domain.PIC_addwfc

PIC_movlp = _ida_domain.PIC_movlp

PIC_movlb = _ida_domain.PIC_movlb

PIC_addfsr = _ida_domain.PIC_addfsr

PIC_asrf = _ida_domain.PIC_asrf

PIC_lslf = _ida_domain.PIC_lslf

PIC_lsrf = _ida_domain.PIC_lsrf

PIC_subwfb = _ida_domain.PIC_subwfb

PIC_bra = _ida_domain.PIC_bra

PIC_brw = _ida_domain.PIC_brw

PIC_callw = _ida_domain.PIC_callw

PIC_reset = _ida_domain.PIC_reset

PIC_moviw = _ida_domain.PIC_moviw

PIC_movwi = _ida_domain.PIC_movwi

PIC_last = _ida_domain.PIC_last

PIC16_null = _ida_domain.PIC16_null

PIC16_EXCH = _ida_domain.PIC16_EXCH

PIC16_MOV = _ida_domain.PIC16_MOV

PIC16_SWAP = _ida_domain.PIC16_SWAP

PIC16_TBLRDH = _ida_domain.PIC16_TBLRDH

PIC16_TBLRDL = _ida_domain.PIC16_TBLRDL

PIC16_TBLWTH = _ida_domain.PIC16_TBLWTH

PIC16_TBLWTL = _ida_domain.PIC16_TBLWTL

PIC16_MOVPAG = _ida_domain.PIC16_MOVPAG

PIC16_ADD = _ida_domain.PIC16_ADD

PIC16_ADDC = _ida_domain.PIC16_ADDC

PIC16_DAWB = _ida_domain.PIC16_DAWB

PIC16_DEC = _ida_domain.PIC16_DEC

PIC16_DEC2 = _ida_domain.PIC16_DEC2

PIC16_DIV = _ida_domain.PIC16_DIV

PIC16_INC = _ida_domain.PIC16_INC

PIC16_INC2 = _ida_domain.PIC16_INC2

PIC16_MUL = _ida_domain.PIC16_MUL

PIC16_SE = _ida_domain.PIC16_SE

PIC16_SUB = _ida_domain.PIC16_SUB

PIC16_SUBB = _ida_domain.PIC16_SUBB

PIC16_SUBBR = _ida_domain.PIC16_SUBBR

PIC16_SUBR = _ida_domain.PIC16_SUBR

PIC16_ZE = _ida_domain.PIC16_ZE

PIC16_MULW = _ida_domain.PIC16_MULW

PIC16_DIVF = _ida_domain.PIC16_DIVF

PIC16_AND = _ida_domain.PIC16_AND

PIC16_CLR = _ida_domain.PIC16_CLR

PIC16_COM = _ida_domain.PIC16_COM

PIC16_IOR = _ida_domain.PIC16_IOR

PIC16_NEG = _ida_domain.PIC16_NEG

PIC16_SETM = _ida_domain.PIC16_SETM

PIC16_XOR = _ida_domain.PIC16_XOR

PIC16_ASR = _ida_domain.PIC16_ASR

PIC16_LSR = _ida_domain.PIC16_LSR

PIC16_RLC = _ida_domain.PIC16_RLC

PIC16_RLNC = _ida_domain.PIC16_RLNC

PIC16_RRC = _ida_domain.PIC16_RRC

PIC16_RRNC = _ida_domain.PIC16_RRNC

PIC16_SL = _ida_domain.PIC16_SL

PIC16_BCLR = _ida_domain.PIC16_BCLR

PIC16_BSET = _ida_domain.PIC16_BSET

PIC16_BSW = _ida_domain.PIC16_BSW

PIC16_BTG = _ida_domain.PIC16_BTG

PIC16_BTST = _ida_domain.PIC16_BTST

PIC16_BTSTS = _ida_domain.PIC16_BTSTS

PIC16_FBCL = _ida_domain.PIC16_FBCL

PIC16_FF1L = _ida_domain.PIC16_FF1L

PIC16_FF1R = _ida_domain.PIC16_FF1R

PIC16_BTSC = _ida_domain.PIC16_BTSC

PIC16_BTSS = _ida_domain.PIC16_BTSS

PIC16_CP = _ida_domain.PIC16_CP

PIC16_CP0 = _ida_domain.PIC16_CP0

PIC16_CPB = _ida_domain.PIC16_CPB

PIC16_CPSEQ = _ida_domain.PIC16_CPSEQ

PIC16_CPSGT = _ida_domain.PIC16_CPSGT

PIC16_CPSLT = _ida_domain.PIC16_CPSLT

PIC16_CPSNE = _ida_domain.PIC16_CPSNE

PIC16_CPBEQ = _ida_domain.PIC16_CPBEQ

PIC16_CPBNE = _ida_domain.PIC16_CPBNE

PIC16_CPBGT = _ida_domain.PIC16_CPBGT

PIC16_CPBLT = _ida_domain.PIC16_CPBLT

PIC16_BRA = _ida_domain.PIC16_BRA

PIC16_CALL = _ida_domain.PIC16_CALL

PIC16_GOTO = _ida_domain.PIC16_GOTO

PIC16_RCALL = _ida_domain.PIC16_RCALL

PIC16_REPEAT = _ida_domain.PIC16_REPEAT

PIC16_RETFIE = _ida_domain.PIC16_RETFIE

PIC16_RETLW = _ida_domain.PIC16_RETLW

PIC16_RETURN = _ida_domain.PIC16_RETURN

PIC16_DO = _ida_domain.PIC16_DO

PIC16_LNK = _ida_domain.PIC16_LNK

PIC16_POP = _ida_domain.PIC16_POP

PIC16_PUSH = _ida_domain.PIC16_PUSH

PIC16_ULNK = _ida_domain.PIC16_ULNK

PIC16_CLRWDT = _ida_domain.PIC16_CLRWDT

PIC16_DISI = _ida_domain.PIC16_DISI

PIC16_NOP = _ida_domain.PIC16_NOP

PIC16_NOPR = _ida_domain.PIC16_NOPR

PIC16_PWRSAV = _ida_domain.PIC16_PWRSAV

PIC16_RESET = _ida_domain.PIC16_RESET

PIC16_LAC = _ida_domain.PIC16_LAC

PIC16_SAC = _ida_domain.PIC16_SAC

PIC16_SFTAC = _ida_domain.PIC16_SFTAC

PIC16_CLR1 = _ida_domain.PIC16_CLR1

PIC16_ED = _ida_domain.PIC16_ED

PIC16_EDAC = _ida_domain.PIC16_EDAC

PIC16_MAC = _ida_domain.PIC16_MAC

PIC16_MOVSAC = _ida_domain.PIC16_MOVSAC

PIC16_MPY = _ida_domain.PIC16_MPY

PIC16_MSC = _ida_domain.PIC16_MSC

PIC16_BREAK = _ida_domain.PIC16_BREAK

PIC16_URUN = _ida_domain.PIC16_URUN

PIC16_SSTEP = _ida_domain.PIC16_SSTEP

PIC16_FEX = _ida_domain.PIC16_FEX

PIC16_last = _ida_domain.PIC16_last

SPARC_null = _ida_domain.SPARC_null

SPARC_add = _ida_domain.SPARC_add

SPARC_addcc = _ida_domain.SPARC_addcc

SPARC_addc = _ida_domain.SPARC_addc

SPARC_addccc = _ida_domain.SPARC_addccc

SPARC_and = _ida_domain.SPARC_and

SPARC_andcc = _ida_domain.SPARC_andcc

SPARC_andn = _ida_domain.SPARC_andn

SPARC_andncc = _ida_domain.SPARC_andncc

SPARC_b = _ida_domain.SPARC_b

SPARC_bp = _ida_domain.SPARC_bp

SPARC_bpr = _ida_domain.SPARC_bpr

SPARC_call = _ida_domain.SPARC_call

SPARC_casa = _ida_domain.SPARC_casa

SPARC_casxa = _ida_domain.SPARC_casxa

SPARC_done = _ida_domain.SPARC_done

SPARC_fabs = _ida_domain.SPARC_fabs

SPARC_fadd = _ida_domain.SPARC_fadd

SPARC_fbp = _ida_domain.SPARC_fbp

SPARC_fb = _ida_domain.SPARC_fb

SPARC_fcmp = _ida_domain.SPARC_fcmp

SPARC_fcmpe = _ida_domain.SPARC_fcmpe

SPARC_fdiv = _ida_domain.SPARC_fdiv

SPARC_fdmulq = _ida_domain.SPARC_fdmulq

SPARC_flush = _ida_domain.SPARC_flush

SPARC_flushw = _ida_domain.SPARC_flushw

SPARC_fmov = _ida_domain.SPARC_fmov

SPARC_fmovcc = _ida_domain.SPARC_fmovcc

SPARC_fmovr = _ida_domain.SPARC_fmovr

SPARC_fmul = _ida_domain.SPARC_fmul

SPARC_fneg = _ida_domain.SPARC_fneg

SPARC_fsmuld = _ida_domain.SPARC_fsmuld

SPARC_fsqrt = _ida_domain.SPARC_fsqrt

SPARC_fsub = _ida_domain.SPARC_fsub

SPARC_fstox = _ida_domain.SPARC_fstox

SPARC_fdtox = _ida_domain.SPARC_fdtox

SPARC_fqtox = _ida_domain.SPARC_fqtox

SPARC_fxtos = _ida_domain.SPARC_fxtos

SPARC_fxtod = _ida_domain.SPARC_fxtod

SPARC_fxtoq = _ida_domain.SPARC_fxtoq

SPARC_fitos = _ida_domain.SPARC_fitos

SPARC_fdtos = _ida_domain.SPARC_fdtos

SPARC_fqtos = _ida_domain.SPARC_fqtos

SPARC_fitod = _ida_domain.SPARC_fitod

SPARC_fstod = _ida_domain.SPARC_fstod

SPARC_fqtod = _ida_domain.SPARC_fqtod

SPARC_fitoq = _ida_domain.SPARC_fitoq

SPARC_fstoq = _ida_domain.SPARC_fstoq

SPARC_fdtoq = _ida_domain.SPARC_fdtoq

SPARC_fstoi = _ida_domain.SPARC_fstoi

SPARC_fdtoi = _ida_domain.SPARC_fdtoi

SPARC_fqtoi = _ida_domain.SPARC_fqtoi

SPARC_illtrap = _ida_domain.SPARC_illtrap

SPARC_impdep1 = _ida_domain.SPARC_impdep1

SPARC_impdep2 = _ida_domain.SPARC_impdep2

SPARC_jmpl = _ida_domain.SPARC_jmpl

SPARC_ldd = _ida_domain.SPARC_ldd

SPARC_ldda = _ida_domain.SPARC_ldda

SPARC_lddf = _ida_domain.SPARC_lddf

SPARC_lddfa = _ida_domain.SPARC_lddfa

SPARC_ldf = _ida_domain.SPARC_ldf

SPARC_ldfa = _ida_domain.SPARC_ldfa

SPARC_ldfsr = _ida_domain.SPARC_ldfsr

SPARC_ldqf = _ida_domain.SPARC_ldqf

SPARC_ldqfa = _ida_domain.SPARC_ldqfa

SPARC_ldsb = _ida_domain.SPARC_ldsb

SPARC_ldsba = _ida_domain.SPARC_ldsba

SPARC_ldsh = _ida_domain.SPARC_ldsh

SPARC_ldsha = _ida_domain.SPARC_ldsha

SPARC_ldstub = _ida_domain.SPARC_ldstub

SPARC_ldstuba = _ida_domain.SPARC_ldstuba

SPARC_ldsw = _ida_domain.SPARC_ldsw

SPARC_ldswa = _ida_domain.SPARC_ldswa

SPARC_ldub = _ida_domain.SPARC_ldub

SPARC_lduba = _ida_domain.SPARC_lduba

SPARC_lduh = _ida_domain.SPARC_lduh

SPARC_lduha = _ida_domain.SPARC_lduha

SPARC_lduw = _ida_domain.SPARC_lduw

SPARC_lduwa = _ida_domain.SPARC_lduwa

SPARC_ldx = _ida_domain.SPARC_ldx

SPARC_ldxa = _ida_domain.SPARC_ldxa

SPARC_ldxfsr = _ida_domain.SPARC_ldxfsr

SPARC_membar = _ida_domain.SPARC_membar

SPARC_mov = _ida_domain.SPARC_mov

SPARC_movr = _ida_domain.SPARC_movr

SPARC_mulscc = _ida_domain.SPARC_mulscc

SPARC_mulx = _ida_domain.SPARC_mulx

SPARC_nop = _ida_domain.SPARC_nop

SPARC_or = _ida_domain.SPARC_or

SPARC_orcc = _ida_domain.SPARC_orcc

SPARC_orn = _ida_domain.SPARC_orn

SPARC_orncc = _ida_domain.SPARC_orncc

SPARC_popc = _ida_domain.SPARC_popc

SPARC_prefetch = _ida_domain.SPARC_prefetch

SPARC_prefetcha = _ida_domain.SPARC_prefetcha

SPARC_rd = _ida_domain.SPARC_rd

SPARC_rdpr = _ida_domain.SPARC_rdpr

SPARC_restore = _ida_domain.SPARC_restore

SPARC_restored = _ida_domain.SPARC_restored

SPARC_retry = _ida_domain.SPARC_retry

SPARC_return = _ida_domain.SPARC_return

SPARC_save = _ida_domain.SPARC_save

SPARC_saved = _ida_domain.SPARC_saved

SPARC_sdiv = _ida_domain.SPARC_sdiv

SPARC_sdivcc = _ida_domain.SPARC_sdivcc

SPARC_sdivx = _ida_domain.SPARC_sdivx

SPARC_sethi = _ida_domain.SPARC_sethi

SPARC_sir = _ida_domain.SPARC_sir

SPARC_sll = _ida_domain.SPARC_sll

SPARC_sllx = _ida_domain.SPARC_sllx

SPARC_smul = _ida_domain.SPARC_smul

SPARC_smulcc = _ida_domain.SPARC_smulcc

SPARC_sra = _ida_domain.SPARC_sra

SPARC_srax = _ida_domain.SPARC_srax

SPARC_srl = _ida_domain.SPARC_srl

SPARC_srlx = _ida_domain.SPARC_srlx

SPARC_stb = _ida_domain.SPARC_stb

SPARC_stba = _ida_domain.SPARC_stba

SPARC_stbar = _ida_domain.SPARC_stbar

SPARC_std = _ida_domain.SPARC_std

SPARC_stda = _ida_domain.SPARC_stda

SPARC_stdf = _ida_domain.SPARC_stdf

SPARC_stdfa = _ida_domain.SPARC_stdfa

SPARC_stf = _ida_domain.SPARC_stf

SPARC_stfa = _ida_domain.SPARC_stfa

SPARC_stfsr = _ida_domain.SPARC_stfsr

SPARC_sth = _ida_domain.SPARC_sth

SPARC_stha = _ida_domain.SPARC_stha

SPARC_stqf = _ida_domain.SPARC_stqf

SPARC_stqfa = _ida_domain.SPARC_stqfa

SPARC_stw = _ida_domain.SPARC_stw

SPARC_stwa = _ida_domain.SPARC_stwa

SPARC_stx = _ida_domain.SPARC_stx

SPARC_stxa = _ida_domain.SPARC_stxa

SPARC_stxfsr = _ida_domain.SPARC_stxfsr

SPARC_sub = _ida_domain.SPARC_sub

SPARC_subcc = _ida_domain.SPARC_subcc

SPARC_subc = _ida_domain.SPARC_subc

SPARC_subccc = _ida_domain.SPARC_subccc

SPARC_swap = _ida_domain.SPARC_swap

SPARC_swapa = _ida_domain.SPARC_swapa

SPARC_taddcc = _ida_domain.SPARC_taddcc

SPARC_taddcctv = _ida_domain.SPARC_taddcctv

SPARC_tsubcc = _ida_domain.SPARC_tsubcc

SPARC_tsubcctv = _ida_domain.SPARC_tsubcctv

SPARC_t = _ida_domain.SPARC_t

SPARC_udiv = _ida_domain.SPARC_udiv

SPARC_udivcc = _ida_domain.SPARC_udivcc

SPARC_udivx = _ida_domain.SPARC_udivx

SPARC_umul = _ida_domain.SPARC_umul

SPARC_umulcc = _ida_domain.SPARC_umulcc

SPARC_wr = _ida_domain.SPARC_wr

SPARC_wrpr = _ida_domain.SPARC_wrpr

SPARC_xnor = _ida_domain.SPARC_xnor

SPARC_xnorcc = _ida_domain.SPARC_xnorcc

SPARC_xor = _ida_domain.SPARC_xor

SPARC_xorcc = _ida_domain.SPARC_xorcc

SPARC_cmp = _ida_domain.SPARC_cmp

SPARC_jmp = _ida_domain.SPARC_jmp

SPARC_iprefetch = _ida_domain.SPARC_iprefetch

SPARC_tst = _ida_domain.SPARC_tst

SPARC_ret = _ida_domain.SPARC_ret

SPARC_retl = _ida_domain.SPARC_retl

SPARC_setuw = _ida_domain.SPARC_setuw

SPARC_setsw = _ida_domain.SPARC_setsw

SPARC_setx = _ida_domain.SPARC_setx

SPARC_signx = _ida_domain.SPARC_signx

SPARC_not = _ida_domain.SPARC_not

SPARC_neg = _ida_domain.SPARC_neg

SPARC_cas = _ida_domain.SPARC_cas

SPARC_casl = _ida_domain.SPARC_casl

SPARC_casx = _ida_domain.SPARC_casx

SPARC_casxl = _ida_domain.SPARC_casxl

SPARC_inc = _ida_domain.SPARC_inc

SPARC_inccc = _ida_domain.SPARC_inccc

SPARC_dec = _ida_domain.SPARC_dec

SPARC_deccc = _ida_domain.SPARC_deccc

SPARC_btst = _ida_domain.SPARC_btst

SPARC_bset = _ida_domain.SPARC_bset

SPARC_bclr = _ida_domain.SPARC_bclr

SPARC_btog = _ida_domain.SPARC_btog

SPARC_clr = _ida_domain.SPARC_clr

SPARC_clrb = _ida_domain.SPARC_clrb

SPARC_clrh = _ida_domain.SPARC_clrh

SPARC_clrx = _ida_domain.SPARC_clrx

SPARC_clruw = _ida_domain.SPARC_clruw

SPARC_pseudo_mov = _ida_domain.SPARC_pseudo_mov

SPARC_alignaddress = _ida_domain.SPARC_alignaddress

SPARC_array = _ida_domain.SPARC_array

SPARC_edge = _ida_domain.SPARC_edge

SPARC_faligndata = _ida_domain.SPARC_faligndata

SPARC_fandnot1 = _ida_domain.SPARC_fandnot1

SPARC_fandnot2 = _ida_domain.SPARC_fandnot2

SPARC_fand = _ida_domain.SPARC_fand

SPARC_fcmpeq = _ida_domain.SPARC_fcmpeq

SPARC_fcmpgt = _ida_domain.SPARC_fcmpgt

SPARC_fcmple = _ida_domain.SPARC_fcmple

SPARC_fcmpne = _ida_domain.SPARC_fcmpne

SPARC_fexpand = _ida_domain.SPARC_fexpand

SPARC_fmul8sux16 = _ida_domain.SPARC_fmul8sux16

SPARC_fmul8ulx16 = _ida_domain.SPARC_fmul8ulx16

SPARC_fmul8x16 = _ida_domain.SPARC_fmul8x16

SPARC_fmul8x16al = _ida_domain.SPARC_fmul8x16al

SPARC_fmul8x16au = _ida_domain.SPARC_fmul8x16au

SPARC_fmuld8sux16 = _ida_domain.SPARC_fmuld8sux16

SPARC_fmuld8ulx16 = _ida_domain.SPARC_fmuld8ulx16

SPARC_fnand = _ida_domain.SPARC_fnand

SPARC_fnor = _ida_domain.SPARC_fnor

SPARC_fnot1 = _ida_domain.SPARC_fnot1

SPARC_fnot2 = _ida_domain.SPARC_fnot2

SPARC_fone = _ida_domain.SPARC_fone

SPARC_fornot1 = _ida_domain.SPARC_fornot1

SPARC_fornot2 = _ida_domain.SPARC_fornot2

SPARC_for = _ida_domain.SPARC_for

SPARC_fpackfix = _ida_domain.SPARC_fpackfix

SPARC_fpack = _ida_domain.SPARC_fpack

SPARC_fpadd = _ida_domain.SPARC_fpadd

SPARC_fpmerge = _ida_domain.SPARC_fpmerge

SPARC_fpsub = _ida_domain.SPARC_fpsub

SPARC_fsrc1 = _ida_domain.SPARC_fsrc1

SPARC_fsrc2 = _ida_domain.SPARC_fsrc2

SPARC_fxnor = _ida_domain.SPARC_fxnor

SPARC_fxor = _ida_domain.SPARC_fxor

SPARC_fzero = _ida_domain.SPARC_fzero

SPARC_pdist = _ida_domain.SPARC_pdist

SPARC_shutdown = _ida_domain.SPARC_shutdown

SPARC_rett = _ida_domain.SPARC_rett

SPARC_bmask = _ida_domain.SPARC_bmask

SPARC_bshuffle = _ida_domain.SPARC_bshuffle

SPARC_edgen = _ida_domain.SPARC_edgen

SPARC_rdhpr = _ida_domain.SPARC_rdhpr

SPARC_wrhpr = _ida_domain.SPARC_wrhpr

SPARC_siam = _ida_domain.SPARC_siam

SPARC_last = _ida_domain.SPARC_last

HPPA_null = _ida_domain.HPPA_null

HPPA_add = _ida_domain.HPPA_add

HPPA_addb = _ida_domain.HPPA_addb

HPPA_addi = _ida_domain.HPPA_addi

HPPA_addib = _ida_domain.HPPA_addib

HPPA_addil = _ida_domain.HPPA_addil

HPPA_and = _ida_domain.HPPA_and

HPPA_andcm = _ida_domain.HPPA_andcm

HPPA_b = _ida_domain.HPPA_b

HPPA_bb = _ida_domain.HPPA_bb

HPPA_be = _ida_domain.HPPA_be

HPPA_blr = _ida_domain.HPPA_blr

HPPA_break = _ida_domain.HPPA_break

HPPA_bv = _ida_domain.HPPA_bv

HPPA_bve = _ida_domain.HPPA_bve

HPPA_cldd = _ida_domain.HPPA_cldd

HPPA_cldw = _ida_domain.HPPA_cldw

HPPA_clrbts = _ida_domain.HPPA_clrbts

HPPA_cmpb = _ida_domain.HPPA_cmpb

HPPA_cmpclr = _ida_domain.HPPA_cmpclr

HPPA_cmpib = _ida_domain.HPPA_cmpib

HPPA_cmpiclr = _ida_domain.HPPA_cmpiclr

HPPA_copr = _ida_domain.HPPA_copr

HPPA_cstd = _ida_domain.HPPA_cstd

HPPA_cstw = _ida_domain.HPPA_cstw

HPPA_dcor = _ida_domain.HPPA_dcor

HPPA_depd = _ida_domain.HPPA_depd

HPPA_depdi = _ida_domain.HPPA_depdi

HPPA_depw = _ida_domain.HPPA_depw

HPPA_depwi = _ida_domain.HPPA_depwi

HPPA_diag = _ida_domain.HPPA_diag

HPPA_ds = _ida_domain.HPPA_ds

HPPA_extrd = _ida_domain.HPPA_extrd

HPPA_extrw = _ida_domain.HPPA_extrw

HPPA_fdc = _ida_domain.HPPA_fdc

HPPA_fdce = _ida_domain.HPPA_fdce

HPPA_fic = _ida_domain.HPPA_fic

HPPA_fice = _ida_domain.HPPA_fice

HPPA_hadd = _ida_domain.HPPA_hadd

HPPA_havg = _ida_domain.HPPA_havg

HPPA_hshl = _ida_domain.HPPA_hshl

HPPA_hshladd = _ida_domain.HPPA_hshladd

HPPA_hshr = _ida_domain.HPPA_hshr

HPPA_hshradd = _ida_domain.HPPA_hshradd

HPPA_hsub = _ida_domain.HPPA_hsub

HPPA_idtlbt = _ida_domain.HPPA_idtlbt

HPPA_iitlbt = _ida_domain.HPPA_iitlbt

HPPA_lci = _ida_domain.HPPA_lci

HPPA_ldb = _ida_domain.HPPA_ldb

HPPA_ldcd = _ida_domain.HPPA_ldcd

HPPA_ldcw = _ida_domain.HPPA_ldcw

HPPA_ldd = _ida_domain.HPPA_ldd

HPPA_ldda = _ida_domain.HPPA_ldda

HPPA_ldh = _ida_domain.HPPA_ldh

HPPA_ldil = _ida_domain.HPPA_ldil

HPPA_ldo = _ida_domain.HPPA_ldo

HPPA_ldsid = _ida_domain.HPPA_ldsid

HPPA_ldw = _ida_domain.HPPA_ldw

HPPA_ldwa = _ida_domain.HPPA_ldwa

HPPA_lpa = _ida_domain.HPPA_lpa

HPPA_mfctl = _ida_domain.HPPA_mfctl

HPPA_mfia = _ida_domain.HPPA_mfia

HPPA_mfsp = _ida_domain.HPPA_mfsp

HPPA_mixh = _ida_domain.HPPA_mixh

HPPA_mixw = _ida_domain.HPPA_mixw

HPPA_movb = _ida_domain.HPPA_movb

HPPA_movib = _ida_domain.HPPA_movib

HPPA_mtctl = _ida_domain.HPPA_mtctl

HPPA_mtsarcm = _ida_domain.HPPA_mtsarcm

HPPA_mtsm = _ida_domain.HPPA_mtsm

HPPA_mtsp = _ida_domain.HPPA_mtsp

HPPA_or = _ida_domain.HPPA_or

HPPA_pdc = _ida_domain.HPPA_pdc

HPPA_pdtlb = _ida_domain.HPPA_pdtlb

HPPA_pdtlbe = _ida_domain.HPPA_pdtlbe

HPPA_permh = _ida_domain.HPPA_permh

HPPA_pitlb = _ida_domain.HPPA_pitlb

HPPA_pitlbe = _ida_domain.HPPA_pitlbe

HPPA_popbts = _ida_domain.HPPA_popbts

HPPA_probe = _ida_domain.HPPA_probe

HPPA_probei = _ida_domain.HPPA_probei

HPPA_pushbts = _ida_domain.HPPA_pushbts

HPPA_pushnom = _ida_domain.HPPA_pushnom

HPPA_rfi = _ida_domain.HPPA_rfi

HPPA_rsm = _ida_domain.HPPA_rsm

HPPA_shladd = _ida_domain.HPPA_shladd

HPPA_shrpd = _ida_domain.HPPA_shrpd

HPPA_shrpw = _ida_domain.HPPA_shrpw

HPPA_spop0 = _ida_domain.HPPA_spop0

HPPA_spop1 = _ida_domain.HPPA_spop1

HPPA_spop2 = _ida_domain.HPPA_spop2

HPPA_spop3 = _ida_domain.HPPA_spop3

HPPA_ssm = _ida_domain.HPPA_ssm

HPPA_stb = _ida_domain.HPPA_stb

HPPA_stby = _ida_domain.HPPA_stby

HPPA_std = _ida_domain.HPPA_std

HPPA_stda = _ida_domain.HPPA_stda

HPPA_stdby = _ida_domain.HPPA_stdby

HPPA_sth = _ida_domain.HPPA_sth

HPPA_stw = _ida_domain.HPPA_stw

HPPA_stwa = _ida_domain.HPPA_stwa

HPPA_sub = _ida_domain.HPPA_sub

HPPA_subi = _ida_domain.HPPA_subi

HPPA_sync = _ida_domain.HPPA_sync

HPPA_syncdma = _ida_domain.HPPA_syncdma

HPPA_uaddcm = _ida_domain.HPPA_uaddcm

HPPA_uxor = _ida_domain.HPPA_uxor

HPPA_xor = _ida_domain.HPPA_xor

HPPA_fabs = _ida_domain.HPPA_fabs

HPPA_fadd = _ida_domain.HPPA_fadd

HPPA_fcmp = _ida_domain.HPPA_fcmp

HPPA_fcnv = _ida_domain.HPPA_fcnv

HPPA_fcpy = _ida_domain.HPPA_fcpy

HPPA_fdiv = _ida_domain.HPPA_fdiv

HPPA_fid = _ida_domain.HPPA_fid

HPPA_fldd = _ida_domain.HPPA_fldd

HPPA_fldw = _ida_domain.HPPA_fldw

HPPA_fmpy = _ida_domain.HPPA_fmpy

HPPA_fmpyadd = _ida_domain.HPPA_fmpyadd

HPPA_fmpyfadd = _ida_domain.HPPA_fmpyfadd

HPPA_fmpynfadd = _ida_domain.HPPA_fmpynfadd

HPPA_fmpysub = _ida_domain.HPPA_fmpysub

HPPA_fneg = _ida_domain.HPPA_fneg

HPPA_fnegabs = _ida_domain.HPPA_fnegabs

HPPA_frem = _ida_domain.HPPA_frem

HPPA_frnd = _ida_domain.HPPA_frnd

HPPA_fsqrt = _ida_domain.HPPA_fsqrt

HPPA_fstd = _ida_domain.HPPA_fstd

HPPA_fstw = _ida_domain.HPPA_fstw

HPPA_fsub = _ida_domain.HPPA_fsub

HPPA_ftest = _ida_domain.HPPA_ftest

HPPA_xmpyu = _ida_domain.HPPA_xmpyu

HPPA_pmdis = _ida_domain.HPPA_pmdis

HPPA_pmenb = _ida_domain.HPPA_pmenb

HPPA_call = _ida_domain.HPPA_call

HPPA_ret = _ida_domain.HPPA_ret

HPPA_shld = _ida_domain.HPPA_shld

HPPA_shlw = _ida_domain.HPPA_shlw

HPPA_shrd = _ida_domain.HPPA_shrd

HPPA_shrw = _ida_domain.HPPA_shrw

HPPA_ldi = _ida_domain.HPPA_ldi

HPPA_copy = _ida_domain.HPPA_copy

HPPA_mtsar = _ida_domain.HPPA_mtsar

HPPA_nop = _ida_domain.HPPA_nop

HPPA_last = _ida_domain.HPPA_last

H8500_null = _ida_domain.H8500_null

H8500_mov_g = _ida_domain.H8500_mov_g

H8500_mov_e = _ida_domain.H8500_mov_e

H8500_mov_i = _ida_domain.H8500_mov_i

H8500_mov_f = _ida_domain.H8500_mov_f

H8500_mov_l = _ida_domain.H8500_mov_l

H8500_mov_s = _ida_domain.H8500_mov_s

H8500_ldm = _ida_domain.H8500_ldm

H8500_stm = _ida_domain.H8500_stm

H8500_xch = _ida_domain.H8500_xch

H8500_swap = _ida_domain.H8500_swap

H8500_movtpe = _ida_domain.H8500_movtpe

H8500_movfpe = _ida_domain.H8500_movfpe

H8500_add_g = _ida_domain.H8500_add_g

H8500_add_q = _ida_domain.H8500_add_q

H8500_sub = _ida_domain.H8500_sub

H8500_adds = _ida_domain.H8500_adds

H8500_subs = _ida_domain.H8500_subs

H8500_addx = _ida_domain.H8500_addx

H8500_subx = _ida_domain.H8500_subx

H8500_dadd = _ida_domain.H8500_dadd

H8500_dsub = _ida_domain.H8500_dsub

H8500_mulxu = _ida_domain.H8500_mulxu

H8500_divxu = _ida_domain.H8500_divxu

H8500_cmp_g = _ida_domain.H8500_cmp_g

H8500_cmp_e = _ida_domain.H8500_cmp_e

H8500_cmp_i = _ida_domain.H8500_cmp_i

H8500_exts = _ida_domain.H8500_exts

H8500_extu = _ida_domain.H8500_extu

H8500_tst = _ida_domain.H8500_tst

H8500_neg = _ida_domain.H8500_neg

H8500_clr = _ida_domain.H8500_clr

H8500_tas = _ida_domain.H8500_tas

H8500_and = _ida_domain.H8500_and

H8500_or = _ida_domain.H8500_or

H8500_xor = _ida_domain.H8500_xor

H8500_not = _ida_domain.H8500_not

H8500_shal = _ida_domain.H8500_shal

H8500_shar = _ida_domain.H8500_shar

H8500_shll = _ida_domain.H8500_shll

H8500_shlr = _ida_domain.H8500_shlr

H8500_rotl = _ida_domain.H8500_rotl

H8500_rotr = _ida_domain.H8500_rotr

H8500_rotxl = _ida_domain.H8500_rotxl

H8500_rotxr = _ida_domain.H8500_rotxr

H8500_bset = _ida_domain.H8500_bset

H8500_bclr = _ida_domain.H8500_bclr

H8500_bnot = _ida_domain.H8500_bnot

H8500_btst = _ida_domain.H8500_btst

H8500_bra = _ida_domain.H8500_bra

H8500_brn = _ida_domain.H8500_brn

H8500_bhi = _ida_domain.H8500_bhi

H8500_bls = _ida_domain.H8500_bls

H8500_bcc = _ida_domain.H8500_bcc

H8500_bcs = _ida_domain.H8500_bcs

H8500_bne = _ida_domain.H8500_bne

H8500_beq = _ida_domain.H8500_beq

H8500_bvc = _ida_domain.H8500_bvc

H8500_bvs = _ida_domain.H8500_bvs

H8500_bpl = _ida_domain.H8500_bpl

H8500_bmi = _ida_domain.H8500_bmi

H8500_bge = _ida_domain.H8500_bge

H8500_blt = _ida_domain.H8500_blt

H8500_bgt = _ida_domain.H8500_bgt

H8500_ble = _ida_domain.H8500_ble

H8500_jmp = _ida_domain.H8500_jmp

H8500_pjmp = _ida_domain.H8500_pjmp

H8500_bsr = _ida_domain.H8500_bsr

H8500_jsr = _ida_domain.H8500_jsr

H8500_pjsr = _ida_domain.H8500_pjsr

H8500_rts = _ida_domain.H8500_rts

H8500_prts = _ida_domain.H8500_prts

H8500_rtd = _ida_domain.H8500_rtd

H8500_prtd = _ida_domain.H8500_prtd

H8500_scb = _ida_domain.H8500_scb

H8500_trapa = _ida_domain.H8500_trapa

H8500_trap_vs = _ida_domain.H8500_trap_vs

H8500_rte = _ida_domain.H8500_rte

H8500_link = _ida_domain.H8500_link

H8500_unlk = _ida_domain.H8500_unlk

H8500_sleep = _ida_domain.H8500_sleep

H8500_ldc = _ida_domain.H8500_ldc

H8500_stc = _ida_domain.H8500_stc

H8500_andc = _ida_domain.H8500_andc

H8500_orc = _ida_domain.H8500_orc

H8500_xorc = _ida_domain.H8500_xorc

H8500_nop = _ida_domain.H8500_nop

H8500_bpt = _ida_domain.H8500_bpt

H8500_last = _ida_domain.H8500_last

DSP56_null = _ida_domain.DSP56_null

DSP56_abs = _ida_domain.DSP56_abs

DSP56_adc = _ida_domain.DSP56_adc

DSP56_add = _ida_domain.DSP56_add

DSP56_addl = _ida_domain.DSP56_addl

DSP56_addr = _ida_domain.DSP56_addr

DSP56_and = _ida_domain.DSP56_and

DSP56_andi = _ida_domain.DSP56_andi

DSP56_asl = _ida_domain.DSP56_asl

DSP56_asl4 = _ida_domain.DSP56_asl4

DSP56_asr = _ida_domain.DSP56_asr

DSP56_asr4 = _ida_domain.DSP56_asr4

DSP56_asr16 = _ida_domain.DSP56_asr16

DSP56_bfchg = _ida_domain.DSP56_bfchg

DSP56_bfclr = _ida_domain.DSP56_bfclr

DSP56_bfset = _ida_domain.DSP56_bfset

DSP56_bftsth = _ida_domain.DSP56_bftsth

DSP56_bftstl = _ida_domain.DSP56_bftstl

DSP56_bcc = _ida_domain.DSP56_bcc

DSP56_bchg = _ida_domain.DSP56_bchg

DSP56_bclr = _ida_domain.DSP56_bclr

DSP56_bra = _ida_domain.DSP56_bra

DSP56_brclr = _ida_domain.DSP56_brclr

DSP56_brkcc = _ida_domain.DSP56_brkcc

DSP56_brset = _ida_domain.DSP56_brset

DSP56_bscc = _ida_domain.DSP56_bscc

DSP56_bsclr = _ida_domain.DSP56_bsclr

DSP56_bset = _ida_domain.DSP56_bset

DSP56_bsr = _ida_domain.DSP56_bsr

DSP56_bsset = _ida_domain.DSP56_bsset

DSP56_btst = _ida_domain.DSP56_btst

DSP56_chkaau = _ida_domain.DSP56_chkaau

DSP56_clb = _ida_domain.DSP56_clb

DSP56_clr = _ida_domain.DSP56_clr

DSP56_clr24 = _ida_domain.DSP56_clr24

DSP56_cmp = _ida_domain.DSP56_cmp

DSP56_cmpm = _ida_domain.DSP56_cmpm

DSP56_cmpu = _ida_domain.DSP56_cmpu

DSP56_debug = _ida_domain.DSP56_debug

DSP56_debugcc = _ida_domain.DSP56_debugcc

DSP56_dec = _ida_domain.DSP56_dec

DSP56_dec24 = _ida_domain.DSP56_dec24

DSP56_div = _ida_domain.DSP56_div

DSP56_dmac = _ida_domain.DSP56_dmac

DSP56_do = _ida_domain.DSP56_do

DSP56_do_f = _ida_domain.DSP56_do_f

DSP56_dor = _ida_domain.DSP56_dor

DSP56_dor_f = _ida_domain.DSP56_dor_f

DSP56_enddo = _ida_domain.DSP56_enddo

DSP56_eor = _ida_domain.DSP56_eor

DSP56_extract = _ida_domain.DSP56_extract

DSP56_extractu = _ida_domain.DSP56_extractu

DSP56_ext = _ida_domain.DSP56_ext

DSP56_ill = _ida_domain.DSP56_ill

DSP56_imac = _ida_domain.DSP56_imac

DSP56_impy = _ida_domain.DSP56_impy

DSP56_inc = _ida_domain.DSP56_inc

DSP56_inc24 = _ida_domain.DSP56_inc24

DSP56_insert = _ida_domain.DSP56_insert

DSP56_jcc = _ida_domain.DSP56_jcc

DSP56_jclr = _ida_domain.DSP56_jclr

DSP56_jmp = _ida_domain.DSP56_jmp

DSP56_jscc = _ida_domain.DSP56_jscc

DSP56_jsclr = _ida_domain.DSP56_jsclr

DSP56_jset = _ida_domain.DSP56_jset

DSP56_jsr = _ida_domain.DSP56_jsr

DSP56_jsset = _ida_domain.DSP56_jsset

DSP56_lra = _ida_domain.DSP56_lra

DSP56_lsl = _ida_domain.DSP56_lsl

DSP56_lsr = _ida_domain.DSP56_lsr

DSP56_lua = _ida_domain.DSP56_lua

DSP56_lea = _ida_domain.DSP56_lea

DSP56_mac = _ida_domain.DSP56_mac

DSP56_maci = _ida_domain.DSP56_maci

DSP56_mac_s_u = _ida_domain.DSP56_mac_s_u

DSP56_macr = _ida_domain.DSP56_macr

DSP56_macri = _ida_domain.DSP56_macri

DSP56_max = _ida_domain.DSP56_max

DSP56_maxm = _ida_domain.DSP56_maxm

DSP56_merge = _ida_domain.DSP56_merge

DSP56_move = _ida_domain.DSP56_move

DSP56_movec = _ida_domain.DSP56_movec

DSP56_movei = _ida_domain.DSP56_movei

DSP56_movem = _ida_domain.DSP56_movem

DSP56_movep = _ida_domain.DSP56_movep

DSP56_moves = _ida_domain.DSP56_moves

DSP56_mpy = _ida_domain.DSP56_mpy

DSP56_mpyi = _ida_domain.DSP56_mpyi

DSP56_mpy_s_u = _ida_domain.DSP56_mpy_s_u

DSP56_mpyr = _ida_domain.DSP56_mpyr

DSP56_mpyri = _ida_domain.DSP56_mpyri

DSP56_neg = _ida_domain.DSP56_neg

DSP56_negc = _ida_domain.DSP56_negc

DSP56_nop = _ida_domain.DSP56_nop

DSP56_norm = _ida_domain.DSP56_norm

DSP56_normf = _ida_domain.DSP56_normf

DSP56_not = _ida_domain.DSP56_not

DSP56_or = _ida_domain.DSP56_or

DSP56_ori = _ida_domain.DSP56_ori

DSP56_pflush = _ida_domain.DSP56_pflush

DSP56_pflushun = _ida_domain.DSP56_pflushun

DSP56_pfree = _ida_domain.DSP56_pfree

DSP56_plock = _ida_domain.DSP56_plock

DSP56_plockr = _ida_domain.DSP56_plockr

DSP56_punlock = _ida_domain.DSP56_punlock

DSP56_punlockr = _ida_domain.DSP56_punlockr

DSP56_rep = _ida_domain.DSP56_rep

DSP56_repcc = _ida_domain.DSP56_repcc

DSP56_reset = _ida_domain.DSP56_reset

DSP56_rnd = _ida_domain.DSP56_rnd

DSP56_rol = _ida_domain.DSP56_rol

DSP56_ror = _ida_domain.DSP56_ror

DSP56_rti = _ida_domain.DSP56_rti

DSP56_rts = _ida_domain.DSP56_rts

DSP56_sbc = _ida_domain.DSP56_sbc

DSP56_stop = _ida_domain.DSP56_stop

DSP56_sub = _ida_domain.DSP56_sub

DSP56_subl = _ida_domain.DSP56_subl

DSP56_subr = _ida_domain.DSP56_subr

DSP56_swap = _ida_domain.DSP56_swap

DSP56_tcc = _ida_domain.DSP56_tcc

DSP56_tfr = _ida_domain.DSP56_tfr

DSP56_tfr2 = _ida_domain.DSP56_tfr2

DSP56_tfr3 = _ida_domain.DSP56_tfr3

DSP56_trap = _ida_domain.DSP56_trap

DSP56_trapcc = _ida_domain.DSP56_trapcc

DSP56_tst = _ida_domain.DSP56_tst

DSP56_tst2 = _ida_domain.DSP56_tst2

DSP56_vsl = _ida_domain.DSP56_vsl

DSP56_wait = _ida_domain.DSP56_wait

DSP56_zero = _ida_domain.DSP56_zero

DSP56_swi = _ida_domain.DSP56_swi

DSP56_pmov = _ida_domain.DSP56_pmov

DSP56_last = _ida_domain.DSP56_last

DSP96_null = _ida_domain.DSP96_null

DSP96_abs = _ida_domain.DSP96_abs

DSP96_add = _ida_domain.DSP96_add

DSP96_addc = _ida_domain.DSP96_addc

DSP96_and = _ida_domain.DSP96_and

DSP96_andc = _ida_domain.DSP96_andc

DSP96_andi = _ida_domain.DSP96_andi

DSP96_asl = _ida_domain.DSP96_asl

DSP96_asr = _ida_domain.DSP96_asr

DSP96_bcc = _ida_domain.DSP96_bcc

DSP96_bccd = _ida_domain.DSP96_bccd

DSP96_bchg = _ida_domain.DSP96_bchg

DSP96_bclr = _ida_domain.DSP96_bclr

DSP96_bfind = _ida_domain.DSP96_bfind

DSP96_bra = _ida_domain.DSP96_bra

DSP96_brclr = _ida_domain.DSP96_brclr

DSP96_brset = _ida_domain.DSP96_brset

DSP96_bscc = _ida_domain.DSP96_bscc

DSP96_bsccd = _ida_domain.DSP96_bsccd

DSP96_bsclr = _ida_domain.DSP96_bsclr

DSP96_bset = _ida_domain.DSP96_bset

DSP96_bsr = _ida_domain.DSP96_bsr

DSP96_bsrd = _ida_domain.DSP96_bsrd

DSP96_bsset = _ida_domain.DSP96_bsset

DSP96_btst = _ida_domain.DSP96_btst

DSP96_clr = _ida_domain.DSP96_clr

DSP96_cmp = _ida_domain.DSP96_cmp

DSP96_cmpg = _ida_domain.DSP96_cmpg

DSP96_debugcc = _ida_domain.DSP96_debugcc

DSP96_dec = _ida_domain.DSP96_dec

DSP96_do = _ida_domain.DSP96_do

DSP96_dor = _ida_domain.DSP96_dor

DSP96_enddo = _ida_domain.DSP96_enddo

DSP96_eor = _ida_domain.DSP96_eor

DSP96_ext = _ida_domain.DSP96_ext

DSP96_extb = _ida_domain.DSP96_extb

DSP96_fabs = _ida_domain.DSP96_fabs

DSP96_fadd = _ida_domain.DSP96_fadd

DSP96_faddsub = _ida_domain.DSP96_faddsub

DSP96_fbcc = _ida_domain.DSP96_fbcc

DSP96_fbccd = _ida_domain.DSP96_fbccd

DSP96_fbscc = _ida_domain.DSP96_fbscc

DSP96_fbsccd = _ida_domain.DSP96_fbsccd

DSP96_fclr = _ida_domain.DSP96_fclr

DSP96_fcmp = _ida_domain.DSP96_fcmp

DSP96_fcmpg = _ida_domain.DSP96_fcmpg

DSP96_fcmpm = _ida_domain.DSP96_fcmpm

DSP96_fcopys = _ida_domain.DSP96_fcopys

DSP96_fdebugcc = _ida_domain.DSP96_fdebugcc

DSP96_fgetman = _ida_domain.DSP96_fgetman

DSP96_fint = _ida_domain.DSP96_fint

DSP96_fjcc = _ida_domain.DSP96_fjcc

DSP96_fjccd = _ida_domain.DSP96_fjccd

DSP96_fjscc = _ida_domain.DSP96_fjscc

DSP96_fjsccd = _ida_domain.DSP96_fjsccd

DSP96_float = _ida_domain.DSP96_float

DSP96_floatu = _ida_domain.DSP96_floatu

DSP96_floor = _ida_domain.DSP96_floor

DSP96_fmove = _ida_domain.DSP96_fmove

DSP96_fmpyfadd = _ida_domain.DSP96_fmpyfadd

DSP96_fmpyfaddsub = _ida_domain.DSP96_fmpyfaddsub

DSP96_fmpyfsub = _ida_domain.DSP96_fmpyfsub

DSP96_fmpy = _ida_domain.DSP96_fmpy

DSP96_fneg = _ida_domain.DSP96_fneg

DSP96_fscale = _ida_domain.DSP96_fscale

DSP96_fseedd = _ida_domain.DSP96_fseedd

DSP96_fseedr = _ida_domain.DSP96_fseedr

DSP96_fsub = _ida_domain.DSP96_fsub

DSP96_ftfr = _ida_domain.DSP96_ftfr

DSP96_ftrapcc = _ida_domain.DSP96_ftrapcc

DSP96_ftst = _ida_domain.DSP96_ftst

DSP96_getexp = _ida_domain.DSP96_getexp

DSP96_illegal = _ida_domain.DSP96_illegal

DSP96_inc = _ida_domain.DSP96_inc

DSP96_int = _ida_domain.DSP96_int

DSP96_intrz = _ida_domain.DSP96_intrz

DSP96_intu = _ida_domain.DSP96_intu

DSP96_inturz = _ida_domain.DSP96_inturz

DSP96_jcc = _ida_domain.DSP96_jcc

DSP96_jccd = _ida_domain.DSP96_jccd

DSP96_jclr = _ida_domain.DSP96_jclr

DSP96_join = _ida_domain.DSP96_join

DSP96_joinb = _ida_domain.DSP96_joinb

DSP96_jscc = _ida_domain.DSP96_jscc

DSP96_jsccd = _ida_domain.DSP96_jsccd

DSP96_jsclr = _ida_domain.DSP96_jsclr

DSP96_jset = _ida_domain.DSP96_jset

DSP96_jsset = _ida_domain.DSP96_jsset

DSP96_lea = _ida_domain.DSP96_lea

DSP96_lra = _ida_domain.DSP96_lra

DSP96_lsl = _ida_domain.DSP96_lsl

DSP96_lsr = _ida_domain.DSP96_lsr

DSP96_move = _ida_domain.DSP96_move

DSP96_movec = _ida_domain.DSP96_movec

DSP96_movei = _ida_domain.DSP96_movei

DSP96_movem = _ida_domain.DSP96_movem

DSP96_movep = _ida_domain.DSP96_movep

DSP96_moves = _ida_domain.DSP96_moves

DSP96_moveta = _ida_domain.DSP96_moveta

DSP96_mpys = _ida_domain.DSP96_mpys

DSP96_mpyu = _ida_domain.DSP96_mpyu

DSP96_neg = _ida_domain.DSP96_neg

DSP96_negc = _ida_domain.DSP96_negc

DSP96_nop = _ida_domain.DSP96_nop

DSP96_not = _ida_domain.DSP96_not

DSP96_or = _ida_domain.DSP96_or

DSP96_orc = _ida_domain.DSP96_orc

DSP96_ori = _ida_domain.DSP96_ori

DSP96_rep = _ida_domain.DSP96_rep

DSP96_reset = _ida_domain.DSP96_reset

DSP96_rol = _ida_domain.DSP96_rol

DSP96_ror = _ida_domain.DSP96_ror

DSP96_rti = _ida_domain.DSP96_rti

DSP96_rtr = _ida_domain.DSP96_rtr

DSP96_rts = _ida_domain.DSP96_rts

DSP96_setw = _ida_domain.DSP96_setw

DSP96_split = _ida_domain.DSP96_split

DSP96_splitb = _ida_domain.DSP96_splitb

DSP96_stop = _ida_domain.DSP96_stop

DSP96_sub = _ida_domain.DSP96_sub

DSP96_subc = _ida_domain.DSP96_subc

DSP96_tfr = _ida_domain.DSP96_tfr

DSP96_trapcc = _ida_domain.DSP96_trapcc

DSP96_tst = _ida_domain.DSP96_tst

DSP96_wait = _ida_domain.DSP96_wait

DSP96_last = _ida_domain.DSP96_last

PM96_NoMove = _ida_domain.PM96_NoMove

PM96_R2R = _ida_domain.PM96_R2R

PM96_Update = _ida_domain.PM96_Update

PM96_XYMem = _ida_domain.PM96_XYMem

PM96_XYmemR = _ida_domain.PM96_XYmemR

PM96_Long = _ida_domain.PM96_Long

PM96_XY = _ida_domain.PM96_XY

PM96_IFcc = _ida_domain.PM96_IFcc

C166_null = _ida_domain.C166_null

C166_add = _ida_domain.C166_add

C166_addb = _ida_domain.C166_addb

C166_addc = _ida_domain.C166_addc

C166_addcb = _ida_domain.C166_addcb

C166_and = _ida_domain.C166_and

C166_andb = _ida_domain.C166_andb

C166_ashr = _ida_domain.C166_ashr

C166_atomic = _ida_domain.C166_atomic

C166_band = _ida_domain.C166_band

C166_bclr = _ida_domain.C166_bclr

C166_bcmp = _ida_domain.C166_bcmp

C166_bfldh = _ida_domain.C166_bfldh

C166_bfldl = _ida_domain.C166_bfldl

C166_bmov = _ida_domain.C166_bmov

C166_bmovn = _ida_domain.C166_bmovn

C166_bor = _ida_domain.C166_bor

C166_bset = _ida_domain.C166_bset

C166_bxor = _ida_domain.C166_bxor

C166_calla = _ida_domain.C166_calla

C166_calli = _ida_domain.C166_calli

C166_callr = _ida_domain.C166_callr

C166_calls = _ida_domain.C166_calls

C166_cmp = _ida_domain.C166_cmp

C166_cmpb = _ida_domain.C166_cmpb

C166_cmpd1 = _ida_domain.C166_cmpd1

C166_cmpd2 = _ida_domain.C166_cmpd2

C166_cmpi1 = _ida_domain.C166_cmpi1

C166_cmpi2 = _ida_domain.C166_cmpi2

C166_cpl = _ida_domain.C166_cpl

C166_cplb = _ida_domain.C166_cplb

C166_diswdt = _ida_domain.C166_diswdt

C166_div = _ida_domain.C166_div

C166_divl = _ida_domain.C166_divl

C166_divlu = _ida_domain.C166_divlu

C166_divu = _ida_domain.C166_divu

C166_einit = _ida_domain.C166_einit

C166_extr = _ida_domain.C166_extr

C166_extp = _ida_domain.C166_extp

C166_extpr = _ida_domain.C166_extpr

C166_exts = _ida_domain.C166_exts

C166_extsr = _ida_domain.C166_extsr

C166_idle = _ida_domain.C166_idle

C166_jb = _ida_domain.C166_jb

C166_jbc = _ida_domain.C166_jbc

C166_jmpa = _ida_domain.C166_jmpa

C166_jmpi = _ida_domain.C166_jmpi

C166_jmpr = _ida_domain.C166_jmpr

C166_jmps = _ida_domain.C166_jmps

C166_jnb = _ida_domain.C166_jnb

C166_jnbs = _ida_domain.C166_jnbs

C166_mov = _ida_domain.C166_mov

C166_movb = _ida_domain.C166_movb

C166_movbs = _ida_domain.C166_movbs

C166_movbz = _ida_domain.C166_movbz

C166_mul = _ida_domain.C166_mul

C166_mulu = _ida_domain.C166_mulu

C166_neg = _ida_domain.C166_neg

C166_negb = _ida_domain.C166_negb

C166_nop = _ida_domain.C166_nop

C166_or = _ida_domain.C166_or

C166_orb = _ida_domain.C166_orb

C166_pcall = _ida_domain.C166_pcall

C166_pop = _ida_domain.C166_pop

C166_prior = _ida_domain.C166_prior

C166_push = _ida_domain.C166_push

C166_pwrdn = _ida_domain.C166_pwrdn

C166_ret = _ida_domain.C166_ret

C166_reti = _ida_domain.C166_reti

C166_retp = _ida_domain.C166_retp

C166_rets = _ida_domain.C166_rets

C166_rol = _ida_domain.C166_rol

C166_ror = _ida_domain.C166_ror

C166_scxt = _ida_domain.C166_scxt

C166_shl = _ida_domain.C166_shl

C166_shr = _ida_domain.C166_shr

C166_srst = _ida_domain.C166_srst

C166_srvwdt = _ida_domain.C166_srvwdt

C166_sub = _ida_domain.C166_sub

C166_subb = _ida_domain.C166_subb

C166_subc = _ida_domain.C166_subc

C166_subcb = _ida_domain.C166_subcb

C166_trap = _ida_domain.C166_trap

C166_xor = _ida_domain.C166_xor

C166_xorb = _ida_domain.C166_xorb

ST10_CoABS = _ida_domain.ST10_CoABS

ST10_CoADD = _ida_domain.ST10_CoADD

ST10_CoASHR = _ida_domain.ST10_CoASHR

ST10_CoCMP = _ida_domain.ST10_CoCMP

ST10_CoLOAD = _ida_domain.ST10_CoLOAD

ST10_CoMAC = _ida_domain.ST10_CoMAC

ST10_CoMACM = _ida_domain.ST10_CoMACM

ST10_CoMAX = _ida_domain.ST10_CoMAX

ST10_CoMIN = _ida_domain.ST10_CoMIN

ST10_CoMOV = _ida_domain.ST10_CoMOV

ST10_CoMUL = _ida_domain.ST10_CoMUL

ST10_CoNEG = _ida_domain.ST10_CoNEG

ST10_CoNOP = _ida_domain.ST10_CoNOP

ST10_CoRND = _ida_domain.ST10_CoRND

ST10_CoSHL = _ida_domain.ST10_CoSHL

ST10_CoSHR = _ida_domain.ST10_CoSHR

ST10_CoSTORE = _ida_domain.ST10_CoSTORE

ST10_CoSUB = _ida_domain.ST10_CoSUB

C166_enwdt = _ida_domain.C166_enwdt

C166_sbrk = _ida_domain.C166_sbrk

C166_last = _ida_domain.C166_last

ST20_null = _ida_domain.ST20_null

ST20_adc = _ida_domain.ST20_adc

ST20_add = _ida_domain.ST20_add

ST20_addc = _ida_domain.ST20_addc

ST20_ajw = _ida_domain.ST20_ajw

ST20_and = _ida_domain.ST20_and

ST20_arot = _ida_domain.ST20_arot

ST20_ashr = _ida_domain.ST20_ashr

ST20_biquad = _ida_domain.ST20_biquad

ST20_bitld = _ida_domain.ST20_bitld

ST20_bitmask = _ida_domain.ST20_bitmask

ST20_bitst = _ida_domain.ST20_bitst

ST20_breakpoint = _ida_domain.ST20_breakpoint

ST20_cj = _ida_domain.ST20_cj

ST20_dequeue = _ida_domain.ST20_dequeue

ST20_divstep = _ida_domain.ST20_divstep

ST20_dup = _ida_domain.ST20_dup

ST20_ecall = _ida_domain.ST20_ecall

ST20_enqueue = _ida_domain.ST20_enqueue

ST20_eqc = _ida_domain.ST20_eqc

ST20_eret = _ida_domain.ST20_eret

ST20_fcall = _ida_domain.ST20_fcall

ST20_gajw = _ida_domain.ST20_gajw

ST20_gt = _ida_domain.ST20_gt

ST20_gtu = _ida_domain.ST20_gtu

ST20_io = _ida_domain.ST20_io

ST20_j = _ida_domain.ST20_j

ST20_jab = _ida_domain.ST20_jab

ST20_lbinc = _ida_domain.ST20_lbinc

ST20_ldc = _ida_domain.ST20_ldc

ST20_ldl = _ida_domain.ST20_ldl

ST20_ldlp = _ida_domain.ST20_ldlp

ST20_ldnl = _ida_domain.ST20_ldnl

ST20_ldnlp = _ida_domain.ST20_ldnlp

ST20_ldpi = _ida_domain.ST20_ldpi

ST20_ldprodid = _ida_domain.ST20_ldprodid

ST20_ldtdesc = _ida_domain.ST20_ldtdesc

ST20_lsinc = _ida_domain.ST20_lsinc

ST20_lsxinc = _ida_domain.ST20_lsxinc

ST20_lwinc = _ida_domain.ST20_lwinc

ST20_mac = _ida_domain.ST20_mac

ST20_mul = _ida_domain.ST20_mul

ST20_nfix = _ida_domain.ST20_nfix

ST20_nop = _ida_domain.ST20_nop

ST20_not = _ida_domain.ST20_not

ST20_opr = _ida_domain.ST20_opr

ST20_or = _ida_domain.ST20_or

ST20_order = _ida_domain.ST20_order

ST20_orderu = _ida_domain.ST20_orderu

ST20_pfix = _ida_domain.ST20_pfix

ST20_rev = _ida_domain.ST20_rev

ST20_rmw = _ida_domain.ST20_rmw

ST20_rot = _ida_domain.ST20_rot

ST20_run = _ida_domain.ST20_run

ST20_saturate = _ida_domain.ST20_saturate

ST20_sbinc = _ida_domain.ST20_sbinc

ST20_shl = _ida_domain.ST20_shl

ST20_shr = _ida_domain.ST20_shr

ST20_signal = _ida_domain.ST20_signal

ST20_smacinit = _ida_domain.ST20_smacinit

ST20_smacloop = _ida_domain.ST20_smacloop

ST20_smul = _ida_domain.ST20_smul

ST20_ssinc = _ida_domain.ST20_ssinc

ST20_statusclr = _ida_domain.ST20_statusclr

ST20_statusset = _ida_domain.ST20_statusset

ST20_statustst = _ida_domain.ST20_statustst

ST20_stl = _ida_domain.ST20_stl

ST20_stnl = _ida_domain.ST20_stnl

ST20_stop = _ida_domain.ST20_stop

ST20_sub = _ida_domain.ST20_sub

ST20_subc = _ida_domain.ST20_subc

ST20_swap32 = _ida_domain.ST20_swap32

ST20_swinc = _ida_domain.ST20_swinc

ST20_timeslice = _ida_domain.ST20_timeslice

ST20_umac = _ida_domain.ST20_umac

ST20_unsign = _ida_domain.ST20_unsign

ST20_wait = _ida_domain.ST20_wait

ST20_wsub = _ida_domain.ST20_wsub

ST20_xbword = _ida_domain.ST20_xbword

ST20_xor = _ida_domain.ST20_xor

ST20_xsword = _ida_domain.ST20_xsword

ST20_alt = _ida_domain.ST20_alt

ST20_altend = _ida_domain.ST20_altend

ST20_altwt = _ida_domain.ST20_altwt

ST20_bcnt = _ida_domain.ST20_bcnt

ST20_bitcnt = _ida_domain.ST20_bitcnt

ST20_bitrevnbits = _ida_domain.ST20_bitrevnbits

ST20_bitrevword = _ida_domain.ST20_bitrevword

ST20_bsub = _ida_domain.ST20_bsub

ST20_call = _ida_domain.ST20_call

ST20_causeerror = _ida_domain.ST20_causeerror

ST20_cb = _ida_domain.ST20_cb

ST20_cbu = _ida_domain.ST20_cbu

ST20_ccnt1 = _ida_domain.ST20_ccnt1

ST20_cflerr = _ida_domain.ST20_cflerr

ST20_cir = _ida_domain.ST20_cir

ST20_ciru = _ida_domain.ST20_ciru

ST20_clockdis = _ida_domain.ST20_clockdis

ST20_clockenb = _ida_domain.ST20_clockenb

ST20_clrhalterr = _ida_domain.ST20_clrhalterr

ST20_crcbyte = _ida_domain.ST20_crcbyte

ST20_crcword = _ida_domain.ST20_crcword

ST20_cs = _ida_domain.ST20_cs

ST20_csngl = _ida_domain.ST20_csngl

ST20_csu = _ida_domain.ST20_csu

ST20_csub0 = _ida_domain.ST20_csub0

ST20_cword = _ida_domain.ST20_cword

ST20_devlb = _ida_domain.ST20_devlb

ST20_devls = _ida_domain.ST20_devls

ST20_devlw = _ida_domain.ST20_devlw

ST20_devmove = _ida_domain.ST20_devmove

ST20_devsb = _ida_domain.ST20_devsb

ST20_devss = _ida_domain.ST20_devss

ST20_devsw = _ida_domain.ST20_devsw

ST20_diff = _ida_domain.ST20_diff

ST20_disc = _ida_domain.ST20_disc

ST20_diss = _ida_domain.ST20_diss

ST20_dist = _ida_domain.ST20_dist

ST20_div = _ida_domain.ST20_div

ST20_enbc = _ida_domain.ST20_enbc

ST20_enbs = _ida_domain.ST20_enbs

ST20_enbt = _ida_domain.ST20_enbt

ST20_endp = _ida_domain.ST20_endp

ST20_fmul = _ida_domain.ST20_fmul

ST20_fptesterr = _ida_domain.ST20_fptesterr

ST20_gcall = _ida_domain.ST20_gcall

ST20_gintdis = _ida_domain.ST20_gintdis

ST20_gintenb = _ida_domain.ST20_gintenb

ST20_in = _ida_domain.ST20_in

ST20_insertqueue = _ida_domain.ST20_insertqueue

ST20_intdis = _ida_domain.ST20_intdis

ST20_intenb = _ida_domain.ST20_intenb

ST20_iret = _ida_domain.ST20_iret

ST20_ladd = _ida_domain.ST20_ladd

ST20_lb = _ida_domain.ST20_lb

ST20_lbx = _ida_domain.ST20_lbx

ST20_ldclock = _ida_domain.ST20_ldclock

ST20_lddevid = _ida_domain.ST20_lddevid

ST20_ldiff = _ida_domain.ST20_ldiff

ST20_ldinf = _ida_domain.ST20_ldinf

ST20_ldiv = _ida_domain.ST20_ldiv

ST20_ldmemstartval = _ida_domain.ST20_ldmemstartval

ST20_ldpri = _ida_domain.ST20_ldpri

ST20_ldshadow = _ida_domain.ST20_ldshadow

ST20_ldtimer = _ida_domain.ST20_ldtimer

ST20_ldtraph = _ida_domain.ST20_ldtraph

ST20_ldtrapped = _ida_domain.ST20_ldtrapped

ST20_lend = _ida_domain.ST20_lend

ST20_lmul = _ida_domain.ST20_lmul

ST20_ls = _ida_domain.ST20_ls

ST20_lshl = _ida_domain.ST20_lshl

ST20_lshr = _ida_domain.ST20_lshr

ST20_lsub = _ida_domain.ST20_lsub

ST20_lsum = _ida_domain.ST20_lsum

ST20_lsx = _ida_domain.ST20_lsx

ST20_mint = _ida_domain.ST20_mint

ST20_move = _ida_domain.ST20_move

ST20_move2dall = _ida_domain.ST20_move2dall

ST20_move2dinit = _ida_domain.ST20_move2dinit

ST20_move2dnonzero = _ida_domain.ST20_move2dnonzero

ST20_move2dzero = _ida_domain.ST20_move2dzero

ST20_norm = _ida_domain.ST20_norm

ST20_out = _ida_domain.ST20_out

ST20_outbyte = _ida_domain.ST20_outbyte

ST20_outword = _ida_domain.ST20_outword

ST20_pop = _ida_domain.ST20_pop

ST20_postnormsn = _ida_domain.ST20_postnormsn

ST20_prod = _ida_domain.ST20_prod

ST20_reboot = _ida_domain.ST20_reboot

ST20_rem = _ida_domain.ST20_rem

ST20_resetch = _ida_domain.ST20_resetch

ST20_restart = _ida_domain.ST20_restart

ST20_ret = _ida_domain.ST20_ret

ST20_roundsn = _ida_domain.ST20_roundsn

ST20_runp = _ida_domain.ST20_runp

ST20_satadd = _ida_domain.ST20_satadd

ST20_satmul = _ida_domain.ST20_satmul

ST20_satsub = _ida_domain.ST20_satsub

ST20_saveh = _ida_domain.ST20_saveh

ST20_savel = _ida_domain.ST20_savel

ST20_sb = _ida_domain.ST20_sb

ST20_seterr = _ida_domain.ST20_seterr

ST20_sethalterr = _ida_domain.ST20_sethalterr

ST20_settimeslice = _ida_domain.ST20_settimeslice

ST20_slmul = _ida_domain.ST20_slmul

ST20_ss = _ida_domain.ST20_ss

ST20_ssub = _ida_domain.ST20_ssub

ST20_startp = _ida_domain.ST20_startp

ST20_stclock = _ida_domain.ST20_stclock

ST20_sthb = _ida_domain.ST20_sthb

ST20_sthf = _ida_domain.ST20_sthf

ST20_stlb = _ida_domain.ST20_stlb

ST20_stlf = _ida_domain.ST20_stlf

ST20_stoperr = _ida_domain.ST20_stoperr

ST20_stopp = _ida_domain.ST20_stopp

ST20_stshadow = _ida_domain.ST20_stshadow

ST20_sttimer = _ida_domain.ST20_sttimer

ST20_sttraph = _ida_domain.ST20_sttraph

ST20_sttrapped = _ida_domain.ST20_sttrapped

ST20_sulmul = _ida_domain.ST20_sulmul

ST20_sum = _ida_domain.ST20_sum

ST20_swapqueue = _ida_domain.ST20_swapqueue

ST20_swaptimer = _ida_domain.ST20_swaptimer

ST20_talt = _ida_domain.ST20_talt

ST20_taltwt = _ida_domain.ST20_taltwt

ST20_testerr = _ida_domain.ST20_testerr

ST20_testhalterr = _ida_domain.ST20_testhalterr

ST20_testpranal = _ida_domain.ST20_testpranal

ST20_tin = _ida_domain.ST20_tin

ST20_trapdis = _ida_domain.ST20_trapdis

ST20_trapenb = _ida_domain.ST20_trapenb

ST20_tret = _ida_domain.ST20_tret

ST20_unpacksn = _ida_domain.ST20_unpacksn

ST20_wcnt = _ida_domain.ST20_wcnt

ST20_wsubdb = _ida_domain.ST20_wsubdb

ST20_xdble = _ida_domain.ST20_xdble

ST20_xword = _ida_domain.ST20_xword

ST20_last = _ida_domain.ST20_last

ST7_null = _ida_domain.ST7_null

ST7_adc = _ida_domain.ST7_adc

ST7_add = _ida_domain.ST7_add

ST7_and = _ida_domain.ST7_and

ST7_bcp = _ida_domain.ST7_bcp

ST7_bres = _ida_domain.ST7_bres

ST7_bset = _ida_domain.ST7_bset

ST7_btjf = _ida_domain.ST7_btjf

ST7_btjt = _ida_domain.ST7_btjt

ST7_call = _ida_domain.ST7_call

ST7_callr = _ida_domain.ST7_callr

ST7_clr = _ida_domain.ST7_clr

ST7_cp = _ida_domain.ST7_cp

ST7_cpl = _ida_domain.ST7_cpl

ST7_dec = _ida_domain.ST7_dec

ST7_halt = _ida_domain.ST7_halt

ST7_iret = _ida_domain.ST7_iret

ST7_inc = _ida_domain.ST7_inc

ST7_jp = _ida_domain.ST7_jp

ST7_jra = _ida_domain.ST7_jra

ST7_jrt = _ida_domain.ST7_jrt

ST7_jrf = _ida_domain.ST7_jrf

ST7_jrih = _ida_domain.ST7_jrih

ST7_jril = _ida_domain.ST7_jril

ST7_jrh = _ida_domain.ST7_jrh

ST7_jrnh = _ida_domain.ST7_jrnh

ST7_jrm = _ida_domain.ST7_jrm

ST7_jrnm = _ida_domain.ST7_jrnm

ST7_jrmi = _ida_domain.ST7_jrmi

ST7_jrpl = _ida_domain.ST7_jrpl

ST7_jreq = _ida_domain.ST7_jreq

ST7_jrne = _ida_domain.ST7_jrne

ST7_jrc = _ida_domain.ST7_jrc

ST7_jrnc = _ida_domain.ST7_jrnc

ST7_jrult = _ida_domain.ST7_jrult

ST7_jruge = _ida_domain.ST7_jruge

ST7_jrugt = _ida_domain.ST7_jrugt

ST7_jrule = _ida_domain.ST7_jrule

ST7_ld = _ida_domain.ST7_ld

ST7_mul = _ida_domain.ST7_mul

ST7_neg = _ida_domain.ST7_neg

ST7_nop = _ida_domain.ST7_nop

ST7_or = _ida_domain.ST7_or

ST7_pop = _ida_domain.ST7_pop

ST7_push = _ida_domain.ST7_push

ST7_rcf = _ida_domain.ST7_rcf

ST7_ret = _ida_domain.ST7_ret

ST7_rim = _ida_domain.ST7_rim

ST7_rlc = _ida_domain.ST7_rlc

ST7_rrc = _ida_domain.ST7_rrc

ST7_rsp = _ida_domain.ST7_rsp

ST7_sbc = _ida_domain.ST7_sbc

ST7_scf = _ida_domain.ST7_scf

ST7_sim = _ida_domain.ST7_sim

ST7_sla = _ida_domain.ST7_sla

ST7_sll = _ida_domain.ST7_sll

ST7_srl = _ida_domain.ST7_srl

ST7_sra = _ida_domain.ST7_sra

ST7_sub = _ida_domain.ST7_sub

ST7_swap = _ida_domain.ST7_swap

ST7_tnz = _ida_domain.ST7_tnz

ST7_trap = _ida_domain.ST7_trap

ST7_wfi = _ida_domain.ST7_wfi

ST7_xor = _ida_domain.ST7_xor

ST7_last = _ida_domain.ST7_last

IA64_null = _ida_domain.IA64_null

IA64_0 = _ida_domain.IA64_0

IA64_1 = _ida_domain.IA64_1

IA64_a = _ida_domain.IA64_a

IA64_acq = _ida_domain.IA64_acq

IA64_add = _ida_domain.IA64_add

IA64_addl = _ida_domain.IA64_addl

IA64_addp4 = _ida_domain.IA64_addp4

IA64_adds = _ida_domain.IA64_adds

IA64_alloc = _ida_domain.IA64_alloc

IA64_and = _ida_domain.IA64_and

IA64_andcm = _ida_domain.IA64_andcm

IA64_b = _ida_domain.IA64_b

IA64_bias = _ida_domain.IA64_bias

IA64_br = _ida_domain.IA64_br

IA64_break = _ida_domain.IA64_break

IA64_brl = _ida_domain.IA64_brl

IA64_brp = _ida_domain.IA64_brp

IA64_bsw = _ida_domain.IA64_bsw

IA64_c = _ida_domain.IA64_c

IA64_call = _ida_domain.IA64_call

IA64_cexit = _ida_domain.IA64_cexit

IA64_chk = _ida_domain.IA64_chk

IA64_cloop = _ida_domain.IA64_cloop

IA64_clr = _ida_domain.IA64_clr

IA64_clrrrb = _ida_domain.IA64_clrrrb

IA64_cmp = _ida_domain.IA64_cmp

IA64_cmp4 = _ida_domain.IA64_cmp4

IA64_cmpxchg1 = _ida_domain.IA64_cmpxchg1

IA64_cmpxchg2 = _ida_domain.IA64_cmpxchg2

IA64_cmpxchg4 = _ida_domain.IA64_cmpxchg4

IA64_cmpxchg8 = _ida_domain.IA64_cmpxchg8

IA64_cond = _ida_domain.IA64_cond

IA64_cover = _ida_domain.IA64_cover

IA64_ctop = _ida_domain.IA64_ctop

IA64_czx1 = _ida_domain.IA64_czx1

IA64_czx2 = _ida_domain.IA64_czx2

IA64_d = _ida_domain.IA64_d

IA64_dep = _ida_domain.IA64_dep

IA64_dpnt = _ida_domain.IA64_dpnt

IA64_dptk = _ida_domain.IA64_dptk

IA64_e = _ida_domain.IA64_e

IA64_epc = _ida_domain.IA64_epc

IA64_eq = _ida_domain.IA64_eq

IA64_excl = _ida_domain.IA64_excl

IA64_exit = _ida_domain.IA64_exit

IA64_exp = _ida_domain.IA64_exp

IA64_extr = _ida_domain.IA64_extr

IA64_f = _ida_domain.IA64_f

IA64_fabs = _ida_domain.IA64_fabs

IA64_fadd = _ida_domain.IA64_fadd

IA64_famax = _ida_domain.IA64_famax

IA64_famin = _ida_domain.IA64_famin

IA64_fand = _ida_domain.IA64_fand

IA64_fandcm = _ida_domain.IA64_fandcm

IA64_fault = _ida_domain.IA64_fault

IA64_fc = _ida_domain.IA64_fc

IA64_fchkf = _ida_domain.IA64_fchkf

IA64_fclass = _ida_domain.IA64_fclass

IA64_fclrf = _ida_domain.IA64_fclrf

IA64_fcmp = _ida_domain.IA64_fcmp

IA64_fcvt = _ida_domain.IA64_fcvt

IA64_fetchadd4 = _ida_domain.IA64_fetchadd4

IA64_fetchadd8 = _ida_domain.IA64_fetchadd8

IA64_few = _ida_domain.IA64_few

IA64_fill = _ida_domain.IA64_fill

IA64_flushrs = _ida_domain.IA64_flushrs

IA64_fma = _ida_domain.IA64_fma

IA64_fmax = _ida_domain.IA64_fmax

IA64_fmerge = _ida_domain.IA64_fmerge

IA64_fmin = _ida_domain.IA64_fmin

IA64_fmix = _ida_domain.IA64_fmix

IA64_fmpy = _ida_domain.IA64_fmpy

IA64_fms = _ida_domain.IA64_fms

IA64_fneg = _ida_domain.IA64_fneg

IA64_fnegabs = _ida_domain.IA64_fnegabs

IA64_fnma = _ida_domain.IA64_fnma

IA64_fnmpy = _ida_domain.IA64_fnmpy

IA64_fnorm = _ida_domain.IA64_fnorm

IA64_for = _ida_domain.IA64_for

IA64_fpabs = _ida_domain.IA64_fpabs

IA64_fpack = _ida_domain.IA64_fpack

IA64_fpamax = _ida_domain.IA64_fpamax

IA64_fpamin = _ida_domain.IA64_fpamin

IA64_fpcmp = _ida_domain.IA64_fpcmp

IA64_fpcvt = _ida_domain.IA64_fpcvt

IA64_fpma = _ida_domain.IA64_fpma

IA64_fpmax = _ida_domain.IA64_fpmax

IA64_fpmerge = _ida_domain.IA64_fpmerge

IA64_fpmin = _ida_domain.IA64_fpmin

IA64_fpmpy = _ida_domain.IA64_fpmpy

IA64_fpms = _ida_domain.IA64_fpms

IA64_fpneg = _ida_domain.IA64_fpneg

IA64_fpnegabs = _ida_domain.IA64_fpnegabs

IA64_fpnma = _ida_domain.IA64_fpnma

IA64_fpnmpy = _ida_domain.IA64_fpnmpy

IA64_fprcpa = _ida_domain.IA64_fprcpa

IA64_fprsqrta = _ida_domain.IA64_fprsqrta

IA64_frcpa = _ida_domain.IA64_frcpa

IA64_frsqrta = _ida_domain.IA64_frsqrta

IA64_fselect = _ida_domain.IA64_fselect

IA64_fsetc = _ida_domain.IA64_fsetc

IA64_fsub = _ida_domain.IA64_fsub

IA64_fswap = _ida_domain.IA64_fswap

IA64_fsxt = _ida_domain.IA64_fsxt

IA64_fwb = _ida_domain.IA64_fwb

IA64_fx = _ida_domain.IA64_fx

IA64_fxor = _ida_domain.IA64_fxor

IA64_fxu = _ida_domain.IA64_fxu

IA64_g = _ida_domain.IA64_g

IA64_ga = _ida_domain.IA64_ga

IA64_ge = _ida_domain.IA64_ge

IA64_getf = _ida_domain.IA64_getf

IA64_geu = _ida_domain.IA64_geu

IA64_gt = _ida_domain.IA64_gt

IA64_gtu = _ida_domain.IA64_gtu

IA64_h = _ida_domain.IA64_h

IA64_hu = _ida_domain.IA64_hu

IA64_i = _ida_domain.IA64_i

IA64_ia = _ida_domain.IA64_ia

IA64_imp = _ida_domain.IA64_imp

IA64_invala = _ida_domain.IA64_invala

IA64_itc = _ida_domain.IA64_itc

IA64_itr = _ida_domain.IA64_itr

IA64_l = _ida_domain.IA64_l

IA64_ld1 = _ida_domain.IA64_ld1

IA64_ld2 = _ida_domain.IA64_ld2

IA64_ld4 = _ida_domain.IA64_ld4

IA64_ld8 = _ida_domain.IA64_ld8

IA64_ldf = _ida_domain.IA64_ldf

IA64_ldf8 = _ida_domain.IA64_ldf8

IA64_ldfd = _ida_domain.IA64_ldfd

IA64_ldfe = _ida_domain.IA64_ldfe

IA64_ldfp8 = _ida_domain.IA64_ldfp8

IA64_ldfpd = _ida_domain.IA64_ldfpd

IA64_ldfps = _ida_domain.IA64_ldfps

IA64_ldfs = _ida_domain.IA64_ldfs

IA64_le = _ida_domain.IA64_le

IA64_leu = _ida_domain.IA64_leu

IA64_lfetch = _ida_domain.IA64_lfetch

IA64_loadrs = _ida_domain.IA64_loadrs

IA64_loop = _ida_domain.IA64_loop

IA64_lr = _ida_domain.IA64_lr

IA64_lt = _ida_domain.IA64_lt

IA64_ltu = _ida_domain.IA64_ltu

IA64_lu = _ida_domain.IA64_lu

IA64_m = _ida_domain.IA64_m

IA64_many = _ida_domain.IA64_many

IA64_mf = _ida_domain.IA64_mf

IA64_mix1 = _ida_domain.IA64_mix1

IA64_mix2 = _ida_domain.IA64_mix2

IA64_mix4 = _ida_domain.IA64_mix4

IA64_mov = _ida_domain.IA64_mov

IA64_movl = _ida_domain.IA64_movl

IA64_mux1 = _ida_domain.IA64_mux1

IA64_mux2 = _ida_domain.IA64_mux2

IA64_nc = _ida_domain.IA64_nc

IA64_ne = _ida_domain.IA64_ne

IA64_neq = _ida_domain.IA64_neq

IA64_nge = _ida_domain.IA64_nge

IA64_ngt = _ida_domain.IA64_ngt

IA64_nl = _ida_domain.IA64_nl

IA64_nle = _ida_domain.IA64_nle

IA64_nlt = _ida_domain.IA64_nlt

IA64_nm = _ida_domain.IA64_nm

IA64_nop = _ida_domain.IA64_nop

IA64_nr = _ida_domain.IA64_nr

IA64_ns = _ida_domain.IA64_ns

IA64_nt1 = _ida_domain.IA64_nt1

IA64_nt2 = _ida_domain.IA64_nt2

IA64_nta = _ida_domain.IA64_nta

IA64_nz = _ida_domain.IA64_nz

IA64_or = _ida_domain.IA64_or

IA64_orcm = _ida_domain.IA64_orcm

IA64_ord = _ida_domain.IA64_ord

IA64_pack2 = _ida_domain.IA64_pack2

IA64_pack4 = _ida_domain.IA64_pack4

IA64_padd1 = _ida_domain.IA64_padd1

IA64_padd2 = _ida_domain.IA64_padd2

IA64_padd4 = _ida_domain.IA64_padd4

IA64_pavg1 = _ida_domain.IA64_pavg1

IA64_pavg2 = _ida_domain.IA64_pavg2

IA64_pavgsub1 = _ida_domain.IA64_pavgsub1

IA64_pavgsub2 = _ida_domain.IA64_pavgsub2

IA64_pcmp1 = _ida_domain.IA64_pcmp1

IA64_pcmp2 = _ida_domain.IA64_pcmp2

IA64_pcmp4 = _ida_domain.IA64_pcmp4

IA64_pmax1 = _ida_domain.IA64_pmax1

IA64_pmax2 = _ida_domain.IA64_pmax2

IA64_pmin1 = _ida_domain.IA64_pmin1

IA64_pmin2 = _ida_domain.IA64_pmin2

IA64_pmpy2 = _ida_domain.IA64_pmpy2

IA64_pmpyshr2 = _ida_domain.IA64_pmpyshr2

IA64_popcnt = _ida_domain.IA64_popcnt

IA64_pr = _ida_domain.IA64_pr

IA64_probe = _ida_domain.IA64_probe

IA64_psad1 = _ida_domain.IA64_psad1

IA64_pshl2 = _ida_domain.IA64_pshl2

IA64_pshl4 = _ida_domain.IA64_pshl4

IA64_pshladd2 = _ida_domain.IA64_pshladd2

IA64_pshr2 = _ida_domain.IA64_pshr2

IA64_pshr4 = _ida_domain.IA64_pshr4

IA64_pshradd2 = _ida_domain.IA64_pshradd2

IA64_psub1 = _ida_domain.IA64_psub1

IA64_psub2 = _ida_domain.IA64_psub2

IA64_psub4 = _ida_domain.IA64_psub4

IA64_ptc = _ida_domain.IA64_ptc

IA64_ptr = _ida_domain.IA64_ptr

IA64_r = _ida_domain.IA64_r

IA64_raz = _ida_domain.IA64_raz

IA64_rel = _ida_domain.IA64_rel

IA64_ret = _ida_domain.IA64_ret

IA64_rfi = _ida_domain.IA64_rfi

IA64_rsm = _ida_domain.IA64_rsm

IA64_rum = _ida_domain.IA64_rum

IA64_rw = _ida_domain.IA64_rw

IA64_s = _ida_domain.IA64_s

IA64_s0 = _ida_domain.IA64_s0

IA64_s1 = _ida_domain.IA64_s1

IA64_s2 = _ida_domain.IA64_s2

IA64_s3 = _ida_domain.IA64_s3

IA64_sa = _ida_domain.IA64_sa

IA64_se = _ida_domain.IA64_se

IA64_setf = _ida_domain.IA64_setf

IA64_shl = _ida_domain.IA64_shl

IA64_shladd = _ida_domain.IA64_shladd

IA64_shladdp4 = _ida_domain.IA64_shladdp4

IA64_shr = _ida_domain.IA64_shr

IA64_shrp = _ida_domain.IA64_shrp

IA64_sig = _ida_domain.IA64_sig

IA64_spill = _ida_domain.IA64_spill

IA64_spnt = _ida_domain.IA64_spnt

IA64_sptk = _ida_domain.IA64_sptk

IA64_srlz = _ida_domain.IA64_srlz

IA64_ssm = _ida_domain.IA64_ssm

IA64_sss = _ida_domain.IA64_sss

IA64_st1 = _ida_domain.IA64_st1

IA64_st2 = _ida_domain.IA64_st2

IA64_st4 = _ida_domain.IA64_st4

IA64_st8 = _ida_domain.IA64_st8

IA64_stf = _ida_domain.IA64_stf

IA64_stf8 = _ida_domain.IA64_stf8

IA64_stfd = _ida_domain.IA64_stfd

IA64_stfe = _ida_domain.IA64_stfe

IA64_stfs = _ida_domain.IA64_stfs

IA64_sub = _ida_domain.IA64_sub

IA64_sum = _ida_domain.IA64_sum

IA64_sxt1 = _ida_domain.IA64_sxt1

IA64_sxt2 = _ida_domain.IA64_sxt2

IA64_sxt4 = _ida_domain.IA64_sxt4

IA64_sync = _ida_domain.IA64_sync

IA64_tak = _ida_domain.IA64_tak

IA64_tbit = _ida_domain.IA64_tbit

IA64_thash = _ida_domain.IA64_thash

IA64_tnat = _ida_domain.IA64_tnat

IA64_tpa = _ida_domain.IA64_tpa

IA64_trunc = _ida_domain.IA64_trunc

IA64_ttag = _ida_domain.IA64_ttag

IA64_u = _ida_domain.IA64_u

IA64_unc = _ida_domain.IA64_unc

IA64_unord = _ida_domain.IA64_unord

IA64_unpack1 = _ida_domain.IA64_unpack1

IA64_unpack2 = _ida_domain.IA64_unpack2

IA64_unpack4 = _ida_domain.IA64_unpack4

IA64_uss = _ida_domain.IA64_uss

IA64_uus = _ida_domain.IA64_uus

IA64_uuu = _ida_domain.IA64_uuu

IA64_w = _ida_domain.IA64_w

IA64_wexit = _ida_domain.IA64_wexit

IA64_wtop = _ida_domain.IA64_wtop

IA64_x = _ida_domain.IA64_x

IA64_xchg1 = _ida_domain.IA64_xchg1

IA64_xchg2 = _ida_domain.IA64_xchg2

IA64_xchg4 = _ida_domain.IA64_xchg4

IA64_xchg8 = _ida_domain.IA64_xchg8

IA64_xf = _ida_domain.IA64_xf

IA64_xma = _ida_domain.IA64_xma

IA64_xmpy = _ida_domain.IA64_xmpy

IA64_xor = _ida_domain.IA64_xor

IA64_xuf = _ida_domain.IA64_xuf

IA64_z = _ida_domain.IA64_z

IA64_zxt1 = _ida_domain.IA64_zxt1

IA64_zxt2 = _ida_domain.IA64_zxt2

IA64_zxt4 = _ida_domain.IA64_zxt4

IA64_last = _ida_domain.IA64_last

NET_null = _ida_domain.NET_null

NET_add = _ida_domain.NET_add

NET_add_ovf = _ida_domain.NET_add_ovf

NET_add_ovf_un = _ida_domain.NET_add_ovf_un

NET_and = _ida_domain.NET_and

NET_ann_arg = _ida_domain.NET_ann_arg

NET_ann_call = _ida_domain.NET_ann_call

NET_ann_catch = _ida_domain.NET_ann_catch

NET_ann_data = _ida_domain.NET_ann_data

NET_ann_data_s = _ida_domain.NET_ann_data_s

NET_ann_dead = _ida_domain.NET_ann_dead

NET_ann_def = _ida_domain.NET_ann_def

NET_ann_hoisted = _ida_domain.NET_ann_hoisted

NET_ann_hoisted_call = _ida_domain.NET_ann_hoisted_call

NET_ann_lab = _ida_domain.NET_ann_lab

NET_ann_live = _ida_domain.NET_ann_live

NET_ann_phi = _ida_domain.NET_ann_phi

NET_ann_ref = _ida_domain.NET_ann_ref

NET_ann_ref_s = _ida_domain.NET_ann_ref_s

NET_arglist = _ida_domain.NET_arglist

NET_beq = _ida_domain.NET_beq

NET_beq_s = _ida_domain.NET_beq_s

NET_bge = _ida_domain.NET_bge

NET_bge_s = _ida_domain.NET_bge_s

NET_bge_un = _ida_domain.NET_bge_un

NET_bge_un_s = _ida_domain.NET_bge_un_s

NET_bgt = _ida_domain.NET_bgt

NET_bgt_s = _ida_domain.NET_bgt_s

NET_bgt_un = _ida_domain.NET_bgt_un

NET_bgt_un_s = _ida_domain.NET_bgt_un_s

NET_ble = _ida_domain.NET_ble

NET_ble_s = _ida_domain.NET_ble_s

NET_ble_un = _ida_domain.NET_ble_un

NET_ble_un_s = _ida_domain.NET_ble_un_s

NET_blt = _ida_domain.NET_blt

NET_blt_s = _ida_domain.NET_blt_s

NET_blt_un = _ida_domain.NET_blt_un

NET_blt_un_s = _ida_domain.NET_blt_un_s

NET_bne_un = _ida_domain.NET_bne_un

NET_bne_un_s = _ida_domain.NET_bne_un_s

NET_box = _ida_domain.NET_box

NET_br = _ida_domain.NET_br

NET_br_s = _ida_domain.NET_br_s

NET_break = _ida_domain.NET_break

NET_brfalse = _ida_domain.NET_brfalse

NET_brfalse_s = _ida_domain.NET_brfalse_s

NET_brtrue = _ida_domain.NET_brtrue

NET_brtrue_s = _ida_domain.NET_brtrue_s

NET_call = _ida_domain.NET_call

NET_calli = _ida_domain.NET_calli

NET_callvirt = _ida_domain.NET_callvirt

NET_castclass = _ida_domain.NET_castclass

NET_ceq = _ida_domain.NET_ceq

NET_cgt = _ida_domain.NET_cgt

NET_cgt_un = _ida_domain.NET_cgt_un

NET_ckfinite = _ida_domain.NET_ckfinite

NET_clt = _ida_domain.NET_clt

NET_clt_un = _ida_domain.NET_clt_un

NET_conv_i = _ida_domain.NET_conv_i

NET_conv_i1 = _ida_domain.NET_conv_i1

NET_conv_i2 = _ida_domain.NET_conv_i2

NET_conv_i4 = _ida_domain.NET_conv_i4

NET_conv_i8 = _ida_domain.NET_conv_i8

NET_conv_ovf_i = _ida_domain.NET_conv_ovf_i

NET_conv_ovf_i1 = _ida_domain.NET_conv_ovf_i1

NET_conv_ovf_i1_un = _ida_domain.NET_conv_ovf_i1_un

NET_conv_ovf_i2 = _ida_domain.NET_conv_ovf_i2

NET_conv_ovf_i2_un = _ida_domain.NET_conv_ovf_i2_un

NET_conv_ovf_i4 = _ida_domain.NET_conv_ovf_i4

NET_conv_ovf_i4_un = _ida_domain.NET_conv_ovf_i4_un

NET_conv_ovf_i8 = _ida_domain.NET_conv_ovf_i8

NET_conv_ovf_i8_un = _ida_domain.NET_conv_ovf_i8_un

NET_conv_ovf_i_un = _ida_domain.NET_conv_ovf_i_un

NET_conv_ovf_u = _ida_domain.NET_conv_ovf_u

NET_conv_ovf_u1 = _ida_domain.NET_conv_ovf_u1

NET_conv_ovf_u1_un = _ida_domain.NET_conv_ovf_u1_un

NET_conv_ovf_u2 = _ida_domain.NET_conv_ovf_u2

NET_conv_ovf_u2_un = _ida_domain.NET_conv_ovf_u2_un

NET_conv_ovf_u4 = _ida_domain.NET_conv_ovf_u4

NET_conv_ovf_u4_un = _ida_domain.NET_conv_ovf_u4_un

NET_conv_ovf_u8 = _ida_domain.NET_conv_ovf_u8

NET_conv_ovf_u8_un = _ida_domain.NET_conv_ovf_u8_un

NET_conv_ovf_u_un = _ida_domain.NET_conv_ovf_u_un

NET_conv_r4 = _ida_domain.NET_conv_r4

NET_conv_r8 = _ida_domain.NET_conv_r8

NET_conv_r_un = _ida_domain.NET_conv_r_un

NET_conv_u = _ida_domain.NET_conv_u

NET_conv_u1 = _ida_domain.NET_conv_u1

NET_conv_u2 = _ida_domain.NET_conv_u2

NET_conv_u4 = _ida_domain.NET_conv_u4

NET_conv_u8 = _ida_domain.NET_conv_u8

NET_cpblk = _ida_domain.NET_cpblk

NET_cpobj = _ida_domain.NET_cpobj

NET_div = _ida_domain.NET_div

NET_div_un = _ida_domain.NET_div_un

NET_dup = _ida_domain.NET_dup

NET_endfilter = _ida_domain.NET_endfilter

NET_endfinally = _ida_domain.NET_endfinally

NET_initblk = _ida_domain.NET_initblk

NET_initobj = _ida_domain.NET_initobj

NET_isinst = _ida_domain.NET_isinst

NET_jmp = _ida_domain.NET_jmp

NET_ldarg = _ida_domain.NET_ldarg

NET_ldarg_0 = _ida_domain.NET_ldarg_0

NET_ldarg_1 = _ida_domain.NET_ldarg_1

NET_ldarg_2 = _ida_domain.NET_ldarg_2

NET_ldarg_3 = _ida_domain.NET_ldarg_3

NET_ldarg_s = _ida_domain.NET_ldarg_s

NET_ldarga = _ida_domain.NET_ldarga

NET_ldarga_s = _ida_domain.NET_ldarga_s

NET_ldc_i4 = _ida_domain.NET_ldc_i4

NET_ldc_i4_0 = _ida_domain.NET_ldc_i4_0

NET_ldc_i4_1 = _ida_domain.NET_ldc_i4_1

NET_ldc_i4_2 = _ida_domain.NET_ldc_i4_2

NET_ldc_i4_3 = _ida_domain.NET_ldc_i4_3

NET_ldc_i4_4 = _ida_domain.NET_ldc_i4_4

NET_ldc_i4_5 = _ida_domain.NET_ldc_i4_5

NET_ldc_i4_6 = _ida_domain.NET_ldc_i4_6

NET_ldc_i4_7 = _ida_domain.NET_ldc_i4_7

NET_ldc_i4_8 = _ida_domain.NET_ldc_i4_8

NET_ldc_i4_m1 = _ida_domain.NET_ldc_i4_m1

NET_ldc_i4_s = _ida_domain.NET_ldc_i4_s

NET_ldc_i8 = _ida_domain.NET_ldc_i8

NET_ldc_r4 = _ida_domain.NET_ldc_r4

NET_ldc_r8 = _ida_domain.NET_ldc_r8

NET_ldelem_i = _ida_domain.NET_ldelem_i

NET_ldelem_i1 = _ida_domain.NET_ldelem_i1

NET_ldelem_i2 = _ida_domain.NET_ldelem_i2

NET_ldelem_i4 = _ida_domain.NET_ldelem_i4

NET_ldelem_i8 = _ida_domain.NET_ldelem_i8

NET_ldelem_r4 = _ida_domain.NET_ldelem_r4

NET_ldelem_r8 = _ida_domain.NET_ldelem_r8

NET_ldelem_ref = _ida_domain.NET_ldelem_ref

NET_ldelem_u1 = _ida_domain.NET_ldelem_u1

NET_ldelem_u2 = _ida_domain.NET_ldelem_u2

NET_ldelem_u4 = _ida_domain.NET_ldelem_u4

NET_ldelema = _ida_domain.NET_ldelema

NET_ldfld = _ida_domain.NET_ldfld

NET_ldflda = _ida_domain.NET_ldflda

NET_ldftn = _ida_domain.NET_ldftn

NET_ldind_i = _ida_domain.NET_ldind_i

NET_ldind_i1 = _ida_domain.NET_ldind_i1

NET_ldind_i2 = _ida_domain.NET_ldind_i2

NET_ldind_i4 = _ida_domain.NET_ldind_i4

NET_ldind_i8 = _ida_domain.NET_ldind_i8

NET_ldind_r4 = _ida_domain.NET_ldind_r4

NET_ldind_r8 = _ida_domain.NET_ldind_r8

NET_ldind_ref = _ida_domain.NET_ldind_ref

NET_ldind_u1 = _ida_domain.NET_ldind_u1

NET_ldind_u2 = _ida_domain.NET_ldind_u2

NET_ldind_u4 = _ida_domain.NET_ldind_u4

NET_ldlen = _ida_domain.NET_ldlen

NET_ldloc = _ida_domain.NET_ldloc

NET_ldloc_0 = _ida_domain.NET_ldloc_0

NET_ldloc_1 = _ida_domain.NET_ldloc_1

NET_ldloc_2 = _ida_domain.NET_ldloc_2

NET_ldloc_3 = _ida_domain.NET_ldloc_3

NET_ldloc_s = _ida_domain.NET_ldloc_s

NET_ldloca = _ida_domain.NET_ldloca

NET_ldloca_s = _ida_domain.NET_ldloca_s

NET_ldnull = _ida_domain.NET_ldnull

NET_ldobj = _ida_domain.NET_ldobj

NET_ldsfld = _ida_domain.NET_ldsfld

NET_ldsflda = _ida_domain.NET_ldsflda

NET_ldstr = _ida_domain.NET_ldstr

NET_ldtoken = _ida_domain.NET_ldtoken

NET_ldvirtftn = _ida_domain.NET_ldvirtftn

NET_leave = _ida_domain.NET_leave

NET_leave_s = _ida_domain.NET_leave_s

NET_localloc = _ida_domain.NET_localloc

NET_mkrefany = _ida_domain.NET_mkrefany

NET_mul = _ida_domain.NET_mul

NET_mul_ovf = _ida_domain.NET_mul_ovf

NET_mul_ovf_un = _ida_domain.NET_mul_ovf_un

NET_neg = _ida_domain.NET_neg

NET_newarr = _ida_domain.NET_newarr

NET_newobj = _ida_domain.NET_newobj

NET_nop = _ida_domain.NET_nop

NET_not = _ida_domain.NET_not

NET_or = _ida_domain.NET_or

NET_pop = _ida_domain.NET_pop

NET_refanytype = _ida_domain.NET_refanytype

NET_refanyval = _ida_domain.NET_refanyval

NET_rem = _ida_domain.NET_rem

NET_rem_un = _ida_domain.NET_rem_un

NET_ret = _ida_domain.NET_ret

NET_rethrow = _ida_domain.NET_rethrow

NET_shl = _ida_domain.NET_shl

NET_shr = _ida_domain.NET_shr

NET_shr_un = _ida_domain.NET_shr_un

NET_sizeof = _ida_domain.NET_sizeof

NET_starg = _ida_domain.NET_starg

NET_starg_s = _ida_domain.NET_starg_s

NET_stelem_i = _ida_domain.NET_stelem_i

NET_stelem_i1 = _ida_domain.NET_stelem_i1

NET_stelem_i2 = _ida_domain.NET_stelem_i2

NET_stelem_i4 = _ida_domain.NET_stelem_i4

NET_stelem_i8 = _ida_domain.NET_stelem_i8

NET_stelem_r4 = _ida_domain.NET_stelem_r4

NET_stelem_r8 = _ida_domain.NET_stelem_r8

NET_stelem_ref = _ida_domain.NET_stelem_ref

NET_stfld = _ida_domain.NET_stfld

NET_stind_i = _ida_domain.NET_stind_i

NET_stind_i1 = _ida_domain.NET_stind_i1

NET_stind_i2 = _ida_domain.NET_stind_i2

NET_stind_i4 = _ida_domain.NET_stind_i4

NET_stind_i8 = _ida_domain.NET_stind_i8

NET_stind_r4 = _ida_domain.NET_stind_r4

NET_stind_r8 = _ida_domain.NET_stind_r8

NET_stind_ref = _ida_domain.NET_stind_ref

NET_stloc = _ida_domain.NET_stloc

NET_stloc_0 = _ida_domain.NET_stloc_0

NET_stloc_1 = _ida_domain.NET_stloc_1

NET_stloc_2 = _ida_domain.NET_stloc_2

NET_stloc_3 = _ida_domain.NET_stloc_3

NET_stloc_s = _ida_domain.NET_stloc_s

NET_stobj = _ida_domain.NET_stobj

NET_stsfld = _ida_domain.NET_stsfld

NET_sub = _ida_domain.NET_sub

NET_sub_ovf = _ida_domain.NET_sub_ovf

NET_sub_ovf_un = _ida_domain.NET_sub_ovf_un

NET_switch = _ida_domain.NET_switch

NET_tail_ = _ida_domain.NET_tail_

NET_throw = _ida_domain.NET_throw

NET_unaligned_ = _ida_domain.NET_unaligned_

NET_unbox = _ida_domain.NET_unbox

NET_volatile_ = _ida_domain.NET_volatile_

NET_xor = _ida_domain.NET_xor

NET_ldelem = _ida_domain.NET_ldelem

NET_stelem = _ida_domain.NET_stelem

NET_unbox_any = _ida_domain.NET_unbox_any

NET_constrained_ = _ida_domain.NET_constrained_

NET_no_ = _ida_domain.NET_no_

NET_readonly_ = _ida_domain.NET_readonly_

NET_last = _ida_domain.NET_last

MC12_null = _ida_domain.MC12_null

MC12_aba = _ida_domain.MC12_aba

MC12_abx = _ida_domain.MC12_abx

MC12_aby = _ida_domain.MC12_aby

MC12_adca = _ida_domain.MC12_adca

MC12_adcb = _ida_domain.MC12_adcb

MC12_adda = _ida_domain.MC12_adda

MC12_addb = _ida_domain.MC12_addb

MC12_addd = _ida_domain.MC12_addd

MC12_anda = _ida_domain.MC12_anda

MC12_andb = _ida_domain.MC12_andb

MC12_andcc = _ida_domain.MC12_andcc

MC12_asl = _ida_domain.MC12_asl

MC12_asla = _ida_domain.MC12_asla

MC12_aslb = _ida_domain.MC12_aslb

MC12_asld = _ida_domain.MC12_asld

MC12_asr = _ida_domain.MC12_asr

MC12_asra = _ida_domain.MC12_asra

MC12_asrb = _ida_domain.MC12_asrb

MC12_bcc = _ida_domain.MC12_bcc

MC12_bclr = _ida_domain.MC12_bclr

MC12_bcs = _ida_domain.MC12_bcs

MC12_beq = _ida_domain.MC12_beq

MC12_bge = _ida_domain.MC12_bge

MC12_bgnd = _ida_domain.MC12_bgnd

MC12_bgt = _ida_domain.MC12_bgt

MC12_bhi = _ida_domain.MC12_bhi

MC12_bhs = _ida_domain.MC12_bhs

MC12_bita = _ida_domain.MC12_bita

MC12_bitb = _ida_domain.MC12_bitb

MC12_ble = _ida_domain.MC12_ble

MC12_blo = _ida_domain.MC12_blo

MC12_bls = _ida_domain.MC12_bls

MC12_blt = _ida_domain.MC12_blt

MC12_bmi = _ida_domain.MC12_bmi

MC12_bne = _ida_domain.MC12_bne

MC12_bpl = _ida_domain.MC12_bpl

MC12_bra = _ida_domain.MC12_bra

MC12_brclr = _ida_domain.MC12_brclr

MC12_brn = _ida_domain.MC12_brn

MC12_brset = _ida_domain.MC12_brset

MC12_bset = _ida_domain.MC12_bset

MC12_bsr = _ida_domain.MC12_bsr

MC12_bvc = _ida_domain.MC12_bvc

MC12_bvs = _ida_domain.MC12_bvs

MC12_call = _ida_domain.MC12_call

MC12_cba = _ida_domain.MC12_cba

MC12_clc = _ida_domain.MC12_clc

MC12_cli = _ida_domain.MC12_cli

MC12_clr = _ida_domain.MC12_clr

MC12_clra = _ida_domain.MC12_clra

MC12_clrb = _ida_domain.MC12_clrb

MC12_clv = _ida_domain.MC12_clv

MC12_cmpa = _ida_domain.MC12_cmpa

MC12_cmpb = _ida_domain.MC12_cmpb

MC12_com = _ida_domain.MC12_com

MC12_coma = _ida_domain.MC12_coma

MC12_comb = _ida_domain.MC12_comb

MC12_cpd = _ida_domain.MC12_cpd

MC12_cps = _ida_domain.MC12_cps

MC12_cpx = _ida_domain.MC12_cpx

MC12_cpy = _ida_domain.MC12_cpy

MC12_daa = _ida_domain.MC12_daa

MC12_dbeq = _ida_domain.MC12_dbeq

MC12_dbne = _ida_domain.MC12_dbne

MC12_dec = _ida_domain.MC12_dec

MC12_deca = _ida_domain.MC12_deca

MC12_decb = _ida_domain.MC12_decb

MC12_des = _ida_domain.MC12_des

MC12_dex = _ida_domain.MC12_dex

MC12_dey = _ida_domain.MC12_dey

MC12_ediv = _ida_domain.MC12_ediv

MC12_edivs = _ida_domain.MC12_edivs

MC12_emacs = _ida_domain.MC12_emacs

MC12_emaxd = _ida_domain.MC12_emaxd

MC12_emaxm = _ida_domain.MC12_emaxm

MC12_emind = _ida_domain.MC12_emind

MC12_eminm = _ida_domain.MC12_eminm

MC12_emul = _ida_domain.MC12_emul

MC12_emuls = _ida_domain.MC12_emuls

MC12_eora = _ida_domain.MC12_eora

MC12_eorb = _ida_domain.MC12_eorb

MC12_etbl = _ida_domain.MC12_etbl

MC12_exg = _ida_domain.MC12_exg

MC12_fdiv = _ida_domain.MC12_fdiv

MC12_ibeq = _ida_domain.MC12_ibeq

MC12_ibne = _ida_domain.MC12_ibne

MC12_idiv = _ida_domain.MC12_idiv

MC12_idivs = _ida_domain.MC12_idivs

MC12_inc = _ida_domain.MC12_inc

MC12_inca = _ida_domain.MC12_inca

MC12_incb = _ida_domain.MC12_incb

MC12_ins = _ida_domain.MC12_ins

MC12_inx = _ida_domain.MC12_inx

MC12_iny = _ida_domain.MC12_iny

MC12_jmp = _ida_domain.MC12_jmp

MC12_jsr = _ida_domain.MC12_jsr

MC12_lbcc = _ida_domain.MC12_lbcc

MC12_lbcs = _ida_domain.MC12_lbcs

MC12_lbeq = _ida_domain.MC12_lbeq

MC12_lbge = _ida_domain.MC12_lbge

MC12_lbgt = _ida_domain.MC12_lbgt

MC12_lbhi = _ida_domain.MC12_lbhi

MC12_lbhs = _ida_domain.MC12_lbhs

MC12_lble = _ida_domain.MC12_lble

MC12_lblo = _ida_domain.MC12_lblo

MC12_lbls = _ida_domain.MC12_lbls

MC12_lblt = _ida_domain.MC12_lblt

MC12_lbmi = _ida_domain.MC12_lbmi

MC12_lbne = _ida_domain.MC12_lbne

MC12_lbpl = _ida_domain.MC12_lbpl

MC12_lbra = _ida_domain.MC12_lbra

MC12_lbrn = _ida_domain.MC12_lbrn

MC12_lbvc = _ida_domain.MC12_lbvc

MC12_lbvs = _ida_domain.MC12_lbvs

MC12_ldaa = _ida_domain.MC12_ldaa

MC12_ldab = _ida_domain.MC12_ldab

MC12_ldd = _ida_domain.MC12_ldd

MC12_lds = _ida_domain.MC12_lds

MC12_ldx = _ida_domain.MC12_ldx

MC12_ldy = _ida_domain.MC12_ldy

MC12_leas = _ida_domain.MC12_leas

MC12_leax = _ida_domain.MC12_leax

MC12_leay = _ida_domain.MC12_leay

MC12_lsl = _ida_domain.MC12_lsl

MC12_lsla = _ida_domain.MC12_lsla

MC12_lslb = _ida_domain.MC12_lslb

MC12_lsld = _ida_domain.MC12_lsld

MC12_lsr = _ida_domain.MC12_lsr

MC12_lsra = _ida_domain.MC12_lsra

MC12_lsrb = _ida_domain.MC12_lsrb

MC12_lsrd = _ida_domain.MC12_lsrd

MC12_maxa = _ida_domain.MC12_maxa

MC12_maxm = _ida_domain.MC12_maxm

MC12_mem = _ida_domain.MC12_mem

MC12_mina = _ida_domain.MC12_mina

MC12_minm = _ida_domain.MC12_minm

MC12_movb = _ida_domain.MC12_movb

MC12_movw = _ida_domain.MC12_movw

MC12_mul = _ida_domain.MC12_mul

MC12_neg = _ida_domain.MC12_neg

MC12_nega = _ida_domain.MC12_nega

MC12_negb = _ida_domain.MC12_negb

MC12_nop = _ida_domain.MC12_nop

MC12_oraa = _ida_domain.MC12_oraa

MC12_orab = _ida_domain.MC12_orab

MC12_orcc = _ida_domain.MC12_orcc

MC12_psha = _ida_domain.MC12_psha

MC12_pshb = _ida_domain.MC12_pshb

MC12_pshc = _ida_domain.MC12_pshc

MC12_pshd = _ida_domain.MC12_pshd

MC12_pshx = _ida_domain.MC12_pshx

MC12_pshy = _ida_domain.MC12_pshy

MC12_pula = _ida_domain.MC12_pula

MC12_pulb = _ida_domain.MC12_pulb

MC12_pulc = _ida_domain.MC12_pulc

MC12_puld = _ida_domain.MC12_puld

MC12_pulx = _ida_domain.MC12_pulx

MC12_puly = _ida_domain.MC12_puly

MC12_rev = _ida_domain.MC12_rev

MC12_revw = _ida_domain.MC12_revw

MC12_rol = _ida_domain.MC12_rol

MC12_rola = _ida_domain.MC12_rola

MC12_rolb = _ida_domain.MC12_rolb

MC12_ror = _ida_domain.MC12_ror

MC12_rora = _ida_domain.MC12_rora

MC12_rorb = _ida_domain.MC12_rorb

MC12_rtc = _ida_domain.MC12_rtc

MC12_rti = _ida_domain.MC12_rti

MC12_rts = _ida_domain.MC12_rts

MC12_sba = _ida_domain.MC12_sba

MC12_sbca = _ida_domain.MC12_sbca

MC12_sbcb = _ida_domain.MC12_sbcb

MC12_sec = _ida_domain.MC12_sec

MC12_sei = _ida_domain.MC12_sei

MC12_sev = _ida_domain.MC12_sev

MC12_sex = _ida_domain.MC12_sex

MC12_staa = _ida_domain.MC12_staa

MC12_stab = _ida_domain.MC12_stab

MC12_std = _ida_domain.MC12_std

MC12_stop = _ida_domain.MC12_stop

MC12_sts = _ida_domain.MC12_sts

MC12_stx = _ida_domain.MC12_stx

MC12_sty = _ida_domain.MC12_sty

MC12_suba = _ida_domain.MC12_suba

MC12_subb = _ida_domain.MC12_subb

MC12_subd = _ida_domain.MC12_subd

MC12_swi = _ida_domain.MC12_swi

MC12_tab = _ida_domain.MC12_tab

MC12_tap = _ida_domain.MC12_tap

MC12_tba = _ida_domain.MC12_tba

MC12_tbeq = _ida_domain.MC12_tbeq

MC12_tbl = _ida_domain.MC12_tbl

MC12_tbne = _ida_domain.MC12_tbne

MC12_tfr = _ida_domain.MC12_tfr

MC12_tpa = _ida_domain.MC12_tpa

MC12_trap = _ida_domain.MC12_trap

MC12_tst = _ida_domain.MC12_tst

MC12_tsta = _ida_domain.MC12_tsta

MC12_tstb = _ida_domain.MC12_tstb

MC12_tsx = _ida_domain.MC12_tsx

MC12_tsy = _ida_domain.MC12_tsy

MC12_txs = _ida_domain.MC12_txs

MC12_tys = _ida_domain.MC12_tys

MC12_wai = _ida_domain.MC12_wai

MC12_wav = _ida_domain.MC12_wav

MC12_wavr = _ida_domain.MC12_wavr

MC12_xgdx = _ida_domain.MC12_xgdx

MC12_xgdy = _ida_domain.MC12_xgdy

MC12_skip1 = _ida_domain.MC12_skip1

MC12_skip2 = _ida_domain.MC12_skip2

MC12X_addx = _ida_domain.MC12X_addx

MC12X_addy = _ida_domain.MC12X_addy

MC12X_aded = _ida_domain.MC12X_aded

MC12X_adex = _ida_domain.MC12X_adex

MC12X_adey = _ida_domain.MC12X_adey

MC12X_andx = _ida_domain.MC12X_andx

MC12X_andy = _ida_domain.MC12X_andy

MC12X_aslw = _ida_domain.MC12X_aslw

MC12X_aslx = _ida_domain.MC12X_aslx

MC12X_asly = _ida_domain.MC12X_asly

MC12X_asrw = _ida_domain.MC12X_asrw

MC12X_asrx = _ida_domain.MC12X_asrx

MC12X_asry = _ida_domain.MC12X_asry

MC12X_bitx = _ida_domain.MC12X_bitx

MC12X_bity = _ida_domain.MC12X_bity

MC12X_btas = _ida_domain.MC12X_btas

MC12X_clrw = _ida_domain.MC12X_clrw

MC12X_clrx = _ida_domain.MC12X_clrx

MC12X_clry = _ida_domain.MC12X_clry

MC12X_comw = _ida_domain.MC12X_comw

MC12X_comx = _ida_domain.MC12X_comx

MC12X_comy = _ida_domain.MC12X_comy

MC12X_cped = _ida_domain.MC12X_cped

MC12X_cpes = _ida_domain.MC12X_cpes

MC12X_cpex = _ida_domain.MC12X_cpex

MC12X_cpey = _ida_domain.MC12X_cpey

MC12X_decw = _ida_domain.MC12X_decw

MC12X_decx = _ida_domain.MC12X_decx

MC12X_decy = _ida_domain.MC12X_decy

MC12X_eorx = _ida_domain.MC12X_eorx

MC12X_eory = _ida_domain.MC12X_eory

MC12X_gldaa = _ida_domain.MC12X_gldaa

MC12X_gldab = _ida_domain.MC12X_gldab

MC12X_gldd = _ida_domain.MC12X_gldd

MC12X_glds = _ida_domain.MC12X_glds

MC12X_gldx = _ida_domain.MC12X_gldx

MC12X_gldy = _ida_domain.MC12X_gldy

MC12X_gstaa = _ida_domain.MC12X_gstaa

MC12X_gstab = _ida_domain.MC12X_gstab

MC12X_gstd = _ida_domain.MC12X_gstd

MC12X_gsts = _ida_domain.MC12X_gsts

MC12X_gstx = _ida_domain.MC12X_gstx

MC12X_gsty = _ida_domain.MC12X_gsty

MC12X_incw = _ida_domain.MC12X_incw

MC12X_incx = _ida_domain.MC12X_incx

MC12X_incy = _ida_domain.MC12X_incy

MC12X_lsrw = _ida_domain.MC12X_lsrw

MC12X_lsrx = _ida_domain.MC12X_lsrx

MC12X_lsry = _ida_domain.MC12X_lsry

MC12X_negw = _ida_domain.MC12X_negw

MC12X_negx = _ida_domain.MC12X_negx

MC12X_negy = _ida_domain.MC12X_negy

MC12X_orx = _ida_domain.MC12X_orx

MC12X_ory = _ida_domain.MC12X_ory

MC12X_pshcw = _ida_domain.MC12X_pshcw

MC12X_pulcw = _ida_domain.MC12X_pulcw

MC12X_rolw = _ida_domain.MC12X_rolw

MC12X_rolx = _ida_domain.MC12X_rolx

MC12X_roly = _ida_domain.MC12X_roly

MC12X_rorw = _ida_domain.MC12X_rorw

MC12X_rorx = _ida_domain.MC12X_rorx

MC12X_rory = _ida_domain.MC12X_rory

MC12X_sbed = _ida_domain.MC12X_sbed

MC12X_sbex = _ida_domain.MC12X_sbex

MC12X_sbey = _ida_domain.MC12X_sbey

MC12X_subx = _ida_domain.MC12X_subx

MC12X_suby = _ida_domain.MC12X_suby

MC12X_tstw = _ida_domain.MC12X_tstw

MC12X_tstx = _ida_domain.MC12X_tstx

MC12X_tsty = _ida_domain.MC12X_tsty

MC12X_sys = _ida_domain.MC12X_sys

MC12XGATE_adc = _ida_domain.MC12XGATE_adc

MC12XGATE_add = _ida_domain.MC12XGATE_add

MC12XGATE_addh = _ida_domain.MC12XGATE_addh

MC12XGATE_addl = _ida_domain.MC12XGATE_addl

MC12XGATE_and = _ida_domain.MC12XGATE_and

MC12XGATE_andh = _ida_domain.MC12XGATE_andh

MC12XGATE_andl = _ida_domain.MC12XGATE_andl

MC12XGATE_asr = _ida_domain.MC12XGATE_asr

MC12XGATE_bcc = _ida_domain.MC12XGATE_bcc

MC12XGATE_bcs = _ida_domain.MC12XGATE_bcs

MC12XGATE_beq = _ida_domain.MC12XGATE_beq

MC12XGATE_bfext = _ida_domain.MC12XGATE_bfext

MC12XGATE_bffo = _ida_domain.MC12XGATE_bffo

MC12XGATE_bfins = _ida_domain.MC12XGATE_bfins

MC12XGATE_bfinsi = _ida_domain.MC12XGATE_bfinsi

MC12XGATE_bfinsx = _ida_domain.MC12XGATE_bfinsx

MC12XGATE_bge = _ida_domain.MC12XGATE_bge

MC12XGATE_bgt = _ida_domain.MC12XGATE_bgt

MC12XGATE_bhi = _ida_domain.MC12XGATE_bhi

MC12XGATE_bhs = _ida_domain.MC12XGATE_bhs

MC12XGATE_bith = _ida_domain.MC12XGATE_bith

MC12XGATE_bitl = _ida_domain.MC12XGATE_bitl

MC12XGATE_ble = _ida_domain.MC12XGATE_ble

MC12XGATE_blo = _ida_domain.MC12XGATE_blo

MC12XGATE_bls = _ida_domain.MC12XGATE_bls

MC12XGATE_blt = _ida_domain.MC12XGATE_blt

MC12XGATE_bmi = _ida_domain.MC12XGATE_bmi

MC12XGATE_bne = _ida_domain.MC12XGATE_bne

MC12XGATE_bpl = _ida_domain.MC12XGATE_bpl

MC12XGATE_bra = _ida_domain.MC12XGATE_bra

MC12XGATE_brk = _ida_domain.MC12XGATE_brk

MC12XGATE_bvc = _ida_domain.MC12XGATE_bvc

MC12XGATE_bvs = _ida_domain.MC12XGATE_bvs

MC12XGATE_cmp = _ida_domain.MC12XGATE_cmp

MC12XGATE_cmpl = _ida_domain.MC12XGATE_cmpl

MC12XGATE_com = _ida_domain.MC12XGATE_com

MC12XGATE_cpc = _ida_domain.MC12XGATE_cpc

MC12XGATE_cpch = _ida_domain.MC12XGATE_cpch

MC12XGATE_csem = _ida_domain.MC12XGATE_csem

MC12XGATE_csl = _ida_domain.MC12XGATE_csl

MC12XGATE_csr = _ida_domain.MC12XGATE_csr

MC12XGATE_jal = _ida_domain.MC12XGATE_jal

MC12XGATE_ldb = _ida_domain.MC12XGATE_ldb

MC12XGATE_ldh = _ida_domain.MC12XGATE_ldh

MC12XGATE_ldl = _ida_domain.MC12XGATE_ldl

MC12XGATE_ldw = _ida_domain.MC12XGATE_ldw

MC12XGATE_lsl = _ida_domain.MC12XGATE_lsl

MC12XGATE_lsr = _ida_domain.MC12XGATE_lsr

MC12XGATE_mov = _ida_domain.MC12XGATE_mov

MC12XGATE_neg = _ida_domain.MC12XGATE_neg

MC12XGATE_nop = _ida_domain.MC12XGATE_nop

MC12XGATE_or = _ida_domain.MC12XGATE_or

MC12XGATE_orh = _ida_domain.MC12XGATE_orh

MC12XGATE_orl = _ida_domain.MC12XGATE_orl

MC12XGATE_par = _ida_domain.MC12XGATE_par

MC12XGATE_rol = _ida_domain.MC12XGATE_rol

MC12XGATE_ror = _ida_domain.MC12XGATE_ror

MC12XGATE_rts = _ida_domain.MC12XGATE_rts

MC12XGATE_sbc = _ida_domain.MC12XGATE_sbc

MC12XGATE_sex = _ida_domain.MC12XGATE_sex

MC12XGATE_sif = _ida_domain.MC12XGATE_sif

MC12XGATE_ssem = _ida_domain.MC12XGATE_ssem

MC12XGATE_stb = _ida_domain.MC12XGATE_stb

MC12XGATE_stw = _ida_domain.MC12XGATE_stw

MC12XGATE_sub = _ida_domain.MC12XGATE_sub

MC12XGATE_subh = _ida_domain.MC12XGATE_subh

MC12XGATE_subl = _ida_domain.MC12XGATE_subl

MC12XGATE_tfr = _ida_domain.MC12XGATE_tfr

MC12XGATE_tst = _ida_domain.MC12XGATE_tst

MC12XGATE_xnor = _ida_domain.MC12XGATE_xnor

MC12XGATE_xnorh = _ida_domain.MC12XGATE_xnorh

MC12XGATE_xnorl = _ida_domain.MC12XGATE_xnorl

MC12XGATE_add16 = _ida_domain.MC12XGATE_add16

MC12XGATE_and16 = _ida_domain.MC12XGATE_and16

MC12XGATE_cmp16 = _ida_domain.MC12XGATE_cmp16

MC12XGATE_ldw16 = _ida_domain.MC12XGATE_ldw16

MC12XGATE_or16 = _ida_domain.MC12XGATE_or16

MC12XGATE_sub16 = _ida_domain.MC12XGATE_sub16

MC12XGATE_xnor16 = _ida_domain.MC12XGATE_xnor16

MC12_last = _ida_domain.MC12_last

MC6816_null = _ida_domain.MC6816_null

MC6816_ldaa = _ida_domain.MC6816_ldaa

MC6816_ldab = _ida_domain.MC6816_ldab

MC6816_ldd = _ida_domain.MC6816_ldd

MC6816_lde = _ida_domain.MC6816_lde

MC6816_lded = _ida_domain.MC6816_lded

MC6816_movb = _ida_domain.MC6816_movb

MC6816_movw = _ida_domain.MC6816_movw

MC6816_staa = _ida_domain.MC6816_staa

MC6816_stab = _ida_domain.MC6816_stab

MC6816_std = _ida_domain.MC6816_std

MC6816_ste = _ida_domain.MC6816_ste

MC6816_sted = _ida_domain.MC6816_sted

MC6816_tab = _ida_domain.MC6816_tab

MC6816_tba = _ida_domain.MC6816_tba

MC6816_tde = _ida_domain.MC6816_tde

MC6816_ted = _ida_domain.MC6816_ted

MC6816_xgab = _ida_domain.MC6816_xgab

MC6816_xgde = _ida_domain.MC6816_xgde

MC6816_aba = _ida_domain.MC6816_aba

MC6816_adca = _ida_domain.MC6816_adca

MC6816_adcb = _ida_domain.MC6816_adcb

MC6816_adcd = _ida_domain.MC6816_adcd

MC6816_adce = _ida_domain.MC6816_adce

MC6816_adda = _ida_domain.MC6816_adda

MC6816_addb = _ida_domain.MC6816_addb

MC6816_addd = _ida_domain.MC6816_addd

MC6816_adde = _ida_domain.MC6816_adde

MC6816_ade = _ida_domain.MC6816_ade

MC6816_sba = _ida_domain.MC6816_sba

MC6816_sbca = _ida_domain.MC6816_sbca

MC6816_sbcb = _ida_domain.MC6816_sbcb

MC6816_sbcd = _ida_domain.MC6816_sbcd

MC6816_sbce = _ida_domain.MC6816_sbce

MC6816_sde = _ida_domain.MC6816_sde

MC6816_suba = _ida_domain.MC6816_suba

MC6816_subb = _ida_domain.MC6816_subb

MC6816_subd = _ida_domain.MC6816_subd

MC6816_sube = _ida_domain.MC6816_sube

MC6816_daa = _ida_domain.MC6816_daa

MC6816_sxt = _ida_domain.MC6816_sxt

MC6816_cba = _ida_domain.MC6816_cba

MC6816_cmpa = _ida_domain.MC6816_cmpa

MC6816_cmpb = _ida_domain.MC6816_cmpb

MC6816_cpd = _ida_domain.MC6816_cpd

MC6816_cpe = _ida_domain.MC6816_cpe

MC6816_tst = _ida_domain.MC6816_tst

MC6816_tsta = _ida_domain.MC6816_tsta

MC6816_tstb = _ida_domain.MC6816_tstb

MC6816_tstd = _ida_domain.MC6816_tstd

MC6816_tste = _ida_domain.MC6816_tste

MC6816_tstw = _ida_domain.MC6816_tstw

MC6816_ediv = _ida_domain.MC6816_ediv

MC6816_edivs = _ida_domain.MC6816_edivs

MC6816_emul = _ida_domain.MC6816_emul

MC6816_emuls = _ida_domain.MC6816_emuls

MC6816_fdiv = _ida_domain.MC6816_fdiv

MC6816_fmuls = _ida_domain.MC6816_fmuls

MC6816_idiv = _ida_domain.MC6816_idiv

MC6816_mul = _ida_domain.MC6816_mul

MC6816_dec = _ida_domain.MC6816_dec

MC6816_deca = _ida_domain.MC6816_deca

MC6816_decb = _ida_domain.MC6816_decb

MC6816_decw = _ida_domain.MC6816_decw

MC6816_inc = _ida_domain.MC6816_inc

MC6816_inca = _ida_domain.MC6816_inca

MC6816_incb = _ida_domain.MC6816_incb

MC6816_incw = _ida_domain.MC6816_incw

MC6816_clr = _ida_domain.MC6816_clr

MC6816_clra = _ida_domain.MC6816_clra

MC6816_clrb = _ida_domain.MC6816_clrb

MC6816_clrd = _ida_domain.MC6816_clrd

MC6816_clre = _ida_domain.MC6816_clre

MC6816_clrw = _ida_domain.MC6816_clrw

MC6816_com = _ida_domain.MC6816_com

MC6816_coma = _ida_domain.MC6816_coma

MC6816_comb = _ida_domain.MC6816_comb

MC6816_comd = _ida_domain.MC6816_comd

MC6816_come = _ida_domain.MC6816_come

MC6816_comw = _ida_domain.MC6816_comw

MC6816_neg = _ida_domain.MC6816_neg

MC6816_nega = _ida_domain.MC6816_nega

MC6816_negb = _ida_domain.MC6816_negb

MC6816_negd = _ida_domain.MC6816_negd

MC6816_nege = _ida_domain.MC6816_nege

MC6816_negw = _ida_domain.MC6816_negw

MC6816_anda = _ida_domain.MC6816_anda

MC6816_andb = _ida_domain.MC6816_andb

MC6816_andd = _ida_domain.MC6816_andd

MC6816_ande = _ida_domain.MC6816_ande

MC6816_eora = _ida_domain.MC6816_eora

MC6816_eorb = _ida_domain.MC6816_eorb

MC6816_eord = _ida_domain.MC6816_eord

MC6816_eore = _ida_domain.MC6816_eore

MC6816_oraa = _ida_domain.MC6816_oraa

MC6816_orab = _ida_domain.MC6816_orab

MC6816_ord = _ida_domain.MC6816_ord

MC6816_ore = _ida_domain.MC6816_ore

MC6816_bita = _ida_domain.MC6816_bita

MC6816_bitb = _ida_domain.MC6816_bitb

MC6816_bclr = _ida_domain.MC6816_bclr

MC6816_bclrw = _ida_domain.MC6816_bclrw

MC6816_bset = _ida_domain.MC6816_bset

MC6816_bsetw = _ida_domain.MC6816_bsetw

MC6816_lsr = _ida_domain.MC6816_lsr

MC6816_lsra = _ida_domain.MC6816_lsra

MC6816_lsrb = _ida_domain.MC6816_lsrb

MC6816_lsrd = _ida_domain.MC6816_lsrd

MC6816_lsre = _ida_domain.MC6816_lsre

MC6816_lsrw = _ida_domain.MC6816_lsrw

MC6816_asl = _ida_domain.MC6816_asl

MC6816_asla = _ida_domain.MC6816_asla

MC6816_aslb = _ida_domain.MC6816_aslb

MC6816_asld = _ida_domain.MC6816_asld

MC6816_asle = _ida_domain.MC6816_asle

MC6816_aslw = _ida_domain.MC6816_aslw

MC6816_asr = _ida_domain.MC6816_asr

MC6816_asra = _ida_domain.MC6816_asra

MC6816_asrb = _ida_domain.MC6816_asrb

MC6816_asrd = _ida_domain.MC6816_asrd

MC6816_asre = _ida_domain.MC6816_asre

MC6816_asrw = _ida_domain.MC6816_asrw

MC6816_rol = _ida_domain.MC6816_rol

MC6816_rola = _ida_domain.MC6816_rola

MC6816_rolb = _ida_domain.MC6816_rolb

MC6816_rold = _ida_domain.MC6816_rold

MC6816_role = _ida_domain.MC6816_role

MC6816_rolw = _ida_domain.MC6816_rolw

MC6816_ror = _ida_domain.MC6816_ror

MC6816_rora = _ida_domain.MC6816_rora

MC6816_rorb = _ida_domain.MC6816_rorb

MC6816_rord = _ida_domain.MC6816_rord

MC6816_rore = _ida_domain.MC6816_rore

MC6816_rorw = _ida_domain.MC6816_rorw

MC6816_bra = _ida_domain.MC6816_bra

MC6816_brn = _ida_domain.MC6816_brn

MC6816_bcc = _ida_domain.MC6816_bcc

MC6816_bcs = _ida_domain.MC6816_bcs

MC6816_beq = _ida_domain.MC6816_beq

MC6816_bmi = _ida_domain.MC6816_bmi

MC6816_bne = _ida_domain.MC6816_bne

MC6816_bpl = _ida_domain.MC6816_bpl

MC6816_bvc = _ida_domain.MC6816_bvc

MC6816_bvs = _ida_domain.MC6816_bvs

MC6816_bhi = _ida_domain.MC6816_bhi

MC6816_bls = _ida_domain.MC6816_bls

MC6816_bge = _ida_domain.MC6816_bge

MC6816_bgt = _ida_domain.MC6816_bgt

MC6816_ble = _ida_domain.MC6816_ble

MC6816_blt = _ida_domain.MC6816_blt

MC6816_lbra = _ida_domain.MC6816_lbra

MC6816_lbrn = _ida_domain.MC6816_lbrn

MC6816_lbcc = _ida_domain.MC6816_lbcc

MC6816_lbcs = _ida_domain.MC6816_lbcs

MC6816_lbeq = _ida_domain.MC6816_lbeq

MC6816_lbev = _ida_domain.MC6816_lbev

MC6816_lbmi = _ida_domain.MC6816_lbmi

MC6816_lbmv = _ida_domain.MC6816_lbmv

MC6816_lbne = _ida_domain.MC6816_lbne

MC6816_lbpl = _ida_domain.MC6816_lbpl

MC6816_lbvc = _ida_domain.MC6816_lbvc

MC6816_lbvs = _ida_domain.MC6816_lbvs

MC6816_lbhi = _ida_domain.MC6816_lbhi

MC6816_lbls = _ida_domain.MC6816_lbls

MC6816_lbge = _ida_domain.MC6816_lbge

MC6816_lbgt = _ida_domain.MC6816_lbgt

MC6816_lble = _ida_domain.MC6816_lble

MC6816_lblt = _ida_domain.MC6816_lblt

MC6816_brclr = _ida_domain.MC6816_brclr

MC6816_brset = _ida_domain.MC6816_brset

MC6816_jmp = _ida_domain.MC6816_jmp

MC6816_bsr = _ida_domain.MC6816_bsr

MC6816_jsr = _ida_domain.MC6816_jsr

MC6816_lbsr = _ida_domain.MC6816_lbsr

MC6816_rts = _ida_domain.MC6816_rts

MC6816_rti = _ida_domain.MC6816_rti

MC6816_swi = _ida_domain.MC6816_swi

MC6816_abx = _ida_domain.MC6816_abx

MC6816_aby = _ida_domain.MC6816_aby

MC6816_abz = _ida_domain.MC6816_abz

MC6816_adx = _ida_domain.MC6816_adx

MC6816_ady = _ida_domain.MC6816_ady

MC6816_adz = _ida_domain.MC6816_adz

MC6816_aex = _ida_domain.MC6816_aex

MC6816_aey = _ida_domain.MC6816_aey

MC6816_aez = _ida_domain.MC6816_aez

MC6816_aix = _ida_domain.MC6816_aix

MC6816_aiy = _ida_domain.MC6816_aiy

MC6816_aiz = _ida_domain.MC6816_aiz

MC6816_cpx = _ida_domain.MC6816_cpx

MC6816_cpy = _ida_domain.MC6816_cpy

MC6816_cpz = _ida_domain.MC6816_cpz

MC6816_ldx = _ida_domain.MC6816_ldx

MC6816_ldy = _ida_domain.MC6816_ldy

MC6816_ldz = _ida_domain.MC6816_ldz

MC6816_stx = _ida_domain.MC6816_stx

MC6816_sty = _ida_domain.MC6816_sty

MC6816_stz = _ida_domain.MC6816_stz

MC6816_tsx = _ida_domain.MC6816_tsx

MC6816_tsy = _ida_domain.MC6816_tsy

MC6816_tsz = _ida_domain.MC6816_tsz

MC6816_txs = _ida_domain.MC6816_txs

MC6816_txy = _ida_domain.MC6816_txy

MC6816_txz = _ida_domain.MC6816_txz

MC6816_tys = _ida_domain.MC6816_tys

MC6816_tyx = _ida_domain.MC6816_tyx

MC6816_tyz = _ida_domain.MC6816_tyz

MC6816_tzs = _ida_domain.MC6816_tzs

MC6816_tzx = _ida_domain.MC6816_tzx

MC6816_tzy = _ida_domain.MC6816_tzy

MC6816_xgdx = _ida_domain.MC6816_xgdx

MC6816_xgdy = _ida_domain.MC6816_xgdy

MC6816_xgdz = _ida_domain.MC6816_xgdz

MC6816_xgex = _ida_domain.MC6816_xgex

MC6816_xgey = _ida_domain.MC6816_xgey

MC6816_xgez = _ida_domain.MC6816_xgez

MC6816_tbek = _ida_domain.MC6816_tbek

MC6816_tbsk = _ida_domain.MC6816_tbsk

MC6816_tbxk = _ida_domain.MC6816_tbxk

MC6816_tbyk = _ida_domain.MC6816_tbyk

MC6816_tbzk = _ida_domain.MC6816_tbzk

MC6816_tekb = _ida_domain.MC6816_tekb

MC6816_tskb = _ida_domain.MC6816_tskb

MC6816_txkb = _ida_domain.MC6816_txkb

MC6816_tykb = _ida_domain.MC6816_tykb

MC6816_tzkb = _ida_domain.MC6816_tzkb

MC6816_ais = _ida_domain.MC6816_ais

MC6816_cps = _ida_domain.MC6816_cps

MC6816_lds = _ida_domain.MC6816_lds

MC6816_sts = _ida_domain.MC6816_sts

MC6816_psha = _ida_domain.MC6816_psha

MC6816_pshb = _ida_domain.MC6816_pshb

MC6816_pshm = _ida_domain.MC6816_pshm

MC6816_pula = _ida_domain.MC6816_pula

MC6816_pulb = _ida_domain.MC6816_pulb

MC6816_pulm = _ida_domain.MC6816_pulm

MC6816_andp = _ida_domain.MC6816_andp

MC6816_orp = _ida_domain.MC6816_orp

MC6816_tap = _ida_domain.MC6816_tap

MC6816_tdp = _ida_domain.MC6816_tdp

MC6816_tpa = _ida_domain.MC6816_tpa

MC6816_tpd = _ida_domain.MC6816_tpd

MC6816_ace = _ida_domain.MC6816_ace

MC6816_aced = _ida_domain.MC6816_aced

MC6816_aslm = _ida_domain.MC6816_aslm

MC6816_asrm = _ida_domain.MC6816_asrm

MC6816_clrm = _ida_domain.MC6816_clrm

MC6816_ldhi = _ida_domain.MC6816_ldhi

MC6816_mac = _ida_domain.MC6816_mac

MC6816_pshmac = _ida_domain.MC6816_pshmac

MC6816_pulmac = _ida_domain.MC6816_pulmac

MC6816_rmac = _ida_domain.MC6816_rmac

MC6816_tdmsk = _ida_domain.MC6816_tdmsk

MC6816_tedm = _ida_domain.MC6816_tedm

MC6816_tem = _ida_domain.MC6816_tem

MC6816_tmer = _ida_domain.MC6816_tmer

MC6816_tmet = _ida_domain.MC6816_tmet

MC6816_tmxed = _ida_domain.MC6816_tmxed

MC6816_lpstop = _ida_domain.MC6816_lpstop

MC6816_wai = _ida_domain.MC6816_wai

MC6816_bgnd = _ida_domain.MC6816_bgnd

MC6816_nop = _ida_domain.MC6816_nop

MC6816_last = _ida_domain.MC6816_last

I960_null = _ida_domain.I960_null

I960_addc = _ida_domain.I960_addc

I960_addi = _ida_domain.I960_addi

I960_addo = _ida_domain.I960_addo

I960_alterbit = _ida_domain.I960_alterbit

I960_and = _ida_domain.I960_and

I960_andnot = _ida_domain.I960_andnot

I960_atadd = _ida_domain.I960_atadd

I960_atmod = _ida_domain.I960_atmod

I960_b = _ida_domain.I960_b

I960_bal = _ida_domain.I960_bal

I960_balx = _ida_domain.I960_balx

I960_bbc = _ida_domain.I960_bbc

I960_bbs = _ida_domain.I960_bbs

I960_bno = _ida_domain.I960_bno

I960_bg = _ida_domain.I960_bg

I960_be = _ida_domain.I960_be

I960_bge = _ida_domain.I960_bge

I960_bl = _ida_domain.I960_bl

I960_bne = _ida_domain.I960_bne

I960_ble = _ida_domain.I960_ble

I960_bo = _ida_domain.I960_bo

I960_bx = _ida_domain.I960_bx

I960_call = _ida_domain.I960_call

I960_calls = _ida_domain.I960_calls

I960_callx = _ida_domain.I960_callx

I960_chkbit = _ida_domain.I960_chkbit

I960_clrbit = _ida_domain.I960_clrbit

I960_cmpdeci = _ida_domain.I960_cmpdeci

I960_cmpdeco = _ida_domain.I960_cmpdeco

I960_cmpi = _ida_domain.I960_cmpi

I960_cmpibno = _ida_domain.I960_cmpibno

I960_cmpibg = _ida_domain.I960_cmpibg

I960_cmpibe = _ida_domain.I960_cmpibe

I960_cmpibge = _ida_domain.I960_cmpibge

I960_cmpibl = _ida_domain.I960_cmpibl

I960_cmpibne = _ida_domain.I960_cmpibne

I960_cmpible = _ida_domain.I960_cmpible

I960_cmpibo = _ida_domain.I960_cmpibo

I960_cmpinci = _ida_domain.I960_cmpinci

I960_cmpinco = _ida_domain.I960_cmpinco

I960_cmpo = _ida_domain.I960_cmpo

I960_cmpobg = _ida_domain.I960_cmpobg

I960_cmpobe = _ida_domain.I960_cmpobe

I960_cmpobge = _ida_domain.I960_cmpobge

I960_cmpobl = _ida_domain.I960_cmpobl

I960_cmpobne = _ida_domain.I960_cmpobne

I960_cmpoble = _ida_domain.I960_cmpoble

I960_concmpi = _ida_domain.I960_concmpi

I960_concmpo = _ida_domain.I960_concmpo

I960_divi = _ida_domain.I960_divi

I960_divo = _ida_domain.I960_divo

I960_ediv = _ida_domain.I960_ediv

I960_emul = _ida_domain.I960_emul

I960_eshro = _ida_domain.I960_eshro

I960_extract = _ida_domain.I960_extract

I960_faultno = _ida_domain.I960_faultno

I960_faultg = _ida_domain.I960_faultg

I960_faulte = _ida_domain.I960_faulte

I960_faultge = _ida_domain.I960_faultge

I960_faultl = _ida_domain.I960_faultl

I960_faultne = _ida_domain.I960_faultne

I960_faultle = _ida_domain.I960_faultle

I960_faulto = _ida_domain.I960_faulto

I960_flushreg = _ida_domain.I960_flushreg

I960_fmark = _ida_domain.I960_fmark

I960_ld = _ida_domain.I960_ld

I960_lda = _ida_domain.I960_lda

I960_ldib = _ida_domain.I960_ldib

I960_ldis = _ida_domain.I960_ldis

I960_ldl = _ida_domain.I960_ldl

I960_ldob = _ida_domain.I960_ldob

I960_ldos = _ida_domain.I960_ldos

I960_ldq = _ida_domain.I960_ldq

I960_ldt = _ida_domain.I960_ldt

I960_mark = _ida_domain.I960_mark

I960_modac = _ida_domain.I960_modac

I960_modi = _ida_domain.I960_modi

I960_modify = _ida_domain.I960_modify

I960_modpc = _ida_domain.I960_modpc

I960_modtc = _ida_domain.I960_modtc

I960_mov = _ida_domain.I960_mov

I960_movl = _ida_domain.I960_movl

I960_movq = _ida_domain.I960_movq

I960_movt = _ida_domain.I960_movt

I960_muli = _ida_domain.I960_muli

I960_mulo = _ida_domain.I960_mulo

I960_nand = _ida_domain.I960_nand

I960_nor = _ida_domain.I960_nor

I960_not = _ida_domain.I960_not

I960_notand = _ida_domain.I960_notand

I960_notbit = _ida_domain.I960_notbit

I960_notor = _ida_domain.I960_notor

I960_or = _ida_domain.I960_or

I960_ornot = _ida_domain.I960_ornot

I960_remi = _ida_domain.I960_remi

I960_remo = _ida_domain.I960_remo

I960_ret = _ida_domain.I960_ret

I960_rotate = _ida_domain.I960_rotate

I960_scanbit = _ida_domain.I960_scanbit

I960_scanbyte = _ida_domain.I960_scanbyte

I960_setbit = _ida_domain.I960_setbit

I960_shli = _ida_domain.I960_shli

I960_shlo = _ida_domain.I960_shlo

I960_shrdi = _ida_domain.I960_shrdi

I960_shri = _ida_domain.I960_shri

I960_shro = _ida_domain.I960_shro

I960_spanbit = _ida_domain.I960_spanbit

I960_st = _ida_domain.I960_st

I960_stib = _ida_domain.I960_stib

I960_stis = _ida_domain.I960_stis

I960_stl = _ida_domain.I960_stl

I960_stob = _ida_domain.I960_stob

I960_stos = _ida_domain.I960_stos

I960_stq = _ida_domain.I960_stq

I960_stt = _ida_domain.I960_stt

I960_subc = _ida_domain.I960_subc

I960_subi = _ida_domain.I960_subi

I960_subo = _ida_domain.I960_subo

I960_syncf = _ida_domain.I960_syncf

I960_testno = _ida_domain.I960_testno

I960_testg = _ida_domain.I960_testg

I960_teste = _ida_domain.I960_teste

I960_testge = _ida_domain.I960_testge

I960_testl = _ida_domain.I960_testl

I960_testne = _ida_domain.I960_testne

I960_testle = _ida_domain.I960_testle

I960_testo = _ida_domain.I960_testo

I960_xnor = _ida_domain.I960_xnor

I960_xor = _ida_domain.I960_xor

I960_sdma = _ida_domain.I960_sdma

I960_sysctl = _ida_domain.I960_sysctl

I960_udma = _ida_domain.I960_udma

I960_dcinva = _ida_domain.I960_dcinva

I960_cmpob = _ida_domain.I960_cmpob

I960_cmpib = _ida_domain.I960_cmpib

I960_cmpos = _ida_domain.I960_cmpos

I960_cmpis = _ida_domain.I960_cmpis

I960_bswap = _ida_domain.I960_bswap

I960_intdis = _ida_domain.I960_intdis

I960_inten = _ida_domain.I960_inten

I960_synmov = _ida_domain.I960_synmov

I960_synmovl = _ida_domain.I960_synmovl

I960_synmovq = _ida_domain.I960_synmovq

I960_cmpstr = _ida_domain.I960_cmpstr

I960_movqstr = _ida_domain.I960_movqstr

I960_movstr = _ida_domain.I960_movstr

I960_inspacc = _ida_domain.I960_inspacc

I960_ldphy = _ida_domain.I960_ldphy

I960_synld = _ida_domain.I960_synld

I960_fill = _ida_domain.I960_fill

I960_daddc = _ida_domain.I960_daddc

I960_dsubc = _ida_domain.I960_dsubc

I960_dmovt = _ida_domain.I960_dmovt

I960_condrec = _ida_domain.I960_condrec

I960_receive = _ida_domain.I960_receive

I960_intctl = _ida_domain.I960_intctl

I960_icctl = _ida_domain.I960_icctl

I960_dcctl = _ida_domain.I960_dcctl

I960_halt = _ida_domain.I960_halt

I960_send = _ida_domain.I960_send

I960_sendserv = _ida_domain.I960_sendserv

I960_resumprcs = _ida_domain.I960_resumprcs

I960_schedprcs = _ida_domain.I960_schedprcs

I960_saveprcs = _ida_domain.I960_saveprcs

I960_condwait = _ida_domain.I960_condwait

I960_wait = _ida_domain.I960_wait

I960_signal = _ida_domain.I960_signal

I960_ldtime = _ida_domain.I960_ldtime

I960_addono = _ida_domain.I960_addono

I960_addino = _ida_domain.I960_addino

I960_subono = _ida_domain.I960_subono

I960_subino = _ida_domain.I960_subino

I960_selno = _ida_domain.I960_selno

I960_addog = _ida_domain.I960_addog

I960_addig = _ida_domain.I960_addig

I960_subog = _ida_domain.I960_subog

I960_subig = _ida_domain.I960_subig

I960_selg = _ida_domain.I960_selg

I960_addoe = _ida_domain.I960_addoe

I960_addie = _ida_domain.I960_addie

I960_suboe = _ida_domain.I960_suboe

I960_subie = _ida_domain.I960_subie

I960_sele = _ida_domain.I960_sele

I960_addoge = _ida_domain.I960_addoge

I960_addige = _ida_domain.I960_addige

I960_suboge = _ida_domain.I960_suboge

I960_subige = _ida_domain.I960_subige

I960_selge = _ida_domain.I960_selge

I960_addol = _ida_domain.I960_addol

I960_addil = _ida_domain.I960_addil

I960_subol = _ida_domain.I960_subol

I960_subil = _ida_domain.I960_subil

I960_sell = _ida_domain.I960_sell

I960_addone = _ida_domain.I960_addone

I960_addine = _ida_domain.I960_addine

I960_subone = _ida_domain.I960_subone

I960_subine = _ida_domain.I960_subine

I960_selne = _ida_domain.I960_selne

I960_addole = _ida_domain.I960_addole

I960_addile = _ida_domain.I960_addile

I960_subole = _ida_domain.I960_subole

I960_subile = _ida_domain.I960_subile

I960_selle = _ida_domain.I960_selle

I960_addoo = _ida_domain.I960_addoo

I960_addio = _ida_domain.I960_addio

I960_suboo = _ida_domain.I960_suboo

I960_subio = _ida_domain.I960_subio

I960_selo = _ida_domain.I960_selo

I960_faddr = _ida_domain.I960_faddr

I960_fp_first = _ida_domain.I960_fp_first

I960_faddrl = _ida_domain.I960_faddrl

I960_fatanr = _ida_domain.I960_fatanr

I960_fatanrl = _ida_domain.I960_fatanrl

I960_fclassr = _ida_domain.I960_fclassr

I960_fclassrl = _ida_domain.I960_fclassrl

I960_fcmpor = _ida_domain.I960_fcmpor

I960_fcmporl = _ida_domain.I960_fcmporl

I960_fcmpr = _ida_domain.I960_fcmpr

I960_fcmprl = _ida_domain.I960_fcmprl

I960_fcosr = _ida_domain.I960_fcosr

I960_fcosrl = _ida_domain.I960_fcosrl

I960_fcpyrsre = _ida_domain.I960_fcpyrsre

I960_fcpysre = _ida_domain.I960_fcpysre

I960_fcvtilr = _ida_domain.I960_fcvtilr

I960_fcvtir = _ida_domain.I960_fcvtir

I960_fcvtri = _ida_domain.I960_fcvtri

I960_fcvtril = _ida_domain.I960_fcvtril

I960_fcvtzri = _ida_domain.I960_fcvtzri

I960_fcvtzril = _ida_domain.I960_fcvtzril

I960_fdivr = _ida_domain.I960_fdivr

I960_fdivrl = _ida_domain.I960_fdivrl

I960_fexpr = _ida_domain.I960_fexpr

I960_fexprl = _ida_domain.I960_fexprl

I960_flogbnr = _ida_domain.I960_flogbnr

I960_flogbnrl = _ida_domain.I960_flogbnrl

I960_flogepr = _ida_domain.I960_flogepr

I960_flogeprl = _ida_domain.I960_flogeprl

I960_flogr = _ida_domain.I960_flogr

I960_flogrl = _ida_domain.I960_flogrl

I960_fmovr = _ida_domain.I960_fmovr

I960_fmovre = _ida_domain.I960_fmovre

I960_fmovrl = _ida_domain.I960_fmovrl

I960_fmulr = _ida_domain.I960_fmulr

I960_fmulrl = _ida_domain.I960_fmulrl

I960_fremr = _ida_domain.I960_fremr

I960_fremrl = _ida_domain.I960_fremrl

I960_froundr = _ida_domain.I960_froundr

I960_froundrl = _ida_domain.I960_froundrl

I960_fscaler = _ida_domain.I960_fscaler

I960_fscalerl = _ida_domain.I960_fscalerl

I960_fsinr = _ida_domain.I960_fsinr

I960_fsinrl = _ida_domain.I960_fsinrl

I960_fsqrtr = _ida_domain.I960_fsqrtr

I960_fsqrtrl = _ida_domain.I960_fsqrtrl

I960_fsubr = _ida_domain.I960_fsubr

I960_fsubrl = _ida_domain.I960_fsubrl

I960_ftanr = _ida_domain.I960_ftanr

I960_ftanrl = _ida_domain.I960_ftanrl

I960_fp_last = _ida_domain.I960_fp_last

I960_last = _ida_domain.I960_last

F2MC_null = _ida_domain.F2MC_null

F2MC_mov = _ida_domain.F2MC_mov

F2MC_movn = _ida_domain.F2MC_movn

F2MC_movx = _ida_domain.F2MC_movx

F2MC_xch = _ida_domain.F2MC_xch

F2MC_movw = _ida_domain.F2MC_movw

F2MC_xchw = _ida_domain.F2MC_xchw

F2MC_movl = _ida_domain.F2MC_movl

F2MC_add = _ida_domain.F2MC_add

F2MC_addc1 = _ida_domain.F2MC_addc1

F2MC_addc2 = _ida_domain.F2MC_addc2

F2MC_adddc = _ida_domain.F2MC_adddc

F2MC_sub = _ida_domain.F2MC_sub

F2MC_subc1 = _ida_domain.F2MC_subc1

F2MC_subc2 = _ida_domain.F2MC_subc2

F2MC_subdc = _ida_domain.F2MC_subdc

F2MC_addw1 = _ida_domain.F2MC_addw1

F2MC_addw2 = _ida_domain.F2MC_addw2

F2MC_addcw = _ida_domain.F2MC_addcw

F2MC_subw1 = _ida_domain.F2MC_subw1

F2MC_subw2 = _ida_domain.F2MC_subw2

F2MC_subcw = _ida_domain.F2MC_subcw

F2MC_addl = _ida_domain.F2MC_addl

F2MC_subl = _ida_domain.F2MC_subl

F2MC_inc = _ida_domain.F2MC_inc

F2MC_dec = _ida_domain.F2MC_dec

F2MC_incw = _ida_domain.F2MC_incw

F2MC_decw = _ida_domain.F2MC_decw

F2MC_incl = _ida_domain.F2MC_incl

F2MC_decl = _ida_domain.F2MC_decl

F2MC_cmp1 = _ida_domain.F2MC_cmp1

F2MC_cmp2 = _ida_domain.F2MC_cmp2

F2MC_cmpw1 = _ida_domain.F2MC_cmpw1

F2MC_cmpw2 = _ida_domain.F2MC_cmpw2

F2MC_cmpl = _ida_domain.F2MC_cmpl

F2MC_divu1 = _ida_domain.F2MC_divu1

F2MC_divu2 = _ida_domain.F2MC_divu2

F2MC_divuw = _ida_domain.F2MC_divuw

F2MC_mulu1 = _ida_domain.F2MC_mulu1

F2MC_mulu2 = _ida_domain.F2MC_mulu2

F2MC_muluw1 = _ida_domain.F2MC_muluw1

F2MC_muluw2 = _ida_domain.F2MC_muluw2

F2MC_div1 = _ida_domain.F2MC_div1

F2MC_div2 = _ida_domain.F2MC_div2

F2MC_divw = _ida_domain.F2MC_divw

F2MC_mul1 = _ida_domain.F2MC_mul1

F2MC_mul2 = _ida_domain.F2MC_mul2

F2MC_mulw1 = _ida_domain.F2MC_mulw1

F2MC_mulw2 = _ida_domain.F2MC_mulw2

F2MC_and = _ida_domain.F2MC_and

F2MC_or = _ida_domain.F2MC_or

F2MC_xor = _ida_domain.F2MC_xor

F2MC_not = _ida_domain.F2MC_not

F2MC_andw1 = _ida_domain.F2MC_andw1

F2MC_andw2 = _ida_domain.F2MC_andw2

F2MC_orw1 = _ida_domain.F2MC_orw1

F2MC_orw2 = _ida_domain.F2MC_orw2

F2MC_xorw1 = _ida_domain.F2MC_xorw1

F2MC_xorw2 = _ida_domain.F2MC_xorw2

F2MC_notw = _ida_domain.F2MC_notw

F2MC_andl = _ida_domain.F2MC_andl

F2MC_orl = _ida_domain.F2MC_orl

F2MC_xorl = _ida_domain.F2MC_xorl

F2MC_neg = _ida_domain.F2MC_neg

F2MC_negw = _ida_domain.F2MC_negw

F2MC_nrml = _ida_domain.F2MC_nrml

F2MC_rorc = _ida_domain.F2MC_rorc

F2MC_rolc = _ida_domain.F2MC_rolc

F2MC_asr = _ida_domain.F2MC_asr

F2MC_lsr = _ida_domain.F2MC_lsr

F2MC_lsl = _ida_domain.F2MC_lsl

F2MC_asrw1 = _ida_domain.F2MC_asrw1

F2MC_asrw2 = _ida_domain.F2MC_asrw2

F2MC_lsrw1 = _ida_domain.F2MC_lsrw1

F2MC_lsrw2 = _ida_domain.F2MC_lsrw2

F2MC_lslw1 = _ida_domain.F2MC_lslw1

F2MC_lslw2 = _ida_domain.F2MC_lslw2

F2MC_asrl = _ida_domain.F2MC_asrl

F2MC_lsrl = _ida_domain.F2MC_lsrl

F2MC_lsll = _ida_domain.F2MC_lsll

F2MC_bz = _ida_domain.F2MC_bz

F2MC_bnz = _ida_domain.F2MC_bnz

F2MC_bc = _ida_domain.F2MC_bc

F2MC_bnc = _ida_domain.F2MC_bnc

F2MC_bn = _ida_domain.F2MC_bn

F2MC_bp = _ida_domain.F2MC_bp

F2MC_bv = _ida_domain.F2MC_bv

F2MC_bnv = _ida_domain.F2MC_bnv

F2MC_bt = _ida_domain.F2MC_bt

F2MC_bnt = _ida_domain.F2MC_bnt

F2MC_blt = _ida_domain.F2MC_blt

F2MC_bge = _ida_domain.F2MC_bge

F2MC_ble = _ida_domain.F2MC_ble

F2MC_bgt = _ida_domain.F2MC_bgt

F2MC_bls = _ida_domain.F2MC_bls

F2MC_bhi = _ida_domain.F2MC_bhi

F2MC_bra = _ida_domain.F2MC_bra

F2MC_jmp = _ida_domain.F2MC_jmp

F2MC_jmpp = _ida_domain.F2MC_jmpp

F2MC_call = _ida_domain.F2MC_call

F2MC_callv = _ida_domain.F2MC_callv

F2MC_callp = _ida_domain.F2MC_callp

F2MC_cbne = _ida_domain.F2MC_cbne

F2MC_cwbne = _ida_domain.F2MC_cwbne

F2MC_dbnz = _ida_domain.F2MC_dbnz

F2MC_dwbnz = _ida_domain.F2MC_dwbnz

F2MC_int = _ida_domain.F2MC_int

F2MC_intp = _ida_domain.F2MC_intp

F2MC_int9 = _ida_domain.F2MC_int9

F2MC_reti = _ida_domain.F2MC_reti

F2MC_link = _ida_domain.F2MC_link

F2MC_unlink = _ida_domain.F2MC_unlink

F2MC_ret = _ida_domain.F2MC_ret

F2MC_retp = _ida_domain.F2MC_retp

F2MC_pushw = _ida_domain.F2MC_pushw

F2MC_popw = _ida_domain.F2MC_popw

F2MC_jctx = _ida_domain.F2MC_jctx

F2MC_movea = _ida_domain.F2MC_movea

F2MC_addsp = _ida_domain.F2MC_addsp

F2MC_nop = _ida_domain.F2MC_nop

F2MC_adb = _ida_domain.F2MC_adb

F2MC_dtb = _ida_domain.F2MC_dtb

F2MC_pcb = _ida_domain.F2MC_pcb

F2MC_spb = _ida_domain.F2MC_spb

F2MC_ncc = _ida_domain.F2MC_ncc

F2MC_cmr = _ida_domain.F2MC_cmr

F2MC_movb = _ida_domain.F2MC_movb

F2MC_setb = _ida_domain.F2MC_setb

F2MC_clrb = _ida_domain.F2MC_clrb

F2MC_bbc = _ida_domain.F2MC_bbc

F2MC_bbs = _ida_domain.F2MC_bbs

F2MC_sbbs = _ida_domain.F2MC_sbbs

F2MC_wbts = _ida_domain.F2MC_wbts

F2MC_wbtc = _ida_domain.F2MC_wbtc

F2MC_swap = _ida_domain.F2MC_swap

F2MC_swapw = _ida_domain.F2MC_swapw

F2MC_ext = _ida_domain.F2MC_ext

F2MC_extw = _ida_domain.F2MC_extw

F2MC_zext = _ida_domain.F2MC_zext

F2MC_zextw = _ida_domain.F2MC_zextw

F2MC_movsi = _ida_domain.F2MC_movsi

F2MC_movsd = _ida_domain.F2MC_movsd

F2MC_sceqi = _ida_domain.F2MC_sceqi

F2MC_sceqd = _ida_domain.F2MC_sceqd

F2MC_filsi = _ida_domain.F2MC_filsi

F2MC_movswi = _ida_domain.F2MC_movswi

F2MC_movswd = _ida_domain.F2MC_movswd

F2MC_scweqi = _ida_domain.F2MC_scweqi

F2MC_scweqd = _ida_domain.F2MC_scweqd

F2MC_filswi = _ida_domain.F2MC_filswi

F2MC_bz16 = _ida_domain.F2MC_bz16

F2MC_bnz16 = _ida_domain.F2MC_bnz16

F2MC_bc16 = _ida_domain.F2MC_bc16

F2MC_bnc16 = _ida_domain.F2MC_bnc16

F2MC_bn16 = _ida_domain.F2MC_bn16

F2MC_bp16 = _ida_domain.F2MC_bp16

F2MC_bv16 = _ida_domain.F2MC_bv16

F2MC_bnv16 = _ida_domain.F2MC_bnv16

F2MC_bt16 = _ida_domain.F2MC_bt16

F2MC_bnt16 = _ida_domain.F2MC_bnt16

F2MC_blt16 = _ida_domain.F2MC_blt16

F2MC_bge16 = _ida_domain.F2MC_bge16

F2MC_ble16 = _ida_domain.F2MC_ble16

F2MC_bgt16 = _ida_domain.F2MC_bgt16

F2MC_bls16 = _ida_domain.F2MC_bls16

F2MC_bhi16 = _ida_domain.F2MC_bhi16

F2MC_cbne16 = _ida_domain.F2MC_cbne16

F2MC_cwbne16 = _ida_domain.F2MC_cwbne16

F2MC_dbnz16 = _ida_domain.F2MC_dbnz16

F2MC_dwbnz16 = _ida_domain.F2MC_dwbnz16

F2MC_bbc16 = _ida_domain.F2MC_bbc16

F2MC_bbs16 = _ida_domain.F2MC_bbs16

F2MC_sbbs16 = _ida_domain.F2MC_sbbs16

F2MC_last = _ida_domain.F2MC_last

TMS320C3X_null = _ida_domain.TMS320C3X_null

TMS320C3X_ABSF = _ida_domain.TMS320C3X_ABSF

TMS320C3X_ABSI = _ida_domain.TMS320C3X_ABSI

TMS320C3X_ADDC = _ida_domain.TMS320C3X_ADDC

TMS320C3X_ADDF = _ida_domain.TMS320C3X_ADDF

TMS320C3X_ADDI = _ida_domain.TMS320C3X_ADDI

TMS320C3X_AND = _ida_domain.TMS320C3X_AND

TMS320C3X_ANDN = _ida_domain.TMS320C3X_ANDN

TMS320C3X_ASH = _ida_domain.TMS320C3X_ASH

TMS320C3X_CMPF = _ida_domain.TMS320C3X_CMPF

TMS320C3X_CMPI = _ida_domain.TMS320C3X_CMPI

TMS320C3X_FIX = _ida_domain.TMS320C3X_FIX

TMS320C3X_FLOAT = _ida_domain.TMS320C3X_FLOAT

TMS320C3X_IDLE = _ida_domain.TMS320C3X_IDLE

TMS320C3X_IDLE2 = _ida_domain.TMS320C3X_IDLE2

TMS320C3X_LDE = _ida_domain.TMS320C3X_LDE

TMS320C3X_LDF = _ida_domain.TMS320C3X_LDF

TMS320C3X_LDFI = _ida_domain.TMS320C3X_LDFI

TMS320C3X_LDI = _ida_domain.TMS320C3X_LDI

TMS320C3X_LDII = _ida_domain.TMS320C3X_LDII

TMS320C3X_LDM = _ida_domain.TMS320C3X_LDM

TMS320C3X_LSH = _ida_domain.TMS320C3X_LSH

TMS320C3X_MPYF = _ida_domain.TMS320C3X_MPYF

TMS320C3X_MPYI = _ida_domain.TMS320C3X_MPYI

TMS320C3X_NEGB = _ida_domain.TMS320C3X_NEGB

TMS320C3X_NEGF = _ida_domain.TMS320C3X_NEGF

TMS320C3X_NEGI = _ida_domain.TMS320C3X_NEGI

TMS320C3X_NOP = _ida_domain.TMS320C3X_NOP

TMS320C3X_NORM = _ida_domain.TMS320C3X_NORM

TMS320C3X_NOT = _ida_domain.TMS320C3X_NOT

TMS320C3X_POP = _ida_domain.TMS320C3X_POP

TMS320C3X_POPF = _ida_domain.TMS320C3X_POPF

TMS320C3X_PUSH = _ida_domain.TMS320C3X_PUSH

TMS320C3X_PUSHF = _ida_domain.TMS320C3X_PUSHF

TMS320C3X_OR = _ida_domain.TMS320C3X_OR

TMS320C3X_LOPOWER = _ida_domain.TMS320C3X_LOPOWER

TMS320C3X_MAXSPEED = _ida_domain.TMS320C3X_MAXSPEED

TMS320C3X_RND = _ida_domain.TMS320C3X_RND

TMS320C3X_ROL = _ida_domain.TMS320C3X_ROL

TMS320C3X_ROLC = _ida_domain.TMS320C3X_ROLC

TMS320C3X_ROR = _ida_domain.TMS320C3X_ROR

TMS320C3X_RORC = _ida_domain.TMS320C3X_RORC

TMS320C3X_RPTS = _ida_domain.TMS320C3X_RPTS

TMS320C3X_STF = _ida_domain.TMS320C3X_STF

TMS320C3X_STFI = _ida_domain.TMS320C3X_STFI

TMS320C3X_STI = _ida_domain.TMS320C3X_STI

TMS320C3X_STII = _ida_domain.TMS320C3X_STII

TMS320C3X_SIGI = _ida_domain.TMS320C3X_SIGI

TMS320C3X_SUBB = _ida_domain.TMS320C3X_SUBB

TMS320C3X_SUBC = _ida_domain.TMS320C3X_SUBC

TMS320C3X_SUBF = _ida_domain.TMS320C3X_SUBF

TMS320C3X_SUBI = _ida_domain.TMS320C3X_SUBI

TMS320C3X_SUBRB = _ida_domain.TMS320C3X_SUBRB

TMS320C3X_SUBRF = _ida_domain.TMS320C3X_SUBRF

TMS320C3X_SUBRI = _ida_domain.TMS320C3X_SUBRI

TMS320C3X_TSTB = _ida_domain.TMS320C3X_TSTB

TMS320C3X_XOR = _ida_domain.TMS320C3X_XOR

TMS320C3X_IACK = _ida_domain.TMS320C3X_IACK

TMS320C3X_ADDC3 = _ida_domain.TMS320C3X_ADDC3

TMS320C3X_ADDF3 = _ida_domain.TMS320C3X_ADDF3

TMS320C3X_ADDI3 = _ida_domain.TMS320C3X_ADDI3

TMS320C3X_AND3 = _ida_domain.TMS320C3X_AND3

TMS320C3X_ANDN3 = _ida_domain.TMS320C3X_ANDN3

TMS320C3X_ASH3 = _ida_domain.TMS320C3X_ASH3

TMS320C3X_CMPF3 = _ida_domain.TMS320C3X_CMPF3

TMS320C3X_CMPI3 = _ida_domain.TMS320C3X_CMPI3

TMS320C3X_LSH3 = _ida_domain.TMS320C3X_LSH3

TMS320C3X_MPYF3 = _ida_domain.TMS320C3X_MPYF3

TMS320C3X_MPYI3 = _ida_domain.TMS320C3X_MPYI3

TMS320C3X_OR3 = _ida_domain.TMS320C3X_OR3

TMS320C3X_SUBB3 = _ida_domain.TMS320C3X_SUBB3

TMS320C3X_SUBF3 = _ida_domain.TMS320C3X_SUBF3

TMS320C3X_SUBI3 = _ida_domain.TMS320C3X_SUBI3

TMS320C3X_TSTB3 = _ida_domain.TMS320C3X_TSTB3

TMS320C3X_XOR3 = _ida_domain.TMS320C3X_XOR3

TMS320C3X_LDFcond = _ida_domain.TMS320C3X_LDFcond

TMS320C3X_LDIcond = _ida_domain.TMS320C3X_LDIcond

TMS320C3X_BR = _ida_domain.TMS320C3X_BR

TMS320C3X_BRD = _ida_domain.TMS320C3X_BRD

TMS320C3X_CALL = _ida_domain.TMS320C3X_CALL

TMS320C3X_RPTB = _ida_domain.TMS320C3X_RPTB

TMS320C3X_SWI = _ida_domain.TMS320C3X_SWI

TMS320C3X_Bcond = _ida_domain.TMS320C3X_Bcond

TMS320C3X_DBcond = _ida_domain.TMS320C3X_DBcond

TMS320C3X_CALLcond = _ida_domain.TMS320C3X_CALLcond

TMS320C3X_TRAPcond = _ida_domain.TMS320C3X_TRAPcond

TMS320C3X_RETIcond = _ida_domain.TMS320C3X_RETIcond

TMS320C3X_RETScond = _ida_domain.TMS320C3X_RETScond

TMS320C3X_RETIU = _ida_domain.TMS320C3X_RETIU

TMS320C3X_RETSU = _ida_domain.TMS320C3X_RETSU

TMS320C3X_NONE = _ida_domain.TMS320C3X_NONE

TMS320C3X_MV_IDX = _ida_domain.TMS320C3X_MV_IDX

TMS320C3X_last = _ida_domain.TMS320C3X_last

TMS320C54_null = _ida_domain.TMS320C54_null

TMS320C54_add1 = _ida_domain.TMS320C54_add1

TMS320C54_add2 = _ida_domain.TMS320C54_add2

TMS320C54_add3 = _ida_domain.TMS320C54_add3

TMS320C54_addc = _ida_domain.TMS320C54_addc

TMS320C54_addm = _ida_domain.TMS320C54_addm

TMS320C54_adds = _ida_domain.TMS320C54_adds

TMS320C54_sub1 = _ida_domain.TMS320C54_sub1

TMS320C54_sub2 = _ida_domain.TMS320C54_sub2

TMS320C54_sub3 = _ida_domain.TMS320C54_sub3

TMS320C54_subb = _ida_domain.TMS320C54_subb

TMS320C54_subc = _ida_domain.TMS320C54_subc

TMS320C54_subs = _ida_domain.TMS320C54_subs

TMS320C54_mpy2 = _ida_domain.TMS320C54_mpy2

TMS320C54_mpy3 = _ida_domain.TMS320C54_mpy3

TMS320C54_mpyr2 = _ida_domain.TMS320C54_mpyr2

TMS320C54_mpya = _ida_domain.TMS320C54_mpya

TMS320C54_mpyu = _ida_domain.TMS320C54_mpyu

TMS320C54_squr = _ida_domain.TMS320C54_squr

TMS320C54_mac2 = _ida_domain.TMS320C54_mac2

TMS320C54_mac3 = _ida_domain.TMS320C54_mac3

TMS320C54_macr2 = _ida_domain.TMS320C54_macr2

TMS320C54_macr3 = _ida_domain.TMS320C54_macr3

TMS320C54_maca1 = _ida_domain.TMS320C54_maca1

TMS320C54_maca2 = _ida_domain.TMS320C54_maca2

TMS320C54_maca3 = _ida_domain.TMS320C54_maca3

TMS320C54_macar1 = _ida_domain.TMS320C54_macar1

TMS320C54_macar2 = _ida_domain.TMS320C54_macar2

TMS320C54_macar3 = _ida_domain.TMS320C54_macar3

TMS320C54_macd = _ida_domain.TMS320C54_macd

TMS320C54_macp = _ida_domain.TMS320C54_macp

TMS320C54_macsu = _ida_domain.TMS320C54_macsu

TMS320C54_mas2 = _ida_domain.TMS320C54_mas2

TMS320C54_mas3 = _ida_domain.TMS320C54_mas3

TMS320C54_masr2 = _ida_domain.TMS320C54_masr2

TMS320C54_masr3 = _ida_domain.TMS320C54_masr3

TMS320C54_masa1 = _ida_domain.TMS320C54_masa1

TMS320C54_masa2 = _ida_domain.TMS320C54_masa2

TMS320C54_masa3 = _ida_domain.TMS320C54_masa3

TMS320C54_masar1 = _ida_domain.TMS320C54_masar1

TMS320C54_masar2 = _ida_domain.TMS320C54_masar2

TMS320C54_masar3 = _ida_domain.TMS320C54_masar3

TMS320C54_squra = _ida_domain.TMS320C54_squra

TMS320C54_squrs = _ida_domain.TMS320C54_squrs

TMS320C54_dadd2 = _ida_domain.TMS320C54_dadd2

TMS320C54_dadd3 = _ida_domain.TMS320C54_dadd3

TMS320C54_dadst = _ida_domain.TMS320C54_dadst

TMS320C54_drsub = _ida_domain.TMS320C54_drsub

TMS320C54_dsadt = _ida_domain.TMS320C54_dsadt

TMS320C54_dsub = _ida_domain.TMS320C54_dsub

TMS320C54_dsubt = _ida_domain.TMS320C54_dsubt

TMS320C54_abdst = _ida_domain.TMS320C54_abdst

TMS320C54_abs1 = _ida_domain.TMS320C54_abs1

TMS320C54_abs2 = _ida_domain.TMS320C54_abs2

TMS320C54_cmpl1 = _ida_domain.TMS320C54_cmpl1

TMS320C54_cmpl2 = _ida_domain.TMS320C54_cmpl2

TMS320C54_delay = _ida_domain.TMS320C54_delay

TMS320C54_exp = _ida_domain.TMS320C54_exp

TMS320C54_firs = _ida_domain.TMS320C54_firs

TMS320C54_lms = _ida_domain.TMS320C54_lms

TMS320C54_max = _ida_domain.TMS320C54_max

TMS320C54_min = _ida_domain.TMS320C54_min

TMS320C54_neg1 = _ida_domain.TMS320C54_neg1

TMS320C54_neg2 = _ida_domain.TMS320C54_neg2

TMS320C54_norm1 = _ida_domain.TMS320C54_norm1

TMS320C54_norm2 = _ida_domain.TMS320C54_norm2

TMS320C54_poly = _ida_domain.TMS320C54_poly

TMS320C54_rnd1 = _ida_domain.TMS320C54_rnd1

TMS320C54_rnd2 = _ida_domain.TMS320C54_rnd2

TMS320C54_sat = _ida_domain.TMS320C54_sat

TMS320C54_sqdst = _ida_domain.TMS320C54_sqdst

TMS320C54_and1 = _ida_domain.TMS320C54_and1

TMS320C54_and2 = _ida_domain.TMS320C54_and2

TMS320C54_and3 = _ida_domain.TMS320C54_and3

TMS320C54_andm = _ida_domain.TMS320C54_andm

TMS320C54_or1 = _ida_domain.TMS320C54_or1

TMS320C54_or2 = _ida_domain.TMS320C54_or2

TMS320C54_or3 = _ida_domain.TMS320C54_or3

TMS320C54_orm = _ida_domain.TMS320C54_orm

TMS320C54_xor1 = _ida_domain.TMS320C54_xor1

TMS320C54_xor2 = _ida_domain.TMS320C54_xor2

TMS320C54_xor3 = _ida_domain.TMS320C54_xor3

TMS320C54_xorm = _ida_domain.TMS320C54_xorm

TMS320C54_rol = _ida_domain.TMS320C54_rol

TMS320C54_roltc = _ida_domain.TMS320C54_roltc

TMS320C54_ror = _ida_domain.TMS320C54_ror

TMS320C54_sfta2 = _ida_domain.TMS320C54_sfta2

TMS320C54_sfta3 = _ida_domain.TMS320C54_sfta3

TMS320C54_sftc = _ida_domain.TMS320C54_sftc

TMS320C54_sftl2 = _ida_domain.TMS320C54_sftl2

TMS320C54_sftl3 = _ida_domain.TMS320C54_sftl3

TMS320C54_bit = _ida_domain.TMS320C54_bit

TMS320C54_bitf = _ida_domain.TMS320C54_bitf

TMS320C54_bitt = _ida_domain.TMS320C54_bitt

TMS320C54_cmpm = _ida_domain.TMS320C54_cmpm

TMS320C54_cmpr = _ida_domain.TMS320C54_cmpr

TMS320C54_b = _ida_domain.TMS320C54_b

TMS320C54_bd = _ida_domain.TMS320C54_bd

TMS320C54_bacc = _ida_domain.TMS320C54_bacc

TMS320C54_baccd = _ida_domain.TMS320C54_baccd

TMS320C54_banz = _ida_domain.TMS320C54_banz

TMS320C54_banzd = _ida_domain.TMS320C54_banzd

TMS320C54_bc2 = _ida_domain.TMS320C54_bc2

TMS320C54_bc3 = _ida_domain.TMS320C54_bc3

TMS320C54_bcd2 = _ida_domain.TMS320C54_bcd2

TMS320C54_bcd3 = _ida_domain.TMS320C54_bcd3

TMS320C54_fb = _ida_domain.TMS320C54_fb

TMS320C54_fbd = _ida_domain.TMS320C54_fbd

TMS320C54_fbacc = _ida_domain.TMS320C54_fbacc

TMS320C54_fbaccd = _ida_domain.TMS320C54_fbaccd

TMS320C54_cala = _ida_domain.TMS320C54_cala

TMS320C54_calad = _ida_domain.TMS320C54_calad

TMS320C54_call = _ida_domain.TMS320C54_call

TMS320C54_calld = _ida_domain.TMS320C54_calld

TMS320C54_cc2 = _ida_domain.TMS320C54_cc2

TMS320C54_cc3 = _ida_domain.TMS320C54_cc3

TMS320C54_ccd2 = _ida_domain.TMS320C54_ccd2

TMS320C54_ccd3 = _ida_domain.TMS320C54_ccd3

TMS320C54_fcala = _ida_domain.TMS320C54_fcala

TMS320C54_fcalad = _ida_domain.TMS320C54_fcalad

TMS320C54_fcall = _ida_domain.TMS320C54_fcall

TMS320C54_fcalld = _ida_domain.TMS320C54_fcalld

TMS320C54_intr = _ida_domain.TMS320C54_intr

TMS320C54_trap = _ida_domain.TMS320C54_trap

TMS320C54_fret = _ida_domain.TMS320C54_fret

TMS320C54_fretd = _ida_domain.TMS320C54_fretd

TMS320C54_frete = _ida_domain.TMS320C54_frete

TMS320C54_freted = _ida_domain.TMS320C54_freted

TMS320C54_rc1 = _ida_domain.TMS320C54_rc1

TMS320C54_rc2 = _ida_domain.TMS320C54_rc2

TMS320C54_rc3 = _ida_domain.TMS320C54_rc3

TMS320C54_rcd1 = _ida_domain.TMS320C54_rcd1

TMS320C54_rcd2 = _ida_domain.TMS320C54_rcd2

TMS320C54_rcd3 = _ida_domain.TMS320C54_rcd3

TMS320C54_ret = _ida_domain.TMS320C54_ret

TMS320C54_retd = _ida_domain.TMS320C54_retd

TMS320C54_rete = _ida_domain.TMS320C54_rete

TMS320C54_reted = _ida_domain.TMS320C54_reted

TMS320C54_retf = _ida_domain.TMS320C54_retf

TMS320C54_retfd = _ida_domain.TMS320C54_retfd

TMS320C54_rpt = _ida_domain.TMS320C54_rpt

TMS320C54_rptb = _ida_domain.TMS320C54_rptb

TMS320C54_rptbd = _ida_domain.TMS320C54_rptbd

TMS320C54_rptz = _ida_domain.TMS320C54_rptz

TMS320C54_frame = _ida_domain.TMS320C54_frame

TMS320C54_popd = _ida_domain.TMS320C54_popd

TMS320C54_popm = _ida_domain.TMS320C54_popm

TMS320C54_pshd = _ida_domain.TMS320C54_pshd

TMS320C54_pshm = _ida_domain.TMS320C54_pshm

TMS320C54_idle = _ida_domain.TMS320C54_idle

TMS320C54_mar = _ida_domain.TMS320C54_mar

TMS320C54_nop = _ida_domain.TMS320C54_nop

TMS320C54_reset = _ida_domain.TMS320C54_reset

TMS320C54_rsbx1 = _ida_domain.TMS320C54_rsbx1

TMS320C54_rsbx2 = _ida_domain.TMS320C54_rsbx2

TMS320C54_ssbx1 = _ida_domain.TMS320C54_ssbx1

TMS320C54_ssbx2 = _ida_domain.TMS320C54_ssbx2

TMS320C54_xc2 = _ida_domain.TMS320C54_xc2

TMS320C54_xc3 = _ida_domain.TMS320C54_xc3

TMS320C54_dld = _ida_domain.TMS320C54_dld

TMS320C54_ld1 = _ida_domain.TMS320C54_ld1

TMS320C54_ld2 = _ida_domain.TMS320C54_ld2

TMS320C54_ld3 = _ida_domain.TMS320C54_ld3

TMS320C54_ldm = _ida_domain.TMS320C54_ldm

TMS320C54_ldr = _ida_domain.TMS320C54_ldr

TMS320C54_ldu = _ida_domain.TMS320C54_ldu

TMS320C54_ltd = _ida_domain.TMS320C54_ltd

TMS320C54_dst = _ida_domain.TMS320C54_dst

TMS320C54_st = _ida_domain.TMS320C54_st

TMS320C54_sth2 = _ida_domain.TMS320C54_sth2

TMS320C54_sth3 = _ida_domain.TMS320C54_sth3

TMS320C54_stl2 = _ida_domain.TMS320C54_stl2

TMS320C54_stl3 = _ida_domain.TMS320C54_stl3

TMS320C54_stlm = _ida_domain.TMS320C54_stlm

TMS320C54_stm = _ida_domain.TMS320C54_stm

TMS320C54_cmps = _ida_domain.TMS320C54_cmps

TMS320C54_saccd = _ida_domain.TMS320C54_saccd

TMS320C54_srccd = _ida_domain.TMS320C54_srccd

TMS320C54_strcd = _ida_domain.TMS320C54_strcd

TMS320C54_st_ld = _ida_domain.TMS320C54_st_ld

TMS320C54_ld_mac = _ida_domain.TMS320C54_ld_mac

TMS320C54_ld_macr = _ida_domain.TMS320C54_ld_macr

TMS320C54_ld_mas = _ida_domain.TMS320C54_ld_mas

TMS320C54_ld_masr = _ida_domain.TMS320C54_ld_masr

TMS320C54_st_add = _ida_domain.TMS320C54_st_add

TMS320C54_st_sub = _ida_domain.TMS320C54_st_sub

TMS320C54_st_mac = _ida_domain.TMS320C54_st_mac

TMS320C54_st_macr = _ida_domain.TMS320C54_st_macr

TMS320C54_st_mas = _ida_domain.TMS320C54_st_mas

TMS320C54_st_masr = _ida_domain.TMS320C54_st_masr

TMS320C54_st_mpy = _ida_domain.TMS320C54_st_mpy

TMS320C54_mvdd = _ida_domain.TMS320C54_mvdd

TMS320C54_mvdk = _ida_domain.TMS320C54_mvdk

TMS320C54_mvdm = _ida_domain.TMS320C54_mvdm

TMS320C54_mvdp = _ida_domain.TMS320C54_mvdp

TMS320C54_mvkd = _ida_domain.TMS320C54_mvkd

TMS320C54_mvmd = _ida_domain.TMS320C54_mvmd

TMS320C54_mvmm = _ida_domain.TMS320C54_mvmm

TMS320C54_mvpd = _ida_domain.TMS320C54_mvpd

TMS320C54_portr = _ida_domain.TMS320C54_portr

TMS320C54_portw = _ida_domain.TMS320C54_portw

TMS320C54_reada = _ida_domain.TMS320C54_reada

TMS320C54_writa = _ida_domain.TMS320C54_writa

TMS320C54_last = _ida_domain.TMS320C54_last

TMS320C55_null = _ida_domain.TMS320C55_null

TMS320C55_abdst = _ida_domain.TMS320C55_abdst

TMS320C55_abs1 = _ida_domain.TMS320C55_abs1

TMS320C55_abs2 = _ida_domain.TMS320C55_abs2

TMS320C55_add1 = _ida_domain.TMS320C55_add1

TMS320C55_add2 = _ida_domain.TMS320C55_add2

TMS320C55_add3 = _ida_domain.TMS320C55_add3

TMS320C55_add4 = _ida_domain.TMS320C55_add4

TMS320C55_addv1 = _ida_domain.TMS320C55_addv1

TMS320C55_addv2 = _ida_domain.TMS320C55_addv2

TMS320C55_addrv1 = _ida_domain.TMS320C55_addrv1

TMS320C55_addrv2 = _ida_domain.TMS320C55_addrv2

TMS320C55_maxdiff = _ida_domain.TMS320C55_maxdiff

TMS320C55_dmaxdiff = _ida_domain.TMS320C55_dmaxdiff

TMS320C55_mindiff = _ida_domain.TMS320C55_mindiff

TMS320C55_dmindiff = _ida_domain.TMS320C55_dmindiff

TMS320C55_addsubcc4 = _ida_domain.TMS320C55_addsubcc4

TMS320C55_addsubcc5 = _ida_domain.TMS320C55_addsubcc5

TMS320C55_addsub2cc = _ida_domain.TMS320C55_addsub2cc

TMS320C55_sftcc = _ida_domain.TMS320C55_sftcc

TMS320C55_subc2 = _ida_domain.TMS320C55_subc2

TMS320C55_subc3 = _ida_domain.TMS320C55_subc3

TMS320C55_addsub = _ida_domain.TMS320C55_addsub

TMS320C55_subadd = _ida_domain.TMS320C55_subadd

TMS320C55_mpy_mpy = _ida_domain.TMS320C55_mpy_mpy

TMS320C55_mpy_mpyr = _ida_domain.TMS320C55_mpy_mpyr

TMS320C55_mpy_mpy40 = _ida_domain.TMS320C55_mpy_mpy40

TMS320C55_mpy_mpyr40 = _ida_domain.TMS320C55_mpy_mpyr40

TMS320C55_mac_mpy = _ida_domain.TMS320C55_mac_mpy

TMS320C55_macr_mpyr = _ida_domain.TMS320C55_macr_mpyr

TMS320C55_mac40_mpy40 = _ida_domain.TMS320C55_mac40_mpy40

TMS320C55_macr40_mpyr40 = _ida_domain.TMS320C55_macr40_mpyr40

TMS320C55_mas_mpy = _ida_domain.TMS320C55_mas_mpy

TMS320C55_masr_mpyr = _ida_domain.TMS320C55_masr_mpyr

TMS320C55_mas40_mpy40 = _ida_domain.TMS320C55_mas40_mpy40

TMS320C55_masr40_mpyr40 = _ida_domain.TMS320C55_masr40_mpyr40

TMS320C55_amar_mpy = _ida_domain.TMS320C55_amar_mpy

TMS320C55_amar_mpyr = _ida_domain.TMS320C55_amar_mpyr

TMS320C55_amar_mpy40 = _ida_domain.TMS320C55_amar_mpy40

TMS320C55_amar_mpyr40 = _ida_domain.TMS320C55_amar_mpyr40

TMS320C55_mac_mac = _ida_domain.TMS320C55_mac_mac

TMS320C55_macr_macr = _ida_domain.TMS320C55_macr_macr

TMS320C55_mac40_mac40 = _ida_domain.TMS320C55_mac40_mac40

TMS320C55_macr40_macr40 = _ida_domain.TMS320C55_macr40_macr40

TMS320C55_mas_mac = _ida_domain.TMS320C55_mas_mac

TMS320C55_masr_macr = _ida_domain.TMS320C55_masr_macr

TMS320C55_mas40_mac40 = _ida_domain.TMS320C55_mas40_mac40

TMS320C55_masr40_macr40 = _ida_domain.TMS320C55_masr40_macr40

TMS320C55_amar_mac = _ida_domain.TMS320C55_amar_mac

TMS320C55_amar_macr = _ida_domain.TMS320C55_amar_macr

TMS320C55_amar_mac40 = _ida_domain.TMS320C55_amar_mac40

TMS320C55_amar_macr40 = _ida_domain.TMS320C55_amar_macr40

TMS320C55_mas_mas = _ida_domain.TMS320C55_mas_mas

TMS320C55_masr_masr = _ida_domain.TMS320C55_masr_masr

TMS320C55_mas40_mas40 = _ida_domain.TMS320C55_mas40_mas40

TMS320C55_masr40_masr40 = _ida_domain.TMS320C55_masr40_masr40

TMS320C55_amar_mas = _ida_domain.TMS320C55_amar_mas

TMS320C55_amar_masr = _ida_domain.TMS320C55_amar_masr

TMS320C55_amar_mas40 = _ida_domain.TMS320C55_amar_mas40

TMS320C55_amar_masr40 = _ida_domain.TMS320C55_amar_masr40

TMS320C55_mpy_mac = _ida_domain.TMS320C55_mpy_mac

TMS320C55_mpyr_macr = _ida_domain.TMS320C55_mpyr_macr

TMS320C55_mpy40_mac40 = _ida_domain.TMS320C55_mpy40_mac40

TMS320C55_mpyr40_macr40 = _ida_domain.TMS320C55_mpyr40_macr40

TMS320C55_amar3 = _ida_domain.TMS320C55_amar3

TMS320C55_firsadd = _ida_domain.TMS320C55_firsadd

TMS320C55_firssub = _ida_domain.TMS320C55_firssub

TMS320C55_mpym_mov = _ida_domain.TMS320C55_mpym_mov

TMS320C55_mpymr_mov = _ida_domain.TMS320C55_mpymr_mov

TMS320C55_macm_mov = _ida_domain.TMS320C55_macm_mov

TMS320C55_macmr_mov = _ida_domain.TMS320C55_macmr_mov

TMS320C55_masm_mov = _ida_domain.TMS320C55_masm_mov

TMS320C55_masmr_mov = _ida_domain.TMS320C55_masmr_mov

TMS320C55_add_mov = _ida_domain.TMS320C55_add_mov

TMS320C55_sub_mov = _ida_domain.TMS320C55_sub_mov

TMS320C55_mov_mov = _ida_domain.TMS320C55_mov_mov

TMS320C55_mov_aadd = _ida_domain.TMS320C55_mov_aadd

TMS320C55_mov_add = _ida_domain.TMS320C55_mov_add

TMS320C55_amar_amar = _ida_domain.TMS320C55_amar_amar

TMS320C55_add_asub = _ida_domain.TMS320C55_add_asub

TMS320C55_btst_mov = _ida_domain.TMS320C55_btst_mov

TMS320C55_mov_asub = _ida_domain.TMS320C55_mov_asub

TMS320C55_lms = _ida_domain.TMS320C55_lms

TMS320C55_max1 = _ida_domain.TMS320C55_max1

TMS320C55_max2 = _ida_domain.TMS320C55_max2

TMS320C55_min1 = _ida_domain.TMS320C55_min1

TMS320C55_min2 = _ida_domain.TMS320C55_min2

TMS320C55_cmp = _ida_domain.TMS320C55_cmp

TMS320C55_cmpu = _ida_domain.TMS320C55_cmpu

TMS320C55_aadd = _ida_domain.TMS320C55_aadd

TMS320C55_asub = _ida_domain.TMS320C55_asub

TMS320C55_amov = _ida_domain.TMS320C55_amov

TMS320C55_amar1 = _ida_domain.TMS320C55_amar1

TMS320C55_sqr1 = _ida_domain.TMS320C55_sqr1

TMS320C55_sqr2 = _ida_domain.TMS320C55_sqr2

TMS320C55_sqrr1 = _ida_domain.TMS320C55_sqrr1

TMS320C55_sqrr2 = _ida_domain.TMS320C55_sqrr2

TMS320C55_mpy1 = _ida_domain.TMS320C55_mpy1

TMS320C55_mpy2 = _ida_domain.TMS320C55_mpy2

TMS320C55_mpy3 = _ida_domain.TMS320C55_mpy3

TMS320C55_mpyr1 = _ida_domain.TMS320C55_mpyr1

TMS320C55_mpyr2 = _ida_domain.TMS320C55_mpyr2

TMS320C55_mpyr3 = _ida_domain.TMS320C55_mpyr3

TMS320C55_mpyk2 = _ida_domain.TMS320C55_mpyk2

TMS320C55_mpyk3 = _ida_domain.TMS320C55_mpyk3

TMS320C55_mpykr2 = _ida_domain.TMS320C55_mpykr2

TMS320C55_mpykr3 = _ida_domain.TMS320C55_mpykr3

TMS320C55_mpym2 = _ida_domain.TMS320C55_mpym2

TMS320C55_mpym3 = _ida_domain.TMS320C55_mpym3

TMS320C55_mpymr2 = _ida_domain.TMS320C55_mpymr2

TMS320C55_mpymr3 = _ida_domain.TMS320C55_mpymr3

TMS320C55_mpym403 = _ida_domain.TMS320C55_mpym403

TMS320C55_mpymr403 = _ida_domain.TMS320C55_mpymr403

TMS320C55_mpymu3 = _ida_domain.TMS320C55_mpymu3

TMS320C55_mpymru3 = _ida_domain.TMS320C55_mpymru3

TMS320C55_sqrm = _ida_domain.TMS320C55_sqrm

TMS320C55_sqrmr = _ida_domain.TMS320C55_sqrmr

TMS320C55_mpymk = _ida_domain.TMS320C55_mpymk

TMS320C55_mpymkr = _ida_domain.TMS320C55_mpymkr

TMS320C55_sqa1 = _ida_domain.TMS320C55_sqa1

TMS320C55_sqa2 = _ida_domain.TMS320C55_sqa2

TMS320C55_sqar1 = _ida_domain.TMS320C55_sqar1

TMS320C55_sqar2 = _ida_domain.TMS320C55_sqar2

TMS320C55_mac3 = _ida_domain.TMS320C55_mac3

TMS320C55_mac4 = _ida_domain.TMS320C55_mac4

TMS320C55_macr3 = _ida_domain.TMS320C55_macr3

TMS320C55_macr4 = _ida_domain.TMS320C55_macr4

TMS320C55_mack3 = _ida_domain.TMS320C55_mack3

TMS320C55_mack4 = _ida_domain.TMS320C55_mack4

TMS320C55_mackr3 = _ida_domain.TMS320C55_mackr3

TMS320C55_mackr4 = _ida_domain.TMS320C55_mackr4

TMS320C55_macm2 = _ida_domain.TMS320C55_macm2

TMS320C55_macm3 = _ida_domain.TMS320C55_macm3

TMS320C55_macm4 = _ida_domain.TMS320C55_macm4

TMS320C55_macmr2 = _ida_domain.TMS320C55_macmr2

TMS320C55_macmr3 = _ida_domain.TMS320C55_macmr3

TMS320C55_macmr4 = _ida_domain.TMS320C55_macmr4

TMS320C55_macm403 = _ida_domain.TMS320C55_macm403

TMS320C55_macm404 = _ida_domain.TMS320C55_macm404

TMS320C55_macmr403 = _ida_domain.TMS320C55_macmr403

TMS320C55_macmr404 = _ida_domain.TMS320C55_macmr404

TMS320C55_macmz = _ida_domain.TMS320C55_macmz

TMS320C55_macmrz = _ida_domain.TMS320C55_macmrz

TMS320C55_sqam2 = _ida_domain.TMS320C55_sqam2

TMS320C55_sqam3 = _ida_domain.TMS320C55_sqam3

TMS320C55_sqamr2 = _ida_domain.TMS320C55_sqamr2

TMS320C55_sqamr3 = _ida_domain.TMS320C55_sqamr3

TMS320C55_macmk3 = _ida_domain.TMS320C55_macmk3

TMS320C55_macmk4 = _ida_domain.TMS320C55_macmk4

TMS320C55_macmkr3 = _ida_domain.TMS320C55_macmkr3

TMS320C55_macmkr4 = _ida_domain.TMS320C55_macmkr4

TMS320C55_sqs1 = _ida_domain.TMS320C55_sqs1

TMS320C55_sqs2 = _ida_domain.TMS320C55_sqs2

TMS320C55_sqsr1 = _ida_domain.TMS320C55_sqsr1

TMS320C55_sqsr2 = _ida_domain.TMS320C55_sqsr2

TMS320C55_mas2 = _ida_domain.TMS320C55_mas2

TMS320C55_mas3 = _ida_domain.TMS320C55_mas3

TMS320C55_masr2 = _ida_domain.TMS320C55_masr2

TMS320C55_masr3 = _ida_domain.TMS320C55_masr3

TMS320C55_masm2 = _ida_domain.TMS320C55_masm2

TMS320C55_masm3 = _ida_domain.TMS320C55_masm3

TMS320C55_masm4 = _ida_domain.TMS320C55_masm4

TMS320C55_masmr2 = _ida_domain.TMS320C55_masmr2

TMS320C55_masmr3 = _ida_domain.TMS320C55_masmr3

TMS320C55_masmr4 = _ida_domain.TMS320C55_masmr4

TMS320C55_masm403 = _ida_domain.TMS320C55_masm403

TMS320C55_masm404 = _ida_domain.TMS320C55_masm404

TMS320C55_masmr403 = _ida_domain.TMS320C55_masmr403

TMS320C55_masmr404 = _ida_domain.TMS320C55_masmr404

TMS320C55_sqsm2 = _ida_domain.TMS320C55_sqsm2

TMS320C55_sqsm3 = _ida_domain.TMS320C55_sqsm3

TMS320C55_sqsmr2 = _ida_domain.TMS320C55_sqsmr2

TMS320C55_sqsmr3 = _ida_domain.TMS320C55_sqsmr3

TMS320C55_neg1 = _ida_domain.TMS320C55_neg1

TMS320C55_neg2 = _ida_domain.TMS320C55_neg2

TMS320C55_mant_nexp = _ida_domain.TMS320C55_mant_nexp

TMS320C55_exp = _ida_domain.TMS320C55_exp

TMS320C55_cmpand = _ida_domain.TMS320C55_cmpand

TMS320C55_cmpandu = _ida_domain.TMS320C55_cmpandu

TMS320C55_cmpor = _ida_domain.TMS320C55_cmpor

TMS320C55_cmporu = _ida_domain.TMS320C55_cmporu

TMS320C55_round1 = _ida_domain.TMS320C55_round1

TMS320C55_round2 = _ida_domain.TMS320C55_round2

TMS320C55_sat1 = _ida_domain.TMS320C55_sat1

TMS320C55_sat2 = _ida_domain.TMS320C55_sat2

TMS320C55_satr1 = _ida_domain.TMS320C55_satr1

TMS320C55_satr2 = _ida_domain.TMS320C55_satr2

TMS320C55_sfts2 = _ida_domain.TMS320C55_sfts2

TMS320C55_sfts3 = _ida_domain.TMS320C55_sfts3

TMS320C55_sftsc2 = _ida_domain.TMS320C55_sftsc2

TMS320C55_sftsc3 = _ida_domain.TMS320C55_sftsc3

TMS320C55_sqdst = _ida_domain.TMS320C55_sqdst

TMS320C55_sub1 = _ida_domain.TMS320C55_sub1

TMS320C55_sub2 = _ida_domain.TMS320C55_sub2

TMS320C55_sub3 = _ida_domain.TMS320C55_sub3

TMS320C55_sub4 = _ida_domain.TMS320C55_sub4

TMS320C55_band = _ida_domain.TMS320C55_band

TMS320C55_bfxpa = _ida_domain.TMS320C55_bfxpa

TMS320C55_bfxtr = _ida_domain.TMS320C55_bfxtr

TMS320C55_btst = _ida_domain.TMS320C55_btst

TMS320C55_bnot = _ida_domain.TMS320C55_bnot

TMS320C55_bclr2 = _ida_domain.TMS320C55_bclr2

TMS320C55_bset2 = _ida_domain.TMS320C55_bset2

TMS320C55_btstset = _ida_domain.TMS320C55_btstset

TMS320C55_btstclr = _ida_domain.TMS320C55_btstclr

TMS320C55_btstnot = _ida_domain.TMS320C55_btstnot

TMS320C55_btstp = _ida_domain.TMS320C55_btstp

TMS320C55_bclr1 = _ida_domain.TMS320C55_bclr1

TMS320C55_bset1 = _ida_domain.TMS320C55_bset1

TMS320C55_amar2 = _ida_domain.TMS320C55_amar2

TMS320C55_popboth = _ida_domain.TMS320C55_popboth

TMS320C55_pshboth = _ida_domain.TMS320C55_pshboth

TMS320C55_bcnt = _ida_domain.TMS320C55_bcnt

TMS320C55_not1 = _ida_domain.TMS320C55_not1

TMS320C55_not2 = _ida_domain.TMS320C55_not2

TMS320C55_and1 = _ida_domain.TMS320C55_and1

TMS320C55_and2 = _ida_domain.TMS320C55_and2

TMS320C55_and3 = _ida_domain.TMS320C55_and3

TMS320C55_or1 = _ida_domain.TMS320C55_or1

TMS320C55_or2 = _ida_domain.TMS320C55_or2

TMS320C55_or3 = _ida_domain.TMS320C55_or3

TMS320C55_xor1 = _ida_domain.TMS320C55_xor1

TMS320C55_xor2 = _ida_domain.TMS320C55_xor2

TMS320C55_xor3 = _ida_domain.TMS320C55_xor3

TMS320C55_sftl2 = _ida_domain.TMS320C55_sftl2

TMS320C55_sftl3 = _ida_domain.TMS320C55_sftl3

TMS320C55_rol = _ida_domain.TMS320C55_rol

TMS320C55_ror = _ida_domain.TMS320C55_ror

TMS320C55_swap = _ida_domain.TMS320C55_swap

TMS320C55_swapp = _ida_domain.TMS320C55_swapp

TMS320C55_swap4 = _ida_domain.TMS320C55_swap4

TMS320C55_mov2 = _ida_domain.TMS320C55_mov2

TMS320C55_mov3 = _ida_domain.TMS320C55_mov3

TMS320C55_mov402 = _ida_domain.TMS320C55_mov402

TMS320C55_delay = _ida_domain.TMS320C55_delay

TMS320C55_pop1 = _ida_domain.TMS320C55_pop1

TMS320C55_pop2 = _ida_domain.TMS320C55_pop2

TMS320C55_psh1 = _ida_domain.TMS320C55_psh1

TMS320C55_psh2 = _ida_domain.TMS320C55_psh2

TMS320C55_bcc = _ida_domain.TMS320C55_bcc

TMS320C55_bccu = _ida_domain.TMS320C55_bccu

TMS320C55_b = _ida_domain.TMS320C55_b

TMS320C55_callcc = _ida_domain.TMS320C55_callcc

TMS320C55_call = _ida_domain.TMS320C55_call

TMS320C55_xcc = _ida_domain.TMS320C55_xcc

TMS320C55_xccpart = _ida_domain.TMS320C55_xccpart

TMS320C55_idle = _ida_domain.TMS320C55_idle

TMS320C55_nop = _ida_domain.TMS320C55_nop

TMS320C55_nop_16 = _ida_domain.TMS320C55_nop_16

TMS320C55_rptblocal = _ida_domain.TMS320C55_rptblocal

TMS320C55_rptb = _ida_domain.TMS320C55_rptb

TMS320C55_rptcc = _ida_domain.TMS320C55_rptcc

TMS320C55_rpt = _ida_domain.TMS320C55_rpt

TMS320C55_rptadd = _ida_domain.TMS320C55_rptadd

TMS320C55_rptsub = _ida_domain.TMS320C55_rptsub

TMS320C55_retcc = _ida_domain.TMS320C55_retcc

TMS320C55_ret = _ida_domain.TMS320C55_ret

TMS320C55_reti = _ida_domain.TMS320C55_reti

TMS320C55_intr = _ida_domain.TMS320C55_intr

TMS320C55_reset = _ida_domain.TMS320C55_reset

TMS320C55_trap = _ida_domain.TMS320C55_trap

TMS320C55_last = _ida_domain.TMS320C55_last

TRIMEDIA_null = _ida_domain.TRIMEDIA_null

TRIMEDIA_igtri = _ida_domain.TRIMEDIA_igtri

TRIMEDIA_igeqi = _ida_domain.TRIMEDIA_igeqi

TRIMEDIA_ilesi = _ida_domain.TRIMEDIA_ilesi

TRIMEDIA_ineqi = _ida_domain.TRIMEDIA_ineqi

TRIMEDIA_ieqli = _ida_domain.TRIMEDIA_ieqli

TRIMEDIA_iaddi = _ida_domain.TRIMEDIA_iaddi

TRIMEDIA_ild16d = _ida_domain.TRIMEDIA_ild16d

TRIMEDIA_ld32d = _ida_domain.TRIMEDIA_ld32d

TRIMEDIA_uld8d = _ida_domain.TRIMEDIA_uld8d

TRIMEDIA_lsri = _ida_domain.TRIMEDIA_lsri

TRIMEDIA_asri = _ida_domain.TRIMEDIA_asri

TRIMEDIA_asli = _ida_domain.TRIMEDIA_asli

TRIMEDIA_iadd = _ida_domain.TRIMEDIA_iadd

TRIMEDIA_isub = _ida_domain.TRIMEDIA_isub

TRIMEDIA_igeq = _ida_domain.TRIMEDIA_igeq

TRIMEDIA_igtr = _ida_domain.TRIMEDIA_igtr

TRIMEDIA_bitand = _ida_domain.TRIMEDIA_bitand

TRIMEDIA_bitor = _ida_domain.TRIMEDIA_bitor

TRIMEDIA_asr = _ida_domain.TRIMEDIA_asr

TRIMEDIA_asl = _ida_domain.TRIMEDIA_asl

TRIMEDIA_ifloat = _ida_domain.TRIMEDIA_ifloat

TRIMEDIA_ifixrz = _ida_domain.TRIMEDIA_ifixrz

TRIMEDIA_fadd = _ida_domain.TRIMEDIA_fadd

TRIMEDIA_imin = _ida_domain.TRIMEDIA_imin

TRIMEDIA_imax = _ida_domain.TRIMEDIA_imax

TRIMEDIA_iavgonep = _ida_domain.TRIMEDIA_iavgonep

TRIMEDIA_ume8uu = _ida_domain.TRIMEDIA_ume8uu

TRIMEDIA_imul = _ida_domain.TRIMEDIA_imul

TRIMEDIA_fmul = _ida_domain.TRIMEDIA_fmul

TRIMEDIA_h_st8d = _ida_domain.TRIMEDIA_h_st8d

TRIMEDIA_h_st16d = _ida_domain.TRIMEDIA_h_st16d

TRIMEDIA_h_st32d = _ida_domain.TRIMEDIA_h_st32d

TRIMEDIA_isubi = _ida_domain.TRIMEDIA_isubi

TRIMEDIA_ugtr = _ida_domain.TRIMEDIA_ugtr

TRIMEDIA_ugtri = _ida_domain.TRIMEDIA_ugtri

TRIMEDIA_ugeq = _ida_domain.TRIMEDIA_ugeq

TRIMEDIA_ugeqi = _ida_domain.TRIMEDIA_ugeqi

TRIMEDIA_ieql = _ida_domain.TRIMEDIA_ieql

TRIMEDIA_ueqli = _ida_domain.TRIMEDIA_ueqli

TRIMEDIA_ineq = _ida_domain.TRIMEDIA_ineq

TRIMEDIA_uneqi = _ida_domain.TRIMEDIA_uneqi

TRIMEDIA_ulesi = _ida_domain.TRIMEDIA_ulesi

TRIMEDIA_ileqi = _ida_domain.TRIMEDIA_ileqi

TRIMEDIA_uleqi = _ida_domain.TRIMEDIA_uleqi

TRIMEDIA_h_iabs = _ida_domain.TRIMEDIA_h_iabs

TRIMEDIA_carry = _ida_domain.TRIMEDIA_carry

TRIMEDIA_izero = _ida_domain.TRIMEDIA_izero

TRIMEDIA_inonzero = _ida_domain.TRIMEDIA_inonzero

TRIMEDIA_bitxor = _ida_domain.TRIMEDIA_bitxor

TRIMEDIA_bitandinv = _ida_domain.TRIMEDIA_bitandinv

TRIMEDIA_bitinv = _ida_domain.TRIMEDIA_bitinv

TRIMEDIA_sex16 = _ida_domain.TRIMEDIA_sex16

TRIMEDIA_packbytes = _ida_domain.TRIMEDIA_packbytes

TRIMEDIA_pack16lsb = _ida_domain.TRIMEDIA_pack16lsb

TRIMEDIA_pack16msb = _ida_domain.TRIMEDIA_pack16msb

TRIMEDIA_ubytesel = _ida_domain.TRIMEDIA_ubytesel

TRIMEDIA_ibytesel = _ida_domain.TRIMEDIA_ibytesel

TRIMEDIA_mergelsb = _ida_domain.TRIMEDIA_mergelsb

TRIMEDIA_mergemsb = _ida_domain.TRIMEDIA_mergemsb

TRIMEDIA_ume8ii = _ida_domain.TRIMEDIA_ume8ii

TRIMEDIA_h_dspiabs = _ida_domain.TRIMEDIA_h_dspiabs

TRIMEDIA_dspiadd = _ida_domain.TRIMEDIA_dspiadd

TRIMEDIA_dspuadd = _ida_domain.TRIMEDIA_dspuadd

TRIMEDIA_dspisub = _ida_domain.TRIMEDIA_dspisub

TRIMEDIA_dspusub = _ida_domain.TRIMEDIA_dspusub

TRIMEDIA_dspidualadd = _ida_domain.TRIMEDIA_dspidualadd

TRIMEDIA_dspidualsub = _ida_domain.TRIMEDIA_dspidualsub

TRIMEDIA_h_dspidualabs = _ida_domain.TRIMEDIA_h_dspidualabs

TRIMEDIA_quadavg = _ida_domain.TRIMEDIA_quadavg

TRIMEDIA_iclipi = _ida_domain.TRIMEDIA_iclipi

TRIMEDIA_uclipi = _ida_domain.TRIMEDIA_uclipi

TRIMEDIA_uclipu = _ida_domain.TRIMEDIA_uclipu

TRIMEDIA_iflip = _ida_domain.TRIMEDIA_iflip

TRIMEDIA_dspuquadaddui = _ida_domain.TRIMEDIA_dspuquadaddui

TRIMEDIA_quadumin = _ida_domain.TRIMEDIA_quadumin

TRIMEDIA_quadumax = _ida_domain.TRIMEDIA_quadumax

TRIMEDIA_dualiclipi = _ida_domain.TRIMEDIA_dualiclipi

TRIMEDIA_dualuclipi = _ida_domain.TRIMEDIA_dualuclipi

TRIMEDIA_quadumulmsb = _ida_domain.TRIMEDIA_quadumulmsb

TRIMEDIA_ufir8uu = _ida_domain.TRIMEDIA_ufir8uu

TRIMEDIA_ifir8ui = _ida_domain.TRIMEDIA_ifir8ui

TRIMEDIA_ifir8ii = _ida_domain.TRIMEDIA_ifir8ii

TRIMEDIA_ifir16 = _ida_domain.TRIMEDIA_ifir16

TRIMEDIA_ufir16 = _ida_domain.TRIMEDIA_ufir16

TRIMEDIA_dspidualmul = _ida_domain.TRIMEDIA_dspidualmul

TRIMEDIA_lsr = _ida_domain.TRIMEDIA_lsr

TRIMEDIA_rol = _ida_domain.TRIMEDIA_rol

TRIMEDIA_roli = _ida_domain.TRIMEDIA_roli

TRIMEDIA_funshift1 = _ida_domain.TRIMEDIA_funshift1

TRIMEDIA_funshift2 = _ida_domain.TRIMEDIA_funshift2

TRIMEDIA_funshift3 = _ida_domain.TRIMEDIA_funshift3

TRIMEDIA_dualasr = _ida_domain.TRIMEDIA_dualasr

TRIMEDIA_mergedual16lsb = _ida_domain.TRIMEDIA_mergedual16lsb

TRIMEDIA_fdiv = _ida_domain.TRIMEDIA_fdiv

TRIMEDIA_fdivflags = _ida_domain.TRIMEDIA_fdivflags

TRIMEDIA_fsqrt = _ida_domain.TRIMEDIA_fsqrt

TRIMEDIA_fsqrtflags = _ida_domain.TRIMEDIA_fsqrtflags

TRIMEDIA_faddflags = _ida_domain.TRIMEDIA_faddflags

TRIMEDIA_fsub = _ida_domain.TRIMEDIA_fsub

TRIMEDIA_fsubflags = _ida_domain.TRIMEDIA_fsubflags

TRIMEDIA_fabsval = _ida_domain.TRIMEDIA_fabsval

TRIMEDIA_fabsvalflags = _ida_domain.TRIMEDIA_fabsvalflags

TRIMEDIA_ifloatrz = _ida_domain.TRIMEDIA_ifloatrz

TRIMEDIA_ifloatrzflags = _ida_domain.TRIMEDIA_ifloatrzflags

TRIMEDIA_ufloatrz = _ida_domain.TRIMEDIA_ufloatrz

TRIMEDIA_ufloatrzflags = _ida_domain.TRIMEDIA_ufloatrzflags

TRIMEDIA_ifixieee = _ida_domain.TRIMEDIA_ifixieee

TRIMEDIA_ifixieeeflags = _ida_domain.TRIMEDIA_ifixieeeflags

TRIMEDIA_ufixieee = _ida_domain.TRIMEDIA_ufixieee

TRIMEDIA_ufixieeeflags = _ida_domain.TRIMEDIA_ufixieeeflags

TRIMEDIA_ufixrz = _ida_domain.TRIMEDIA_ufixrz

TRIMEDIA_ufixrzflags = _ida_domain.TRIMEDIA_ufixrzflags

TRIMEDIA_ufloat = _ida_domain.TRIMEDIA_ufloat

TRIMEDIA_ufloatflags = _ida_domain.TRIMEDIA_ufloatflags

TRIMEDIA_ifixrzflags = _ida_domain.TRIMEDIA_ifixrzflags

TRIMEDIA_ifloatflags = _ida_domain.TRIMEDIA_ifloatflags

TRIMEDIA_umul = _ida_domain.TRIMEDIA_umul

TRIMEDIA_imulm = _ida_domain.TRIMEDIA_imulm

TRIMEDIA_umulm = _ida_domain.TRIMEDIA_umulm

TRIMEDIA_dspimul = _ida_domain.TRIMEDIA_dspimul

TRIMEDIA_dspumul = _ida_domain.TRIMEDIA_dspumul

TRIMEDIA_fmulflags = _ida_domain.TRIMEDIA_fmulflags

TRIMEDIA_fgtr = _ida_domain.TRIMEDIA_fgtr

TRIMEDIA_fgtrflags = _ida_domain.TRIMEDIA_fgtrflags

TRIMEDIA_fgeq = _ida_domain.TRIMEDIA_fgeq

TRIMEDIA_fgeqflags = _ida_domain.TRIMEDIA_fgeqflags

TRIMEDIA_feql = _ida_domain.TRIMEDIA_feql

TRIMEDIA_feqlflags = _ida_domain.TRIMEDIA_feqlflags

TRIMEDIA_fneq = _ida_domain.TRIMEDIA_fneq

TRIMEDIA_fneqflags = _ida_domain.TRIMEDIA_fneqflags

TRIMEDIA_fsign = _ida_domain.TRIMEDIA_fsign

TRIMEDIA_fsignflags = _ida_domain.TRIMEDIA_fsignflags

TRIMEDIA_cycles = _ida_domain.TRIMEDIA_cycles

TRIMEDIA_hicycles = _ida_domain.TRIMEDIA_hicycles

TRIMEDIA_readdpc = _ida_domain.TRIMEDIA_readdpc

TRIMEDIA_readspc = _ida_domain.TRIMEDIA_readspc

TRIMEDIA_readpcsw = _ida_domain.TRIMEDIA_readpcsw

TRIMEDIA_writespc = _ida_domain.TRIMEDIA_writespc

TRIMEDIA_writedpc = _ida_domain.TRIMEDIA_writedpc

TRIMEDIA_writepcsw = _ida_domain.TRIMEDIA_writepcsw

TRIMEDIA_curcycles = _ida_domain.TRIMEDIA_curcycles

TRIMEDIA_jmpt = _ida_domain.TRIMEDIA_jmpt

TRIMEDIA_ijmpt = _ida_domain.TRIMEDIA_ijmpt

TRIMEDIA_jmpi = _ida_domain.TRIMEDIA_jmpi

TRIMEDIA_ijmpi = _ida_domain.TRIMEDIA_ijmpi

TRIMEDIA_jmpf = _ida_domain.TRIMEDIA_jmpf

TRIMEDIA_ijmpf = _ida_domain.TRIMEDIA_ijmpf

TRIMEDIA_iclr = _ida_domain.TRIMEDIA_iclr

TRIMEDIA_uimm = _ida_domain.TRIMEDIA_uimm

TRIMEDIA_ild8d = _ida_domain.TRIMEDIA_ild8d

TRIMEDIA_ild8r = _ida_domain.TRIMEDIA_ild8r

TRIMEDIA_uld8r = _ida_domain.TRIMEDIA_uld8r

TRIMEDIA_ild16r = _ida_domain.TRIMEDIA_ild16r

TRIMEDIA_ild16x = _ida_domain.TRIMEDIA_ild16x

TRIMEDIA_uld16d = _ida_domain.TRIMEDIA_uld16d

TRIMEDIA_uld16r = _ida_domain.TRIMEDIA_uld16r

TRIMEDIA_uld16x = _ida_domain.TRIMEDIA_uld16x

TRIMEDIA_ld32r = _ida_domain.TRIMEDIA_ld32r

TRIMEDIA_ld32x = _ida_domain.TRIMEDIA_ld32x

TRIMEDIA_rdtag = _ida_domain.TRIMEDIA_rdtag

TRIMEDIA_rdstatus = _ida_domain.TRIMEDIA_rdstatus

TRIMEDIA_dcb = _ida_domain.TRIMEDIA_dcb

TRIMEDIA_dinvalid = _ida_domain.TRIMEDIA_dinvalid

TRIMEDIA_prefd = _ida_domain.TRIMEDIA_prefd

TRIMEDIA_prefr = _ida_domain.TRIMEDIA_prefr

TRIMEDIA_pref16x = _ida_domain.TRIMEDIA_pref16x

TRIMEDIA_pref32x = _ida_domain.TRIMEDIA_pref32x

TRIMEDIA_allocd = _ida_domain.TRIMEDIA_allocd

TRIMEDIA_allocr = _ida_domain.TRIMEDIA_allocr

TRIMEDIA_allocx = _ida_domain.TRIMEDIA_allocx

TRIMEDIA_nop = _ida_domain.TRIMEDIA_nop

TRIMEDIA_alloc = _ida_domain.TRIMEDIA_alloc

TRIMEDIA_dspiabs = _ida_domain.TRIMEDIA_dspiabs

TRIMEDIA_dspidualabs = _ida_domain.TRIMEDIA_dspidualabs

TRIMEDIA_iabs = _ida_domain.TRIMEDIA_iabs

TRIMEDIA_ild16 = _ida_domain.TRIMEDIA_ild16

TRIMEDIA_ild8 = _ida_domain.TRIMEDIA_ild8

TRIMEDIA_ineg = _ida_domain.TRIMEDIA_ineg

TRIMEDIA_ld32 = _ida_domain.TRIMEDIA_ld32

TRIMEDIA_pref = _ida_domain.TRIMEDIA_pref

TRIMEDIA_sex8 = _ida_domain.TRIMEDIA_sex8

TRIMEDIA_st16 = _ida_domain.TRIMEDIA_st16

TRIMEDIA_st16d = _ida_domain.TRIMEDIA_st16d

TRIMEDIA_st32 = _ida_domain.TRIMEDIA_st32

TRIMEDIA_st32d = _ida_domain.TRIMEDIA_st32d

TRIMEDIA_st8 = _ida_domain.TRIMEDIA_st8

TRIMEDIA_st8d = _ida_domain.TRIMEDIA_st8d

TRIMEDIA_uld16 = _ida_domain.TRIMEDIA_uld16

TRIMEDIA_uld8 = _ida_domain.TRIMEDIA_uld8

TRIMEDIA_zex16 = _ida_domain.TRIMEDIA_zex16

TRIMEDIA_zex8 = _ida_domain.TRIMEDIA_zex8

TRIMEDIA_ident = _ida_domain.TRIMEDIA_ident

TRIMEDIA_iles = _ida_domain.TRIMEDIA_iles

TRIMEDIA_ileq = _ida_domain.TRIMEDIA_ileq

TRIMEDIA_ules = _ida_domain.TRIMEDIA_ules

TRIMEDIA_uleq = _ida_domain.TRIMEDIA_uleq

TRIMEDIA_fles = _ida_domain.TRIMEDIA_fles

TRIMEDIA_fleq = _ida_domain.TRIMEDIA_fleq

TRIMEDIA_ueql = _ida_domain.TRIMEDIA_ueql

TRIMEDIA_uneq = _ida_domain.TRIMEDIA_uneq

TRIMEDIA_flesflags = _ida_domain.TRIMEDIA_flesflags

TRIMEDIA_fleqflags = _ida_domain.TRIMEDIA_fleqflags

TRIMEDIA_borrow = _ida_domain.TRIMEDIA_borrow

TRIMEDIA_umin = _ida_domain.TRIMEDIA_umin

TRIMEDIA_lsl = _ida_domain.TRIMEDIA_lsl

TRIMEDIA_lsli = _ida_domain.TRIMEDIA_lsli

TRIMEDIA_last = _ida_domain.TRIMEDIA_last

NEC_78K_0_null = _ida_domain.NEC_78K_0_null

NEC_78K_0_mov = _ida_domain.NEC_78K_0_mov

NEC_78K_0_xch = _ida_domain.NEC_78K_0_xch

NEC_78K_0_movw = _ida_domain.NEC_78K_0_movw

NEC_78K_0_xchw = _ida_domain.NEC_78K_0_xchw

NEC_78K_0_add = _ida_domain.NEC_78K_0_add

NEC_78K_0_addc = _ida_domain.NEC_78K_0_addc

NEC_78K_0_sub = _ida_domain.NEC_78K_0_sub

NEC_78K_0_subc = _ida_domain.NEC_78K_0_subc

NEC_78K_0_and = _ida_domain.NEC_78K_0_and

NEC_78K_0_or = _ida_domain.NEC_78K_0_or

NEC_78K_0_xor = _ida_domain.NEC_78K_0_xor

NEC_78K_0_cmp = _ida_domain.NEC_78K_0_cmp

NEC_78K_0_addw = _ida_domain.NEC_78K_0_addw

NEC_78K_0_subw = _ida_domain.NEC_78K_0_subw

NEC_78K_0_cmpw = _ida_domain.NEC_78K_0_cmpw

NEC_78K_0_mulu = _ida_domain.NEC_78K_0_mulu

NEC_78K_0_divuw = _ida_domain.NEC_78K_0_divuw

NEC_78K_0_inc = _ida_domain.NEC_78K_0_inc

NEC_78K_0_dec = _ida_domain.NEC_78K_0_dec

NEC_78K_0_incw = _ida_domain.NEC_78K_0_incw

NEC_78K_0_decw = _ida_domain.NEC_78K_0_decw

NEC_78K_0_ror = _ida_domain.NEC_78K_0_ror

NEC_78K_0_rol = _ida_domain.NEC_78K_0_rol

NEC_78K_0_rorc = _ida_domain.NEC_78K_0_rorc

NEC_78K_0_rolc = _ida_domain.NEC_78K_0_rolc

NEC_78K_0_ror4 = _ida_domain.NEC_78K_0_ror4

NEC_78K_0_rol4 = _ida_domain.NEC_78K_0_rol4

NEC_78K_0_adjba = _ida_domain.NEC_78K_0_adjba

NEC_78K_0_adjbs = _ida_domain.NEC_78K_0_adjbs

NEC_78K_0_mov1 = _ida_domain.NEC_78K_0_mov1

NEC_78K_0_and1 = _ida_domain.NEC_78K_0_and1

NEC_78K_0_or1 = _ida_domain.NEC_78K_0_or1

NEC_78K_0_xor1 = _ida_domain.NEC_78K_0_xor1

NEC_78K_0_set1 = _ida_domain.NEC_78K_0_set1

NEC_78K_0_clr1 = _ida_domain.NEC_78K_0_clr1

NEC_78K_0_not1 = _ida_domain.NEC_78K_0_not1

NEC_78K_0_call = _ida_domain.NEC_78K_0_call

NEC_78K_0_callf = _ida_domain.NEC_78K_0_callf

NEC_78K_0_callt = _ida_domain.NEC_78K_0_callt

NEC_78K_0_brk = _ida_domain.NEC_78K_0_brk

NEC_78K_0_ret = _ida_domain.NEC_78K_0_ret

NEC_78K_0_retb = _ida_domain.NEC_78K_0_retb

NEC_78K_0_reti = _ida_domain.NEC_78K_0_reti

NEC_78K_0_push = _ida_domain.NEC_78K_0_push

NEC_78K_0_pop = _ida_domain.NEC_78K_0_pop

NEC_78K_0_br = _ida_domain.NEC_78K_0_br

NEC_78K_0_bc = _ida_domain.NEC_78K_0_bc

NEC_78K_0_bnc = _ida_domain.NEC_78K_0_bnc

NEC_78K_0_bz = _ida_domain.NEC_78K_0_bz

NEC_78K_0_bnz = _ida_domain.NEC_78K_0_bnz

NEC_78K_0_bt = _ida_domain.NEC_78K_0_bt

NEC_78K_0_bf = _ida_domain.NEC_78K_0_bf

NEC_78K_0_btclr = _ida_domain.NEC_78K_0_btclr

NEC_78K_0_dbnz = _ida_domain.NEC_78K_0_dbnz

NEC_78K_0_sel = _ida_domain.NEC_78K_0_sel

NEC_78K_0_nop = _ida_domain.NEC_78K_0_nop

NEC_78K_0_EI = _ida_domain.NEC_78K_0_EI

NEC_78K_0_DI = _ida_domain.NEC_78K_0_DI

NEC_78K_0_HALT = _ida_domain.NEC_78K_0_HALT

NEC_78K_0_STOP = _ida_domain.NEC_78K_0_STOP

NEC_78K_0_last = _ida_domain.NEC_78K_0_last

NEC_78K_0S_null = _ida_domain.NEC_78K_0S_null

NEC_78K_0S_cmp = _ida_domain.NEC_78K_0S_cmp

NEC_78K_0S_xor = _ida_domain.NEC_78K_0S_xor

NEC_78K_0S_and = _ida_domain.NEC_78K_0S_and

NEC_78K_0S_or = _ida_domain.NEC_78K_0S_or

NEC_78K_0S_add = _ida_domain.NEC_78K_0S_add

NEC_78K_0S_sub = _ida_domain.NEC_78K_0S_sub

NEC_78K_0S_addc = _ida_domain.NEC_78K_0S_addc

NEC_78K_0S_subc = _ida_domain.NEC_78K_0S_subc

NEC_78K_0S_subw = _ida_domain.NEC_78K_0S_subw

NEC_78K_0S_addw = _ida_domain.NEC_78K_0S_addw

NEC_78K_0S_cmpw = _ida_domain.NEC_78K_0S_cmpw

NEC_78K_0S_inc = _ida_domain.NEC_78K_0S_inc

NEC_78K_0S_dec = _ida_domain.NEC_78K_0S_dec

NEC_78K_0S_incw = _ida_domain.NEC_78K_0S_incw

NEC_78K_0S_decw = _ida_domain.NEC_78K_0S_decw

NEC_78K_0S_ror = _ida_domain.NEC_78K_0S_ror

NEC_78K_0S_rol = _ida_domain.NEC_78K_0S_rol

NEC_78K_0S_rorc = _ida_domain.NEC_78K_0S_rorc

NEC_78K_0S_rolc = _ida_domain.NEC_78K_0S_rolc

NEC_78K_0S_call = _ida_domain.NEC_78K_0S_call

NEC_78K_0S_callt = _ida_domain.NEC_78K_0S_callt

NEC_78K_0S_ret = _ida_domain.NEC_78K_0S_ret

NEC_78K_0S_reti = _ida_domain.NEC_78K_0S_reti

NEC_78K_0S_mov = _ida_domain.NEC_78K_0S_mov

NEC_78K_0S_xch = _ida_domain.NEC_78K_0S_xch

NEC_78K_0S_xchw = _ida_domain.NEC_78K_0S_xchw

NEC_78K_0S_set1 = _ida_domain.NEC_78K_0S_set1

NEC_78K_0S_clr1 = _ida_domain.NEC_78K_0S_clr1

NEC_78K_0S_not1 = _ida_domain.NEC_78K_0S_not1

NEC_78K_0S_push = _ida_domain.NEC_78K_0S_push

NEC_78K_0S_pop = _ida_domain.NEC_78K_0S_pop

NEC_78K_0S_movw = _ida_domain.NEC_78K_0S_movw

NEC_78K_0S_br = _ida_domain.NEC_78K_0S_br

NEC_78K_0S_bc = _ida_domain.NEC_78K_0S_bc

NEC_78K_0S_bnc = _ida_domain.NEC_78K_0S_bnc

NEC_78K_0S_bz = _ida_domain.NEC_78K_0S_bz

NEC_78K_0S_bnz = _ida_domain.NEC_78K_0S_bnz

NEC_78K_0S_bt = _ida_domain.NEC_78K_0S_bt

NEC_78K_0S_bf = _ida_domain.NEC_78K_0S_bf

NEC_78K_0S_dbnz = _ida_domain.NEC_78K_0S_dbnz

NEC_78K_0S_nop = _ida_domain.NEC_78K_0S_nop

NEC_78K_0S_EI = _ida_domain.NEC_78K_0S_EI

NEC_78K_0S_DI = _ida_domain.NEC_78K_0S_DI

NEC_78K_0S_HALT = _ida_domain.NEC_78K_0S_HALT

NEC_78K_0S_STOP = _ida_domain.NEC_78K_0S_STOP

NEC_78K_0S_last = _ida_domain.NEC_78K_0S_last

M16C_null = _ida_domain.M16C_null

M16C_abs = _ida_domain.M16C_abs

M16C_adc = _ida_domain.M16C_adc

M16C_adcf = _ida_domain.M16C_adcf

M16C_add = _ida_domain.M16C_add

M16C_adjnz = _ida_domain.M16C_adjnz

M16C_and = _ida_domain.M16C_and

M16C_band = _ida_domain.M16C_band

M16C_bclr = _ida_domain.M16C_bclr

M16C_bmcnd = _ida_domain.M16C_bmcnd

M16C_bmgeu = _ida_domain.M16C_bmgeu

M16C_bmgtu = _ida_domain.M16C_bmgtu

M16C_bmeq = _ida_domain.M16C_bmeq

M16C_bmn = _ida_domain.M16C_bmn

M16C_bmle = _ida_domain.M16C_bmle

M16C_bmo = _ida_domain.M16C_bmo

M16C_bmge = _ida_domain.M16C_bmge

M16C_bmltu = _ida_domain.M16C_bmltu

M16C_bmleu = _ida_domain.M16C_bmleu

M16C_bmne = _ida_domain.M16C_bmne

M16C_bmpz = _ida_domain.M16C_bmpz

M16C_bmgt = _ida_domain.M16C_bmgt

M16C_bmno = _ida_domain.M16C_bmno

M16C_bmlt = _ida_domain.M16C_bmlt

M16C_bnand = _ida_domain.M16C_bnand

M16C_bnor = _ida_domain.M16C_bnor

M16C_bnot = _ida_domain.M16C_bnot

M16C_bntst = _ida_domain.M16C_bntst

M16C_bnxor = _ida_domain.M16C_bnxor

M16C_bor = _ida_domain.M16C_bor

M16C_brk = _ida_domain.M16C_brk

M16C_bset = _ida_domain.M16C_bset

M16C_btst = _ida_domain.M16C_btst

M16C_btstc = _ida_domain.M16C_btstc

M16C_btsts = _ida_domain.M16C_btsts

M16C_bxor = _ida_domain.M16C_bxor

M16C_cmp = _ida_domain.M16C_cmp

M16C_dadc = _ida_domain.M16C_dadc

M16C_dadd = _ida_domain.M16C_dadd

M16C_dec = _ida_domain.M16C_dec

M16C_div = _ida_domain.M16C_div

M16C_divu = _ida_domain.M16C_divu

M16C_divx = _ida_domain.M16C_divx

M16C_dsbb = _ida_domain.M16C_dsbb

M16C_dsub = _ida_domain.M16C_dsub

M16C_enter = _ida_domain.M16C_enter

M16C_exitd = _ida_domain.M16C_exitd

M16C_exts = _ida_domain.M16C_exts

M16C_fclr = _ida_domain.M16C_fclr

M16C_fset = _ida_domain.M16C_fset

M16C_inc = _ida_domain.M16C_inc

M16C_int = _ida_domain.M16C_int

M16C_into = _ida_domain.M16C_into

M16C_jcnd = _ida_domain.M16C_jcnd

M16C_jgeu = _ida_domain.M16C_jgeu

M16C_jgtu = _ida_domain.M16C_jgtu

M16C_jeq = _ida_domain.M16C_jeq

M16C_jn = _ida_domain.M16C_jn

M16C_jle = _ida_domain.M16C_jle

M16C_jo = _ida_domain.M16C_jo

M16C_jge = _ida_domain.M16C_jge

M16C_jltu = _ida_domain.M16C_jltu

M16C_jleu = _ida_domain.M16C_jleu

M16C_jne = _ida_domain.M16C_jne

M16C_jpz = _ida_domain.M16C_jpz

M16C_jgt = _ida_domain.M16C_jgt

M16C_jno = _ida_domain.M16C_jno

M16C_jlt = _ida_domain.M16C_jlt

M16C_jmp = _ida_domain.M16C_jmp

M16C_jmpi = _ida_domain.M16C_jmpi

M16C_jmps = _ida_domain.M16C_jmps

M16C_jsr = _ida_domain.M16C_jsr

M16C_jsri = _ida_domain.M16C_jsri

M16C_jsrs = _ida_domain.M16C_jsrs

M16C_ldc = _ida_domain.M16C_ldc

M16C_ldctx = _ida_domain.M16C_ldctx

M16C_lde = _ida_domain.M16C_lde

M16C_ldintb = _ida_domain.M16C_ldintb

M16C_ldipl = _ida_domain.M16C_ldipl

M16C_mov = _ida_domain.M16C_mov

M16C_mova = _ida_domain.M16C_mova

M16C_movhh = _ida_domain.M16C_movhh

M16C_movhl = _ida_domain.M16C_movhl

M16C_movlh = _ida_domain.M16C_movlh

M16C_movll = _ida_domain.M16C_movll

M16C_mul = _ida_domain.M16C_mul

M16C_mulu = _ida_domain.M16C_mulu

M16C_neg = _ida_domain.M16C_neg

M16C_nop = _ida_domain.M16C_nop

M16C_not = _ida_domain.M16C_not

M16C_or = _ida_domain.M16C_or

M16C_pop = _ida_domain.M16C_pop

M16C_popc = _ida_domain.M16C_popc

M16C_popm = _ida_domain.M16C_popm

M16C_push = _ida_domain.M16C_push

M16C_pusha = _ida_domain.M16C_pusha

M16C_pushc = _ida_domain.M16C_pushc

M16C_pushm = _ida_domain.M16C_pushm

M16C_reit = _ida_domain.M16C_reit

M16C_rmpa = _ida_domain.M16C_rmpa

M16C_rolc = _ida_domain.M16C_rolc

M16C_rorc = _ida_domain.M16C_rorc

M16C_rot = _ida_domain.M16C_rot

M16C_rts = _ida_domain.M16C_rts

M16C_sbb = _ida_domain.M16C_sbb

M16C_sbjnz = _ida_domain.M16C_sbjnz

M16C_sha = _ida_domain.M16C_sha

M16C_shl = _ida_domain.M16C_shl

M16C_smovb = _ida_domain.M16C_smovb

M16C_smovf = _ida_domain.M16C_smovf

M16C_sstr = _ida_domain.M16C_sstr

M16C_stc = _ida_domain.M16C_stc

M16C_stctx = _ida_domain.M16C_stctx

M16C_ste = _ida_domain.M16C_ste

M16C_stnz = _ida_domain.M16C_stnz

M16C_stz = _ida_domain.M16C_stz

M16C_stzx = _ida_domain.M16C_stzx

M16C_sub = _ida_domain.M16C_sub

M16C_tst = _ida_domain.M16C_tst

M16C_und = _ida_domain.M16C_und

M16C_wait = _ida_domain.M16C_wait

M16C_xchg = _ida_domain.M16C_xchg

M16C_xor = _ida_domain.M16C_xor

M16C_addx = _ida_domain.M16C_addx

M16C_bitindex = _ida_domain.M16C_bitindex

M16C_brk2 = _ida_domain.M16C_brk2

M16C_clip = _ida_domain.M16C_clip

M16C_cmpx = _ida_domain.M16C_cmpx

M16C_extz = _ida_domain.M16C_extz

M16C_freit = _ida_domain.M16C_freit

M16C_indexb = _ida_domain.M16C_indexb

M16C_indexbd = _ida_domain.M16C_indexbd

M16C_indexbs = _ida_domain.M16C_indexbs

M16C_indexl = _ida_domain.M16C_indexl

M16C_indexld = _ida_domain.M16C_indexld

M16C_indexls = _ida_domain.M16C_indexls

M16C_indexw = _ida_domain.M16C_indexw

M16C_indexwd = _ida_domain.M16C_indexwd

M16C_indexws = _ida_domain.M16C_indexws

M16C_max = _ida_domain.M16C_max

M16C_min = _ida_domain.M16C_min

M16C_movx = _ida_domain.M16C_movx

M16C_mulex = _ida_domain.M16C_mulex

M16C_sccnd = _ida_domain.M16C_sccnd

M16C_scgeu = _ida_domain.M16C_scgeu

M16C_scgtu = _ida_domain.M16C_scgtu

M16C_sceq = _ida_domain.M16C_sceq

M16C_scn = _ida_domain.M16C_scn

M16C_scle = _ida_domain.M16C_scle

M16C_sco = _ida_domain.M16C_sco

M16C_scge = _ida_domain.M16C_scge

M16C_scltu = _ida_domain.M16C_scltu

M16C_scleu = _ida_domain.M16C_scleu

M16C_scne = _ida_domain.M16C_scne

M16C_scpz = _ida_domain.M16C_scpz

M16C_scgt = _ida_domain.M16C_scgt

M16C_scno = _ida_domain.M16C_scno

M16C_sclt = _ida_domain.M16C_sclt

M16C_scmpu = _ida_domain.M16C_scmpu

M16C_sin = _ida_domain.M16C_sin

M16C_smovu = _ida_domain.M16C_smovu

M16C_sout = _ida_domain.M16C_sout

M16C_subx = _ida_domain.M16C_subx

M16C_shanc = _ida_domain.M16C_shanc

M16C_shlnc = _ida_domain.M16C_shlnc

M16C_addf = _ida_domain.M16C_addf

M16C_adsf = _ida_domain.M16C_adsf

M16C_cmpf = _ida_domain.M16C_cmpf

M16C_cnvif = _ida_domain.M16C_cnvif

M16C_divf = _ida_domain.M16C_divf

M16C_ediv = _ida_domain.M16C_ediv

M16C_edivu = _ida_domain.M16C_edivu

M16C_edivx = _ida_domain.M16C_edivx

M16C_emul = _ida_domain.M16C_emul

M16C_emulu = _ida_domain.M16C_emulu

M16C_exiti = _ida_domain.M16C_exiti

M16C_index1 = _ida_domain.M16C_index1

M16C_index2 = _ida_domain.M16C_index2

M16C_mulf = _ida_domain.M16C_mulf

M16C_mulx = _ida_domain.M16C_mulx

M16C_round = _ida_domain.M16C_round

M16C_stop = _ida_domain.M16C_stop

M16C_subf = _ida_domain.M16C_subf

M16C_suntil = _ida_domain.M16C_suntil

M16C_swhile = _ida_domain.M16C_swhile

M16C_last = _ida_domain.M16C_last

m32r_null = _ida_domain.m32r_null

m32r_add = _ida_domain.m32r_add

m32r_add3 = _ida_domain.m32r_add3

m32r_addi = _ida_domain.m32r_addi

m32r_addv = _ida_domain.m32r_addv

m32r_addv3 = _ida_domain.m32r_addv3

m32r_addx = _ida_domain.m32r_addx

m32r_and = _ida_domain.m32r_and

m32r_and3 = _ida_domain.m32r_and3

m32r_bc = _ida_domain.m32r_bc

m32r_beq = _ida_domain.m32r_beq

m32r_beqz = _ida_domain.m32r_beqz

m32r_bgez = _ida_domain.m32r_bgez

m32r_bgtz = _ida_domain.m32r_bgtz

m32r_bl = _ida_domain.m32r_bl

m32r_blez = _ida_domain.m32r_blez

m32r_bltz = _ida_domain.m32r_bltz

m32r_bnc = _ida_domain.m32r_bnc

m32r_bne = _ida_domain.m32r_bne

m32r_bnez = _ida_domain.m32r_bnez

m32r_bra = _ida_domain.m32r_bra

m32r_cmp = _ida_domain.m32r_cmp

m32r_cmpi = _ida_domain.m32r_cmpi

m32r_cmpu = _ida_domain.m32r_cmpu

m32r_cmpui = _ida_domain.m32r_cmpui

m32r_div = _ida_domain.m32r_div

m32r_divu = _ida_domain.m32r_divu

m32r_jl = _ida_domain.m32r_jl

m32r_jmp = _ida_domain.m32r_jmp

m32r_ld = _ida_domain.m32r_ld

m32r_ld24 = _ida_domain.m32r_ld24

m32r_ldb = _ida_domain.m32r_ldb

m32r_ldh = _ida_domain.m32r_ldh

m32r_ldi = _ida_domain.m32r_ldi

m32r_ldub = _ida_domain.m32r_ldub

m32r_lduh = _ida_domain.m32r_lduh

m32r_lock = _ida_domain.m32r_lock

m32r_machi = _ida_domain.m32r_machi

m32r_maclo = _ida_domain.m32r_maclo

m32r_macwhi = _ida_domain.m32r_macwhi

m32r_macwlo = _ida_domain.m32r_macwlo

m32r_mul = _ida_domain.m32r_mul

m32r_mulhi = _ida_domain.m32r_mulhi

m32r_mullo = _ida_domain.m32r_mullo

m32r_mulwhi = _ida_domain.m32r_mulwhi

m32r_mulwlo = _ida_domain.m32r_mulwlo

m32r_mv = _ida_domain.m32r_mv

m32r_mvfachi = _ida_domain.m32r_mvfachi

m32r_mvfaclo = _ida_domain.m32r_mvfaclo

m32r_mvfacmi = _ida_domain.m32r_mvfacmi

m32r_mvfc = _ida_domain.m32r_mvfc

m32r_mvtachi = _ida_domain.m32r_mvtachi

m32r_mvtaclo = _ida_domain.m32r_mvtaclo

m32r_mvtc = _ida_domain.m32r_mvtc

m32r_neg = _ida_domain.m32r_neg

m32r_nop = _ida_domain.m32r_nop

m32r_not = _ida_domain.m32r_not

m32r_or = _ida_domain.m32r_or

m32r_or3 = _ida_domain.m32r_or3

m32r_push = _ida_domain.m32r_push

m32r_pop = _ida_domain.m32r_pop

m32r_rac = _ida_domain.m32r_rac

m32r_rach = _ida_domain.m32r_rach

m32r_rem = _ida_domain.m32r_rem

m32r_remu = _ida_domain.m32r_remu

m32r_rte = _ida_domain.m32r_rte

m32r_seth = _ida_domain.m32r_seth

m32r_sll = _ida_domain.m32r_sll

m32r_sll3 = _ida_domain.m32r_sll3

m32r_slli = _ida_domain.m32r_slli

m32r_sra = _ida_domain.m32r_sra

m32r_sra3 = _ida_domain.m32r_sra3

m32r_srai = _ida_domain.m32r_srai

m32r_srl = _ida_domain.m32r_srl

m32r_srl3 = _ida_domain.m32r_srl3

m32r_srli = _ida_domain.m32r_srli

m32r_st = _ida_domain.m32r_st

m32r_stb = _ida_domain.m32r_stb

m32r_sth = _ida_domain.m32r_sth

m32r_sub = _ida_domain.m32r_sub

m32r_subv = _ida_domain.m32r_subv

m32r_subx = _ida_domain.m32r_subx

m32r_trap = _ida_domain.m32r_trap

m32r_unlock = _ida_domain.m32r_unlock

m32r_xor = _ida_domain.m32r_xor

m32r_xor3 = _ida_domain.m32r_xor3

m32rx_bcl = _ida_domain.m32rx_bcl

m32rx_bncl = _ida_domain.m32rx_bncl

m32rx_cmpeq = _ida_domain.m32rx_cmpeq

m32rx_cmpz = _ida_domain.m32rx_cmpz

m32rx_divh = _ida_domain.m32rx_divh

m32rx_jc = _ida_domain.m32rx_jc

m32rx_jnc = _ida_domain.m32rx_jnc

m32rx_machi = _ida_domain.m32rx_machi

m32rx_maclo = _ida_domain.m32rx_maclo

m32rx_macwhi = _ida_domain.m32rx_macwhi

m32rx_macwlo = _ida_domain.m32rx_macwlo

m32rx_mulhi = _ida_domain.m32rx_mulhi

m32rx_mullo = _ida_domain.m32rx_mullo

m32rx_mulwhi = _ida_domain.m32rx_mulwhi

m32rx_mulwlo = _ida_domain.m32rx_mulwlo

m32rx_mvfachi = _ida_domain.m32rx_mvfachi

m32rx_mvfaclo = _ida_domain.m32rx_mvfaclo

m32rx_mvfacmi = _ida_domain.m32rx_mvfacmi

m32rx_mvtachi = _ida_domain.m32rx_mvtachi

m32rx_mvtaclo = _ida_domain.m32rx_mvtaclo

m32rx_rac = _ida_domain.m32rx_rac

m32rx_rach = _ida_domain.m32rx_rach

m32rx_satb = _ida_domain.m32rx_satb

m32rx_sath = _ida_domain.m32rx_sath

m32rx_sat = _ida_domain.m32rx_sat

m32rx_pcmpbz = _ida_domain.m32rx_pcmpbz

m32rx_sadd = _ida_domain.m32rx_sadd

m32rx_macwu1 = _ida_domain.m32rx_macwu1

m32rx_msblo = _ida_domain.m32rx_msblo

m32rx_mulwu1 = _ida_domain.m32rx_mulwu1

m32rx_maclh1 = _ida_domain.m32rx_maclh1

m32rx_sc = _ida_domain.m32rx_sc

m32rx_snc = _ida_domain.m32rx_snc

m32r_fadd = _ida_domain.m32r_fadd

m32r_fsub = _ida_domain.m32r_fsub

m32r_fmul = _ida_domain.m32r_fmul

m32r_fdiv = _ida_domain.m32r_fdiv

m32r_fmadd = _ida_domain.m32r_fmadd

m32r_fmsub = _ida_domain.m32r_fmsub

m32r_itof = _ida_domain.m32r_itof

m32r_utof = _ida_domain.m32r_utof

m32r_ftoi = _ida_domain.m32r_ftoi

m32r_ftos = _ida_domain.m32r_ftos

m32r_fcmp = _ida_domain.m32r_fcmp

m32r_fcmpe = _ida_domain.m32r_fcmpe

m32r_bset = _ida_domain.m32r_bset

m32r_bclr = _ida_domain.m32r_bclr

m32r_btst = _ida_domain.m32r_btst

m32r_setpsw = _ida_domain.m32r_setpsw

m32r_clrpsw = _ida_domain.m32r_clrpsw

m32r_last = _ida_domain.m32r_last

m740_null = _ida_domain.m740_null

m740_adc = _ida_domain.m740_adc

m740_and = _ida_domain.m740_and

m740_asl = _ida_domain.m740_asl

m740_bbc = _ida_domain.m740_bbc

m740_bbs = _ida_domain.m740_bbs

m740_bcc = _ida_domain.m740_bcc

m740_bcs = _ida_domain.m740_bcs

m740_beq = _ida_domain.m740_beq

m740_bit = _ida_domain.m740_bit

m740_bmi = _ida_domain.m740_bmi

m740_bne = _ida_domain.m740_bne

m740_bpl = _ida_domain.m740_bpl

m740_bra = _ida_domain.m740_bra

m740_brk = _ida_domain.m740_brk

m740_bvc = _ida_domain.m740_bvc

m740_bvs = _ida_domain.m740_bvs

m740_clb = _ida_domain.m740_clb

m740_clc = _ida_domain.m740_clc

m740_cld = _ida_domain.m740_cld

m740_cli = _ida_domain.m740_cli

m740_clt = _ida_domain.m740_clt

m740_clv = _ida_domain.m740_clv

m740_cmp = _ida_domain.m740_cmp

m740_com = _ida_domain.m740_com

m740_cpx = _ida_domain.m740_cpx

m740_cpy = _ida_domain.m740_cpy

m740_dec = _ida_domain.m740_dec

m740_dex = _ida_domain.m740_dex

m740_dey = _ida_domain.m740_dey

m740_div = _ida_domain.m740_div

m740_eor = _ida_domain.m740_eor

m740_inc = _ida_domain.m740_inc

m740_inx = _ida_domain.m740_inx

m740_iny = _ida_domain.m740_iny

m740_jmp = _ida_domain.m740_jmp

m740_jsr = _ida_domain.m740_jsr

m740_lda = _ida_domain.m740_lda

m740_ldm = _ida_domain.m740_ldm

m740_ldx = _ida_domain.m740_ldx

m740_ldy = _ida_domain.m740_ldy

m740_lsr = _ida_domain.m740_lsr

m740_mul = _ida_domain.m740_mul

m740_nop = _ida_domain.m740_nop

m740_ora = _ida_domain.m740_ora

m740_pha = _ida_domain.m740_pha

m740_php = _ida_domain.m740_php

m740_pla = _ida_domain.m740_pla

m740_plp = _ida_domain.m740_plp

m740_rol = _ida_domain.m740_rol

m740_ror = _ida_domain.m740_ror

m740_rrf = _ida_domain.m740_rrf

m740_rti = _ida_domain.m740_rti

m740_rts = _ida_domain.m740_rts

m740_sbc = _ida_domain.m740_sbc

m740_seb = _ida_domain.m740_seb

m740_sec = _ida_domain.m740_sec

m740_sed = _ida_domain.m740_sed

m740_sei = _ida_domain.m740_sei

m740_set = _ida_domain.m740_set

m740_sta = _ida_domain.m740_sta

m740_stp = _ida_domain.m740_stp

m740_stx = _ida_domain.m740_stx

m740_sty = _ida_domain.m740_sty

m740_tax = _ida_domain.m740_tax

m740_tay = _ida_domain.m740_tay

m740_tst = _ida_domain.m740_tst

m740_tsx = _ida_domain.m740_tsx

m740_txa = _ida_domain.m740_txa

m740_txs = _ida_domain.m740_txs

m740_tya = _ida_domain.m740_tya

m740_wit = _ida_domain.m740_wit

m740_last = _ida_domain.m740_last

m7700_null = _ida_domain.m7700_null

m7700_adc = _ida_domain.m7700_adc

m7700_and = _ida_domain.m7700_and

m7700_asl = _ida_domain.m7700_asl

m7700_bbc = _ida_domain.m7700_bbc

m7700_bbs = _ida_domain.m7700_bbs

m7700_bcc = _ida_domain.m7700_bcc

m7700_bcs = _ida_domain.m7700_bcs

m7700_beq = _ida_domain.m7700_beq

m7700_bmi = _ida_domain.m7700_bmi

m7700_bne = _ida_domain.m7700_bne

m7700_bpl = _ida_domain.m7700_bpl

m7700_bra = _ida_domain.m7700_bra

m7700_brk = _ida_domain.m7700_brk

m7700_bvc = _ida_domain.m7700_bvc

m7700_bvs = _ida_domain.m7700_bvs

m7700_clb = _ida_domain.m7700_clb

m7700_clc = _ida_domain.m7700_clc

m7700_cli = _ida_domain.m7700_cli

m7700_clm = _ida_domain.m7700_clm

m7700_clp = _ida_domain.m7700_clp

m7700_clv = _ida_domain.m7700_clv

m7700_cmp = _ida_domain.m7700_cmp

m7700_cpx = _ida_domain.m7700_cpx

m7700_cpy = _ida_domain.m7700_cpy

m7700_dec = _ida_domain.m7700_dec

m7700_dex = _ida_domain.m7700_dex

m7700_dey = _ida_domain.m7700_dey

m7700_div = _ida_domain.m7700_div

m7700_eor = _ida_domain.m7700_eor

m7700_inc = _ida_domain.m7700_inc

m7700_inx = _ida_domain.m7700_inx

m7700_iny = _ida_domain.m7700_iny

m7700_jmp = _ida_domain.m7700_jmp

m7700_jsr = _ida_domain.m7700_jsr

m7700_lda = _ida_domain.m7700_lda

m7700_ldm = _ida_domain.m7700_ldm

m7700_ldt = _ida_domain.m7700_ldt

m7700_ldx = _ida_domain.m7700_ldx

m7700_ldy = _ida_domain.m7700_ldy

m7700_lsr = _ida_domain.m7700_lsr

m7700_mpy = _ida_domain.m7700_mpy

m7700_mvn = _ida_domain.m7700_mvn

m7700_mvp = _ida_domain.m7700_mvp

m7700_nop = _ida_domain.m7700_nop

m7700_ora = _ida_domain.m7700_ora

m7700_pea = _ida_domain.m7700_pea

m7700_pei = _ida_domain.m7700_pei

m7700_per = _ida_domain.m7700_per

m7700_pha = _ida_domain.m7700_pha

m7700_phb = _ida_domain.m7700_phb

m7700_phd = _ida_domain.m7700_phd

m7700_phg = _ida_domain.m7700_phg

m7700_php = _ida_domain.m7700_php

m7700_pht = _ida_domain.m7700_pht

m7700_phx = _ida_domain.m7700_phx

m7700_phy = _ida_domain.m7700_phy

m7700_pla = _ida_domain.m7700_pla

m7700_plb = _ida_domain.m7700_plb

m7700_pld = _ida_domain.m7700_pld

m7700_plp = _ida_domain.m7700_plp

m7700_plt = _ida_domain.m7700_plt

m7700_plx = _ida_domain.m7700_plx

m7700_ply = _ida_domain.m7700_ply

m7700_psh = _ida_domain.m7700_psh

m7700_pul = _ida_domain.m7700_pul

m7700_rla = _ida_domain.m7700_rla

m7700_rol = _ida_domain.m7700_rol

m7700_ror = _ida_domain.m7700_ror

m7700_rti = _ida_domain.m7700_rti

m7700_rtl = _ida_domain.m7700_rtl

m7700_rts = _ida_domain.m7700_rts

m7700_sbc = _ida_domain.m7700_sbc

m7700_seb = _ida_domain.m7700_seb

m7700_sec = _ida_domain.m7700_sec

m7700_sei = _ida_domain.m7700_sei

m7700_sem = _ida_domain.m7700_sem

m7700_sep = _ida_domain.m7700_sep

m7700_sta = _ida_domain.m7700_sta

m7700_stp = _ida_domain.m7700_stp

m7700_stx = _ida_domain.m7700_stx

m7700_sty = _ida_domain.m7700_sty

m7700_tad = _ida_domain.m7700_tad

m7700_tas = _ida_domain.m7700_tas

m7700_tax = _ida_domain.m7700_tax

m7700_tay = _ida_domain.m7700_tay

m7700_tbd = _ida_domain.m7700_tbd

m7700_tbs = _ida_domain.m7700_tbs

m7700_tbx = _ida_domain.m7700_tbx

m7700_tby = _ida_domain.m7700_tby

m7700_tda = _ida_domain.m7700_tda

m7700_tdb = _ida_domain.m7700_tdb

m7700_tsa = _ida_domain.m7700_tsa

m7700_tsb = _ida_domain.m7700_tsb

m7700_tsx = _ida_domain.m7700_tsx

m7700_txa = _ida_domain.m7700_txa

m7700_txb = _ida_domain.m7700_txb

m7700_txs = _ida_domain.m7700_txs

m7700_txy = _ida_domain.m7700_txy

m7700_tya = _ida_domain.m7700_tya

m7700_tyb = _ida_domain.m7700_tyb

m7700_tyx = _ida_domain.m7700_tyx

m7700_wit = _ida_domain.m7700_wit

m7700_xab = _ida_domain.m7700_xab

m7750_asr = _ida_domain.m7750_asr

m7750_divs = _ida_domain.m7750_divs

m7750_exts = _ida_domain.m7750_exts

m7750_extz = _ida_domain.m7750_extz

m7750_mpys = _ida_domain.m7750_mpys

m7700_last = _ida_domain.m7700_last

m7900_null = _ida_domain.m7900_null

m7900_abs = _ida_domain.m7900_abs

m7900_absd = _ida_domain.m7900_absd

m7900_adc = _ida_domain.m7900_adc

m7900_adcb = _ida_domain.m7900_adcb

m7900_adcd = _ida_domain.m7900_adcd

m7900_add = _ida_domain.m7900_add

m7900_addb = _ida_domain.m7900_addb

m7900_addd = _ida_domain.m7900_addd

m7900_addm = _ida_domain.m7900_addm

m7900_addmb = _ida_domain.m7900_addmb

m7900_addmd = _ida_domain.m7900_addmd

m7900_adds = _ida_domain.m7900_adds

m7900_addx = _ida_domain.m7900_addx

m7900_addy = _ida_domain.m7900_addy

m7900_and = _ida_domain.m7900_and

m7900_andb = _ida_domain.m7900_andb

m7900_andm = _ida_domain.m7900_andm

m7900_andmb = _ida_domain.m7900_andmb

m7900_andmd = _ida_domain.m7900_andmd

m7900_asl = _ida_domain.m7900_asl

m7900_asln = _ida_domain.m7900_asln

m7900_asldn = _ida_domain.m7900_asldn

m7900_asr = _ida_domain.m7900_asr

m7900_asrn = _ida_domain.m7900_asrn

m7900_asrdn = _ida_domain.m7900_asrdn

m7900_bbc = _ida_domain.m7900_bbc

m7900_bbcb = _ida_domain.m7900_bbcb

m7900_bbs = _ida_domain.m7900_bbs

m7900_bbsb = _ida_domain.m7900_bbsb

m7900_bcc = _ida_domain.m7900_bcc

m7900_bcs = _ida_domain.m7900_bcs

m7900_beq = _ida_domain.m7900_beq

m7900_bge = _ida_domain.m7900_bge

m7900_bgt = _ida_domain.m7900_bgt

m7900_bgtu = _ida_domain.m7900_bgtu

m7900_ble = _ida_domain.m7900_ble

m7900_bleu = _ida_domain.m7900_bleu

m7900_blt = _ida_domain.m7900_blt

m7900_bmi = _ida_domain.m7900_bmi

m7900_bne = _ida_domain.m7900_bne

m7900_bpl = _ida_domain.m7900_bpl

m7900_bra = _ida_domain.m7900_bra

m7900_bral = _ida_domain.m7900_bral

m7900_brk = _ida_domain.m7900_brk

m7900_bsc = _ida_domain.m7900_bsc

m7900_bsr = _ida_domain.m7900_bsr

m7900_bss = _ida_domain.m7900_bss

m7900_bvc = _ida_domain.m7900_bvc

m7900_bvs = _ida_domain.m7900_bvs

m7900_cbeq = _ida_domain.m7900_cbeq

m7900_cbeqb = _ida_domain.m7900_cbeqb

m7900_cbne = _ida_domain.m7900_cbne

m7900_cbneb = _ida_domain.m7900_cbneb

m7900_clc = _ida_domain.m7900_clc

m7900_cli = _ida_domain.m7900_cli

m7900_clm = _ida_domain.m7900_clm

m7900_clp = _ida_domain.m7900_clp

m7900_clr = _ida_domain.m7900_clr

m7900_clrb = _ida_domain.m7900_clrb

m7900_clrm = _ida_domain.m7900_clrm

m7900_clrmb = _ida_domain.m7900_clrmb

m7900_clrx = _ida_domain.m7900_clrx

m7900_clry = _ida_domain.m7900_clry

m7900_clv = _ida_domain.m7900_clv

m7900_cmp = _ida_domain.m7900_cmp

m7900_cmpb = _ida_domain.m7900_cmpb

m7900_cmpd = _ida_domain.m7900_cmpd

m7900_cmpm = _ida_domain.m7900_cmpm

m7900_cmpmb = _ida_domain.m7900_cmpmb

m7900_cmpmd = _ida_domain.m7900_cmpmd

m7900_cpx = _ida_domain.m7900_cpx

m7900_cpy = _ida_domain.m7900_cpy

m7900_debne = _ida_domain.m7900_debne

m7900_dec = _ida_domain.m7900_dec

m7900_dex = _ida_domain.m7900_dex

m7900_dey = _ida_domain.m7900_dey

m7900_div = _ida_domain.m7900_div

m7900_divs = _ida_domain.m7900_divs

m7900_dxbne = _ida_domain.m7900_dxbne

m7900_dybne = _ida_domain.m7900_dybne

m7900_eor = _ida_domain.m7900_eor

m7900_eorb = _ida_domain.m7900_eorb

m7900_eorm = _ida_domain.m7900_eorm

m7900_eormb = _ida_domain.m7900_eormb

m7900_eormd = _ida_domain.m7900_eormd

m7900_exts = _ida_domain.m7900_exts

m7900_extsd = _ida_domain.m7900_extsd

m7900_extz = _ida_domain.m7900_extz

m7900_extzd = _ida_domain.m7900_extzd

m7900_inc = _ida_domain.m7900_inc

m7900_inx = _ida_domain.m7900_inx

m7900_iny = _ida_domain.m7900_iny

m7900_jmp = _ida_domain.m7900_jmp

m7900_jmpl = _ida_domain.m7900_jmpl

m7900_jsr = _ida_domain.m7900_jsr

m7900_jsrl = _ida_domain.m7900_jsrl

m7900_lda = _ida_domain.m7900_lda

m7900_ldab = _ida_domain.m7900_ldab

m7900_ldad = _ida_domain.m7900_ldad

m7900_lddn = _ida_domain.m7900_lddn

m7900_ldt = _ida_domain.m7900_ldt

m7900_ldx = _ida_domain.m7900_ldx

m7900_ldxb = _ida_domain.m7900_ldxb

m7900_ldy = _ida_domain.m7900_ldy

m7900_ldyb = _ida_domain.m7900_ldyb

m7900_lsr = _ida_domain.m7900_lsr

m7900_lsrn = _ida_domain.m7900_lsrn

m7900_lsrdn = _ida_domain.m7900_lsrdn

m7900_movm = _ida_domain.m7900_movm

m7900_movmb = _ida_domain.m7900_movmb

m7900_movr = _ida_domain.m7900_movr

m7900_movrb = _ida_domain.m7900_movrb

m7900_mpy = _ida_domain.m7900_mpy

m7900_mpys = _ida_domain.m7900_mpys

m7900_mvn = _ida_domain.m7900_mvn

m7900_mvp = _ida_domain.m7900_mvp

m7900_neg = _ida_domain.m7900_neg

m7900_negd = _ida_domain.m7900_negd

m7900_nop = _ida_domain.m7900_nop

m7900_ora = _ida_domain.m7900_ora

m7900_orab = _ida_domain.m7900_orab

m7900_oram = _ida_domain.m7900_oram

m7900_oramb = _ida_domain.m7900_oramb

m7900_oramd = _ida_domain.m7900_oramd

m7900_pea = _ida_domain.m7900_pea

m7900_pei = _ida_domain.m7900_pei

m7900_per = _ida_domain.m7900_per

m7900_pha = _ida_domain.m7900_pha

m7900_phb = _ida_domain.m7900_phb

m7900_phd = _ida_domain.m7900_phd

m7900_phdn = _ida_domain.m7900_phdn

m7900_phg = _ida_domain.m7900_phg

m7900_phldn = _ida_domain.m7900_phldn

m7900_php = _ida_domain.m7900_php

m7900_pht = _ida_domain.m7900_pht

m7900_phx = _ida_domain.m7900_phx

m7900_phy = _ida_domain.m7900_phy

m7900_pla = _ida_domain.m7900_pla

m7900_plb = _ida_domain.m7900_plb

m7900_pld = _ida_domain.m7900_pld

m7900_pldn = _ida_domain.m7900_pldn

m7900_plp = _ida_domain.m7900_plp

m7900_plt = _ida_domain.m7900_plt

m7900_plx = _ida_domain.m7900_plx

m7900_ply = _ida_domain.m7900_ply

m7900_psh = _ida_domain.m7900_psh

m7900_pul = _ida_domain.m7900_pul

m7900_rla = _ida_domain.m7900_rla

m7900_rmpa = _ida_domain.m7900_rmpa

m7900_rol = _ida_domain.m7900_rol

m7900_roln = _ida_domain.m7900_roln

m7900_roldn = _ida_domain.m7900_roldn

m7900_ror = _ida_domain.m7900_ror

m7900_rorn = _ida_domain.m7900_rorn

m7900_rordn = _ida_domain.m7900_rordn

m7900_rti = _ida_domain.m7900_rti

m7900_rtl = _ida_domain.m7900_rtl

m7900_rtld = _ida_domain.m7900_rtld

m7900_rts = _ida_domain.m7900_rts

m7900_rtsdn = _ida_domain.m7900_rtsdn

m7900_sbc = _ida_domain.m7900_sbc

m7900_sbcb = _ida_domain.m7900_sbcb

m7900_sbcd = _ida_domain.m7900_sbcd

m7900_sec = _ida_domain.m7900_sec

m7900_sei = _ida_domain.m7900_sei

m7900_sem = _ida_domain.m7900_sem

m7900_sep = _ida_domain.m7900_sep

m7900_sta = _ida_domain.m7900_sta

m7900_stab = _ida_domain.m7900_stab

m7900_stad = _ida_domain.m7900_stad

m7900_stp = _ida_domain.m7900_stp

m7900_stx = _ida_domain.m7900_stx

m7900_sty = _ida_domain.m7900_sty

m7900_sub = _ida_domain.m7900_sub

m7900_subb = _ida_domain.m7900_subb

m7900_subd = _ida_domain.m7900_subd

m7900_subm = _ida_domain.m7900_subm

m7900_submb = _ida_domain.m7900_submb

m7900_submd = _ida_domain.m7900_submd

m7900_subs = _ida_domain.m7900_subs

m7900_subx = _ida_domain.m7900_subx

m7900_suby = _ida_domain.m7900_suby

m7900_tadn = _ida_domain.m7900_tadn

m7900_tas = _ida_domain.m7900_tas

m7900_tax = _ida_domain.m7900_tax

m7900_tay = _ida_domain.m7900_tay

m7900_tbdn = _ida_domain.m7900_tbdn

m7900_tbs = _ida_domain.m7900_tbs

m7900_tbx = _ida_domain.m7900_tbx

m7900_tby = _ida_domain.m7900_tby

m7900_tdan = _ida_domain.m7900_tdan

m7900_tdbn = _ida_domain.m7900_tdbn

m7900_tds = _ida_domain.m7900_tds

m7900_tsa = _ida_domain.m7900_tsa

m7900_tsb = _ida_domain.m7900_tsb

m7900_tsd = _ida_domain.m7900_tsd

m7900_tsx = _ida_domain.m7900_tsx

m7900_txa = _ida_domain.m7900_txa

m7900_txb = _ida_domain.m7900_txb

m7900_txs = _ida_domain.m7900_txs

m7900_txy = _ida_domain.m7900_txy

m7900_tya = _ida_domain.m7900_tya

m7900_tyb = _ida_domain.m7900_tyb

m7900_tyx = _ida_domain.m7900_tyx

m7900_wit = _ida_domain.m7900_wit

m7900_xab = _ida_domain.m7900_xab

m7900_last = _ida_domain.m7900_last

st9_null = _ida_domain.st9_null

st9_ld = _ida_domain.st9_ld

st9_ldw = _ida_domain.st9_ldw

st9_ldpp = _ida_domain.st9_ldpp

st9_ldpd = _ida_domain.st9_ldpd

st9_lddp = _ida_domain.st9_lddp

st9_lddd = _ida_domain.st9_lddd

st9_add = _ida_domain.st9_add

st9_addw = _ida_domain.st9_addw

st9_adc = _ida_domain.st9_adc

st9_adcw = _ida_domain.st9_adcw

st9_sub = _ida_domain.st9_sub

st9_subw = _ida_domain.st9_subw

st9_sbc = _ida_domain.st9_sbc

st9_sbcw = _ida_domain.st9_sbcw

st9_and = _ida_domain.st9_and

st9_andw = _ida_domain.st9_andw

st9_or = _ida_domain.st9_or

st9_orw = _ida_domain.st9_orw

st9_xor = _ida_domain.st9_xor

st9_xorw = _ida_domain.st9_xorw

st9_cp = _ida_domain.st9_cp

st9_cpw = _ida_domain.st9_cpw

st9_tm = _ida_domain.st9_tm

st9_tmw = _ida_domain.st9_tmw

st9_tcm = _ida_domain.st9_tcm

st9_tcmw = _ida_domain.st9_tcmw

st9_inc = _ida_domain.st9_inc

st9_incw = _ida_domain.st9_incw

st9_dec = _ida_domain.st9_dec

st9_decw = _ida_domain.st9_decw

st9_sla = _ida_domain.st9_sla

st9_slaw = _ida_domain.st9_slaw

st9_sra = _ida_domain.st9_sra

st9_sraw = _ida_domain.st9_sraw

st9_rrc = _ida_domain.st9_rrc

st9_rrcw = _ida_domain.st9_rrcw

st9_rlc = _ida_domain.st9_rlc

st9_rlcw = _ida_domain.st9_rlcw

st9_ror = _ida_domain.st9_ror

st9_rol = _ida_domain.st9_rol

st9_clr = _ida_domain.st9_clr

st9_cpl = _ida_domain.st9_cpl

st9_swap = _ida_domain.st9_swap

st9_da = _ida_domain.st9_da

st9_push = _ida_domain.st9_push

st9_pushw = _ida_domain.st9_pushw

st9_pea = _ida_domain.st9_pea

st9_pop = _ida_domain.st9_pop

st9_popw = _ida_domain.st9_popw

st9_pushu = _ida_domain.st9_pushu

st9_pushuw = _ida_domain.st9_pushuw

st9_peau = _ida_domain.st9_peau

st9_popu = _ida_domain.st9_popu

st9_popuw = _ida_domain.st9_popuw

st9_link = _ida_domain.st9_link

st9_unlink = _ida_domain.st9_unlink

st9_linku = _ida_domain.st9_linku

st9_unlinku = _ida_domain.st9_unlinku

st9_mul = _ida_domain.st9_mul

st9_div = _ida_domain.st9_div

st9_divws = _ida_domain.st9_divws

st9_bset = _ida_domain.st9_bset

st9_bres = _ida_domain.st9_bres

st9_bcpl = _ida_domain.st9_bcpl

st9_btset = _ida_domain.st9_btset

st9_bld = _ida_domain.st9_bld

st9_band = _ida_domain.st9_band

st9_bor = _ida_domain.st9_bor

st9_bxor = _ida_domain.st9_bxor

st9_ret = _ida_domain.st9_ret

st9_rets = _ida_domain.st9_rets

st9_iret = _ida_domain.st9_iret

st9_jrcc = _ida_domain.st9_jrcc

st9_jpcc = _ida_domain.st9_jpcc

st9_jp = _ida_domain.st9_jp

st9_jps = _ida_domain.st9_jps

st9_call = _ida_domain.st9_call

st9_calls = _ida_domain.st9_calls

st9_btjf = _ida_domain.st9_btjf

st9_btjt = _ida_domain.st9_btjt

st9_djnz = _ida_domain.st9_djnz

st9_dwjnz = _ida_domain.st9_dwjnz

st9_cpjfi = _ida_domain.st9_cpjfi

st9_cpjti = _ida_domain.st9_cpjti

st9_xch = _ida_domain.st9_xch

st9_srp = _ida_domain.st9_srp

st9_srp0 = _ida_domain.st9_srp0

st9_srp1 = _ida_domain.st9_srp1

st9_spp = _ida_domain.st9_spp

st9_ext = _ida_domain.st9_ext

st9_ei = _ida_domain.st9_ei

st9_di = _ida_domain.st9_di

st9_scf = _ida_domain.st9_scf

st9_rcf = _ida_domain.st9_rcf

st9_ccf = _ida_domain.st9_ccf

st9_spm = _ida_domain.st9_spm

st9_sdm = _ida_domain.st9_sdm

st9_nop = _ida_domain.st9_nop

st9_wfi = _ida_domain.st9_wfi

st9_halt = _ida_domain.st9_halt

st9_etrap = _ida_domain.st9_etrap

st9_eret = _ida_domain.st9_eret

st9_ald = _ida_domain.st9_ald

st9_aldw = _ida_domain.st9_aldw

st9_last = _ida_domain.st9_last

fr_null = _ida_domain.fr_null

fr_add = _ida_domain.fr_add

fr_add2 = _ida_domain.fr_add2

fr_addc = _ida_domain.fr_addc

fr_addn = _ida_domain.fr_addn

fr_addn2 = _ida_domain.fr_addn2

fr_sub = _ida_domain.fr_sub

fr_subc = _ida_domain.fr_subc

fr_subn = _ida_domain.fr_subn

fr_cmp = _ida_domain.fr_cmp

fr_cmp2 = _ida_domain.fr_cmp2

fr_and = _ida_domain.fr_and

fr_andh = _ida_domain.fr_andh

fr_andb = _ida_domain.fr_andb

fr_or = _ida_domain.fr_or

fr_orh = _ida_domain.fr_orh

fr_orb = _ida_domain.fr_orb

fr_eor = _ida_domain.fr_eor

fr_eorh = _ida_domain.fr_eorh

fr_eorb = _ida_domain.fr_eorb

fr_bandl = _ida_domain.fr_bandl

fr_bandh = _ida_domain.fr_bandh

fr_borl = _ida_domain.fr_borl

fr_borh = _ida_domain.fr_borh

fr_beorl = _ida_domain.fr_beorl

fr_beorh = _ida_domain.fr_beorh

fr_btstl = _ida_domain.fr_btstl

fr_btsth = _ida_domain.fr_btsth

fr_mul = _ida_domain.fr_mul

fr_mulu = _ida_domain.fr_mulu

fr_mulh = _ida_domain.fr_mulh

fr_muluh = _ida_domain.fr_muluh

fr_div0s = _ida_domain.fr_div0s

fr_div0u = _ida_domain.fr_div0u

fr_div1 = _ida_domain.fr_div1

fr_div2 = _ida_domain.fr_div2

fr_div3 = _ida_domain.fr_div3

fr_div4s = _ida_domain.fr_div4s

fr_lsl = _ida_domain.fr_lsl

fr_lsl2 = _ida_domain.fr_lsl2

fr_lsr = _ida_domain.fr_lsr

fr_lsr2 = _ida_domain.fr_lsr2

fr_asr = _ida_domain.fr_asr

fr_asr2 = _ida_domain.fr_asr2

fr_ldi_32 = _ida_domain.fr_ldi_32

fr_ldi_20 = _ida_domain.fr_ldi_20

fr_ldi_8 = _ida_domain.fr_ldi_8

fr_ld = _ida_domain.fr_ld

fr_lduh = _ida_domain.fr_lduh

fr_ldub = _ida_domain.fr_ldub

fr_st = _ida_domain.fr_st

fr_sth = _ida_domain.fr_sth

fr_stb = _ida_domain.fr_stb

fr_mov = _ida_domain.fr_mov

fr_jmp = _ida_domain.fr_jmp

fr_call = _ida_domain.fr_call

fr_ret = _ida_domain.fr_ret

fr_int = _ida_domain.fr_int

fr_inte = _ida_domain.fr_inte

fr_reti = _ida_domain.fr_reti

fr_bra = _ida_domain.fr_bra

fr_bno = _ida_domain.fr_bno

fr_beq = _ida_domain.fr_beq

fr_bne = _ida_domain.fr_bne

fr_bc = _ida_domain.fr_bc

fr_bnc = _ida_domain.fr_bnc

fr_bn = _ida_domain.fr_bn

fr_bp = _ida_domain.fr_bp

fr_bv = _ida_domain.fr_bv

fr_bnv = _ida_domain.fr_bnv

fr_blt = _ida_domain.fr_blt

fr_bge = _ida_domain.fr_bge

fr_ble = _ida_domain.fr_ble

fr_bgt = _ida_domain.fr_bgt

fr_bls = _ida_domain.fr_bls

fr_bhi = _ida_domain.fr_bhi

fr_dmov = _ida_domain.fr_dmov

fr_dmovh = _ida_domain.fr_dmovh

fr_dmovb = _ida_domain.fr_dmovb

fr_ldres = _ida_domain.fr_ldres

fr_stres = _ida_domain.fr_stres

fr_copop = _ida_domain.fr_copop

fr_copld = _ida_domain.fr_copld

fr_copst = _ida_domain.fr_copst

fr_copsv = _ida_domain.fr_copsv

fr_nop = _ida_domain.fr_nop

fr_andccr = _ida_domain.fr_andccr

fr_orccr = _ida_domain.fr_orccr

fr_stilm = _ida_domain.fr_stilm

fr_addsp = _ida_domain.fr_addsp

fr_extsb = _ida_domain.fr_extsb

fr_extub = _ida_domain.fr_extub

fr_extsh = _ida_domain.fr_extsh

fr_extuh = _ida_domain.fr_extuh

fr_ldm0 = _ida_domain.fr_ldm0

fr_ldm1 = _ida_domain.fr_ldm1

fr_stm0 = _ida_domain.fr_stm0

fr_stm1 = _ida_domain.fr_stm1

fr_enter = _ida_domain.fr_enter

fr_leave = _ida_domain.fr_leave

fr_xchb = _ida_domain.fr_xchb

fr_last = _ida_domain.fr_last

ALPHA_null = _ida_domain.ALPHA_null

ALPHA_addf = _ida_domain.ALPHA_addf

ALPHA_addg = _ida_domain.ALPHA_addg

ALPHA_addl = _ida_domain.ALPHA_addl

ALPHA_addl_v = _ida_domain.ALPHA_addl_v

ALPHA_addq = _ida_domain.ALPHA_addq

ALPHA_addq_v = _ida_domain.ALPHA_addq_v

ALPHA_adds = _ida_domain.ALPHA_adds

ALPHA_addt = _ida_domain.ALPHA_addt

ALPHA_amask = _ida_domain.ALPHA_amask

ALPHA_and = _ida_domain.ALPHA_and

ALPHA_beq = _ida_domain.ALPHA_beq

ALPHA_bge = _ida_domain.ALPHA_bge

ALPHA_bgt = _ida_domain.ALPHA_bgt

ALPHA_bic = _ida_domain.ALPHA_bic

ALPHA_bis = _ida_domain.ALPHA_bis

ALPHA_blbc = _ida_domain.ALPHA_blbc

ALPHA_blbs = _ida_domain.ALPHA_blbs

ALPHA_ble = _ida_domain.ALPHA_ble

ALPHA_blt = _ida_domain.ALPHA_blt

ALPHA_bne = _ida_domain.ALPHA_bne

ALPHA_br = _ida_domain.ALPHA_br

ALPHA_bsr = _ida_domain.ALPHA_bsr

ALPHA_call_pal = _ida_domain.ALPHA_call_pal

ALPHA_cmoveq = _ida_domain.ALPHA_cmoveq

ALPHA_cmovge = _ida_domain.ALPHA_cmovge

ALPHA_cmovgt = _ida_domain.ALPHA_cmovgt

ALPHA_cmovlbc = _ida_domain.ALPHA_cmovlbc

ALPHA_cmovlbs = _ida_domain.ALPHA_cmovlbs

ALPHA_cmovle = _ida_domain.ALPHA_cmovle

ALPHA_cmovlt = _ida_domain.ALPHA_cmovlt

ALPHA_cmovne = _ida_domain.ALPHA_cmovne

ALPHA_cmpbge = _ida_domain.ALPHA_cmpbge

ALPHA_cmpeq = _ida_domain.ALPHA_cmpeq

ALPHA_cmpgeq = _ida_domain.ALPHA_cmpgeq

ALPHA_cmpgle = _ida_domain.ALPHA_cmpgle

ALPHA_cmpglt = _ida_domain.ALPHA_cmpglt

ALPHA_cmple = _ida_domain.ALPHA_cmple

ALPHA_cmplt = _ida_domain.ALPHA_cmplt

ALPHA_cmpteq = _ida_domain.ALPHA_cmpteq

ALPHA_cmptle = _ida_domain.ALPHA_cmptle

ALPHA_cmptlt = _ida_domain.ALPHA_cmptlt

ALPHA_cmptun = _ida_domain.ALPHA_cmptun

ALPHA_cmpule = _ida_domain.ALPHA_cmpule

ALPHA_cmpult = _ida_domain.ALPHA_cmpult

ALPHA_cpys = _ida_domain.ALPHA_cpys

ALPHA_cpyse = _ida_domain.ALPHA_cpyse

ALPHA_cpysn = _ida_domain.ALPHA_cpysn

ALPHA_ctlz = _ida_domain.ALPHA_ctlz

ALPHA_ctpop = _ida_domain.ALPHA_ctpop

ALPHA_cttz = _ida_domain.ALPHA_cttz

ALPHA_cvtdg = _ida_domain.ALPHA_cvtdg

ALPHA_cvtgd = _ida_domain.ALPHA_cvtgd

ALPHA_cvtgf = _ida_domain.ALPHA_cvtgf

ALPHA_cvtgq = _ida_domain.ALPHA_cvtgq

ALPHA_cvtlq = _ida_domain.ALPHA_cvtlq

ALPHA_cvtqf = _ida_domain.ALPHA_cvtqf

ALPHA_cvtqg = _ida_domain.ALPHA_cvtqg

ALPHA_cvtql = _ida_domain.ALPHA_cvtql

ALPHA_cvtqs = _ida_domain.ALPHA_cvtqs

ALPHA_cvtqt = _ida_domain.ALPHA_cvtqt

ALPHA_cvtst = _ida_domain.ALPHA_cvtst

ALPHA_cvttq = _ida_domain.ALPHA_cvttq

ALPHA_cvtts = _ida_domain.ALPHA_cvtts

ALPHA_divf = _ida_domain.ALPHA_divf

ALPHA_divg = _ida_domain.ALPHA_divg

ALPHA_divs = _ida_domain.ALPHA_divs

ALPHA_divt = _ida_domain.ALPHA_divt

ALPHA_ecb = _ida_domain.ALPHA_ecb

ALPHA_eqv = _ida_domain.ALPHA_eqv

ALPHA_excb = _ida_domain.ALPHA_excb

ALPHA_extbl = _ida_domain.ALPHA_extbl

ALPHA_extlh = _ida_domain.ALPHA_extlh

ALPHA_extll = _ida_domain.ALPHA_extll

ALPHA_extqh = _ida_domain.ALPHA_extqh

ALPHA_extql = _ida_domain.ALPHA_extql

ALPHA_extwh = _ida_domain.ALPHA_extwh

ALPHA_extwl = _ida_domain.ALPHA_extwl

ALPHA_fbeq = _ida_domain.ALPHA_fbeq

ALPHA_fbge = _ida_domain.ALPHA_fbge

ALPHA_fbgt = _ida_domain.ALPHA_fbgt

ALPHA_fble = _ida_domain.ALPHA_fble

ALPHA_fblt = _ida_domain.ALPHA_fblt

ALPHA_fbne = _ida_domain.ALPHA_fbne

ALPHA_fcmoveq = _ida_domain.ALPHA_fcmoveq

ALPHA_fcmovge = _ida_domain.ALPHA_fcmovge

ALPHA_fcmovgt = _ida_domain.ALPHA_fcmovgt

ALPHA_fcmovle = _ida_domain.ALPHA_fcmovle

ALPHA_fcmovlt = _ida_domain.ALPHA_fcmovlt

ALPHA_fcmovne = _ida_domain.ALPHA_fcmovne

ALPHA_fetch = _ida_domain.ALPHA_fetch

ALPHA_fetch_m = _ida_domain.ALPHA_fetch_m

ALPHA_ftois = _ida_domain.ALPHA_ftois

ALPHA_ftoit = _ida_domain.ALPHA_ftoit

ALPHA_implver = _ida_domain.ALPHA_implver

ALPHA_insbl = _ida_domain.ALPHA_insbl

ALPHA_inslh = _ida_domain.ALPHA_inslh

ALPHA_insll = _ida_domain.ALPHA_insll

ALPHA_insqh = _ida_domain.ALPHA_insqh

ALPHA_insql = _ida_domain.ALPHA_insql

ALPHA_inswh = _ida_domain.ALPHA_inswh

ALPHA_inswl = _ida_domain.ALPHA_inswl

ALPHA_itoff = _ida_domain.ALPHA_itoff

ALPHA_itofs = _ida_domain.ALPHA_itofs

ALPHA_itoft = _ida_domain.ALPHA_itoft

ALPHA_jmp = _ida_domain.ALPHA_jmp

ALPHA_jsr = _ida_domain.ALPHA_jsr

ALPHA_jsr_coroutine = _ida_domain.ALPHA_jsr_coroutine

ALPHA_lda = _ida_domain.ALPHA_lda

ALPHA_ldah = _ida_domain.ALPHA_ldah

ALPHA_ldbu = _ida_domain.ALPHA_ldbu

ALPHA_ldwu = _ida_domain.ALPHA_ldwu

ALPHA_ldf = _ida_domain.ALPHA_ldf

ALPHA_ldg = _ida_domain.ALPHA_ldg

ALPHA_ldl = _ida_domain.ALPHA_ldl

ALPHA_ldl_l = _ida_domain.ALPHA_ldl_l

ALPHA_ldq = _ida_domain.ALPHA_ldq

ALPHA_ldq_l = _ida_domain.ALPHA_ldq_l

ALPHA_ldq_u = _ida_domain.ALPHA_ldq_u

ALPHA_lds = _ida_domain.ALPHA_lds

ALPHA_ldt = _ida_domain.ALPHA_ldt

ALPHA_maxsb8 = _ida_domain.ALPHA_maxsb8

ALPHA_maxsw4 = _ida_domain.ALPHA_maxsw4

ALPHA_maxub8 = _ida_domain.ALPHA_maxub8

ALPHA_maxuw4 = _ida_domain.ALPHA_maxuw4

ALPHA_mb = _ida_domain.ALPHA_mb

ALPHA_mf_fpcr = _ida_domain.ALPHA_mf_fpcr

ALPHA_minsb8 = _ida_domain.ALPHA_minsb8

ALPHA_minsw4 = _ida_domain.ALPHA_minsw4

ALPHA_minub8 = _ida_domain.ALPHA_minub8

ALPHA_minuw4 = _ida_domain.ALPHA_minuw4

ALPHA_mskbl = _ida_domain.ALPHA_mskbl

ALPHA_msklh = _ida_domain.ALPHA_msklh

ALPHA_mskll = _ida_domain.ALPHA_mskll

ALPHA_mskqh = _ida_domain.ALPHA_mskqh

ALPHA_mskql = _ida_domain.ALPHA_mskql

ALPHA_mskwh = _ida_domain.ALPHA_mskwh

ALPHA_mskwl = _ida_domain.ALPHA_mskwl

ALPHA_mt_fpcr = _ida_domain.ALPHA_mt_fpcr

ALPHA_mulf = _ida_domain.ALPHA_mulf

ALPHA_mulg = _ida_domain.ALPHA_mulg

ALPHA_mull = _ida_domain.ALPHA_mull

ALPHA_mull_v = _ida_domain.ALPHA_mull_v

ALPHA_mulq = _ida_domain.ALPHA_mulq

ALPHA_mulq_v = _ida_domain.ALPHA_mulq_v

ALPHA_muls = _ida_domain.ALPHA_muls

ALPHA_mult = _ida_domain.ALPHA_mult

ALPHA_ornot = _ida_domain.ALPHA_ornot

ALPHA_perr = _ida_domain.ALPHA_perr

ALPHA_pklb = _ida_domain.ALPHA_pklb

ALPHA_pkwb = _ida_domain.ALPHA_pkwb

ALPHA_rc = _ida_domain.ALPHA_rc

ALPHA_ret = _ida_domain.ALPHA_ret

ALPHA_rpcc = _ida_domain.ALPHA_rpcc

ALPHA_rs = _ida_domain.ALPHA_rs

ALPHA_s4addl = _ida_domain.ALPHA_s4addl

ALPHA_s4addq = _ida_domain.ALPHA_s4addq

ALPHA_s4subl = _ida_domain.ALPHA_s4subl

ALPHA_s4subq = _ida_domain.ALPHA_s4subq

ALPHA_s8addl = _ida_domain.ALPHA_s8addl

ALPHA_s8addq = _ida_domain.ALPHA_s8addq

ALPHA_s8subl = _ida_domain.ALPHA_s8subl

ALPHA_s8subq = _ida_domain.ALPHA_s8subq

ALPHA_sextb = _ida_domain.ALPHA_sextb

ALPHA_sextw = _ida_domain.ALPHA_sextw

ALPHA_sll = _ida_domain.ALPHA_sll

ALPHA_sqrtf = _ida_domain.ALPHA_sqrtf

ALPHA_sqrtg = _ida_domain.ALPHA_sqrtg

ALPHA_sqrts = _ida_domain.ALPHA_sqrts

ALPHA_sqrtt = _ida_domain.ALPHA_sqrtt

ALPHA_sra = _ida_domain.ALPHA_sra

ALPHA_srl = _ida_domain.ALPHA_srl

ALPHA_stb = _ida_domain.ALPHA_stb

ALPHA_stf = _ida_domain.ALPHA_stf

ALPHA_stg = _ida_domain.ALPHA_stg

ALPHA_sts = _ida_domain.ALPHA_sts

ALPHA_stl = _ida_domain.ALPHA_stl

ALPHA_stl_c = _ida_domain.ALPHA_stl_c

ALPHA_stq = _ida_domain.ALPHA_stq

ALPHA_stq_c = _ida_domain.ALPHA_stq_c

ALPHA_stq_u = _ida_domain.ALPHA_stq_u

ALPHA_stt = _ida_domain.ALPHA_stt

ALPHA_stw = _ida_domain.ALPHA_stw

ALPHA_subf = _ida_domain.ALPHA_subf

ALPHA_subg = _ida_domain.ALPHA_subg

ALPHA_subl = _ida_domain.ALPHA_subl

ALPHA_subl_v = _ida_domain.ALPHA_subl_v

ALPHA_subq = _ida_domain.ALPHA_subq

ALPHA_subq_v = _ida_domain.ALPHA_subq_v

ALPHA_subs = _ida_domain.ALPHA_subs

ALPHA_subt = _ida_domain.ALPHA_subt

ALPHA_trapb = _ida_domain.ALPHA_trapb

ALPHA_umulh = _ida_domain.ALPHA_umulh

ALPHA_unpkbl = _ida_domain.ALPHA_unpkbl

ALPHA_unpkbw = _ida_domain.ALPHA_unpkbw

ALPHA_wh64 = _ida_domain.ALPHA_wh64

ALPHA_wmb = _ida_domain.ALPHA_wmb

ALPHA_xor = _ida_domain.ALPHA_xor

ALPHA_zap = _ida_domain.ALPHA_zap

ALPHA_zapnot = _ida_domain.ALPHA_zapnot

ALPHA_unop = _ida_domain.ALPHA_unop

ALPHA_nop = _ida_domain.ALPHA_nop

ALPHA_fnop = _ida_domain.ALPHA_fnop

ALPHA_clr = _ida_domain.ALPHA_clr

ALPHA_fabs = _ida_domain.ALPHA_fabs

ALPHA_fclr = _ida_domain.ALPHA_fclr

ALPHA_fmov = _ida_domain.ALPHA_fmov

ALPHA_fneg = _ida_domain.ALPHA_fneg

ALPHA_mov = _ida_domain.ALPHA_mov

ALPHA_negl = _ida_domain.ALPHA_negl

ALPHA_negl_v = _ida_domain.ALPHA_negl_v

ALPHA_negq = _ida_domain.ALPHA_negq

ALPHA_negq_v = _ida_domain.ALPHA_negq_v

ALPHA_negf = _ida_domain.ALPHA_negf

ALPHA_negg = _ida_domain.ALPHA_negg

ALPHA_negs = _ida_domain.ALPHA_negs

ALPHA_negt = _ida_domain.ALPHA_negt

ALPHA_not = _ida_domain.ALPHA_not

ALPHA_sextl = _ida_domain.ALPHA_sextl

ALPHA_or = _ida_domain.ALPHA_or

ALPHA_andnot = _ida_domain.ALPHA_andnot

ALPHA_xornot = _ida_domain.ALPHA_xornot

ALPHA_br0 = _ida_domain.ALPHA_br0

ALPHA_last = _ida_domain.ALPHA_last

KR1878_null = _ida_domain.KR1878_null

KR1878_mov = _ida_domain.KR1878_mov

KR1878_cmp = _ida_domain.KR1878_cmp

KR1878_add = _ida_domain.KR1878_add

KR1878_sub = _ida_domain.KR1878_sub

KR1878_and = _ida_domain.KR1878_and

KR1878_or = _ida_domain.KR1878_or

KR1878_xor = _ida_domain.KR1878_xor

KR1878_movl = _ida_domain.KR1878_movl

KR1878_cmpl = _ida_domain.KR1878_cmpl

KR1878_addl = _ida_domain.KR1878_addl

KR1878_subl = _ida_domain.KR1878_subl

KR1878_bic = _ida_domain.KR1878_bic

KR1878_bis = _ida_domain.KR1878_bis

KR1878_btg = _ida_domain.KR1878_btg

KR1878_btt = _ida_domain.KR1878_btt

KR1878_swap = _ida_domain.KR1878_swap

KR1878_neg = _ida_domain.KR1878_neg

KR1878_not = _ida_domain.KR1878_not

KR1878_shl = _ida_domain.KR1878_shl

KR1878_shr = _ida_domain.KR1878_shr

KR1878_shra = _ida_domain.KR1878_shra

KR1878_rlc = _ida_domain.KR1878_rlc

KR1878_rrc = _ida_domain.KR1878_rrc

KR1878_adc = _ida_domain.KR1878_adc

KR1878_sbc = _ida_domain.KR1878_sbc

KR1878_ldr = _ida_domain.KR1878_ldr

KR1878_mtpr = _ida_domain.KR1878_mtpr

KR1878_mfpr = _ida_domain.KR1878_mfpr

KR1878_push = _ida_domain.KR1878_push

KR1878_pop = _ida_domain.KR1878_pop

KR1878_sst = _ida_domain.KR1878_sst

KR1878_cst = _ida_domain.KR1878_cst

KR1878_tof = _ida_domain.KR1878_tof

KR1878_tdc = _ida_domain.KR1878_tdc

KR1878_jmp = _ida_domain.KR1878_jmp

KR1878_jsr = _ida_domain.KR1878_jsr

KR1878_jnz = _ida_domain.KR1878_jnz

KR1878_jz = _ida_domain.KR1878_jz

KR1878_jns = _ida_domain.KR1878_jns

KR1878_js = _ida_domain.KR1878_js

KR1878_jnc = _ida_domain.KR1878_jnc

KR1878_jc = _ida_domain.KR1878_jc

KR1878_ijmp = _ida_domain.KR1878_ijmp

KR1878_ijsr = _ida_domain.KR1878_ijsr

KR1878_rts = _ida_domain.KR1878_rts

KR1878_rtsc = _ida_domain.KR1878_rtsc

KR1878_rti = _ida_domain.KR1878_rti

KR1878_nop = _ida_domain.KR1878_nop

KR1878_wait = _ida_domain.KR1878_wait

KR1878_stop = _ida_domain.KR1878_stop

KR1878_reset = _ida_domain.KR1878_reset

KR1878_sksp = _ida_domain.KR1878_sksp

KR1878_last = _ida_domain.KR1878_last

AD218X_null = _ida_domain.AD218X_null

AD218X_amf_01 = _ida_domain.AD218X_amf_01

AD218X_amf_03 = _ida_domain.AD218X_amf_03

AD218X_amf_02 = _ida_domain.AD218X_amf_02

AD218X_amf_04 = _ida_domain.AD218X_amf_04

AD218X_amf_05 = _ida_domain.AD218X_amf_05

AD218X_amf_06 = _ida_domain.AD218X_amf_06

AD218X_amf_07 = _ida_domain.AD218X_amf_07

AD218X_amf_08 = _ida_domain.AD218X_amf_08

AD218X_amf_09 = _ida_domain.AD218X_amf_09

AD218X_amf_0a = _ida_domain.AD218X_amf_0a

AD218X_amf_0b = _ida_domain.AD218X_amf_0b

AD218X_amf_0c = _ida_domain.AD218X_amf_0c

AD218X_amf_0d = _ida_domain.AD218X_amf_0d

AD218X_amf_0e = _ida_domain.AD218X_amf_0e

AD218X_amf_0f = _ida_domain.AD218X_amf_0f

AD218X_amf_10 = _ida_domain.AD218X_amf_10

AD218X_amf_11 = _ida_domain.AD218X_amf_11

AD218X_amf_12 = _ida_domain.AD218X_amf_12

AD218X_amf_13 = _ida_domain.AD218X_amf_13

AD218X_amf_14 = _ida_domain.AD218X_amf_14

AD218X_amf_15 = _ida_domain.AD218X_amf_15

AD218X_amf_16 = _ida_domain.AD218X_amf_16

AD218X_amf_17 = _ida_domain.AD218X_amf_17

AD218X_amf_18 = _ida_domain.AD218X_amf_18

AD218X_amf_19 = _ida_domain.AD218X_amf_19

AD218X_amf_1a = _ida_domain.AD218X_amf_1a

AD218X_amf_1b = _ida_domain.AD218X_amf_1b

AD218X_amf_1c = _ida_domain.AD218X_amf_1c

AD218X_amf_1d = _ida_domain.AD218X_amf_1d

AD218X_amf_1e = _ida_domain.AD218X_amf_1e

AD218X_amf_1f = _ida_domain.AD218X_amf_1f

AD218X_shft_0 = _ida_domain.AD218X_shft_0

AD218X_shft_1 = _ida_domain.AD218X_shft_1

AD218X_shft_2 = _ida_domain.AD218X_shft_2

AD218X_shft_3 = _ida_domain.AD218X_shft_3

AD218X_shft_4 = _ida_domain.AD218X_shft_4

AD218X_shft_5 = _ida_domain.AD218X_shft_5

AD218X_shft_6 = _ida_domain.AD218X_shft_6

AD218X_shft_7 = _ida_domain.AD218X_shft_7

AD218X_shft_8 = _ida_domain.AD218X_shft_8

AD218X_shft_9 = _ida_domain.AD218X_shft_9

AD218X_shft_a = _ida_domain.AD218X_shft_a

AD218X_shft_b = _ida_domain.AD218X_shft_b

AD218X_shft_c = _ida_domain.AD218X_shft_c

AD218X_shft_d = _ida_domain.AD218X_shft_d

AD218X_shft_e = _ida_domain.AD218X_shft_e

AD218X_shft_f = _ida_domain.AD218X_shft_f

AD218X_alu_00 = _ida_domain.AD218X_alu_00

AD218X_alu_01 = _ida_domain.AD218X_alu_01

AD218X_alu_02 = _ida_domain.AD218X_alu_02

AD218X_alu_03 = _ida_domain.AD218X_alu_03

AD218X_alu_04 = _ida_domain.AD218X_alu_04

AD218X_alu_05 = _ida_domain.AD218X_alu_05

AD218X_alu_06 = _ida_domain.AD218X_alu_06

AD218X_alu_07 = _ida_domain.AD218X_alu_07

AD218X_alu_08 = _ida_domain.AD218X_alu_08

AD218X_alu_09 = _ida_domain.AD218X_alu_09

AD218X_alu_0a = _ida_domain.AD218X_alu_0a

AD218X_alu_0b = _ida_domain.AD218X_alu_0b

AD218X_alu_0c = _ida_domain.AD218X_alu_0c

AD218X_alu_0d = _ida_domain.AD218X_alu_0d

AD218X_alu_0e = _ida_domain.AD218X_alu_0e

AD218X_alu_0f = _ida_domain.AD218X_alu_0f

AD218X_alu_10 = _ida_domain.AD218X_alu_10

AD218X_alu_11 = _ida_domain.AD218X_alu_11

AD218X_alu_12 = _ida_domain.AD218X_alu_12

AD218X_alu_13 = _ida_domain.AD218X_alu_13

AD218X_alu_14 = _ida_domain.AD218X_alu_14

AD218X_alu_15 = _ida_domain.AD218X_alu_15

AD218X_alu_16 = _ida_domain.AD218X_alu_16

AD218X_alu_17 = _ida_domain.AD218X_alu_17

AD218X_alu_18 = _ida_domain.AD218X_alu_18

AD218X_alu_19 = _ida_domain.AD218X_alu_19

AD218X_alu_1a = _ida_domain.AD218X_alu_1a

AD218X_alu_1b = _ida_domain.AD218X_alu_1b

AD218X_alu_1c = _ida_domain.AD218X_alu_1c

AD218X_alu_1d = _ida_domain.AD218X_alu_1d

AD218X_mac_0 = _ida_domain.AD218X_mac_0

AD218X_mac_1 = _ida_domain.AD218X_mac_1

AD218X_mac_2 = _ida_domain.AD218X_mac_2

AD218X_mac_3 = _ida_domain.AD218X_mac_3

AD218X_mac_4 = _ida_domain.AD218X_mac_4

AD218X_mac_5 = _ida_domain.AD218X_mac_5

AD218X_mac_6 = _ida_domain.AD218X_mac_6

AD218X_mac_7 = _ida_domain.AD218X_mac_7

AD218X_mac_8 = _ida_domain.AD218X_mac_8

AD218X_mac_9 = _ida_domain.AD218X_mac_9

AD218X_mac_a = _ida_domain.AD218X_mac_a

AD218X_mac_b = _ida_domain.AD218X_mac_b

AD218X_amf = _ida_domain.AD218X_amf

AD218X_shft = _ida_domain.AD218X_shft

AD218X_shifter_0 = _ida_domain.AD218X_shifter_0

AD218X_shifter_1 = _ida_domain.AD218X_shifter_1

AD218X_shifter_2 = _ida_domain.AD218X_shifter_2

AD218X_shifter_3 = _ida_domain.AD218X_shifter_3

AD218X_shifter_4 = _ida_domain.AD218X_shifter_4

AD218X_shifter_5 = _ida_domain.AD218X_shifter_5

AD218X_shifter_6 = _ida_domain.AD218X_shifter_6

AD218X_shifter_7 = _ida_domain.AD218X_shifter_7

AD218X_move_0 = _ida_domain.AD218X_move_0

AD218X_move_1 = _ida_domain.AD218X_move_1

AD218X_move_2 = _ida_domain.AD218X_move_2

AD218X_move_3 = _ida_domain.AD218X_move_3

AD218X_move_4 = _ida_domain.AD218X_move_4

AD218X_move_5 = _ida_domain.AD218X_move_5

AD218X_move_6 = _ida_domain.AD218X_move_6

AD218X_move_7 = _ida_domain.AD218X_move_7

AD218X_move_8 = _ida_domain.AD218X_move_8

AD218X_move_9 = _ida_domain.AD218X_move_9

AD218X_move_a = _ida_domain.AD218X_move_a

AD218X_move_b = _ida_domain.AD218X_move_b

AD218X_jump = _ida_domain.AD218X_jump

AD218X_jump_1 = _ida_domain.AD218X_jump_1

AD218X_jump_2 = _ida_domain.AD218X_jump_2

AD218X_jump_3 = _ida_domain.AD218X_jump_3

AD218X_jump_4 = _ida_domain.AD218X_jump_4

AD218X_call = _ida_domain.AD218X_call

AD218X_call_1 = _ida_domain.AD218X_call_1

AD218X_call_2 = _ida_domain.AD218X_call_2

AD218X_rts = _ida_domain.AD218X_rts

AD218X_rts_cond = _ida_domain.AD218X_rts_cond

AD218X_rti = _ida_domain.AD218X_rti

AD218X_rti_cond = _ida_domain.AD218X_rti_cond

AD218X_nop = _ida_domain.AD218X_nop

AD218X_do = _ida_domain.AD218X_do

AD218X_idle = _ida_domain.AD218X_idle

AD218X_idle_1 = _ida_domain.AD218X_idle_1

AD218X_flag_out = _ida_domain.AD218X_flag_out

AD218X_stack_ctl = _ida_domain.AD218X_stack_ctl

AD218X_mode_ctl = _ida_domain.AD218X_mode_ctl

AD218X_tops_w = _ida_domain.AD218X_tops_w

AD218X_tops_r = _ida_domain.AD218X_tops_r

AD218X_ints_dis = _ida_domain.AD218X_ints_dis

AD218X_ints_ena = _ida_domain.AD218X_ints_ena

AD218X_modify = _ida_domain.AD218X_modify

AD218X_double_move = _ida_domain.AD218X_double_move

AD218X_amf_move_0 = _ida_domain.AD218X_amf_move_0

AD218X_amf_move_1 = _ida_domain.AD218X_amf_move_1

AD218X_amf_move_2 = _ida_domain.AD218X_amf_move_2

AD218X_amf_move_3 = _ida_domain.AD218X_amf_move_3

AD218X_amf_move_4 = _ida_domain.AD218X_amf_move_4

AD218X_amf_move_5 = _ida_domain.AD218X_amf_move_5

AD218X_amf_move_6 = _ida_domain.AD218X_amf_move_6

AD218X_amf_move_7 = _ida_domain.AD218X_amf_move_7

AD218X_amf_move_8 = _ida_domain.AD218X_amf_move_8

AD218X_amf_move_9 = _ida_domain.AD218X_amf_move_9

AD218X_amf_move_a = _ida_domain.AD218X_amf_move_a

AD218X_last = _ida_domain.AD218X_last

OAK_Dsp_null = _ida_domain.OAK_Dsp_null

OAK_Dsp_proc = _ida_domain.OAK_Dsp_proc

OAK_Dsp_or = _ida_domain.OAK_Dsp_or

OAK_Dsp_and = _ida_domain.OAK_Dsp_and

OAK_Dsp_xor = _ida_domain.OAK_Dsp_xor

OAK_Dsp_add = _ida_domain.OAK_Dsp_add

OAK_Dsp_alm_tst0 = _ida_domain.OAK_Dsp_alm_tst0

OAK_Dsp_alm_tst1 = _ida_domain.OAK_Dsp_alm_tst1

OAK_Dsp_cmp = _ida_domain.OAK_Dsp_cmp

OAK_Dsp_sub = _ida_domain.OAK_Dsp_sub

OAK_Dsp_alm_msu = _ida_domain.OAK_Dsp_alm_msu

OAK_Dsp_addh = _ida_domain.OAK_Dsp_addh

OAK_Dsp_addl = _ida_domain.OAK_Dsp_addl

OAK_Dsp_subh = _ida_domain.OAK_Dsp_subh

OAK_Dsp_subl = _ida_domain.OAK_Dsp_subl

OAK_Dsp_sqr = _ida_domain.OAK_Dsp_sqr

OAK_Dsp_sqra = _ida_domain.OAK_Dsp_sqra

OAK_Dsp_cmpu = _ida_domain.OAK_Dsp_cmpu

OAK_Dsp_shr = _ida_domain.OAK_Dsp_shr

OAK_Dsp_shr4 = _ida_domain.OAK_Dsp_shr4

OAK_Dsp_shl = _ida_domain.OAK_Dsp_shl

OAK_Dsp_shl4 = _ida_domain.OAK_Dsp_shl4

OAK_Dsp_ror = _ida_domain.OAK_Dsp_ror

OAK_Dsp_rol = _ida_domain.OAK_Dsp_rol

OAK_Dsp_clr = _ida_domain.OAK_Dsp_clr

OAK_Dsp_mod_reserved = _ida_domain.OAK_Dsp_mod_reserved

OAK_Dsp_not = _ida_domain.OAK_Dsp_not

OAK_Dsp_neg = _ida_domain.OAK_Dsp_neg

OAK_Dsp_rnd = _ida_domain.OAK_Dsp_rnd

OAK_Dsp_pacr = _ida_domain.OAK_Dsp_pacr

OAK_Dsp_clrr = _ida_domain.OAK_Dsp_clrr

OAK_Dsp_inc = _ida_domain.OAK_Dsp_inc

OAK_Dsp_dec = _ida_domain.OAK_Dsp_dec

OAK_Dsp_copy = _ida_domain.OAK_Dsp_copy

OAK_Dsp_norm = _ida_domain.OAK_Dsp_norm

OAK_Dsp_divs = _ida_domain.OAK_Dsp_divs

OAK_Dsp_set = _ida_domain.OAK_Dsp_set

OAK_Dsp_rst = _ida_domain.OAK_Dsp_rst

OAK_Dsp_chng = _ida_domain.OAK_Dsp_chng

OAK_Dsp_addv = _ida_domain.OAK_Dsp_addv

OAK_Dsp_alb_tst0 = _ida_domain.OAK_Dsp_alb_tst0

OAK_Dsp_alb_tst1 = _ida_domain.OAK_Dsp_alb_tst1

OAK_Dsp_cmpv = _ida_domain.OAK_Dsp_cmpv

OAK_Dsp_subv = _ida_domain.OAK_Dsp_subv

OAK_Dsp_maxd = _ida_domain.OAK_Dsp_maxd

OAK_Dsp_max = _ida_domain.OAK_Dsp_max

OAK_Dsp_min = _ida_domain.OAK_Dsp_min

OAK_Dsp_lim = _ida_domain.OAK_Dsp_lim

OAK_Dsp_mpy = _ida_domain.OAK_Dsp_mpy

OAK_Dsp_mpysu = _ida_domain.OAK_Dsp_mpysu

OAK_Dsp_mac = _ida_domain.OAK_Dsp_mac

OAK_Dsp_macus = _ida_domain.OAK_Dsp_macus

OAK_Dsp_maa = _ida_domain.OAK_Dsp_maa

OAK_Dsp_macuu = _ida_domain.OAK_Dsp_macuu

OAK_Dsp_macsu = _ida_domain.OAK_Dsp_macsu

OAK_Dsp_maasu = _ida_domain.OAK_Dsp_maasu

OAK_Dsp_mpyi = _ida_domain.OAK_Dsp_mpyi

OAK_Dsp_msu = _ida_domain.OAK_Dsp_msu

OAK_Dsp_tstb = _ida_domain.OAK_Dsp_tstb

OAK_Dsp_shfc = _ida_domain.OAK_Dsp_shfc

OAK_Dsp_shfi = _ida_domain.OAK_Dsp_shfi

OAK_Dsp_exp = _ida_domain.OAK_Dsp_exp

OAK_Dsp_mov = _ida_domain.OAK_Dsp_mov

OAK_Dsp_movp = _ida_domain.OAK_Dsp_movp

OAK_Dsp_movs = _ida_domain.OAK_Dsp_movs

OAK_Dsp_movsi = _ida_domain.OAK_Dsp_movsi

OAK_Dsp_movr = _ida_domain.OAK_Dsp_movr

OAK_Dsp_movd = _ida_domain.OAK_Dsp_movd

OAK_Dsp_push = _ida_domain.OAK_Dsp_push

OAK_Dsp_pop = _ida_domain.OAK_Dsp_pop

OAK_Dsp_swap = _ida_domain.OAK_Dsp_swap

OAK_Dsp_banke = _ida_domain.OAK_Dsp_banke

OAK_Dsp_rep = _ida_domain.OAK_Dsp_rep

OAK_Dsp_bkrep = _ida_domain.OAK_Dsp_bkrep

OAK_Dsp_break = _ida_domain.OAK_Dsp_break

OAK_Dsp_br = _ida_domain.OAK_Dsp_br

OAK_Dsp_brr = _ida_domain.OAK_Dsp_brr

OAK_Dsp_br_u = _ida_domain.OAK_Dsp_br_u

OAK_Dsp_brr_u = _ida_domain.OAK_Dsp_brr_u

OAK_Dsp_call = _ida_domain.OAK_Dsp_call

OAK_Dsp_callr = _ida_domain.OAK_Dsp_callr

OAK_Dsp_calla = _ida_domain.OAK_Dsp_calla

OAK_Dsp_ret = _ida_domain.OAK_Dsp_ret

OAK_Dsp_ret_u = _ida_domain.OAK_Dsp_ret_u

OAK_Dsp_retd = _ida_domain.OAK_Dsp_retd

OAK_Dsp_reti = _ida_domain.OAK_Dsp_reti

OAK_Dsp_reti_u = _ida_domain.OAK_Dsp_reti_u

OAK_Dsp_retid = _ida_domain.OAK_Dsp_retid

OAK_Dsp_rets = _ida_domain.OAK_Dsp_rets

OAK_Dsp_cntx = _ida_domain.OAK_Dsp_cntx

OAK_Dsp_nop = _ida_domain.OAK_Dsp_nop

OAK_Dsp_modr = _ida_domain.OAK_Dsp_modr

OAK_Dsp_dint = _ida_domain.OAK_Dsp_dint

OAK_Dsp_eint = _ida_domain.OAK_Dsp_eint

OAK_Dsp_trap = _ida_domain.OAK_Dsp_trap

OAK_Dsp_lpg = _ida_domain.OAK_Dsp_lpg

OAK_Dsp_load = _ida_domain.OAK_Dsp_load

OAK_Dsp_mov_eu = _ida_domain.OAK_Dsp_mov_eu

OAK_Dsp_last = _ida_domain.OAK_Dsp_last

T900_null = _ida_domain.T900_null

T900_ld = _ida_domain.T900_ld

T900_ldw = _ida_domain.T900_ldw

T900_push = _ida_domain.T900_push

T900_pushw = _ida_domain.T900_pushw

T900_pop = _ida_domain.T900_pop

T900_popw = _ida_domain.T900_popw

T900_lda = _ida_domain.T900_lda

T900_ldar = _ida_domain.T900_ldar

T900_ex = _ida_domain.T900_ex

T900_mirr = _ida_domain.T900_mirr

T900_ldi = _ida_domain.T900_ldi

T900_ldiw = _ida_domain.T900_ldiw

T900_ldir = _ida_domain.T900_ldir

T900_ldirw = _ida_domain.T900_ldirw

T900_ldd = _ida_domain.T900_ldd

T900_lddw = _ida_domain.T900_lddw

T900_lddr = _ida_domain.T900_lddr

T900_lddrw = _ida_domain.T900_lddrw

T900_cpi = _ida_domain.T900_cpi

T900_cpir = _ida_domain.T900_cpir

T900_cpd = _ida_domain.T900_cpd

T900_cpdr = _ida_domain.T900_cpdr

T900_add = _ida_domain.T900_add

T900_addw = _ida_domain.T900_addw

T900_adc = _ida_domain.T900_adc

T900_adcw = _ida_domain.T900_adcw

T900_sub = _ida_domain.T900_sub

T900_subw = _ida_domain.T900_subw

T900_sbc = _ida_domain.T900_sbc

T900_sbcw = _ida_domain.T900_sbcw

T900_cp = _ida_domain.T900_cp

T900_cpw = _ida_domain.T900_cpw

T900_inc = _ida_domain.T900_inc

T900_incw = _ida_domain.T900_incw

T900_dec = _ida_domain.T900_dec

T900_decw = _ida_domain.T900_decw

T900_neg = _ida_domain.T900_neg

T900_extz = _ida_domain.T900_extz

T900_exts = _ida_domain.T900_exts

T900_daa = _ida_domain.T900_daa

T900_paa = _ida_domain.T900_paa

T900_cpl = _ida_domain.T900_cpl

T900_mul = _ida_domain.T900_mul

T900_muls = _ida_domain.T900_muls

T900_div = _ida_domain.T900_div

T900_divs = _ida_domain.T900_divs

T900_mula = _ida_domain.T900_mula

T900_minc1 = _ida_domain.T900_minc1

T900_minc2 = _ida_domain.T900_minc2

T900_minc4 = _ida_domain.T900_minc4

T900_mdec1 = _ida_domain.T900_mdec1

T900_mdec2 = _ida_domain.T900_mdec2

T900_mdec4 = _ida_domain.T900_mdec4

T900_and = _ida_domain.T900_and

T900_andw = _ida_domain.T900_andw

T900_or = _ida_domain.T900_or

T900_orw = _ida_domain.T900_orw

T900_xor = _ida_domain.T900_xor

T900_xorw = _ida_domain.T900_xorw

T900_ldcf = _ida_domain.T900_ldcf

T900_stcf = _ida_domain.T900_stcf

T900_andcf = _ida_domain.T900_andcf

T900_orcf = _ida_domain.T900_orcf

T900_xorcf = _ida_domain.T900_xorcf

T900_rcf = _ida_domain.T900_rcf

T900_scf = _ida_domain.T900_scf

T900_ccf = _ida_domain.T900_ccf

T900_zcf = _ida_domain.T900_zcf

T900_bit = _ida_domain.T900_bit

T900_res = _ida_domain.T900_res

T900_set = _ida_domain.T900_set

T900_chg = _ida_domain.T900_chg

T900_tset = _ida_domain.T900_tset

T900_bs1f = _ida_domain.T900_bs1f

T900_bs1b = _ida_domain.T900_bs1b

T900_nop = _ida_domain.T900_nop

T900_ei = _ida_domain.T900_ei

T900_di = _ida_domain.T900_di

T900_swi = _ida_domain.T900_swi

T900_halt = _ida_domain.T900_halt

T900_ldc = _ida_domain.T900_ldc

T900_ldx = _ida_domain.T900_ldx

T900_link = _ida_domain.T900_link

T900_unlk = _ida_domain.T900_unlk

T900_ldf = _ida_domain.T900_ldf

T900_incf = _ida_domain.T900_incf

T900_decf = _ida_domain.T900_decf

T900_scc = _ida_domain.T900_scc

T900_rlc = _ida_domain.T900_rlc

T900_rlc_mem = _ida_domain.T900_rlc_mem

T900_rlcw_mem = _ida_domain.T900_rlcw_mem

T900_rrc = _ida_domain.T900_rrc

T900_rrc_mem = _ida_domain.T900_rrc_mem

T900_rrcw_mem = _ida_domain.T900_rrcw_mem

T900_rl = _ida_domain.T900_rl

T900_rl_mem = _ida_domain.T900_rl_mem

T900_rlw_mem = _ida_domain.T900_rlw_mem

T900_rr = _ida_domain.T900_rr

T900_rr_mem = _ida_domain.T900_rr_mem

T900_rrw_mem = _ida_domain.T900_rrw_mem

T900_sla = _ida_domain.T900_sla

T900_sla_mem = _ida_domain.T900_sla_mem

T900_slaw_mem = _ida_domain.T900_slaw_mem

T900_sra = _ida_domain.T900_sra

T900_sra_mem = _ida_domain.T900_sra_mem

T900_sraw_mem = _ida_domain.T900_sraw_mem

T900_sll = _ida_domain.T900_sll

T900_sll_mem = _ida_domain.T900_sll_mem

T900_sllw_mem = _ida_domain.T900_sllw_mem

T900_srl = _ida_domain.T900_srl

T900_srl_mem = _ida_domain.T900_srl_mem

T900_srlw_mem = _ida_domain.T900_srlw_mem

T900_rld = _ida_domain.T900_rld

T900_rrd = _ida_domain.T900_rrd

T900_jp = _ida_domain.T900_jp

T900_jp_cond = _ida_domain.T900_jp_cond

T900_jr = _ida_domain.T900_jr

T900_jr_cond = _ida_domain.T900_jr_cond

T900_jrl = _ida_domain.T900_jrl

T900_jrl_cond = _ida_domain.T900_jrl_cond

T900_call = _ida_domain.T900_call

T900_calr = _ida_domain.T900_calr

T900_djnz = _ida_domain.T900_djnz

T900_ret = _ida_domain.T900_ret

T900_ret_cond = _ida_domain.T900_ret_cond

T900_retd = _ida_domain.T900_retd

T900_reti = _ida_domain.T900_reti

T900_max = _ida_domain.T900_max

T900_normal = _ida_domain.T900_normal

T900_last = _ida_domain.T900_last

C39_null = _ida_domain.C39_null

C39_adc = _ida_domain.C39_adc

C39_add = _ida_domain.C39_add

C39_anc = _ida_domain.C39_anc

C39_and = _ida_domain.C39_and

C39_ane = _ida_domain.C39_ane

C39_arr = _ida_domain.C39_arr

C39_asl = _ida_domain.C39_asl

C39_asr = _ida_domain.C39_asr

C39_bar = _ida_domain.C39_bar

C39_bas = _ida_domain.C39_bas

C39_bbr = _ida_domain.C39_bbr

C39_bbs = _ida_domain.C39_bbs

C39_bcc = _ida_domain.C39_bcc

C39_bcs = _ida_domain.C39_bcs

C39_beq = _ida_domain.C39_beq

C39_bit = _ida_domain.C39_bit

C39_bmi = _ida_domain.C39_bmi

C39_bne = _ida_domain.C39_bne

C39_bpl = _ida_domain.C39_bpl

C39_bra = _ida_domain.C39_bra

C39_brk = _ida_domain.C39_brk

C39_bvc = _ida_domain.C39_bvc

C39_bvs = _ida_domain.C39_bvs

C39_clc = _ida_domain.C39_clc

C39_cld = _ida_domain.C39_cld

C39_cli = _ida_domain.C39_cli

C39_clv = _ida_domain.C39_clv

C39_clw = _ida_domain.C39_clw

C39_cmp = _ida_domain.C39_cmp

C39_cpx = _ida_domain.C39_cpx

C39_cpy = _ida_domain.C39_cpy

C39_dcp = _ida_domain.C39_dcp

C39_dec = _ida_domain.C39_dec

C39_dex = _ida_domain.C39_dex

C39_dey = _ida_domain.C39_dey

C39_eor = _ida_domain.C39_eor

C39_exc = _ida_domain.C39_exc

C39_inc = _ida_domain.C39_inc

C39_ini = _ida_domain.C39_ini

C39_inx = _ida_domain.C39_inx

C39_iny = _ida_domain.C39_iny

C39_isb = _ida_domain.C39_isb

C39_jmp = _ida_domain.C39_jmp

C39_jpi = _ida_domain.C39_jpi

C39_jsb = _ida_domain.C39_jsb

C39_jsr = _ida_domain.C39_jsr

C39_lab = _ida_domain.C39_lab

C39_lae = _ida_domain.C39_lae

C39_lai = _ida_domain.C39_lai

C39_lan = _ida_domain.C39_lan

C39_lax = _ida_domain.C39_lax

C39_lda = _ida_domain.C39_lda

C39_ldx = _ida_domain.C39_ldx

C39_ldy = _ida_domain.C39_ldy

C39_lii = _ida_domain.C39_lii

C39_lsr = _ida_domain.C39_lsr

C39_lxa = _ida_domain.C39_lxa

C39_mpa = _ida_domain.C39_mpa

C39_mpy = _ida_domain.C39_mpy

C39_neg = _ida_domain.C39_neg

C39_nop = _ida_domain.C39_nop

C39_nxt = _ida_domain.C39_nxt

C39_ora = _ida_domain.C39_ora

C39_pha = _ida_domain.C39_pha

C39_phi = _ida_domain.C39_phi

C39_php = _ida_domain.C39_php

C39_phw = _ida_domain.C39_phw

C39_phx = _ida_domain.C39_phx

C39_phy = _ida_domain.C39_phy

C39_pia = _ida_domain.C39_pia

C39_pla = _ida_domain.C39_pla

C39_pli = _ida_domain.C39_pli

C39_plp = _ida_domain.C39_plp

C39_plw = _ida_domain.C39_plw

C39_plx = _ida_domain.C39_plx

C39_ply = _ida_domain.C39_ply

C39_psh = _ida_domain.C39_psh

C39_pul = _ida_domain.C39_pul

C39_rba = _ida_domain.C39_rba

C39_rla = _ida_domain.C39_rla

C39_rmb = _ida_domain.C39_rmb

C39_rnd = _ida_domain.C39_rnd

C39_rol = _ida_domain.C39_rol

C39_ror = _ida_domain.C39_ror

C39_rra = _ida_domain.C39_rra

C39_rti = _ida_domain.C39_rti

C39_rts = _ida_domain.C39_rts

C39_sax = _ida_domain.C39_sax

C39_sba = _ida_domain.C39_sba

C39_sbc = _ida_domain.C39_sbc

C39_sbx = _ida_domain.C39_sbx

C39_sec = _ida_domain.C39_sec

C39_sed = _ida_domain.C39_sed

C39_sei = _ida_domain.C39_sei

C39_sha = _ida_domain.C39_sha

C39_shs = _ida_domain.C39_shs

C39_shx = _ida_domain.C39_shx

C39_shy = _ida_domain.C39_shy

C39_slo = _ida_domain.C39_slo

C39_smb = _ida_domain.C39_smb

C39_sre = _ida_domain.C39_sre

C39_sta = _ida_domain.C39_sta

C39_sti = _ida_domain.C39_sti

C39_stx = _ida_domain.C39_stx

C39_sty = _ida_domain.C39_sty

C39_tax = _ida_domain.C39_tax

C39_tay = _ida_domain.C39_tay

C39_taw = _ida_domain.C39_taw

C39_tip = _ida_domain.C39_tip

C39_tsx = _ida_domain.C39_tsx

C39_twa = _ida_domain.C39_twa

C39_txa = _ida_domain.C39_txa

C39_txs = _ida_domain.C39_txs

C39_tya = _ida_domain.C39_tya

C39_last = _ida_domain.C39_last

CR16_null = _ida_domain.CR16_null

CR16_addb = _ida_domain.CR16_addb

CR16_addw = _ida_domain.CR16_addw

CR16_addub = _ida_domain.CR16_addub

CR16_adduw = _ida_domain.CR16_adduw

CR16_addcb = _ida_domain.CR16_addcb

CR16_addcw = _ida_domain.CR16_addcw

CR16_andb = _ida_domain.CR16_andb

CR16_andw = _ida_domain.CR16_andw

CR16_ashub = _ida_domain.CR16_ashub

CR16_ashuw = _ida_domain.CR16_ashuw

CR16_beq = _ida_domain.CR16_beq

CR16_bne = _ida_domain.CR16_bne

CR16_bcs = _ida_domain.CR16_bcs

CR16_bcc = _ida_domain.CR16_bcc

CR16_bhi = _ida_domain.CR16_bhi

CR16_bls = _ida_domain.CR16_bls

CR16_bgt = _ida_domain.CR16_bgt

CR16_ble = _ida_domain.CR16_ble

CR16_bfs = _ida_domain.CR16_bfs

CR16_bfc = _ida_domain.CR16_bfc

CR16_blo = _ida_domain.CR16_blo

CR16_bhs = _ida_domain.CR16_bhs

CR16_blt = _ida_domain.CR16_blt

CR16_bge = _ida_domain.CR16_bge

CR16_br = _ida_domain.CR16_br

CR16_bal = _ida_domain.CR16_bal

CR16_cmpb = _ida_domain.CR16_cmpb

CR16_cmpw = _ida_domain.CR16_cmpw

CR16_beq1b = _ida_domain.CR16_beq1b

CR16_beq1w = _ida_domain.CR16_beq1w

CR16_beq0b = _ida_domain.CR16_beq0b

CR16_beq0w = _ida_domain.CR16_beq0w

CR16_bne1b = _ida_domain.CR16_bne1b

CR16_bne1w = _ida_domain.CR16_bne1w

CR16_bne0b = _ida_domain.CR16_bne0b

CR16_bne0w = _ida_domain.CR16_bne0w

CR16_di = _ida_domain.CR16_di

CR16_ei = _ida_domain.CR16_ei

CR16_excp = _ida_domain.CR16_excp

CR16_jeq = _ida_domain.CR16_jeq

CR16_jne = _ida_domain.CR16_jne

CR16_jcs = _ida_domain.CR16_jcs

CR16_jcc = _ida_domain.CR16_jcc

CR16_jhi = _ida_domain.CR16_jhi

CR16_jls = _ida_domain.CR16_jls

CR16_jgt = _ida_domain.CR16_jgt

CR16_jle = _ida_domain.CR16_jle

CR16_jfs = _ida_domain.CR16_jfs

CR16_jfc = _ida_domain.CR16_jfc

CR16_jlo = _ida_domain.CR16_jlo

CR16_jhs = _ida_domain.CR16_jhs

CR16_jlt = _ida_domain.CR16_jlt

CR16_jge = _ida_domain.CR16_jge

CR16_jump = _ida_domain.CR16_jump

CR16_jal = _ida_domain.CR16_jal

CR16_loadb = _ida_domain.CR16_loadb

CR16_loadw = _ida_domain.CR16_loadw

CR16_loadm = _ida_domain.CR16_loadm

CR16_lpr = _ida_domain.CR16_lpr

CR16_lshb = _ida_domain.CR16_lshb

CR16_lshw = _ida_domain.CR16_lshw

CR16_movb = _ida_domain.CR16_movb

CR16_movw = _ida_domain.CR16_movw

CR16_movxb = _ida_domain.CR16_movxb

CR16_movzb = _ida_domain.CR16_movzb

CR16_movd = _ida_domain.CR16_movd

CR16_mulb = _ida_domain.CR16_mulb

CR16_mulw = _ida_domain.CR16_mulw

CR16_mulsb = _ida_domain.CR16_mulsb

CR16_mulsw = _ida_domain.CR16_mulsw

CR16_muluw = _ida_domain.CR16_muluw

CR16_nop = _ida_domain.CR16_nop

CR16_orb = _ida_domain.CR16_orb

CR16_orw = _ida_domain.CR16_orw

CR16_push = _ida_domain.CR16_push

CR16_pop = _ida_domain.CR16_pop

CR16_popret = _ida_domain.CR16_popret

CR16_retx = _ida_domain.CR16_retx

CR16_seq = _ida_domain.CR16_seq

CR16_sne = _ida_domain.CR16_sne

CR16_scs = _ida_domain.CR16_scs

CR16_scc = _ida_domain.CR16_scc

CR16_shi = _ida_domain.CR16_shi

CR16_sls = _ida_domain.CR16_sls

CR16_sgt = _ida_domain.CR16_sgt

CR16_sle = _ida_domain.CR16_sle

CR16_sfs = _ida_domain.CR16_sfs

CR16_sfc = _ida_domain.CR16_sfc

CR16_slo = _ida_domain.CR16_slo

CR16_shs = _ida_domain.CR16_shs

CR16_slt = _ida_domain.CR16_slt

CR16_sge = _ida_domain.CR16_sge

CR16_spr = _ida_domain.CR16_spr

CR16_storb = _ida_domain.CR16_storb

CR16_storw = _ida_domain.CR16_storw

CR16_storm = _ida_domain.CR16_storm

CR16_subb = _ida_domain.CR16_subb

CR16_subw = _ida_domain.CR16_subw

CR16_subcb = _ida_domain.CR16_subcb

CR16_subcw = _ida_domain.CR16_subcw

CR16_tbit = _ida_domain.CR16_tbit

CR16_tbitb = _ida_domain.CR16_tbitb

CR16_tbitw = _ida_domain.CR16_tbitw

CR16_sbitb = _ida_domain.CR16_sbitb

CR16_sbitw = _ida_domain.CR16_sbitw

CR16_cbitb = _ida_domain.CR16_cbitb

CR16_cbitw = _ida_domain.CR16_cbitw

CR16_wait = _ida_domain.CR16_wait

CR16_eiwait = _ida_domain.CR16_eiwait

CR16_xorb = _ida_domain.CR16_xorb

CR16_xorw = _ida_domain.CR16_xorw

CR16_last = _ida_domain.CR16_last

mn102_null = _ida_domain.mn102_null

mn102_add = _ida_domain.mn102_add

mn102_addc = _ida_domain.mn102_addc

mn102_addnf = _ida_domain.mn102_addnf

mn102_and = _ida_domain.mn102_and

mn102_asr = _ida_domain.mn102_asr

mn102_bcc = _ida_domain.mn102_bcc

mn102_bccx = _ida_domain.mn102_bccx

mn102_bclr = _ida_domain.mn102_bclr

mn102_bcs = _ida_domain.mn102_bcs

mn102_bcsx = _ida_domain.mn102_bcsx

mn102_beq = _ida_domain.mn102_beq

mn102_beqx = _ida_domain.mn102_beqx

mn102_bge = _ida_domain.mn102_bge

mn102_bgex = _ida_domain.mn102_bgex

mn102_bgt = _ida_domain.mn102_bgt

mn102_bgtx = _ida_domain.mn102_bgtx

mn102_bhi = _ida_domain.mn102_bhi

mn102_bhix = _ida_domain.mn102_bhix

mn102_ble = _ida_domain.mn102_ble

mn102_blex = _ida_domain.mn102_blex

mn102_bls = _ida_domain.mn102_bls

mn102_blsx = _ida_domain.mn102_blsx

mn102_blt = _ida_domain.mn102_blt

mn102_bltx = _ida_domain.mn102_bltx

mn102_bnc = _ida_domain.mn102_bnc

mn102_bncx = _ida_domain.mn102_bncx

mn102_bne = _ida_domain.mn102_bne

mn102_bnex = _ida_domain.mn102_bnex

mn102_bns = _ida_domain.mn102_bns

mn102_bnsx = _ida_domain.mn102_bnsx

mn102_bra = _ida_domain.mn102_bra

mn102_bset = _ida_domain.mn102_bset

mn102_btst = _ida_domain.mn102_btst

mn102_bvc = _ida_domain.mn102_bvc

mn102_bvcx = _ida_domain.mn102_bvcx

mn102_bvs = _ida_domain.mn102_bvs

mn102_bvsx = _ida_domain.mn102_bvsx

mn102_cmp = _ida_domain.mn102_cmp

mn102_divu = _ida_domain.mn102_divu

mn102_ext = _ida_domain.mn102_ext

mn102_extx = _ida_domain.mn102_extx

mn102_extxb = _ida_domain.mn102_extxb

mn102_extxbu = _ida_domain.mn102_extxbu

mn102_extxu = _ida_domain.mn102_extxu

mn102_jmp = _ida_domain.mn102_jmp

mn102_jsr = _ida_domain.mn102_jsr

mn102_lsr = _ida_domain.mn102_lsr

mn102_mov = _ida_domain.mn102_mov

mn102_movb = _ida_domain.mn102_movb

mn102_movbu = _ida_domain.mn102_movbu

mn102_movx = _ida_domain.mn102_movx

mn102_mul = _ida_domain.mn102_mul

mn102_mulq = _ida_domain.mn102_mulq

mn102_mulqh = _ida_domain.mn102_mulqh

mn102_mulql = _ida_domain.mn102_mulql

mn102_mulu = _ida_domain.mn102_mulu

mn102_nop = _ida_domain.mn102_nop

mn102_not = _ida_domain.mn102_not

mn102_or = _ida_domain.mn102_or

mn102_pxst = _ida_domain.mn102_pxst

mn102_rol = _ida_domain.mn102_rol

mn102_ror = _ida_domain.mn102_ror

mn102_rti = _ida_domain.mn102_rti

mn102_rts = _ida_domain.mn102_rts

mn102_sub = _ida_domain.mn102_sub

mn102_subc = _ida_domain.mn102_subc

mn102_tbnz = _ida_domain.mn102_tbnz

mn102_tbz = _ida_domain.mn102_tbz

mn102_xor = _ida_domain.mn102_xor

mn102_last = _ida_domain.mn102_last

PPC_null = _ida_domain.PPC_null

PPC_add = _ida_domain.PPC_add

PPC_addc = _ida_domain.PPC_addc

PPC_adde = _ida_domain.PPC_adde

PPC_addi = _ida_domain.PPC_addi

PPC_addic = _ida_domain.PPC_addic

PPC_addis = _ida_domain.PPC_addis

PPC_addme = _ida_domain.PPC_addme

PPC_addze = _ida_domain.PPC_addze

PPC_and = _ida_domain.PPC_and

PPC_andc = _ida_domain.PPC_andc

PPC_andi = _ida_domain.PPC_andi

PPC_andis = _ida_domain.PPC_andis

PPC_b = _ida_domain.PPC_b

PPC_bc = _ida_domain.PPC_bc

PPC_bcctr = _ida_domain.PPC_bcctr

PPC_bclr = _ida_domain.PPC_bclr

PPC_cmp = _ida_domain.PPC_cmp

PPC_cmpi = _ida_domain.PPC_cmpi

PPC_cmpl = _ida_domain.PPC_cmpl

PPC_cmpli = _ida_domain.PPC_cmpli

PPC_cntlzd = _ida_domain.PPC_cntlzd

PPC_cntlzw = _ida_domain.PPC_cntlzw

PPC_crand = _ida_domain.PPC_crand

PPC_crandc = _ida_domain.PPC_crandc

PPC_creqv = _ida_domain.PPC_creqv

PPC_crnand = _ida_domain.PPC_crnand

PPC_crnor = _ida_domain.PPC_crnor

PPC_cror = _ida_domain.PPC_cror

PPC_crorc = _ida_domain.PPC_crorc

PPC_crxor = _ida_domain.PPC_crxor

PPC_dcba = _ida_domain.PPC_dcba

PPC_dcbf = _ida_domain.PPC_dcbf

PPC_dcbi = _ida_domain.PPC_dcbi

PPC_dcbst = _ida_domain.PPC_dcbst

PPC_dcbt = _ida_domain.PPC_dcbt

PPC_dcbtst = _ida_domain.PPC_dcbtst

PPC_dcbz = _ida_domain.PPC_dcbz

PPC_divd = _ida_domain.PPC_divd

PPC_divdu = _ida_domain.PPC_divdu

PPC_divw = _ida_domain.PPC_divw

PPC_divwu = _ida_domain.PPC_divwu

PPC_eciwx = _ida_domain.PPC_eciwx

PPC_ecowx = _ida_domain.PPC_ecowx

PPC_eieio = _ida_domain.PPC_eieio

PPC_eqv = _ida_domain.PPC_eqv

PPC_extsb = _ida_domain.PPC_extsb

PPC_extsh = _ida_domain.PPC_extsh

PPC_extsw = _ida_domain.PPC_extsw

PPC_fabs = _ida_domain.PPC_fabs

PPC_fadd = _ida_domain.PPC_fadd

PPC_fadds = _ida_domain.PPC_fadds

PPC_fcfid = _ida_domain.PPC_fcfid

PPC_fcmpo = _ida_domain.PPC_fcmpo

PPC_fcmpu = _ida_domain.PPC_fcmpu

PPC_fctid = _ida_domain.PPC_fctid

PPC_fctidz = _ida_domain.PPC_fctidz

PPC_fctiw = _ida_domain.PPC_fctiw

PPC_fctiwz = _ida_domain.PPC_fctiwz

PPC_fdiv = _ida_domain.PPC_fdiv

PPC_fdivs = _ida_domain.PPC_fdivs

PPC_fmadd = _ida_domain.PPC_fmadd

PPC_fmadds = _ida_domain.PPC_fmadds

PPC_fmr = _ida_domain.PPC_fmr

PPC_fmsub = _ida_domain.PPC_fmsub

PPC_fmsubs = _ida_domain.PPC_fmsubs

PPC_fmul = _ida_domain.PPC_fmul

PPC_fmuls = _ida_domain.PPC_fmuls

PPC_fnabs = _ida_domain.PPC_fnabs

PPC_fneg = _ida_domain.PPC_fneg

PPC_fnmadd = _ida_domain.PPC_fnmadd

PPC_fnmadds = _ida_domain.PPC_fnmadds

PPC_fnmsub = _ida_domain.PPC_fnmsub

PPC_fnmsubs = _ida_domain.PPC_fnmsubs

PPC_fres = _ida_domain.PPC_fres

PPC_frsp = _ida_domain.PPC_frsp

PPC_frsqrte = _ida_domain.PPC_frsqrte

PPC_fsel = _ida_domain.PPC_fsel

PPC_fsqrt = _ida_domain.PPC_fsqrt

PPC_fsqrts = _ida_domain.PPC_fsqrts

PPC_fsub = _ida_domain.PPC_fsub

PPC_fsubs = _ida_domain.PPC_fsubs

PPC_icbi = _ida_domain.PPC_icbi

PPC_isync = _ida_domain.PPC_isync

PPC_lbz = _ida_domain.PPC_lbz

PPC_lbzu = _ida_domain.PPC_lbzu

PPC_lbzux = _ida_domain.PPC_lbzux

PPC_lbzx = _ida_domain.PPC_lbzx

PPC_ld = _ida_domain.PPC_ld

PPC_ldarx = _ida_domain.PPC_ldarx

PPC_ldu = _ida_domain.PPC_ldu

PPC_ldux = _ida_domain.PPC_ldux

PPC_ldx = _ida_domain.PPC_ldx

PPC_lfd = _ida_domain.PPC_lfd

PPC_lfdu = _ida_domain.PPC_lfdu

PPC_lfdux = _ida_domain.PPC_lfdux

PPC_lfdx = _ida_domain.PPC_lfdx

PPC_lfs = _ida_domain.PPC_lfs

PPC_lfsu = _ida_domain.PPC_lfsu

PPC_lfsux = _ida_domain.PPC_lfsux

PPC_lfsx = _ida_domain.PPC_lfsx

PPC_lha = _ida_domain.PPC_lha

PPC_lhau = _ida_domain.PPC_lhau

PPC_lhaux = _ida_domain.PPC_lhaux

PPC_lhax = _ida_domain.PPC_lhax

PPC_lhbrx = _ida_domain.PPC_lhbrx

PPC_lhz = _ida_domain.PPC_lhz

PPC_lhzu = _ida_domain.PPC_lhzu

PPC_lhzux = _ida_domain.PPC_lhzux

PPC_lhzx = _ida_domain.PPC_lhzx

PPC_lmw = _ida_domain.PPC_lmw

PPC_lswi = _ida_domain.PPC_lswi

PPC_lswx = _ida_domain.PPC_lswx

PPC_lwa = _ida_domain.PPC_lwa

PPC_lwarx = _ida_domain.PPC_lwarx

PPC_lwaux = _ida_domain.PPC_lwaux

PPC_lwax = _ida_domain.PPC_lwax

PPC_lwbrx = _ida_domain.PPC_lwbrx

PPC_lwz = _ida_domain.PPC_lwz

PPC_lwzu = _ida_domain.PPC_lwzu

PPC_lwzux = _ida_domain.PPC_lwzux

PPC_lwzx = _ida_domain.PPC_lwzx

PPC_mcrf = _ida_domain.PPC_mcrf

PPC_mcrfs = _ida_domain.PPC_mcrfs

PPC_mcrxr = _ida_domain.PPC_mcrxr

PPC_mfcr = _ida_domain.PPC_mfcr

PPC_mffs = _ida_domain.PPC_mffs

PPC_mfmsr = _ida_domain.PPC_mfmsr

PPC_mfspr = _ida_domain.PPC_mfspr

PPC_mfsr = _ida_domain.PPC_mfsr

PPC_mfsrin = _ida_domain.PPC_mfsrin

PPC_mftb = _ida_domain.PPC_mftb

PPC_mtcrf = _ida_domain.PPC_mtcrf

PPC_mtfsb0 = _ida_domain.PPC_mtfsb0

PPC_mtfsb1 = _ida_domain.PPC_mtfsb1

PPC_mtfsf = _ida_domain.PPC_mtfsf

PPC_mtfsfi = _ida_domain.PPC_mtfsfi

PPC_mtmsr = _ida_domain.PPC_mtmsr

PPC_mtmsrd = _ida_domain.PPC_mtmsrd

PPC_mtspr = _ida_domain.PPC_mtspr

PPC_mtsr = _ida_domain.PPC_mtsr

PPC_mtsrd = _ida_domain.PPC_mtsrd

PPC_mtsrdin = _ida_domain.PPC_mtsrdin

PPC_mtsrin = _ida_domain.PPC_mtsrin

PPC_mulhd = _ida_domain.PPC_mulhd

PPC_mulhdu = _ida_domain.PPC_mulhdu

PPC_mulhw = _ida_domain.PPC_mulhw

PPC_mulhwu = _ida_domain.PPC_mulhwu

PPC_mulld = _ida_domain.PPC_mulld

PPC_mulli = _ida_domain.PPC_mulli

PPC_mullw = _ida_domain.PPC_mullw

PPC_nand = _ida_domain.PPC_nand

PPC_neg = _ida_domain.PPC_neg

PPC_nor = _ida_domain.PPC_nor

PPC_or = _ida_domain.PPC_or

PPC_orc = _ida_domain.PPC_orc

PPC_ori = _ida_domain.PPC_ori

PPC_oris = _ida_domain.PPC_oris

PPC_rfi = _ida_domain.PPC_rfi

PPC_rfid = _ida_domain.PPC_rfid

PPC_rldcl = _ida_domain.PPC_rldcl

PPC_rldcr = _ida_domain.PPC_rldcr

PPC_rldic = _ida_domain.PPC_rldic

PPC_rldicl = _ida_domain.PPC_rldicl

PPC_rldicr = _ida_domain.PPC_rldicr

PPC_rldimi = _ida_domain.PPC_rldimi

PPC_rlwimi = _ida_domain.PPC_rlwimi

PPC_rlwinm = _ida_domain.PPC_rlwinm

PPC_rlwnm = _ida_domain.PPC_rlwnm

PPC_sc = _ida_domain.PPC_sc

PPC_slbia = _ida_domain.PPC_slbia

PPC_slbie = _ida_domain.PPC_slbie

PPC_sld = _ida_domain.PPC_sld

PPC_slw = _ida_domain.PPC_slw

PPC_srad = _ida_domain.PPC_srad

PPC_sradi = _ida_domain.PPC_sradi

PPC_sraw = _ida_domain.PPC_sraw

PPC_srawi = _ida_domain.PPC_srawi

PPC_srd = _ida_domain.PPC_srd

PPC_srw = _ida_domain.PPC_srw

PPC_stb = _ida_domain.PPC_stb

PPC_stbu = _ida_domain.PPC_stbu

PPC_stbux = _ida_domain.PPC_stbux

PPC_stbx = _ida_domain.PPC_stbx

PPC_std = _ida_domain.PPC_std

PPC_stdcx = _ida_domain.PPC_stdcx

PPC_stdu = _ida_domain.PPC_stdu

PPC_stdux = _ida_domain.PPC_stdux

PPC_stdx = _ida_domain.PPC_stdx

PPC_stfd = _ida_domain.PPC_stfd

PPC_stfdu = _ida_domain.PPC_stfdu

PPC_stfdux = _ida_domain.PPC_stfdux

PPC_stfdx = _ida_domain.PPC_stfdx

PPC_stfiwx = _ida_domain.PPC_stfiwx

PPC_stfs = _ida_domain.PPC_stfs

PPC_stfsu = _ida_domain.PPC_stfsu

PPC_stfsux = _ida_domain.PPC_stfsux

PPC_stfsx = _ida_domain.PPC_stfsx

PPC_sth = _ida_domain.PPC_sth

PPC_sthbrx = _ida_domain.PPC_sthbrx

PPC_sthu = _ida_domain.PPC_sthu

PPC_sthux = _ida_domain.PPC_sthux

PPC_sthx = _ida_domain.PPC_sthx

PPC_stmw = _ida_domain.PPC_stmw

PPC_stswi = _ida_domain.PPC_stswi

PPC_stswx = _ida_domain.PPC_stswx

PPC_stw = _ida_domain.PPC_stw

PPC_stwbrx = _ida_domain.PPC_stwbrx

PPC_stwcx = _ida_domain.PPC_stwcx

PPC_stwu = _ida_domain.PPC_stwu

PPC_stwux = _ida_domain.PPC_stwux

PPC_stwx = _ida_domain.PPC_stwx

PPC_subf = _ida_domain.PPC_subf

PPC_subfc = _ida_domain.PPC_subfc

PPC_subfe = _ida_domain.PPC_subfe

PPC_subfic = _ida_domain.PPC_subfic

PPC_subfme = _ida_domain.PPC_subfme

PPC_subfze = _ida_domain.PPC_subfze

PPC_sync = _ida_domain.PPC_sync

PPC_td = _ida_domain.PPC_td

PPC_tdi = _ida_domain.PPC_tdi

PPC_tlbia = _ida_domain.PPC_tlbia

PPC_tlbie = _ida_domain.PPC_tlbie

PPC_tlbsync = _ida_domain.PPC_tlbsync

PPC_tw = _ida_domain.PPC_tw

PPC_twi = _ida_domain.PPC_twi

PPC_xor = _ida_domain.PPC_xor

PPC_xori = _ida_domain.PPC_xori

PPC_xoris = _ida_domain.PPC_xoris

PPC_last_basic = _ida_domain.PPC_last_basic

PPC_cmpwi = _ida_domain.PPC_cmpwi

PPC_cmpw = _ida_domain.PPC_cmpw

PPC_cmplwi = _ida_domain.PPC_cmplwi

PPC_cmplw = _ida_domain.PPC_cmplw

PPC_cmpdi = _ida_domain.PPC_cmpdi

PPC_cmpd = _ida_domain.PPC_cmpd

PPC_cmpldi = _ida_domain.PPC_cmpldi

PPC_cmpld = _ida_domain.PPC_cmpld

PPC_trap = _ida_domain.PPC_trap

PPC_trapd = _ida_domain.PPC_trapd

PPC_twlgt = _ida_domain.PPC_twlgt

PPC_twllt = _ida_domain.PPC_twllt

PPC_tweq = _ida_domain.PPC_tweq

PPC_twlge = _ida_domain.PPC_twlge

PPC_twlle = _ida_domain.PPC_twlle

PPC_twgt = _ida_domain.PPC_twgt

PPC_twge = _ida_domain.PPC_twge

PPC_twlt = _ida_domain.PPC_twlt

PPC_twle = _ida_domain.PPC_twle

PPC_twne = _ida_domain.PPC_twne

PPC_twlgti = _ida_domain.PPC_twlgti

PPC_twllti = _ida_domain.PPC_twllti

PPC_tweqi = _ida_domain.PPC_tweqi

PPC_twlgei = _ida_domain.PPC_twlgei

PPC_twllei = _ida_domain.PPC_twllei

PPC_twgti = _ida_domain.PPC_twgti

PPC_twgei = _ida_domain.PPC_twgei

PPC_twlti = _ida_domain.PPC_twlti

PPC_twlei = _ida_domain.PPC_twlei

PPC_twnei = _ida_domain.PPC_twnei

PPC_tdlgt = _ida_domain.PPC_tdlgt

PPC_tdllt = _ida_domain.PPC_tdllt

PPC_tdeq = _ida_domain.PPC_tdeq

PPC_tdlge = _ida_domain.PPC_tdlge

PPC_tdlle = _ida_domain.PPC_tdlle

PPC_tdgt = _ida_domain.PPC_tdgt

PPC_tdge = _ida_domain.PPC_tdge

PPC_tdlt = _ida_domain.PPC_tdlt

PPC_tdle = _ida_domain.PPC_tdle

PPC_tdne = _ida_domain.PPC_tdne

PPC_tdlgti = _ida_domain.PPC_tdlgti

PPC_tdllti = _ida_domain.PPC_tdllti

PPC_tdeqi = _ida_domain.PPC_tdeqi

PPC_tdlgei = _ida_domain.PPC_tdlgei

PPC_tdllei = _ida_domain.PPC_tdllei

PPC_tdgti = _ida_domain.PPC_tdgti

PPC_tdgei = _ida_domain.PPC_tdgei

PPC_tdlti = _ida_domain.PPC_tdlti

PPC_tdlei = _ida_domain.PPC_tdlei

PPC_tdnei = _ida_domain.PPC_tdnei

PPC_nop = _ida_domain.PPC_nop

PPC_not = _ida_domain.PPC_not

PPC_mr = _ida_domain.PPC_mr

PPC_subi = _ida_domain.PPC_subi

PPC_subic = _ida_domain.PPC_subic

PPC_subis = _ida_domain.PPC_subis

PPC_li = _ida_domain.PPC_li

PPC_lis = _ida_domain.PPC_lis

PPC_crset = _ida_domain.PPC_crset

PPC_crnot = _ida_domain.PPC_crnot

PPC_crmove = _ida_domain.PPC_crmove

PPC_crclr = _ida_domain.PPC_crclr

PPC_mtxer = _ida_domain.PPC_mtxer

PPC_mtlr = _ida_domain.PPC_mtlr

PPC_mtctr = _ida_domain.PPC_mtctr

PPC_mtdsisr = _ida_domain.PPC_mtdsisr

PPC_mtdar = _ida_domain.PPC_mtdar

PPC_mtdec = _ida_domain.PPC_mtdec

PPC_mtsrr0 = _ida_domain.PPC_mtsrr0

PPC_mtsrr1 = _ida_domain.PPC_mtsrr1

PPC_mtsprg0 = _ida_domain.PPC_mtsprg0

PPC_mtsprg1 = _ida_domain.PPC_mtsprg1

PPC_mtsprg2 = _ida_domain.PPC_mtsprg2

PPC_mtsprg3 = _ida_domain.PPC_mtsprg3

PPC_mttbl = _ida_domain.PPC_mttbl

PPC_mttbu = _ida_domain.PPC_mttbu

PPC_mfxer = _ida_domain.PPC_mfxer

PPC_mflr = _ida_domain.PPC_mflr

PPC_mfctr = _ida_domain.PPC_mfctr

PPC_mfdsisr = _ida_domain.PPC_mfdsisr

PPC_mfdar = _ida_domain.PPC_mfdar

PPC_mfdec = _ida_domain.PPC_mfdec

PPC_mfsrr0 = _ida_domain.PPC_mfsrr0

PPC_mfsrr1 = _ida_domain.PPC_mfsrr1

PPC_mfsprg0 = _ida_domain.PPC_mfsprg0

PPC_mfsprg1 = _ida_domain.PPC_mfsprg1

PPC_mfsprg2 = _ida_domain.PPC_mfsprg2

PPC_mfsprg3 = _ida_domain.PPC_mfsprg3

PPC_mftbl = _ida_domain.PPC_mftbl

PPC_mftbu = _ida_domain.PPC_mftbu

PPC_mfpvr = _ida_domain.PPC_mfpvr

PPC_balways = _ida_domain.PPC_balways

PPC_bt = _ida_domain.PPC_bt

PPC_bf = _ida_domain.PPC_bf

PPC_bdnz = _ida_domain.PPC_bdnz

PPC_bdnzt = _ida_domain.PPC_bdnzt

PPC_bdnzf = _ida_domain.PPC_bdnzf

PPC_bdz = _ida_domain.PPC_bdz

PPC_bdzt = _ida_domain.PPC_bdzt

PPC_bdzf = _ida_domain.PPC_bdzf

PPC_blt = _ida_domain.PPC_blt

PPC_ble = _ida_domain.PPC_ble

PPC_beq = _ida_domain.PPC_beq

PPC_bge = _ida_domain.PPC_bge

PPC_bgt = _ida_domain.PPC_bgt

PPC_bne = _ida_domain.PPC_bne

PPC_bso = _ida_domain.PPC_bso

PPC_bns = _ida_domain.PPC_bns

PPC_extlwi = _ida_domain.PPC_extlwi

PPC_extrwi = _ida_domain.PPC_extrwi

PPC_inslwi = _ida_domain.PPC_inslwi

PPC_insrwi = _ida_domain.PPC_insrwi

PPC_rotlwi = _ida_domain.PPC_rotlwi

PPC_rotrwi = _ida_domain.PPC_rotrwi

PPC_rotlw = _ida_domain.PPC_rotlw

PPC_slwi = _ida_domain.PPC_slwi

PPC_srwi = _ida_domain.PPC_srwi

PPC_clrlwi = _ida_domain.PPC_clrlwi

PPC_clrrwi = _ida_domain.PPC_clrrwi

PPC_clrlslwi = _ida_domain.PPC_clrlslwi

PPC_dccci = _ida_domain.PPC_dccci

PPC_dcread = _ida_domain.PPC_dcread

PPC_icbt = _ida_domain.PPC_icbt

PPC_iccci = _ida_domain.PPC_iccci

PPC_icread = _ida_domain.PPC_icread

PPC_mfdcr = _ida_domain.PPC_mfdcr

PPC_mtdcr = _ida_domain.PPC_mtdcr

PPC_rfci = _ida_domain.PPC_rfci

PPC_tlbre = _ida_domain.PPC_tlbre

PPC_tlbsx = _ida_domain.PPC_tlbsx

PPC_tlbwe = _ida_domain.PPC_tlbwe

PPC_wrtee = _ida_domain.PPC_wrtee

PPC_wrteei = _ida_domain.PPC_wrteei

PPC_abs = _ida_domain.PPC_abs

PPC_clcs = _ida_domain.PPC_clcs

PPC_clf = _ida_domain.PPC_clf

PPC_cli = _ida_domain.PPC_cli

PPC_dclst = _ida_domain.PPC_dclst

PPC_div = _ida_domain.PPC_div

PPC_divs = _ida_domain.PPC_divs

PPC_doz = _ida_domain.PPC_doz

PPC_dozi = _ida_domain.PPC_dozi

PPC_frsqrtes = _ida_domain.PPC_frsqrtes

PPC_hrfid = _ida_domain.PPC_hrfid

PPC_lscbx = _ida_domain.PPC_lscbx

PPC_maskg = _ida_domain.PPC_maskg

PPC_maskir = _ida_domain.PPC_maskir

PPC_mfsri = _ida_domain.PPC_mfsri

PPC_mul = _ida_domain.PPC_mul

PPC_nabs = _ida_domain.PPC_nabs

PPC_popcntb = _ida_domain.PPC_popcntb

PPC_rac = _ida_domain.PPC_rac

PPC_rfsvc = _ida_domain.PPC_rfsvc

PPC_rlmi = _ida_domain.PPC_rlmi

PPC_rrib = _ida_domain.PPC_rrib

PPC_slbmfee = _ida_domain.PPC_slbmfee

PPC_slbmfev = _ida_domain.PPC_slbmfev

PPC_slbmte = _ida_domain.PPC_slbmte

PPC_sle = _ida_domain.PPC_sle

PPC_sleq = _ida_domain.PPC_sleq

PPC_sliq = _ida_domain.PPC_sliq

PPC_slliq = _ida_domain.PPC_slliq

PPC_sllq = _ida_domain.PPC_sllq

PPC_slq = _ida_domain.PPC_slq

PPC_sraiq = _ida_domain.PPC_sraiq

PPC_sraq = _ida_domain.PPC_sraq

PPC_sre = _ida_domain.PPC_sre

PPC_srea = _ida_domain.PPC_srea

PPC_sreq = _ida_domain.PPC_sreq

PPC_sriq = _ida_domain.PPC_sriq

PPC_srliq = _ida_domain.PPC_srliq

PPC_srlq = _ida_domain.PPC_srlq

PPC_srq = _ida_domain.PPC_srq

PPC_mtocrf = _ida_domain.PPC_mtocrf

PPC_mfocrf = _ida_domain.PPC_mfocrf

PPC_isel = _ida_domain.PPC_isel

PPC_isellt = _ida_domain.PPC_isellt

PPC_iselgt = _ida_domain.PPC_iselgt

PPC_iseleq = _ida_domain.PPC_iseleq

PPC_dcblc = _ida_domain.PPC_dcblc

PPC_dcbtls = _ida_domain.PPC_dcbtls

PPC_dcbtstls = _ida_domain.PPC_dcbtstls

PPC_icblc = _ida_domain.PPC_icblc

PPC_icbtls = _ida_domain.PPC_icbtls

PPC_tlbivax = _ida_domain.PPC_tlbivax

PPC_rfdi = _ida_domain.PPC_rfdi

PPC_tlbld = _ida_domain.PPC_tlbld

PPC_tlbli = _ida_domain.PPC_tlbli

PPC_brinc = _ida_domain.PPC_brinc

PPC_evabs = _ida_domain.PPC_evabs

PPC_evaddiw = _ida_domain.PPC_evaddiw

PPC_evaddsmiaaw = _ida_domain.PPC_evaddsmiaaw

PPC_evaddssiaaw = _ida_domain.PPC_evaddssiaaw

PPC_evaddumiaaw = _ida_domain.PPC_evaddumiaaw

PPC_evaddusiaaw = _ida_domain.PPC_evaddusiaaw

PPC_evaddw = _ida_domain.PPC_evaddw

PPC_evand = _ida_domain.PPC_evand

PPC_evandc = _ida_domain.PPC_evandc

PPC_evcmpeq = _ida_domain.PPC_evcmpeq

PPC_evcmpgts = _ida_domain.PPC_evcmpgts

PPC_evcmpgtu = _ida_domain.PPC_evcmpgtu

PPC_evcmplts = _ida_domain.PPC_evcmplts

PPC_evcmpltu = _ida_domain.PPC_evcmpltu

PPC_evcntlsw = _ida_domain.PPC_evcntlsw

PPC_evcntlzw = _ida_domain.PPC_evcntlzw

PPC_evdivws = _ida_domain.PPC_evdivws

PPC_evdivwu = _ida_domain.PPC_evdivwu

PPC_eveqv = _ida_domain.PPC_eveqv

PPC_evextsb = _ida_domain.PPC_evextsb

PPC_evextsh = _ida_domain.PPC_evextsh

PPC_evldd = _ida_domain.PPC_evldd

PPC_evlddx = _ida_domain.PPC_evlddx

PPC_evldh = _ida_domain.PPC_evldh

PPC_evldhx = _ida_domain.PPC_evldhx

PPC_evldw = _ida_domain.PPC_evldw

PPC_evldwx = _ida_domain.PPC_evldwx

PPC_evlhhesplat = _ida_domain.PPC_evlhhesplat

PPC_evlhhesplatx = _ida_domain.PPC_evlhhesplatx

PPC_evlhhossplat = _ida_domain.PPC_evlhhossplat

PPC_evlhhossplatx = _ida_domain.PPC_evlhhossplatx

PPC_evlhhousplat = _ida_domain.PPC_evlhhousplat

PPC_evlhhousplatx = _ida_domain.PPC_evlhhousplatx

PPC_evlwhe = _ida_domain.PPC_evlwhe

PPC_evlwhex = _ida_domain.PPC_evlwhex

PPC_evlwhos = _ida_domain.PPC_evlwhos

PPC_evlwhosx = _ida_domain.PPC_evlwhosx

PPC_evlwhou = _ida_domain.PPC_evlwhou

PPC_evlwhoux = _ida_domain.PPC_evlwhoux

PPC_evlwhsplat = _ida_domain.PPC_evlwhsplat

PPC_evlwhsplatx = _ida_domain.PPC_evlwhsplatx

PPC_evlwwsplat = _ida_domain.PPC_evlwwsplat

PPC_evlwwsplatx = _ida_domain.PPC_evlwwsplatx

PPC_evmergehi = _ida_domain.PPC_evmergehi

PPC_evmergehilo = _ida_domain.PPC_evmergehilo

PPC_evmergelo = _ida_domain.PPC_evmergelo

PPC_evmergelohi = _ida_domain.PPC_evmergelohi

PPC_evmhegsmfaa = _ida_domain.PPC_evmhegsmfaa

PPC_evmhegsmfan = _ida_domain.PPC_evmhegsmfan

PPC_evmhegsmiaa = _ida_domain.PPC_evmhegsmiaa

PPC_evmhegsmian = _ida_domain.PPC_evmhegsmian

PPC_evmhegumiaa = _ida_domain.PPC_evmhegumiaa

PPC_evmhegumian = _ida_domain.PPC_evmhegumian

PPC_evmhesmf = _ida_domain.PPC_evmhesmf

PPC_evmhesmfa = _ida_domain.PPC_evmhesmfa

PPC_evmhesmfaaw = _ida_domain.PPC_evmhesmfaaw

PPC_evmhesmfanw = _ida_domain.PPC_evmhesmfanw

PPC_evmhesmi = _ida_domain.PPC_evmhesmi

PPC_evmhesmia = _ida_domain.PPC_evmhesmia

PPC_evmhesmiaaw = _ida_domain.PPC_evmhesmiaaw

PPC_evmhesmianw = _ida_domain.PPC_evmhesmianw

PPC_evmhessf = _ida_domain.PPC_evmhessf

PPC_evmhessfa = _ida_domain.PPC_evmhessfa

PPC_evmhessfaaw = _ida_domain.PPC_evmhessfaaw

PPC_evmhessfanw = _ida_domain.PPC_evmhessfanw

PPC_evmhessiaaw = _ida_domain.PPC_evmhessiaaw

PPC_evmhessianw = _ida_domain.PPC_evmhessianw

PPC_evmheumi = _ida_domain.PPC_evmheumi

PPC_evmheumia = _ida_domain.PPC_evmheumia

PPC_evmheumiaaw = _ida_domain.PPC_evmheumiaaw

PPC_evmheumianw = _ida_domain.PPC_evmheumianw

PPC_evmheusiaaw = _ida_domain.PPC_evmheusiaaw

PPC_evmheusianw = _ida_domain.PPC_evmheusianw

PPC_evmhogsmfaa = _ida_domain.PPC_evmhogsmfaa

PPC_evmhogsmfan = _ida_domain.PPC_evmhogsmfan

PPC_evmhogsmiaa = _ida_domain.PPC_evmhogsmiaa

PPC_evmhogsmian = _ida_domain.PPC_evmhogsmian

PPC_evmhogumiaa = _ida_domain.PPC_evmhogumiaa

PPC_evmhogumian = _ida_domain.PPC_evmhogumian

PPC_evmhosmf = _ida_domain.PPC_evmhosmf

PPC_evmhosmfa = _ida_domain.PPC_evmhosmfa

PPC_evmhosmfaaw = _ida_domain.PPC_evmhosmfaaw

PPC_evmhosmfanw = _ida_domain.PPC_evmhosmfanw

PPC_evmhosmi = _ida_domain.PPC_evmhosmi

PPC_evmhosmia = _ida_domain.PPC_evmhosmia

PPC_evmhosmiaaw = _ida_domain.PPC_evmhosmiaaw

PPC_evmhosmianw = _ida_domain.PPC_evmhosmianw

PPC_evmhossf = _ida_domain.PPC_evmhossf

PPC_evmhossfa = _ida_domain.PPC_evmhossfa

PPC_evmhossfaaw = _ida_domain.PPC_evmhossfaaw

PPC_evmhossfanw = _ida_domain.PPC_evmhossfanw

PPC_evmhossiaaw = _ida_domain.PPC_evmhossiaaw

PPC_evmhossianw = _ida_domain.PPC_evmhossianw

PPC_evmhoumi = _ida_domain.PPC_evmhoumi

PPC_evmhoumia = _ida_domain.PPC_evmhoumia

PPC_evmhoumiaaw = _ida_domain.PPC_evmhoumiaaw

PPC_evmhoumianw = _ida_domain.PPC_evmhoumianw

PPC_evmhousiaaw = _ida_domain.PPC_evmhousiaaw

PPC_evmhousianw = _ida_domain.PPC_evmhousianw

PPC_evmra = _ida_domain.PPC_evmra

PPC_evmwhsmf = _ida_domain.PPC_evmwhsmf

PPC_evmwhsmfa = _ida_domain.PPC_evmwhsmfa

PPC_evmwhsmi = _ida_domain.PPC_evmwhsmi

PPC_evmwhsmia = _ida_domain.PPC_evmwhsmia

PPC_evmwhssf = _ida_domain.PPC_evmwhssf

PPC_evmwhssfa = _ida_domain.PPC_evmwhssfa

PPC_evmwhumi = _ida_domain.PPC_evmwhumi

PPC_evmwhumia = _ida_domain.PPC_evmwhumia

PPC_evmwlsmiaaw = _ida_domain.PPC_evmwlsmiaaw

PPC_evmwlsmianw = _ida_domain.PPC_evmwlsmianw

PPC_evmwlssiaaw = _ida_domain.PPC_evmwlssiaaw

PPC_evmwlssianw = _ida_domain.PPC_evmwlssianw

PPC_evmwlumi = _ida_domain.PPC_evmwlumi

PPC_evmwlumia = _ida_domain.PPC_evmwlumia

PPC_evmwlumiaaw = _ida_domain.PPC_evmwlumiaaw

PPC_evmwlumianw = _ida_domain.PPC_evmwlumianw

PPC_evmwlusiaaw = _ida_domain.PPC_evmwlusiaaw

PPC_evmwlusianw = _ida_domain.PPC_evmwlusianw

PPC_evmwsmf = _ida_domain.PPC_evmwsmf

PPC_evmwsmfa = _ida_domain.PPC_evmwsmfa

PPC_evmwsmfaa = _ida_domain.PPC_evmwsmfaa

PPC_evmwsmfan = _ida_domain.PPC_evmwsmfan

PPC_evmwsmi = _ida_domain.PPC_evmwsmi

PPC_evmwsmia = _ida_domain.PPC_evmwsmia

PPC_evmwsmiaa = _ida_domain.PPC_evmwsmiaa

PPC_evmwsmian = _ida_domain.PPC_evmwsmian

PPC_evmwssf = _ida_domain.PPC_evmwssf

PPC_evmwssfa = _ida_domain.PPC_evmwssfa

PPC_evmwssfaa = _ida_domain.PPC_evmwssfaa

PPC_evmwssfan = _ida_domain.PPC_evmwssfan

PPC_evmwumi = _ida_domain.PPC_evmwumi

PPC_evmwumia = _ida_domain.PPC_evmwumia

PPC_evmwumiaa = _ida_domain.PPC_evmwumiaa

PPC_evmwumian = _ida_domain.PPC_evmwumian

PPC_evnand = _ida_domain.PPC_evnand

PPC_evneg = _ida_domain.PPC_evneg

PPC_evnor = _ida_domain.PPC_evnor

PPC_evor = _ida_domain.PPC_evor

PPC_evorc = _ida_domain.PPC_evorc

PPC_evrlw = _ida_domain.PPC_evrlw

PPC_evrlwi = _ida_domain.PPC_evrlwi

PPC_evrndw = _ida_domain.PPC_evrndw

PPC_evsel = _ida_domain.PPC_evsel

PPC_evslw = _ida_domain.PPC_evslw

PPC_evslwi = _ida_domain.PPC_evslwi

PPC_evsplatfi = _ida_domain.PPC_evsplatfi

PPC_evsplati = _ida_domain.PPC_evsplati

PPC_evsrwis = _ida_domain.PPC_evsrwis

PPC_evsrwiu = _ida_domain.PPC_evsrwiu

PPC_evsrws = _ida_domain.PPC_evsrws

PPC_evsrwu = _ida_domain.PPC_evsrwu

PPC_evstdd = _ida_domain.PPC_evstdd

PPC_evstddx = _ida_domain.PPC_evstddx

PPC_evstdh = _ida_domain.PPC_evstdh

PPC_evstdhx = _ida_domain.PPC_evstdhx

PPC_evstdw = _ida_domain.PPC_evstdw

PPC_evstdwx = _ida_domain.PPC_evstdwx

PPC_evstwhe = _ida_domain.PPC_evstwhe

PPC_evstwhex = _ida_domain.PPC_evstwhex

PPC_evstwho = _ida_domain.PPC_evstwho

PPC_evstwhox = _ida_domain.PPC_evstwhox

PPC_evstwwe = _ida_domain.PPC_evstwwe

PPC_evstwwex = _ida_domain.PPC_evstwwex

PPC_evstwwo = _ida_domain.PPC_evstwwo

PPC_evstwwox = _ida_domain.PPC_evstwwox

PPC_evsubfsmiaaw = _ida_domain.PPC_evsubfsmiaaw

PPC_evsubfssiaaw = _ida_domain.PPC_evsubfssiaaw

PPC_evsubfumiaaw = _ida_domain.PPC_evsubfumiaaw

PPC_evsubfusiaaw = _ida_domain.PPC_evsubfusiaaw

PPC_evsubfw = _ida_domain.PPC_evsubfw

PPC_evsubifw = _ida_domain.PPC_evsubifw

PPC_evxor = _ida_domain.PPC_evxor

PPC_efdabs = _ida_domain.PPC_efdabs

PPC_efdadd = _ida_domain.PPC_efdadd

PPC_efdcfs = _ida_domain.PPC_efdcfs

PPC_efdcfsf = _ida_domain.PPC_efdcfsf

PPC_efdcfsi = _ida_domain.PPC_efdcfsi

PPC_efdcfsid = _ida_domain.PPC_efdcfsid

PPC_efdcfuf = _ida_domain.PPC_efdcfuf

PPC_efdcfui = _ida_domain.PPC_efdcfui

PPC_efdcfuid = _ida_domain.PPC_efdcfuid

PPC_efdcmpeq = _ida_domain.PPC_efdcmpeq

PPC_efdcmpgt = _ida_domain.PPC_efdcmpgt

PPC_efdcmplt = _ida_domain.PPC_efdcmplt

PPC_efdctsf = _ida_domain.PPC_efdctsf

PPC_efdctsi = _ida_domain.PPC_efdctsi

PPC_efdctsidz = _ida_domain.PPC_efdctsidz

PPC_efdctsiz = _ida_domain.PPC_efdctsiz

PPC_efdctuf = _ida_domain.PPC_efdctuf

PPC_efdctui = _ida_domain.PPC_efdctui

PPC_efdctuidz = _ida_domain.PPC_efdctuidz

PPC_efdctuiz = _ida_domain.PPC_efdctuiz

PPC_efddiv = _ida_domain.PPC_efddiv

PPC_efdmul = _ida_domain.PPC_efdmul

PPC_efdnabs = _ida_domain.PPC_efdnabs

PPC_efdneg = _ida_domain.PPC_efdneg

PPC_efdsub = _ida_domain.PPC_efdsub

PPC_efdtsteq = _ida_domain.PPC_efdtsteq

PPC_efdtstgt = _ida_domain.PPC_efdtstgt

PPC_efdtstlt = _ida_domain.PPC_efdtstlt

PPC_efscfd = _ida_domain.PPC_efscfd

PPC_efsabs = _ida_domain.PPC_efsabs

PPC_efsadd = _ida_domain.PPC_efsadd

PPC_efscfsf = _ida_domain.PPC_efscfsf

PPC_efscfsi = _ida_domain.PPC_efscfsi

PPC_efscfuf = _ida_domain.PPC_efscfuf

PPC_efscfui = _ida_domain.PPC_efscfui

PPC_efscmpeq = _ida_domain.PPC_efscmpeq

PPC_efscmpgt = _ida_domain.PPC_efscmpgt

PPC_efscmplt = _ida_domain.PPC_efscmplt

PPC_efsctsf = _ida_domain.PPC_efsctsf

PPC_efsctsi = _ida_domain.PPC_efsctsi

PPC_efsctsiz = _ida_domain.PPC_efsctsiz

PPC_efsctuf = _ida_domain.PPC_efsctuf

PPC_efsctui = _ida_domain.PPC_efsctui

PPC_efsctuiz = _ida_domain.PPC_efsctuiz

PPC_efsdiv = _ida_domain.PPC_efsdiv

PPC_efsmul = _ida_domain.PPC_efsmul

PPC_efsnabs = _ida_domain.PPC_efsnabs

PPC_efsneg = _ida_domain.PPC_efsneg

PPC_efssub = _ida_domain.PPC_efssub

PPC_efststeq = _ida_domain.PPC_efststeq

PPC_efststgt = _ida_domain.PPC_efststgt

PPC_efststlt = _ida_domain.PPC_efststlt

PPC_evfsabs = _ida_domain.PPC_evfsabs

PPC_evfsadd = _ida_domain.PPC_evfsadd

PPC_evfscfsf = _ida_domain.PPC_evfscfsf

PPC_evfscfsi = _ida_domain.PPC_evfscfsi

PPC_evfscfuf = _ida_domain.PPC_evfscfuf

PPC_evfscfui = _ida_domain.PPC_evfscfui

PPC_evfscmpeq = _ida_domain.PPC_evfscmpeq

PPC_evfscmpgt = _ida_domain.PPC_evfscmpgt

PPC_evfscmplt = _ida_domain.PPC_evfscmplt

PPC_evfsctsf = _ida_domain.PPC_evfsctsf

PPC_evfsctsi = _ida_domain.PPC_evfsctsi

PPC_evfsctsiz = _ida_domain.PPC_evfsctsiz

PPC_evfsctuf = _ida_domain.PPC_evfsctuf

PPC_evfsctui = _ida_domain.PPC_evfsctui

PPC_evfsctuiz = _ida_domain.PPC_evfsctuiz

PPC_evfsdiv = _ida_domain.PPC_evfsdiv

PPC_evfsmul = _ida_domain.PPC_evfsmul

PPC_evfsnabs = _ida_domain.PPC_evfsnabs

PPC_evfsneg = _ida_domain.PPC_evfsneg

PPC_evfssub = _ida_domain.PPC_evfssub

PPC_evfststeq = _ida_domain.PPC_evfststeq

PPC_evfststgt = _ida_domain.PPC_evfststgt

PPC_evfststlt = _ida_domain.PPC_evfststlt

PPC_bpermd = _ida_domain.PPC_bpermd

PPC_divde = _ida_domain.PPC_divde

PPC_divdeu = _ida_domain.PPC_divdeu

PPC_ldbrx = _ida_domain.PPC_ldbrx

PPC_prtyd = _ida_domain.PPC_prtyd

PPC_stdbrx = _ida_domain.PPC_stdbrx

PPC_cmpb = _ida_domain.PPC_cmpb

PPC_divwe = _ida_domain.PPC_divwe

PPC_divweu = _ida_domain.PPC_divweu

PPC_lbarx = _ida_domain.PPC_lbarx

PPC_lharx = _ida_domain.PPC_lharx

PPC_popcntd = _ida_domain.PPC_popcntd

PPC_popcntw = _ida_domain.PPC_popcntw

PPC_prtyw = _ida_domain.PPC_prtyw

PPC_stbcx = _ida_domain.PPC_stbcx

PPC_sthcx = _ida_domain.PPC_sthcx

PPC_addg6s = _ida_domain.PPC_addg6s

PPC_cbcdtd = _ida_domain.PPC_cbcdtd

PPC_cdtbcd = _ida_domain.PPC_cdtbcd

PPC_dadd = _ida_domain.PPC_dadd

PPC_daddq = _ida_domain.PPC_daddq

PPC_dcffix = _ida_domain.PPC_dcffix

PPC_dcffixq = _ida_domain.PPC_dcffixq

PPC_dcmpo = _ida_domain.PPC_dcmpo

PPC_dcmpoq = _ida_domain.PPC_dcmpoq

PPC_dcmpu = _ida_domain.PPC_dcmpu

PPC_dcmpuq = _ida_domain.PPC_dcmpuq

PPC_dctdp = _ida_domain.PPC_dctdp

PPC_dctfix = _ida_domain.PPC_dctfix

PPC_dctfixq = _ida_domain.PPC_dctfixq

PPC_dctqpq = _ida_domain.PPC_dctqpq

PPC_ddedpd = _ida_domain.PPC_ddedpd

PPC_ddedpdq = _ida_domain.PPC_ddedpdq

PPC_ddiv = _ida_domain.PPC_ddiv

PPC_ddivq = _ida_domain.PPC_ddivq

PPC_denbcd = _ida_domain.PPC_denbcd

PPC_denbcdq = _ida_domain.PPC_denbcdq

PPC_diex = _ida_domain.PPC_diex

PPC_diexq = _ida_domain.PPC_diexq

PPC_dmul = _ida_domain.PPC_dmul

PPC_dmulq = _ida_domain.PPC_dmulq

PPC_dqua = _ida_domain.PPC_dqua

PPC_dquai = _ida_domain.PPC_dquai

PPC_dquaiq = _ida_domain.PPC_dquaiq

PPC_dquaq = _ida_domain.PPC_dquaq

PPC_drdpq = _ida_domain.PPC_drdpq

PPC_drintn = _ida_domain.PPC_drintn

PPC_drintnq = _ida_domain.PPC_drintnq

PPC_drintx = _ida_domain.PPC_drintx

PPC_drintxq = _ida_domain.PPC_drintxq

PPC_drrnd = _ida_domain.PPC_drrnd

PPC_drrndq = _ida_domain.PPC_drrndq

PPC_drsp = _ida_domain.PPC_drsp

PPC_dscli = _ida_domain.PPC_dscli

PPC_dscliq = _ida_domain.PPC_dscliq

PPC_dscri = _ida_domain.PPC_dscri

PPC_dscriq = _ida_domain.PPC_dscriq

PPC_dsub = _ida_domain.PPC_dsub

PPC_dsubq = _ida_domain.PPC_dsubq

PPC_dtstdc = _ida_domain.PPC_dtstdc

PPC_dtstdcq = _ida_domain.PPC_dtstdcq

PPC_dtstdg = _ida_domain.PPC_dtstdg

PPC_dtstdgq = _ida_domain.PPC_dtstdgq

PPC_dtstex = _ida_domain.PPC_dtstex

PPC_dtstexq = _ida_domain.PPC_dtstexq

PPC_dtstsf = _ida_domain.PPC_dtstsf

PPC_dtstsfq = _ida_domain.PPC_dtstsfq

PPC_dxex = _ida_domain.PPC_dxex

PPC_dxexq = _ida_domain.PPC_dxexq

PPC_dsn = _ida_domain.PPC_dsn

PPC_lbdx = _ida_domain.PPC_lbdx

PPC_lddx = _ida_domain.PPC_lddx

PPC_lfddx = _ida_domain.PPC_lfddx

PPC_lhdx = _ida_domain.PPC_lhdx

PPC_lwdx = _ida_domain.PPC_lwdx

PPC_stbdx = _ida_domain.PPC_stbdx

PPC_stddx = _ida_domain.PPC_stddx

PPC_stfddx = _ida_domain.PPC_stfddx

PPC_sthdx = _ida_domain.PPC_sthdx

PPC_stwdx = _ida_domain.PPC_stwdx

PPC_mbar = _ida_domain.PPC_mbar

PPC_rfmci = _ida_domain.PPC_rfmci

PPC_tlbilx = _ida_domain.PPC_tlbilx

PPC_dci = _ida_domain.PPC_dci

PPC_ici = _ida_domain.PPC_ici

PPC_mfdcrux = _ida_domain.PPC_mfdcrux

PPC_mfdcrx = _ida_domain.PPC_mfdcrx

PPC_mtdcrux = _ida_domain.PPC_mtdcrux

PPC_mtdcrx = _ida_domain.PPC_mtdcrx

PPC_dnh = _ida_domain.PPC_dnh

PPC_ehpriv = _ida_domain.PPC_ehpriv

PPC_rfgi = _ida_domain.PPC_rfgi

PPC_msgclr = _ida_domain.PPC_msgclr

PPC_msgsnd = _ida_domain.PPC_msgsnd

PPC_dcbfep = _ida_domain.PPC_dcbfep

PPC_dcbstep = _ida_domain.PPC_dcbstep

PPC_dcbtep = _ida_domain.PPC_dcbtep

PPC_dcbtstep = _ida_domain.PPC_dcbtstep

PPC_dcbzep = _ida_domain.PPC_dcbzep

PPC_evlddepx = _ida_domain.PPC_evlddepx

PPC_evstddepx = _ida_domain.PPC_evstddepx

PPC_icbiep = _ida_domain.PPC_icbiep

PPC_lbepx = _ida_domain.PPC_lbepx

PPC_lfdepx = _ida_domain.PPC_lfdepx

PPC_lhepx = _ida_domain.PPC_lhepx

PPC_lvepx = _ida_domain.PPC_lvepx

PPC_lvepxl = _ida_domain.PPC_lvepxl

PPC_lwepx = _ida_domain.PPC_lwepx

PPC_stbepx = _ida_domain.PPC_stbepx

PPC_stfdepx = _ida_domain.PPC_stfdepx

PPC_sthepx = _ida_domain.PPC_sthepx

PPC_stvepx = _ida_domain.PPC_stvepx

PPC_stvepxl = _ida_domain.PPC_stvepxl

PPC_stwepx = _ida_domain.PPC_stwepx

PPC_ldepx = _ida_domain.PPC_ldepx

PPC_stdepx = _ida_domain.PPC_stdepx

PPC_mfpmr = _ida_domain.PPC_mfpmr

PPC_mtpmr = _ida_domain.PPC_mtpmr

PPC_mftmr = _ida_domain.PPC_mftmr

PPC_mttmr = _ida_domain.PPC_mttmr

PPC_tlbsrx = _ida_domain.PPC_tlbsrx

PPC_fcfids = _ida_domain.PPC_fcfids

PPC_fcfidu = _ida_domain.PPC_fcfidu

PPC_fcfidus = _ida_domain.PPC_fcfidus

PPC_fctidu = _ida_domain.PPC_fctidu

PPC_fctiduz = _ida_domain.PPC_fctiduz

PPC_fctiwu = _ida_domain.PPC_fctiwu

PPC_fctiwuz = _ida_domain.PPC_fctiwuz

PPC_ftdiv = _ida_domain.PPC_ftdiv

PPC_ftsqrt = _ida_domain.PPC_ftsqrt

PPC_lfiwax = _ida_domain.PPC_lfiwax

PPC_lfiwzx = _ida_domain.PPC_lfiwzx

PPC_lfdp = _ida_domain.PPC_lfdp

PPC_lfdpx = _ida_domain.PPC_lfdpx

PPC_stfdp = _ida_domain.PPC_stfdp

PPC_stfdpx = _ida_domain.PPC_stfdpx

PPC_fcpsgn = _ida_domain.PPC_fcpsgn

PPC_fre = _ida_domain.PPC_fre

PPC_frim = _ida_domain.PPC_frim

PPC_frin = _ida_domain.PPC_frin

PPC_frip = _ida_domain.PPC_frip

PPC_friz = _ida_domain.PPC_friz

PPC_macchw = _ida_domain.PPC_macchw

PPC_macchws = _ida_domain.PPC_macchws

PPC_macchwsu = _ida_domain.PPC_macchwsu

PPC_macchwu = _ida_domain.PPC_macchwu

PPC_machhw = _ida_domain.PPC_machhw

PPC_machhws = _ida_domain.PPC_machhws

PPC_machhwsu = _ida_domain.PPC_machhwsu

PPC_machhwu = _ida_domain.PPC_machhwu

PPC_maclhw = _ida_domain.PPC_maclhw

PPC_maclhws = _ida_domain.PPC_maclhws

PPC_maclhwsu = _ida_domain.PPC_maclhwsu

PPC_maclhwu = _ida_domain.PPC_maclhwu

PPC_mulchw = _ida_domain.PPC_mulchw

PPC_mulchwu = _ida_domain.PPC_mulchwu

PPC_mulhhw = _ida_domain.PPC_mulhhw

PPC_mulhhwu = _ida_domain.PPC_mulhhwu

PPC_mullhw = _ida_domain.PPC_mullhw

PPC_mullhwu = _ida_domain.PPC_mullhwu

PPC_nmacchw = _ida_domain.PPC_nmacchw

PPC_nmacchws = _ida_domain.PPC_nmacchws

PPC_nmachhw = _ida_domain.PPC_nmachhw

PPC_nmachhws = _ida_domain.PPC_nmachhws

PPC_nmaclhw = _ida_domain.PPC_nmaclhw

PPC_nmaclhws = _ida_domain.PPC_nmaclhws

PPC_dlmzb = _ida_domain.PPC_dlmzb

PPC_lq = _ida_domain.PPC_lq

PPC_stq = _ida_domain.PPC_stq

PPC_doze = _ida_domain.PPC_doze

PPC_lbzcix = _ida_domain.PPC_lbzcix

PPC_ldcix = _ida_domain.PPC_ldcix

PPC_lhzcix = _ida_domain.PPC_lhzcix

PPC_lwzcix = _ida_domain.PPC_lwzcix

PPC_nap = _ida_domain.PPC_nap

PPC_rvwinkle = _ida_domain.PPC_rvwinkle

PPC_slbfee = _ida_domain.PPC_slbfee

PPC_sleep = _ida_domain.PPC_sleep

PPC_stbcix = _ida_domain.PPC_stbcix

PPC_stdcix = _ida_domain.PPC_stdcix

PPC_sthcix = _ida_domain.PPC_sthcix

PPC_stwcix = _ida_domain.PPC_stwcix

PPC_tlbiel = _ida_domain.PPC_tlbiel

PPC_lvebx = _ida_domain.PPC_lvebx

PPC_lvehx = _ida_domain.PPC_lvehx

PPC_lvewx = _ida_domain.PPC_lvewx

PPC_lvsl = _ida_domain.PPC_lvsl

PPC_lvsr = _ida_domain.PPC_lvsr

PPC_lvx = _ida_domain.PPC_lvx

PPC_lvxl = _ida_domain.PPC_lvxl

PPC_mfvscr = _ida_domain.PPC_mfvscr

PPC_mtvscr = _ida_domain.PPC_mtvscr

PPC_stvebx = _ida_domain.PPC_stvebx

PPC_stvehx = _ida_domain.PPC_stvehx

PPC_stvewx = _ida_domain.PPC_stvewx

PPC_stvx = _ida_domain.PPC_stvx

PPC_stvxl = _ida_domain.PPC_stvxl

PPC_vaddcuw = _ida_domain.PPC_vaddcuw

PPC_vaddfp = _ida_domain.PPC_vaddfp

PPC_vaddsbs = _ida_domain.PPC_vaddsbs

PPC_vaddshs = _ida_domain.PPC_vaddshs

PPC_vaddsws = _ida_domain.PPC_vaddsws

PPC_vaddubm = _ida_domain.PPC_vaddubm

PPC_vaddubs = _ida_domain.PPC_vaddubs

PPC_vadduhm = _ida_domain.PPC_vadduhm

PPC_vadduhs = _ida_domain.PPC_vadduhs

PPC_vadduwm = _ida_domain.PPC_vadduwm

PPC_vadduws = _ida_domain.PPC_vadduws

PPC_vand = _ida_domain.PPC_vand

PPC_vandc = _ida_domain.PPC_vandc

PPC_vavgsb = _ida_domain.PPC_vavgsb

PPC_vavgsh = _ida_domain.PPC_vavgsh

PPC_vavgsw = _ida_domain.PPC_vavgsw

PPC_vavgub = _ida_domain.PPC_vavgub

PPC_vavguh = _ida_domain.PPC_vavguh

PPC_vavguw = _ida_domain.PPC_vavguw

PPC_vcfsx = _ida_domain.PPC_vcfsx

PPC_vcfux = _ida_domain.PPC_vcfux

PPC_vcmpbfp = _ida_domain.PPC_vcmpbfp

PPC_vcmpeqfp = _ida_domain.PPC_vcmpeqfp

PPC_vcmpequb = _ida_domain.PPC_vcmpequb

PPC_vcmpequh = _ida_domain.PPC_vcmpequh

PPC_vcmpequw = _ida_domain.PPC_vcmpequw

PPC_vcmpgefp = _ida_domain.PPC_vcmpgefp

PPC_vcmpgtfp = _ida_domain.PPC_vcmpgtfp

PPC_vcmpgtsb = _ida_domain.PPC_vcmpgtsb

PPC_vcmpgtsh = _ida_domain.PPC_vcmpgtsh

PPC_vcmpgtsw = _ida_domain.PPC_vcmpgtsw

PPC_vcmpgtub = _ida_domain.PPC_vcmpgtub

PPC_vcmpgtuh = _ida_domain.PPC_vcmpgtuh

PPC_vcmpgtuw = _ida_domain.PPC_vcmpgtuw

PPC_vctsxs = _ida_domain.PPC_vctsxs

PPC_vctuxs = _ida_domain.PPC_vctuxs

PPC_vexptefp = _ida_domain.PPC_vexptefp

PPC_vlogefp = _ida_domain.PPC_vlogefp

PPC_vmaddfp = _ida_domain.PPC_vmaddfp

PPC_vmaxfp = _ida_domain.PPC_vmaxfp

PPC_vmaxsb = _ida_domain.PPC_vmaxsb

PPC_vmaxsh = _ida_domain.PPC_vmaxsh

PPC_vmaxsw = _ida_domain.PPC_vmaxsw

PPC_vmaxub = _ida_domain.PPC_vmaxub

PPC_vmaxuh = _ida_domain.PPC_vmaxuh

PPC_vmaxuw = _ida_domain.PPC_vmaxuw

PPC_vmhaddshs = _ida_domain.PPC_vmhaddshs

PPC_vmhraddshs = _ida_domain.PPC_vmhraddshs

PPC_vminfp = _ida_domain.PPC_vminfp

PPC_vminsb = _ida_domain.PPC_vminsb

PPC_vminsh = _ida_domain.PPC_vminsh

PPC_vminsw = _ida_domain.PPC_vminsw

PPC_vminub = _ida_domain.PPC_vminub

PPC_vminuh = _ida_domain.PPC_vminuh

PPC_vminuw = _ida_domain.PPC_vminuw

PPC_vmladduhm = _ida_domain.PPC_vmladduhm

PPC_vmrghb = _ida_domain.PPC_vmrghb

PPC_vmrghh = _ida_domain.PPC_vmrghh

PPC_vmrghw = _ida_domain.PPC_vmrghw

PPC_vmrglb = _ida_domain.PPC_vmrglb

PPC_vmrglh = _ida_domain.PPC_vmrglh

PPC_vmrglw = _ida_domain.PPC_vmrglw

PPC_vmsummbm = _ida_domain.PPC_vmsummbm

PPC_vmsumshm = _ida_domain.PPC_vmsumshm

PPC_vmsumshs = _ida_domain.PPC_vmsumshs

PPC_vmsumubm = _ida_domain.PPC_vmsumubm

PPC_vmsumuhm = _ida_domain.PPC_vmsumuhm

PPC_vmsumuhs = _ida_domain.PPC_vmsumuhs

PPC_vmulesb = _ida_domain.PPC_vmulesb

PPC_vmulesh = _ida_domain.PPC_vmulesh

PPC_vmuleub = _ida_domain.PPC_vmuleub

PPC_vmuleuh = _ida_domain.PPC_vmuleuh

PPC_vmulosb = _ida_domain.PPC_vmulosb

PPC_vmulosh = _ida_domain.PPC_vmulosh

PPC_vmuloub = _ida_domain.PPC_vmuloub

PPC_vmulouh = _ida_domain.PPC_vmulouh

PPC_vnmsubfp = _ida_domain.PPC_vnmsubfp

PPC_vnor = _ida_domain.PPC_vnor

PPC_vor = _ida_domain.PPC_vor

PPC_vperm = _ida_domain.PPC_vperm

PPC_vpkpx = _ida_domain.PPC_vpkpx

PPC_vpkshss = _ida_domain.PPC_vpkshss

PPC_vpkshus = _ida_domain.PPC_vpkshus

PPC_vpkswss = _ida_domain.PPC_vpkswss

PPC_vpkswus = _ida_domain.PPC_vpkswus

PPC_vpkuhum = _ida_domain.PPC_vpkuhum

PPC_vpkuhus = _ida_domain.PPC_vpkuhus

PPC_vpkuwum = _ida_domain.PPC_vpkuwum

PPC_vpkuwus = _ida_domain.PPC_vpkuwus

PPC_vrefp = _ida_domain.PPC_vrefp

PPC_vrfim = _ida_domain.PPC_vrfim

PPC_vrfin = _ida_domain.PPC_vrfin

PPC_vrfip = _ida_domain.PPC_vrfip

PPC_vrfiz = _ida_domain.PPC_vrfiz

PPC_vrlb = _ida_domain.PPC_vrlb

PPC_vrlh = _ida_domain.PPC_vrlh

PPC_vrlw = _ida_domain.PPC_vrlw

PPC_vrsqrtefp = _ida_domain.PPC_vrsqrtefp

PPC_vsel = _ida_domain.PPC_vsel

PPC_vsl = _ida_domain.PPC_vsl

PPC_vslb = _ida_domain.PPC_vslb

PPC_vsldoi = _ida_domain.PPC_vsldoi

PPC_vslh = _ida_domain.PPC_vslh

PPC_vslo = _ida_domain.PPC_vslo

PPC_vslw = _ida_domain.PPC_vslw

PPC_vspltb = _ida_domain.PPC_vspltb

PPC_vsplth = _ida_domain.PPC_vsplth

PPC_vspltisb = _ida_domain.PPC_vspltisb

PPC_vspltish = _ida_domain.PPC_vspltish

PPC_vspltisw = _ida_domain.PPC_vspltisw

PPC_vspltw = _ida_domain.PPC_vspltw

PPC_vsr = _ida_domain.PPC_vsr

PPC_vsrab = _ida_domain.PPC_vsrab

PPC_vsrah = _ida_domain.PPC_vsrah

PPC_vsraw = _ida_domain.PPC_vsraw

PPC_vsrb = _ida_domain.PPC_vsrb

PPC_vsrh = _ida_domain.PPC_vsrh

PPC_vsro = _ida_domain.PPC_vsro

PPC_vsrw = _ida_domain.PPC_vsrw

PPC_vsubcuw = _ida_domain.PPC_vsubcuw

PPC_vsubfp = _ida_domain.PPC_vsubfp

PPC_vsubsbs = _ida_domain.PPC_vsubsbs

PPC_vsubshs = _ida_domain.PPC_vsubshs

PPC_vsubsws = _ida_domain.PPC_vsubsws

PPC_vsububm = _ida_domain.PPC_vsububm

PPC_vsububs = _ida_domain.PPC_vsububs

PPC_vsubuhm = _ida_domain.PPC_vsubuhm

PPC_vsubuhs = _ida_domain.PPC_vsubuhs

PPC_vsubuwm = _ida_domain.PPC_vsubuwm

PPC_vsubuws = _ida_domain.PPC_vsubuws

PPC_vsum2sws = _ida_domain.PPC_vsum2sws

PPC_vsum4sbs = _ida_domain.PPC_vsum4sbs

PPC_vsum4shs = _ida_domain.PPC_vsum4shs

PPC_vsum4ubs = _ida_domain.PPC_vsum4ubs

PPC_vsumsws = _ida_domain.PPC_vsumsws

PPC_vupkhpx = _ida_domain.PPC_vupkhpx

PPC_vupkhsb = _ida_domain.PPC_vupkhsb

PPC_vupkhsh = _ida_domain.PPC_vupkhsh

PPC_vupklpx = _ida_domain.PPC_vupklpx

PPC_vupklsb = _ida_domain.PPC_vupklsb

PPC_vupklsh = _ida_domain.PPC_vupklsh

PPC_vxor = _ida_domain.PPC_vxor

PPC_lxsdx = _ida_domain.PPC_lxsdx

PPC_lxvd2x = _ida_domain.PPC_lxvd2x

PPC_lxvdsx = _ida_domain.PPC_lxvdsx

PPC_lxvw4x = _ida_domain.PPC_lxvw4x

PPC_stxsdx = _ida_domain.PPC_stxsdx

PPC_stxvd2x = _ida_domain.PPC_stxvd2x

PPC_stxvw4x = _ida_domain.PPC_stxvw4x

PPC_xsabsdp = _ida_domain.PPC_xsabsdp

PPC_xsadddp = _ida_domain.PPC_xsadddp

PPC_xscmpodp = _ida_domain.PPC_xscmpodp

PPC_xscmpudp = _ida_domain.PPC_xscmpudp

PPC_xscpsgndp = _ida_domain.PPC_xscpsgndp

PPC_xscvdpsp = _ida_domain.PPC_xscvdpsp

PPC_xscvdpsxds = _ida_domain.PPC_xscvdpsxds

PPC_xscvdpsxws = _ida_domain.PPC_xscvdpsxws

PPC_xscvdpuxds = _ida_domain.PPC_xscvdpuxds

PPC_xscvdpuxws = _ida_domain.PPC_xscvdpuxws

PPC_xscvspdp = _ida_domain.PPC_xscvspdp

PPC_xscvsxddp = _ida_domain.PPC_xscvsxddp

PPC_xscvuxddp = _ida_domain.PPC_xscvuxddp

PPC_xsdivdp = _ida_domain.PPC_xsdivdp

PPC_xsmaddadp = _ida_domain.PPC_xsmaddadp

PPC_xsmaddmdp = _ida_domain.PPC_xsmaddmdp

PPC_xsmaxdp = _ida_domain.PPC_xsmaxdp

PPC_xsmindp = _ida_domain.PPC_xsmindp

PPC_xsmsubadp = _ida_domain.PPC_xsmsubadp

PPC_xsmsubmdp = _ida_domain.PPC_xsmsubmdp

PPC_xsmuldp = _ida_domain.PPC_xsmuldp

PPC_xsnabsdp = _ida_domain.PPC_xsnabsdp

PPC_xsnegdp = _ida_domain.PPC_xsnegdp

PPC_xsnmaddadp = _ida_domain.PPC_xsnmaddadp

PPC_xsnmaddmdp = _ida_domain.PPC_xsnmaddmdp

PPC_xsnmsubadp = _ida_domain.PPC_xsnmsubadp

PPC_xsnmsubmdp = _ida_domain.PPC_xsnmsubmdp

PPC_xsrdpi = _ida_domain.PPC_xsrdpi

PPC_xsrdpic = _ida_domain.PPC_xsrdpic

PPC_xsrdpim = _ida_domain.PPC_xsrdpim

PPC_xsrdpip = _ida_domain.PPC_xsrdpip

PPC_xsrdpiz = _ida_domain.PPC_xsrdpiz

PPC_xsredp = _ida_domain.PPC_xsredp

PPC_xsrsqrtedp = _ida_domain.PPC_xsrsqrtedp

PPC_xssqrtdp = _ida_domain.PPC_xssqrtdp

PPC_xssubdp = _ida_domain.PPC_xssubdp

PPC_xstdivdp = _ida_domain.PPC_xstdivdp

PPC_xstsqrtdp = _ida_domain.PPC_xstsqrtdp

PPC_xvabsdp = _ida_domain.PPC_xvabsdp

PPC_xvabssp = _ida_domain.PPC_xvabssp

PPC_xvadddp = _ida_domain.PPC_xvadddp

PPC_xvaddsp = _ida_domain.PPC_xvaddsp

PPC_xvcmpeqdp = _ida_domain.PPC_xvcmpeqdp

PPC_xvcmpeqsp = _ida_domain.PPC_xvcmpeqsp

PPC_xvcmpgedp = _ida_domain.PPC_xvcmpgedp

PPC_xvcmpgesp = _ida_domain.PPC_xvcmpgesp

PPC_xvcmpgtdp = _ida_domain.PPC_xvcmpgtdp

PPC_xvcmpgtsp = _ida_domain.PPC_xvcmpgtsp

PPC_xvcpsgndp = _ida_domain.PPC_xvcpsgndp

PPC_xvcpsgnsp = _ida_domain.PPC_xvcpsgnsp

PPC_xvcvdpsp = _ida_domain.PPC_xvcvdpsp

PPC_xvcvdpsxds = _ida_domain.PPC_xvcvdpsxds

PPC_xvcvdpsxws = _ida_domain.PPC_xvcvdpsxws

PPC_xvcvdpuxds = _ida_domain.PPC_xvcvdpuxds

PPC_xvcvdpuxws = _ida_domain.PPC_xvcvdpuxws

PPC_xvcvspdp = _ida_domain.PPC_xvcvspdp

PPC_xvcvspsxds = _ida_domain.PPC_xvcvspsxds

PPC_xvcvspsxws = _ida_domain.PPC_xvcvspsxws

PPC_xvcvspuxds = _ida_domain.PPC_xvcvspuxds

PPC_xvcvspuxws = _ida_domain.PPC_xvcvspuxws

PPC_xvcvsxddp = _ida_domain.PPC_xvcvsxddp

PPC_xvcvsxdsp = _ida_domain.PPC_xvcvsxdsp

PPC_xvcvsxwdp = _ida_domain.PPC_xvcvsxwdp

PPC_xvcvsxwsp = _ida_domain.PPC_xvcvsxwsp

PPC_xvcvuxddp = _ida_domain.PPC_xvcvuxddp

PPC_xvcvuxdsp = _ida_domain.PPC_xvcvuxdsp

PPC_xvcvuxwdp = _ida_domain.PPC_xvcvuxwdp

PPC_xvcvuxwsp = _ida_domain.PPC_xvcvuxwsp

PPC_xvdivdp = _ida_domain.PPC_xvdivdp

PPC_xvdivsp = _ida_domain.PPC_xvdivsp

PPC_xvmaddadp = _ida_domain.PPC_xvmaddadp

PPC_xvmaddasp = _ida_domain.PPC_xvmaddasp

PPC_xvmaddmdp = _ida_domain.PPC_xvmaddmdp

PPC_xvmaddmsp = _ida_domain.PPC_xvmaddmsp

PPC_xvmaxdp = _ida_domain.PPC_xvmaxdp

PPC_xvmaxsp = _ida_domain.PPC_xvmaxsp

PPC_xvmindp = _ida_domain.PPC_xvmindp

PPC_xvminsp = _ida_domain.PPC_xvminsp

PPC_xvmsubadp = _ida_domain.PPC_xvmsubadp

PPC_xvmsubasp = _ida_domain.PPC_xvmsubasp

PPC_xvmsubmdp = _ida_domain.PPC_xvmsubmdp

PPC_xvmsubmsp = _ida_domain.PPC_xvmsubmsp

PPC_xvmuldp = _ida_domain.PPC_xvmuldp

PPC_xvmulsp = _ida_domain.PPC_xvmulsp

PPC_xvnabsdp = _ida_domain.PPC_xvnabsdp

PPC_xvnabssp = _ida_domain.PPC_xvnabssp

PPC_xvnegdp = _ida_domain.PPC_xvnegdp

PPC_xvnegsp = _ida_domain.PPC_xvnegsp

PPC_xvnmaddadp = _ida_domain.PPC_xvnmaddadp

PPC_xvnmaddasp = _ida_domain.PPC_xvnmaddasp

PPC_xvnmaddmdp = _ida_domain.PPC_xvnmaddmdp

PPC_xvnmaddmsp = _ida_domain.PPC_xvnmaddmsp

PPC_xvnmsubadp = _ida_domain.PPC_xvnmsubadp

PPC_xvnmsubasp = _ida_domain.PPC_xvnmsubasp

PPC_xvnmsubmdp = _ida_domain.PPC_xvnmsubmdp

PPC_xvnmsubmsp = _ida_domain.PPC_xvnmsubmsp

PPC_xvrdpi = _ida_domain.PPC_xvrdpi

PPC_xvrdpic = _ida_domain.PPC_xvrdpic

PPC_xvrdpim = _ida_domain.PPC_xvrdpim

PPC_xvrdpip = _ida_domain.PPC_xvrdpip

PPC_xvrdpiz = _ida_domain.PPC_xvrdpiz

PPC_xvredp = _ida_domain.PPC_xvredp

PPC_xvresp = _ida_domain.PPC_xvresp

PPC_xvrspi = _ida_domain.PPC_xvrspi

PPC_xvrspic = _ida_domain.PPC_xvrspic

PPC_xvrspim = _ida_domain.PPC_xvrspim

PPC_xvrspip = _ida_domain.PPC_xvrspip

PPC_xvrspiz = _ida_domain.PPC_xvrspiz

PPC_xvrsqrtedp = _ida_domain.PPC_xvrsqrtedp

PPC_xvrsqrtesp = _ida_domain.PPC_xvrsqrtesp

PPC_xvsqrtdp = _ida_domain.PPC_xvsqrtdp

PPC_xvsqrtsp = _ida_domain.PPC_xvsqrtsp

PPC_xvsubdp = _ida_domain.PPC_xvsubdp

PPC_xvsubsp = _ida_domain.PPC_xvsubsp

PPC_xvtdivdp = _ida_domain.PPC_xvtdivdp

PPC_xvtdivsp = _ida_domain.PPC_xvtdivsp

PPC_xvtsqrtdp = _ida_domain.PPC_xvtsqrtdp

PPC_xvtsqrtsp = _ida_domain.PPC_xvtsqrtsp

PPC_xxland = _ida_domain.PPC_xxland

PPC_xxlandc = _ida_domain.PPC_xxlandc

PPC_xxlnor = _ida_domain.PPC_xxlnor

PPC_xxlor = _ida_domain.PPC_xxlor

PPC_xxlxor = _ida_domain.PPC_xxlxor

PPC_xxmrghw = _ida_domain.PPC_xxmrghw

PPC_xxmrglw = _ida_domain.PPC_xxmrglw

PPC_xxpermdi = _ida_domain.PPC_xxpermdi

PPC_xxsel = _ida_domain.PPC_xxsel

PPC_xxsldwi = _ida_domain.PPC_xxsldwi

PPC_xxspltw = _ida_domain.PPC_xxspltw

PPC_wait = _ida_domain.PPC_wait

PPC_dss = _ida_domain.PPC_dss

PPC_dssall = _ida_domain.PPC_dssall

PPC_dst = _ida_domain.PPC_dst

PPC_dstt = _ida_domain.PPC_dstt

PPC_dstst = _ida_domain.PPC_dstst

PPC_dststt = _ida_domain.PPC_dststt

PPC_lvlx = _ida_domain.PPC_lvlx

PPC_lvlxl = _ida_domain.PPC_lvlxl

PPC_lvrx = _ida_domain.PPC_lvrx

PPC_lvrxl = _ida_domain.PPC_lvrxl

PPC_stvlx = _ida_domain.PPC_stvlx

PPC_stvlxl = _ida_domain.PPC_stvlxl

PPC_stvrx = _ida_domain.PPC_stvrx

PPC_stvrxl = _ida_domain.PPC_stvrxl

PPC_add16i = _ida_domain.PPC_add16i

PPC_add2i = _ida_domain.PPC_add2i

PPC_add2is = _ida_domain.PPC_add2is

PPC_and2i = _ida_domain.PPC_and2i

PPC_and2is = _ida_domain.PPC_and2is

PPC_cmp16i = _ida_domain.PPC_cmp16i

PPC_cmph = _ida_domain.PPC_cmph

PPC_cmph16i = _ida_domain.PPC_cmph16i

PPC_cmphl = _ida_domain.PPC_cmphl

PPC_cmphl16i = _ida_domain.PPC_cmphl16i

PPC_cmpl16i = _ida_domain.PPC_cmpl16i

PPC_mull2i = _ida_domain.PPC_mull2i

PPC_or2i = _ida_domain.PPC_or2i

PPC_or2is = _ida_domain.PPC_or2is

PPC_rlw = _ida_domain.PPC_rlw

PPC_rlwi = _ida_domain.PPC_rlwi

PPC_bclri = _ida_domain.PPC_bclri

PPC_bgeni = _ida_domain.PPC_bgeni

PPC_bmaski = _ida_domain.PPC_bmaski

PPC_bseti = _ida_domain.PPC_bseti

PPC_btsti = _ida_domain.PPC_btsti

PPC_extzb = _ida_domain.PPC_extzb

PPC_extzh = _ida_domain.PPC_extzh

PPC_illegal = _ida_domain.PPC_illegal

PPC_mfar = _ida_domain.PPC_mfar

PPC_mtar = _ida_domain.PPC_mtar

PPC_sub = _ida_domain.PPC_sub

PPC_sub16i = _ida_domain.PPC_sub16i

PPC_sub2i = _ida_domain.PPC_sub2i

PPC_sub2is = _ida_domain.PPC_sub2is

PPC_extldi = _ida_domain.PPC_extldi

PPC_extrdi = _ida_domain.PPC_extrdi

PPC_insrdi = _ida_domain.PPC_insrdi

PPC_rotldi = _ida_domain.PPC_rotldi

PPC_rotrdi = _ida_domain.PPC_rotrdi

PPC_rotld = _ida_domain.PPC_rotld

PPC_sldi = _ida_domain.PPC_sldi

PPC_srdi = _ida_domain.PPC_srdi

PPC_clrldi = _ida_domain.PPC_clrldi

PPC_clrrdi = _ida_domain.PPC_clrrdi

PPC_clrlsldi = _ida_domain.PPC_clrlsldi

PPC_xnop = _ida_domain.PPC_xnop

PPC_hnop = _ida_domain.PPC_hnop

PPC_dcbfl = _ida_domain.PPC_dcbfl

PPC_dcbflp = _ida_domain.PPC_dcbflp

PPC_dcbtt = _ida_domain.PPC_dcbtt

PPC_dcbtstt = _ida_domain.PPC_dcbtstt

PPC_lwsync = _ida_domain.PPC_lwsync

PPC_ptesync = _ida_domain.PPC_ptesync

PPC_waitrsv = _ida_domain.PPC_waitrsv

PPC_waitimpl = _ida_domain.PPC_waitimpl

PPC_evmr = _ida_domain.PPC_evmr

PPC_evnot = _ida_domain.PPC_evnot

PPC_mtcr = _ida_domain.PPC_mtcr

PPC_xvmovdp = _ida_domain.PPC_xvmovdp

PPC_xvmovsp = _ida_domain.PPC_xvmovsp

PPC_xxspltd = _ida_domain.PPC_xxspltd

PPC_xxmrghd = _ida_domain.PPC_xxmrghd

PPC_xxmrgld = _ida_domain.PPC_xxmrgld

PPC_xxswapd = _ida_domain.PPC_xxswapd

PPC_dcbz128 = _ida_domain.PPC_dcbz128

PPC_mtmsree = _ida_domain.PPC_mtmsree

PPC_vcfpsxws = _ida_domain.PPC_vcfpsxws

PPC_vcfpuxws = _ida_domain.PPC_vcfpuxws

PPC_vcsxwfp = _ida_domain.PPC_vcsxwfp

PPC_vcuxwfp = _ida_domain.PPC_vcuxwfp

PPC_vmaddcfp = _ida_domain.PPC_vmaddcfp

PPC_vmsum3fp = _ida_domain.PPC_vmsum3fp

PPC_vmsum4fp = _ida_domain.PPC_vmsum4fp

PPC_vmulfp = _ida_domain.PPC_vmulfp

PPC_vpermwi = _ida_domain.PPC_vpermwi

PPC_vpkd3d = _ida_domain.PPC_vpkd3d

PPC_vrlimi = _ida_domain.PPC_vrlimi

PPC_vupkd3d = _ida_domain.PPC_vupkd3d

PPC_ps_cmpu0 = _ida_domain.PPC_ps_cmpu0

PPC_psq_lx = _ida_domain.PPC_psq_lx

PPC_psq_stx = _ida_domain.PPC_psq_stx

PPC_ps_sum0 = _ida_domain.PPC_ps_sum0

PPC_ps_sum1 = _ida_domain.PPC_ps_sum1

PPC_ps_muls0 = _ida_domain.PPC_ps_muls0

PPC_ps_muls1 = _ida_domain.PPC_ps_muls1

PPC_ps_madds0 = _ida_domain.PPC_ps_madds0

PPC_ps_madds1 = _ida_domain.PPC_ps_madds1

PPC_ps_div = _ida_domain.PPC_ps_div

PPC_ps_sub = _ida_domain.PPC_ps_sub

PPC_ps_add = _ida_domain.PPC_ps_add

PPC_ps_sel = _ida_domain.PPC_ps_sel

PPC_ps_res = _ida_domain.PPC_ps_res

PPC_ps_mul = _ida_domain.PPC_ps_mul

PPC_ps_rsqrte = _ida_domain.PPC_ps_rsqrte

PPC_ps_msub = _ida_domain.PPC_ps_msub

PPC_ps_madd = _ida_domain.PPC_ps_madd

PPC_ps_nmsub = _ida_domain.PPC_ps_nmsub

PPC_ps_nmadd = _ida_domain.PPC_ps_nmadd

PPC_ps_cmpo0 = _ida_domain.PPC_ps_cmpo0

PPC_psq_lux = _ida_domain.PPC_psq_lux

PPC_psq_stux = _ida_domain.PPC_psq_stux

PPC_ps_neg = _ida_domain.PPC_ps_neg

PPC_ps_cmpu1 = _ida_domain.PPC_ps_cmpu1

PPC_ps_mr = _ida_domain.PPC_ps_mr

PPC_ps_cmpo1 = _ida_domain.PPC_ps_cmpo1

PPC_ps_nabs = _ida_domain.PPC_ps_nabs

PPC_ps_abs = _ida_domain.PPC_ps_abs

PPC_ps_merge00 = _ida_domain.PPC_ps_merge00

PPC_ps_merge01 = _ida_domain.PPC_ps_merge01

PPC_ps_merge10 = _ida_domain.PPC_ps_merge10

PPC_ps_merge11 = _ida_domain.PPC_ps_merge11

PPC_dcbz_l = _ida_domain.PPC_dcbz_l

PPC_psq_l = _ida_domain.PPC_psq_l

PPC_psq_lu = _ida_domain.PPC_psq_lu

PPC_psq_st = _ida_domain.PPC_psq_st

PPC_psq_stu = _ida_domain.PPC_psq_stu

PPC_evfsmadd = _ida_domain.PPC_evfsmadd

PPC_evfsmsub = _ida_domain.PPC_evfsmsub

PPC_evfssqrt = _ida_domain.PPC_evfssqrt

PPC_evfsnmadd = _ida_domain.PPC_evfsnmadd

PPC_evfsnmsub = _ida_domain.PPC_evfsnmsub

PPC_evfsmax = _ida_domain.PPC_evfsmax

PPC_evfsmin = _ida_domain.PPC_evfsmin

PPC_evfsaddsub = _ida_domain.PPC_evfsaddsub

PPC_evfssubadd = _ida_domain.PPC_evfssubadd

PPC_evfssum = _ida_domain.PPC_evfssum

PPC_evfsdiff = _ida_domain.PPC_evfsdiff

PPC_evfssumdiff = _ida_domain.PPC_evfssumdiff

PPC_evfsdiffsum = _ida_domain.PPC_evfsdiffsum

PPC_evfsaddx = _ida_domain.PPC_evfsaddx

PPC_evfssubx = _ida_domain.PPC_evfssubx

PPC_evfsaddsubx = _ida_domain.PPC_evfsaddsubx

PPC_evfssubaddx = _ida_domain.PPC_evfssubaddx

PPC_evfsmulx = _ida_domain.PPC_evfsmulx

PPC_evfsmule = _ida_domain.PPC_evfsmule

PPC_evfsmulo = _ida_domain.PPC_evfsmulo

PPC_evfscfh = _ida_domain.PPC_evfscfh

PPC_evfscth = _ida_domain.PPC_evfscth

PPC_efsmax = _ida_domain.PPC_efsmax

PPC_efsmin = _ida_domain.PPC_efsmin

PPC_efsmadd = _ida_domain.PPC_efsmadd

PPC_efsmsub = _ida_domain.PPC_efsmsub

PPC_efssqrt = _ida_domain.PPC_efssqrt

PPC_efsnmadd = _ida_domain.PPC_efsnmadd

PPC_efsnmsub = _ida_domain.PPC_efsnmsub

PPC_efscfh = _ida_domain.PPC_efscfh

PPC_efscth = _ida_domain.PPC_efscth

PPC_lmvgprw = _ida_domain.PPC_lmvgprw

PPC_stmvgprw = _ida_domain.PPC_stmvgprw

PPC_lmvsprw = _ida_domain.PPC_lmvsprw

PPC_stmvsprw = _ida_domain.PPC_stmvsprw

PPC_lmvsrrw = _ida_domain.PPC_lmvsrrw

PPC_stmvsrrw = _ida_domain.PPC_stmvsrrw

PPC_lmvcsrrw = _ida_domain.PPC_lmvcsrrw

PPC_stmvcsrrw = _ida_domain.PPC_stmvcsrrw

PPC_lmvdsrrw = _ida_domain.PPC_lmvdsrrw

PPC_stmvdsrrw = _ida_domain.PPC_stmvdsrrw

PPC_lmvmcsrrw = _ida_domain.PPC_lmvmcsrrw

PPC_stmvmcsrrw = _ida_domain.PPC_stmvmcsrrw

PPC_evdotpwcssi = _ida_domain.PPC_evdotpwcssi

PPC_evdotpwcsmi = _ida_domain.PPC_evdotpwcsmi

PPC_evdotpwcssfr = _ida_domain.PPC_evdotpwcssfr

PPC_evdotpwcssf = _ida_domain.PPC_evdotpwcssf

PPC_evdotpwgasmf = _ida_domain.PPC_evdotpwgasmf

PPC_evdotpwxgasmf = _ida_domain.PPC_evdotpwxgasmf

PPC_evdotpwgasmfr = _ida_domain.PPC_evdotpwgasmfr

PPC_evdotpwxgasmfr = _ida_domain.PPC_evdotpwxgasmfr

PPC_evdotpwgssmf = _ida_domain.PPC_evdotpwgssmf

PPC_evdotpwxgssmf = _ida_domain.PPC_evdotpwxgssmf

PPC_evdotpwgssmfr = _ida_domain.PPC_evdotpwgssmfr

PPC_evdotpwxgssmfr = _ida_domain.PPC_evdotpwxgssmfr

PPC_evdotpwcssiaaw3 = _ida_domain.PPC_evdotpwcssiaaw3

PPC_evdotpwcsmiaaw3 = _ida_domain.PPC_evdotpwcsmiaaw3

PPC_evdotpwcssfraaw3 = _ida_domain.PPC_evdotpwcssfraaw3

PPC_evdotpwcssfaaw3 = _ida_domain.PPC_evdotpwcssfaaw3

PPC_evdotpwgasmfaa3 = _ida_domain.PPC_evdotpwgasmfaa3

PPC_evdotpwxgasmfaa3 = _ida_domain.PPC_evdotpwxgasmfaa3

PPC_evdotpwgasmfraa3 = _ida_domain.PPC_evdotpwgasmfraa3

PPC_evdotpwxgasmfraa3 = _ida_domain.PPC_evdotpwxgasmfraa3

PPC_evdotpwgssmfaa3 = _ida_domain.PPC_evdotpwgssmfaa3

PPC_evdotpwxgssmfaa3 = _ida_domain.PPC_evdotpwxgssmfaa3

PPC_evdotpwgssmfraa3 = _ida_domain.PPC_evdotpwgssmfraa3

PPC_evdotpwxgssmfraa3 = _ida_domain.PPC_evdotpwxgssmfraa3

PPC_evdotpwcssia = _ida_domain.PPC_evdotpwcssia

PPC_evdotpwcsmia = _ida_domain.PPC_evdotpwcsmia

PPC_evdotpwcssfra = _ida_domain.PPC_evdotpwcssfra

PPC_evdotpwcssfa = _ida_domain.PPC_evdotpwcssfa

PPC_evdotpwgasmfa = _ida_domain.PPC_evdotpwgasmfa

PPC_evdotpwxgasmfa = _ida_domain.PPC_evdotpwxgasmfa

PPC_evdotpwgasmfra = _ida_domain.PPC_evdotpwgasmfra

PPC_evdotpwxgasmfra = _ida_domain.PPC_evdotpwxgasmfra

PPC_evdotpwgssmfa = _ida_domain.PPC_evdotpwgssmfa

PPC_evdotpwxgssmfa = _ida_domain.PPC_evdotpwxgssmfa

PPC_evdotpwgssmfra = _ida_domain.PPC_evdotpwgssmfra

PPC_evdotpwxgssmfra = _ida_domain.PPC_evdotpwxgssmfra

PPC_evdotpwcssiaaw = _ida_domain.PPC_evdotpwcssiaaw

PPC_evdotpwcsmiaaw = _ida_domain.PPC_evdotpwcsmiaaw

PPC_evdotpwcssfraaw = _ida_domain.PPC_evdotpwcssfraaw

PPC_evdotpwcssfaaw = _ida_domain.PPC_evdotpwcssfaaw

PPC_evdotpwgasmfaa = _ida_domain.PPC_evdotpwgasmfaa

PPC_evdotpwxgasmfaa = _ida_domain.PPC_evdotpwxgasmfaa

PPC_evdotpwgasmfraa = _ida_domain.PPC_evdotpwgasmfraa

PPC_evdotpwxgasmfraa = _ida_domain.PPC_evdotpwxgasmfraa

PPC_evdotpwgssmfaa = _ida_domain.PPC_evdotpwgssmfaa

PPC_evdotpwxgssmfaa = _ida_domain.PPC_evdotpwxgssmfaa

PPC_evdotpwgssmfraa = _ida_domain.PPC_evdotpwgssmfraa

PPC_evdotpwxgssmfraa = _ida_domain.PPC_evdotpwxgssmfraa

PPC_evdotphihcssi = _ida_domain.PPC_evdotphihcssi

PPC_evdotplohcssi = _ida_domain.PPC_evdotplohcssi

PPC_evdotphihcssf = _ida_domain.PPC_evdotphihcssf

PPC_evdotplohcssf = _ida_domain.PPC_evdotplohcssf

PPC_evdotphihcsmi = _ida_domain.PPC_evdotphihcsmi

PPC_evdotplohcsmi = _ida_domain.PPC_evdotplohcsmi

PPC_evdotphihcssfr = _ida_domain.PPC_evdotphihcssfr

PPC_evdotplohcssfr = _ida_domain.PPC_evdotplohcssfr

PPC_evdotphihcssiaaw3 = _ida_domain.PPC_evdotphihcssiaaw3

PPC_evdotplohcssiaaw3 = _ida_domain.PPC_evdotplohcssiaaw3

PPC_evdotphihcssfaaw3 = _ida_domain.PPC_evdotphihcssfaaw3

PPC_evdotplohcssfaaw3 = _ida_domain.PPC_evdotplohcssfaaw3

PPC_evdotphihcsmiaaw3 = _ida_domain.PPC_evdotphihcsmiaaw3

PPC_evdotplohcsmiaaw3 = _ida_domain.PPC_evdotplohcsmiaaw3

PPC_evdotphihcssfraaw3 = _ida_domain.PPC_evdotphihcssfraaw3

PPC_evdotplohcssfraaw3 = _ida_domain.PPC_evdotplohcssfraaw3

PPC_evdotphihcssia = _ida_domain.PPC_evdotphihcssia

PPC_evdotplohcssia = _ida_domain.PPC_evdotplohcssia

PPC_evdotphihcssfa = _ida_domain.PPC_evdotphihcssfa

PPC_evdotplohcssfa = _ida_domain.PPC_evdotplohcssfa

PPC_evdotphihcsmia = _ida_domain.PPC_evdotphihcsmia

PPC_evdotplohcsmia = _ida_domain.PPC_evdotplohcsmia

PPC_evdotphihcssfra = _ida_domain.PPC_evdotphihcssfra

PPC_evdotplohcssfra = _ida_domain.PPC_evdotplohcssfra

PPC_evdotphihcssiaaw = _ida_domain.PPC_evdotphihcssiaaw

PPC_evdotplohcssiaaw = _ida_domain.PPC_evdotplohcssiaaw

PPC_evdotphihcssfaaw = _ida_domain.PPC_evdotphihcssfaaw

PPC_evdotplohcssfaaw = _ida_domain.PPC_evdotplohcssfaaw

PPC_evdotphihcsmiaaw = _ida_domain.PPC_evdotphihcsmiaaw

PPC_evdotplohcsmiaaw = _ida_domain.PPC_evdotplohcsmiaaw

PPC_evdotphihcssfraaw = _ida_domain.PPC_evdotphihcssfraaw

PPC_evdotplohcssfraaw = _ida_domain.PPC_evdotplohcssfraaw

PPC_evdotphausi = _ida_domain.PPC_evdotphausi

PPC_evdotphassi = _ida_domain.PPC_evdotphassi

PPC_evdotphasusi = _ida_domain.PPC_evdotphasusi

PPC_evdotphassf = _ida_domain.PPC_evdotphassf

PPC_evdotphsssf = _ida_domain.PPC_evdotphsssf

PPC_evdotphaumi = _ida_domain.PPC_evdotphaumi

PPC_evdotphasmi = _ida_domain.PPC_evdotphasmi

PPC_evdotphasumi = _ida_domain.PPC_evdotphasumi

PPC_evdotphassfr = _ida_domain.PPC_evdotphassfr

PPC_evdotphssmi = _ida_domain.PPC_evdotphssmi

PPC_evdotphsssfr = _ida_domain.PPC_evdotphsssfr

PPC_evdotphausiaaw3 = _ida_domain.PPC_evdotphausiaaw3

PPC_evdotphassiaaw3 = _ida_domain.PPC_evdotphassiaaw3

PPC_evdotphasusiaaw3 = _ida_domain.PPC_evdotphasusiaaw3

PPC_evdotphassfaaw3 = _ida_domain.PPC_evdotphassfaaw3

PPC_evdotphsssiaaw3 = _ida_domain.PPC_evdotphsssiaaw3

PPC_evdotphsssfaaw3 = _ida_domain.PPC_evdotphsssfaaw3

PPC_evdotphaumiaaw3 = _ida_domain.PPC_evdotphaumiaaw3

PPC_evdotphasmiaaw3 = _ida_domain.PPC_evdotphasmiaaw3

PPC_evdotphasumiaaw3 = _ida_domain.PPC_evdotphasumiaaw3

PPC_evdotphassfraaw3 = _ida_domain.PPC_evdotphassfraaw3

PPC_evdotphssmiaaw3 = _ida_domain.PPC_evdotphssmiaaw3

PPC_evdotphsssfraaw3 = _ida_domain.PPC_evdotphsssfraaw3

PPC_evdotphausia = _ida_domain.PPC_evdotphausia

PPC_evdotphassia = _ida_domain.PPC_evdotphassia

PPC_evdotphasusia = _ida_domain.PPC_evdotphasusia

PPC_evdotphassfa = _ida_domain.PPC_evdotphassfa

PPC_evdotphsssfa = _ida_domain.PPC_evdotphsssfa

PPC_evdotphaumia = _ida_domain.PPC_evdotphaumia

PPC_evdotphasmia = _ida_domain.PPC_evdotphasmia

PPC_evdotphasumia = _ida_domain.PPC_evdotphasumia

PPC_evdotphassfra = _ida_domain.PPC_evdotphassfra

PPC_evdotphssmia = _ida_domain.PPC_evdotphssmia

PPC_evdotphsssfra = _ida_domain.PPC_evdotphsssfra

PPC_evdotphausiaaw = _ida_domain.PPC_evdotphausiaaw

PPC_evdotphassiaaw = _ida_domain.PPC_evdotphassiaaw

PPC_evdotphasusiaaw = _ida_domain.PPC_evdotphasusiaaw

PPC_evdotphassfaaw = _ida_domain.PPC_evdotphassfaaw

PPC_evdotphsssiaaw = _ida_domain.PPC_evdotphsssiaaw

PPC_evdotphsssfaaw = _ida_domain.PPC_evdotphsssfaaw

PPC_evdotphaumiaaw = _ida_domain.PPC_evdotphaumiaaw

PPC_evdotphasmiaaw = _ida_domain.PPC_evdotphasmiaaw

PPC_evdotphasumiaaw = _ida_domain.PPC_evdotphasumiaaw

PPC_evdotphassfraaw = _ida_domain.PPC_evdotphassfraaw

PPC_evdotphssmiaaw = _ida_domain.PPC_evdotphssmiaaw

PPC_evdotphsssfraaw = _ida_domain.PPC_evdotphsssfraaw

PPC_evdotp4hgaumi = _ida_domain.PPC_evdotp4hgaumi

PPC_evdotp4hgasmi = _ida_domain.PPC_evdotp4hgasmi

PPC_evdotp4hgasumi = _ida_domain.PPC_evdotp4hgasumi

PPC_evdotp4hgasmf = _ida_domain.PPC_evdotp4hgasmf

PPC_evdotp4hgssmi = _ida_domain.PPC_evdotp4hgssmi

PPC_evdotp4hgssmf = _ida_domain.PPC_evdotp4hgssmf

PPC_evdotp4hxgasmi = _ida_domain.PPC_evdotp4hxgasmi

PPC_evdotp4hxgasmf = _ida_domain.PPC_evdotp4hxgasmf

PPC_evdotpbaumi = _ida_domain.PPC_evdotpbaumi

PPC_evdotpbasmi = _ida_domain.PPC_evdotpbasmi

PPC_evdotpbasumi = _ida_domain.PPC_evdotpbasumi

PPC_evdotp4hxgssmi = _ida_domain.PPC_evdotp4hxgssmi

PPC_evdotp4hxgssmf = _ida_domain.PPC_evdotp4hxgssmf

PPC_evdotp4hgaumiaa3 = _ida_domain.PPC_evdotp4hgaumiaa3

PPC_evdotp4hgasmiaa3 = _ida_domain.PPC_evdotp4hgasmiaa3

PPC_evdotp4hgasumiaa3 = _ida_domain.PPC_evdotp4hgasumiaa3

PPC_evdotp4hgasmfaa3 = _ida_domain.PPC_evdotp4hgasmfaa3

PPC_evdotp4hgssmiaa3 = _ida_domain.PPC_evdotp4hgssmiaa3

PPC_evdotp4hgssmfaa3 = _ida_domain.PPC_evdotp4hgssmfaa3

PPC_evdotp4hxgasmiaa3 = _ida_domain.PPC_evdotp4hxgasmiaa3

PPC_evdotp4hxgasmfaa3 = _ida_domain.PPC_evdotp4hxgasmfaa3

PPC_evdotpbaumiaaw3 = _ida_domain.PPC_evdotpbaumiaaw3

PPC_evdotpbasmiaaw3 = _ida_domain.PPC_evdotpbasmiaaw3

PPC_evdotpbasumiaaw3 = _ida_domain.PPC_evdotpbasumiaaw3

PPC_evdotp4hxgssmiaa3 = _ida_domain.PPC_evdotp4hxgssmiaa3

PPC_evdotp4hxgssmfaa3 = _ida_domain.PPC_evdotp4hxgssmfaa3

PPC_evdotp4hgaumia = _ida_domain.PPC_evdotp4hgaumia

PPC_evdotp4hgasmia = _ida_domain.PPC_evdotp4hgasmia

PPC_evdotp4hgasumia = _ida_domain.PPC_evdotp4hgasumia

PPC_evdotp4hgasmfa = _ida_domain.PPC_evdotp4hgasmfa

PPC_evdotp4hgssmia = _ida_domain.PPC_evdotp4hgssmia

PPC_evdotp4hgssmfa = _ida_domain.PPC_evdotp4hgssmfa

PPC_evdotp4hxgasmia = _ida_domain.PPC_evdotp4hxgasmia

PPC_evdotp4hxgasmfa = _ida_domain.PPC_evdotp4hxgasmfa

PPC_evdotpbaumia = _ida_domain.PPC_evdotpbaumia

PPC_evdotpbasmia = _ida_domain.PPC_evdotpbasmia

PPC_evdotpbasumia = _ida_domain.PPC_evdotpbasumia

PPC_evdotp4hxgssmia = _ida_domain.PPC_evdotp4hxgssmia

PPC_evdotp4hxgssmfa = _ida_domain.PPC_evdotp4hxgssmfa

PPC_evdotp4hgaumiaa = _ida_domain.PPC_evdotp4hgaumiaa

PPC_evdotp4hgasmiaa = _ida_domain.PPC_evdotp4hgasmiaa

PPC_evdotp4hgasumiaa = _ida_domain.PPC_evdotp4hgasumiaa

PPC_evdotp4hgasmfaa = _ida_domain.PPC_evdotp4hgasmfaa

PPC_evdotp4hgssmiaa = _ida_domain.PPC_evdotp4hgssmiaa

PPC_evdotp4hgssmfaa = _ida_domain.PPC_evdotp4hgssmfaa

PPC_evdotp4hxgasmiaa = _ida_domain.PPC_evdotp4hxgasmiaa

PPC_evdotp4hxgasmfaa = _ida_domain.PPC_evdotp4hxgasmfaa

PPC_evdotpbaumiaaw = _ida_domain.PPC_evdotpbaumiaaw

PPC_evdotpbasmiaaw = _ida_domain.PPC_evdotpbasmiaaw

PPC_evdotpbasumiaaw = _ida_domain.PPC_evdotpbasumiaaw

PPC_evdotp4hxgssmiaa = _ida_domain.PPC_evdotp4hxgssmiaa

PPC_evdotp4hxgssmfaa = _ida_domain.PPC_evdotp4hxgssmfaa

PPC_evdotpwausi = _ida_domain.PPC_evdotpwausi

PPC_evdotpwassi = _ida_domain.PPC_evdotpwassi

PPC_evdotpwasusi = _ida_domain.PPC_evdotpwasusi

PPC_evdotpwaumi = _ida_domain.PPC_evdotpwaumi

PPC_evdotpwasmi = _ida_domain.PPC_evdotpwasmi

PPC_evdotpwasumi = _ida_domain.PPC_evdotpwasumi

PPC_evdotpwssmi = _ida_domain.PPC_evdotpwssmi

PPC_evdotpwausiaa3 = _ida_domain.PPC_evdotpwausiaa3

PPC_evdotpwassiaa3 = _ida_domain.PPC_evdotpwassiaa3

PPC_evdotpwasusiaa3 = _ida_domain.PPC_evdotpwasusiaa3

PPC_evdotpwsssiaa3 = _ida_domain.PPC_evdotpwsssiaa3

PPC_evdotpwaumiaa3 = _ida_domain.PPC_evdotpwaumiaa3

PPC_evdotpwasmiaa3 = _ida_domain.PPC_evdotpwasmiaa3

PPC_evdotpwasumiaa3 = _ida_domain.PPC_evdotpwasumiaa3

PPC_evdotpwssmiaa3 = _ida_domain.PPC_evdotpwssmiaa3

PPC_evdotpwausia = _ida_domain.PPC_evdotpwausia

PPC_evdotpwassia = _ida_domain.PPC_evdotpwassia

PPC_evdotpwasusia = _ida_domain.PPC_evdotpwasusia

PPC_evdotpwaumia = _ida_domain.PPC_evdotpwaumia

PPC_evdotpwasmia = _ida_domain.PPC_evdotpwasmia

PPC_evdotpwasumia = _ida_domain.PPC_evdotpwasumia

PPC_evdotpwssmia = _ida_domain.PPC_evdotpwssmia

PPC_evdotpwausiaa = _ida_domain.PPC_evdotpwausiaa

PPC_evdotpwassiaa = _ida_domain.PPC_evdotpwassiaa

PPC_evdotpwasusiaa = _ida_domain.PPC_evdotpwasusiaa

PPC_evdotpwsssiaa = _ida_domain.PPC_evdotpwsssiaa

PPC_evdotpwaumiaa = _ida_domain.PPC_evdotpwaumiaa

PPC_evdotpwasmiaa = _ida_domain.PPC_evdotpwasmiaa

PPC_evdotpwasumiaa = _ida_domain.PPC_evdotpwasumiaa

PPC_evdotpwssmiaa = _ida_domain.PPC_evdotpwssmiaa

PPC_evaddih = _ida_domain.PPC_evaddih

PPC_evaddib = _ida_domain.PPC_evaddib

PPC_evsubifh = _ida_domain.PPC_evsubifh

PPC_evsubifb = _ida_domain.PPC_evsubifb

PPC_evabsb = _ida_domain.PPC_evabsb

PPC_evabsh = _ida_domain.PPC_evabsh

PPC_evabsd = _ida_domain.PPC_evabsd

PPC_evabss = _ida_domain.PPC_evabss

PPC_evabsbs = _ida_domain.PPC_evabsbs

PPC_evabshs = _ida_domain.PPC_evabshs

PPC_evabsds = _ida_domain.PPC_evabsds

PPC_evnegwo = _ida_domain.PPC_evnegwo

PPC_evnegb = _ida_domain.PPC_evnegb

PPC_evnegbo = _ida_domain.PPC_evnegbo

PPC_evnegh = _ida_domain.PPC_evnegh

PPC_evnegho = _ida_domain.PPC_evnegho

PPC_evnegd = _ida_domain.PPC_evnegd

PPC_evnegs = _ida_domain.PPC_evnegs

PPC_evnegwos = _ida_domain.PPC_evnegwos

PPC_evnegbs = _ida_domain.PPC_evnegbs

PPC_evnegbos = _ida_domain.PPC_evnegbos

PPC_evneghs = _ida_domain.PPC_evneghs

PPC_evneghos = _ida_domain.PPC_evneghos

PPC_evnegds = _ida_domain.PPC_evnegds

PPC_evextzb = _ida_domain.PPC_evextzb

PPC_evextsbh = _ida_domain.PPC_evextsbh

PPC_evextsw = _ida_domain.PPC_evextsw

PPC_evrndhb = _ida_domain.PPC_evrndhb

PPC_evrnddw = _ida_domain.PPC_evrnddw

PPC_evrndwhus = _ida_domain.PPC_evrndwhus

PPC_evrndwhss = _ida_domain.PPC_evrndwhss

PPC_evrndhbus = _ida_domain.PPC_evrndhbus

PPC_evrndhbss = _ida_domain.PPC_evrndhbss

PPC_evrnddwus = _ida_domain.PPC_evrnddwus

PPC_evrnddwss = _ida_domain.PPC_evrnddwss

PPC_evrndwnh = _ida_domain.PPC_evrndwnh

PPC_evrndhnb = _ida_domain.PPC_evrndhnb

PPC_evrnddnw = _ida_domain.PPC_evrnddnw

PPC_evrndwnhus = _ida_domain.PPC_evrndwnhus

PPC_evrndwnhss = _ida_domain.PPC_evrndwnhss

PPC_evrndhnbus = _ida_domain.PPC_evrndhnbus

PPC_evrndhnbss = _ida_domain.PPC_evrndhnbss

PPC_evrnddnwus = _ida_domain.PPC_evrnddnwus

PPC_evrnddnwss = _ida_domain.PPC_evrnddnwss

PPC_evcntlzh = _ida_domain.PPC_evcntlzh

PPC_evcntlsh = _ida_domain.PPC_evcntlsh

PPC_evpopcntb = _ida_domain.PPC_evpopcntb

PPC_circinc = _ida_domain.PPC_circinc

PPC_evunpkhibui = _ida_domain.PPC_evunpkhibui

PPC_evunpkhibsi = _ida_domain.PPC_evunpkhibsi

PPC_evunpkhihui = _ida_domain.PPC_evunpkhihui

PPC_evunpkhihsi = _ida_domain.PPC_evunpkhihsi

PPC_evunpklobui = _ida_domain.PPC_evunpklobui

PPC_evunpklobsi = _ida_domain.PPC_evunpklobsi

PPC_evunpklohui = _ida_domain.PPC_evunpklohui

PPC_evunpklohsi = _ida_domain.PPC_evunpklohsi

PPC_evunpklohf = _ida_domain.PPC_evunpklohf

PPC_evunpkhihf = _ida_domain.PPC_evunpkhihf

PPC_evunpklowgsf = _ida_domain.PPC_evunpklowgsf

PPC_evunpkhiwgsf = _ida_domain.PPC_evunpkhiwgsf

PPC_evsatsduw = _ida_domain.PPC_evsatsduw

PPC_evsatsdsw = _ida_domain.PPC_evsatsdsw

PPC_evsatshub = _ida_domain.PPC_evsatshub

PPC_evsatshsb = _ida_domain.PPC_evsatshsb

PPC_evsatuwuh = _ida_domain.PPC_evsatuwuh

PPC_evsatswsh = _ida_domain.PPC_evsatswsh

PPC_evsatswuh = _ida_domain.PPC_evsatswuh

PPC_evsatuhub = _ida_domain.PPC_evsatuhub

PPC_evsatuduw = _ida_domain.PPC_evsatuduw

PPC_evsatuwsw = _ida_domain.PPC_evsatuwsw

PPC_evsatshuh = _ida_domain.PPC_evsatshuh

PPC_evsatuhsh = _ida_domain.PPC_evsatuhsh

PPC_evsatswuw = _ida_domain.PPC_evsatswuw

PPC_evsatswgsdf = _ida_domain.PPC_evsatswgsdf

PPC_evsatsbub = _ida_domain.PPC_evsatsbub

PPC_evsatubsb = _ida_domain.PPC_evsatubsb

PPC_evmaxhpuw = _ida_domain.PPC_evmaxhpuw

PPC_evmaxhpsw = _ida_domain.PPC_evmaxhpsw

PPC_evmaxbpuh = _ida_domain.PPC_evmaxbpuh

PPC_evmaxbpsh = _ida_domain.PPC_evmaxbpsh

PPC_evmaxwpud = _ida_domain.PPC_evmaxwpud

PPC_evmaxwpsd = _ida_domain.PPC_evmaxwpsd

PPC_evminhpuw = _ida_domain.PPC_evminhpuw

PPC_evminhpsw = _ida_domain.PPC_evminhpsw

PPC_evminbpuh = _ida_domain.PPC_evminbpuh

PPC_evminbpsh = _ida_domain.PPC_evminbpsh

PPC_evminwpud = _ida_domain.PPC_evminwpud

PPC_evminwpsd = _ida_domain.PPC_evminwpsd

PPC_evmaxmagws = _ida_domain.PPC_evmaxmagws

PPC_evsl = _ida_domain.PPC_evsl

PPC_evsli = _ida_domain.PPC_evsli

PPC_evsplatie = _ida_domain.PPC_evsplatie

PPC_evsplatib = _ida_domain.PPC_evsplatib

PPC_evsplatibe = _ida_domain.PPC_evsplatibe

PPC_evsplatih = _ida_domain.PPC_evsplatih

PPC_evsplatihe = _ida_domain.PPC_evsplatihe

PPC_evsplatid = _ida_domain.PPC_evsplatid

PPC_evsplatia = _ida_domain.PPC_evsplatia

PPC_evsplatiea = _ida_domain.PPC_evsplatiea

PPC_evsplatiba = _ida_domain.PPC_evsplatiba

PPC_evsplatibea = _ida_domain.PPC_evsplatibea

PPC_evsplatiha = _ida_domain.PPC_evsplatiha

PPC_evsplatihea = _ida_domain.PPC_evsplatihea

PPC_evsplatida = _ida_domain.PPC_evsplatida

PPC_evsplatfio = _ida_domain.PPC_evsplatfio

PPC_evsplatfib = _ida_domain.PPC_evsplatfib

PPC_evsplatfibo = _ida_domain.PPC_evsplatfibo

PPC_evsplatfih = _ida_domain.PPC_evsplatfih

PPC_evsplatfiho = _ida_domain.PPC_evsplatfiho

PPC_evsplatfid = _ida_domain.PPC_evsplatfid

PPC_evsplatfia = _ida_domain.PPC_evsplatfia

PPC_evsplatfioa = _ida_domain.PPC_evsplatfioa

PPC_evsplatfiba = _ida_domain.PPC_evsplatfiba

PPC_evsplatfiboa = _ida_domain.PPC_evsplatfiboa

PPC_evsplatfiha = _ida_domain.PPC_evsplatfiha

PPC_evsplatfihoa = _ida_domain.PPC_evsplatfihoa

PPC_evsplatfida = _ida_domain.PPC_evsplatfida

PPC_evcmpgtdu = _ida_domain.PPC_evcmpgtdu

PPC_evcmpgtds = _ida_domain.PPC_evcmpgtds

PPC_evcmpltdu = _ida_domain.PPC_evcmpltdu

PPC_evcmpltds = _ida_domain.PPC_evcmpltds

PPC_evcmpeqd = _ida_domain.PPC_evcmpeqd

PPC_evswapbhilo = _ida_domain.PPC_evswapbhilo

PPC_evswapblohi = _ida_domain.PPC_evswapblohi

PPC_evswaphhilo = _ida_domain.PPC_evswaphhilo

PPC_evswaphlohi = _ida_domain.PPC_evswaphlohi

PPC_evswaphe = _ida_domain.PPC_evswaphe

PPC_evswaphhi = _ida_domain.PPC_evswaphhi

PPC_evswaphlo = _ida_domain.PPC_evswaphlo

PPC_evswapho = _ida_domain.PPC_evswapho

PPC_evinsb = _ida_domain.PPC_evinsb

PPC_evxtrb = _ida_domain.PPC_evxtrb

PPC_evsplath = _ida_domain.PPC_evsplath

PPC_evsplatb = _ida_domain.PPC_evsplatb

PPC_evinsh = _ida_domain.PPC_evinsh

PPC_evclrbe = _ida_domain.PPC_evclrbe

PPC_evclrbo = _ida_domain.PPC_evclrbo

PPC_evxtrh = _ida_domain.PPC_evxtrh

PPC_evclrh = _ida_domain.PPC_evclrh

PPC_evselbitm0 = _ida_domain.PPC_evselbitm0

PPC_evselbitm1 = _ida_domain.PPC_evselbitm1

PPC_evselbit = _ida_domain.PPC_evselbit

PPC_evperm = _ida_domain.PPC_evperm

PPC_evperm2 = _ida_domain.PPC_evperm2

PPC_evperm3 = _ida_domain.PPC_evperm3

PPC_evxtrd = _ida_domain.PPC_evxtrd

PPC_evsrbu = _ida_domain.PPC_evsrbu

PPC_evsrbs = _ida_domain.PPC_evsrbs

PPC_evsrbiu = _ida_domain.PPC_evsrbiu

PPC_evsrbis = _ida_domain.PPC_evsrbis

PPC_evslb = _ida_domain.PPC_evslb

PPC_evrlb = _ida_domain.PPC_evrlb

PPC_evslbi = _ida_domain.PPC_evslbi

PPC_evrlbi = _ida_domain.PPC_evrlbi

PPC_evsrhu = _ida_domain.PPC_evsrhu

PPC_evsrhs = _ida_domain.PPC_evsrhs

PPC_evsrhiu = _ida_domain.PPC_evsrhiu

PPC_evsrhis = _ida_domain.PPC_evsrhis

PPC_evslh = _ida_domain.PPC_evslh

PPC_evrlh = _ida_domain.PPC_evrlh

PPC_evslhi = _ida_domain.PPC_evslhi

PPC_evrlhi = _ida_domain.PPC_evrlhi

PPC_evsru = _ida_domain.PPC_evsru

PPC_evsrs = _ida_domain.PPC_evsrs

PPC_evsriu = _ida_domain.PPC_evsriu

PPC_evsris = _ida_domain.PPC_evsris

PPC_evlvsl = _ida_domain.PPC_evlvsl

PPC_evlvsr = _ida_domain.PPC_evlvsr

PPC_evsroiu = _ida_domain.PPC_evsroiu

PPC_evsloi = _ida_domain.PPC_evsloi

PPC_evsrois = _ida_domain.PPC_evsrois

PPC_evldbx = _ida_domain.PPC_evldbx

PPC_evldb = _ida_domain.PPC_evldb

PPC_evlhhsplathx = _ida_domain.PPC_evlhhsplathx

PPC_evlhhsplath = _ida_domain.PPC_evlhhsplath

PPC_evlwbsplatwx = _ida_domain.PPC_evlwbsplatwx

PPC_evlwbsplatw = _ida_domain.PPC_evlwbsplatw

PPC_evlwhsplatwx = _ida_domain.PPC_evlwhsplatwx

PPC_evlwhsplatw = _ida_domain.PPC_evlwhsplatw

PPC_evlbbsplatbx = _ida_domain.PPC_evlbbsplatbx

PPC_evlbbsplatb = _ida_domain.PPC_evlbbsplatb

PPC_evstdbx = _ida_domain.PPC_evstdbx

PPC_evstdb = _ida_domain.PPC_evstdb

PPC_evlwbex = _ida_domain.PPC_evlwbex

PPC_evlwbe = _ida_domain.PPC_evlwbe

PPC_evlwboux = _ida_domain.PPC_evlwboux

PPC_evlwbou = _ida_domain.PPC_evlwbou

PPC_evlwbosx = _ida_domain.PPC_evlwbosx

PPC_evlwbos = _ida_domain.PPC_evlwbos

PPC_evstwbex = _ida_domain.PPC_evstwbex

PPC_evstwbe = _ida_domain.PPC_evstwbe

PPC_evstwbox = _ida_domain.PPC_evstwbox

PPC_evstwbo = _ida_domain.PPC_evstwbo

PPC_evstwbx = _ida_domain.PPC_evstwbx

PPC_evstwb = _ida_domain.PPC_evstwb

PPC_evsthbx = _ida_domain.PPC_evsthbx

PPC_evsthb = _ida_domain.PPC_evsthb

PPC_evlddmx = _ida_domain.PPC_evlddmx

PPC_evlddu = _ida_domain.PPC_evlddu

PPC_evldwmx = _ida_domain.PPC_evldwmx

PPC_evldwu = _ida_domain.PPC_evldwu

PPC_evldhmx = _ida_domain.PPC_evldhmx

PPC_evldhu = _ida_domain.PPC_evldhu

PPC_evldbmx = _ida_domain.PPC_evldbmx

PPC_evldbu = _ida_domain.PPC_evldbu

PPC_evlhhesplatmx = _ida_domain.PPC_evlhhesplatmx

PPC_evlhhesplatu = _ida_domain.PPC_evlhhesplatu

PPC_evlhhsplathmx = _ida_domain.PPC_evlhhsplathmx

PPC_evlhhsplathu = _ida_domain.PPC_evlhhsplathu

PPC_evlhhousplatmx = _ida_domain.PPC_evlhhousplatmx

PPC_evlhhousplatu = _ida_domain.PPC_evlhhousplatu

PPC_evlhhossplatmx = _ida_domain.PPC_evlhhossplatmx

PPC_evlhhossplatu = _ida_domain.PPC_evlhhossplatu

PPC_evlwhemx = _ida_domain.PPC_evlwhemx

PPC_evlwheu = _ida_domain.PPC_evlwheu

PPC_evlwbsplatwmx = _ida_domain.PPC_evlwbsplatwmx

PPC_evlwbsplatwu = _ida_domain.PPC_evlwbsplatwu

PPC_evlwhoumx = _ida_domain.PPC_evlwhoumx

PPC_evlwhouu = _ida_domain.PPC_evlwhouu

PPC_evlwhosmx = _ida_domain.PPC_evlwhosmx

PPC_evlwhosu = _ida_domain.PPC_evlwhosu

PPC_evlwwsplatmx = _ida_domain.PPC_evlwwsplatmx

PPC_evlwwsplatu = _ida_domain.PPC_evlwwsplatu

PPC_evlwhsplatwmx = _ida_domain.PPC_evlwhsplatwmx

PPC_evlwhsplatwu = _ida_domain.PPC_evlwhsplatwu

PPC_evlwhsplatmx = _ida_domain.PPC_evlwhsplatmx

PPC_evlwhsplatu = _ida_domain.PPC_evlwhsplatu

PPC_evlbbsplatbmx = _ida_domain.PPC_evlbbsplatbmx

PPC_evlbbsplatbu = _ida_domain.PPC_evlbbsplatbu

PPC_evstddmx = _ida_domain.PPC_evstddmx

PPC_evstddu = _ida_domain.PPC_evstddu

PPC_evstdwmx = _ida_domain.PPC_evstdwmx

PPC_evstdwu = _ida_domain.PPC_evstdwu

PPC_evstdhmx = _ida_domain.PPC_evstdhmx

PPC_evstdhu = _ida_domain.PPC_evstdhu

PPC_evstdbmx = _ida_domain.PPC_evstdbmx

PPC_evstdbu = _ida_domain.PPC_evstdbu

PPC_evlwbemx = _ida_domain.PPC_evlwbemx

PPC_evlwbeu = _ida_domain.PPC_evlwbeu

PPC_evlwboumx = _ida_domain.PPC_evlwboumx

PPC_evlwbouu = _ida_domain.PPC_evlwbouu

PPC_evlwbosmx = _ida_domain.PPC_evlwbosmx

PPC_evlwbosu = _ida_domain.PPC_evlwbosu

PPC_evstwhemx = _ida_domain.PPC_evstwhemx

PPC_evstwheu = _ida_domain.PPC_evstwheu

PPC_evstwbemx = _ida_domain.PPC_evstwbemx

PPC_evstwbeu = _ida_domain.PPC_evstwbeu

PPC_evstwhomx = _ida_domain.PPC_evstwhomx

PPC_evstwhou = _ida_domain.PPC_evstwhou

PPC_evstwbomx = _ida_domain.PPC_evstwbomx

PPC_evstwbou = _ida_domain.PPC_evstwbou

PPC_evstwwemx = _ida_domain.PPC_evstwwemx

PPC_evstwweu = _ida_domain.PPC_evstwweu

PPC_evstwbmx = _ida_domain.PPC_evstwbmx

PPC_evstwbu = _ida_domain.PPC_evstwbu

PPC_evstwwomx = _ida_domain.PPC_evstwwomx

PPC_evstwwou = _ida_domain.PPC_evstwwou

PPC_evsthbmx = _ida_domain.PPC_evsthbmx

PPC_evsthbu = _ida_domain.PPC_evsthbu

PPC_evmhusi = _ida_domain.PPC_evmhusi

PPC_evmhssi = _ida_domain.PPC_evmhssi

PPC_evmhsusi = _ida_domain.PPC_evmhsusi

PPC_evmhssf = _ida_domain.PPC_evmhssf

PPC_evmhumi = _ida_domain.PPC_evmhumi

PPC_evmhssfr = _ida_domain.PPC_evmhssfr

PPC_evmhesumi = _ida_domain.PPC_evmhesumi

PPC_evmhosumi = _ida_domain.PPC_evmhosumi

PPC_evmbeumi = _ida_domain.PPC_evmbeumi

PPC_evmbesmi = _ida_domain.PPC_evmbesmi

PPC_evmbesumi = _ida_domain.PPC_evmbesumi

PPC_evmboumi = _ida_domain.PPC_evmboumi

PPC_evmbosmi = _ida_domain.PPC_evmbosmi

PPC_evmbosumi = _ida_domain.PPC_evmbosumi

PPC_evmhesumia = _ida_domain.PPC_evmhesumia

PPC_evmhosumia = _ida_domain.PPC_evmhosumia

PPC_evmbeumia = _ida_domain.PPC_evmbeumia

PPC_evmbesmia = _ida_domain.PPC_evmbesmia

PPC_evmbesumia = _ida_domain.PPC_evmbesumia

PPC_evmboumia = _ida_domain.PPC_evmboumia

PPC_evmbosmia = _ida_domain.PPC_evmbosmia

PPC_evmbosumia = _ida_domain.PPC_evmbosumia

PPC_evmwusiw = _ida_domain.PPC_evmwusiw

PPC_evmwssiw = _ida_domain.PPC_evmwssiw

PPC_evmwhssfr = _ida_domain.PPC_evmwhssfr

PPC_evmwehgsmfr = _ida_domain.PPC_evmwehgsmfr

PPC_evmwehgsmf = _ida_domain.PPC_evmwehgsmf

PPC_evmwohgsmfr = _ida_domain.PPC_evmwohgsmfr

PPC_evmwohgsmf = _ida_domain.PPC_evmwohgsmf

PPC_evmwhssfra = _ida_domain.PPC_evmwhssfra

PPC_evmwehgsmfra = _ida_domain.PPC_evmwehgsmfra

PPC_evmwehgsmfa = _ida_domain.PPC_evmwehgsmfa

PPC_evmwohgsmfra = _ida_domain.PPC_evmwohgsmfra

PPC_evmwohgsmfa = _ida_domain.PPC_evmwohgsmfa

PPC_evaddusiaa = _ida_domain.PPC_evaddusiaa

PPC_evaddssiaa = _ida_domain.PPC_evaddssiaa

PPC_evsubfusiaa = _ida_domain.PPC_evsubfusiaa

PPC_evsubfssiaa = _ida_domain.PPC_evsubfssiaa

PPC_evaddsmiaa = _ida_domain.PPC_evaddsmiaa

PPC_evsubfsmiaa = _ida_domain.PPC_evsubfsmiaa

PPC_evaddh = _ida_domain.PPC_evaddh

PPC_evaddhss = _ida_domain.PPC_evaddhss

PPC_evsubfh = _ida_domain.PPC_evsubfh

PPC_evsubfhss = _ida_domain.PPC_evsubfhss

PPC_evaddhx = _ida_domain.PPC_evaddhx

PPC_evaddhxss = _ida_domain.PPC_evaddhxss

PPC_evsubfhx = _ida_domain.PPC_evsubfhx

PPC_evsubfhxss = _ida_domain.PPC_evsubfhxss

PPC_evaddd = _ida_domain.PPC_evaddd

PPC_evadddss = _ida_domain.PPC_evadddss

PPC_evsubfd = _ida_domain.PPC_evsubfd

PPC_evsubfdss = _ida_domain.PPC_evsubfdss

PPC_evaddb = _ida_domain.PPC_evaddb

PPC_evaddbss = _ida_domain.PPC_evaddbss

PPC_evsubfb = _ida_domain.PPC_evsubfb

PPC_evsubfbss = _ida_domain.PPC_evsubfbss

PPC_evaddsubfh = _ida_domain.PPC_evaddsubfh

PPC_evaddsubfhss = _ida_domain.PPC_evaddsubfhss

PPC_evsubfaddh = _ida_domain.PPC_evsubfaddh

PPC_evsubfaddhss = _ida_domain.PPC_evsubfaddhss

PPC_evaddsubfhx = _ida_domain.PPC_evaddsubfhx

PPC_evaddsubfhxss = _ida_domain.PPC_evaddsubfhxss

PPC_evsubfaddhx = _ida_domain.PPC_evsubfaddhx

PPC_evsubfaddhxss = _ida_domain.PPC_evsubfaddhxss

PPC_evadddus = _ida_domain.PPC_evadddus

PPC_evaddbus = _ida_domain.PPC_evaddbus

PPC_evsubfdus = _ida_domain.PPC_evsubfdus

PPC_evsubfbus = _ida_domain.PPC_evsubfbus

PPC_evaddwus = _ida_domain.PPC_evaddwus

PPC_evaddwxus = _ida_domain.PPC_evaddwxus

PPC_evsubfwus = _ida_domain.PPC_evsubfwus

PPC_evsubfwxus = _ida_domain.PPC_evsubfwxus

PPC_evadd2subf2h = _ida_domain.PPC_evadd2subf2h

PPC_evadd2subf2hss = _ida_domain.PPC_evadd2subf2hss

PPC_evsubf2add2h = _ida_domain.PPC_evsubf2add2h

PPC_evsubf2add2hss = _ida_domain.PPC_evsubf2add2hss

PPC_evaddhus = _ida_domain.PPC_evaddhus

PPC_evaddhxus = _ida_domain.PPC_evaddhxus

PPC_evsubfhus = _ida_domain.PPC_evsubfhus

PPC_evsubfhxus = _ida_domain.PPC_evsubfhxus

PPC_evaddwss = _ida_domain.PPC_evaddwss

PPC_evsubfwss = _ida_domain.PPC_evsubfwss

PPC_evaddwx = _ida_domain.PPC_evaddwx

PPC_evaddwxss = _ida_domain.PPC_evaddwxss

PPC_evsubfwx = _ida_domain.PPC_evsubfwx

PPC_evsubfwxss = _ida_domain.PPC_evsubfwxss

PPC_evaddsubfw = _ida_domain.PPC_evaddsubfw

PPC_evaddsubfwss = _ida_domain.PPC_evaddsubfwss

PPC_evsubfaddw = _ida_domain.PPC_evsubfaddw

PPC_evsubfaddwss = _ida_domain.PPC_evsubfaddwss

PPC_evaddsubfwx = _ida_domain.PPC_evaddsubfwx

PPC_evaddsubfwxss = _ida_domain.PPC_evaddsubfwxss

PPC_evsubfaddwx = _ida_domain.PPC_evsubfaddwx

PPC_evsubfaddwxss = _ida_domain.PPC_evsubfaddwxss

PPC_evmar = _ida_domain.PPC_evmar

PPC_evsumwu = _ida_domain.PPC_evsumwu

PPC_evsumws = _ida_domain.PPC_evsumws

PPC_evsum4bu = _ida_domain.PPC_evsum4bu

PPC_evsum4bs = _ida_domain.PPC_evsum4bs

PPC_evsum2hu = _ida_domain.PPC_evsum2hu

PPC_evsum2hs = _ida_domain.PPC_evsum2hs

PPC_evdiff2his = _ida_domain.PPC_evdiff2his

PPC_evsum2his = _ida_domain.PPC_evsum2his

PPC_evsumwua = _ida_domain.PPC_evsumwua

PPC_evsumwsa = _ida_domain.PPC_evsumwsa

PPC_evsum4bua = _ida_domain.PPC_evsum4bua

PPC_evsum4bsa = _ida_domain.PPC_evsum4bsa

PPC_evsum2hua = _ida_domain.PPC_evsum2hua

PPC_evsum2hsa = _ida_domain.PPC_evsum2hsa

PPC_evdiff2hisa = _ida_domain.PPC_evdiff2hisa

PPC_evsum2hisa = _ida_domain.PPC_evsum2hisa

PPC_evsumwuaa = _ida_domain.PPC_evsumwuaa

PPC_evsumwsaa = _ida_domain.PPC_evsumwsaa

PPC_evsum4buaaw = _ida_domain.PPC_evsum4buaaw

PPC_evsum4bsaaw = _ida_domain.PPC_evsum4bsaaw

PPC_evsum2huaaw = _ida_domain.PPC_evsum2huaaw

PPC_evsum2hsaaw = _ida_domain.PPC_evsum2hsaaw

PPC_evdiff2hisaaw = _ida_domain.PPC_evdiff2hisaaw

PPC_evsum2hisaaw = _ida_domain.PPC_evsum2hisaaw

PPC_evdivwsf = _ida_domain.PPC_evdivwsf

PPC_evdivwuf = _ida_domain.PPC_evdivwuf

PPC_evdivs = _ida_domain.PPC_evdivs

PPC_evdivu = _ida_domain.PPC_evdivu

PPC_evaddwegsi = _ida_domain.PPC_evaddwegsi

PPC_evaddwegsf = _ida_domain.PPC_evaddwegsf

PPC_evsubfwegsi = _ida_domain.PPC_evsubfwegsi

PPC_evsubfwegsf = _ida_domain.PPC_evsubfwegsf

PPC_evaddwogsi = _ida_domain.PPC_evaddwogsi

PPC_evaddwogsf = _ida_domain.PPC_evaddwogsf

PPC_evsubfwogsi = _ida_domain.PPC_evsubfwogsi

PPC_evsubfwogsf = _ida_domain.PPC_evsubfwogsf

PPC_evaddhhiuw = _ida_domain.PPC_evaddhhiuw

PPC_evaddhhisw = _ida_domain.PPC_evaddhhisw

PPC_evsubfhhiuw = _ida_domain.PPC_evsubfhhiuw

PPC_evsubfhhisw = _ida_domain.PPC_evsubfhhisw

PPC_evaddhlouw = _ida_domain.PPC_evaddhlouw

PPC_evaddhlosw = _ida_domain.PPC_evaddhlosw

PPC_evsubfhlouw = _ida_domain.PPC_evsubfhlouw

PPC_evsubfhlosw = _ida_domain.PPC_evsubfhlosw

PPC_evmhesusiaaw = _ida_domain.PPC_evmhesusiaaw

PPC_evmhosusiaaw = _ida_domain.PPC_evmhosusiaaw

PPC_evmhesumiaaw = _ida_domain.PPC_evmhesumiaaw

PPC_evmhosumiaaw = _ida_domain.PPC_evmhosumiaaw

PPC_evmbeusiaah = _ida_domain.PPC_evmbeusiaah

PPC_evmbessiaah = _ida_domain.PPC_evmbessiaah

PPC_evmbesusiaah = _ida_domain.PPC_evmbesusiaah

PPC_evmbousiaah = _ida_domain.PPC_evmbousiaah

PPC_evmbossiaah = _ida_domain.PPC_evmbossiaah

PPC_evmbosusiaah = _ida_domain.PPC_evmbosusiaah

PPC_evmbeumiaah = _ida_domain.PPC_evmbeumiaah

PPC_evmbesmiaah = _ida_domain.PPC_evmbesmiaah

PPC_evmbesumiaah = _ida_domain.PPC_evmbesumiaah

PPC_evmboumiaah = _ida_domain.PPC_evmboumiaah

PPC_evmbosmiaah = _ida_domain.PPC_evmbosmiaah

PPC_evmbosumiaah = _ida_domain.PPC_evmbosumiaah

PPC_evmwlusiaaw3 = _ida_domain.PPC_evmwlusiaaw3

PPC_evmwlssiaaw3 = _ida_domain.PPC_evmwlssiaaw3

PPC_evmwhssfraaw3 = _ida_domain.PPC_evmwhssfraaw3

PPC_evmwhssfaaw3 = _ida_domain.PPC_evmwhssfaaw3

PPC_evmwhssfraaw = _ida_domain.PPC_evmwhssfraaw

PPC_evmwhssfaaw = _ida_domain.PPC_evmwhssfaaw

PPC_evmwlumiaaw3 = _ida_domain.PPC_evmwlumiaaw3

PPC_evmwlsmiaaw3 = _ida_domain.PPC_evmwlsmiaaw3

PPC_evmwusiaa = _ida_domain.PPC_evmwusiaa

PPC_evmwssiaa = _ida_domain.PPC_evmwssiaa

PPC_evmwehgsmfraa = _ida_domain.PPC_evmwehgsmfraa

PPC_evmwehgsmfaa = _ida_domain.PPC_evmwehgsmfaa

PPC_evmwohgsmfraa = _ida_domain.PPC_evmwohgsmfraa

PPC_evmwohgsmfaa = _ida_domain.PPC_evmwohgsmfaa

PPC_evmhesusianw = _ida_domain.PPC_evmhesusianw

PPC_evmhosusianw = _ida_domain.PPC_evmhosusianw

PPC_evmhesumianw = _ida_domain.PPC_evmhesumianw

PPC_evmhosumianw = _ida_domain.PPC_evmhosumianw

PPC_evmbeusianh = _ida_domain.PPC_evmbeusianh

PPC_evmbessianh = _ida_domain.PPC_evmbessianh

PPC_evmbesusianh = _ida_domain.PPC_evmbesusianh

PPC_evmbousianh = _ida_domain.PPC_evmbousianh

PPC_evmbossianh = _ida_domain.PPC_evmbossianh

PPC_evmbosusianh = _ida_domain.PPC_evmbosusianh

PPC_evmbeumianh = _ida_domain.PPC_evmbeumianh

PPC_evmbesmianh = _ida_domain.PPC_evmbesmianh

PPC_evmbesumianh = _ida_domain.PPC_evmbesumianh

PPC_evmboumianh = _ida_domain.PPC_evmboumianh

PPC_evmbosmianh = _ida_domain.PPC_evmbosmianh

PPC_evmbosumianh = _ida_domain.PPC_evmbosumianh

PPC_evmwlusianw3 = _ida_domain.PPC_evmwlusianw3

PPC_evmwlssianw3 = _ida_domain.PPC_evmwlssianw3

PPC_evmwhssfranw3 = _ida_domain.PPC_evmwhssfranw3

PPC_evmwhssfanw3 = _ida_domain.PPC_evmwhssfanw3

PPC_evmwhssfranw = _ida_domain.PPC_evmwhssfranw

PPC_evmwhssfanw = _ida_domain.PPC_evmwhssfanw

PPC_evmwlumianw3 = _ida_domain.PPC_evmwlumianw3

PPC_evmwlsmianw3 = _ida_domain.PPC_evmwlsmianw3

PPC_evmwusian = _ida_domain.PPC_evmwusian

PPC_evmwssian = _ida_domain.PPC_evmwssian

PPC_evmwehgsmfran = _ida_domain.PPC_evmwehgsmfran

PPC_evmwehgsmfan = _ida_domain.PPC_evmwehgsmfan

PPC_evmwohgsmfran = _ida_domain.PPC_evmwohgsmfran

PPC_evmwohgsmfan = _ida_domain.PPC_evmwohgsmfan

PPC_evseteqb = _ida_domain.PPC_evseteqb

PPC_evseteqh = _ida_domain.PPC_evseteqh

PPC_evseteqw = _ida_domain.PPC_evseteqw

PPC_evsetgthu = _ida_domain.PPC_evsetgthu

PPC_evsetgths = _ida_domain.PPC_evsetgths

PPC_evsetgtwu = _ida_domain.PPC_evsetgtwu

PPC_evsetgtws = _ida_domain.PPC_evsetgtws

PPC_evsetgtbu = _ida_domain.PPC_evsetgtbu

PPC_evsetgtbs = _ida_domain.PPC_evsetgtbs

PPC_evsetltbu = _ida_domain.PPC_evsetltbu

PPC_evsetltbs = _ida_domain.PPC_evsetltbs

PPC_evsetlthu = _ida_domain.PPC_evsetlthu

PPC_evsetlths = _ida_domain.PPC_evsetlths

PPC_evsetltwu = _ida_domain.PPC_evsetltwu

PPC_evsetltws = _ida_domain.PPC_evsetltws

PPC_evsaduw = _ida_domain.PPC_evsaduw

PPC_evsadsw = _ida_domain.PPC_evsadsw

PPC_evsad4ub = _ida_domain.PPC_evsad4ub

PPC_evsad4sb = _ida_domain.PPC_evsad4sb

PPC_evsad2uh = _ida_domain.PPC_evsad2uh

PPC_evsad2sh = _ida_domain.PPC_evsad2sh

PPC_evsaduwa = _ida_domain.PPC_evsaduwa

PPC_evsadswa = _ida_domain.PPC_evsadswa

PPC_evsad4uba = _ida_domain.PPC_evsad4uba

PPC_evsad4sba = _ida_domain.PPC_evsad4sba

PPC_evsad2uha = _ida_domain.PPC_evsad2uha

PPC_evsad2sha = _ida_domain.PPC_evsad2sha

PPC_evabsdifuw = _ida_domain.PPC_evabsdifuw

PPC_evabsdifsw = _ida_domain.PPC_evabsdifsw

PPC_evabsdifub = _ida_domain.PPC_evabsdifub

PPC_evabsdifsb = _ida_domain.PPC_evabsdifsb

PPC_evabsdifuh = _ida_domain.PPC_evabsdifuh

PPC_evabsdifsh = _ida_domain.PPC_evabsdifsh

PPC_evsaduwaa = _ida_domain.PPC_evsaduwaa

PPC_evsadswaa = _ida_domain.PPC_evsadswaa

PPC_evsad4ubaaw = _ida_domain.PPC_evsad4ubaaw

PPC_evsad4sbaaw = _ida_domain.PPC_evsad4sbaaw

PPC_evsad2uhaaw = _ida_domain.PPC_evsad2uhaaw

PPC_evsad2shaaw = _ida_domain.PPC_evsad2shaaw

PPC_evpkshubs = _ida_domain.PPC_evpkshubs

PPC_evpkshsbs = _ida_domain.PPC_evpkshsbs

PPC_evpkswuhs = _ida_domain.PPC_evpkswuhs

PPC_evpkswshs = _ida_domain.PPC_evpkswshs

PPC_evpkuhubs = _ida_domain.PPC_evpkuhubs

PPC_evpkuwuhs = _ida_domain.PPC_evpkuwuhs

PPC_evpkswshilvs = _ida_domain.PPC_evpkswshilvs

PPC_evpkswgshefrs = _ida_domain.PPC_evpkswgshefrs

PPC_evpkswshfrs = _ida_domain.PPC_evpkswshfrs

PPC_evpkswshilvfrs = _ida_domain.PPC_evpkswshilvfrs

PPC_evpksdswfrs = _ida_domain.PPC_evpksdswfrs

PPC_evpksdshefrs = _ida_domain.PPC_evpksdshefrs

PPC_evpkuduws = _ida_domain.PPC_evpkuduws

PPC_evpksdsws = _ida_domain.PPC_evpksdsws

PPC_evpkswgswfrs = _ida_domain.PPC_evpkswgswfrs

PPC_evilveh = _ida_domain.PPC_evilveh

PPC_evilveoh = _ida_domain.PPC_evilveoh

PPC_evilvhih = _ida_domain.PPC_evilvhih

PPC_evilvhiloh = _ida_domain.PPC_evilvhiloh

PPC_evilvloh = _ida_domain.PPC_evilvloh

PPC_evilvlohih = _ida_domain.PPC_evilvlohih

PPC_evilvoeh = _ida_domain.PPC_evilvoeh

PPC_evilvoh = _ida_domain.PPC_evilvoh

PPC_evdlveb = _ida_domain.PPC_evdlveb

PPC_evdlveh = _ida_domain.PPC_evdlveh

PPC_evdlveob = _ida_domain.PPC_evdlveob

PPC_evdlveoh = _ida_domain.PPC_evdlveoh

PPC_evdlvob = _ida_domain.PPC_evdlvob

PPC_evdlvoh = _ida_domain.PPC_evdlvoh

PPC_evdlvoeb = _ida_domain.PPC_evdlvoeb

PPC_evdlvoeh = _ida_domain.PPC_evdlvoeh

PPC_evmaxbu = _ida_domain.PPC_evmaxbu

PPC_evmaxbs = _ida_domain.PPC_evmaxbs

PPC_evmaxhu = _ida_domain.PPC_evmaxhu

PPC_evmaxhs = _ida_domain.PPC_evmaxhs

PPC_evmaxwu = _ida_domain.PPC_evmaxwu

PPC_evmaxws = _ida_domain.PPC_evmaxws

PPC_evmaxdu = _ida_domain.PPC_evmaxdu

PPC_evmaxds = _ida_domain.PPC_evmaxds

PPC_evminbu = _ida_domain.PPC_evminbu

PPC_evminbs = _ida_domain.PPC_evminbs

PPC_evminhu = _ida_domain.PPC_evminhu

PPC_evminhs = _ida_domain.PPC_evminhs

PPC_evminwu = _ida_domain.PPC_evminwu

PPC_evminws = _ida_domain.PPC_evminws

PPC_evmindu = _ida_domain.PPC_evmindu

PPC_evminds = _ida_domain.PPC_evminds

PPC_evavgwu = _ida_domain.PPC_evavgwu

PPC_evavgws = _ida_domain.PPC_evavgws

PPC_evavgbu = _ida_domain.PPC_evavgbu

PPC_evavgbs = _ida_domain.PPC_evavgbs

PPC_evavghu = _ida_domain.PPC_evavghu

PPC_evavghs = _ida_domain.PPC_evavghs

PPC_evavgdu = _ida_domain.PPC_evavgdu

PPC_evavgds = _ida_domain.PPC_evavgds

PPC_evavgwur = _ida_domain.PPC_evavgwur

PPC_evavgwsr = _ida_domain.PPC_evavgwsr

PPC_evavgbur = _ida_domain.PPC_evavgbur

PPC_evavgbsr = _ida_domain.PPC_evavgbsr

PPC_evavghur = _ida_domain.PPC_evavghur

PPC_evavghsr = _ida_domain.PPC_evavghsr

PPC_evavgdur = _ida_domain.PPC_evavgdur

PPC_evavgdsr = _ida_domain.PPC_evavgdsr

PPC_tdui = _ida_domain.PPC_tdui

PPC_tdu = _ida_domain.PPC_tdu

PPC_twui = _ida_domain.PPC_twui

PPC_twu = _ida_domain.PPC_twu

PPC_bctar = _ida_domain.PPC_bctar

PPC_clrbhrb = _ida_domain.PPC_clrbhrb

PPC_mfbhrbe = _ida_domain.PPC_mfbhrbe

PPC_mtsle = _ida_domain.PPC_mtsle

PPC_mfvsrd = _ida_domain.PPC_mfvsrd

PPC_mfvsrwz = _ida_domain.PPC_mfvsrwz

PPC_mtvsrd = _ida_domain.PPC_mtvsrd

PPC_mtvsrwa = _ida_domain.PPC_mtvsrwa

PPC_mtvsrwz = _ida_domain.PPC_mtvsrwz

PPC_fmrgew = _ida_domain.PPC_fmrgew

PPC_fmrgow = _ida_domain.PPC_fmrgow

PPC_vpksdss = _ida_domain.PPC_vpksdss

PPC_vpksdus = _ida_domain.PPC_vpksdus

PPC_vpkudus = _ida_domain.PPC_vpkudus

PPC_vpkudum = _ida_domain.PPC_vpkudum

PPC_vupkhsw = _ida_domain.PPC_vupkhsw

PPC_vupklsw = _ida_domain.PPC_vupklsw

PPC_vmrgew = _ida_domain.PPC_vmrgew

PPC_vmrgow = _ida_domain.PPC_vmrgow

PPC_vaddudm = _ida_domain.PPC_vaddudm

PPC_vadduqm = _ida_domain.PPC_vadduqm

PPC_vaddeuqm = _ida_domain.PPC_vaddeuqm

PPC_vaddcuq = _ida_domain.PPC_vaddcuq

PPC_vaddecuq = _ida_domain.PPC_vaddecuq

PPC_vsubudm = _ida_domain.PPC_vsubudm

PPC_vsubuqm = _ida_domain.PPC_vsubuqm

PPC_vsubeuqm = _ida_domain.PPC_vsubeuqm

PPC_vsubcuq = _ida_domain.PPC_vsubcuq

PPC_vsubecuq = _ida_domain.PPC_vsubecuq

PPC_vmulesw = _ida_domain.PPC_vmulesw

PPC_vmuleuw = _ida_domain.PPC_vmuleuw

PPC_vmulosw = _ida_domain.PPC_vmulosw

PPC_vmulouw = _ida_domain.PPC_vmulouw

PPC_vmuluwm = _ida_domain.PPC_vmuluwm

PPC_vmaxsd = _ida_domain.PPC_vmaxsd

PPC_vmaxud = _ida_domain.PPC_vmaxud

PPC_vminsd = _ida_domain.PPC_vminsd

PPC_vminud = _ida_domain.PPC_vminud

PPC_vcmpequd = _ida_domain.PPC_vcmpequd

PPC_vcmpgtsd = _ida_domain.PPC_vcmpgtsd

PPC_vcmpgtud = _ida_domain.PPC_vcmpgtud

PPC_veqv = _ida_domain.PPC_veqv

PPC_vnand = _ida_domain.PPC_vnand

PPC_vorc = _ida_domain.PPC_vorc

PPC_vrld = _ida_domain.PPC_vrld

PPC_vsld = _ida_domain.PPC_vsld

PPC_vsrd = _ida_domain.PPC_vsrd

PPC_vsrad = _ida_domain.PPC_vsrad

PPC_vcipher = _ida_domain.PPC_vcipher

PPC_vcipherlast = _ida_domain.PPC_vcipherlast

PPC_vncipher = _ida_domain.PPC_vncipher

PPC_vncipherlast = _ida_domain.PPC_vncipherlast

PPC_vsbox = _ida_domain.PPC_vsbox

PPC_vshasigmad = _ida_domain.PPC_vshasigmad

PPC_vshasigmaw = _ida_domain.PPC_vshasigmaw

PPC_vpmsumb = _ida_domain.PPC_vpmsumb

PPC_vpmsumd = _ida_domain.PPC_vpmsumd

PPC_vpmsumh = _ida_domain.PPC_vpmsumh

PPC_vpmsumw = _ida_domain.PPC_vpmsumw

PPC_vpermxor = _ida_domain.PPC_vpermxor

PPC_vgbbd = _ida_domain.PPC_vgbbd

PPC_vclzb = _ida_domain.PPC_vclzb

PPC_vclzh = _ida_domain.PPC_vclzh

PPC_vclzw = _ida_domain.PPC_vclzw

PPC_vclzd = _ida_domain.PPC_vclzd

PPC_vpopcntb = _ida_domain.PPC_vpopcntb

PPC_vpopcntd = _ida_domain.PPC_vpopcntd

PPC_vpopcnth = _ida_domain.PPC_vpopcnth

PPC_vpopcntw = _ida_domain.PPC_vpopcntw

PPC_vbpermq = _ida_domain.PPC_vbpermq

PPC_bcdadd = _ida_domain.PPC_bcdadd

PPC_bcdsub = _ida_domain.PPC_bcdsub

PPC_lxsiwax = _ida_domain.PPC_lxsiwax

PPC_lxsspx = _ida_domain.PPC_lxsspx

PPC_lxsiwzx = _ida_domain.PPC_lxsiwzx

PPC_stxsiwx = _ida_domain.PPC_stxsiwx

PPC_stxsspx = _ida_domain.PPC_stxsspx

PPC_xsaddsp = _ida_domain.PPC_xsaddsp

PPC_xscvdpspn = _ida_domain.PPC_xscvdpspn

PPC_xscvspdpn = _ida_domain.PPC_xscvspdpn

PPC_xscvsxdsp = _ida_domain.PPC_xscvsxdsp

PPC_xscvuxdsp = _ida_domain.PPC_xscvuxdsp

PPC_xsdivsp = _ida_domain.PPC_xsdivsp

PPC_xsmaddasp = _ida_domain.PPC_xsmaddasp

PPC_xsmaddmsp = _ida_domain.PPC_xsmaddmsp

PPC_xsmsubasp = _ida_domain.PPC_xsmsubasp

PPC_xsmsubmsp = _ida_domain.PPC_xsmsubmsp

PPC_xsmulsp = _ida_domain.PPC_xsmulsp

PPC_xsnmaddasp = _ida_domain.PPC_xsnmaddasp

PPC_xsnmaddmsp = _ida_domain.PPC_xsnmaddmsp

PPC_xsnmsubasp = _ida_domain.PPC_xsnmsubasp

PPC_xsnmsubmsp = _ida_domain.PPC_xsnmsubmsp

PPC_xsresp = _ida_domain.PPC_xsresp

PPC_xsrsp = _ida_domain.PPC_xsrsp

PPC_xsrsqrtesp = _ida_domain.PPC_xsrsqrtesp

PPC_xssqrtsp = _ida_domain.PPC_xssqrtsp

PPC_xssubsp = _ida_domain.PPC_xssubsp

PPC_xxleqv = _ida_domain.PPC_xxleqv

PPC_xxlnand = _ida_domain.PPC_xxlnand

PPC_xxlorc = _ida_domain.PPC_xxlorc

PPC_lqarx = _ida_domain.PPC_lqarx

PPC_stqcx = _ida_domain.PPC_stqcx

PPC_tbegin = _ida_domain.PPC_tbegin

PPC_tend = _ida_domain.PPC_tend

PPC_tabort = _ida_domain.PPC_tabort

PPC_tabortwc = _ida_domain.PPC_tabortwc

PPC_tabortwci = _ida_domain.PPC_tabortwci

PPC_tabortdc = _ida_domain.PPC_tabortdc

PPC_tabortdci = _ida_domain.PPC_tabortdci

PPC_tsr = _ida_domain.PPC_tsr

PPC_tcheck = _ida_domain.PPC_tcheck

PPC_rfebb = _ida_domain.PPC_rfebb

PPC_treclaim = _ida_domain.PPC_treclaim

PPC_trechkpt = _ida_domain.PPC_trechkpt

PPC_msgsndp = _ida_domain.PPC_msgsndp

PPC_msgclrp = _ida_domain.PPC_msgclrp

PPC_dcblq = _ida_domain.PPC_dcblq

PPC_icblq = _ida_domain.PPC_icblq

PPC_vmr = _ida_domain.PPC_vmr

PPC_vnot = _ida_domain.PPC_vnot

PPC_tendall = _ida_domain.PPC_tendall

PPC_tsuspend = _ida_domain.PPC_tsuspend

PPC_tresume = _ida_domain.PPC_tresume

PPC_mtppr = _ida_domain.PPC_mtppr

PPC_mfppr = _ida_domain.PPC_mfppr

PPC_mtppr32 = _ida_domain.PPC_mtppr32

PPC_mfppr32 = _ida_domain.PPC_mfppr32

PPC_mtic = _ida_domain.PPC_mtic

PPC_mfic = _ida_domain.PPC_mfic

PPC_mtvtb = _ida_domain.PPC_mtvtb

PPC_mfvtb = _ida_domain.PPC_mfvtb

PPC_miso = _ida_domain.PPC_miso

PPC_mdoio = _ida_domain.PPC_mdoio

PPC_mdoom = _ida_domain.PPC_mdoom

PPC_yield = _ida_domain.PPC_yield

PPC_addbss = _ida_domain.PPC_addbss

PPC_addhss = _ida_domain.PPC_addhss

PPC_addwss = _ida_domain.PPC_addwss

PPC_addbus = _ida_domain.PPC_addbus

PPC_addhus = _ida_domain.PPC_addhus

PPC_addwus = _ida_domain.PPC_addwus

PPC_mulhss = _ida_domain.PPC_mulhss

PPC_mulwss = _ida_domain.PPC_mulwss

PPC_mulhus = _ida_domain.PPC_mulhus

PPC_mulwus = _ida_domain.PPC_mulwus

PPC_sat = _ida_domain.PPC_sat

PPC_subfbss = _ida_domain.PPC_subfbss

PPC_subfhss = _ida_domain.PPC_subfhss

PPC_subfwss = _ida_domain.PPC_subfwss

PPC_subfbus = _ida_domain.PPC_subfbus

PPC_subfhus = _ida_domain.PPC_subfhus

PPC_subfwus = _ida_domain.PPC_subfwus

PPC_satsbs = _ida_domain.PPC_satsbs

PPC_satubs = _ida_domain.PPC_satubs

PPC_satsbu = _ida_domain.PPC_satsbu

PPC_satubu = _ida_domain.PPC_satubu

PPC_abssb = _ida_domain.PPC_abssb

PPC_absub = _ida_domain.PPC_absub

PPC_satshs = _ida_domain.PPC_satshs

PPC_satuhs = _ida_domain.PPC_satuhs

PPC_satshu = _ida_domain.PPC_satshu

PPC_satuhu = _ida_domain.PPC_satuhu

PPC_abssh = _ida_domain.PPC_abssh

PPC_absuh = _ida_domain.PPC_absuh

PPC_satsws = _ida_domain.PPC_satsws

PPC_satuws = _ida_domain.PPC_satuws

PPC_satswu = _ida_domain.PPC_satswu

PPC_satuwu = _ida_domain.PPC_satuwu

PPC_abssw = _ida_domain.PPC_abssw

PPC_absuw = _ida_domain.PPC_absuw

PPC_dni = _ida_domain.PPC_dni

PPC_slbieg = _ida_domain.PPC_slbieg

PPC_slbiag = _ida_domain.PPC_slbiag

PPC_slbsync = _ida_domain.PPC_slbsync

PPC_addpcis = _ida_domain.PPC_addpcis

PPC_lnia = _ida_domain.PPC_lnia

PPC_subpcis = _ida_domain.PPC_subpcis

PPC_cmpeqb = _ida_domain.PPC_cmpeqb

PPC_cmprb = _ida_domain.PPC_cmprb

PPC_cnttzw = _ida_domain.PPC_cnttzw

PPC_cnttzd = _ida_domain.PPC_cnttzd

PPC_darn = _ida_domain.PPC_darn

PPC_extswsli = _ida_domain.PPC_extswsli

PPC_maddhd = _ida_domain.PPC_maddhd

PPC_maddhdu = _ida_domain.PPC_maddhdu

PPC_maddld = _ida_domain.PPC_maddld

PPC_mcrxrx = _ida_domain.PPC_mcrxrx

PPC_setb = _ida_domain.PPC_setb

PPC_modsd = _ida_domain.PPC_modsd

PPC_modud = _ida_domain.PPC_modud

PPC_modsw = _ida_domain.PPC_modsw

PPC_moduw = _ida_domain.PPC_moduw

PPC_mfvsrld = _ida_domain.PPC_mfvsrld

PPC_mtvsrdd = _ida_domain.PPC_mtvsrdd

PPC_mtvsrws = _ida_domain.PPC_mtvsrws

PPC_scv = _ida_domain.PPC_scv

PPC_rfscv = _ida_domain.PPC_rfscv

PPC_stop = _ida_domain.PPC_stop

PPC_copy = _ida_domain.PPC_copy

PPC_paste = _ida_domain.PPC_paste

PPC_ldat = _ida_domain.PPC_ldat

PPC_lwat = _ida_domain.PPC_lwat

PPC_stdat = _ida_domain.PPC_stdat

PPC_stwat = _ida_domain.PPC_stwat

PPC_cpabort = _ida_domain.PPC_cpabort

PPC_wait30 = _ida_domain.PPC_wait30

PPC_dtstsfi = _ida_domain.PPC_dtstsfi

PPC_dtstsfiq = _ida_domain.PPC_dtstsfiq

PPC_bcdcfn = _ida_domain.PPC_bcdcfn

PPC_bcdcfz = _ida_domain.PPC_bcdcfz

PPC_bcdctn = _ida_domain.PPC_bcdctn

PPC_bcdctz = _ida_domain.PPC_bcdctz

PPC_bcdctsq = _ida_domain.PPC_bcdctsq

PPC_bcdcfsq = _ida_domain.PPC_bcdcfsq

PPC_bcdsetsgn = _ida_domain.PPC_bcdsetsgn

PPC_bcdcpsgn = _ida_domain.PPC_bcdcpsgn

PPC_bcds = _ida_domain.PPC_bcds

PPC_bcdus = _ida_domain.PPC_bcdus

PPC_bcdsr = _ida_domain.PPC_bcdsr

PPC_bcdtrunc = _ida_domain.PPC_bcdtrunc

PPC_bcdutrunc = _ida_domain.PPC_bcdutrunc

PPC_vabsdub = _ida_domain.PPC_vabsdub

PPC_vabsduh = _ida_domain.PPC_vabsduh

PPC_vabsduw = _ida_domain.PPC_vabsduw

PPC_vbpermd = _ida_domain.PPC_vbpermd

PPC_vclzlsbb = _ida_domain.PPC_vclzlsbb

PPC_vctzlsbb = _ida_domain.PPC_vctzlsbb

PPC_vcmpneb = _ida_domain.PPC_vcmpneb

PPC_vcmpnezb = _ida_domain.PPC_vcmpnezb

PPC_vcmpneh = _ida_domain.PPC_vcmpneh

PPC_vcmpnezh = _ida_domain.PPC_vcmpnezh

PPC_vcmpnew = _ida_domain.PPC_vcmpnew

PPC_vcmpnezw = _ida_domain.PPC_vcmpnezw

PPC_vctzb = _ida_domain.PPC_vctzb

PPC_vctzh = _ida_domain.PPC_vctzh

PPC_vctzw = _ida_domain.PPC_vctzw

PPC_vctzd = _ida_domain.PPC_vctzd

PPC_vextractub = _ida_domain.PPC_vextractub

PPC_vextractuh = _ida_domain.PPC_vextractuh

PPC_vextractuw = _ida_domain.PPC_vextractuw

PPC_vextractd = _ida_domain.PPC_vextractd

PPC_vextsb2w = _ida_domain.PPC_vextsb2w

PPC_vextsb2d = _ida_domain.PPC_vextsb2d

PPC_vextsh2w = _ida_domain.PPC_vextsh2w

PPC_vextsh2d = _ida_domain.PPC_vextsh2d

PPC_vextsw2d = _ida_domain.PPC_vextsw2d

PPC_vextublx = _ida_domain.PPC_vextublx

PPC_vextubrx = _ida_domain.PPC_vextubrx

PPC_vextuhlx = _ida_domain.PPC_vextuhlx

PPC_vextuhrx = _ida_domain.PPC_vextuhrx

PPC_vextuwlx = _ida_domain.PPC_vextuwlx

PPC_vextuwrx = _ida_domain.PPC_vextuwrx

PPC_vinsertb = _ida_domain.PPC_vinsertb

PPC_vinserth = _ida_domain.PPC_vinserth

PPC_vinsertw = _ida_domain.PPC_vinsertw

PPC_vinsertd = _ida_domain.PPC_vinsertd

PPC_vmul10uq = _ida_domain.PPC_vmul10uq

PPC_vmul10euq = _ida_domain.PPC_vmul10euq

PPC_vmul10cuq = _ida_domain.PPC_vmul10cuq

PPC_vmul10ecuq = _ida_domain.PPC_vmul10ecuq

PPC_vnegw = _ida_domain.PPC_vnegw

PPC_vnegd = _ida_domain.PPC_vnegd

PPC_vpermr = _ida_domain.PPC_vpermr

PPC_vprtybw = _ida_domain.PPC_vprtybw

PPC_vprtybd = _ida_domain.PPC_vprtybd

PPC_vprtybq = _ida_domain.PPC_vprtybq

PPC_vrlwnm = _ida_domain.PPC_vrlwnm

PPC_vrlwmi = _ida_domain.PPC_vrlwmi

PPC_vrldnm = _ida_domain.PPC_vrldnm

PPC_vrldmi = _ida_domain.PPC_vrldmi

PPC_vslv = _ida_domain.PPC_vslv

PPC_vsrv = _ida_domain.PPC_vsrv

PPC_lxsd = _ida_domain.PPC_lxsd

PPC_lxssp = _ida_domain.PPC_lxssp

PPC_lxsibzx = _ida_domain.PPC_lxsibzx

PPC_lxsihzx = _ida_domain.PPC_lxsihzx

PPC_lxv = _ida_domain.PPC_lxv

PPC_lxvb16x = _ida_domain.PPC_lxvb16x

PPC_lxvh8x = _ida_domain.PPC_lxvh8x

PPC_lxvl = _ida_domain.PPC_lxvl

PPC_lxvll = _ida_domain.PPC_lxvll

PPC_lxvwsx = _ida_domain.PPC_lxvwsx

PPC_lxvx = _ida_domain.PPC_lxvx

PPC_stxsd = _ida_domain.PPC_stxsd

PPC_stxsibx = _ida_domain.PPC_stxsibx

PPC_stxsihx = _ida_domain.PPC_stxsihx

PPC_stxssp = _ida_domain.PPC_stxssp

PPC_stxv = _ida_domain.PPC_stxv

PPC_stxvb16x = _ida_domain.PPC_stxvb16x

PPC_stxvh8x = _ida_domain.PPC_stxvh8x

PPC_stxvl = _ida_domain.PPC_stxvl

PPC_stxvll = _ida_domain.PPC_stxvll

PPC_stxvx = _ida_domain.PPC_stxvx

PPC_xsabsqp = _ida_domain.PPC_xsabsqp

PPC_xsaddqp = _ida_domain.PPC_xsaddqp

PPC_xscmpexpqp = _ida_domain.PPC_xscmpexpqp

PPC_xscmpoqp = _ida_domain.PPC_xscmpoqp

PPC_xscmpuqp = _ida_domain.PPC_xscmpuqp

PPC_xscpsgnqp = _ida_domain.PPC_xscpsgnqp

PPC_xscvdpqp = _ida_domain.PPC_xscvdpqp

PPC_xscvqpdp = _ida_domain.PPC_xscvqpdp

PPC_xscvqpsdz = _ida_domain.PPC_xscvqpsdz

PPC_xscvqpswz = _ida_domain.PPC_xscvqpswz

PPC_xscvqpudz = _ida_domain.PPC_xscvqpudz

PPC_xscvqpuwz = _ida_domain.PPC_xscvqpuwz

PPC_xscvsdqp = _ida_domain.PPC_xscvsdqp

PPC_xscvudqp = _ida_domain.PPC_xscvudqp

PPC_xsdivqp = _ida_domain.PPC_xsdivqp

PPC_xsiexpqp = _ida_domain.PPC_xsiexpqp

PPC_xsmaddqp = _ida_domain.PPC_xsmaddqp

PPC_xsmsubqp = _ida_domain.PPC_xsmsubqp

PPC_xsmulqp = _ida_domain.PPC_xsmulqp

PPC_xsnabsqp = _ida_domain.PPC_xsnabsqp

PPC_xsnegqp = _ida_domain.PPC_xsnegqp

PPC_xsnmaddqp = _ida_domain.PPC_xsnmaddqp

PPC_xsnmsubqp = _ida_domain.PPC_xsnmsubqp

PPC_xssqrtqp = _ida_domain.PPC_xssqrtqp

PPC_xssubqp = _ida_domain.PPC_xssubqp

PPC_xsxexpqp = _ida_domain.PPC_xsxexpqp

PPC_xsxsigqp = _ida_domain.PPC_xsxsigqp

PPC_xststdcqp = _ida_domain.PPC_xststdcqp

PPC_xsrqpxp = _ida_domain.PPC_xsrqpxp

PPC_xsrqpi = _ida_domain.PPC_xsrqpi

PPC_xscmpeqdp = _ida_domain.PPC_xscmpeqdp

PPC_xscmpexpdp = _ida_domain.PPC_xscmpexpdp

PPC_xscmpgedp = _ida_domain.PPC_xscmpgedp

PPC_xscmpgtdp = _ida_domain.PPC_xscmpgtdp

PPC_xsiexpdp = _ida_domain.PPC_xsiexpdp

PPC_xsmaxcdp = _ida_domain.PPC_xsmaxcdp

PPC_xsmaxjdp = _ida_domain.PPC_xsmaxjdp

PPC_xsmincdp = _ida_domain.PPC_xsmincdp

PPC_xsminjdp = _ida_domain.PPC_xsminjdp

PPC_xviexpdp = _ida_domain.PPC_xviexpdp

PPC_xviexpsp = _ida_domain.PPC_xviexpsp

PPC_xxextractuw = _ida_domain.PPC_xxextractuw

PPC_xxinsertw = _ida_domain.PPC_xxinsertw

PPC_xxperm = _ida_domain.PPC_xxperm

PPC_xxpermr = _ida_domain.PPC_xxpermr

PPC_xxspltib = _ida_domain.PPC_xxspltib

PPC_xststdcdp = _ida_domain.PPC_xststdcdp

PPC_xststdcsp = _ida_domain.PPC_xststdcsp

PPC_xvtstdcdp = _ida_domain.PPC_xvtstdcdp

PPC_xvtstdcsp = _ida_domain.PPC_xvtstdcsp

PPC_xsxexpdp = _ida_domain.PPC_xsxexpdp

PPC_xsxsigdp = _ida_domain.PPC_xsxsigdp

PPC_xscvdphp = _ida_domain.PPC_xscvdphp

PPC_xscvhpdp = _ida_domain.PPC_xscvhpdp

PPC_xvxexpdp = _ida_domain.PPC_xvxexpdp

PPC_xvxexpsp = _ida_domain.PPC_xvxexpsp

PPC_xvxsigdp = _ida_domain.PPC_xvxsigdp

PPC_xvxsigsp = _ida_domain.PPC_xvxsigsp

PPC_xxbrd = _ida_domain.PPC_xxbrd

PPC_xxbrh = _ida_domain.PPC_xxbrh

PPC_xxbrq = _ida_domain.PPC_xxbrq

PPC_xxbrw = _ida_domain.PPC_xxbrw

PPC_xvcvhpsp = _ida_domain.PPC_xvcvhpsp

PPC_xvcvsphp = _ida_domain.PPC_xvcvsphp

PPC_msgsync = _ida_domain.PPC_msgsync

PPC_addex = _ida_domain.PPC_addex

PPC_vmsumudm = _ida_domain.PPC_vmsumudm

PPC_mffsce = _ida_domain.PPC_mffsce

PPC_mffscdrn = _ida_domain.PPC_mffscdrn

PPC_mffscdrni = _ida_domain.PPC_mffscdrni

PPC_mffscrn = _ida_domain.PPC_mffscrn

PPC_mffscrni = _ida_domain.PPC_mffscrni

PPC_mffsl = _ida_domain.PPC_mffsl

PPC_lbdcbx = _ida_domain.PPC_lbdcbx

PPC_lhdcbx = _ida_domain.PPC_lhdcbx

PPC_lwdcbx = _ida_domain.PPC_lwdcbx

PPC_stbdcbx = _ida_domain.PPC_stbdcbx

PPC_sthdcbx = _ida_domain.PPC_sthdcbx

PPC_stwdcbx = _ida_domain.PPC_stwdcbx

PPC_lbcbx = _ida_domain.PPC_lbcbx

PPC_lhcbx = _ida_domain.PPC_lhcbx

PPC_lwcbx = _ida_domain.PPC_lwcbx

PPC_stbwtx = _ida_domain.PPC_stbwtx

PPC_sthwtx = _ida_domain.PPC_sthwtx

PPC_stwwtx = _ida_domain.PPC_stwwtx

PPC_dsncb = _ida_domain.PPC_dsncb

PPC_ldw = _ida_domain.PPC_ldw

PPC_stdw = _ida_domain.PPC_stdw

PPC_lqw = _ida_domain.PPC_lqw

PPC_stqw = _ida_domain.PPC_stqw

PPC_ldwcb = _ida_domain.PPC_ldwcb

PPC_ldbrw = _ida_domain.PPC_ldbrw

PPC_ldwbrw = _ida_domain.PPC_ldwbrw

PPC_stdwwt = _ida_domain.PPC_stdwwt

PPC_stdbrw = _ida_domain.PPC_stdbrw

PPC_stdwbrw = _ida_domain.PPC_stdwbrw

PPC_lqdbrw = _ida_domain.PPC_lqdbrw

PPC_stqdbrw = _ida_domain.PPC_stqdbrw

PPC_lwbr = _ida_domain.PPC_lwbr

PPC_lhbr = _ida_domain.PPC_lhbr

PPC_stwbr = _ida_domain.PPC_stwbr

PPC_sthbr = _ida_domain.PPC_sthbr

PPC_ldwar = _ida_domain.PPC_ldwar

PPC_stdwc = _ida_domain.PPC_stdwc

PPC_addb = _ida_domain.PPC_addb

PPC_addbu = _ida_domain.PPC_addbu

PPC_addh = _ida_domain.PPC_addh

PPC_addhu = _ida_domain.PPC_addhu

PPC_subfb = _ida_domain.PPC_subfb

PPC_subfbu = _ida_domain.PPC_subfbu

PPC_subfh = _ida_domain.PPC_subfh

PPC_subfhu = _ida_domain.PPC_subfhu

PPC_byterevw = _ida_domain.PPC_byterevw

PPC_byterevh = _ida_domain.PPC_byterevh

PPC_hwaccel = _ida_domain.PPC_hwaccel

PPC_hwacceli = _ida_domain.PPC_hwacceli

PPC_ordhwaccel = _ida_domain.PPC_ordhwaccel

PPC_ordhwacceli = _ida_domain.PPC_ordhwacceli

PPC_osmcmd = _ida_domain.PPC_osmcmd

PPC_mpure = _ida_domain.PPC_mpure

PPC_mpuwe = _ida_domain.PPC_mpuwe

PPC_mpusync = _ida_domain.PPC_mpusync

PPC_efdmax = _ida_domain.PPC_efdmax

PPC_efdmin = _ida_domain.PPC_efdmin

PPC_efdsqrt = _ida_domain.PPC_efdsqrt

PPC_efdcfh = _ida_domain.PPC_efdcfh

PPC_efdcth = _ida_domain.PPC_efdcth

PPC_zbrminc = _ida_domain.PPC_zbrminc

PPC_zcircinc = _ida_domain.PPC_zcircinc

PPC_zvabsh = _ida_domain.PPC_zvabsh

PPC_zvabshs = _ida_domain.PPC_zvabshs

PPC_zabsw = _ida_domain.PPC_zabsw

PPC_zabsws = _ida_domain.PPC_zabsws

PPC_zaddd = _ida_domain.PPC_zaddd

PPC_zadddss = _ida_domain.PPC_zadddss

PPC_zadddus = _ida_domain.PPC_zadddus

PPC_zvaddh = _ida_domain.PPC_zvaddh

PPC_zvaddhss = _ida_domain.PPC_zvaddhss

PPC_zvaddhus = _ida_domain.PPC_zvaddhus

PPC_zvaddhx = _ida_domain.PPC_zvaddhx

PPC_zvaddhxss = _ida_domain.PPC_zvaddhxss

PPC_zvaddih = _ida_domain.PPC_zvaddih

PPC_zvaddsubfh = _ida_domain.PPC_zvaddsubfh

PPC_zvaddsubfhss = _ida_domain.PPC_zvaddsubfhss

PPC_zvaddsubfhx = _ida_domain.PPC_zvaddsubfhx

PPC_zvaddsubfhxss = _ida_domain.PPC_zvaddsubfhxss

PPC_zaddhesw = _ida_domain.PPC_zaddhesw

PPC_zaddheuw = _ida_domain.PPC_zaddheuw

PPC_zaddhosw = _ida_domain.PPC_zaddhosw

PPC_zaddhouw = _ida_domain.PPC_zaddhouw

PPC_zvaddw = _ida_domain.PPC_zvaddw

PPC_zvaddsubfw = _ida_domain.PPC_zvaddsubfw

PPC_zvaddsubfwss = _ida_domain.PPC_zvaddsubfwss

PPC_zaddwgsf = _ida_domain.PPC_zaddwgsf

PPC_zaddwgsi = _ida_domain.PPC_zaddwgsi

PPC_zaddwgui = _ida_domain.PPC_zaddwgui

PPC_zaddwss = _ida_domain.PPC_zaddwss

PPC_zvaddwss = _ida_domain.PPC_zvaddwss

PPC_zaddwus = _ida_domain.PPC_zaddwus

PPC_zvaddwus = _ida_domain.PPC_zvaddwus

PPC_zvcmpeqh = _ida_domain.PPC_zvcmpeqh

PPC_zvcmpgths = _ida_domain.PPC_zvcmpgths

PPC_zvcmpgthu = _ida_domain.PPC_zvcmpgthu

PPC_zvcmplths = _ida_domain.PPC_zvcmplths

PPC_zvcmplthu = _ida_domain.PPC_zvcmplthu

PPC_zvcntlsh = _ida_domain.PPC_zvcntlsh

PPC_zcntlsw = _ida_domain.PPC_zcntlsw

PPC_zvcntlzh = _ida_domain.PPC_zvcntlzh

PPC_zdivwsf = _ida_domain.PPC_zdivwsf

PPC_zvmergehih = _ida_domain.PPC_zvmergehih

PPC_zvmergehiloh = _ida_domain.PPC_zvmergehiloh

PPC_zvmergeloh = _ida_domain.PPC_zvmergeloh

PPC_zvmergelohih = _ida_domain.PPC_zvmergelohih

PPC_zvnegh = _ida_domain.PPC_zvnegh

PPC_zvnegho = _ida_domain.PPC_zvnegho

PPC_zvneghos = _ida_domain.PPC_zvneghos

PPC_zvneghs = _ida_domain.PPC_zvneghs

PPC_znegws = _ida_domain.PPC_znegws

PPC_zvpkshgwshfrs = _ida_domain.PPC_zvpkshgwshfrs

PPC_zpkswgshfrs = _ida_domain.PPC_zpkswgshfrs

PPC_zpkswgswfrs = _ida_domain.PPC_zpkswgswfrs

PPC_zvpkswshfrs = _ida_domain.PPC_zvpkswshfrs

PPC_zvpkswshs = _ida_domain.PPC_zvpkswshs

PPC_zvpkswuhs = _ida_domain.PPC_zvpkswuhs

PPC_zvpkuwuhs = _ida_domain.PPC_zvpkuwuhs

PPC_zvrlh = _ida_domain.PPC_zvrlh

PPC_zvrlhi = _ida_domain.PPC_zvrlhi

PPC_zrndwh = _ida_domain.PPC_zrndwh

PPC_zrndwhss = _ida_domain.PPC_zrndwhss

PPC_zsatsdsw = _ida_domain.PPC_zsatsdsw

PPC_zsatsduw = _ida_domain.PPC_zsatsduw

PPC_zvsatshuh = _ida_domain.PPC_zvsatshuh

PPC_zsatswsh = _ida_domain.PPC_zsatswsh

PPC_zsatswuh = _ida_domain.PPC_zsatswuh

PPC_zsatswuw = _ida_domain.PPC_zsatswuw

PPC_zsatuduw = _ida_domain.PPC_zsatuduw

PPC_zvsatuhsh = _ida_domain.PPC_zvsatuhsh

PPC_zsatuwsw = _ida_domain.PPC_zsatuwsw

PPC_zsatuwsh = _ida_domain.PPC_zsatuwsh

PPC_zsatuwuh = _ida_domain.PPC_zsatuwuh

PPC_zvselh = _ida_domain.PPC_zvselh

PPC_zvslh = _ida_domain.PPC_zvslh

PPC_zvslhi = _ida_domain.PPC_zvslhi

PPC_zvslhss = _ida_domain.PPC_zvslhss

PPC_zvslhiss = _ida_domain.PPC_zvslhiss

PPC_zvslhus = _ida_domain.PPC_zvslhus

PPC_zvslhius = _ida_domain.PPC_zvslhius

PPC_zslwss = _ida_domain.PPC_zslwss

PPC_zslwiss = _ida_domain.PPC_zslwiss

PPC_zslwus = _ida_domain.PPC_zslwus

PPC_zslwius = _ida_domain.PPC_zslwius

PPC_zvsplatfih = _ida_domain.PPC_zvsplatfih

PPC_zvsplatih = _ida_domain.PPC_zvsplatih

PPC_zvsrhis = _ida_domain.PPC_zvsrhis

PPC_zvsrhiu = _ida_domain.PPC_zvsrhiu

PPC_zvsrhs = _ida_domain.PPC_zvsrhs

PPC_zvsrhu = _ida_domain.PPC_zvsrhu

PPC_zvsubfaddh = _ida_domain.PPC_zvsubfaddh

PPC_zvsubfaddhss = _ida_domain.PPC_zvsubfaddhss

PPC_zvsubfaddhx = _ida_domain.PPC_zvsubfaddhx

PPC_zvsubfaddhxss = _ida_domain.PPC_zvsubfaddhxss

PPC_zsubfd = _ida_domain.PPC_zsubfd

PPC_zsubfdss = _ida_domain.PPC_zsubfdss

PPC_zsubfdus = _ida_domain.PPC_zsubfdus

PPC_zvsubfh = _ida_domain.PPC_zvsubfh

PPC_zsubfhesw = _ida_domain.PPC_zsubfhesw

PPC_zsubfheuw = _ida_domain.PPC_zsubfheuw

PPC_zsubfhosw = _ida_domain.PPC_zsubfhosw

PPC_zsubfhouw = _ida_domain.PPC_zsubfhouw

PPC_zvsubfhss = _ida_domain.PPC_zvsubfhss

PPC_zvsubfhus = _ida_domain.PPC_zvsubfhus

PPC_zvsubfhx = _ida_domain.PPC_zvsubfhx

PPC_zvsubfhxss = _ida_domain.PPC_zvsubfhxss

PPC_zvsubfw = _ida_domain.PPC_zvsubfw

PPC_zvsubfaddw = _ida_domain.PPC_zvsubfaddw

PPC_zvsubfaddwss = _ida_domain.PPC_zvsubfaddwss

PPC_zsubfwgsf = _ida_domain.PPC_zsubfwgsf

PPC_zsubfwgsi = _ida_domain.PPC_zsubfwgsi

PPC_zsubfwgui = _ida_domain.PPC_zsubfwgui

PPC_zsubfwss = _ida_domain.PPC_zsubfwss

PPC_zvsubfwss = _ida_domain.PPC_zvsubfwss

PPC_zsubfwus = _ida_domain.PPC_zsubfwus

PPC_zvsubfwus = _ida_domain.PPC_zvsubfwus

PPC_zvsubifh = _ida_domain.PPC_zvsubifh

PPC_zvunpkhgwsf = _ida_domain.PPC_zvunpkhgwsf

PPC_zvunpkhsf = _ida_domain.PPC_zvunpkhsf

PPC_zvunpkhsi = _ida_domain.PPC_zvunpkhsi

PPC_zvunpkhui = _ida_domain.PPC_zvunpkhui

PPC_zunpkwgsf = _ida_domain.PPC_zunpkwgsf

PPC_zxtrw = _ida_domain.PPC_zxtrw

PPC_zldd = _ida_domain.PPC_zldd

PPC_zlddu = _ida_domain.PPC_zlddu

PPC_zlddx = _ida_domain.PPC_zlddx

PPC_zlddmx = _ida_domain.PPC_zlddmx

PPC_zldh = _ida_domain.PPC_zldh

PPC_zldhu = _ida_domain.PPC_zldhu

PPC_zldhx = _ida_domain.PPC_zldhx

PPC_zldhmx = _ida_domain.PPC_zldhmx

PPC_zldw = _ida_domain.PPC_zldw

PPC_zldwu = _ida_domain.PPC_zldwu

PPC_zldwx = _ida_domain.PPC_zldwx

PPC_zldwmx = _ida_domain.PPC_zldwmx

PPC_zlhgwsf = _ida_domain.PPC_zlhgwsf

PPC_zlhgwsfu = _ida_domain.PPC_zlhgwsfu

PPC_zlhgwsfx = _ida_domain.PPC_zlhgwsfx

PPC_zlhgwsfmx = _ida_domain.PPC_zlhgwsfmx

PPC_zlhhe = _ida_domain.PPC_zlhhe

PPC_zlhheu = _ida_domain.PPC_zlhheu

PPC_zlhhex = _ida_domain.PPC_zlhhex

PPC_zlhhemx = _ida_domain.PPC_zlhhemx

PPC_zlhhos = _ida_domain.PPC_zlhhos

PPC_zlhhosu = _ida_domain.PPC_zlhhosu

PPC_zlhhosx = _ida_domain.PPC_zlhhosx

PPC_zlhhosmx = _ida_domain.PPC_zlhhosmx

PPC_zlhhou = _ida_domain.PPC_zlhhou

PPC_zlhhouu = _ida_domain.PPC_zlhhouu

PPC_zlhhoux = _ida_domain.PPC_zlhhoux

PPC_zlhhoumx = _ida_domain.PPC_zlhhoumx

PPC_zlhhsplat = _ida_domain.PPC_zlhhsplat

PPC_zlhhsplatu = _ida_domain.PPC_zlhhsplatu

PPC_zlhhsplatx = _ida_domain.PPC_zlhhsplatx

PPC_zlhhsplatmx = _ida_domain.PPC_zlhhsplatmx

PPC_zlwgsfd = _ida_domain.PPC_zlwgsfd

PPC_zlwgsfdu = _ida_domain.PPC_zlwgsfdu

PPC_zlwgsfdx = _ida_domain.PPC_zlwgsfdx

PPC_zlwgsfdmx = _ida_domain.PPC_zlwgsfdmx

PPC_zlwh = _ida_domain.PPC_zlwh

PPC_zlwhu = _ida_domain.PPC_zlwhu

PPC_zlwhx = _ida_domain.PPC_zlwhx

PPC_zlwhmx = _ida_domain.PPC_zlwhmx

PPC_zlwhed = _ida_domain.PPC_zlwhed

PPC_zlwhedu = _ida_domain.PPC_zlwhedu

PPC_zlwhedx = _ida_domain.PPC_zlwhedx

PPC_zlwhedmx = _ida_domain.PPC_zlwhedmx

PPC_zlwhgwsfd = _ida_domain.PPC_zlwhgwsfd

PPC_zlwhgwsfdu = _ida_domain.PPC_zlwhgwsfdu

PPC_zlwhgwsfdx = _ida_domain.PPC_zlwhgwsfdx

PPC_zlwhgwsfdmx = _ida_domain.PPC_zlwhgwsfdmx

PPC_zlwhosd = _ida_domain.PPC_zlwhosd

PPC_zlwhosdu = _ida_domain.PPC_zlwhosdu

PPC_zlwhosdx = _ida_domain.PPC_zlwhosdx

PPC_zlwhosdmx = _ida_domain.PPC_zlwhosdmx

PPC_zlwhoud = _ida_domain.PPC_zlwhoud

PPC_zlwhoudu = _ida_domain.PPC_zlwhoudu

PPC_zlwhoudx = _ida_domain.PPC_zlwhoudx

PPC_zlwhoudmx = _ida_domain.PPC_zlwhoudmx

PPC_zlwhsplatd = _ida_domain.PPC_zlwhsplatd

PPC_zlwhsplatdu = _ida_domain.PPC_zlwhsplatdu

PPC_zlwhsplatdx = _ida_domain.PPC_zlwhsplatdx

PPC_zlwhsplatdmx = _ida_domain.PPC_zlwhsplatdmx

PPC_zlwhsplatwd = _ida_domain.PPC_zlwhsplatwd

PPC_zlwhsplatwdu = _ida_domain.PPC_zlwhsplatwdu

PPC_zlwhsplatwdx = _ida_domain.PPC_zlwhsplatwdx

PPC_zlwhsplatwdmx = _ida_domain.PPC_zlwhsplatwdmx

PPC_zlww = _ida_domain.PPC_zlww

PPC_zlwwu = _ida_domain.PPC_zlwwu

PPC_zlwwx = _ida_domain.PPC_zlwwx

PPC_zlwwmx = _ida_domain.PPC_zlwwmx

PPC_zlwwosd = _ida_domain.PPC_zlwwosd

PPC_zlwwosdu = _ida_domain.PPC_zlwwosdu

PPC_zlwwosdx = _ida_domain.PPC_zlwwosdx

PPC_zlwwosdmx = _ida_domain.PPC_zlwwosdmx

PPC_zstdd = _ida_domain.PPC_zstdd

PPC_zstddu = _ida_domain.PPC_zstddu

PPC_zstddx = _ida_domain.PPC_zstddx

PPC_zstddmx = _ida_domain.PPC_zstddmx

PPC_zstdh = _ida_domain.PPC_zstdh

PPC_zstdhu = _ida_domain.PPC_zstdhu

PPC_zstdhx = _ida_domain.PPC_zstdhx

PPC_zstdhmx = _ida_domain.PPC_zstdhmx

PPC_zstdw = _ida_domain.PPC_zstdw

PPC_zstdwu = _ida_domain.PPC_zstdwu

PPC_zstdwx = _ida_domain.PPC_zstdwx

PPC_zstdwmx = _ida_domain.PPC_zstdwmx

PPC_zsthe = _ida_domain.PPC_zsthe

PPC_zstheu = _ida_domain.PPC_zstheu

PPC_zsthex = _ida_domain.PPC_zsthex

PPC_zsthemx = _ida_domain.PPC_zsthemx

PPC_zstho = _ida_domain.PPC_zstho

PPC_zsthou = _ida_domain.PPC_zsthou

PPC_zsthox = _ida_domain.PPC_zsthox

PPC_zsthomx = _ida_domain.PPC_zsthomx

PPC_zstwh = _ida_domain.PPC_zstwh

PPC_zstwhu = _ida_domain.PPC_zstwhu

PPC_zstwhx = _ida_domain.PPC_zstwhx

PPC_zstwhmx = _ida_domain.PPC_zstwhmx

PPC_zstwhed = _ida_domain.PPC_zstwhed

PPC_zstwhedu = _ida_domain.PPC_zstwhedu

PPC_zstwhedx = _ida_domain.PPC_zstwhedx

PPC_zstwhedmx = _ida_domain.PPC_zstwhedmx

PPC_zstwhod = _ida_domain.PPC_zstwhod

PPC_zstwhodu = _ida_domain.PPC_zstwhodu

PPC_zstwhodx = _ida_domain.PPC_zstwhodx

PPC_zstwhodmx = _ida_domain.PPC_zstwhodmx

PPC_zstww = _ida_domain.PPC_zstww

PPC_zstwwu = _ida_domain.PPC_zstwwu

PPC_zstwwx = _ida_domain.PPC_zstwwx

PPC_zstwwmx = _ida_domain.PPC_zstwwmx

PPC_zmhegui = _ida_domain.PPC_zmhegui

PPC_zmhegsi = _ida_domain.PPC_zmhegsi

PPC_zmhegsui = _ida_domain.PPC_zmhegsui

PPC_zmhegsmf = _ida_domain.PPC_zmhegsmf

PPC_zmheogui = _ida_domain.PPC_zmheogui

PPC_zmheogsi = _ida_domain.PPC_zmheogsi

PPC_zmheogsui = _ida_domain.PPC_zmheogsui

PPC_zmheogsmf = _ida_domain.PPC_zmheogsmf

PPC_zmhogui = _ida_domain.PPC_zmhogui

PPC_zmhogsi = _ida_domain.PPC_zmhogsi

PPC_zmhogsui = _ida_domain.PPC_zmhogsui

PPC_zmhogsmf = _ida_domain.PPC_zmhogsmf

PPC_zmheguiaa = _ida_domain.PPC_zmheguiaa

PPC_zmheguian = _ida_domain.PPC_zmheguian

PPC_zmhegsiaa = _ida_domain.PPC_zmhegsiaa

PPC_zmhegsian = _ida_domain.PPC_zmhegsian

PPC_zmhegsuiaa = _ida_domain.PPC_zmhegsuiaa

PPC_zmhegsuian = _ida_domain.PPC_zmhegsuian

PPC_zmhegsmfaa = _ida_domain.PPC_zmhegsmfaa

PPC_zmhegsmfan = _ida_domain.PPC_zmhegsmfan

PPC_zmheoguiaa = _ida_domain.PPC_zmheoguiaa

PPC_zmheoguian = _ida_domain.PPC_zmheoguian

PPC_zmheogsiaa = _ida_domain.PPC_zmheogsiaa

PPC_zmheogsian = _ida_domain.PPC_zmheogsian

PPC_zmheogsuiaa = _ida_domain.PPC_zmheogsuiaa

PPC_zmheogsuian = _ida_domain.PPC_zmheogsuian

PPC_zmheogsmfaa = _ida_domain.PPC_zmheogsmfaa

PPC_zmheogsmfan = _ida_domain.PPC_zmheogsmfan

PPC_zmhoguiaa = _ida_domain.PPC_zmhoguiaa

PPC_zmhoguian = _ida_domain.PPC_zmhoguian

PPC_zmhogsiaa = _ida_domain.PPC_zmhogsiaa

PPC_zmhogsian = _ida_domain.PPC_zmhogsian

PPC_zmhogsuiaa = _ida_domain.PPC_zmhogsuiaa

PPC_zmhogsuian = _ida_domain.PPC_zmhogsuian

PPC_zmhogsmfaa = _ida_domain.PPC_zmhogsmfaa

PPC_zmhogsmfan = _ida_domain.PPC_zmhogsmfan

PPC_zmhegwsmf = _ida_domain.PPC_zmhegwsmf

PPC_zmheogwsmf = _ida_domain.PPC_zmheogwsmf

PPC_zmhogwsmf = _ida_domain.PPC_zmhogwsmf

PPC_zmhegwsmfr = _ida_domain.PPC_zmhegwsmfr

PPC_zmheogwsmfr = _ida_domain.PPC_zmheogwsmfr

PPC_zmhogwsmfr = _ida_domain.PPC_zmhogwsmfr

PPC_zmhegwsmfaa = _ida_domain.PPC_zmhegwsmfaa

PPC_zmheogwsmfaa = _ida_domain.PPC_zmheogwsmfaa

PPC_zmhogwsmfaa = _ida_domain.PPC_zmhogwsmfaa

PPC_zmhegwsmfan = _ida_domain.PPC_zmhegwsmfan

PPC_zmheogwsmfan = _ida_domain.PPC_zmheogwsmfan

PPC_zmhogwsmfan = _ida_domain.PPC_zmhogwsmfan

PPC_zmhegwsmfraa = _ida_domain.PPC_zmhegwsmfraa

PPC_zmheogwsmfraa = _ida_domain.PPC_zmheogwsmfraa

PPC_zmhogwsmfraa = _ida_domain.PPC_zmhogwsmfraa

PPC_zmhegwsmfran = _ida_domain.PPC_zmhegwsmfran

PPC_zmheogwsmfran = _ida_domain.PPC_zmheogwsmfran

PPC_zmhogwsmfran = _ida_domain.PPC_zmhogwsmfran

PPC_zmhesf = _ida_domain.PPC_zmhesf

PPC_zmheosf = _ida_domain.PPC_zmheosf

PPC_zmhosf = _ida_domain.PPC_zmhosf

PPC_zmhesfr = _ida_domain.PPC_zmhesfr

PPC_zmheosfr = _ida_domain.PPC_zmheosfr

PPC_zmhosfr = _ida_domain.PPC_zmhosfr

PPC_zmhesfaas = _ida_domain.PPC_zmhesfaas

PPC_zmheosfaas = _ida_domain.PPC_zmheosfaas

PPC_zmhosfaas = _ida_domain.PPC_zmhosfaas

PPC_zmhesfans = _ida_domain.PPC_zmhesfans

PPC_zmheosfans = _ida_domain.PPC_zmheosfans

PPC_zmhosfans = _ida_domain.PPC_zmhosfans

PPC_zmhesfraas = _ida_domain.PPC_zmhesfraas

PPC_zmheosfraas = _ida_domain.PPC_zmheosfraas

PPC_zmhosfraas = _ida_domain.PPC_zmhosfraas

PPC_zmhesfrans = _ida_domain.PPC_zmhesfrans

PPC_zmheosfrans = _ida_domain.PPC_zmheosfrans

PPC_zmhosfrans = _ida_domain.PPC_zmhosfrans

PPC_zmhesi = _ida_domain.PPC_zmhesi

PPC_zmheosi = _ida_domain.PPC_zmheosi

PPC_zmhosi = _ida_domain.PPC_zmhosi

PPC_zmhesui = _ida_domain.PPC_zmhesui

PPC_zmheosui = _ida_domain.PPC_zmheosui

PPC_zmhosui = _ida_domain.PPC_zmhosui

PPC_zmheui = _ida_domain.PPC_zmheui

PPC_zmheoui = _ida_domain.PPC_zmheoui

PPC_zmhoui = _ida_domain.PPC_zmhoui

PPC_zmhesiaa = _ida_domain.PPC_zmhesiaa

PPC_zmheosiaa = _ida_domain.PPC_zmheosiaa

PPC_zmhosiaa = _ida_domain.PPC_zmhosiaa

PPC_zmhesian = _ida_domain.PPC_zmhesian

PPC_zmheosian = _ida_domain.PPC_zmheosian

PPC_zmhosian = _ida_domain.PPC_zmhosian

PPC_zmhesuiaa = _ida_domain.PPC_zmhesuiaa

PPC_zmheosuiaa = _ida_domain.PPC_zmheosuiaa

PPC_zmhosuiaa = _ida_domain.PPC_zmhosuiaa

PPC_zmhesuian = _ida_domain.PPC_zmhesuian

PPC_zmheosuian = _ida_domain.PPC_zmheosuian

PPC_zmhosuian = _ida_domain.PPC_zmhosuian

PPC_zmheuiaa = _ida_domain.PPC_zmheuiaa

PPC_zmheouiaa = _ida_domain.PPC_zmheouiaa

PPC_zmhouiaa = _ida_domain.PPC_zmhouiaa

PPC_zmheuian = _ida_domain.PPC_zmheuian

PPC_zmheouian = _ida_domain.PPC_zmheouian

PPC_zmhouian = _ida_domain.PPC_zmhouian

PPC_zmhesiaas = _ida_domain.PPC_zmhesiaas

PPC_zmheosiaas = _ida_domain.PPC_zmheosiaas

PPC_zmhosiaas = _ida_domain.PPC_zmhosiaas

PPC_zmhesians = _ida_domain.PPC_zmhesians

PPC_zmheosians = _ida_domain.PPC_zmheosians

PPC_zmhosians = _ida_domain.PPC_zmhosians

PPC_zmhesuiaas = _ida_domain.PPC_zmhesuiaas

PPC_zmheosuiaas = _ida_domain.PPC_zmheosuiaas

PPC_zmhosuiaas = _ida_domain.PPC_zmhosuiaas

PPC_zmhesuians = _ida_domain.PPC_zmhesuians

PPC_zmheosuians = _ida_domain.PPC_zmheosuians

PPC_zmhosuians = _ida_domain.PPC_zmhosuians

PPC_zmheuiaas = _ida_domain.PPC_zmheuiaas

PPC_zmheouiaas = _ida_domain.PPC_zmheouiaas

PPC_zmhouiaas = _ida_domain.PPC_zmhouiaas

PPC_zmheuians = _ida_domain.PPC_zmheuians

PPC_zmheouians = _ida_domain.PPC_zmheouians

PPC_zmhouians = _ida_domain.PPC_zmhouians

PPC_zvmhsfh = _ida_domain.PPC_zvmhsfh

PPC_zvmhsfrh = _ida_domain.PPC_zvmhsfrh

PPC_zvmhsfaahs = _ida_domain.PPC_zvmhsfaahs

PPC_zvmhsfanhs = _ida_domain.PPC_zvmhsfanhs

PPC_zvmhsfraahs = _ida_domain.PPC_zvmhsfraahs

PPC_zvmhsfranhs = _ida_domain.PPC_zvmhsfranhs

PPC_zvmhsih = _ida_domain.PPC_zvmhsih

PPC_zvmhsuih = _ida_domain.PPC_zvmhsuih

PPC_zvmhuih = _ida_domain.PPC_zvmhuih

PPC_zvmhsihs = _ida_domain.PPC_zvmhsihs

PPC_zvmhsuihs = _ida_domain.PPC_zvmhsuihs

PPC_zvmhuihs = _ida_domain.PPC_zvmhuihs

PPC_zvmhsiaah = _ida_domain.PPC_zvmhsiaah

PPC_zvmhsuiaah = _ida_domain.PPC_zvmhsuiaah

PPC_zvmhuiaah = _ida_domain.PPC_zvmhuiaah

PPC_zvmhsianh = _ida_domain.PPC_zvmhsianh

PPC_zvmhsuianh = _ida_domain.PPC_zvmhsuianh

PPC_zvmhuianh = _ida_domain.PPC_zvmhuianh

PPC_zvmhsiaahs = _ida_domain.PPC_zvmhsiaahs

PPC_zvmhsuiaahs = _ida_domain.PPC_zvmhsuiaahs

PPC_zvmhuiaahs = _ida_domain.PPC_zvmhuiaahs

PPC_zvmhsianhs = _ida_domain.PPC_zvmhsianhs

PPC_zvmhsuianhs = _ida_domain.PPC_zvmhsuianhs

PPC_zvmhuianhs = _ida_domain.PPC_zvmhuianhs

PPC_zmwgsi = _ida_domain.PPC_zmwgsi

PPC_zmwgsui = _ida_domain.PPC_zmwgsui

PPC_zmwgui = _ida_domain.PPC_zmwgui

PPC_zmwgsiaa = _ida_domain.PPC_zmwgsiaa

PPC_zmwgsian = _ida_domain.PPC_zmwgsian

PPC_zmwgsuiaa = _ida_domain.PPC_zmwgsuiaa

PPC_zmwgsuian = _ida_domain.PPC_zmwgsuian

PPC_zmwguiaa = _ida_domain.PPC_zmwguiaa

PPC_zmwguian = _ida_domain.PPC_zmwguian

PPC_zmwgsiaas = _ida_domain.PPC_zmwgsiaas

PPC_zmwgsians = _ida_domain.PPC_zmwgsians

PPC_zmwgsuiaas = _ida_domain.PPC_zmwgsuiaas

PPC_zmwgsuians = _ida_domain.PPC_zmwgsuians

PPC_zmwguiaas = _ida_domain.PPC_zmwguiaas

PPC_zmwguians = _ida_domain.PPC_zmwguians

PPC_zmwgsmf = _ida_domain.PPC_zmwgsmf

PPC_zmwgsmfr = _ida_domain.PPC_zmwgsmfr

PPC_zmwgsmfaa = _ida_domain.PPC_zmwgsmfaa

PPC_zmwgsmfan = _ida_domain.PPC_zmwgsmfan

PPC_zmwgsmfraa = _ida_domain.PPC_zmwgsmfraa

PPC_zmwgsmfran = _ida_domain.PPC_zmwgsmfran

PPC_zmwlsis = _ida_domain.PPC_zmwlsis

PPC_zmwlsuis = _ida_domain.PPC_zmwlsuis

PPC_zmwluis = _ida_domain.PPC_zmwluis

PPC_zmwlsiaa = _ida_domain.PPC_zmwlsiaa

PPC_zmwlsuiaa = _ida_domain.PPC_zmwlsuiaa

PPC_zmwluiaa = _ida_domain.PPC_zmwluiaa

PPC_zmwlsian = _ida_domain.PPC_zmwlsian

PPC_zmwlsuian = _ida_domain.PPC_zmwlsuian

PPC_zmwluian = _ida_domain.PPC_zmwluian

PPC_zmwlsiaas = _ida_domain.PPC_zmwlsiaas

PPC_zmwlsuiaas = _ida_domain.PPC_zmwlsuiaas

PPC_zmwluiaas = _ida_domain.PPC_zmwluiaas

PPC_zmwlsians = _ida_domain.PPC_zmwlsians

PPC_zmwlsuians = _ida_domain.PPC_zmwlsuians

PPC_zmwluians = _ida_domain.PPC_zmwluians

PPC_zmwsf = _ida_domain.PPC_zmwsf

PPC_zmwsfr = _ida_domain.PPC_zmwsfr

PPC_zmwsfaas = _ida_domain.PPC_zmwsfaas

PPC_zmwsfans = _ida_domain.PPC_zmwsfans

PPC_zmwsfraas = _ida_domain.PPC_zmwsfraas

PPC_zmwsfrans = _ida_domain.PPC_zmwsfrans

PPC_zvmhulgwsmf = _ida_domain.PPC_zvmhulgwsmf

PPC_zvmhllgwsmf = _ida_domain.PPC_zvmhllgwsmf

PPC_zvmhuugwsmf = _ida_domain.PPC_zvmhuugwsmf

PPC_zvmhxlgwsmf = _ida_domain.PPC_zvmhxlgwsmf

PPC_zvmhulgwsmfr = _ida_domain.PPC_zvmhulgwsmfr

PPC_zvmhllgwsmfr = _ida_domain.PPC_zvmhllgwsmfr

PPC_zvmhuugwsmfr = _ida_domain.PPC_zvmhuugwsmfr

PPC_zvmhxlgwsmfr = _ida_domain.PPC_zvmhxlgwsmfr

PPC_zvmhulgwsmfaa = _ida_domain.PPC_zvmhulgwsmfaa

PPC_zvmhllgwsmfaa = _ida_domain.PPC_zvmhllgwsmfaa

PPC_zvmhuugwsmfaa = _ida_domain.PPC_zvmhuugwsmfaa

PPC_zvmhxlgwsmfaa = _ida_domain.PPC_zvmhxlgwsmfaa

PPC_zvmhulgwsmfraa = _ida_domain.PPC_zvmhulgwsmfraa

PPC_zvmhllgwsmfraa = _ida_domain.PPC_zvmhllgwsmfraa

PPC_zvmhuugwsmfraa = _ida_domain.PPC_zvmhuugwsmfraa

PPC_zvmhxlgwsmfraa = _ida_domain.PPC_zvmhxlgwsmfraa

PPC_zvmhulgwsmfan = _ida_domain.PPC_zvmhulgwsmfan

PPC_zvmhllgwsmfan = _ida_domain.PPC_zvmhllgwsmfan

PPC_zvmhuugwsmfan = _ida_domain.PPC_zvmhuugwsmfan

PPC_zvmhxlgwsmfan = _ida_domain.PPC_zvmhxlgwsmfan

PPC_zvmhulgwsmfran = _ida_domain.PPC_zvmhulgwsmfran

PPC_zvmhllgwsmfran = _ida_domain.PPC_zvmhllgwsmfran

PPC_zvmhuugwsmfran = _ida_domain.PPC_zvmhuugwsmfran

PPC_zvmhxlgwsmfran = _ida_domain.PPC_zvmhxlgwsmfran

PPC_zvmhulgwsmfanp = _ida_domain.PPC_zvmhulgwsmfanp

PPC_zvmhllgwsmfanp = _ida_domain.PPC_zvmhllgwsmfanp

PPC_zvmhuugwsmfanp = _ida_domain.PPC_zvmhuugwsmfanp

PPC_zvmhxlgwsmfanp = _ida_domain.PPC_zvmhxlgwsmfanp

PPC_zvmhulgwsmfranp = _ida_domain.PPC_zvmhulgwsmfranp

PPC_zvmhllgwsmfranp = _ida_domain.PPC_zvmhllgwsmfranp

PPC_zvmhuugwsmfranp = _ida_domain.PPC_zvmhuugwsmfranp

PPC_zvmhxlgwsmfranp = _ida_domain.PPC_zvmhxlgwsmfranp

PPC_zvmhulsf = _ida_domain.PPC_zvmhulsf

PPC_zvmhllsf = _ida_domain.PPC_zvmhllsf

PPC_zvmhuusf = _ida_domain.PPC_zvmhuusf

PPC_zvmhxlsf = _ida_domain.PPC_zvmhxlsf

PPC_zvmhulsfr = _ida_domain.PPC_zvmhulsfr

PPC_zvmhllsfr = _ida_domain.PPC_zvmhllsfr

PPC_zvmhuusfr = _ida_domain.PPC_zvmhuusfr

PPC_zvmhxlsfr = _ida_domain.PPC_zvmhxlsfr

PPC_zvmhulsfaas = _ida_domain.PPC_zvmhulsfaas

PPC_zvmhllsfaas = _ida_domain.PPC_zvmhllsfaas

PPC_zvmhuusfaas = _ida_domain.PPC_zvmhuusfaas

PPC_zvmhxlsfaas = _ida_domain.PPC_zvmhxlsfaas

PPC_zvmhulsfans = _ida_domain.PPC_zvmhulsfans

PPC_zvmhllsfans = _ida_domain.PPC_zvmhllsfans

PPC_zvmhuusfans = _ida_domain.PPC_zvmhuusfans

PPC_zvmhxlsfans = _ida_domain.PPC_zvmhxlsfans

PPC_zvmhulsfanps = _ida_domain.PPC_zvmhulsfanps

PPC_zvmhllsfanps = _ida_domain.PPC_zvmhllsfanps

PPC_zvmhuusfanps = _ida_domain.PPC_zvmhuusfanps

PPC_zvmhxlsfanps = _ida_domain.PPC_zvmhxlsfanps

PPC_zvmhulsfraas = _ida_domain.PPC_zvmhulsfraas

PPC_zvmhllsfraas = _ida_domain.PPC_zvmhllsfraas

PPC_zvmhuusfraas = _ida_domain.PPC_zvmhuusfraas

PPC_zvmhxlsfraas = _ida_domain.PPC_zvmhxlsfraas

PPC_zvmhulsfrans = _ida_domain.PPC_zvmhulsfrans

PPC_zvmhllsfrans = _ida_domain.PPC_zvmhllsfrans

PPC_zvmhuusfrans = _ida_domain.PPC_zvmhuusfrans

PPC_zvmhxlsfrans = _ida_domain.PPC_zvmhxlsfrans

PPC_zvmhulsfranps = _ida_domain.PPC_zvmhulsfranps

PPC_zvmhllsfranps = _ida_domain.PPC_zvmhllsfranps

PPC_zvmhuusfranps = _ida_domain.PPC_zvmhuusfranps

PPC_zvmhxlsfranps = _ida_domain.PPC_zvmhxlsfranps

PPC_zvmhulsi = _ida_domain.PPC_zvmhulsi

PPC_zvmhllsi = _ida_domain.PPC_zvmhllsi

PPC_zvmhuusi = _ida_domain.PPC_zvmhuusi

PPC_zvmhxlsi = _ida_domain.PPC_zvmhxlsi

PPC_zvmhulsui = _ida_domain.PPC_zvmhulsui

PPC_zvmhllsui = _ida_domain.PPC_zvmhllsui

PPC_zvmhuusui = _ida_domain.PPC_zvmhuusui

PPC_zvmhxlsui = _ida_domain.PPC_zvmhxlsui

PPC_zvmhului = _ida_domain.PPC_zvmhului

PPC_zvmhllui = _ida_domain.PPC_zvmhllui

PPC_zvmhuuui = _ida_domain.PPC_zvmhuuui

PPC_zvmhxlui = _ida_domain.PPC_zvmhxlui

PPC_zvmhulsiaa = _ida_domain.PPC_zvmhulsiaa

PPC_zvmhllsiaa = _ida_domain.PPC_zvmhllsiaa

PPC_zvmhuusiaa = _ida_domain.PPC_zvmhuusiaa

PPC_zvmhxlsiaa = _ida_domain.PPC_zvmhxlsiaa

PPC_zvmhulsian = _ida_domain.PPC_zvmhulsian

PPC_zvmhllsian = _ida_domain.PPC_zvmhllsian

PPC_zvmhuusian = _ida_domain.PPC_zvmhuusian

PPC_zvmhxlsian = _ida_domain.PPC_zvmhxlsian

PPC_zvmhulsianp = _ida_domain.PPC_zvmhulsianp

PPC_zvmhllsianp = _ida_domain.PPC_zvmhllsianp

PPC_zvmhuusianp = _ida_domain.PPC_zvmhuusianp

PPC_zvmhxlsianp = _ida_domain.PPC_zvmhxlsianp

PPC_zvmhulsuiaa = _ida_domain.PPC_zvmhulsuiaa

PPC_zvmhllsuiaa = _ida_domain.PPC_zvmhllsuiaa

PPC_zvmhuusuiaa = _ida_domain.PPC_zvmhuusuiaa

PPC_zvmhxlsuiaa = _ida_domain.PPC_zvmhxlsuiaa

PPC_zvmhulsuian = _ida_domain.PPC_zvmhulsuian

PPC_zvmhllsuian = _ida_domain.PPC_zvmhllsuian

PPC_zvmhuusuian = _ida_domain.PPC_zvmhuusuian

PPC_zvmhxlsuian = _ida_domain.PPC_zvmhxlsuian

PPC_zvmhulsuianp = _ida_domain.PPC_zvmhulsuianp

PPC_zvmhllsuianp = _ida_domain.PPC_zvmhllsuianp

PPC_zvmhuusuianp = _ida_domain.PPC_zvmhuusuianp

PPC_zvmhxlsuianp = _ida_domain.PPC_zvmhxlsuianp

PPC_zvmhuluiaa = _ida_domain.PPC_zvmhuluiaa

PPC_zvmhlluiaa = _ida_domain.PPC_zvmhlluiaa

PPC_zvmhuuuiaa = _ida_domain.PPC_zvmhuuuiaa

PPC_zvmhxluiaa = _ida_domain.PPC_zvmhxluiaa

PPC_zvmhuluian = _ida_domain.PPC_zvmhuluian

PPC_zvmhlluian = _ida_domain.PPC_zvmhlluian

PPC_zvmhuuuian = _ida_domain.PPC_zvmhuuuian

PPC_zvmhxluian = _ida_domain.PPC_zvmhxluian

PPC_zvmhuluianp = _ida_domain.PPC_zvmhuluianp

PPC_zvmhlluianp = _ida_domain.PPC_zvmhlluianp

PPC_zvmhuuuianp = _ida_domain.PPC_zvmhuuuianp

PPC_zvmhxluianp = _ida_domain.PPC_zvmhxluianp

PPC_zvmhulsiaas = _ida_domain.PPC_zvmhulsiaas

PPC_zvmhllsiaas = _ida_domain.PPC_zvmhllsiaas

PPC_zvmhuusiaas = _ida_domain.PPC_zvmhuusiaas

PPC_zvmhxlsiaas = _ida_domain.PPC_zvmhxlsiaas

PPC_zvmhulsians = _ida_domain.PPC_zvmhulsians

PPC_zvmhllsians = _ida_domain.PPC_zvmhllsians

PPC_zvmhuusians = _ida_domain.PPC_zvmhuusians

PPC_zvmhxlsians = _ida_domain.PPC_zvmhxlsians

PPC_zvmhulsianps = _ida_domain.PPC_zvmhulsianps

PPC_zvmhllsianps = _ida_domain.PPC_zvmhllsianps

PPC_zvmhuusianps = _ida_domain.PPC_zvmhuusianps

PPC_zvmhxlsianps = _ida_domain.PPC_zvmhxlsianps

PPC_zvmhulsuiaas = _ida_domain.PPC_zvmhulsuiaas

PPC_zvmhllsuiaas = _ida_domain.PPC_zvmhllsuiaas

PPC_zvmhuusuiaas = _ida_domain.PPC_zvmhuusuiaas

PPC_zvmhxlsuiaas = _ida_domain.PPC_zvmhxlsuiaas

PPC_zvmhulsuians = _ida_domain.PPC_zvmhulsuians

PPC_zvmhllsuians = _ida_domain.PPC_zvmhllsuians

PPC_zvmhuusuians = _ida_domain.PPC_zvmhuusuians

PPC_zvmhxlsuians = _ida_domain.PPC_zvmhxlsuians

PPC_zvmhulsuianps = _ida_domain.PPC_zvmhulsuianps

PPC_zvmhllsuianps = _ida_domain.PPC_zvmhllsuianps

PPC_zvmhuusuianps = _ida_domain.PPC_zvmhuusuianps

PPC_zvmhxlsuianps = _ida_domain.PPC_zvmhxlsuianps

PPC_zvmhuluiaas = _ida_domain.PPC_zvmhuluiaas

PPC_zvmhlluiaas = _ida_domain.PPC_zvmhlluiaas

PPC_zvmhuuuiaas = _ida_domain.PPC_zvmhuuuiaas

PPC_zvmhxluiaas = _ida_domain.PPC_zvmhxluiaas

PPC_zvmhuluians = _ida_domain.PPC_zvmhuluians

PPC_zvmhlluians = _ida_domain.PPC_zvmhlluians

PPC_zvmhuuuians = _ida_domain.PPC_zvmhuuuians

PPC_zvmhxluians = _ida_domain.PPC_zvmhxluians

PPC_zvmhuluianps = _ida_domain.PPC_zvmhuluianps

PPC_zvmhlluianps = _ida_domain.PPC_zvmhlluianps

PPC_zvmhuuuianps = _ida_domain.PPC_zvmhuuuianps

PPC_zvmhxluianps = _ida_domain.PPC_zvmhxluianps

PPC_zvdotphgaui = _ida_domain.PPC_zvdotphgaui

PPC_zvdotphxgaui = _ida_domain.PPC_zvdotphxgaui

PPC_zvdotphgasi = _ida_domain.PPC_zvdotphgasi

PPC_zvdotphxgasi = _ida_domain.PPC_zvdotphxgasi

PPC_zvdotphgasui = _ida_domain.PPC_zvdotphgasui

PPC_zvdotphxgasui = _ida_domain.PPC_zvdotphxgasui

PPC_zvdotphgasmf = _ida_domain.PPC_zvdotphgasmf

PPC_zvdotphxgasmf = _ida_domain.PPC_zvdotphxgasmf

PPC_zvdotphgauiaa = _ida_domain.PPC_zvdotphgauiaa

PPC_zvdotphxgauiaa = _ida_domain.PPC_zvdotphxgauiaa

PPC_zvdotphgasiaa = _ida_domain.PPC_zvdotphgasiaa

PPC_zvdotphxgasiaa = _ida_domain.PPC_zvdotphxgasiaa

PPC_zvdotphgasuiaa = _ida_domain.PPC_zvdotphgasuiaa

PPC_zvdotphxgasuiaa = _ida_domain.PPC_zvdotphxgasuiaa

PPC_zvdotphgasmfaa = _ida_domain.PPC_zvdotphgasmfaa

PPC_zvdotphxgasmfaa = _ida_domain.PPC_zvdotphxgasmfaa

PPC_zvdotphgauian = _ida_domain.PPC_zvdotphgauian

PPC_zvdotphxgauian = _ida_domain.PPC_zvdotphxgauian

PPC_zvdotphgasian = _ida_domain.PPC_zvdotphgasian

PPC_zvdotphxgasian = _ida_domain.PPC_zvdotphxgasian

PPC_zvdotphgasuian = _ida_domain.PPC_zvdotphgasuian

PPC_zvdotphxgasuian = _ida_domain.PPC_zvdotphxgasuian

PPC_zvdotphgasmfan = _ida_domain.PPC_zvdotphgasmfan

PPC_zvdotphxgasmfan = _ida_domain.PPC_zvdotphxgasmfan

PPC_zvdotphgsui = _ida_domain.PPC_zvdotphgsui

PPC_zvdotphgssi = _ida_domain.PPC_zvdotphgssi

PPC_zvdotphgssui = _ida_domain.PPC_zvdotphgssui

PPC_zvdotphgssmf = _ida_domain.PPC_zvdotphgssmf

PPC_zvdotphgsuiaa = _ida_domain.PPC_zvdotphgsuiaa

PPC_zvdotphgssiaa = _ida_domain.PPC_zvdotphgssiaa

PPC_zvdotphgssuiaa = _ida_domain.PPC_zvdotphgssuiaa

PPC_zvdotphgssmfaa = _ida_domain.PPC_zvdotphgssmfaa

PPC_zvdotphgsuian = _ida_domain.PPC_zvdotphgsuian

PPC_zvdotphgssian = _ida_domain.PPC_zvdotphgssian

PPC_zvdotphgssuian = _ida_domain.PPC_zvdotphgssuian

PPC_zvdotphgssmfan = _ida_domain.PPC_zvdotphgssmfan

PPC_zvdotphasfs = _ida_domain.PPC_zvdotphasfs

PPC_zvdotphxasfs = _ida_domain.PPC_zvdotphxasfs

PPC_zvdotphasfrs = _ida_domain.PPC_zvdotphasfrs

PPC_zvdotphxasfrs = _ida_domain.PPC_zvdotphxasfrs

PPC_zvdotphasfaas = _ida_domain.PPC_zvdotphasfaas

PPC_zvdotphxasfaas = _ida_domain.PPC_zvdotphxasfaas

PPC_zvdotphasfans = _ida_domain.PPC_zvdotphasfans

PPC_zvdotphxasfans = _ida_domain.PPC_zvdotphxasfans

PPC_zvdotphasfraas = _ida_domain.PPC_zvdotphasfraas

PPC_zvdotphxasfraas = _ida_domain.PPC_zvdotphxasfraas

PPC_zvdotphasfrans = _ida_domain.PPC_zvdotphasfrans

PPC_zvdotphxasfrans = _ida_domain.PPC_zvdotphxasfrans

PPC_zvdotphaui = _ida_domain.PPC_zvdotphaui

PPC_zvdotphxaui = _ida_domain.PPC_zvdotphxaui

PPC_zvdotphasi = _ida_domain.PPC_zvdotphasi

PPC_zvdotphxasi = _ida_domain.PPC_zvdotphxasi

PPC_zvdotphasui = _ida_domain.PPC_zvdotphasui

PPC_zvdotphxasui = _ida_domain.PPC_zvdotphxasui

PPC_zvdotphauiaa = _ida_domain.PPC_zvdotphauiaa

PPC_zvdotphxauiaa = _ida_domain.PPC_zvdotphxauiaa

PPC_zvdotphasiaa = _ida_domain.PPC_zvdotphasiaa

PPC_zvdotphxasiaa = _ida_domain.PPC_zvdotphxasiaa

PPC_zvdotphasuiaa = _ida_domain.PPC_zvdotphasuiaa

PPC_zvdotphxasuiaa = _ida_domain.PPC_zvdotphxasuiaa

PPC_zvdotphauian = _ida_domain.PPC_zvdotphauian

PPC_zvdotphxauian = _ida_domain.PPC_zvdotphxauian

PPC_zvdotphasian = _ida_domain.PPC_zvdotphasian

PPC_zvdotphxasian = _ida_domain.PPC_zvdotphxasian

PPC_zvdotphasuian = _ida_domain.PPC_zvdotphasuian

PPC_zvdotphxasuian = _ida_domain.PPC_zvdotphxasuian

PPC_zvdotphauis = _ida_domain.PPC_zvdotphauis

PPC_zvdotphxauis = _ida_domain.PPC_zvdotphxauis

PPC_zvdotphasis = _ida_domain.PPC_zvdotphasis

PPC_zvdotphxasis = _ida_domain.PPC_zvdotphxasis

PPC_zvdotphasuis = _ida_domain.PPC_zvdotphasuis

PPC_zvdotphxasuis = _ida_domain.PPC_zvdotphxasuis

PPC_zvdotphauiaas = _ida_domain.PPC_zvdotphauiaas

PPC_zvdotphxauiaas = _ida_domain.PPC_zvdotphxauiaas

PPC_zvdotphasiaas = _ida_domain.PPC_zvdotphasiaas

PPC_zvdotphxasiaas = _ida_domain.PPC_zvdotphxasiaas

PPC_zvdotphasuiaas = _ida_domain.PPC_zvdotphasuiaas

PPC_zvdotphxasuiaas = _ida_domain.PPC_zvdotphxasuiaas

PPC_zvdotphauians = _ida_domain.PPC_zvdotphauians

PPC_zvdotphxauians = _ida_domain.PPC_zvdotphxauians

PPC_zvdotphasians = _ida_domain.PPC_zvdotphasians

PPC_zvdotphxasians = _ida_domain.PPC_zvdotphxasians

PPC_zvdotphasuians = _ida_domain.PPC_zvdotphasuians

PPC_zvdotphxasuians = _ida_domain.PPC_zvdotphxasuians

PPC_zvdotphssfs = _ida_domain.PPC_zvdotphssfs

PPC_zvdotphssfrs = _ida_domain.PPC_zvdotphssfrs

PPC_zvdotphssfaas = _ida_domain.PPC_zvdotphssfaas

PPC_zvdotphssfans = _ida_domain.PPC_zvdotphssfans

PPC_zvdotphssfraas = _ida_domain.PPC_zvdotphssfraas

PPC_zvdotphssfrans = _ida_domain.PPC_zvdotphssfrans

PPC_zvdotphsui = _ida_domain.PPC_zvdotphsui

PPC_zvdotphssi = _ida_domain.PPC_zvdotphssi

PPC_zvdotphssui = _ida_domain.PPC_zvdotphssui

PPC_zvdotphsuiaa = _ida_domain.PPC_zvdotphsuiaa

PPC_zvdotphssiaa = _ida_domain.PPC_zvdotphssiaa

PPC_zvdotphssuiaa = _ida_domain.PPC_zvdotphssuiaa

PPC_zvdotphsuian = _ida_domain.PPC_zvdotphsuian

PPC_zvdotphssian = _ida_domain.PPC_zvdotphssian

PPC_zvdotphssuian = _ida_domain.PPC_zvdotphssuian

PPC_zvdotphsuis = _ida_domain.PPC_zvdotphsuis

PPC_zvdotphssis = _ida_domain.PPC_zvdotphssis

PPC_zvdotphssuis = _ida_domain.PPC_zvdotphssuis

PPC_zvdotphsuiaas = _ida_domain.PPC_zvdotphsuiaas

PPC_zvdotphssiaas = _ida_domain.PPC_zvdotphssiaas

PPC_zvdotphssuiaas = _ida_domain.PPC_zvdotphssuiaas

PPC_zvdotphsuians = _ida_domain.PPC_zvdotphsuians

PPC_zvdotphssians = _ida_domain.PPC_zvdotphssians

PPC_zvdotphssuians = _ida_domain.PPC_zvdotphssuians

PPC_zvdotphgwasmf = _ida_domain.PPC_zvdotphgwasmf

PPC_zvdotphxgwasmf = _ida_domain.PPC_zvdotphxgwasmf

PPC_zvdotphgwasmfr = _ida_domain.PPC_zvdotphgwasmfr

PPC_zvdotphxgwasmfr = _ida_domain.PPC_zvdotphxgwasmfr

PPC_zvdotphgwasmfaa = _ida_domain.PPC_zvdotphgwasmfaa

PPC_zvdotphxgwasmfaa = _ida_domain.PPC_zvdotphxgwasmfaa

PPC_zvdotphgwasmfan = _ida_domain.PPC_zvdotphgwasmfan

PPC_zvdotphxgwasmfan = _ida_domain.PPC_zvdotphxgwasmfan

PPC_zvdotphgwasmfraa = _ida_domain.PPC_zvdotphgwasmfraa

PPC_zvdotphxgwasmfraa = _ida_domain.PPC_zvdotphxgwasmfraa

PPC_zvdotphgwasmfran = _ida_domain.PPC_zvdotphgwasmfran

PPC_zvdotphxgwasmfran = _ida_domain.PPC_zvdotphxgwasmfran

PPC_zvdotphgwssmf = _ida_domain.PPC_zvdotphgwssmf

PPC_zvdotphgwssmfr = _ida_domain.PPC_zvdotphgwssmfr

PPC_zvdotphgwssmfaa = _ida_domain.PPC_zvdotphgwssmfaa

PPC_zvdotphgwssmfan = _ida_domain.PPC_zvdotphgwssmfan

PPC_zvdotphgwssmfraa = _ida_domain.PPC_zvdotphgwssmfraa

PPC_zvdotphgwssmfran = _ida_domain.PPC_zvdotphgwssmfran

PPC_msgclru = _ida_domain.PPC_msgclru

PPC_msgsndu = _ida_domain.PPC_msgsndu

PPC_urfid = _ida_domain.PPC_urfid

PPC_paddi = _ida_domain.PPC_paddi

PPC_plbz = _ida_domain.PPC_plbz

PPC_pld = _ida_domain.PPC_pld

PPC_plfd = _ida_domain.PPC_plfd

PPC_plfs = _ida_domain.PPC_plfs

PPC_plha = _ida_domain.PPC_plha

PPC_plhz = _ida_domain.PPC_plhz

PPC_plq = _ida_domain.PPC_plq

PPC_plwa = _ida_domain.PPC_plwa

PPC_plwz = _ida_domain.PPC_plwz

PPC_plxsd = _ida_domain.PPC_plxsd

PPC_plxssp = _ida_domain.PPC_plxssp

PPC_plxv = _ida_domain.PPC_plxv

PPC_plxvp = _ida_domain.PPC_plxvp

PPC_pmxvbf16ger2 = _ida_domain.PPC_pmxvbf16ger2

PPC_pmxvbf16ger2nn = _ida_domain.PPC_pmxvbf16ger2nn

PPC_pmxvbf16ger2np = _ida_domain.PPC_pmxvbf16ger2np

PPC_pmxvbf16ger2pn = _ida_domain.PPC_pmxvbf16ger2pn

PPC_pmxvbf16ger2pp = _ida_domain.PPC_pmxvbf16ger2pp

PPC_pmxvf16ger2 = _ida_domain.PPC_pmxvf16ger2

PPC_pmxvf16ger2nn = _ida_domain.PPC_pmxvf16ger2nn

PPC_pmxvf16ger2np = _ida_domain.PPC_pmxvf16ger2np

PPC_pmxvf16ger2pn = _ida_domain.PPC_pmxvf16ger2pn

PPC_pmxvf16ger2pp = _ida_domain.PPC_pmxvf16ger2pp

PPC_pmxvf32ger = _ida_domain.PPC_pmxvf32ger

PPC_pmxvf32gernn = _ida_domain.PPC_pmxvf32gernn

PPC_pmxvf32gernp = _ida_domain.PPC_pmxvf32gernp

PPC_pmxvf32gerpn = _ida_domain.PPC_pmxvf32gerpn

PPC_pmxvf32gerpp = _ida_domain.PPC_pmxvf32gerpp

PPC_pmxvf64ger = _ida_domain.PPC_pmxvf64ger

PPC_pmxvf64gernn = _ida_domain.PPC_pmxvf64gernn

PPC_pmxvf64gernp = _ida_domain.PPC_pmxvf64gernp

PPC_pmxvf64gerpn = _ida_domain.PPC_pmxvf64gerpn

PPC_pmxvf64gerpp = _ida_domain.PPC_pmxvf64gerpp

PPC_pmxvi16ger2 = _ida_domain.PPC_pmxvi16ger2

PPC_pmxvi16ger2pp = _ida_domain.PPC_pmxvi16ger2pp

PPC_pmxvi16ger2s = _ida_domain.PPC_pmxvi16ger2s

PPC_pmxvi16ger2spp = _ida_domain.PPC_pmxvi16ger2spp

PPC_pmxvi4ger8 = _ida_domain.PPC_pmxvi4ger8

PPC_pmxvi4ger8pp = _ida_domain.PPC_pmxvi4ger8pp

PPC_pmxvi8ger4 = _ida_domain.PPC_pmxvi8ger4

PPC_pmxvi8ger4pp = _ida_domain.PPC_pmxvi8ger4pp

PPC_pmxvi8ger4spp = _ida_domain.PPC_pmxvi8ger4spp

PPC_pnop = _ida_domain.PPC_pnop

PPC_pstb = _ida_domain.PPC_pstb

PPC_pstd = _ida_domain.PPC_pstd

PPC_pstfd = _ida_domain.PPC_pstfd

PPC_pstfs = _ida_domain.PPC_pstfs

PPC_psth = _ida_domain.PPC_psth

PPC_pstq = _ida_domain.PPC_pstq

PPC_pstw = _ida_domain.PPC_pstw

PPC_pstxsd = _ida_domain.PPC_pstxsd

PPC_pstxssp = _ida_domain.PPC_pstxssp

PPC_pstxv = _ida_domain.PPC_pstxv

PPC_pstxvp = _ida_domain.PPC_pstxvp

PPC_brd = _ida_domain.PPC_brd

PPC_brh = _ida_domain.PPC_brh

PPC_brw = _ida_domain.PPC_brw

PPC_cfuged = _ida_domain.PPC_cfuged

PPC_cntlzdm = _ida_domain.PPC_cntlzdm

PPC_cnttzdm = _ida_domain.PPC_cnttzdm

PPC_dcffixqq = _ida_domain.PPC_dcffixqq

PPC_dctfixqq = _ida_domain.PPC_dctfixqq

PPC_lxvkq = _ida_domain.PPC_lxvkq

PPC_lxvp = _ida_domain.PPC_lxvp

PPC_lxvpx = _ida_domain.PPC_lxvpx

PPC_lxvrbx = _ida_domain.PPC_lxvrbx

PPC_lxvrdx = _ida_domain.PPC_lxvrdx

PPC_lxvrhx = _ida_domain.PPC_lxvrhx

PPC_lxvrwx = _ida_domain.PPC_lxvrwx

PPC_mtvsrbm = _ida_domain.PPC_mtvsrbm

PPC_mtvsrbmi = _ida_domain.PPC_mtvsrbmi

PPC_mtvsrdm = _ida_domain.PPC_mtvsrdm

PPC_mtvsrhm = _ida_domain.PPC_mtvsrhm

PPC_mtvsrqm = _ida_domain.PPC_mtvsrqm

PPC_mtvsrwm = _ida_domain.PPC_mtvsrwm

PPC_pdepd = _ida_domain.PPC_pdepd

PPC_pextd = _ida_domain.PPC_pextd

PPC_setbc = _ida_domain.PPC_setbc

PPC_setbcr = _ida_domain.PPC_setbcr

PPC_setnbc = _ida_domain.PPC_setnbc

PPC_setnbcr = _ida_domain.PPC_setnbcr

PPC_stxvp = _ida_domain.PPC_stxvp

PPC_stxvpx = _ida_domain.PPC_stxvpx

PPC_stxvrbx = _ida_domain.PPC_stxvrbx

PPC_stxvrdx = _ida_domain.PPC_stxvrdx

PPC_stxvrhx = _ida_domain.PPC_stxvrhx

PPC_stxvrwx = _ida_domain.PPC_stxvrwx

PPC_vcfuged = _ida_domain.PPC_vcfuged

PPC_vclrlb = _ida_domain.PPC_vclrlb

PPC_vclrrb = _ida_domain.PPC_vclrrb

PPC_vclzdm = _ida_domain.PPC_vclzdm

PPC_vcmpequq = _ida_domain.PPC_vcmpequq

PPC_vcmpgtsq = _ida_domain.PPC_vcmpgtsq

PPC_vcmpgtuq = _ida_domain.PPC_vcmpgtuq

PPC_vcmpsq = _ida_domain.PPC_vcmpsq

PPC_vcmpuq = _ida_domain.PPC_vcmpuq

PPC_vcntmbb = _ida_domain.PPC_vcntmbb

PPC_vcntmbd = _ida_domain.PPC_vcntmbd

PPC_vcntmbh = _ida_domain.PPC_vcntmbh

PPC_vcntmbw = _ida_domain.PPC_vcntmbw

PPC_vctzdm = _ida_domain.PPC_vctzdm

PPC_vdivesd = _ida_domain.PPC_vdivesd

PPC_vdivesq = _ida_domain.PPC_vdivesq

PPC_vdivesw = _ida_domain.PPC_vdivesw

PPC_vdiveud = _ida_domain.PPC_vdiveud

PPC_vdiveuq = _ida_domain.PPC_vdiveuq

PPC_vdiveuw = _ida_domain.PPC_vdiveuw

PPC_vdivsd = _ida_domain.PPC_vdivsd

PPC_vdivsq = _ida_domain.PPC_vdivsq

PPC_vdivsw = _ida_domain.PPC_vdivsw

PPC_vdivud = _ida_domain.PPC_vdivud

PPC_vdivuq = _ida_domain.PPC_vdivuq

PPC_vdivuw = _ida_domain.PPC_vdivuw

PPC_vexpandbm = _ida_domain.PPC_vexpandbm

PPC_vexpanddm = _ida_domain.PPC_vexpanddm

PPC_vexpandhm = _ida_domain.PPC_vexpandhm

PPC_vexpandqm = _ida_domain.PPC_vexpandqm

PPC_vexpandwm = _ida_domain.PPC_vexpandwm

PPC_vextddvlx = _ida_domain.PPC_vextddvlx

PPC_vextddvrx = _ida_domain.PPC_vextddvrx

PPC_vextdubvlx = _ida_domain.PPC_vextdubvlx

PPC_vextdubvrx = _ida_domain.PPC_vextdubvrx

PPC_vextduhvlx = _ida_domain.PPC_vextduhvlx

PPC_vextduhvrx = _ida_domain.PPC_vextduhvrx

PPC_vextduwvlx = _ida_domain.PPC_vextduwvlx

PPC_vextduwvrx = _ida_domain.PPC_vextduwvrx

PPC_vextractbm = _ida_domain.PPC_vextractbm

PPC_vextractdm = _ida_domain.PPC_vextractdm

PPC_vextracthm = _ida_domain.PPC_vextracthm

PPC_vextractqm = _ida_domain.PPC_vextractqm

PPC_vextractwm = _ida_domain.PPC_vextractwm

PPC_vextsd2q = _ida_domain.PPC_vextsd2q

PPC_vgnb = _ida_domain.PPC_vgnb

PPC_vinsblx = _ida_domain.PPC_vinsblx

PPC_vinsbrx = _ida_domain.PPC_vinsbrx

PPC_vinsbvlx = _ida_domain.PPC_vinsbvlx

PPC_vinsbvrx = _ida_domain.PPC_vinsbvrx

PPC_vinsd = _ida_domain.PPC_vinsd

PPC_vinsdlx = _ida_domain.PPC_vinsdlx

PPC_vinsdrx = _ida_domain.PPC_vinsdrx

PPC_vinshlx = _ida_domain.PPC_vinshlx

PPC_vinshrx = _ida_domain.PPC_vinshrx

PPC_vinshvlx = _ida_domain.PPC_vinshvlx

PPC_vinshvrx = _ida_domain.PPC_vinshvrx

PPC_vinsw = _ida_domain.PPC_vinsw

PPC_vinswlx = _ida_domain.PPC_vinswlx

PPC_vinswrx = _ida_domain.PPC_vinswrx

PPC_vinswvlx = _ida_domain.PPC_vinswvlx

PPC_vinswvrx = _ida_domain.PPC_vinswvrx

PPC_vmodsd = _ida_domain.PPC_vmodsd

PPC_vmodsq = _ida_domain.PPC_vmodsq

PPC_vmodsw = _ida_domain.PPC_vmodsw

PPC_vmodud = _ida_domain.PPC_vmodud

PPC_vmoduq = _ida_domain.PPC_vmoduq

PPC_vmoduw = _ida_domain.PPC_vmoduw

PPC_vmsumcud = _ida_domain.PPC_vmsumcud

PPC_vmulesd = _ida_domain.PPC_vmulesd

PPC_vmuleud = _ida_domain.PPC_vmuleud

PPC_vmulhsd = _ida_domain.PPC_vmulhsd

PPC_vmulhsw = _ida_domain.PPC_vmulhsw

PPC_vmulhud = _ida_domain.PPC_vmulhud

PPC_vmulhuw = _ida_domain.PPC_vmulhuw

PPC_vmulld = _ida_domain.PPC_vmulld

PPC_vmulosd = _ida_domain.PPC_vmulosd

PPC_vmuloud = _ida_domain.PPC_vmuloud

PPC_vpdepd = _ida_domain.PPC_vpdepd

PPC_vpextd = _ida_domain.PPC_vpextd

PPC_vrlq = _ida_domain.PPC_vrlq

PPC_vrlqmi = _ida_domain.PPC_vrlqmi

PPC_vrlqnm = _ida_domain.PPC_vrlqnm

PPC_vsldbi = _ida_domain.PPC_vsldbi

PPC_vslq = _ida_domain.PPC_vslq

PPC_vsraq = _ida_domain.PPC_vsraq

PPC_vsrdbi = _ida_domain.PPC_vsrdbi

PPC_vsrq = _ida_domain.PPC_vsrq

PPC_vstribl = _ida_domain.PPC_vstribl

PPC_vstribr = _ida_domain.PPC_vstribr

PPC_vstrihl = _ida_domain.PPC_vstrihl

PPC_vstrihr = _ida_domain.PPC_vstrihr

PPC_xscmpeqqp = _ida_domain.PPC_xscmpeqqp

PPC_xscmpgeqp = _ida_domain.PPC_xscmpgeqp

PPC_xscmpgtqp = _ida_domain.PPC_xscmpgtqp

PPC_xscvqpsqz = _ida_domain.PPC_xscvqpsqz

PPC_xscvqpuqz = _ida_domain.PPC_xscvqpuqz

PPC_xscvsqqp = _ida_domain.PPC_xscvsqqp

PPC_xscvuqqp = _ida_domain.PPC_xscvuqqp

PPC_xsmaxcqp = _ida_domain.PPC_xsmaxcqp

PPC_xsmincqp = _ida_domain.PPC_xsmincqp

PPC_xvbf16ger2 = _ida_domain.PPC_xvbf16ger2

PPC_xvbf16ger2nn = _ida_domain.PPC_xvbf16ger2nn

PPC_xvbf16ger2np = _ida_domain.PPC_xvbf16ger2np

PPC_xvbf16ger2pn = _ida_domain.PPC_xvbf16ger2pn

PPC_xvbf16ger2pp = _ida_domain.PPC_xvbf16ger2pp

PPC_xvcvbf16spn = _ida_domain.PPC_xvcvbf16spn

PPC_xvcvspbf16 = _ida_domain.PPC_xvcvspbf16

PPC_xvf16ger2 = _ida_domain.PPC_xvf16ger2

PPC_xvf16ger2nn = _ida_domain.PPC_xvf16ger2nn

PPC_xvf16ger2np = _ida_domain.PPC_xvf16ger2np

PPC_xvf16ger2pn = _ida_domain.PPC_xvf16ger2pn

PPC_xvf16ger2pp = _ida_domain.PPC_xvf16ger2pp

PPC_xvf32ger = _ida_domain.PPC_xvf32ger

PPC_xvf32gernn = _ida_domain.PPC_xvf32gernn

PPC_xvf32gernp = _ida_domain.PPC_xvf32gernp

PPC_xvf32gerpn = _ida_domain.PPC_xvf32gerpn

PPC_xvf32gerpp = _ida_domain.PPC_xvf32gerpp

PPC_xvf64ger = _ida_domain.PPC_xvf64ger

PPC_xvf64gernn = _ida_domain.PPC_xvf64gernn

PPC_xvf64gernp = _ida_domain.PPC_xvf64gernp

PPC_xvf64gerpn = _ida_domain.PPC_xvf64gerpn

PPC_xvf64gerpp = _ida_domain.PPC_xvf64gerpp

PPC_xvi16ger2 = _ida_domain.PPC_xvi16ger2

PPC_xvi16ger2pp = _ida_domain.PPC_xvi16ger2pp

PPC_xvi16ger2s = _ida_domain.PPC_xvi16ger2s

PPC_xvi16ger2spp = _ida_domain.PPC_xvi16ger2spp

PPC_xvi4ger8 = _ida_domain.PPC_xvi4ger8

PPC_xvi4ger8pp = _ida_domain.PPC_xvi4ger8pp

PPC_xvi8ger4 = _ida_domain.PPC_xvi8ger4

PPC_xvi8ger4pp = _ida_domain.PPC_xvi8ger4pp

PPC_xvi8ger4spp = _ida_domain.PPC_xvi8ger4spp

PPC_xvtlsbb = _ida_domain.PPC_xvtlsbb

PPC_xxblendvb = _ida_domain.PPC_xxblendvb

PPC_xxblendvd = _ida_domain.PPC_xxblendvd

PPC_xxblendvh = _ida_domain.PPC_xxblendvh

PPC_xxblendvw = _ida_domain.PPC_xxblendvw

PPC_xxeval = _ida_domain.PPC_xxeval

PPC_xxgenpcvbm = _ida_domain.PPC_xxgenpcvbm

PPC_xxgenpcvdm = _ida_domain.PPC_xxgenpcvdm

PPC_xxgenpcvhm = _ida_domain.PPC_xxgenpcvhm

PPC_xxgenpcvwm = _ida_domain.PPC_xxgenpcvwm

PPC_xxmfacc = _ida_domain.PPC_xxmfacc

PPC_xxmtacc = _ida_domain.PPC_xxmtacc

PPC_xxpermx = _ida_domain.PPC_xxpermx

PPC_xxsetaccz = _ida_domain.PPC_xxsetaccz

PPC_xxsplti32dx = _ida_domain.PPC_xxsplti32dx

PPC_xxspltidp = _ida_domain.PPC_xxspltidp

PPC_xxspltiw = _ida_domain.PPC_xxspltiw

PPC_last = _ida_domain.PPC_last

NEC850_NULL = _ida_domain.NEC850_NULL

NEC850_BREAKPOINT = _ida_domain.NEC850_BREAKPOINT

NEC850_XORI = _ida_domain.NEC850_XORI

NEC850_XOR = _ida_domain.NEC850_XOR

NEC850_TST1 = _ida_domain.NEC850_TST1

NEC850_TST = _ida_domain.NEC850_TST

NEC850_TRAP = _ida_domain.NEC850_TRAP

NEC850_SUBR = _ida_domain.NEC850_SUBR

NEC850_SUB = _ida_domain.NEC850_SUB

NEC850_STSR = _ida_domain.NEC850_STSR

NEC850_ST_B = _ida_domain.NEC850_ST_B

NEC850_ST_H = _ida_domain.NEC850_ST_H

NEC850_ST_W = _ida_domain.NEC850_ST_W

NEC850_SST_B = _ida_domain.NEC850_SST_B

NEC850_SST_H = _ida_domain.NEC850_SST_H

NEC850_SST_W = _ida_domain.NEC850_SST_W

NEC850_SLD_B = _ida_domain.NEC850_SLD_B

NEC850_SLD_H = _ida_domain.NEC850_SLD_H

NEC850_SLD_W = _ida_domain.NEC850_SLD_W

NEC850_SHR = _ida_domain.NEC850_SHR

NEC850_SHL = _ida_domain.NEC850_SHL

NEC850_SET1 = _ida_domain.NEC850_SET1

NEC850_SETF = _ida_domain.NEC850_SETF

NEC850_SATSUBR = _ida_domain.NEC850_SATSUBR

NEC850_SATSUBI = _ida_domain.NEC850_SATSUBI

NEC850_SATSUB = _ida_domain.NEC850_SATSUB

NEC850_SATADD = _ida_domain.NEC850_SATADD

NEC850_SAR = _ida_domain.NEC850_SAR

NEC850_RETI = _ida_domain.NEC850_RETI

NEC850_ORI = _ida_domain.NEC850_ORI

NEC850_OR = _ida_domain.NEC850_OR

NEC850_NOT1 = _ida_domain.NEC850_NOT1

NEC850_NOT = _ida_domain.NEC850_NOT

NEC850_NOP = _ida_domain.NEC850_NOP

NEC850_MULHI = _ida_domain.NEC850_MULHI

NEC850_MULH = _ida_domain.NEC850_MULH

NEC850_MOVHI = _ida_domain.NEC850_MOVHI

NEC850_MOVEA = _ida_domain.NEC850_MOVEA

NEC850_MOV = _ida_domain.NEC850_MOV

NEC850_LDSR = _ida_domain.NEC850_LDSR

NEC850_LD_B = _ida_domain.NEC850_LD_B

NEC850_LD_H = _ida_domain.NEC850_LD_H

NEC850_LD_W = _ida_domain.NEC850_LD_W

NEC850_JR = _ida_domain.NEC850_JR

NEC850_JMP = _ida_domain.NEC850_JMP

NEC850_JARL = _ida_domain.NEC850_JARL

NEC850_HALT = _ida_domain.NEC850_HALT

NEC850_EI = _ida_domain.NEC850_EI

NEC850_DIVH = _ida_domain.NEC850_DIVH

NEC850_DI = _ida_domain.NEC850_DI

NEC850_CMP = _ida_domain.NEC850_CMP

NEC850_CLR1 = _ida_domain.NEC850_CLR1

NEC850_BV = _ida_domain.NEC850_BV

NEC850_BL = _ida_domain.NEC850_BL

NEC850_BZ = _ida_domain.NEC850_BZ

NEC850_BNH = _ida_domain.NEC850_BNH

NEC850_BN = _ida_domain.NEC850_BN

NEC850_BR = _ida_domain.NEC850_BR

NEC850_BLT = _ida_domain.NEC850_BLT

NEC850_BLE = _ida_domain.NEC850_BLE

NEC850_BNV = _ida_domain.NEC850_BNV

NEC850_BNC = _ida_domain.NEC850_BNC

NEC850_BNZ = _ida_domain.NEC850_BNZ

NEC850_BH = _ida_domain.NEC850_BH

NEC850_BP = _ida_domain.NEC850_BP

NEC850_BSA = _ida_domain.NEC850_BSA

NEC850_BGE = _ida_domain.NEC850_BGE

NEC850_BGT = _ida_domain.NEC850_BGT

NEC850_ANDI = _ida_domain.NEC850_ANDI

NEC850_AND = _ida_domain.NEC850_AND

NEC850_ADDI = _ida_domain.NEC850_ADDI

NEC850_ADD = _ida_domain.NEC850_ADD

NEC850_SWITCH = _ida_domain.NEC850_SWITCH

NEC850_ZXB = _ida_domain.NEC850_ZXB

NEC850_SXB = _ida_domain.NEC850_SXB

NEC850_ZXH = _ida_domain.NEC850_ZXH

NEC850_SXH = _ida_domain.NEC850_SXH

NEC850_DISPOSE_r0 = _ida_domain.NEC850_DISPOSE_r0

NEC850_DISPOSE_r = _ida_domain.NEC850_DISPOSE_r

NEC850_CALLT = _ida_domain.NEC850_CALLT

NEC850_DBTRAP = _ida_domain.NEC850_DBTRAP

NEC850_DBRET = _ida_domain.NEC850_DBRET

NEC850_CTRET = _ida_domain.NEC850_CTRET

NEC850_SASF = _ida_domain.NEC850_SASF

NEC850_PREPARE_sp = _ida_domain.NEC850_PREPARE_sp

NEC850_PREPARE_i = _ida_domain.NEC850_PREPARE_i

NEC850_MUL = _ida_domain.NEC850_MUL

NEC850_MULU = _ida_domain.NEC850_MULU

NEC850_DIVH_r3 = _ida_domain.NEC850_DIVH_r3

NEC850_DIVHU = _ida_domain.NEC850_DIVHU

NEC850_DIV = _ida_domain.NEC850_DIV

NEC850_DIVU = _ida_domain.NEC850_DIVU

NEC850_BSW = _ida_domain.NEC850_BSW

NEC850_BSH = _ida_domain.NEC850_BSH

NEC850_HSW = _ida_domain.NEC850_HSW

NEC850_CMOV = _ida_domain.NEC850_CMOV

NEC850_SLD_BU = _ida_domain.NEC850_SLD_BU

NEC850_SLD_HU = _ida_domain.NEC850_SLD_HU

NEC850_LD_BU = _ida_domain.NEC850_LD_BU

NEC850_LD_HU = _ida_domain.NEC850_LD_HU

NEC850_ADF = _ida_domain.NEC850_ADF

NEC850_HSH = _ida_domain.NEC850_HSH

NEC850_MAC = _ida_domain.NEC850_MAC

NEC850_MACU = _ida_domain.NEC850_MACU

NEC850_SBF = _ida_domain.NEC850_SBF

NEC850_SCH0L = _ida_domain.NEC850_SCH0L

NEC850_SCH0R = _ida_domain.NEC850_SCH0R

NEC850_SCH1L = _ida_domain.NEC850_SCH1L

NEC850_SCH1R = _ida_domain.NEC850_SCH1R

NEC850_CAXI = _ida_domain.NEC850_CAXI

NEC850_DIVQ = _ida_domain.NEC850_DIVQ

NEC850_DIVQU = _ida_domain.NEC850_DIVQU

NEC850_EIRET = _ida_domain.NEC850_EIRET

NEC850_FERET = _ida_domain.NEC850_FERET

NEC850_FETRAP = _ida_domain.NEC850_FETRAP

NEC850_RMTRAP = _ida_domain.NEC850_RMTRAP

NEC850_RIE = _ida_domain.NEC850_RIE

NEC850_SYNCE = _ida_domain.NEC850_SYNCE

NEC850_SYNCM = _ida_domain.NEC850_SYNCM

NEC850_SYNCP = _ida_domain.NEC850_SYNCP

NEC850_SYSCALL = _ida_domain.NEC850_SYSCALL

NEC850_CVT_SW = _ida_domain.NEC850_CVT_SW

NEC850_TRNC_SW = _ida_domain.NEC850_TRNC_SW

NEC850_CVT_WS = _ida_domain.NEC850_CVT_WS

NEC850_LDFC = _ida_domain.NEC850_LDFC

NEC850_LDFF = _ida_domain.NEC850_LDFF

NEC850_STFC = _ida_domain.NEC850_STFC

NEC850_STFF = _ida_domain.NEC850_STFF

NEC850_TRFF = _ida_domain.NEC850_TRFF

NEC850_ABSF_D = _ida_domain.NEC850_ABSF_D

NEC850_ABSF_S = _ida_domain.NEC850_ABSF_S

NEC850_ADDF_D = _ida_domain.NEC850_ADDF_D

NEC850_ADDF_S = _ida_domain.NEC850_ADDF_S

NEC850_DIVF_D = _ida_domain.NEC850_DIVF_D

NEC850_DIVF_S = _ida_domain.NEC850_DIVF_S

NEC850_MAXF_D = _ida_domain.NEC850_MAXF_D

NEC850_MAXF_S = _ida_domain.NEC850_MAXF_S

NEC850_MINF_D = _ida_domain.NEC850_MINF_D

NEC850_MINF_S = _ida_domain.NEC850_MINF_S

NEC850_MULF_D = _ida_domain.NEC850_MULF_D

NEC850_MULF_S = _ida_domain.NEC850_MULF_S

NEC850_NEGF_D = _ida_domain.NEC850_NEGF_D

NEC850_NEGF_S = _ida_domain.NEC850_NEGF_S

NEC850_RECIPF_D = _ida_domain.NEC850_RECIPF_D

NEC850_RECIPF_S = _ida_domain.NEC850_RECIPF_S

NEC850_RSQRTF_D = _ida_domain.NEC850_RSQRTF_D

NEC850_RSQRTF_S = _ida_domain.NEC850_RSQRTF_S

NEC850_SQRTF_D = _ida_domain.NEC850_SQRTF_D

NEC850_SQRTF_S = _ida_domain.NEC850_SQRTF_S

NEC850_SUBF_D = _ida_domain.NEC850_SUBF_D

NEC850_SUBF_S = _ida_domain.NEC850_SUBF_S

NEC850_MADDF_S = _ida_domain.NEC850_MADDF_S

NEC850_MSUBF_S = _ida_domain.NEC850_MSUBF_S

NEC850_NMADDF_S = _ida_domain.NEC850_NMADDF_S

NEC850_NMSUBF_S = _ida_domain.NEC850_NMSUBF_S

NEC850_CEILF_DL = _ida_domain.NEC850_CEILF_DL

NEC850_CEILF_DW = _ida_domain.NEC850_CEILF_DW

NEC850_CEILF_SL = _ida_domain.NEC850_CEILF_SL

NEC850_CEILF_SW = _ida_domain.NEC850_CEILF_SW

NEC850_CEILF_DUL = _ida_domain.NEC850_CEILF_DUL

NEC850_CEILF_DUW = _ida_domain.NEC850_CEILF_DUW

NEC850_CEILF_SUL = _ida_domain.NEC850_CEILF_SUL

NEC850_CEILF_SUW = _ida_domain.NEC850_CEILF_SUW

NEC850_CVTF_DL = _ida_domain.NEC850_CVTF_DL

NEC850_CVTF_DS = _ida_domain.NEC850_CVTF_DS

NEC850_CVTF_DUL = _ida_domain.NEC850_CVTF_DUL

NEC850_CVTF_DUW = _ida_domain.NEC850_CVTF_DUW

NEC850_CVTF_DW = _ida_domain.NEC850_CVTF_DW

NEC850_CVTF_LD = _ida_domain.NEC850_CVTF_LD

NEC850_CVTF_LS = _ida_domain.NEC850_CVTF_LS

NEC850_CVTF_SD = _ida_domain.NEC850_CVTF_SD

NEC850_CVTF_SL = _ida_domain.NEC850_CVTF_SL

NEC850_CVTF_SUL = _ida_domain.NEC850_CVTF_SUL

NEC850_CVTF_SUW = _ida_domain.NEC850_CVTF_SUW

NEC850_CVTF_SW = _ida_domain.NEC850_CVTF_SW

NEC850_CVTF_ULD = _ida_domain.NEC850_CVTF_ULD

NEC850_CVTF_ULS = _ida_domain.NEC850_CVTF_ULS

NEC850_CVTF_UWD = _ida_domain.NEC850_CVTF_UWD

NEC850_CVTF_UWS = _ida_domain.NEC850_CVTF_UWS

NEC850_CVTF_WD = _ida_domain.NEC850_CVTF_WD

NEC850_CVTF_WS = _ida_domain.NEC850_CVTF_WS

NEC850_FLOORF_DL = _ida_domain.NEC850_FLOORF_DL

NEC850_FLOORF_DW = _ida_domain.NEC850_FLOORF_DW

NEC850_FLOORF_SL = _ida_domain.NEC850_FLOORF_SL

NEC850_FLOORF_SW = _ida_domain.NEC850_FLOORF_SW

NEC850_FLOORF_DUL = _ida_domain.NEC850_FLOORF_DUL

NEC850_FLOORF_DUW = _ida_domain.NEC850_FLOORF_DUW

NEC850_FLOORF_SUL = _ida_domain.NEC850_FLOORF_SUL

NEC850_FLOORF_SUW = _ida_domain.NEC850_FLOORF_SUW

NEC850_TRNCF_DL = _ida_domain.NEC850_TRNCF_DL

NEC850_TRNCF_DUL = _ida_domain.NEC850_TRNCF_DUL

NEC850_TRNCF_DUW = _ida_domain.NEC850_TRNCF_DUW

NEC850_TRNCF_DW = _ida_domain.NEC850_TRNCF_DW

NEC850_TRNCF_SL = _ida_domain.NEC850_TRNCF_SL

NEC850_TRNCF_SUL = _ida_domain.NEC850_TRNCF_SUL

NEC850_TRNCF_SUW = _ida_domain.NEC850_TRNCF_SUW

NEC850_TRNCF_SW = _ida_domain.NEC850_TRNCF_SW

NEC850_CMPF_S = _ida_domain.NEC850_CMPF_S

NEC850_CMPF_D = _ida_domain.NEC850_CMPF_D

NEC850_CMOVF_S = _ida_domain.NEC850_CMOVF_S

NEC850_CMOVF_D = _ida_domain.NEC850_CMOVF_D

NEC850_TRFSR = _ida_domain.NEC850_TRFSR

NEC850_SYNCI = _ida_domain.NEC850_SYNCI

NEC850_SNOOZE = _ida_domain.NEC850_SNOOZE

NEC850_BINS = _ida_domain.NEC850_BINS

NEC850_ROTL = _ida_domain.NEC850_ROTL

NEC850_LOOP = _ida_domain.NEC850_LOOP

NEC850_LD_DW = _ida_domain.NEC850_LD_DW

NEC850_ST_DW = _ida_domain.NEC850_ST_DW

NEC850_LDL_W = _ida_domain.NEC850_LDL_W

NEC850_STC_W = _ida_domain.NEC850_STC_W

NEC850_CLL = _ida_domain.NEC850_CLL

NEC850_CACHE = _ida_domain.NEC850_CACHE

NEC850_PREF = _ida_domain.NEC850_PREF

NEC850_PUSHSP = _ida_domain.NEC850_PUSHSP

NEC850_POPSP = _ida_domain.NEC850_POPSP

NEC850_CVTF_HS = _ida_domain.NEC850_CVTF_HS

NEC850_CVTF_SH = _ida_domain.NEC850_CVTF_SH

NEC850_FMAF_S = _ida_domain.NEC850_FMAF_S

NEC850_FMSF_S = _ida_domain.NEC850_FMSF_S

NEC850_FNMAF_S = _ida_domain.NEC850_FNMAF_S

NEC850_FNMSF_S = _ida_domain.NEC850_FNMSF_S

NEC850_DBPUSH = _ida_domain.NEC850_DBPUSH

NEC850_DBCP = _ida_domain.NEC850_DBCP

NEC850_DBTAG = _ida_domain.NEC850_DBTAG

NEC850_DBHVTRAP = _ida_domain.NEC850_DBHVTRAP

NEC850_EST = _ida_domain.NEC850_EST

NEC850_DST = _ida_domain.NEC850_DST

NEC850_HVTRAP = _ida_domain.NEC850_HVTRAP

NEC850_HVCALL = _ida_domain.NEC850_HVCALL

NEC850_LDVC_SR = _ida_domain.NEC850_LDVC_SR

NEC850_STVC_SR = _ida_domain.NEC850_STVC_SR

NEC850_LDTC_GR = _ida_domain.NEC850_LDTC_GR

NEC850_STTC_GR = _ida_domain.NEC850_STTC_GR

NEC850_LDTC_PC = _ida_domain.NEC850_LDTC_PC

NEC850_STTC_PC = _ida_domain.NEC850_STTC_PC

NEC850_LDTC_SR = _ida_domain.NEC850_LDTC_SR

NEC850_STTC_SR = _ida_domain.NEC850_STTC_SR

NEC850_LDTC_VR = _ida_domain.NEC850_LDTC_VR

NEC850_STTC_VR = _ida_domain.NEC850_STTC_VR

NEC850_TLBAI = _ida_domain.NEC850_TLBAI

NEC850_TLBR = _ida_domain.NEC850_TLBR

NEC850_TLBS = _ida_domain.NEC850_TLBS

NEC850_TLBVI = _ida_domain.NEC850_TLBVI

NEC850_TLBW = _ida_domain.NEC850_TLBW

NEC850_ROUNDF_DL = _ida_domain.NEC850_ROUNDF_DL

NEC850_ROUNDF_DW = _ida_domain.NEC850_ROUNDF_DW

NEC850_ROUNDF_DUL = _ida_domain.NEC850_ROUNDF_DUL

NEC850_ROUNDF_DUW = _ida_domain.NEC850_ROUNDF_DUW

NEC850_ROUNDF_SL = _ida_domain.NEC850_ROUNDF_SL

NEC850_ROUNDF_SW = _ida_domain.NEC850_ROUNDF_SW

NEC850_ROUNDF_SUL = _ida_domain.NEC850_ROUNDF_SUL

NEC850_ROUNDF_SUW = _ida_domain.NEC850_ROUNDF_SUW

NEC850_LDM_MP = _ida_domain.NEC850_LDM_MP

NEC850_STM_MP = _ida_domain.NEC850_STM_MP

NEC850_CLIP_B = _ida_domain.NEC850_CLIP_B

NEC850_CLIP_BU = _ida_domain.NEC850_CLIP_BU

NEC850_CLIP_H = _ida_domain.NEC850_CLIP_H

NEC850_CLIP_HU = _ida_domain.NEC850_CLIP_HU

NEC850_LDL_BU = _ida_domain.NEC850_LDL_BU

NEC850_LDL_HU = _ida_domain.NEC850_LDL_HU

NEC850_RESBANK = _ida_domain.NEC850_RESBANK

NEC850_STC_B = _ida_domain.NEC850_STC_B

NEC850_STC_H = _ida_domain.NEC850_STC_H

NEC850_VAND = _ida_domain.NEC850_VAND

NEC850_VOR = _ida_domain.NEC850_VOR

NEC850_VXOR = _ida_domain.NEC850_VXOR

NEC850_VNOT = _ida_domain.NEC850_VNOT

NEC850_VSAR_H = _ida_domain.NEC850_VSAR_H

NEC850_VSAR_W = _ida_domain.NEC850_VSAR_W

NEC850_VSAR_DW = _ida_domain.NEC850_VSAR_DW

NEC850_VSHR_H = _ida_domain.NEC850_VSHR_H

NEC850_VSHR_W = _ida_domain.NEC850_VSHR_W

NEC850_VSHR_DW = _ida_domain.NEC850_VSHR_DW

NEC850_VSHL_H = _ida_domain.NEC850_VSHL_H

NEC850_VSHL_W = _ida_domain.NEC850_VSHL_W

NEC850_VSHL_DW = _ida_domain.NEC850_VSHL_DW

NEC850_VCONCAT_B = _ida_domain.NEC850_VCONCAT_B

NEC850_VITLV_H = _ida_domain.NEC850_VITLV_H

NEC850_VITLV_W = _ida_domain.NEC850_VITLV_W

NEC850_VITLVHW_H = _ida_domain.NEC850_VITLVHW_H

NEC850_VITLVWH_H = _ida_domain.NEC850_VITLVWH_H

NEC850_VSHUFL_B = _ida_domain.NEC850_VSHUFL_B

NEC850_VBSWAP_DW = _ida_domain.NEC850_VBSWAP_DW

NEC850_VBSWAP_H = _ida_domain.NEC850_VBSWAP_H

NEC850_VBSWAP_W = _ida_domain.NEC850_VBSWAP_W

NEC850_DUP_H = _ida_domain.NEC850_DUP_H

NEC850_DUP_W = _ida_domain.NEC850_DUP_W

NEC850_MOV_H = _ida_domain.NEC850_MOV_H

NEC850_MOV_W = _ida_domain.NEC850_MOV_W

NEC850_MOV_DW = _ida_domain.NEC850_MOV_DW

NEC850_VLD_B = _ida_domain.NEC850_VLD_B

NEC850_VLD_B_FMT3 = _ida_domain.NEC850_VLD_B_FMT3

NEC850_VLD_B_FMT4 = _ida_domain.NEC850_VLD_B_FMT4

NEC850_VLD_H = _ida_domain.NEC850_VLD_H

NEC850_VLD_H_FMT4 = _ida_domain.NEC850_VLD_H_FMT4

NEC850_VLD_W = _ida_domain.NEC850_VLD_W

NEC850_VLD_W_FMT4 = _ida_domain.NEC850_VLD_W_FMT4

NEC850_VLD_DW = _ida_domain.NEC850_VLD_DW

NEC850_VLD_DW_FMT3 = _ida_domain.NEC850_VLD_DW_FMT3

NEC850_VLD_DW_FMT4 = _ida_domain.NEC850_VLD_DW_FMT4

NEC850_VLD_DW_FMT5 = _ida_domain.NEC850_VLD_DW_FMT5

NEC850_VST_B = _ida_domain.NEC850_VST_B

NEC850_VST_B_FMT4 = _ida_domain.NEC850_VST_B_FMT4

NEC850_VST_H = _ida_domain.NEC850_VST_H

NEC850_VST_H_FMT_4_5 = _ida_domain.NEC850_VST_H_FMT_4_5

NEC850_VST_W = _ida_domain.NEC850_VST_W

NEC850_VST_W_FMT_4_5 = _ida_domain.NEC850_VST_W_FMT_4_5

NEC850_VST_DW = _ida_domain.NEC850_VST_DW

NEC850_VST_DW_FMT_4_5 = _ida_domain.NEC850_VST_DW_FMT_4_5

NEC850_VST_DW_FMT6 = _ida_domain.NEC850_VST_DW_FMT6

NEC850_VCMOV = _ida_domain.NEC850_VCMOV

NEC850_MODADD = _ida_domain.NEC850_MODADD

NEC850_VADD_H = _ida_domain.NEC850_VADD_H

NEC850_VADD_W = _ida_domain.NEC850_VADD_W

NEC850_VADD_DW = _ida_domain.NEC850_VADD_DW

NEC850_VSUB_H = _ida_domain.NEC850_VSUB_H

NEC850_VSUB_W = _ida_domain.NEC850_VSUB_W

NEC850_VSUB_DW = _ida_domain.NEC850_VSUB_DW

NEC850_VADDSAT_H = _ida_domain.NEC850_VADDSAT_H

NEC850_VADDSAT_W = _ida_domain.NEC850_VADDSAT_W

NEC850_VSUBSAT_H = _ida_domain.NEC850_VSUBSAT_H

NEC850_VSUBSAT_W = _ida_domain.NEC850_VSUBSAT_W

NEC850_VADDS_H = _ida_domain.NEC850_VADDS_H

NEC850_VADDS_W = _ida_domain.NEC850_VADDS_W

NEC850_VSUBS_H = _ida_domain.NEC850_VSUBS_H

NEC850_VSUBS_W = _ida_domain.NEC850_VSUBS_W

NEC850_VMUL_H = _ida_domain.NEC850_VMUL_H

NEC850_VMUL_W = _ida_domain.NEC850_VMUL_W

NEC850_VMULT_H = _ida_domain.NEC850_VMULT_H

NEC850_VMULT_W = _ida_domain.NEC850_VMULT_W

NEC850_VMULCX_H = _ida_domain.NEC850_VMULCX_H

NEC850_VMULCX_W = _ida_domain.NEC850_VMULCX_W

NEC850_VCMPEQ_H = _ida_domain.NEC850_VCMPEQ_H

NEC850_VCMPEQ_W = _ida_domain.NEC850_VCMPEQ_W

NEC850_VCMPLT_H = _ida_domain.NEC850_VCMPLT_H

NEC850_VCMPLT_W = _ida_domain.NEC850_VCMPLT_W

NEC850_VCMPLE_H = _ida_domain.NEC850_VCMPLE_H

NEC850_VCMPLE_W = _ida_domain.NEC850_VCMPLE_W

NEC850_VCMPNE_H = _ida_domain.NEC850_VCMPNE_H

NEC850_VCMPNE_W = _ida_domain.NEC850_VCMPNE_W

NEC850_VABS_H = _ida_domain.NEC850_VABS_H

NEC850_VABS_W = _ida_domain.NEC850_VABS_W

NEC850_VNEG_H = _ida_domain.NEC850_VNEG_H

NEC850_VNEG_W = _ida_domain.NEC850_VNEG_W

NEC850_VMAXGT_H = _ida_domain.NEC850_VMAXGT_H

NEC850_VMAXGE_H = _ida_domain.NEC850_VMAXGE_H

NEC850_VMINLT_H = _ida_domain.NEC850_VMINLT_H

NEC850_VMINLE_H = _ida_domain.NEC850_VMINLE_H

NEC850_VMAXGT_W = _ida_domain.NEC850_VMAXGT_W

NEC850_VMAXGE_W = _ida_domain.NEC850_VMAXGE_W

NEC850_VMINLT_W = _ida_domain.NEC850_VMINLT_W

NEC850_VMINLE_W = _ida_domain.NEC850_VMINLE_W

NEC850_VMADSAT_H = _ida_domain.NEC850_VMADSAT_H

NEC850_VMADSAT_W = _ida_domain.NEC850_VMADSAT_W

NEC850_VMADRN_H = _ida_domain.NEC850_VMADRN_H

NEC850_VMADRN_W = _ida_domain.NEC850_VMADRN_W

NEC850_VMSUM_H = _ida_domain.NEC850_VMSUM_H

NEC850_VMSUM_W = _ida_domain.NEC850_VMSUM_W

NEC850_VMSUMAD_H = _ida_domain.NEC850_VMSUMAD_H

NEC850_VMSUMAD_W = _ida_domain.NEC850_VMSUMAD_W

NEC850_VMSUMADRE_H = _ida_domain.NEC850_VMSUMADRE_H

NEC850_VMSUMADRE_W = _ida_domain.NEC850_VMSUMADRE_W

NEC850_VMSUMADIM_H = _ida_domain.NEC850_VMSUMADIM_H

NEC850_VMSUMADIM_W = _ida_domain.NEC850_VMSUMADIM_W

NEC850_VMSUMADRN_H = _ida_domain.NEC850_VMSUMADRN_H

NEC850_VBIQ_H = _ida_domain.NEC850_VBIQ_H

NEC850_PKUI8I16 = _ida_domain.NEC850_PKUI8I16

NEC850_PKI16I32 = _ida_domain.NEC850_PKI16I32

NEC850_PKQ15Q31 = _ida_domain.NEC850_PKQ15Q31

NEC850_PKI16UI8 = _ida_domain.NEC850_PKI16UI8

NEC850_PKI32I16 = _ida_domain.NEC850_PKI32I16

NEC850_PKQ31Q15 = _ida_domain.NEC850_PKQ31Q15

NEC850_PKQ30Q31 = _ida_domain.NEC850_PKQ30Q31

NEC850_PKI64I32 = _ida_domain.NEC850_PKI64I32

NEC850_CNVQ15Q30 = _ida_domain.NEC850_CNVQ15Q30

NEC850_CNVQ31Q62 = _ida_domain.NEC850_CNVQ31Q62

NEC850_CNVQ30Q15 = _ida_domain.NEC850_CNVQ30Q15

NEC850_CNVQ62Q31 = _ida_domain.NEC850_CNVQ62Q31

NEC850_EXPQ31 = _ida_domain.NEC850_EXPQ31

NEC850_VCALCH = _ida_domain.NEC850_VCALCH

NEC850_VCALCW = _ida_domain.NEC850_VCALCW

NEC850_MOVV_W4 = _ida_domain.NEC850_MOVV_W4

NEC850_FLPV_S4 = _ida_domain.NEC850_FLPV_S4

NEC850_SHFLV_W4 = _ida_domain.NEC850_SHFLV_W4

NEC850_LDV_DW = _ida_domain.NEC850_LDV_DW

NEC850_LDV_QW = _ida_domain.NEC850_LDV_QW

NEC850_LDV_W = _ida_domain.NEC850_LDV_W

NEC850_LDVZ_H4 = _ida_domain.NEC850_LDVZ_H4

NEC850_STV_DW = _ida_domain.NEC850_STV_DW

NEC850_STV_QW = _ida_domain.NEC850_STV_QW

NEC850_STV_W = _ida_domain.NEC850_STV_W

NEC850_STVZ_H4 = _ida_domain.NEC850_STVZ_H4

NEC850_CMOVF_W4 = _ida_domain.NEC850_CMOVF_W4

NEC850_TRFSRV_W4 = _ida_domain.NEC850_TRFSRV_W4

NEC850_ABSF_S4 = _ida_domain.NEC850_ABSF_S4

NEC850_ADDF_S4 = _ida_domain.NEC850_ADDF_S4

NEC850_DIVF_S4 = _ida_domain.NEC850_DIVF_S4

NEC850_MAXF_S4 = _ida_domain.NEC850_MAXF_S4

NEC850_MINF_S4 = _ida_domain.NEC850_MINF_S4

NEC850_MULF_S4 = _ida_domain.NEC850_MULF_S4

NEC850_NEGF_S4 = _ida_domain.NEC850_NEGF_S4

NEC850_RECIPF_S4 = _ida_domain.NEC850_RECIPF_S4

NEC850_RSQRTF_S4 = _ida_domain.NEC850_RSQRTF_S4

NEC850_SQRTF_S4 = _ida_domain.NEC850_SQRTF_S4

NEC850_SUBF_S4 = _ida_domain.NEC850_SUBF_S4

NEC850_FMAF_S4 = _ida_domain.NEC850_FMAF_S4

NEC850_FMSF_S4 = _ida_domain.NEC850_FMSF_S4

NEC850_FNMAF_S4 = _ida_domain.NEC850_FNMAF_S4

NEC850_FNMSF_S4 = _ida_domain.NEC850_FNMSF_S4

NEC850_ADDSUBF_S4 = _ida_domain.NEC850_ADDSUBF_S4

NEC850_ADDSUBNF_S4 = _ida_domain.NEC850_ADDSUBNF_S4

NEC850_SUBADDF_S4 = _ida_domain.NEC850_SUBADDF_S4

NEC850_SUBADDNF_S4 = _ida_domain.NEC850_SUBADDNF_S4

NEC850_ADDXF_S4 = _ida_domain.NEC850_ADDXF_S4

NEC850_MULXF_S4 = _ida_domain.NEC850_MULXF_S4

NEC850_SUBXF_S4 = _ida_domain.NEC850_SUBXF_S4

NEC850_ADDSUBNXF_S4 = _ida_domain.NEC850_ADDSUBNXF_S4

NEC850_ADDSUBXF_S4 = _ida_domain.NEC850_ADDSUBXF_S4

NEC850_SUBADDNXF_S4 = _ida_domain.NEC850_SUBADDNXF_S4

NEC850_SUBADDXF_S4 = _ida_domain.NEC850_SUBADDXF_S4

NEC850_ADDRF_S4 = _ida_domain.NEC850_ADDRF_S4

NEC850_MAXRF_S4 = _ida_domain.NEC850_MAXRF_S4

NEC850_MINRF_S4 = _ida_domain.NEC850_MINRF_S4

NEC850_MULRF_S4 = _ida_domain.NEC850_MULRF_S4

NEC850_SUBRF_S4 = _ida_domain.NEC850_SUBRF_S4

NEC850_CEILF_SUW4 = _ida_domain.NEC850_CEILF_SUW4

NEC850_CEILF_SW4 = _ida_domain.NEC850_CEILF_SW4

NEC850_CVTF_HS4 = _ida_domain.NEC850_CVTF_HS4

NEC850_CVTF_SH4 = _ida_domain.NEC850_CVTF_SH4

NEC850_CVTF_SUW4 = _ida_domain.NEC850_CVTF_SUW4

NEC850_CVTF_SW4 = _ida_domain.NEC850_CVTF_SW4

NEC850_CVTF_UWS4 = _ida_domain.NEC850_CVTF_UWS4

NEC850_CVTF_WS4 = _ida_domain.NEC850_CVTF_WS4

NEC850_FLOORF_SUW4 = _ida_domain.NEC850_FLOORF_SUW4

NEC850_FLOORF_SW4 = _ida_domain.NEC850_FLOORF_SW4

NEC850_ROUNDF_SUW4 = _ida_domain.NEC850_ROUNDF_SUW4

NEC850_ROUNDF_SW4 = _ida_domain.NEC850_ROUNDF_SW4

NEC850_TRNCF_SUW4 = _ida_domain.NEC850_TRNCF_SUW4

NEC850_TRNCF_SW4 = _ida_domain.NEC850_TRNCF_SW4

NEC850_CMPF_S4 = _ida_domain.NEC850_CMPF_S4

NEC850_LAST_INSTRUCTION = _ida_domain.NEC850_LAST_INSTRUCTION

TRICORE_null = _ida_domain.TRICORE_null

TRICORE_abs = _ida_domain.TRICORE_abs

TRICORE_abs_b = _ida_domain.TRICORE_abs_b

TRICORE_abs_h = _ida_domain.TRICORE_abs_h

TRICORE_absdif = _ida_domain.TRICORE_absdif

TRICORE_absdif_b = _ida_domain.TRICORE_absdif_b

TRICORE_absdif_h = _ida_domain.TRICORE_absdif_h

TRICORE_absdifs = _ida_domain.TRICORE_absdifs

TRICORE_absdifs_h = _ida_domain.TRICORE_absdifs_h

TRICORE_abss = _ida_domain.TRICORE_abss

TRICORE_abss_h = _ida_domain.TRICORE_abss_h

TRICORE_add_b = _ida_domain.TRICORE_add_b

TRICORE_add_f = _ida_domain.TRICORE_add_f

TRICORE_add_h = _ida_domain.TRICORE_add_h

TRICORE_add16 = _ida_domain.TRICORE_add16

TRICORE_add16_a = _ida_domain.TRICORE_add16_a

TRICORE_add32 = _ida_domain.TRICORE_add32

TRICORE_add32_a = _ida_domain.TRICORE_add32_a

TRICORE_addc = _ida_domain.TRICORE_addc

TRICORE_addi = _ida_domain.TRICORE_addi

TRICORE_addih = _ida_domain.TRICORE_addih

TRICORE_addih_a = _ida_domain.TRICORE_addih_a

TRICORE_adds = _ida_domain.TRICORE_adds

TRICORE_adds_h = _ida_domain.TRICORE_adds_h

TRICORE_adds_hu = _ida_domain.TRICORE_adds_hu

TRICORE_adds_u = _ida_domain.TRICORE_adds_u

TRICORE_adds16 = _ida_domain.TRICORE_adds16

TRICORE_addsc_at = _ida_domain.TRICORE_addsc_at

TRICORE_addsc16_a = _ida_domain.TRICORE_addsc16_a

TRICORE_addsc32_a = _ida_domain.TRICORE_addsc32_a

TRICORE_addx = _ida_domain.TRICORE_addx

TRICORE_and_and_t = _ida_domain.TRICORE_and_and_t

TRICORE_and_andn_t = _ida_domain.TRICORE_and_andn_t

TRICORE_and_eq = _ida_domain.TRICORE_and_eq

TRICORE_and_ge = _ida_domain.TRICORE_and_ge

TRICORE_and_ge_u = _ida_domain.TRICORE_and_ge_u

TRICORE_and_lt = _ida_domain.TRICORE_and_lt

TRICORE_and_lt_u = _ida_domain.TRICORE_and_lt_u

TRICORE_and_ne = _ida_domain.TRICORE_and_ne

TRICORE_and_nor_t = _ida_domain.TRICORE_and_nor_t

TRICORE_and_or_t = _ida_domain.TRICORE_and_or_t

TRICORE_and_t = _ida_domain.TRICORE_and_t

TRICORE_and16 = _ida_domain.TRICORE_and16

TRICORE_and32 = _ida_domain.TRICORE_and32

TRICORE_andn = _ida_domain.TRICORE_andn

TRICORE_andn_t = _ida_domain.TRICORE_andn_t

TRICORE_bisr16 = _ida_domain.TRICORE_bisr16

TRICORE_bisr32 = _ida_domain.TRICORE_bisr32

TRICORE_bmerge = _ida_domain.TRICORE_bmerge

TRICORE_bsplit = _ida_domain.TRICORE_bsplit

TRICORE_cachea_i = _ida_domain.TRICORE_cachea_i

TRICORE_cachea_w = _ida_domain.TRICORE_cachea_w

TRICORE_cachea_wi = _ida_domain.TRICORE_cachea_wi

TRICORE_cadd16 = _ida_domain.TRICORE_cadd16

TRICORE_cadd32 = _ida_domain.TRICORE_cadd32

TRICORE_caddn16 = _ida_domain.TRICORE_caddn16

TRICORE_caddn32 = _ida_domain.TRICORE_caddn32

TRICORE_call16 = _ida_domain.TRICORE_call16

TRICORE_call32 = _ida_domain.TRICORE_call32

TRICORE_calla = _ida_domain.TRICORE_calla

TRICORE_calli = _ida_domain.TRICORE_calli

TRICORE_clo = _ida_domain.TRICORE_clo

TRICORE_clo_h = _ida_domain.TRICORE_clo_h

TRICORE_cls = _ida_domain.TRICORE_cls

TRICORE_cls_h = _ida_domain.TRICORE_cls_h

TRICORE_clz = _ida_domain.TRICORE_clz

TRICORE_clz_h = _ida_domain.TRICORE_clz_h

TRICORE_cmov16 = _ida_domain.TRICORE_cmov16

TRICORE_cmovn16 = _ida_domain.TRICORE_cmovn16

TRICORE_cmp_f = _ida_domain.TRICORE_cmp_f

TRICORE_csub = _ida_domain.TRICORE_csub

TRICORE_csubn = _ida_domain.TRICORE_csubn

TRICORE_debug16 = _ida_domain.TRICORE_debug16

TRICORE_debug32 = _ida_domain.TRICORE_debug32

TRICORE_dextr = _ida_domain.TRICORE_dextr

TRICORE_disable = _ida_domain.TRICORE_disable

TRICORE_div_f = _ida_domain.TRICORE_div_f

TRICORE_dsync = _ida_domain.TRICORE_dsync

TRICORE_dvadj = _ida_domain.TRICORE_dvadj

TRICORE_dvinit = _ida_domain.TRICORE_dvinit

TRICORE_dvinit_b = _ida_domain.TRICORE_dvinit_b

TRICORE_dvinit_bu = _ida_domain.TRICORE_dvinit_bu

TRICORE_dvinit_h = _ida_domain.TRICORE_dvinit_h

TRICORE_dvinit_hu = _ida_domain.TRICORE_dvinit_hu

TRICORE_dvinit_u = _ida_domain.TRICORE_dvinit_u

TRICORE_dvstep = _ida_domain.TRICORE_dvstep

TRICORE_dvstep_u = _ida_domain.TRICORE_dvstep_u

TRICORE_enable = _ida_domain.TRICORE_enable

TRICORE_eq_a = _ida_domain.TRICORE_eq_a

TRICORE_eq_b = _ida_domain.TRICORE_eq_b

TRICORE_eq_h = _ida_domain.TRICORE_eq_h

TRICORE_eq_w = _ida_domain.TRICORE_eq_w

TRICORE_eq16 = _ida_domain.TRICORE_eq16

TRICORE_eq32 = _ida_domain.TRICORE_eq32

TRICORE_eqany_b = _ida_domain.TRICORE_eqany_b

TRICORE_eqany_h = _ida_domain.TRICORE_eqany_h

TRICORE_eqz_a = _ida_domain.TRICORE_eqz_a

TRICORE_extr = _ida_domain.TRICORE_extr

TRICORE_extr_u = _ida_domain.TRICORE_extr_u

TRICORE_ftoi = _ida_domain.TRICORE_ftoi

TRICORE_ftoq31 = _ida_domain.TRICORE_ftoq31

TRICORE_ftou = _ida_domain.TRICORE_ftou

TRICORE_ge = _ida_domain.TRICORE_ge

TRICORE_ge_a = _ida_domain.TRICORE_ge_a

TRICORE_ge_u = _ida_domain.TRICORE_ge_u

TRICORE_imask = _ida_domain.TRICORE_imask

TRICORE_ins_t = _ida_domain.TRICORE_ins_t

TRICORE_insert = _ida_domain.TRICORE_insert

TRICORE_insn_t = _ida_domain.TRICORE_insn_t

TRICORE_isync = _ida_domain.TRICORE_isync

TRICORE_itof = _ida_domain.TRICORE_itof

TRICORE_ixmax = _ida_domain.TRICORE_ixmax

TRICORE_ixmax_u = _ida_domain.TRICORE_ixmax_u

TRICORE_ixmin = _ida_domain.TRICORE_ixmin

TRICORE_ixmin_u = _ida_domain.TRICORE_ixmin_u

TRICORE_j16 = _ida_domain.TRICORE_j16

TRICORE_j32 = _ida_domain.TRICORE_j32

TRICORE_ja = _ida_domain.TRICORE_ja

TRICORE_jeq_a = _ida_domain.TRICORE_jeq_a

TRICORE_jeq16 = _ida_domain.TRICORE_jeq16

TRICORE_jeq32 = _ida_domain.TRICORE_jeq32

TRICORE_jge = _ida_domain.TRICORE_jge

TRICORE_jge_u = _ida_domain.TRICORE_jge_u

TRICORE_jgez16 = _ida_domain.TRICORE_jgez16

TRICORE_jgtz16 = _ida_domain.TRICORE_jgtz16

TRICORE_ji16 = _ida_domain.TRICORE_ji16

TRICORE_ji32 = _ida_domain.TRICORE_ji32

TRICORE_jl = _ida_domain.TRICORE_jl

TRICORE_jla = _ida_domain.TRICORE_jla

TRICORE_jlez16 = _ida_domain.TRICORE_jlez16

TRICORE_jli = _ida_domain.TRICORE_jli

TRICORE_jlt = _ida_domain.TRICORE_jlt

TRICORE_jlt_u = _ida_domain.TRICORE_jlt_u

TRICORE_jltz16 = _ida_domain.TRICORE_jltz16

TRICORE_jne_a = _ida_domain.TRICORE_jne_a

TRICORE_jne16 = _ida_domain.TRICORE_jne16

TRICORE_jne32 = _ida_domain.TRICORE_jne32

TRICORE_jned = _ida_domain.TRICORE_jned

TRICORE_jnei = _ida_domain.TRICORE_jnei

TRICORE_jnz16 = _ida_domain.TRICORE_jnz16

TRICORE_jnz16_a = _ida_domain.TRICORE_jnz16_a

TRICORE_jnz16_t = _ida_domain.TRICORE_jnz16_t

TRICORE_jnz32_a = _ida_domain.TRICORE_jnz32_a

TRICORE_jnz32_t = _ida_domain.TRICORE_jnz32_t

TRICORE_jz16 = _ida_domain.TRICORE_jz16

TRICORE_jz16_a = _ida_domain.TRICORE_jz16_a

TRICORE_jz16_t = _ida_domain.TRICORE_jz16_t

TRICORE_jz32_a = _ida_domain.TRICORE_jz32_a

TRICORE_jz32_t = _ida_domain.TRICORE_jz32_t

TRICORE_ld_b = _ida_domain.TRICORE_ld_b

TRICORE_ld_d = _ida_domain.TRICORE_ld_d

TRICORE_ld_da = _ida_domain.TRICORE_ld_da

TRICORE_ld_hu = _ida_domain.TRICORE_ld_hu

TRICORE_ld_q = _ida_domain.TRICORE_ld_q

TRICORE_ld16_a = _ida_domain.TRICORE_ld16_a

TRICORE_ld16_bu = _ida_domain.TRICORE_ld16_bu

TRICORE_ld16_h = _ida_domain.TRICORE_ld16_h

TRICORE_ld16_w = _ida_domain.TRICORE_ld16_w

TRICORE_ld32_a = _ida_domain.TRICORE_ld32_a

TRICORE_ld32_bu = _ida_domain.TRICORE_ld32_bu

TRICORE_ld32_h = _ida_domain.TRICORE_ld32_h

TRICORE_ld32_w = _ida_domain.TRICORE_ld32_w

TRICORE_ldlcx = _ida_domain.TRICORE_ldlcx

TRICORE_ldmst = _ida_domain.TRICORE_ldmst

TRICORE_lducx = _ida_domain.TRICORE_lducx

TRICORE_lea = _ida_domain.TRICORE_lea

TRICORE_loop16 = _ida_domain.TRICORE_loop16

TRICORE_loop32 = _ida_domain.TRICORE_loop32

TRICORE_loopu = _ida_domain.TRICORE_loopu

TRICORE_lt_a = _ida_domain.TRICORE_lt_a

TRICORE_lt_b = _ida_domain.TRICORE_lt_b

TRICORE_lt_bu = _ida_domain.TRICORE_lt_bu

TRICORE_lt_h = _ida_domain.TRICORE_lt_h

TRICORE_lt_hu = _ida_domain.TRICORE_lt_hu

TRICORE_lt_u = _ida_domain.TRICORE_lt_u

TRICORE_lt_w = _ida_domain.TRICORE_lt_w

TRICORE_lt_wu = _ida_domain.TRICORE_lt_wu

TRICORE_lt16 = _ida_domain.TRICORE_lt16

TRICORE_lt32 = _ida_domain.TRICORE_lt32

TRICORE_madd = _ida_domain.TRICORE_madd

TRICORE_madd_f = _ida_domain.TRICORE_madd_f

TRICORE_madd_h = _ida_domain.TRICORE_madd_h

TRICORE_madd_q = _ida_domain.TRICORE_madd_q

TRICORE_madd_u = _ida_domain.TRICORE_madd_u

TRICORE_maddm_h = _ida_domain.TRICORE_maddm_h

TRICORE_maddms_h = _ida_domain.TRICORE_maddms_h

TRICORE_maddr_h = _ida_domain.TRICORE_maddr_h

TRICORE_maddr_q = _ida_domain.TRICORE_maddr_q

TRICORE_maddrs_h = _ida_domain.TRICORE_maddrs_h

TRICORE_maddrs_q = _ida_domain.TRICORE_maddrs_q

TRICORE_madds = _ida_domain.TRICORE_madds

TRICORE_madds_h = _ida_domain.TRICORE_madds_h

TRICORE_madds_q = _ida_domain.TRICORE_madds_q

TRICORE_madds_u = _ida_domain.TRICORE_madds_u

TRICORE_maddsu_h = _ida_domain.TRICORE_maddsu_h

TRICORE_maddsum_h = _ida_domain.TRICORE_maddsum_h

TRICORE_maddsums_h = _ida_domain.TRICORE_maddsums_h

TRICORE_maddsur_h = _ida_domain.TRICORE_maddsur_h

TRICORE_maddsurs_h = _ida_domain.TRICORE_maddsurs_h

TRICORE_maddsus_h = _ida_domain.TRICORE_maddsus_h

TRICORE_max = _ida_domain.TRICORE_max

TRICORE_max_b = _ida_domain.TRICORE_max_b

TRICORE_max_bu = _ida_domain.TRICORE_max_bu

TRICORE_max_h = _ida_domain.TRICORE_max_h

TRICORE_max_hu = _ida_domain.TRICORE_max_hu

TRICORE_max_u = _ida_domain.TRICORE_max_u

TRICORE_mfcr = _ida_domain.TRICORE_mfcr

TRICORE_min = _ida_domain.TRICORE_min

TRICORE_min_b = _ida_domain.TRICORE_min_b

TRICORE_min_bu = _ida_domain.TRICORE_min_bu

TRICORE_min_h = _ida_domain.TRICORE_min_h

TRICORE_min_hu = _ida_domain.TRICORE_min_hu

TRICORE_min_u = _ida_domain.TRICORE_min_u

TRICORE_mov_u = _ida_domain.TRICORE_mov_u

TRICORE_mov16 = _ida_domain.TRICORE_mov16

TRICORE_mov16_a = _ida_domain.TRICORE_mov16_a

TRICORE_mov16_aa = _ida_domain.TRICORE_mov16_aa

TRICORE_mov16_d = _ida_domain.TRICORE_mov16_d

TRICORE_mov32 = _ida_domain.TRICORE_mov32

TRICORE_mov32_a = _ida_domain.TRICORE_mov32_a

TRICORE_mov32_aa = _ida_domain.TRICORE_mov32_aa

TRICORE_mov32_d = _ida_domain.TRICORE_mov32_d

TRICORE_movh = _ida_domain.TRICORE_movh

TRICORE_movh_a = _ida_domain.TRICORE_movh_a

TRICORE_msub = _ida_domain.TRICORE_msub

TRICORE_msub_f = _ida_domain.TRICORE_msub_f

TRICORE_msub_h = _ida_domain.TRICORE_msub_h

TRICORE_msub_q = _ida_domain.TRICORE_msub_q

TRICORE_msub_u = _ida_domain.TRICORE_msub_u

TRICORE_msubad_h = _ida_domain.TRICORE_msubad_h

TRICORE_msubadm_h = _ida_domain.TRICORE_msubadm_h

TRICORE_msubadms_h = _ida_domain.TRICORE_msubadms_h

TRICORE_msubadr_h = _ida_domain.TRICORE_msubadr_h

TRICORE_msubadrs_h = _ida_domain.TRICORE_msubadrs_h

TRICORE_msubads_h = _ida_domain.TRICORE_msubads_h

TRICORE_msubm_h = _ida_domain.TRICORE_msubm_h

TRICORE_msubms_h = _ida_domain.TRICORE_msubms_h

TRICORE_msubr_h = _ida_domain.TRICORE_msubr_h

TRICORE_msubr_q = _ida_domain.TRICORE_msubr_q

TRICORE_msubrs_h = _ida_domain.TRICORE_msubrs_h

TRICORE_msubrs_q = _ida_domain.TRICORE_msubrs_q

TRICORE_msubs = _ida_domain.TRICORE_msubs

TRICORE_msubs_h = _ida_domain.TRICORE_msubs_h

TRICORE_msubs_q = _ida_domain.TRICORE_msubs_q

TRICORE_msubs_u = _ida_domain.TRICORE_msubs_u

TRICORE_mtcr = _ida_domain.TRICORE_mtcr

TRICORE_mul_f = _ida_domain.TRICORE_mul_f

TRICORE_mul_h = _ida_domain.TRICORE_mul_h

TRICORE_mul_q = _ida_domain.TRICORE_mul_q

TRICORE_mul_u = _ida_domain.TRICORE_mul_u

TRICORE_mul16 = _ida_domain.TRICORE_mul16

TRICORE_mul32 = _ida_domain.TRICORE_mul32

TRICORE_mulm_h = _ida_domain.TRICORE_mulm_h

TRICORE_mulms_h = _ida_domain.TRICORE_mulms_h

TRICORE_mulr_h = _ida_domain.TRICORE_mulr_h

TRICORE_mulr_q = _ida_domain.TRICORE_mulr_q

TRICORE_muls = _ida_domain.TRICORE_muls

TRICORE_muls_u = _ida_domain.TRICORE_muls_u

TRICORE_nand = _ida_domain.TRICORE_nand

TRICORE_nand_t = _ida_domain.TRICORE_nand_t

TRICORE_ne = _ida_domain.TRICORE_ne

TRICORE_ne_a = _ida_domain.TRICORE_ne_a

TRICORE_nez_a = _ida_domain.TRICORE_nez_a

TRICORE_nop16 = _ida_domain.TRICORE_nop16

TRICORE_nop32 = _ida_domain.TRICORE_nop32

TRICORE_nor_t = _ida_domain.TRICORE_nor_t

TRICORE_not16 = _ida_domain.TRICORE_not16

TRICORE_nor32 = _ida_domain.TRICORE_nor32

TRICORE_or_and_t = _ida_domain.TRICORE_or_and_t

TRICORE_or_andn_t = _ida_domain.TRICORE_or_andn_t

TRICORE_or_eq = _ida_domain.TRICORE_or_eq

TRICORE_or_ge = _ida_domain.TRICORE_or_ge

TRICORE_or_ge_u = _ida_domain.TRICORE_or_ge_u

TRICORE_or_lt = _ida_domain.TRICORE_or_lt

TRICORE_or_lt_u = _ida_domain.TRICORE_or_lt_u

TRICORE_or_ne = _ida_domain.TRICORE_or_ne

TRICORE_or_nor_t = _ida_domain.TRICORE_or_nor_t

TRICORE_or_or_t = _ida_domain.TRICORE_or_or_t

TRICORE_or_t = _ida_domain.TRICORE_or_t

TRICORE_or16 = _ida_domain.TRICORE_or16

TRICORE_or32 = _ida_domain.TRICORE_or32

TRICORE_orn = _ida_domain.TRICORE_orn

TRICORE_orn_t = _ida_domain.TRICORE_orn_t

TRICORE_pack = _ida_domain.TRICORE_pack

TRICORE_parity = _ida_domain.TRICORE_parity

TRICORE_q31tof = _ida_domain.TRICORE_q31tof

TRICORE_qseed_f = _ida_domain.TRICORE_qseed_f

TRICORE_ret16 = _ida_domain.TRICORE_ret16

TRICORE_ret32 = _ida_domain.TRICORE_ret32

TRICORE_rfe16 = _ida_domain.TRICORE_rfe16

TRICORE_rfe32 = _ida_domain.TRICORE_rfe32

TRICORE_rfm = _ida_domain.TRICORE_rfm

TRICORE_rslcx = _ida_domain.TRICORE_rslcx

TRICORE_rstv = _ida_domain.TRICORE_rstv

TRICORE_rsub16 = _ida_domain.TRICORE_rsub16

TRICORE_rsub32 = _ida_domain.TRICORE_rsub32

TRICORE_rsubs = _ida_domain.TRICORE_rsubs

TRICORE_rsubs_u = _ida_domain.TRICORE_rsubs_u

TRICORE_sat16_b = _ida_domain.TRICORE_sat16_b

TRICORE_sat16_bu = _ida_domain.TRICORE_sat16_bu

TRICORE_sat16_h = _ida_domain.TRICORE_sat16_h

TRICORE_sat16_hu = _ida_domain.TRICORE_sat16_hu

TRICORE_sat32_b = _ida_domain.TRICORE_sat32_b

TRICORE_sat32_bu = _ida_domain.TRICORE_sat32_bu

TRICORE_sat32_h = _ida_domain.TRICORE_sat32_h

TRICORE_sat32_hu = _ida_domain.TRICORE_sat32_hu

TRICORE_sel = _ida_domain.TRICORE_sel

TRICORE_seln = _ida_domain.TRICORE_seln

TRICORE_sh_and_t = _ida_domain.TRICORE_sh_and_t

TRICORE_sh_andn_t = _ida_domain.TRICORE_sh_andn_t

TRICORE_sh_eq = _ida_domain.TRICORE_sh_eq

TRICORE_sh_ge = _ida_domain.TRICORE_sh_ge

TRICORE_sh_ge_u = _ida_domain.TRICORE_sh_ge_u

TRICORE_sh_h = _ida_domain.TRICORE_sh_h

TRICORE_sh_lt = _ida_domain.TRICORE_sh_lt

TRICORE_sh_lt_u = _ida_domain.TRICORE_sh_lt_u

TRICORE_sh_nand_t = _ida_domain.TRICORE_sh_nand_t

TRICORE_sh_ne = _ida_domain.TRICORE_sh_ne

TRICORE_sh_nor_t = _ida_domain.TRICORE_sh_nor_t

TRICORE_sh_or_t = _ida_domain.TRICORE_sh_or_t

TRICORE_sh_orn_t = _ida_domain.TRICORE_sh_orn_t

TRICORE_sh_xnor_t = _ida_domain.TRICORE_sh_xnor_t

TRICORE_sh_xor_t = _ida_domain.TRICORE_sh_xor_t

TRICORE_sh16 = _ida_domain.TRICORE_sh16

TRICORE_sh32 = _ida_domain.TRICORE_sh32

TRICORE_sha_h = _ida_domain.TRICORE_sha_h

TRICORE_sha16 = _ida_domain.TRICORE_sha16

TRICORE_sha32 = _ida_domain.TRICORE_sha32

TRICORE_shas = _ida_domain.TRICORE_shas

TRICORE_st_d = _ida_domain.TRICORE_st_d

TRICORE_st_da = _ida_domain.TRICORE_st_da

TRICORE_st_q = _ida_domain.TRICORE_st_q

TRICORE_st_t = _ida_domain.TRICORE_st_t

TRICORE_st16_a = _ida_domain.TRICORE_st16_a

TRICORE_st16_b = _ida_domain.TRICORE_st16_b

TRICORE_st16_h = _ida_domain.TRICORE_st16_h

TRICORE_st16_w = _ida_domain.TRICORE_st16_w

TRICORE_st32_a = _ida_domain.TRICORE_st32_a

TRICORE_st32_b = _ida_domain.TRICORE_st32_b

TRICORE_st32_h = _ida_domain.TRICORE_st32_h

TRICORE_st32_w = _ida_domain.TRICORE_st32_w

TRICORE_stlcx = _ida_domain.TRICORE_stlcx

TRICORE_stucx = _ida_domain.TRICORE_stucx

TRICORE_sub_b = _ida_domain.TRICORE_sub_b

TRICORE_sub_f = _ida_domain.TRICORE_sub_f

TRICORE_sub_h = _ida_domain.TRICORE_sub_h

TRICORE_sub16 = _ida_domain.TRICORE_sub16

TRICORE_sub16_a = _ida_domain.TRICORE_sub16_a

TRICORE_sub32 = _ida_domain.TRICORE_sub32

TRICORE_sub32_a = _ida_domain.TRICORE_sub32_a

TRICORE_subc = _ida_domain.TRICORE_subc

TRICORE_subs_h = _ida_domain.TRICORE_subs_h

TRICORE_subs_hu = _ida_domain.TRICORE_subs_hu

TRICORE_subs_u = _ida_domain.TRICORE_subs_u

TRICORE_subs16 = _ida_domain.TRICORE_subs16

TRICORE_subs32 = _ida_domain.TRICORE_subs32

TRICORE_subx = _ida_domain.TRICORE_subx

TRICORE_svlcx = _ida_domain.TRICORE_svlcx

TRICORE_swap_w = _ida_domain.TRICORE_swap_w

TRICORE_syscall = _ida_domain.TRICORE_syscall

TRICORE_tlbdemap = _ida_domain.TRICORE_tlbdemap

TRICORE_tlbflush_a = _ida_domain.TRICORE_tlbflush_a

TRICORE_tlbflush_b = _ida_domain.TRICORE_tlbflush_b

TRICORE_tlbmap = _ida_domain.TRICORE_tlbmap

TRICORE_tlbprobe_a = _ida_domain.TRICORE_tlbprobe_a

TRICORE_tlbprobe_i = _ida_domain.TRICORE_tlbprobe_i

TRICORE_trapsv = _ida_domain.TRICORE_trapsv

TRICORE_trapv = _ida_domain.TRICORE_trapv

TRICORE_unpack = _ida_domain.TRICORE_unpack

TRICORE_updfl = _ida_domain.TRICORE_updfl

TRICORE_utof = _ida_domain.TRICORE_utof

TRICORE_xnor = _ida_domain.TRICORE_xnor

TRICORE_xnor_t = _ida_domain.TRICORE_xnor_t

TRICORE_xor_eq = _ida_domain.TRICORE_xor_eq

TRICORE_xor_ge = _ida_domain.TRICORE_xor_ge

TRICORE_xor_ge_u = _ida_domain.TRICORE_xor_ge_u

TRICORE_xor_lt = _ida_domain.TRICORE_xor_lt

TRICORE_xor_lt_u = _ida_domain.TRICORE_xor_lt_u

TRICORE_xor_ne = _ida_domain.TRICORE_xor_ne

TRICORE_xor_t = _ida_domain.TRICORE_xor_t

TRICORE_xor16 = _ida_domain.TRICORE_xor16

TRICORE_xor32 = _ida_domain.TRICORE_xor32

TRICORE_cachei_i = _ida_domain.TRICORE_cachei_i

TRICORE_cachei_w = _ida_domain.TRICORE_cachei_w

TRICORE_cachei_wi = _ida_domain.TRICORE_cachei_wi

TRICORE_div = _ida_domain.TRICORE_div

TRICORE_div_u = _ida_domain.TRICORE_div_u

TRICORE_fcall = _ida_domain.TRICORE_fcall

TRICORE_fcalla = _ida_domain.TRICORE_fcalla

TRICORE_fcalli = _ida_domain.TRICORE_fcalli

TRICORE_fret16 = _ida_domain.TRICORE_fret16

TRICORE_fret32 = _ida_domain.TRICORE_fret32

TRICORE_ftoiz = _ida_domain.TRICORE_ftoiz

TRICORE_ftoq31z = _ida_domain.TRICORE_ftoq31z

TRICORE_ftouz = _ida_domain.TRICORE_ftouz

TRICORE_restore = _ida_domain.TRICORE_restore

TRICORE_crc32 = _ida_domain.TRICORE_crc32

TRICORE_wait = _ida_domain.TRICORE_wait

TRICORE_cmpswap_w = _ida_domain.TRICORE_cmpswap_w

TRICORE_swapmsk_w = _ida_domain.TRICORE_swapmsk_w

TRICORE_crc32_b = _ida_domain.TRICORE_crc32_b

TRICORE_crc32l_w = _ida_domain.TRICORE_crc32l_w

TRICORE_crcn = _ida_domain.TRICORE_crcn

TRICORE_shuffle = _ida_domain.TRICORE_shuffle

TRICORE_popcnt_w = _ida_domain.TRICORE_popcnt_w

TRICORE_lha = _ida_domain.TRICORE_lha

TRICORE_ftohp = _ida_domain.TRICORE_ftohp

TRICORE_hptof = _ida_domain.TRICORE_hptof

TRICORE_last = _ida_domain.TRICORE_last

ARC_null = _ida_domain.ARC_null

ARC_ld = _ida_domain.ARC_ld

ARC_lr = _ida_domain.ARC_lr

ARC_st = _ida_domain.ARC_st

ARC_sr = _ida_domain.ARC_sr

ARC_store_instructions = _ida_domain.ARC_store_instructions

ARC_flag = _ida_domain.ARC_flag

ARC_asr = _ida_domain.ARC_asr

ARC_lsr = _ida_domain.ARC_lsr

ARC_sexb = _ida_domain.ARC_sexb

ARC_sexw = _ida_domain.ARC_sexw

ARC_sexh = _ida_domain.ARC_sexh

ARC_extb = _ida_domain.ARC_extb

ARC_extw = _ida_domain.ARC_extw

ARC_exth = _ida_domain.ARC_exth

ARC_ror = _ida_domain.ARC_ror

ARC_rrc = _ida_domain.ARC_rrc

ARC_b = _ida_domain.ARC_b

ARC_bl = _ida_domain.ARC_bl

ARC_lp = _ida_domain.ARC_lp

ARC_j = _ida_domain.ARC_j

ARC_jl = _ida_domain.ARC_jl

ARC_add = _ida_domain.ARC_add

ARC_adc = _ida_domain.ARC_adc

ARC_sub = _ida_domain.ARC_sub

ARC_sbc = _ida_domain.ARC_sbc

ARC_and = _ida_domain.ARC_and

ARC_or = _ida_domain.ARC_or

ARC_bic = _ida_domain.ARC_bic

ARC_xor = _ida_domain.ARC_xor

ARC_mov = _ida_domain.ARC_mov

ARC_nop = _ida_domain.ARC_nop

ARC_lsl = _ida_domain.ARC_lsl

ARC_rlc = _ida_domain.ARC_rlc

ARC_brk = _ida_domain.ARC_brk

ARC_sleep = _ida_domain.ARC_sleep

ARC_swi = _ida_domain.ARC_swi

ARC_asl = _ida_domain.ARC_asl

ARC_mul64 = _ida_domain.ARC_mul64

ARC_mulu64 = _ida_domain.ARC_mulu64

ARC_max = _ida_domain.ARC_max

ARC_min = _ida_domain.ARC_min

ARC_swap = _ida_domain.ARC_swap

ARC_norm = _ida_domain.ARC_norm

ARC_bbit0 = _ida_domain.ARC_bbit0

ARC_bbit1 = _ida_domain.ARC_bbit1

ARC_br = _ida_domain.ARC_br

ARC_pop = _ida_domain.ARC_pop

ARC_push = _ida_domain.ARC_push

ARC_abs = _ida_domain.ARC_abs

ARC_add1 = _ida_domain.ARC_add1

ARC_add2 = _ida_domain.ARC_add2

ARC_add3 = _ida_domain.ARC_add3

ARC_bclr = _ida_domain.ARC_bclr

ARC_bmsk = _ida_domain.ARC_bmsk

ARC_bset = _ida_domain.ARC_bset

ARC_btst = _ida_domain.ARC_btst

ARC_bxor = _ida_domain.ARC_bxor

ARC_cmp = _ida_domain.ARC_cmp

ARC_ex = _ida_domain.ARC_ex

ARC_mpy = _ida_domain.ARC_mpy

ARC_mpyh = _ida_domain.ARC_mpyh

ARC_mpym = _ida_domain.ARC_mpym

ARC_mpyhu = _ida_domain.ARC_mpyhu

ARC_mpyhm = _ida_domain.ARC_mpyhm

ARC_mpyu = _ida_domain.ARC_mpyu

ARC_neg = _ida_domain.ARC_neg

ARC_not = _ida_domain.ARC_not

ARC_rcmp = _ida_domain.ARC_rcmp

ARC_rsub = _ida_domain.ARC_rsub

ARC_rtie = _ida_domain.ARC_rtie

ARC_sub1 = _ida_domain.ARC_sub1

ARC_sub2 = _ida_domain.ARC_sub2

ARC_sub3 = _ida_domain.ARC_sub3

ARC_sync = _ida_domain.ARC_sync

ARC_trap = _ida_domain.ARC_trap

ARC_tst = _ida_domain.ARC_tst

ARC_unimp = _ida_domain.ARC_unimp

ARC_abss = _ida_domain.ARC_abss

ARC_abssw = _ida_domain.ARC_abssw

ARC_abssh = _ida_domain.ARC_abssh

ARC_adds = _ida_domain.ARC_adds

ARC_addsdw = _ida_domain.ARC_addsdw

ARC_asls = _ida_domain.ARC_asls

ARC_asrs = _ida_domain.ARC_asrs

ARC_divaw = _ida_domain.ARC_divaw

ARC_negs = _ida_domain.ARC_negs

ARC_negsw = _ida_domain.ARC_negsw

ARC_negsh = _ida_domain.ARC_negsh

ARC_normw = _ida_domain.ARC_normw

ARC_normh = _ida_domain.ARC_normh

ARC_rnd16 = _ida_domain.ARC_rnd16

ARC_rndh = _ida_domain.ARC_rndh

ARC_sat16 = _ida_domain.ARC_sat16

ARC_sath = _ida_domain.ARC_sath

ARC_subs = _ida_domain.ARC_subs

ARC_subsdw = _ida_domain.ARC_subsdw

ARC_muldw = _ida_domain.ARC_muldw

ARC_muludw = _ida_domain.ARC_muludw

ARC_mulrdw = _ida_domain.ARC_mulrdw

ARC_macdw = _ida_domain.ARC_macdw

ARC_macudw = _ida_domain.ARC_macudw

ARC_macrdw = _ida_domain.ARC_macrdw

ARC_msubdw = _ida_domain.ARC_msubdw

ARC_mululw = _ida_domain.ARC_mululw

ARC_mullw = _ida_domain.ARC_mullw

ARC_mulflw = _ida_domain.ARC_mulflw

ARC_maclw = _ida_domain.ARC_maclw

ARC_macflw = _ida_domain.ARC_macflw

ARC_machulw = _ida_domain.ARC_machulw

ARC_machlw = _ida_domain.ARC_machlw

ARC_machflw = _ida_domain.ARC_machflw

ARC_mulhlw = _ida_domain.ARC_mulhlw

ARC_mulhflw = _ida_domain.ARC_mulhflw

ARC_acm = _ida_domain.ARC_acm

ARC_addqbs = _ida_domain.ARC_addqbs

ARC_avgqb = _ida_domain.ARC_avgqb

ARC_clamp = _ida_domain.ARC_clamp

ARC_daddh11 = _ida_domain.ARC_daddh11

ARC_daddh12 = _ida_domain.ARC_daddh12

ARC_daddh21 = _ida_domain.ARC_daddh21

ARC_daddh22 = _ida_domain.ARC_daddh22

ARC_dexcl1 = _ida_domain.ARC_dexcl1

ARC_dexcl2 = _ida_domain.ARC_dexcl2

ARC_dmulh11 = _ida_domain.ARC_dmulh11

ARC_dmulh12 = _ida_domain.ARC_dmulh12

ARC_dmulh21 = _ida_domain.ARC_dmulh21

ARC_dmulh22 = _ida_domain.ARC_dmulh22

ARC_dsubh11 = _ida_domain.ARC_dsubh11

ARC_dsubh12 = _ida_domain.ARC_dsubh12

ARC_dsubh21 = _ida_domain.ARC_dsubh21

ARC_dsubh22 = _ida_domain.ARC_dsubh22

ARC_drsubh11 = _ida_domain.ARC_drsubh11

ARC_drsubh12 = _ida_domain.ARC_drsubh12

ARC_drsubh21 = _ida_domain.ARC_drsubh21

ARC_drsubh22 = _ida_domain.ARC_drsubh22

ARC_fadd = _ida_domain.ARC_fadd

ARC_fsadd = _ida_domain.ARC_fsadd

ARC_fmul = _ida_domain.ARC_fmul

ARC_fsmul = _ida_domain.ARC_fsmul

ARC_fsub = _ida_domain.ARC_fsub

ARC_fssub = _ida_domain.ARC_fssub

ARC_fxtr = _ida_domain.ARC_fxtr

ARC_iaddr = _ida_domain.ARC_iaddr

ARC_mpyqb = _ida_domain.ARC_mpyqb

ARC_sfxtr = _ida_domain.ARC_sfxtr

ARC_pkqb = _ida_domain.ARC_pkqb

ARC_upkqb = _ida_domain.ARC_upkqb

ARC_xpkqb = _ida_domain.ARC_xpkqb

ARC_mpyw = _ida_domain.ARC_mpyw

ARC_mpyuw = _ida_domain.ARC_mpyuw

ARC_bi = _ida_domain.ARC_bi

ARC_bih = _ida_domain.ARC_bih

ARC_ldi = _ida_domain.ARC_ldi

ARC_aex = _ida_domain.ARC_aex

ARC_bmskn = _ida_domain.ARC_bmskn

ARC_seteq = _ida_domain.ARC_seteq

ARC_setne = _ida_domain.ARC_setne

ARC_setlt = _ida_domain.ARC_setlt

ARC_setge = _ida_domain.ARC_setge

ARC_setlo = _ida_domain.ARC_setlo

ARC_seths = _ida_domain.ARC_seths

ARC_setle = _ida_domain.ARC_setle

ARC_setgt = _ida_domain.ARC_setgt

ARC_rol = _ida_domain.ARC_rol

ARC_llock = _ida_domain.ARC_llock

ARC_scond = _ida_domain.ARC_scond

ARC_seti = _ida_domain.ARC_seti

ARC_clri = _ida_domain.ARC_clri

ARC_enter = _ida_domain.ARC_enter

ARC_leave = _ida_domain.ARC_leave

ARC_div = _ida_domain.ARC_div

ARC_divu = _ida_domain.ARC_divu

ARC_rem = _ida_domain.ARC_rem

ARC_remu = _ida_domain.ARC_remu

ARC_asrsr = _ida_domain.ARC_asrsr

ARC_valgn2h = _ida_domain.ARC_valgn2h

ARC_setacc = _ida_domain.ARC_setacc

ARC_mac = _ida_domain.ARC_mac

ARC_macu = _ida_domain.ARC_macu

ARC_dmpyh = _ida_domain.ARC_dmpyh

ARC_dmpyhu = _ida_domain.ARC_dmpyhu

ARC_dmach = _ida_domain.ARC_dmach

ARC_dmachu = _ida_domain.ARC_dmachu

ARC_vadd2h = _ida_domain.ARC_vadd2h

ARC_vadds2h = _ida_domain.ARC_vadds2h

ARC_vsub2h = _ida_domain.ARC_vsub2h

ARC_vsubs2h = _ida_domain.ARC_vsubs2h

ARC_vaddsub2h = _ida_domain.ARC_vaddsub2h

ARC_vaddsubs2h = _ida_domain.ARC_vaddsubs2h

ARC_vsubadd2h = _ida_domain.ARC_vsubadd2h

ARC_vsubadds2h = _ida_domain.ARC_vsubadds2h

ARC_mpyd = _ida_domain.ARC_mpyd

ARC_mpydu = _ida_domain.ARC_mpydu

ARC_macd = _ida_domain.ARC_macd

ARC_macdu = _ida_domain.ARC_macdu

ARC_vmpy2h = _ida_domain.ARC_vmpy2h

ARC_vmpy2hf = _ida_domain.ARC_vmpy2hf

ARC_vmpy2hu = _ida_domain.ARC_vmpy2hu

ARC_vmpy2hfr = _ida_domain.ARC_vmpy2hfr

ARC_vmac2h = _ida_domain.ARC_vmac2h

ARC_vmac2hf = _ida_domain.ARC_vmac2hf

ARC_vmac2hu = _ida_domain.ARC_vmac2hu

ARC_vmac2hfr = _ida_domain.ARC_vmac2hfr

ARC_vmpy2hwf = _ida_domain.ARC_vmpy2hwf

ARC_vasl2h = _ida_domain.ARC_vasl2h

ARC_vasls2h = _ida_domain.ARC_vasls2h

ARC_vasr2h = _ida_domain.ARC_vasr2h

ARC_vasrs2h = _ida_domain.ARC_vasrs2h

ARC_vlsr2h = _ida_domain.ARC_vlsr2h

ARC_vasrsr2h = _ida_domain.ARC_vasrsr2h

ARC_vadd4b = _ida_domain.ARC_vadd4b

ARC_vmax2h = _ida_domain.ARC_vmax2h

ARC_vsub4b = _ida_domain.ARC_vsub4b

ARC_vmin2h = _ida_domain.ARC_vmin2h

ARC_adcs = _ida_domain.ARC_adcs

ARC_sbcs = _ida_domain.ARC_sbcs

ARC_dmpyhwf = _ida_domain.ARC_dmpyhwf

ARC_vpack2hl = _ida_domain.ARC_vpack2hl

ARC_vpack2hm = _ida_domain.ARC_vpack2hm

ARC_dmpyhf = _ida_domain.ARC_dmpyhf

ARC_dmpyhfr = _ida_domain.ARC_dmpyhfr

ARC_dmachf = _ida_domain.ARC_dmachf

ARC_dmachfr = _ida_domain.ARC_dmachfr

ARC_vperm = _ida_domain.ARC_vperm

ARC_bspush = _ida_domain.ARC_bspush

ARC_swape = _ida_domain.ARC_swape

ARC_lsl16 = _ida_domain.ARC_lsl16

ARC_lsr16 = _ida_domain.ARC_lsr16

ARC_asr16 = _ida_domain.ARC_asr16

ARC_asr8 = _ida_domain.ARC_asr8

ARC_lsr8 = _ida_domain.ARC_lsr8

ARC_lsl8 = _ida_domain.ARC_lsl8

ARC_rol8 = _ida_domain.ARC_rol8

ARC_ror8 = _ida_domain.ARC_ror8

ARC_ffs = _ida_domain.ARC_ffs

ARC_fls = _ida_domain.ARC_fls

ARC_getacc = _ida_domain.ARC_getacc

ARC_normacc = _ida_domain.ARC_normacc

ARC_satf = _ida_domain.ARC_satf

ARC_vpack2hbl = _ida_domain.ARC_vpack2hbl

ARC_vpack2hbm = _ida_domain.ARC_vpack2hbm

ARC_vpack2hblf = _ida_domain.ARC_vpack2hblf

ARC_vpack2hbmf = _ida_domain.ARC_vpack2hbmf

ARC_vext2bhlf = _ida_domain.ARC_vext2bhlf

ARC_vext2bhmf = _ida_domain.ARC_vext2bhmf

ARC_vrep2hl = _ida_domain.ARC_vrep2hl

ARC_vrep2hm = _ida_domain.ARC_vrep2hm

ARC_vext2bhl = _ida_domain.ARC_vext2bhl

ARC_vext2bhm = _ida_domain.ARC_vext2bhm

ARC_vsext2bhl = _ida_domain.ARC_vsext2bhl

ARC_vsext2bhm = _ida_domain.ARC_vsext2bhm

ARC_vabs2h = _ida_domain.ARC_vabs2h

ARC_vabss2h = _ida_domain.ARC_vabss2h

ARC_vneg2h = _ida_domain.ARC_vneg2h

ARC_vnegs2h = _ida_domain.ARC_vnegs2h

ARC_vnorm2h = _ida_domain.ARC_vnorm2h

ARC_bspeek = _ida_domain.ARC_bspeek

ARC_bspop = _ida_domain.ARC_bspop

ARC_sqrt = _ida_domain.ARC_sqrt

ARC_sqrtf = _ida_domain.ARC_sqrtf

ARC_aslacc = _ida_domain.ARC_aslacc

ARC_aslsacc = _ida_domain.ARC_aslsacc

ARC_flagacc = _ida_domain.ARC_flagacc

ARC_modif = _ida_domain.ARC_modif

ARC_cmpyhnfr = _ida_domain.ARC_cmpyhnfr

ARC_cmpyhfr = _ida_domain.ARC_cmpyhfr

ARC_cmpychfr = _ida_domain.ARC_cmpychfr

ARC_vmsub2hf = _ida_domain.ARC_vmsub2hf

ARC_vmsub2hfr = _ida_domain.ARC_vmsub2hfr

ARC_cmpychnfr = _ida_domain.ARC_cmpychnfr

ARC_cmachnfr = _ida_domain.ARC_cmachnfr

ARC_cmachfr = _ida_domain.ARC_cmachfr

ARC_cmacchnfr = _ida_domain.ARC_cmacchnfr

ARC_cmacchfr = _ida_domain.ARC_cmacchfr

ARC_mpyf = _ida_domain.ARC_mpyf

ARC_mpyfr = _ida_domain.ARC_mpyfr

ARC_macf = _ida_domain.ARC_macf

ARC_macfr = _ida_domain.ARC_macfr

ARC_msubf = _ida_domain.ARC_msubf

ARC_msubfr = _ida_domain.ARC_msubfr

ARC_divf = _ida_domain.ARC_divf

ARC_vmac2hnfr = _ida_domain.ARC_vmac2hnfr

ARC_vmsub2hnfr = _ida_domain.ARC_vmsub2hnfr

ARC_mpydf = _ida_domain.ARC_mpydf

ARC_macdf = _ida_domain.ARC_macdf

ARC_msubwhfl = _ida_domain.ARC_msubwhfl

ARC_msubdf = _ida_domain.ARC_msubdf

ARC_dmpyhbl = _ida_domain.ARC_dmpyhbl

ARC_dmpyhbm = _ida_domain.ARC_dmpyhbm

ARC_dmachbl = _ida_domain.ARC_dmachbl

ARC_dmachbm = _ida_domain.ARC_dmachbm

ARC_msubwhflr = _ida_domain.ARC_msubwhflr

ARC_cmpyhfmr = _ida_domain.ARC_cmpyhfmr

ARC_cbflyhf0r = _ida_domain.ARC_cbflyhf0r

ARC_mpywhl = _ida_domain.ARC_mpywhl

ARC_macwhl = _ida_domain.ARC_macwhl

ARC_mpywhul = _ida_domain.ARC_mpywhul

ARC_macwhul = _ida_domain.ARC_macwhul

ARC_mpywhfm = _ida_domain.ARC_mpywhfm

ARC_mpywhfmr = _ida_domain.ARC_mpywhfmr

ARC_macwhfm = _ida_domain.ARC_macwhfm

ARC_macwhfmr = _ida_domain.ARC_macwhfmr

ARC_mpywhfl = _ida_domain.ARC_mpywhfl

ARC_mpywhflr = _ida_domain.ARC_mpywhflr

ARC_macwhfl = _ida_domain.ARC_macwhfl

ARC_macwhflr = _ida_domain.ARC_macwhflr

ARC_macwhkl = _ida_domain.ARC_macwhkl

ARC_macwhkul = _ida_domain.ARC_macwhkul

ARC_mpywhkl = _ida_domain.ARC_mpywhkl

ARC_mpywhkul = _ida_domain.ARC_mpywhkul

ARC_msubwhfm = _ida_domain.ARC_msubwhfm

ARC_msubwhfmr = _ida_domain.ARC_msubwhfmr

ARC_cbflyhf1r = _ida_domain.ARC_cbflyhf1r

ARC_fscmp = _ida_domain.ARC_fscmp

ARC_fscmpf = _ida_domain.ARC_fscmpf

ARC_fsmadd = _ida_domain.ARC_fsmadd

ARC_fsmsub = _ida_domain.ARC_fsmsub

ARC_fsdiv = _ida_domain.ARC_fsdiv

ARC_fcvt32 = _ida_domain.ARC_fcvt32

ARC_fssqrt = _ida_domain.ARC_fssqrt

ARC_jli = _ida_domain.ARC_jli

ARC_ei = _ida_domain.ARC_ei

ARC_kflag = _ida_domain.ARC_kflag

ARC_wevt = _ida_domain.ARC_wevt

ARC_last = _ida_domain.ARC_last

TMS28_null = _ida_domain.TMS28_null

TMS28_aborti = _ida_domain.TMS28_aborti

TMS28_abs = _ida_domain.TMS28_abs

TMS28_abstc = _ida_domain.TMS28_abstc

TMS28_add = _ida_domain.TMS28_add

TMS28_addb = _ida_domain.TMS28_addb

TMS28_addcl = _ida_domain.TMS28_addcl

TMS28_addcu = _ida_domain.TMS28_addcu

TMS28_addl = _ida_domain.TMS28_addl

TMS28_addu = _ida_domain.TMS28_addu

TMS28_addul = _ida_domain.TMS28_addul

TMS28_adrk = _ida_domain.TMS28_adrk

TMS28_and = _ida_domain.TMS28_and

TMS28_andb = _ida_domain.TMS28_andb

TMS28_asp = _ida_domain.TMS28_asp

TMS28_asr = _ida_domain.TMS28_asr

TMS28_asr64 = _ida_domain.TMS28_asr64

TMS28_asrl = _ida_domain.TMS28_asrl

TMS28_b = _ida_domain.TMS28_b

TMS28_banz = _ida_domain.TMS28_banz

TMS28_bar = _ida_domain.TMS28_bar

TMS28_bf = _ida_domain.TMS28_bf

TMS28_c27map = _ida_domain.TMS28_c27map

TMS28_c27obj = _ida_domain.TMS28_c27obj

TMS28_c28addr = _ida_domain.TMS28_c28addr

TMS28_c28map = _ida_domain.TMS28_c28map

TMS28_c28obj = _ida_domain.TMS28_c28obj

TMS28_clrc = _ida_domain.TMS28_clrc

TMS28_cmp = _ida_domain.TMS28_cmp

TMS28_cmp64 = _ida_domain.TMS28_cmp64

TMS28_cmpb = _ida_domain.TMS28_cmpb

TMS28_cmpl = _ida_domain.TMS28_cmpl

TMS28_cmpr = _ida_domain.TMS28_cmpr

TMS28_csb = _ida_domain.TMS28_csb

TMS28_dec = _ida_domain.TMS28_dec

TMS28_dint = _ida_domain.TMS28_dint

TMS28_dmac = _ida_domain.TMS28_dmac

TMS28_dmov = _ida_domain.TMS28_dmov

TMS28_eallow = _ida_domain.TMS28_eallow

TMS28_edis = _ida_domain.TMS28_edis

TMS28_eint = _ida_domain.TMS28_eint

TMS28_estop0 = _ida_domain.TMS28_estop0

TMS28_estop1 = _ida_domain.TMS28_estop1

TMS28_ffc = _ida_domain.TMS28_ffc

TMS28_flip = _ida_domain.TMS28_flip

TMS28_iack = _ida_domain.TMS28_iack

TMS28_idle = _ida_domain.TMS28_idle

TMS28_imacl = _ida_domain.TMS28_imacl

TMS28_impyal = _ida_domain.TMS28_impyal

TMS28_impyl = _ida_domain.TMS28_impyl

TMS28_impysl = _ida_domain.TMS28_impysl

TMS28_impyxul = _ida_domain.TMS28_impyxul

TMS28_in = _ida_domain.TMS28_in

TMS28_inc = _ida_domain.TMS28_inc

TMS28_intr = _ida_domain.TMS28_intr

TMS28_iret = _ida_domain.TMS28_iret

TMS28_lb = _ida_domain.TMS28_lb

TMS28_lc = _ida_domain.TMS28_lc

TMS28_lcr = _ida_domain.TMS28_lcr

TMS28_loopnz = _ida_domain.TMS28_loopnz

TMS28_loopz = _ida_domain.TMS28_loopz

TMS28_lpaddr = _ida_domain.TMS28_lpaddr

TMS28_lret = _ida_domain.TMS28_lret

TMS28_lrete = _ida_domain.TMS28_lrete

TMS28_lretr = _ida_domain.TMS28_lretr

TMS28_lsl = _ida_domain.TMS28_lsl

TMS28_lsl64 = _ida_domain.TMS28_lsl64

TMS28_lsll = _ida_domain.TMS28_lsll

TMS28_lsr = _ida_domain.TMS28_lsr

TMS28_lsr64 = _ida_domain.TMS28_lsr64

TMS28_lsrl = _ida_domain.TMS28_lsrl

TMS28_mac = _ida_domain.TMS28_mac

TMS28_max = _ida_domain.TMS28_max

TMS28_maxcul = _ida_domain.TMS28_maxcul

TMS28_maxl = _ida_domain.TMS28_maxl

TMS28_min = _ida_domain.TMS28_min

TMS28_mincul = _ida_domain.TMS28_mincul

TMS28_minl = _ida_domain.TMS28_minl

TMS28_mov = _ida_domain.TMS28_mov

TMS28_mova = _ida_domain.TMS28_mova

TMS28_movad = _ida_domain.TMS28_movad

TMS28_movb = _ida_domain.TMS28_movb

TMS28_movdl = _ida_domain.TMS28_movdl

TMS28_movh = _ida_domain.TMS28_movh

TMS28_movl = _ida_domain.TMS28_movl

TMS28_movp = _ida_domain.TMS28_movp

TMS28_movs = _ida_domain.TMS28_movs

TMS28_movu = _ida_domain.TMS28_movu

TMS28_movw = _ida_domain.TMS28_movw

TMS28_movx = _ida_domain.TMS28_movx

TMS28_movz = _ida_domain.TMS28_movz

TMS28_mpy = _ida_domain.TMS28_mpy

TMS28_mpya = _ida_domain.TMS28_mpya

TMS28_mpyb = _ida_domain.TMS28_mpyb

TMS28_mpys = _ida_domain.TMS28_mpys

TMS28_mpyu = _ida_domain.TMS28_mpyu

TMS28_mpyxu = _ida_domain.TMS28_mpyxu

TMS28_nasp = _ida_domain.TMS28_nasp

TMS28_neg = _ida_domain.TMS28_neg

TMS28_neg64 = _ida_domain.TMS28_neg64

TMS28_negtc = _ida_domain.TMS28_negtc

TMS28_nop = _ida_domain.TMS28_nop

TMS28_norm = _ida_domain.TMS28_norm

TMS28_not = _ida_domain.TMS28_not

TMS28_or = _ida_domain.TMS28_or

TMS28_orb = _ida_domain.TMS28_orb

TMS28_out = _ida_domain.TMS28_out

TMS28_pop = _ida_domain.TMS28_pop

TMS28_pread = _ida_domain.TMS28_pread

TMS28_push = _ida_domain.TMS28_push

TMS28_pwrite = _ida_domain.TMS28_pwrite

TMS28_qmacl = _ida_domain.TMS28_qmacl

TMS28_qmpyal = _ida_domain.TMS28_qmpyal

TMS28_qmpyl = _ida_domain.TMS28_qmpyl

TMS28_qmpysl = _ida_domain.TMS28_qmpysl

TMS28_qmpyul = _ida_domain.TMS28_qmpyul

TMS28_qmpyxul = _ida_domain.TMS28_qmpyxul

TMS28_rol = _ida_domain.TMS28_rol

TMS28_ror = _ida_domain.TMS28_ror

TMS28_rpt = _ida_domain.TMS28_rpt

TMS28_sat = _ida_domain.TMS28_sat

TMS28_sat64 = _ida_domain.TMS28_sat64

TMS28_sb = _ida_domain.TMS28_sb

TMS28_sbbu = _ida_domain.TMS28_sbbu

TMS28_sbf = _ida_domain.TMS28_sbf

TMS28_sbrk = _ida_domain.TMS28_sbrk

TMS28_setc = _ida_domain.TMS28_setc

TMS28_sfr = _ida_domain.TMS28_sfr

TMS28_spm = _ida_domain.TMS28_spm

TMS28_sqra = _ida_domain.TMS28_sqra

TMS28_sqrs = _ida_domain.TMS28_sqrs

TMS28_sub = _ida_domain.TMS28_sub

TMS28_subb = _ida_domain.TMS28_subb

TMS28_subbl = _ida_domain.TMS28_subbl

TMS28_subcu = _ida_domain.TMS28_subcu

TMS28_subcul = _ida_domain.TMS28_subcul

TMS28_subl = _ida_domain.TMS28_subl

TMS28_subr = _ida_domain.TMS28_subr

TMS28_subrl = _ida_domain.TMS28_subrl

TMS28_subu = _ida_domain.TMS28_subu

TMS28_subul = _ida_domain.TMS28_subul

TMS28_sxtb = _ida_domain.TMS28_sxtb

TMS28_tbit = _ida_domain.TMS28_tbit

TMS28_tclr = _ida_domain.TMS28_tclr

TMS28_test = _ida_domain.TMS28_test

TMS28_trap = _ida_domain.TMS28_trap

TMS28_tset = _ida_domain.TMS28_tset

TMS28_uout = _ida_domain.TMS28_uout

TMS28_xb = _ida_domain.TMS28_xb

TMS28_xbanz = _ida_domain.TMS28_xbanz

TMS28_xcall = _ida_domain.TMS28_xcall

TMS28_xmac = _ida_domain.TMS28_xmac

TMS28_xmacd = _ida_domain.TMS28_xmacd

TMS28_xor = _ida_domain.TMS28_xor

TMS28_xorb = _ida_domain.TMS28_xorb

TMS28_xpread = _ida_domain.TMS28_xpread

TMS28_xpwrite = _ida_domain.TMS28_xpwrite

TMS28_xret = _ida_domain.TMS28_xret

TMS28_xretc = _ida_domain.TMS28_xretc

TMS28_zalr = _ida_domain.TMS28_zalr

TMS28_zap = _ida_domain.TMS28_zap

TMS28_zapa = _ida_domain.TMS28_zapa

TMS28_absf32 = _ida_domain.TMS28_absf32

TMS28_addf32 = _ida_domain.TMS28_addf32

TMS28_cmpf32 = _ida_domain.TMS28_cmpf32

TMS28_einvf32 = _ida_domain.TMS28_einvf32

TMS28_eisqrtf32 = _ida_domain.TMS28_eisqrtf32

TMS28_f32toi16 = _ida_domain.TMS28_f32toi16

TMS28_f32toi16r = _ida_domain.TMS28_f32toi16r

TMS28_f32toi32 = _ida_domain.TMS28_f32toi32

TMS28_f32toui16 = _ida_domain.TMS28_f32toui16

TMS28_f32toui16r = _ida_domain.TMS28_f32toui16r

TMS28_f32toui32 = _ida_domain.TMS28_f32toui32

TMS28_fracf32 = _ida_domain.TMS28_fracf32

TMS28_i16tof32 = _ida_domain.TMS28_i16tof32

TMS28_i32tof32 = _ida_domain.TMS28_i32tof32

TMS28_macf32 = _ida_domain.TMS28_macf32

TMS28_maxf32 = _ida_domain.TMS28_maxf32

TMS28_minf32 = _ida_domain.TMS28_minf32

TMS28_mov16 = _ida_domain.TMS28_mov16

TMS28_mov32 = _ida_domain.TMS28_mov32

TMS28_movd32 = _ida_domain.TMS28_movd32

TMS28_movf32 = _ida_domain.TMS28_movf32

TMS28_moviz = _ida_domain.TMS28_moviz

TMS28_movst0 = _ida_domain.TMS28_movst0

TMS28_movxi = _ida_domain.TMS28_movxi

TMS28_mpyf32 = _ida_domain.TMS28_mpyf32

TMS28_negf32 = _ida_domain.TMS28_negf32

TMS28_poprb = _ida_domain.TMS28_poprb

TMS28_pushrb = _ida_domain.TMS28_pushrb

TMS28_restore = _ida_domain.TMS28_restore

TMS28_rptb = _ida_domain.TMS28_rptb

TMS28_save = _ida_domain.TMS28_save

TMS28_setflg = _ida_domain.TMS28_setflg

TMS28_subf32 = _ida_domain.TMS28_subf32

TMS28_swapf = _ida_domain.TMS28_swapf

TMS28_testtf = _ida_domain.TMS28_testtf

TMS28_ui16tof32 = _ida_domain.TMS28_ui16tof32

TMS28_ui32tof32 = _ida_domain.TMS28_ui32tof32

TMS28_zero = _ida_domain.TMS28_zero

TMS28_zeroa = _ida_domain.TMS28_zeroa

TMS28_movdd32 = _ida_domain.TMS28_movdd32

TMS28_movix = _ida_domain.TMS28_movix

TMS28_macf64 = _ida_domain.TMS28_macf64

TMS28_mpyf64 = _ida_domain.TMS28_mpyf64

TMS28_addf64 = _ida_domain.TMS28_addf64

TMS28_subf64 = _ida_domain.TMS28_subf64

TMS28_cmpf64 = _ida_domain.TMS28_cmpf64

TMS28_maxf64 = _ida_domain.TMS28_maxf64

TMS28_minf64 = _ida_domain.TMS28_minf64

TMS28_f64toi32 = _ida_domain.TMS28_f64toi32

TMS28_f64toui32 = _ida_domain.TMS28_f64toui32

TMS28_i32tof64 = _ida_domain.TMS28_i32tof64

TMS28_ui32tof64 = _ida_domain.TMS28_ui32tof64

TMS28_f64toi64 = _ida_domain.TMS28_f64toi64

TMS28_f64toui64 = _ida_domain.TMS28_f64toui64

TMS28_i64tof64 = _ida_domain.TMS28_i64tof64

TMS28_ui64tof64 = _ida_domain.TMS28_ui64tof64

TMS28_fracf64 = _ida_domain.TMS28_fracf64

TMS28_f64tof32 = _ida_domain.TMS28_f64tof32

TMS28_f32tof64 = _ida_domain.TMS28_f32tof64

TMS28_f32dtof64 = _ida_domain.TMS28_f32dtof64

TMS28_absf64 = _ida_domain.TMS28_absf64

TMS28_negf64 = _ida_domain.TMS28_negf64

TMS28_mov64 = _ida_domain.TMS28_mov64

TMS28_eisqrtf64 = _ida_domain.TMS28_eisqrtf64

TMS28_einvf64 = _ida_domain.TMS28_einvf64

TMS28_vclear = _ida_domain.TMS28_vclear

TMS28_vclearall = _ida_domain.TMS28_vclearall

TMS28_vclrovfi = _ida_domain.TMS28_vclrovfi

TMS28_vclrovfr = _ida_domain.TMS28_vclrovfr

TMS28_vmov16 = _ida_domain.TMS28_vmov16

TMS28_vmov32 = _ida_domain.TMS28_vmov32

TMS28_vmovd32 = _ida_domain.TMS28_vmovd32

TMS28_vmovix = _ida_domain.TMS28_vmovix

TMS28_vmovzi = _ida_domain.TMS28_vmovzi

TMS28_vmovxi = _ida_domain.TMS28_vmovxi

TMS28_vrndoff = _ida_domain.TMS28_vrndoff

TMS28_vrndon = _ida_domain.TMS28_vrndon

TMS28_vsatoff = _ida_domain.TMS28_vsatoff

TMS28_vsaton = _ida_domain.TMS28_vsaton

TMS28_vsetshl = _ida_domain.TMS28_vsetshl

TMS28_vsetshr = _ida_domain.TMS28_vsetshr

TMS28_vcadd = _ida_domain.TMS28_vcadd

TMS28_vcdadd16 = _ida_domain.TMS28_vcdadd16

TMS28_vcdsub16 = _ida_domain.TMS28_vcdsub16

TMS28_vcmac = _ida_domain.TMS28_vcmac

TMS28_vcmpy = _ida_domain.TMS28_vcmpy

TMS28_vneg = _ida_domain.TMS28_vneg

TMS28_vcsub = _ida_domain.TMS28_vcsub

TMS28_vcrc8h_1 = _ida_domain.TMS28_vcrc8h_1

TMS28_vcrc8l_1 = _ida_domain.TMS28_vcrc8l_1

TMS28_vcrc16p1h_1 = _ida_domain.TMS28_vcrc16p1h_1

TMS28_vcrc16p1l_1 = _ida_domain.TMS28_vcrc16p1l_1

TMS28_vcrc16p2h_1 = _ida_domain.TMS28_vcrc16p2h_1

TMS28_vcrc16p2l_1 = _ida_domain.TMS28_vcrc16p2l_1

TMS28_vcrc32h_1 = _ida_domain.TMS28_vcrc32h_1

TMS28_vcrc32l_1 = _ida_domain.TMS28_vcrc32l_1

TMS28_vcrcclr = _ida_domain.TMS28_vcrcclr

TMS28_vitbm2 = _ida_domain.TMS28_vitbm2

TMS28_vitbm3 = _ida_domain.TMS28_vitbm3

TMS28_vitdhaddsub = _ida_domain.TMS28_vitdhaddsub

TMS28_vitdhsubadd = _ida_domain.TMS28_vitdhsubadd

TMS28_vitdladdsub = _ida_domain.TMS28_vitdladdsub

TMS28_vitdlsubadd = _ida_domain.TMS28_vitdlsubadd

TMS28_vithsel = _ida_domain.TMS28_vithsel

TMS28_vitlsel = _ida_domain.TMS28_vitlsel

TMS28_vtclear = _ida_domain.TMS28_vtclear

TMS28_vtrace = _ida_domain.TMS28_vtrace

TMS28_vnop = _ida_domain.TMS28_vnop

TMS28_vsetcrcmsgflip = _ida_domain.TMS28_vsetcrcmsgflip

TMS28_vclrcrcmsgflip = _ida_domain.TMS28_vclrcrcmsgflip

TMS28_vcrc32p2l_1 = _ida_domain.TMS28_vcrc32p2l_1

TMS28_vcrc32p2h_1 = _ida_domain.TMS28_vcrc32p2h_1

TMS28_vcrc24l_1 = _ida_domain.TMS28_vcrc24l_1

TMS28_vcrc24h_1 = _ida_domain.TMS28_vcrc24h_1

TMS28_vsetcrcsize = _ida_domain.TMS28_vsetcrcsize

TMS28_vcrcl = _ida_domain.TMS28_vcrcl

TMS28_vcrch = _ida_domain.TMS28_vcrch

TMS28_vswapcrc = _ida_domain.TMS28_vswapcrc

TMS28_vclrcpack = _ida_domain.TMS28_vclrcpack

TMS28_vclropack = _ida_domain.TMS28_vclropack

TMS28_vsetcpack = _ida_domain.TMS28_vsetcpack

TMS28_vsetopack = _ida_domain.TMS28_vsetopack

TMS28_vswap32 = _ida_domain.TMS28_vswap32

TMS28_vxormov32 = _ida_domain.TMS28_vxormov32

TMS28_vashl32 = _ida_domain.TMS28_vashl32

TMS28_vashr32 = _ida_domain.TMS28_vashr32

TMS28_vbitflip = _ida_domain.TMS28_vbitflip

TMS28_vlshl32 = _ida_domain.TMS28_vlshl32

TMS28_vlshr32 = _ida_domain.TMS28_vlshr32

TMS28_vccmac = _ida_domain.TMS28_vccmac

TMS28_vccmpy = _ida_domain.TMS28_vccmpy

TMS28_vccon = _ida_domain.TMS28_vccon

TMS28_vcflip = _ida_domain.TMS28_vcflip

TMS28_vcmag = _ida_domain.TMS28_vcmag

TMS28_vcshl16 = _ida_domain.TMS28_vcshl16

TMS28_vcshr16 = _ida_domain.TMS28_vcshr16

TMS28_vclrdive = _ida_domain.TMS28_vclrdive

TMS28_vdec = _ida_domain.TMS28_vdec

TMS28_vinc = _ida_domain.TMS28_vinc

TMS28_vmod32 = _ida_domain.TMS28_vmod32

TMS28_vmpyadd = _ida_domain.TMS28_vmpyadd

TMS28_vcfft1 = _ida_domain.TMS28_vcfft1

TMS28_vcfft2 = _ida_domain.TMS28_vcfft2

TMS28_vcfft3 = _ida_domain.TMS28_vcfft3

TMS28_vcfft4 = _ida_domain.TMS28_vcfft4

TMS28_vcfft5 = _ida_domain.TMS28_vcfft5

TMS28_vcfft6 = _ida_domain.TMS28_vcfft6

TMS28_vcfft7 = _ida_domain.TMS28_vcfft7

TMS28_vcfft8 = _ida_domain.TMS28_vcfft8

TMS28_vcfft9 = _ida_domain.TMS28_vcfft9

TMS28_vcfft10 = _ida_domain.TMS28_vcfft10

TMS28_vgfacc = _ida_domain.TMS28_vgfacc

TMS28_vgfadd4 = _ida_domain.TMS28_vgfadd4

TMS28_vgfinit = _ida_domain.TMS28_vgfinit

TMS28_vgfmac4 = _ida_domain.TMS28_vgfmac4

TMS28_vgfmpy4 = _ida_domain.TMS28_vgfmpy4

TMS28_vpack4 = _ida_domain.TMS28_vpack4

TMS28_vrevb = _ida_domain.TMS28_vrevb

TMS28_vshlmb = _ida_domain.TMS28_vshlmb

TMS28_vitstage = _ida_domain.TMS28_vitstage

TMS28_vsetk = _ida_domain.TMS28_vsetk

TMS28_vsminit = _ida_domain.TMS28_vsminit

TMS28_absi32div32 = _ida_domain.TMS28_absi32div32

TMS28_absi32div32u = _ida_domain.TMS28_absi32div32u

TMS28_absi64div32 = _ida_domain.TMS28_absi64div32

TMS28_absi64div32u = _ida_domain.TMS28_absi64div32u

TMS28_absi64div64 = _ida_domain.TMS28_absi64div64

TMS28_absi64div64u = _ida_domain.TMS28_absi64div64u

TMS28_subc4ui32 = _ida_domain.TMS28_subc4ui32

TMS28_subc2ui64 = _ida_domain.TMS28_subc2ui64

TMS28_negi32div32 = _ida_domain.TMS28_negi32div32

TMS28_enegi32div32 = _ida_domain.TMS28_enegi32div32

TMS28_mnegi32div32 = _ida_domain.TMS28_mnegi32div32

TMS28_negi64div32 = _ida_domain.TMS28_negi64div32

TMS28_enegi64div32 = _ida_domain.TMS28_enegi64div32

TMS28_mnegi64div32 = _ida_domain.TMS28_mnegi64div32

TMS28_negi64div64 = _ida_domain.TMS28_negi64div64

TMS28_enegi64div64 = _ida_domain.TMS28_enegi64div64

TMS28_mnegi64div64 = _ida_domain.TMS28_mnegi64div64

TMS28_mpy2pif32 = _ida_domain.TMS28_mpy2pif32

TMS28_div2pif32 = _ida_domain.TMS28_div2pif32

TMS28_divf32 = _ida_domain.TMS28_divf32

TMS28_sqrtf32 = _ida_domain.TMS28_sqrtf32

TMS28_sinpuf32 = _ida_domain.TMS28_sinpuf32

TMS28_cospuf32 = _ida_domain.TMS28_cospuf32

TMS28_atanpuf32 = _ida_domain.TMS28_atanpuf32

TMS28_quadf32 = _ida_domain.TMS28_quadf32

TMS28_iexp2f32 = _ida_domain.TMS28_iexp2f32

TMS28_log2f32 = _ida_domain.TMS28_log2f32

TMS28_last = _ida_domain.TMS28_last

UNSP_null = _ida_domain.UNSP_null

UNSP_add = _ida_domain.UNSP_add

UNSP_adc = _ida_domain.UNSP_adc

UNSP_sub = _ida_domain.UNSP_sub

UNSP_sbc = _ida_domain.UNSP_sbc

UNSP_cmp = _ida_domain.UNSP_cmp

UNSP_cmpc = _ida_domain.UNSP_cmpc

UNSP_neg = _ida_domain.UNSP_neg

UNSP_negc = _ida_domain.UNSP_negc

UNSP_xor = _ida_domain.UNSP_xor

UNSP_load = _ida_domain.UNSP_load

UNSP_or = _ida_domain.UNSP_or

UNSP_and = _ida_domain.UNSP_and

UNSP_test = _ida_domain.UNSP_test

UNSP_store = _ida_domain.UNSP_store

UNSP_add_s = _ida_domain.UNSP_add_s

UNSP_adc_s = _ida_domain.UNSP_adc_s

UNSP_sub_s = _ida_domain.UNSP_sub_s

UNSP_sbc_s = _ida_domain.UNSP_sbc_s

UNSP_cmp_s = _ida_domain.UNSP_cmp_s

UNSP_cmpc_s = _ida_domain.UNSP_cmpc_s

UNSP_neg_s = _ida_domain.UNSP_neg_s

UNSP_negc_s = _ida_domain.UNSP_negc_s

UNSP_xor_s = _ida_domain.UNSP_xor_s

UNSP_load_s = _ida_domain.UNSP_load_s

UNSP_or_s = _ida_domain.UNSP_or_s

UNSP_and_s = _ida_domain.UNSP_and_s

UNSP_test_s = _ida_domain.UNSP_test_s

UNSP_store_s = _ida_domain.UNSP_store_s

UNSP_retf = _ida_domain.UNSP_retf

UNSP_reti = _ida_domain.UNSP_reti

UNSP_pop = _ida_domain.UNSP_pop

UNSP_push = _ida_domain.UNSP_push

UNSP_call = _ida_domain.UNSP_call

UNSP_goto = _ida_domain.UNSP_goto

UNSP_nop = _ida_domain.UNSP_nop

UNSP_exp = _ida_domain.UNSP_exp

UNSP_jb = _ida_domain.UNSP_jb

UNSP_jae = _ida_domain.UNSP_jae

UNSP_jge = _ida_domain.UNSP_jge

UNSP_jl = _ida_domain.UNSP_jl

UNSP_jne = _ida_domain.UNSP_jne

UNSP_je = _ida_domain.UNSP_je

UNSP_jpl = _ida_domain.UNSP_jpl

UNSP_jmi = _ida_domain.UNSP_jmi

UNSP_jbe = _ida_domain.UNSP_jbe

UNSP_ja = _ida_domain.UNSP_ja

UNSP_jle = _ida_domain.UNSP_jle

UNSP_jg = _ida_domain.UNSP_jg

UNSP_jvc = _ida_domain.UNSP_jvc

UNSP_jvs = _ida_domain.UNSP_jvs

UNSP_jmp = _ida_domain.UNSP_jmp

UNSP_mulss = _ida_domain.UNSP_mulss

UNSP_mulus = _ida_domain.UNSP_mulus

UNSP_muluu = _ida_domain.UNSP_muluu

UNSP_divs = _ida_domain.UNSP_divs

UNSP_divq = _ida_domain.UNSP_divq

UNSP_int1 = _ida_domain.UNSP_int1

UNSP_int2 = _ida_domain.UNSP_int2

UNSP_fir_mov = _ida_domain.UNSP_fir_mov

UNSP_fraction = _ida_domain.UNSP_fraction

UNSP_irq = _ida_domain.UNSP_irq

UNSP_secbank = _ida_domain.UNSP_secbank

UNSP_fiq = _ida_domain.UNSP_fiq

UNSP_irqnest = _ida_domain.UNSP_irqnest

UNSP_break = _ida_domain.UNSP_break

UNSP_asr = _ida_domain.UNSP_asr

UNSP_asror = _ida_domain.UNSP_asror

UNSP_lsl = _ida_domain.UNSP_lsl

UNSP_lslor = _ida_domain.UNSP_lslor

UNSP_lsr = _ida_domain.UNSP_lsr

UNSP_lsror = _ida_domain.UNSP_lsror

UNSP_rol = _ida_domain.UNSP_rol

UNSP_ror = _ida_domain.UNSP_ror

UNSP_tstb = _ida_domain.UNSP_tstb

UNSP_setb = _ida_domain.UNSP_setb

UNSP_clrb = _ida_domain.UNSP_clrb

UNSP_invb = _ida_domain.UNSP_invb

UNSP_last = _ida_domain.UNSP_last

DALVIK_UNUSED = _ida_domain.DALVIK_UNUSED

DALVIK_NOP = _ida_domain.DALVIK_NOP

DALVIK_MOVE = _ida_domain.DALVIK_MOVE

DALVIK_MOVE_FROM16 = _ida_domain.DALVIK_MOVE_FROM16

DALVIK_MOVE_16 = _ida_domain.DALVIK_MOVE_16

DALVIK_MOVE_WIDE = _ida_domain.DALVIK_MOVE_WIDE

DALVIK_MOVE_WIDE_FROM16 = _ida_domain.DALVIK_MOVE_WIDE_FROM16

DALVIK_MOVE_WIDE_16 = _ida_domain.DALVIK_MOVE_WIDE_16

DALVIK_MOVE_OBJECT = _ida_domain.DALVIK_MOVE_OBJECT

DALVIK_MOVE_OBJECT_FROM16 = _ida_domain.DALVIK_MOVE_OBJECT_FROM16

DALVIK_MOVE_OBJECT_16 = _ida_domain.DALVIK_MOVE_OBJECT_16

DALVIK_MOVE_RESULT = _ida_domain.DALVIK_MOVE_RESULT

DALVIK_MOVE_RESULT_WIDE = _ida_domain.DALVIK_MOVE_RESULT_WIDE

DALVIK_MOVE_RESULT_OBJECT = _ida_domain.DALVIK_MOVE_RESULT_OBJECT

DALVIK_MOVE_EXCEPTION = _ida_domain.DALVIK_MOVE_EXCEPTION

DALVIK_RETURN_VOID = _ida_domain.DALVIK_RETURN_VOID

DALVIK_RETURN = _ida_domain.DALVIK_RETURN

DALVIK_RETURN_WIDE = _ida_domain.DALVIK_RETURN_WIDE

DALVIK_RETURN_OBJECT = _ida_domain.DALVIK_RETURN_OBJECT

DALVIK_CONST_4 = _ida_domain.DALVIK_CONST_4

DALVIK_CONST_16 = _ida_domain.DALVIK_CONST_16

DALVIK_CONST = _ida_domain.DALVIK_CONST

DALVIK_CONST_HIGH16 = _ida_domain.DALVIK_CONST_HIGH16

DALVIK_CONST_WIDE_16 = _ida_domain.DALVIK_CONST_WIDE_16

DALVIK_CONST_WIDE_32 = _ida_domain.DALVIK_CONST_WIDE_32

DALVIK_CONST_WIDE = _ida_domain.DALVIK_CONST_WIDE

DALVIK_CONST_WIDE_HIGH16 = _ida_domain.DALVIK_CONST_WIDE_HIGH16

DALVIK_CONST_STRING = _ida_domain.DALVIK_CONST_STRING

DALVIK_CONST_STRING_JUMBO = _ida_domain.DALVIK_CONST_STRING_JUMBO

DALVIK_CONST_CLASS = _ida_domain.DALVIK_CONST_CLASS

DALVIK_MONITOR_ENTER = _ida_domain.DALVIK_MONITOR_ENTER

DALVIK_MONITOR_EXIT = _ida_domain.DALVIK_MONITOR_EXIT

DALVIK_CHECK_CAST = _ida_domain.DALVIK_CHECK_CAST

DALVIK_INSTANCE_OF = _ida_domain.DALVIK_INSTANCE_OF

DALVIK_ARRAY_LENGTH = _ida_domain.DALVIK_ARRAY_LENGTH

DALVIK_NEW_INSTANCE = _ida_domain.DALVIK_NEW_INSTANCE

DALVIK_NEW_ARRAY = _ida_domain.DALVIK_NEW_ARRAY

DALVIK_FILLED_NEW_ARRAY = _ida_domain.DALVIK_FILLED_NEW_ARRAY

DALVIK_FILLED_NEW_ARRAY_RANGE = _ida_domain.DALVIK_FILLED_NEW_ARRAY_RANGE

DALVIK_FILL_ARRAY_DATA = _ida_domain.DALVIK_FILL_ARRAY_DATA

DALVIK_THROW = _ida_domain.DALVIK_THROW

DALVIK_GOTO = _ida_domain.DALVIK_GOTO

DALVIK_GOTO_16 = _ida_domain.DALVIK_GOTO_16

DALVIK_GOTO_32 = _ida_domain.DALVIK_GOTO_32

DALVIK_PACKED_SWITCH = _ida_domain.DALVIK_PACKED_SWITCH

DALVIK_SPARSE_SWITCH = _ida_domain.DALVIK_SPARSE_SWITCH

DALVIK_CMPL_FLOAT = _ida_domain.DALVIK_CMPL_FLOAT

DALVIK_CMPG_FLOAT = _ida_domain.DALVIK_CMPG_FLOAT

DALVIK_CMPL_DOUBLE = _ida_domain.DALVIK_CMPL_DOUBLE

DALVIK_CMPG_DOUBLE = _ida_domain.DALVIK_CMPG_DOUBLE

DALVIK_CMP_LONG = _ida_domain.DALVIK_CMP_LONG

DALVIK_IF_EQ = _ida_domain.DALVIK_IF_EQ

DALVIK_IF_NE = _ida_domain.DALVIK_IF_NE

DALVIK_IF_LT = _ida_domain.DALVIK_IF_LT

DALVIK_IF_GE = _ida_domain.DALVIK_IF_GE

DALVIK_IF_GT = _ida_domain.DALVIK_IF_GT

DALVIK_IF_LE = _ida_domain.DALVIK_IF_LE

DALVIK_IF_EQZ = _ida_domain.DALVIK_IF_EQZ

DALVIK_IF_NEZ = _ida_domain.DALVIK_IF_NEZ

DALVIK_IF_LTZ = _ida_domain.DALVIK_IF_LTZ

DALVIK_IF_GEZ = _ida_domain.DALVIK_IF_GEZ

DALVIK_IF_GTZ = _ida_domain.DALVIK_IF_GTZ

DALVIK_IF_LEZ = _ida_domain.DALVIK_IF_LEZ

DALVIK_AGET = _ida_domain.DALVIK_AGET

DALVIK_AGET_WIDE = _ida_domain.DALVIK_AGET_WIDE

DALVIK_AGET_OBJECT = _ida_domain.DALVIK_AGET_OBJECT

DALVIK_AGET_BOOLEAN = _ida_domain.DALVIK_AGET_BOOLEAN

DALVIK_AGET_BYTE = _ida_domain.DALVIK_AGET_BYTE

DALVIK_AGET_CHAR = _ida_domain.DALVIK_AGET_CHAR

DALVIK_AGET_SHORT = _ida_domain.DALVIK_AGET_SHORT

DALVIK_APUT = _ida_domain.DALVIK_APUT

DALVIK_APUT_WIDE = _ida_domain.DALVIK_APUT_WIDE

DALVIK_APUT_OBJECT = _ida_domain.DALVIK_APUT_OBJECT

DALVIK_APUT_BOOLEAN = _ida_domain.DALVIK_APUT_BOOLEAN

DALVIK_APUT_BYTE = _ida_domain.DALVIK_APUT_BYTE

DALVIK_APUT_CHAR = _ida_domain.DALVIK_APUT_CHAR

DALVIK_APUT_SHORT = _ida_domain.DALVIK_APUT_SHORT

DALVIK_IGET = _ida_domain.DALVIK_IGET

DALVIK_IGET_WIDE = _ida_domain.DALVIK_IGET_WIDE

DALVIK_IGET_OBJECT = _ida_domain.DALVIK_IGET_OBJECT

DALVIK_IGET_BOOLEAN = _ida_domain.DALVIK_IGET_BOOLEAN

DALVIK_IGET_BYTE = _ida_domain.DALVIK_IGET_BYTE

DALVIK_IGET_CHAR = _ida_domain.DALVIK_IGET_CHAR

DALVIK_IGET_SHORT = _ida_domain.DALVIK_IGET_SHORT

DALVIK_IPUT = _ida_domain.DALVIK_IPUT

DALVIK_IPUT_WIDE = _ida_domain.DALVIK_IPUT_WIDE

DALVIK_IPUT_OBJECT = _ida_domain.DALVIK_IPUT_OBJECT

DALVIK_IPUT_BOOLEAN = _ida_domain.DALVIK_IPUT_BOOLEAN

DALVIK_IPUT_BYTE = _ida_domain.DALVIK_IPUT_BYTE

DALVIK_IPUT_CHAR = _ida_domain.DALVIK_IPUT_CHAR

DALVIK_IPUT_SHORT = _ida_domain.DALVIK_IPUT_SHORT

DALVIK_SGET = _ida_domain.DALVIK_SGET

DALVIK_SGET_WIDE = _ida_domain.DALVIK_SGET_WIDE

DALVIK_SGET_OBJECT = _ida_domain.DALVIK_SGET_OBJECT

DALVIK_SGET_BOOLEAN = _ida_domain.DALVIK_SGET_BOOLEAN

DALVIK_SGET_BYTE = _ida_domain.DALVIK_SGET_BYTE

DALVIK_SGET_CHAR = _ida_domain.DALVIK_SGET_CHAR

DALVIK_SGET_SHORT = _ida_domain.DALVIK_SGET_SHORT

DALVIK_SPUT = _ida_domain.DALVIK_SPUT

DALVIK_SPUT_WIDE = _ida_domain.DALVIK_SPUT_WIDE

DALVIK_SPUT_OBJECT = _ida_domain.DALVIK_SPUT_OBJECT

DALVIK_SPUT_BOOLEAN = _ida_domain.DALVIK_SPUT_BOOLEAN

DALVIK_SPUT_BYTE = _ida_domain.DALVIK_SPUT_BYTE

DALVIK_SPUT_CHAR = _ida_domain.DALVIK_SPUT_CHAR

DALVIK_SPUT_SHORT = _ida_domain.DALVIK_SPUT_SHORT

DALVIK_INVOKE_VIRTUAL = _ida_domain.DALVIK_INVOKE_VIRTUAL

DALVIK_INVOKE_SUPER = _ida_domain.DALVIK_INVOKE_SUPER

DALVIK_INVOKE_DIRECT = _ida_domain.DALVIK_INVOKE_DIRECT

DALVIK_INVOKE_STATIC = _ida_domain.DALVIK_INVOKE_STATIC

DALVIK_INVOKE_INTERFACE = _ida_domain.DALVIK_INVOKE_INTERFACE

DALVIK_INVOKE_VIRTUAL_RANGE = _ida_domain.DALVIK_INVOKE_VIRTUAL_RANGE

DALVIK_INVOKE_SUPER_RANGE = _ida_domain.DALVIK_INVOKE_SUPER_RANGE

DALVIK_INVOKE_DIRECT_RANGE = _ida_domain.DALVIK_INVOKE_DIRECT_RANGE

DALVIK_INVOKE_STATIC_RANGE = _ida_domain.DALVIK_INVOKE_STATIC_RANGE

DALVIK_INVOKE_INTERFACE_RANGE = _ida_domain.DALVIK_INVOKE_INTERFACE_RANGE

DALVIK_NEG_INT = _ida_domain.DALVIK_NEG_INT

DALVIK_NOT_INT = _ida_domain.DALVIK_NOT_INT

DALVIK_NEG_LONG = _ida_domain.DALVIK_NEG_LONG

DALVIK_NOT_LONG = _ida_domain.DALVIK_NOT_LONG

DALVIK_NEG_FLOAT = _ida_domain.DALVIK_NEG_FLOAT

DALVIK_NEG_DOUBLE = _ida_domain.DALVIK_NEG_DOUBLE

DALVIK_INT_TO_LONG = _ida_domain.DALVIK_INT_TO_LONG

DALVIK_INT_TO_FLOAT = _ida_domain.DALVIK_INT_TO_FLOAT

DALVIK_INT_TO_DOUBLE = _ida_domain.DALVIK_INT_TO_DOUBLE

DALVIK_LONG_TO_INT = _ida_domain.DALVIK_LONG_TO_INT

DALVIK_LONG_TO_FLOAT = _ida_domain.DALVIK_LONG_TO_FLOAT

DALVIK_LONG_TO_DOUBLE = _ida_domain.DALVIK_LONG_TO_DOUBLE

DALVIK_FLOAT_TO_INT = _ida_domain.DALVIK_FLOAT_TO_INT

DALVIK_FLOAT_TO_LONG = _ida_domain.DALVIK_FLOAT_TO_LONG

DALVIK_FLOAT_TO_DOUBLE = _ida_domain.DALVIK_FLOAT_TO_DOUBLE

DALVIK_DOUBLE_TO_INT = _ida_domain.DALVIK_DOUBLE_TO_INT

DALVIK_DOUBLE_TO_LONG = _ida_domain.DALVIK_DOUBLE_TO_LONG

DALVIK_DOUBLE_TO_FLOAT = _ida_domain.DALVIK_DOUBLE_TO_FLOAT

DALVIK_INT_TO_BYTE = _ida_domain.DALVIK_INT_TO_BYTE

DALVIK_INT_TO_CHAR = _ida_domain.DALVIK_INT_TO_CHAR

DALVIK_INT_TO_SHORT = _ida_domain.DALVIK_INT_TO_SHORT

DALVIK_ADD_INT = _ida_domain.DALVIK_ADD_INT

DALVIK_SUB_INT = _ida_domain.DALVIK_SUB_INT

DALVIK_MUL_INT = _ida_domain.DALVIK_MUL_INT

DALVIK_DIV_INT = _ida_domain.DALVIK_DIV_INT

DALVIK_REM_INT = _ida_domain.DALVIK_REM_INT

DALVIK_AND_INT = _ida_domain.DALVIK_AND_INT

DALVIK_OR_INT = _ida_domain.DALVIK_OR_INT

DALVIK_XOR_INT = _ida_domain.DALVIK_XOR_INT

DALVIK_SHL_INT = _ida_domain.DALVIK_SHL_INT

DALVIK_SHR_INT = _ida_domain.DALVIK_SHR_INT

DALVIK_USHR_INT = _ida_domain.DALVIK_USHR_INT

DALVIK_ADD_LONG = _ida_domain.DALVIK_ADD_LONG

DALVIK_SUB_LONG = _ida_domain.DALVIK_SUB_LONG

DALVIK_MUL_LONG = _ida_domain.DALVIK_MUL_LONG

DALVIK_DIV_LONG = _ida_domain.DALVIK_DIV_LONG

DALVIK_REM_LONG = _ida_domain.DALVIK_REM_LONG

DALVIK_AND_LONG = _ida_domain.DALVIK_AND_LONG

DALVIK_OR_LONG = _ida_domain.DALVIK_OR_LONG

DALVIK_XOR_LONG = _ida_domain.DALVIK_XOR_LONG

DALVIK_SHL_LONG = _ida_domain.DALVIK_SHL_LONG

DALVIK_SHR_LONG = _ida_domain.DALVIK_SHR_LONG

DALVIK_USHR_LONG = _ida_domain.DALVIK_USHR_LONG

DALVIK_ADD_FLOAT = _ida_domain.DALVIK_ADD_FLOAT

DALVIK_SUB_FLOAT = _ida_domain.DALVIK_SUB_FLOAT

DALVIK_MUL_FLOAT = _ida_domain.DALVIK_MUL_FLOAT

DALVIK_DIV_FLOAT = _ida_domain.DALVIK_DIV_FLOAT

DALVIK_REM_FLOAT = _ida_domain.DALVIK_REM_FLOAT

DALVIK_ADD_DOUBLE = _ida_domain.DALVIK_ADD_DOUBLE

DALVIK_SUB_DOUBLE = _ida_domain.DALVIK_SUB_DOUBLE

DALVIK_MUL_DOUBLE = _ida_domain.DALVIK_MUL_DOUBLE

DALVIK_DIV_DOUBLE = _ida_domain.DALVIK_DIV_DOUBLE

DALVIK_REM_DOUBLE = _ida_domain.DALVIK_REM_DOUBLE

DALVIK_ADD_INT_2ADDR = _ida_domain.DALVIK_ADD_INT_2ADDR

DALVIK_SUB_INT_2ADDR = _ida_domain.DALVIK_SUB_INT_2ADDR

DALVIK_MUL_INT_2ADDR = _ida_domain.DALVIK_MUL_INT_2ADDR

DALVIK_DIV_INT_2ADDR = _ida_domain.DALVIK_DIV_INT_2ADDR

DALVIK_REM_INT_2ADDR = _ida_domain.DALVIK_REM_INT_2ADDR

DALVIK_AND_INT_2ADDR = _ida_domain.DALVIK_AND_INT_2ADDR

DALVIK_OR_INT_2ADDR = _ida_domain.DALVIK_OR_INT_2ADDR

DALVIK_XOR_INT_2ADDR = _ida_domain.DALVIK_XOR_INT_2ADDR

DALVIK_SHL_INT_2ADDR = _ida_domain.DALVIK_SHL_INT_2ADDR

DALVIK_SHR_INT_2ADDR = _ida_domain.DALVIK_SHR_INT_2ADDR

DALVIK_USHR_INT_2ADDR = _ida_domain.DALVIK_USHR_INT_2ADDR

DALVIK_ADD_LONG_2ADDR = _ida_domain.DALVIK_ADD_LONG_2ADDR

DALVIK_SUB_LONG_2ADDR = _ida_domain.DALVIK_SUB_LONG_2ADDR

DALVIK_MUL_LONG_2ADDR = _ida_domain.DALVIK_MUL_LONG_2ADDR

DALVIK_DIV_LONG_2ADDR = _ida_domain.DALVIK_DIV_LONG_2ADDR

DALVIK_REM_LONG_2ADDR = _ida_domain.DALVIK_REM_LONG_2ADDR

DALVIK_AND_LONG_2ADDR = _ida_domain.DALVIK_AND_LONG_2ADDR

DALVIK_OR_LONG_2ADDR = _ida_domain.DALVIK_OR_LONG_2ADDR

DALVIK_XOR_LONG_2ADDR = _ida_domain.DALVIK_XOR_LONG_2ADDR

DALVIK_SHL_LONG_2ADDR = _ida_domain.DALVIK_SHL_LONG_2ADDR

DALVIK_SHR_LONG_2ADDR = _ida_domain.DALVIK_SHR_LONG_2ADDR

DALVIK_USHR_LONG_2ADDR = _ida_domain.DALVIK_USHR_LONG_2ADDR

DALVIK_ADD_FLOAT_2ADDR = _ida_domain.DALVIK_ADD_FLOAT_2ADDR

DALVIK_SUB_FLOAT_2ADDR = _ida_domain.DALVIK_SUB_FLOAT_2ADDR

DALVIK_MUL_FLOAT_2ADDR = _ida_domain.DALVIK_MUL_FLOAT_2ADDR

DALVIK_DIV_FLOAT_2ADDR = _ida_domain.DALVIK_DIV_FLOAT_2ADDR

DALVIK_REM_FLOAT_2ADDR = _ida_domain.DALVIK_REM_FLOAT_2ADDR

DALVIK_ADD_DOUBLE_2ADDR = _ida_domain.DALVIK_ADD_DOUBLE_2ADDR

DALVIK_SUB_DOUBLE_2ADDR = _ida_domain.DALVIK_SUB_DOUBLE_2ADDR

DALVIK_MUL_DOUBLE_2ADDR = _ida_domain.DALVIK_MUL_DOUBLE_2ADDR

DALVIK_DIV_DOUBLE_2ADDR = _ida_domain.DALVIK_DIV_DOUBLE_2ADDR

DALVIK_REM_DOUBLE_2ADDR = _ida_domain.DALVIK_REM_DOUBLE_2ADDR

DALVIK_ADD_INT_LIT16 = _ida_domain.DALVIK_ADD_INT_LIT16

DALVIK_RSUB_INT = _ida_domain.DALVIK_RSUB_INT

DALVIK_MUL_INT_LIT16 = _ida_domain.DALVIK_MUL_INT_LIT16

DALVIK_DIV_INT_LIT16 = _ida_domain.DALVIK_DIV_INT_LIT16

DALVIK_REM_INT_LIT16 = _ida_domain.DALVIK_REM_INT_LIT16

DALVIK_AND_INT_LIT16 = _ida_domain.DALVIK_AND_INT_LIT16

DALVIK_OR_INT_LIT16 = _ida_domain.DALVIK_OR_INT_LIT16

DALVIK_XOR_INT_LIT16 = _ida_domain.DALVIK_XOR_INT_LIT16

DALVIK_ADD_INT_LIT8 = _ida_domain.DALVIK_ADD_INT_LIT8

DALVIK_RSUB_INT_LIT8 = _ida_domain.DALVIK_RSUB_INT_LIT8

DALVIK_MUL_INT_LIT8 = _ida_domain.DALVIK_MUL_INT_LIT8

DALVIK_DIV_INT_LIT8 = _ida_domain.DALVIK_DIV_INT_LIT8

DALVIK_REM_INT_LIT8 = _ida_domain.DALVIK_REM_INT_LIT8

DALVIK_AND_INT_LIT8 = _ida_domain.DALVIK_AND_INT_LIT8

DALVIK_OR_INT_LIT8 = _ida_domain.DALVIK_OR_INT_LIT8

DALVIK_XOR_INT_LIT8 = _ida_domain.DALVIK_XOR_INT_LIT8

DALVIK_SHL_INT_LIT8 = _ida_domain.DALVIK_SHL_INT_LIT8

DALVIK_SHR_INT_LIT8 = _ida_domain.DALVIK_SHR_INT_LIT8

DALVIK_USHR_INT_LIT8 = _ida_domain.DALVIK_USHR_INT_LIT8

DALVIK_IGET_VOLATILE = _ida_domain.DALVIK_IGET_VOLATILE

DALVIK_IPUT_VOLATILE = _ida_domain.DALVIK_IPUT_VOLATILE

DALVIK_SGET_VOLATILE = _ida_domain.DALVIK_SGET_VOLATILE

DALVIK_SPUT_VOLATILE = _ida_domain.DALVIK_SPUT_VOLATILE

DALVIK_IGET_OBJECT_VOLATILE = _ida_domain.DALVIK_IGET_OBJECT_VOLATILE

DALVIK_IGET_WIDE_VOLATILE = _ida_domain.DALVIK_IGET_WIDE_VOLATILE

DALVIK_IPUT_WIDE_VOLATILE = _ida_domain.DALVIK_IPUT_WIDE_VOLATILE

DALVIK_SGET_WIDE_VOLATILE = _ida_domain.DALVIK_SGET_WIDE_VOLATILE

DALVIK_SPUT_WIDE_VOLATILE = _ida_domain.DALVIK_SPUT_WIDE_VOLATILE

DALVIK_BREAKPOINT = _ida_domain.DALVIK_BREAKPOINT

DALVIK_THROW_VERIFICATION_ERROR = _ida_domain.DALVIK_THROW_VERIFICATION_ERROR

DALVIK_EXECUTE_INLINE = _ida_domain.DALVIK_EXECUTE_INLINE

DALVIK_EXECUTE_INLINE_RANGE = _ida_domain.DALVIK_EXECUTE_INLINE_RANGE

DALVIK_INVOKE_DIRECT_EMPTY = _ida_domain.DALVIK_INVOKE_DIRECT_EMPTY

DALVIK_RETURN_VOID_BARRIER = _ida_domain.DALVIK_RETURN_VOID_BARRIER

DALVIK_IGET_QUICK = _ida_domain.DALVIK_IGET_QUICK

DALVIK_IGET_WIDE_QUICK = _ida_domain.DALVIK_IGET_WIDE_QUICK

DALVIK_IGET_OBJECT_QUICK = _ida_domain.DALVIK_IGET_OBJECT_QUICK

DALVIK_IPUT_QUICK = _ida_domain.DALVIK_IPUT_QUICK

DALVIK_IPUT_WIDE_QUICK = _ida_domain.DALVIK_IPUT_WIDE_QUICK

DALVIK_IPUT_OBJECT_QUICK = _ida_domain.DALVIK_IPUT_OBJECT_QUICK

DALVIK_INVOKE_VIRTUAL_QUICK = _ida_domain.DALVIK_INVOKE_VIRTUAL_QUICK

DALVIK_INVOKE_VIRTUAL_QUICK_RANGE = _ida_domain.DALVIK_INVOKE_VIRTUAL_QUICK_RANGE

DALVIK_INVOKE_SUPER_QUICK = _ida_domain.DALVIK_INVOKE_SUPER_QUICK

DALVIK_INVOKE_SUPER_QUICK_RANGE = _ida_domain.DALVIK_INVOKE_SUPER_QUICK_RANGE

DALVIK_IPUT_OBJECT_VOLATILE = _ida_domain.DALVIK_IPUT_OBJECT_VOLATILE

DALVIK_SGET_OBJECT_VOLATILE = _ida_domain.DALVIK_SGET_OBJECT_VOLATILE

DALVIK_SPUT_OBJECT_VOLATILE = _ida_domain.DALVIK_SPUT_OBJECT_VOLATILE

DALVIK_INVOKE_POLYMORPHIC = _ida_domain.DALVIK_INVOKE_POLYMORPHIC

DALVIK_INVOKE_POLYMORPHIC_RANGE = _ida_domain.DALVIK_INVOKE_POLYMORPHIC_RANGE

DALVIK_INVOKE_CUSTOM = _ida_domain.DALVIK_INVOKE_CUSTOM

DALVIK_INVOKE_CUSTOM_RANGE = _ida_domain.DALVIK_INVOKE_CUSTOM_RANGE

DALVIK_CONST_METHOD_HANDLE = _ida_domain.DALVIK_CONST_METHOD_HANDLE

DALVIK_CONST_METHOD_TYPE = _ida_domain.DALVIK_CONST_METHOD_TYPE

DALVIK_LAST = _ida_domain.DALVIK_LAST

s39_null = _ida_domain.s39_null

s39_a = _ida_domain.s39_a

s39_ad = _ida_domain.s39_ad

s39_adb = _ida_domain.s39_adb

s39_adbr = _ida_domain.s39_adbr

s39_adr = _ida_domain.s39_adr

s39_adtr = _ida_domain.s39_adtr

s39_adtra = _ida_domain.s39_adtra

s39_ae = _ida_domain.s39_ae

s39_aeb = _ida_domain.s39_aeb

s39_aebr = _ida_domain.s39_aebr

s39_aer = _ida_domain.s39_aer

s39_afi = _ida_domain.s39_afi

s39_ag = _ida_domain.s39_ag

s39_agf = _ida_domain.s39_agf

s39_agfi = _ida_domain.s39_agfi

s39_agfr = _ida_domain.s39_agfr

s39_agh = _ida_domain.s39_agh

s39_aghi = _ida_domain.s39_aghi

s39_aghik = _ida_domain.s39_aghik

s39_agr = _ida_domain.s39_agr

s39_agrk = _ida_domain.s39_agrk

s39_agsi = _ida_domain.s39_agsi

s39_ah = _ida_domain.s39_ah

s39_ahhhr = _ida_domain.s39_ahhhr

s39_ahhlr = _ida_domain.s39_ahhlr

s39_ahi = _ida_domain.s39_ahi

s39_ahik = _ida_domain.s39_ahik

s39_ahy = _ida_domain.s39_ahy

s39_aih = _ida_domain.s39_aih

s39_al = _ida_domain.s39_al

s39_alc = _ida_domain.s39_alc

s39_alcg = _ida_domain.s39_alcg

s39_alcgr = _ida_domain.s39_alcgr

s39_alcr = _ida_domain.s39_alcr

s39_alfi = _ida_domain.s39_alfi

s39_alg = _ida_domain.s39_alg

s39_algf = _ida_domain.s39_algf

s39_algfi = _ida_domain.s39_algfi

s39_algfr = _ida_domain.s39_algfr

s39_alghsik = _ida_domain.s39_alghsik

s39_algr = _ida_domain.s39_algr

s39_algrk = _ida_domain.s39_algrk

s39_algsi = _ida_domain.s39_algsi

s39_alhhhr = _ida_domain.s39_alhhhr

s39_alhhlr = _ida_domain.s39_alhhlr

s39_alhsik = _ida_domain.s39_alhsik

s39_alr = _ida_domain.s39_alr

s39_alrk = _ida_domain.s39_alrk

s39_alsi = _ida_domain.s39_alsi

s39_alsih = _ida_domain.s39_alsih

s39_alsihn = _ida_domain.s39_alsihn

s39_aly = _ida_domain.s39_aly

s39_ap = _ida_domain.s39_ap

s39_ar = _ida_domain.s39_ar

s39_ark = _ida_domain.s39_ark

s39_asi = _ida_domain.s39_asi

s39_au = _ida_domain.s39_au

s39_aur = _ida_domain.s39_aur

s39_aw = _ida_domain.s39_aw

s39_awr = _ida_domain.s39_awr

s39_axbr = _ida_domain.s39_axbr

s39_axr = _ida_domain.s39_axr

s39_axtr = _ida_domain.s39_axtr

s39_axtra = _ida_domain.s39_axtra

s39_ay = _ida_domain.s39_ay

s39_b = _ida_domain.s39_b

s39_bo = _ida_domain.s39_bo

s39_bh = _ida_domain.s39_bh

s39_bnle = _ida_domain.s39_bnle

s39_bl = _ida_domain.s39_bl

s39_bnhe = _ida_domain.s39_bnhe

s39_blh = _ida_domain.s39_blh

s39_bne = _ida_domain.s39_bne

s39_be = _ida_domain.s39_be

s39_bnlh = _ida_domain.s39_bnlh

s39_bhe = _ida_domain.s39_bhe

s39_bnl = _ida_domain.s39_bnl

s39_ble = _ida_domain.s39_ble

s39_bnh = _ida_domain.s39_bnh

s39_bno = _ida_domain.s39_bno

s39_bor = _ida_domain.s39_bor

s39_bhr = _ida_domain.s39_bhr

s39_bnler = _ida_domain.s39_bnler

s39_blr = _ida_domain.s39_blr

s39_bnher = _ida_domain.s39_bnher

s39_blhr = _ida_domain.s39_blhr

s39_bner = _ida_domain.s39_bner

s39_ber = _ida_domain.s39_ber

s39_bnlhr = _ida_domain.s39_bnlhr

s39_bher = _ida_domain.s39_bher

s39_bnlr = _ida_domain.s39_bnlr

s39_bler = _ida_domain.s39_bler

s39_bnhr = _ida_domain.s39_bnhr

s39_bnor = _ida_domain.s39_bnor

s39_bakr = _ida_domain.s39_bakr

s39_bal = _ida_domain.s39_bal

s39_balr = _ida_domain.s39_balr

s39_bas = _ida_domain.s39_bas

s39_basr = _ida_domain.s39_basr

s39_bassm = _ida_domain.s39_bassm

s39_bc = _ida_domain.s39_bc

s39_bcr = _ida_domain.s39_bcr

s39_bct = _ida_domain.s39_bct

s39_bctg = _ida_domain.s39_bctg

s39_bctgr = _ida_domain.s39_bctgr

s39_bctr = _ida_domain.s39_bctr

s39_bi = _ida_domain.s39_bi

s39_bio = _ida_domain.s39_bio

s39_bih = _ida_domain.s39_bih

s39_binle = _ida_domain.s39_binle

s39_bil = _ida_domain.s39_bil

s39_binhe = _ida_domain.s39_binhe

s39_bilh = _ida_domain.s39_bilh

s39_bine = _ida_domain.s39_bine

s39_bie = _ida_domain.s39_bie

s39_binlh = _ida_domain.s39_binlh

s39_bihe = _ida_domain.s39_bihe

s39_binl = _ida_domain.s39_binl

s39_bile = _ida_domain.s39_bile

s39_binh = _ida_domain.s39_binh

s39_bino = _ida_domain.s39_bino

s39_bic = _ida_domain.s39_bic

s39_bpp = _ida_domain.s39_bpp

s39_bprp = _ida_domain.s39_bprp

s39_br = _ida_domain.s39_br

s39_bras = _ida_domain.s39_bras

s39_brasl = _ida_domain.s39_brasl

s39_brc = _ida_domain.s39_brc

s39_brcl = _ida_domain.s39_brcl

s39_brct = _ida_domain.s39_brct

s39_brctg = _ida_domain.s39_brctg

s39_brcth = _ida_domain.s39_brcth

s39_brxh = _ida_domain.s39_brxh

s39_brxhg = _ida_domain.s39_brxhg

s39_brxle = _ida_domain.s39_brxle

s39_brxlg = _ida_domain.s39_brxlg

s39_bsa = _ida_domain.s39_bsa

s39_bsg = _ida_domain.s39_bsg

s39_bsm = _ida_domain.s39_bsm

s39_bxh = _ida_domain.s39_bxh

s39_bxhg = _ida_domain.s39_bxhg

s39_bxle = _ida_domain.s39_bxle

s39_bxleg = _ida_domain.s39_bxleg

s39_c = _ida_domain.s39_c

s39_cd = _ida_domain.s39_cd

s39_cdb = _ida_domain.s39_cdb

s39_cdbr = _ida_domain.s39_cdbr

s39_cdfbr = _ida_domain.s39_cdfbr

s39_cdfbra = _ida_domain.s39_cdfbra

s39_cdfr = _ida_domain.s39_cdfr

s39_cdftr = _ida_domain.s39_cdftr

s39_cdgbr = _ida_domain.s39_cdgbr

s39_cdgbra = _ida_domain.s39_cdgbra

s39_cdgr = _ida_domain.s39_cdgr

s39_cdgtr = _ida_domain.s39_cdgtr

s39_cdgtra = _ida_domain.s39_cdgtra

s39_cdlfbr = _ida_domain.s39_cdlfbr

s39_cdlftr = _ida_domain.s39_cdlftr

s39_cdlgbr = _ida_domain.s39_cdlgbr

s39_cdlgtr = _ida_domain.s39_cdlgtr

s39_cdpt = _ida_domain.s39_cdpt

s39_cdr = _ida_domain.s39_cdr

s39_cds = _ida_domain.s39_cds

s39_cdsg = _ida_domain.s39_cdsg

s39_cdstr = _ida_domain.s39_cdstr

s39_cdsy = _ida_domain.s39_cdsy

s39_cdtr = _ida_domain.s39_cdtr

s39_cdutr = _ida_domain.s39_cdutr

s39_cdzt = _ida_domain.s39_cdzt

s39_ce = _ida_domain.s39_ce

s39_ceb = _ida_domain.s39_ceb

s39_cebr = _ida_domain.s39_cebr

s39_cedtr = _ida_domain.s39_cedtr

s39_cefbr = _ida_domain.s39_cefbr

s39_cefbra = _ida_domain.s39_cefbra

s39_cefr = _ida_domain.s39_cefr

s39_cegbr = _ida_domain.s39_cegbr

s39_cegbra = _ida_domain.s39_cegbra

s39_cegr = _ida_domain.s39_cegr

s39_celfbr = _ida_domain.s39_celfbr

s39_celgbr = _ida_domain.s39_celgbr

s39_cer = _ida_domain.s39_cer

s39_cextr = _ida_domain.s39_cextr

s39_cfc = _ida_domain.s39_cfc

s39_cfdbr = _ida_domain.s39_cfdbr

s39_cfdbra = _ida_domain.s39_cfdbra

s39_cfdr = _ida_domain.s39_cfdr

s39_cfdtr = _ida_domain.s39_cfdtr

s39_cfebr = _ida_domain.s39_cfebr

s39_cfebra = _ida_domain.s39_cfebra

s39_cfer = _ida_domain.s39_cfer

s39_cfi = _ida_domain.s39_cfi

s39_cfxbr = _ida_domain.s39_cfxbr

s39_cfxbra = _ida_domain.s39_cfxbra

s39_cfxr = _ida_domain.s39_cfxr

s39_cfxtr = _ida_domain.s39_cfxtr

s39_cg = _ida_domain.s39_cg

s39_cgdbr = _ida_domain.s39_cgdbr

s39_cgdbra = _ida_domain.s39_cgdbra

s39_cgdr = _ida_domain.s39_cgdr

s39_cgdtr = _ida_domain.s39_cgdtr

s39_cgdtra = _ida_domain.s39_cgdtra

s39_cgebr = _ida_domain.s39_cgebr

s39_cgebra = _ida_domain.s39_cgebra

s39_cger = _ida_domain.s39_cger

s39_cgf = _ida_domain.s39_cgf

s39_cgfi = _ida_domain.s39_cgfi

s39_cgfr = _ida_domain.s39_cgfr

s39_cgfrl = _ida_domain.s39_cgfrl

s39_cgh = _ida_domain.s39_cgh

s39_cghi = _ida_domain.s39_cghi

s39_cghrl = _ida_domain.s39_cghrl

s39_cghsi = _ida_domain.s39_cghsi

s39_cgib = _ida_domain.s39_cgib

s39_cgibh = _ida_domain.s39_cgibh

s39_cgibnhe = _ida_domain.s39_cgibnhe

s39_cgiblh = _ida_domain.s39_cgiblh

s39_cgibnlh = _ida_domain.s39_cgibnlh

s39_cgibnl = _ida_domain.s39_cgibnl

s39_cgible = _ida_domain.s39_cgible

s39_cgij = _ida_domain.s39_cgij

s39_cgijh = _ida_domain.s39_cgijh

s39_cgijnhe = _ida_domain.s39_cgijnhe

s39_cgijlh = _ida_domain.s39_cgijlh

s39_cgijnlh = _ida_domain.s39_cgijnlh

s39_cgijnl = _ida_domain.s39_cgijnl

s39_cgijle = _ida_domain.s39_cgijle

s39_cgit = _ida_domain.s39_cgit

s39_cgith = _ida_domain.s39_cgith

s39_cgitnhe = _ida_domain.s39_cgitnhe

s39_cgitlh = _ida_domain.s39_cgitlh

s39_cgitnlh = _ida_domain.s39_cgitnlh

s39_cgitnl = _ida_domain.s39_cgitnl

s39_cgitle = _ida_domain.s39_cgitle

s39_cgr = _ida_domain.s39_cgr

s39_cgrb = _ida_domain.s39_cgrb

s39_cgrbh = _ida_domain.s39_cgrbh

s39_cgrbnhe = _ida_domain.s39_cgrbnhe

s39_cgrblh = _ida_domain.s39_cgrblh

s39_cgrbnlh = _ida_domain.s39_cgrbnlh

s39_cgrbnl = _ida_domain.s39_cgrbnl

s39_cgrble = _ida_domain.s39_cgrble

s39_cgrj = _ida_domain.s39_cgrj

s39_cgrjh = _ida_domain.s39_cgrjh

s39_cgrjnhe = _ida_domain.s39_cgrjnhe

s39_cgrjlh = _ida_domain.s39_cgrjlh

s39_cgrjnlh = _ida_domain.s39_cgrjnlh

s39_cgrjnl = _ida_domain.s39_cgrjnl

s39_cgrjle = _ida_domain.s39_cgrjle

s39_cgrl = _ida_domain.s39_cgrl

s39_cgrt = _ida_domain.s39_cgrt

s39_cgrth = _ida_domain.s39_cgrth

s39_cgrtnhe = _ida_domain.s39_cgrtnhe

s39_cgrtlh = _ida_domain.s39_cgrtlh

s39_cgrtnlh = _ida_domain.s39_cgrtnlh

s39_cgrtnl = _ida_domain.s39_cgrtnl

s39_cgrtle = _ida_domain.s39_cgrtle

s39_cgxbr = _ida_domain.s39_cgxbr

s39_cgxbra = _ida_domain.s39_cgxbra

s39_cgxr = _ida_domain.s39_cgxr

s39_cgxtr = _ida_domain.s39_cgxtr

s39_cgxtra = _ida_domain.s39_cgxtra

s39_ch = _ida_domain.s39_ch

s39_chf = _ida_domain.s39_chf

s39_chhr = _ida_domain.s39_chhr

s39_chhsi = _ida_domain.s39_chhsi

s39_chi = _ida_domain.s39_chi

s39_chlr = _ida_domain.s39_chlr

s39_chrl = _ida_domain.s39_chrl

s39_chsi = _ida_domain.s39_chsi

s39_chy = _ida_domain.s39_chy

s39_cib = _ida_domain.s39_cib

s39_cibh = _ida_domain.s39_cibh

s39_cibnhe = _ida_domain.s39_cibnhe

s39_ciblh = _ida_domain.s39_ciblh

s39_cibnlh = _ida_domain.s39_cibnlh

s39_cibnl = _ida_domain.s39_cibnl

s39_cible = _ida_domain.s39_cible

s39_cih = _ida_domain.s39_cih

s39_cij = _ida_domain.s39_cij

s39_cijh = _ida_domain.s39_cijh

s39_cijnhe = _ida_domain.s39_cijnhe

s39_cijlh = _ida_domain.s39_cijlh

s39_cijnlh = _ida_domain.s39_cijnlh

s39_cijnl = _ida_domain.s39_cijnl

s39_cijle = _ida_domain.s39_cijle

s39_cit = _ida_domain.s39_cit

s39_cith = _ida_domain.s39_cith

s39_citnhe = _ida_domain.s39_citnhe

s39_citlh = _ida_domain.s39_citlh

s39_citnlh = _ida_domain.s39_citnlh

s39_citnl = _ida_domain.s39_citnl

s39_citle = _ida_domain.s39_citle

s39_cksm = _ida_domain.s39_cksm

s39_cl = _ida_domain.s39_cl

s39_clc = _ida_domain.s39_clc

s39_clcl = _ida_domain.s39_clcl

s39_clcle = _ida_domain.s39_clcle

s39_clclu = _ida_domain.s39_clclu

s39_clfdbr = _ida_domain.s39_clfdbr

s39_clfdtr = _ida_domain.s39_clfdtr

s39_clfebr = _ida_domain.s39_clfebr

s39_clfhsi = _ida_domain.s39_clfhsi

s39_clfi = _ida_domain.s39_clfi

s39_clfit = _ida_domain.s39_clfit

s39_clfith = _ida_domain.s39_clfith

s39_clfitnhe = _ida_domain.s39_clfitnhe

s39_clfitlh = _ida_domain.s39_clfitlh

s39_clfitnlh = _ida_domain.s39_clfitnlh

s39_clfitnl = _ida_domain.s39_clfitnl

s39_clfitle = _ida_domain.s39_clfitle

s39_clfxbr = _ida_domain.s39_clfxbr

s39_clfxtr = _ida_domain.s39_clfxtr

s39_clg = _ida_domain.s39_clg

s39_clgdbr = _ida_domain.s39_clgdbr

s39_clgdtr = _ida_domain.s39_clgdtr

s39_clgebr = _ida_domain.s39_clgebr

s39_clgf = _ida_domain.s39_clgf

s39_clgfi = _ida_domain.s39_clgfi

s39_clgfr = _ida_domain.s39_clgfr

s39_clgfrl = _ida_domain.s39_clgfrl

s39_clghrl = _ida_domain.s39_clghrl

s39_clghsi = _ida_domain.s39_clghsi

s39_clgib = _ida_domain.s39_clgib

s39_clgibh = _ida_domain.s39_clgibh

s39_clgibnhe = _ida_domain.s39_clgibnhe

s39_clgiblh = _ida_domain.s39_clgiblh

s39_clgibnlh = _ida_domain.s39_clgibnlh

s39_clgibnl = _ida_domain.s39_clgibnl

s39_clgible = _ida_domain.s39_clgible

s39_clgij = _ida_domain.s39_clgij

s39_clgijh = _ida_domain.s39_clgijh

s39_clgijnhe = _ida_domain.s39_clgijnhe

s39_clgijlh = _ida_domain.s39_clgijlh

s39_clgijnlh = _ida_domain.s39_clgijnlh

s39_clgijnl = _ida_domain.s39_clgijnl

s39_clgijle = _ida_domain.s39_clgijle

s39_clgit = _ida_domain.s39_clgit

s39_clgith = _ida_domain.s39_clgith

s39_clgitnhe = _ida_domain.s39_clgitnhe

s39_clgitlh = _ida_domain.s39_clgitlh

s39_clgitnlh = _ida_domain.s39_clgitnlh

s39_clgitnl = _ida_domain.s39_clgitnl

s39_clgitle = _ida_domain.s39_clgitle

s39_clgr = _ida_domain.s39_clgr

s39_clgrb = _ida_domain.s39_clgrb

s39_clgrbh = _ida_domain.s39_clgrbh

s39_clgrbnhe = _ida_domain.s39_clgrbnhe

s39_clgrblh = _ida_domain.s39_clgrblh

s39_clgrbnlh = _ida_domain.s39_clgrbnlh

s39_clgrbnl = _ida_domain.s39_clgrbnl

s39_clgrble = _ida_domain.s39_clgrble

s39_clgrj = _ida_domain.s39_clgrj

s39_clgrjh = _ida_domain.s39_clgrjh

s39_clgrjnhe = _ida_domain.s39_clgrjnhe

s39_clgrjlh = _ida_domain.s39_clgrjlh

s39_clgrjnlh = _ida_domain.s39_clgrjnlh

s39_clgrjnl = _ida_domain.s39_clgrjnl

s39_clgrjle = _ida_domain.s39_clgrjle

s39_clgrl = _ida_domain.s39_clgrl

s39_clgrt = _ida_domain.s39_clgrt

s39_clgrth = _ida_domain.s39_clgrth

s39_clgrtnhe = _ida_domain.s39_clgrtnhe

s39_clgrtlh = _ida_domain.s39_clgrtlh

s39_clgrtnlh = _ida_domain.s39_clgrtnlh

s39_clgrtnl = _ida_domain.s39_clgrtnl

s39_clgrtle = _ida_domain.s39_clgrtle

s39_clgt = _ida_domain.s39_clgt

s39_clgth = _ida_domain.s39_clgth

s39_clgtnhe = _ida_domain.s39_clgtnhe

s39_clgtlh = _ida_domain.s39_clgtlh

s39_clgtnlh = _ida_domain.s39_clgtnlh

s39_clgtnl = _ida_domain.s39_clgtnl

s39_clgtle = _ida_domain.s39_clgtle

s39_clgxbr = _ida_domain.s39_clgxbr

s39_clgxtr = _ida_domain.s39_clgxtr

s39_clhf = _ida_domain.s39_clhf

s39_clhhr = _ida_domain.s39_clhhr

s39_clhhsi = _ida_domain.s39_clhhsi

s39_clhlr = _ida_domain.s39_clhlr

s39_clhrl = _ida_domain.s39_clhrl

s39_cli = _ida_domain.s39_cli

s39_clib = _ida_domain.s39_clib

s39_clibh = _ida_domain.s39_clibh

s39_clibnhe = _ida_domain.s39_clibnhe

s39_cliblh = _ida_domain.s39_cliblh

s39_clibnlh = _ida_domain.s39_clibnlh

s39_clibnl = _ida_domain.s39_clibnl

s39_clible = _ida_domain.s39_clible

s39_clih = _ida_domain.s39_clih

s39_clij = _ida_domain.s39_clij

s39_clijh = _ida_domain.s39_clijh

s39_clijnhe = _ida_domain.s39_clijnhe

s39_clijlh = _ida_domain.s39_clijlh

s39_clijnlh = _ida_domain.s39_clijnlh

s39_clijnl = _ida_domain.s39_clijnl

s39_clijle = _ida_domain.s39_clijle

s39_cliy = _ida_domain.s39_cliy

s39_clm = _ida_domain.s39_clm

s39_clmh = _ida_domain.s39_clmh

s39_clmy = _ida_domain.s39_clmy

s39_clr = _ida_domain.s39_clr

s39_clrb = _ida_domain.s39_clrb

s39_clrbh = _ida_domain.s39_clrbh

s39_clrbnhe = _ida_domain.s39_clrbnhe

s39_clrblh = _ida_domain.s39_clrblh

s39_clrbnlh = _ida_domain.s39_clrbnlh

s39_clrbnl = _ida_domain.s39_clrbnl

s39_clrble = _ida_domain.s39_clrble

s39_clrj = _ida_domain.s39_clrj

s39_clrjh = _ida_domain.s39_clrjh

s39_clrjnhe = _ida_domain.s39_clrjnhe

s39_clrjlh = _ida_domain.s39_clrjlh

s39_clrjnlh = _ida_domain.s39_clrjnlh

s39_clrjnl = _ida_domain.s39_clrjnl

s39_clrjle = _ida_domain.s39_clrjle

s39_clrl = _ida_domain.s39_clrl

s39_clrt = _ida_domain.s39_clrt

s39_clrth = _ida_domain.s39_clrth

s39_clrtnhe = _ida_domain.s39_clrtnhe

s39_clrtlh = _ida_domain.s39_clrtlh

s39_clrtnlh = _ida_domain.s39_clrtnlh

s39_clrtnl = _ida_domain.s39_clrtnl

s39_clrtle = _ida_domain.s39_clrtle

s39_clst = _ida_domain.s39_clst

s39_clt = _ida_domain.s39_clt

s39_clth = _ida_domain.s39_clth

s39_cltnhe = _ida_domain.s39_cltnhe

s39_cltlh = _ida_domain.s39_cltlh

s39_cltnlh = _ida_domain.s39_cltnlh

s39_cltnl = _ida_domain.s39_cltnl

s39_cltle = _ida_domain.s39_cltle

s39_cly = _ida_domain.s39_cly

s39_cmpsc = _ida_domain.s39_cmpsc

s39_cp = _ida_domain.s39_cp

s39_cpdt = _ida_domain.s39_cpdt

s39_cpsdr = _ida_domain.s39_cpsdr

s39_cpxt = _ida_domain.s39_cpxt

s39_cpya = _ida_domain.s39_cpya

s39_cr = _ida_domain.s39_cr

s39_crb = _ida_domain.s39_crb

s39_crbh = _ida_domain.s39_crbh

s39_crbnhe = _ida_domain.s39_crbnhe

s39_crblh = _ida_domain.s39_crblh

s39_crbnlh = _ida_domain.s39_crbnlh

s39_crbnl = _ida_domain.s39_crbnl

s39_crble = _ida_domain.s39_crble

s39_crdte = _ida_domain.s39_crdte

s39_crj = _ida_domain.s39_crj

s39_crjh = _ida_domain.s39_crjh

s39_crjnhe = _ida_domain.s39_crjnhe

s39_crjlh = _ida_domain.s39_crjlh

s39_crjnlh = _ida_domain.s39_crjnlh

s39_crjnl = _ida_domain.s39_crjnl

s39_crjle = _ida_domain.s39_crjle

s39_crl = _ida_domain.s39_crl

s39_crt = _ida_domain.s39_crt

s39_crth = _ida_domain.s39_crth

s39_crtnhe = _ida_domain.s39_crtnhe

s39_crtlh = _ida_domain.s39_crtlh

s39_crtnlh = _ida_domain.s39_crtnlh

s39_crtnl = _ida_domain.s39_crtnl

s39_crtle = _ida_domain.s39_crtle

s39_cs = _ida_domain.s39_cs

s39_csch = _ida_domain.s39_csch

s39_csdtr = _ida_domain.s39_csdtr

s39_csg = _ida_domain.s39_csg

s39_csp = _ida_domain.s39_csp

s39_cspg = _ida_domain.s39_cspg

s39_csst = _ida_domain.s39_csst

s39_csxtr = _ida_domain.s39_csxtr

s39_csy = _ida_domain.s39_csy

s39_cu12 = _ida_domain.s39_cu12

s39_cu14 = _ida_domain.s39_cu14

s39_cu21 = _ida_domain.s39_cu21

s39_cu24 = _ida_domain.s39_cu24

s39_cu41 = _ida_domain.s39_cu41

s39_cu42 = _ida_domain.s39_cu42

s39_cudtr = _ida_domain.s39_cudtr

s39_cuse = _ida_domain.s39_cuse

s39_cutfu = _ida_domain.s39_cutfu

s39_cuutf = _ida_domain.s39_cuutf

s39_cuxtr = _ida_domain.s39_cuxtr

s39_cvb = _ida_domain.s39_cvb

s39_cvbg = _ida_domain.s39_cvbg

s39_cvby = _ida_domain.s39_cvby

s39_cvd = _ida_domain.s39_cvd

s39_cvdg = _ida_domain.s39_cvdg

s39_cvdy = _ida_domain.s39_cvdy

s39_cxbr = _ida_domain.s39_cxbr

s39_cxfbr = _ida_domain.s39_cxfbr

s39_cxfbra = _ida_domain.s39_cxfbra

s39_cxfr = _ida_domain.s39_cxfr

s39_cxftr = _ida_domain.s39_cxftr

s39_cxgbr = _ida_domain.s39_cxgbr

s39_cxgbra = _ida_domain.s39_cxgbra

s39_cxgr = _ida_domain.s39_cxgr

s39_cxgtr = _ida_domain.s39_cxgtr

s39_cxgtra = _ida_domain.s39_cxgtra

s39_cxlfbr = _ida_domain.s39_cxlfbr

s39_cxlftr = _ida_domain.s39_cxlftr

s39_cxlgbr = _ida_domain.s39_cxlgbr

s39_cxlgtr = _ida_domain.s39_cxlgtr

s39_cxpt = _ida_domain.s39_cxpt

s39_cxr = _ida_domain.s39_cxr

s39_cxstr = _ida_domain.s39_cxstr

s39_cxtr = _ida_domain.s39_cxtr

s39_cxutr = _ida_domain.s39_cxutr

s39_cxzt = _ida_domain.s39_cxzt

s39_cy = _ida_domain.s39_cy

s39_czdt = _ida_domain.s39_czdt

s39_czxt = _ida_domain.s39_czxt

s39_d = _ida_domain.s39_d

s39_dd = _ida_domain.s39_dd

s39_ddb = _ida_domain.s39_ddb

s39_ddbr = _ida_domain.s39_ddbr

s39_ddr = _ida_domain.s39_ddr

s39_ddtr = _ida_domain.s39_ddtr

s39_ddtra = _ida_domain.s39_ddtra

s39_de = _ida_domain.s39_de

s39_deb = _ida_domain.s39_deb

s39_debr = _ida_domain.s39_debr

s39_der = _ida_domain.s39_der

s39_dfltcc = _ida_domain.s39_dfltcc

s39_diag = _ida_domain.s39_diag

s39_didbr = _ida_domain.s39_didbr

s39_diebr = _ida_domain.s39_diebr

s39_dl = _ida_domain.s39_dl

s39_dlg = _ida_domain.s39_dlg

s39_dlgr = _ida_domain.s39_dlgr

s39_dlr = _ida_domain.s39_dlr

s39_dp = _ida_domain.s39_dp

s39_dr = _ida_domain.s39_dr

s39_dsg = _ida_domain.s39_dsg

s39_dsgf = _ida_domain.s39_dsgf

s39_dsgfr = _ida_domain.s39_dsgfr

s39_dsgr = _ida_domain.s39_dsgr

s39_dxbr = _ida_domain.s39_dxbr

s39_dxr = _ida_domain.s39_dxr

s39_dxtr = _ida_domain.s39_dxtr

s39_dxtra = _ida_domain.s39_dxtra

s39_ear = _ida_domain.s39_ear

s39_ecag = _ida_domain.s39_ecag

s39_ecctr = _ida_domain.s39_ecctr

s39_ecpga = _ida_domain.s39_ecpga

s39_ectg = _ida_domain.s39_ectg

s39_ed = _ida_domain.s39_ed

s39_edmk = _ida_domain.s39_edmk

s39_eedtr = _ida_domain.s39_eedtr

s39_eextr = _ida_domain.s39_eextr

s39_efpc = _ida_domain.s39_efpc

s39_epair = _ida_domain.s39_epair

s39_epar = _ida_domain.s39_epar

s39_epctr = _ida_domain.s39_epctr

s39_epsw = _ida_domain.s39_epsw

s39_ereg = _ida_domain.s39_ereg

s39_eregg = _ida_domain.s39_eregg

s39_esair = _ida_domain.s39_esair

s39_esar = _ida_domain.s39_esar

s39_esdtr = _ida_domain.s39_esdtr

s39_esea = _ida_domain.s39_esea

s39_esta = _ida_domain.s39_esta

s39_esxtr = _ida_domain.s39_esxtr

s39_etnd = _ida_domain.s39_etnd

s39_ex = _ida_domain.s39_ex

s39_exrl = _ida_domain.s39_exrl

s39_fidbr = _ida_domain.s39_fidbr

s39_fidbra = _ida_domain.s39_fidbra

s39_fidr = _ida_domain.s39_fidr

s39_fidtr = _ida_domain.s39_fidtr

s39_fiebr = _ida_domain.s39_fiebr

s39_fiebra = _ida_domain.s39_fiebra

s39_fier = _ida_domain.s39_fier

s39_fixbr = _ida_domain.s39_fixbr

s39_fixbra = _ida_domain.s39_fixbra

s39_fixr = _ida_domain.s39_fixr

s39_fixtr = _ida_domain.s39_fixtr

s39_flogr = _ida_domain.s39_flogr

s39_hdr = _ida_domain.s39_hdr

s39_her = _ida_domain.s39_her

s39_hsch = _ida_domain.s39_hsch

s39_iac = _ida_domain.s39_iac

s39_ic = _ida_domain.s39_ic

s39_icm = _ida_domain.s39_icm

s39_icmh = _ida_domain.s39_icmh

s39_icmy = _ida_domain.s39_icmy

s39_icy = _ida_domain.s39_icy

s39_idte = _ida_domain.s39_idte

s39_iedtr = _ida_domain.s39_iedtr

s39_iextr = _ida_domain.s39_iextr

s39_iihf = _ida_domain.s39_iihf

s39_iihh = _ida_domain.s39_iihh

s39_iihl = _ida_domain.s39_iihl

s39_iilf = _ida_domain.s39_iilf

s39_iilh = _ida_domain.s39_iilh

s39_iill = _ida_domain.s39_iill

s39_ipk = _ida_domain.s39_ipk

s39_ipm = _ida_domain.s39_ipm

s39_ipte = _ida_domain.s39_ipte

s39_irbm = _ida_domain.s39_irbm

s39_iske = _ida_domain.s39_iske

s39_ivsk = _ida_domain.s39_ivsk

s39_j = _ida_domain.s39_j

s39_jo = _ida_domain.s39_jo

s39_jh = _ida_domain.s39_jh

s39_jnle = _ida_domain.s39_jnle

s39_jl = _ida_domain.s39_jl

s39_jnhe = _ida_domain.s39_jnhe

s39_jlh = _ida_domain.s39_jlh

s39_jne = _ida_domain.s39_jne

s39_je = _ida_domain.s39_je

s39_jnlh = _ida_domain.s39_jnlh

s39_jhe = _ida_domain.s39_jhe

s39_jnl = _ida_domain.s39_jnl

s39_jle = _ida_domain.s39_jle

s39_jnh = _ida_domain.s39_jnh

s39_jno = _ida_domain.s39_jno

s39_jg = _ida_domain.s39_jg

s39_jgo = _ida_domain.s39_jgo

s39_jgh = _ida_domain.s39_jgh

s39_jgnle = _ida_domain.s39_jgnle

s39_jgl = _ida_domain.s39_jgl

s39_jgnhe = _ida_domain.s39_jgnhe

s39_jglh = _ida_domain.s39_jglh

s39_jgne = _ida_domain.s39_jgne

s39_jge = _ida_domain.s39_jge

s39_jgnlh = _ida_domain.s39_jgnlh

s39_jghe = _ida_domain.s39_jghe

s39_jgnl = _ida_domain.s39_jgnl

s39_jgle = _ida_domain.s39_jgle

s39_jgnh = _ida_domain.s39_jgnh

s39_jgno = _ida_domain.s39_jgno

s39_kdb = _ida_domain.s39_kdb

s39_kdbr = _ida_domain.s39_kdbr

s39_kdsa = _ida_domain.s39_kdsa

s39_kdtr = _ida_domain.s39_kdtr

s39_keb = _ida_domain.s39_keb

s39_kebr = _ida_domain.s39_kebr

s39_kimd = _ida_domain.s39_kimd

s39_klmd = _ida_domain.s39_klmd

s39_km = _ida_domain.s39_km

s39_kma = _ida_domain.s39_kma

s39_kmac = _ida_domain.s39_kmac

s39_kmc = _ida_domain.s39_kmc

s39_kmctr = _ida_domain.s39_kmctr

s39_kmf = _ida_domain.s39_kmf

s39_kmo = _ida_domain.s39_kmo

s39_kxbr = _ida_domain.s39_kxbr

s39_kxtr = _ida_domain.s39_kxtr

s39_l = _ida_domain.s39_l

s39_la = _ida_domain.s39_la

s39_laa = _ida_domain.s39_laa

s39_laag = _ida_domain.s39_laag

s39_laal = _ida_domain.s39_laal

s39_laalg = _ida_domain.s39_laalg

s39_lae = _ida_domain.s39_lae

s39_laey = _ida_domain.s39_laey

s39_lam = _ida_domain.s39_lam

s39_lamy = _ida_domain.s39_lamy

s39_lan = _ida_domain.s39_lan

s39_lang = _ida_domain.s39_lang

s39_lao = _ida_domain.s39_lao

s39_laog = _ida_domain.s39_laog

s39_larl = _ida_domain.s39_larl

s39_lasp = _ida_domain.s39_lasp

s39_lat = _ida_domain.s39_lat

s39_lax = _ida_domain.s39_lax

s39_laxg = _ida_domain.s39_laxg

s39_lay = _ida_domain.s39_lay

s39_lb = _ida_domain.s39_lb

s39_lbh = _ida_domain.s39_lbh

s39_lbr = _ida_domain.s39_lbr

s39_lcbb = _ida_domain.s39_lcbb

s39_lcctl = _ida_domain.s39_lcctl

s39_lcdbr = _ida_domain.s39_lcdbr

s39_lcdfr = _ida_domain.s39_lcdfr

s39_lcdr = _ida_domain.s39_lcdr

s39_lcebr = _ida_domain.s39_lcebr

s39_lcer = _ida_domain.s39_lcer

s39_lcgfr = _ida_domain.s39_lcgfr

s39_lcgr = _ida_domain.s39_lcgr

s39_lcr = _ida_domain.s39_lcr

s39_lctl = _ida_domain.s39_lctl

s39_lctlg = _ida_domain.s39_lctlg

s39_lcxbr = _ida_domain.s39_lcxbr

s39_lcxr = _ida_domain.s39_lcxr

s39_ld = _ida_domain.s39_ld

s39_lde = _ida_domain.s39_lde

s39_ldeb = _ida_domain.s39_ldeb

s39_ldebr = _ida_domain.s39_ldebr

s39_lder = _ida_domain.s39_lder

s39_ldetr = _ida_domain.s39_ldetr

s39_ldgr = _ida_domain.s39_ldgr

s39_ldr = _ida_domain.s39_ldr

s39_ldrv = _ida_domain.s39_ldrv

s39_ldxbr = _ida_domain.s39_ldxbr

s39_ldxbra = _ida_domain.s39_ldxbra

s39_ldxr = _ida_domain.s39_ldxr

s39_ldxtr = _ida_domain.s39_ldxtr

s39_ldy = _ida_domain.s39_ldy

s39_le = _ida_domain.s39_le

s39_ledbr = _ida_domain.s39_ledbr

s39_ledbra = _ida_domain.s39_ledbra

s39_ledr = _ida_domain.s39_ledr

s39_ledtr = _ida_domain.s39_ledtr

s39_ler = _ida_domain.s39_ler

s39_lerv = _ida_domain.s39_lerv

s39_lexbr = _ida_domain.s39_lexbr

s39_lexbra = _ida_domain.s39_lexbra

s39_lexr = _ida_domain.s39_lexr

s39_ley = _ida_domain.s39_ley

s39_lfas = _ida_domain.s39_lfas

s39_lfh = _ida_domain.s39_lfh

s39_lfhat = _ida_domain.s39_lfhat

s39_lfpc = _ida_domain.s39_lfpc

s39_lg = _ida_domain.s39_lg

s39_lgat = _ida_domain.s39_lgat

s39_lgb = _ida_domain.s39_lgb

s39_lgbr = _ida_domain.s39_lgbr

s39_lgdr = _ida_domain.s39_lgdr

s39_lgf = _ida_domain.s39_lgf

s39_lgfi = _ida_domain.s39_lgfi

s39_lgfr = _ida_domain.s39_lgfr

s39_lgfrl = _ida_domain.s39_lgfrl

s39_lgg = _ida_domain.s39_lgg

s39_lgh = _ida_domain.s39_lgh

s39_lghi = _ida_domain.s39_lghi

s39_lghr = _ida_domain.s39_lghr

s39_lghrl = _ida_domain.s39_lghrl

s39_lgr = _ida_domain.s39_lgr

s39_lgrl = _ida_domain.s39_lgrl

s39_lgsc = _ida_domain.s39_lgsc

s39_lh = _ida_domain.s39_lh

s39_lhh = _ida_domain.s39_lhh

s39_lhi = _ida_domain.s39_lhi

s39_lhr = _ida_domain.s39_lhr

s39_lhrl = _ida_domain.s39_lhrl

s39_lhy = _ida_domain.s39_lhy

s39_llc = _ida_domain.s39_llc

s39_llch = _ida_domain.s39_llch

s39_llcr = _ida_domain.s39_llcr

s39_llgc = _ida_domain.s39_llgc

s39_llgcr = _ida_domain.s39_llgcr

s39_llgf = _ida_domain.s39_llgf

s39_llgfat = _ida_domain.s39_llgfat

s39_llgfr = _ida_domain.s39_llgfr

s39_llgfrl = _ida_domain.s39_llgfrl

s39_llgfsg = _ida_domain.s39_llgfsg

s39_llgh = _ida_domain.s39_llgh

s39_llghr = _ida_domain.s39_llghr

s39_llghrl = _ida_domain.s39_llghrl

s39_llgt = _ida_domain.s39_llgt

s39_llgtat = _ida_domain.s39_llgtat

s39_llgtr = _ida_domain.s39_llgtr

s39_llh = _ida_domain.s39_llh

s39_llhh = _ida_domain.s39_llhh

s39_llhr = _ida_domain.s39_llhr

s39_llhrl = _ida_domain.s39_llhrl

s39_llihf = _ida_domain.s39_llihf

s39_llihh = _ida_domain.s39_llihh

s39_llihl = _ida_domain.s39_llihl

s39_llilf = _ida_domain.s39_llilf

s39_llilh = _ida_domain.s39_llilh

s39_llill = _ida_domain.s39_llill

s39_llzrgf = _ida_domain.s39_llzrgf

s39_lm = _ida_domain.s39_lm

s39_lmd = _ida_domain.s39_lmd

s39_lmg = _ida_domain.s39_lmg

s39_lmh = _ida_domain.s39_lmh

s39_lmy = _ida_domain.s39_lmy

s39_lndbr = _ida_domain.s39_lndbr

s39_lndfr = _ida_domain.s39_lndfr

s39_lndr = _ida_domain.s39_lndr

s39_lnebr = _ida_domain.s39_lnebr

s39_lner = _ida_domain.s39_lner

s39_lngfr = _ida_domain.s39_lngfr

s39_lngr = _ida_domain.s39_lngr

s39_lnr = _ida_domain.s39_lnr

s39_lnxbr = _ida_domain.s39_lnxbr

s39_lnxr = _ida_domain.s39_lnxr

s39_loc = _ida_domain.s39_loc

s39_loco = _ida_domain.s39_loco

s39_loch = _ida_domain.s39_loch

s39_locnle = _ida_domain.s39_locnle

s39_locl = _ida_domain.s39_locl

s39_locnhe = _ida_domain.s39_locnhe

s39_loclh = _ida_domain.s39_loclh

s39_locne = _ida_domain.s39_locne

s39_loce = _ida_domain.s39_loce

s39_locnlh = _ida_domain.s39_locnlh

s39_loche = _ida_domain.s39_loche

s39_locnl = _ida_domain.s39_locnl

s39_locle = _ida_domain.s39_locle

s39_locnh = _ida_domain.s39_locnh

s39_locno = _ida_domain.s39_locno

s39_locfh = _ida_domain.s39_locfh

s39_locfho = _ida_domain.s39_locfho

s39_locfhh = _ida_domain.s39_locfhh

s39_locfhnle = _ida_domain.s39_locfhnle

s39_locfhl = _ida_domain.s39_locfhl

s39_locfhnhe = _ida_domain.s39_locfhnhe

s39_locfhlh = _ida_domain.s39_locfhlh

s39_locfhne = _ida_domain.s39_locfhne

s39_locfhe = _ida_domain.s39_locfhe

s39_locfhnlh = _ida_domain.s39_locfhnlh

s39_locfhhe = _ida_domain.s39_locfhhe

s39_locfhnl = _ida_domain.s39_locfhnl

s39_locfhle = _ida_domain.s39_locfhle

s39_locfhnh = _ida_domain.s39_locfhnh

s39_locfhno = _ida_domain.s39_locfhno

s39_locfhr = _ida_domain.s39_locfhr

s39_locfhro = _ida_domain.s39_locfhro

s39_locfhrh = _ida_domain.s39_locfhrh

s39_locfhrnle = _ida_domain.s39_locfhrnle

s39_locfhrl = _ida_domain.s39_locfhrl

s39_locfhrnhe = _ida_domain.s39_locfhrnhe

s39_locfhrlh = _ida_domain.s39_locfhrlh

s39_locfhrne = _ida_domain.s39_locfhrne

s39_locfhre = _ida_domain.s39_locfhre

s39_locfhrnlh = _ida_domain.s39_locfhrnlh

s39_locfhrhe = _ida_domain.s39_locfhrhe

s39_locfhrnl = _ida_domain.s39_locfhrnl

s39_locfhrle = _ida_domain.s39_locfhrle

s39_locfhrnh = _ida_domain.s39_locfhrnh

s39_locfhrno = _ida_domain.s39_locfhrno

s39_locg = _ida_domain.s39_locg

s39_locgo = _ida_domain.s39_locgo

s39_locgh = _ida_domain.s39_locgh

s39_locgnle = _ida_domain.s39_locgnle

s39_locgl = _ida_domain.s39_locgl

s39_locgnhe = _ida_domain.s39_locgnhe

s39_locglh = _ida_domain.s39_locglh

s39_locgne = _ida_domain.s39_locgne

s39_locge = _ida_domain.s39_locge

s39_locgnlh = _ida_domain.s39_locgnlh

s39_locghe = _ida_domain.s39_locghe

s39_locgnl = _ida_domain.s39_locgnl

s39_locgle = _ida_domain.s39_locgle

s39_locgnh = _ida_domain.s39_locgnh

s39_locgno = _ida_domain.s39_locgno

s39_locghi = _ida_domain.s39_locghi

s39_locghio = _ida_domain.s39_locghio

s39_locghih = _ida_domain.s39_locghih

s39_locghinle = _ida_domain.s39_locghinle

s39_locghil = _ida_domain.s39_locghil

s39_locghinhe = _ida_domain.s39_locghinhe

s39_locghilh = _ida_domain.s39_locghilh

s39_locghine = _ida_domain.s39_locghine

s39_locghie = _ida_domain.s39_locghie

s39_locghinlh = _ida_domain.s39_locghinlh

s39_locghihe = _ida_domain.s39_locghihe

s39_locghinl = _ida_domain.s39_locghinl

s39_locghile = _ida_domain.s39_locghile

s39_locghinh = _ida_domain.s39_locghinh

s39_locghino = _ida_domain.s39_locghino

s39_locgr = _ida_domain.s39_locgr

s39_locgro = _ida_domain.s39_locgro

s39_locgrh = _ida_domain.s39_locgrh

s39_locgrnle = _ida_domain.s39_locgrnle

s39_locgrl = _ida_domain.s39_locgrl

s39_locgrnhe = _ida_domain.s39_locgrnhe

s39_locgrlh = _ida_domain.s39_locgrlh

s39_locgrne = _ida_domain.s39_locgrne

s39_locgre = _ida_domain.s39_locgre

s39_locgrnlh = _ida_domain.s39_locgrnlh

s39_locgrhe = _ida_domain.s39_locgrhe

s39_locgrnl = _ida_domain.s39_locgrnl

s39_locgrle = _ida_domain.s39_locgrle

s39_locgrnh = _ida_domain.s39_locgrnh

s39_locgrno = _ida_domain.s39_locgrno

s39_lochhi = _ida_domain.s39_lochhi

s39_lochhio = _ida_domain.s39_lochhio

s39_lochhih = _ida_domain.s39_lochhih

s39_lochhinle = _ida_domain.s39_lochhinle

s39_lochhil = _ida_domain.s39_lochhil

s39_lochhinhe = _ida_domain.s39_lochhinhe

s39_lochhilh = _ida_domain.s39_lochhilh

s39_lochhine = _ida_domain.s39_lochhine

s39_lochhie = _ida_domain.s39_lochhie

s39_lochhinlh = _ida_domain.s39_lochhinlh

s39_lochhihe = _ida_domain.s39_lochhihe

s39_lochhinl = _ida_domain.s39_lochhinl

s39_lochhile = _ida_domain.s39_lochhile

s39_lochhinh = _ida_domain.s39_lochhinh

s39_lochhino = _ida_domain.s39_lochhino

s39_lochi = _ida_domain.s39_lochi

s39_lochio = _ida_domain.s39_lochio

s39_lochih = _ida_domain.s39_lochih

s39_lochinle = _ida_domain.s39_lochinle

s39_lochil = _ida_domain.s39_lochil

s39_lochinhe = _ida_domain.s39_lochinhe

s39_lochilh = _ida_domain.s39_lochilh

s39_lochine = _ida_domain.s39_lochine

s39_lochie = _ida_domain.s39_lochie

s39_lochinlh = _ida_domain.s39_lochinlh

s39_lochihe = _ida_domain.s39_lochihe

s39_lochinl = _ida_domain.s39_lochinl

s39_lochile = _ida_domain.s39_lochile

s39_lochinh = _ida_domain.s39_lochinh

s39_lochino = _ida_domain.s39_lochino

s39_locr = _ida_domain.s39_locr

s39_locro = _ida_domain.s39_locro

s39_locrh = _ida_domain.s39_locrh

s39_locrnle = _ida_domain.s39_locrnle

s39_locrl = _ida_domain.s39_locrl

s39_locrnhe = _ida_domain.s39_locrnhe

s39_locrlh = _ida_domain.s39_locrlh

s39_locrne = _ida_domain.s39_locrne

s39_locre = _ida_domain.s39_locre

s39_locrnlh = _ida_domain.s39_locrnlh

s39_locrhe = _ida_domain.s39_locrhe

s39_locrnl = _ida_domain.s39_locrnl

s39_locrle = _ida_domain.s39_locrle

s39_locrnh = _ida_domain.s39_locrnh

s39_locrno = _ida_domain.s39_locrno

s39_lpctl = _ida_domain.s39_lpctl

s39_lpd = _ida_domain.s39_lpd

s39_lpdbr = _ida_domain.s39_lpdbr

s39_lpdfr = _ida_domain.s39_lpdfr

s39_lpdg = _ida_domain.s39_lpdg

s39_lpdr = _ida_domain.s39_lpdr

s39_lpebr = _ida_domain.s39_lpebr

s39_lper = _ida_domain.s39_lper

s39_lpgfr = _ida_domain.s39_lpgfr

s39_lpgr = _ida_domain.s39_lpgr

s39_lpp = _ida_domain.s39_lpp

s39_lpq = _ida_domain.s39_lpq

s39_lpr = _ida_domain.s39_lpr

s39_lpsw = _ida_domain.s39_lpsw

s39_lpswe = _ida_domain.s39_lpswe

s39_lptea = _ida_domain.s39_lptea

s39_lpxbr = _ida_domain.s39_lpxbr

s39_lpxr = _ida_domain.s39_lpxr

s39_lr = _ida_domain.s39_lr

s39_lra = _ida_domain.s39_lra

s39_lrag = _ida_domain.s39_lrag

s39_lray = _ida_domain.s39_lray

s39_lrdr = _ida_domain.s39_lrdr

s39_lrer = _ida_domain.s39_lrer

s39_lrl = _ida_domain.s39_lrl

s39_lrv = _ida_domain.s39_lrv

s39_lrvg = _ida_domain.s39_lrvg

s39_lrvgr = _ida_domain.s39_lrvgr

s39_lrvh = _ida_domain.s39_lrvh

s39_lrvr = _ida_domain.s39_lrvr

s39_lsctl = _ida_domain.s39_lsctl

s39_lt = _ida_domain.s39_lt

s39_ltdbr = _ida_domain.s39_ltdbr

s39_ltdr = _ida_domain.s39_ltdr

s39_ltdtr = _ida_domain.s39_ltdtr

s39_ltebr = _ida_domain.s39_ltebr

s39_lter = _ida_domain.s39_lter

s39_ltg = _ida_domain.s39_ltg

s39_ltgf = _ida_domain.s39_ltgf

s39_ltgfr = _ida_domain.s39_ltgfr

s39_ltgr = _ida_domain.s39_ltgr

s39_ltr = _ida_domain.s39_ltr

s39_ltxbr = _ida_domain.s39_ltxbr

s39_ltxr = _ida_domain.s39_ltxr

s39_ltxtr = _ida_domain.s39_ltxtr

s39_lura = _ida_domain.s39_lura

s39_lurag = _ida_domain.s39_lurag

s39_lxd = _ida_domain.s39_lxd

s39_lxdb = _ida_domain.s39_lxdb

s39_lxdbr = _ida_domain.s39_lxdbr

s39_lxdr = _ida_domain.s39_lxdr

s39_lxdtr = _ida_domain.s39_lxdtr

s39_lxe = _ida_domain.s39_lxe

s39_lxeb = _ida_domain.s39_lxeb

s39_lxebr = _ida_domain.s39_lxebr

s39_lxer = _ida_domain.s39_lxer

s39_lxr = _ida_domain.s39_lxr

s39_ly = _ida_domain.s39_ly

s39_lzdr = _ida_domain.s39_lzdr

s39_lzer = _ida_domain.s39_lzer

s39_lzrf = _ida_domain.s39_lzrf

s39_lzrg = _ida_domain.s39_lzrg

s39_lzxr = _ida_domain.s39_lzxr

s39_m = _ida_domain.s39_m

s39_mad = _ida_domain.s39_mad

s39_madb = _ida_domain.s39_madb

s39_madbr = _ida_domain.s39_madbr

s39_madr = _ida_domain.s39_madr

s39_mae = _ida_domain.s39_mae

s39_maeb = _ida_domain.s39_maeb

s39_maebr = _ida_domain.s39_maebr

s39_maer = _ida_domain.s39_maer

s39_may = _ida_domain.s39_may

s39_mayh = _ida_domain.s39_mayh

s39_mayhr = _ida_domain.s39_mayhr

s39_mayl = _ida_domain.s39_mayl

s39_maylr = _ida_domain.s39_maylr

s39_mayr = _ida_domain.s39_mayr

s39_mc = _ida_domain.s39_mc

s39_md = _ida_domain.s39_md

s39_mdb = _ida_domain.s39_mdb

s39_mdbr = _ida_domain.s39_mdbr

s39_mde = _ida_domain.s39_mde

s39_mdeb = _ida_domain.s39_mdeb

s39_mdebr = _ida_domain.s39_mdebr

s39_mder = _ida_domain.s39_mder

s39_mdr = _ida_domain.s39_mdr

s39_mdtr = _ida_domain.s39_mdtr

s39_mdtra = _ida_domain.s39_mdtra

s39_me = _ida_domain.s39_me

s39_mee = _ida_domain.s39_mee

s39_meeb = _ida_domain.s39_meeb

s39_meebr = _ida_domain.s39_meebr

s39_meer = _ida_domain.s39_meer

s39_mer = _ida_domain.s39_mer

s39_mfy = _ida_domain.s39_mfy

s39_mg = _ida_domain.s39_mg

s39_mgh = _ida_domain.s39_mgh

s39_mghi = _ida_domain.s39_mghi

s39_mgrk = _ida_domain.s39_mgrk

s39_mh = _ida_domain.s39_mh

s39_mhi = _ida_domain.s39_mhi

s39_mhy = _ida_domain.s39_mhy

s39_ml = _ida_domain.s39_ml

s39_mlg = _ida_domain.s39_mlg

s39_mlgr = _ida_domain.s39_mlgr

s39_mlr = _ida_domain.s39_mlr

s39_mp = _ida_domain.s39_mp

s39_mr = _ida_domain.s39_mr

s39_ms = _ida_domain.s39_ms

s39_msc = _ida_domain.s39_msc

s39_msch = _ida_domain.s39_msch

s39_msd = _ida_domain.s39_msd

s39_msdb = _ida_domain.s39_msdb

s39_msdbr = _ida_domain.s39_msdbr

s39_msdr = _ida_domain.s39_msdr

s39_mse = _ida_domain.s39_mse

s39_mseb = _ida_domain.s39_mseb

s39_msebr = _ida_domain.s39_msebr

s39_mser = _ida_domain.s39_mser

s39_msfi = _ida_domain.s39_msfi

s39_msg = _ida_domain.s39_msg

s39_msgc = _ida_domain.s39_msgc

s39_msgf = _ida_domain.s39_msgf

s39_msgfi = _ida_domain.s39_msgfi

s39_msgfr = _ida_domain.s39_msgfr

s39_msgr = _ida_domain.s39_msgr

s39_msgrkc = _ida_domain.s39_msgrkc

s39_msr = _ida_domain.s39_msr

s39_msrkc = _ida_domain.s39_msrkc

s39_msta = _ida_domain.s39_msta

s39_msy = _ida_domain.s39_msy

s39_mvc = _ida_domain.s39_mvc

s39_mvcdk = _ida_domain.s39_mvcdk

s39_mvcin = _ida_domain.s39_mvcin

s39_mvck = _ida_domain.s39_mvck

s39_mvcl = _ida_domain.s39_mvcl

s39_mvcle = _ida_domain.s39_mvcle

s39_mvclu = _ida_domain.s39_mvclu

s39_mvcos = _ida_domain.s39_mvcos

s39_mvcp = _ida_domain.s39_mvcp

s39_mvcrl = _ida_domain.s39_mvcrl

s39_mvcs = _ida_domain.s39_mvcs

s39_mvcsk = _ida_domain.s39_mvcsk

s39_mvghi = _ida_domain.s39_mvghi

s39_mvhhi = _ida_domain.s39_mvhhi

s39_mvhi = _ida_domain.s39_mvhi

s39_mvi = _ida_domain.s39_mvi

s39_mviy = _ida_domain.s39_mviy

s39_mvn = _ida_domain.s39_mvn

s39_mvo = _ida_domain.s39_mvo

s39_mvpg = _ida_domain.s39_mvpg

s39_mvst = _ida_domain.s39_mvst

s39_mvz = _ida_domain.s39_mvz

s39_mxbr = _ida_domain.s39_mxbr

s39_mxd = _ida_domain.s39_mxd

s39_mxdb = _ida_domain.s39_mxdb

s39_mxdbr = _ida_domain.s39_mxdbr

s39_mxdr = _ida_domain.s39_mxdr

s39_mxr = _ida_domain.s39_mxr

s39_mxtr = _ida_domain.s39_mxtr

s39_mxtra = _ida_domain.s39_mxtra

s39_my = _ida_domain.s39_my

s39_myh = _ida_domain.s39_myh

s39_myhr = _ida_domain.s39_myhr

s39_myl = _ida_domain.s39_myl

s39_mylr = _ida_domain.s39_mylr

s39_myr = _ida_domain.s39_myr

s39_n = _ida_domain.s39_n

s39_nc = _ida_domain.s39_nc

s39_ncgrk = _ida_domain.s39_ncgrk

s39_ncrk = _ida_domain.s39_ncrk

s39_ng = _ida_domain.s39_ng

s39_ngr = _ida_domain.s39_ngr

s39_ngrk = _ida_domain.s39_ngrk

s39_ni = _ida_domain.s39_ni

s39_niai = _ida_domain.s39_niai

s39_nihf = _ida_domain.s39_nihf

s39_nihh = _ida_domain.s39_nihh

s39_nihl = _ida_domain.s39_nihl

s39_nilf = _ida_domain.s39_nilf

s39_nilh = _ida_domain.s39_nilh

s39_nill = _ida_domain.s39_nill

s39_niy = _ida_domain.s39_niy

s39_nngrk = _ida_domain.s39_nngrk

s39_nnrk = _ida_domain.s39_nnrk

s39_nogrk = _ida_domain.s39_nogrk

s39_nop = _ida_domain.s39_nop

s39_nopr = _ida_domain.s39_nopr

s39_nork = _ida_domain.s39_nork

s39_nr = _ida_domain.s39_nr

s39_nrk = _ida_domain.s39_nrk

s39_ntstg = _ida_domain.s39_ntstg

s39_nxgrk = _ida_domain.s39_nxgrk

s39_nxrk = _ida_domain.s39_nxrk

s39_ny = _ida_domain.s39_ny

s39_o = _ida_domain.s39_o

s39_oc = _ida_domain.s39_oc

s39_ocgrk = _ida_domain.s39_ocgrk

s39_ocrk = _ida_domain.s39_ocrk

s39_og = _ida_domain.s39_og

s39_ogr = _ida_domain.s39_ogr

s39_ogrk = _ida_domain.s39_ogrk

s39_oi = _ida_domain.s39_oi

s39_oihf = _ida_domain.s39_oihf

s39_oihh = _ida_domain.s39_oihh

s39_oihl = _ida_domain.s39_oihl

s39_oilf = _ida_domain.s39_oilf

s39_oilh = _ida_domain.s39_oilh

s39_oill = _ida_domain.s39_oill

s39_oiy = _ida_domain.s39_oiy

s39_or = _ida_domain.s39_or

s39_ork = _ida_domain.s39_ork

s39_oy = _ida_domain.s39_oy

s39_pack = _ida_domain.s39_pack

s39_palb = _ida_domain.s39_palb

s39_pc = _ida_domain.s39_pc

s39_pcc = _ida_domain.s39_pcc

s39_pckmo = _ida_domain.s39_pckmo

s39_pfd = _ida_domain.s39_pfd

s39_pfdrl = _ida_domain.s39_pfdrl

s39_pfmf = _ida_domain.s39_pfmf

s39_pfpo = _ida_domain.s39_pfpo

s39_pgin = _ida_domain.s39_pgin

s39_pgout = _ida_domain.s39_pgout

s39_pka = _ida_domain.s39_pka

s39_pku = _ida_domain.s39_pku

s39_plo = _ida_domain.s39_plo

s39_popcnt = _ida_domain.s39_popcnt

s39_ppa = _ida_domain.s39_ppa

s39_ppno = _ida_domain.s39_ppno

s39_pr = _ida_domain.s39_pr

s39_prno = _ida_domain.s39_prno

s39_pt = _ida_domain.s39_pt

s39_ptf = _ida_domain.s39_ptf

s39_ptff = _ida_domain.s39_ptff

s39_pti = _ida_domain.s39_pti

s39_ptlb = _ida_domain.s39_ptlb

s39_qadtr = _ida_domain.s39_qadtr

s39_qaxtr = _ida_domain.s39_qaxtr

s39_qctri = _ida_domain.s39_qctri

s39_qsi = _ida_domain.s39_qsi

s39_rchp = _ida_domain.s39_rchp

s39_risbg = _ida_domain.s39_risbg

s39_risbgn = _ida_domain.s39_risbgn

s39_risbhg = _ida_domain.s39_risbhg

s39_risblg = _ida_domain.s39_risblg

s39_rll = _ida_domain.s39_rll

s39_rllg = _ida_domain.s39_rllg

s39_rnsbg = _ida_domain.s39_rnsbg

s39_rosbg = _ida_domain.s39_rosbg

s39_rp = _ida_domain.s39_rp

s39_rrbe = _ida_domain.s39_rrbe

s39_rrbm = _ida_domain.s39_rrbm

s39_rrdtr = _ida_domain.s39_rrdtr

s39_rrxtr = _ida_domain.s39_rrxtr

s39_rsch = _ida_domain.s39_rsch

s39_rxsbg = _ida_domain.s39_rxsbg

s39_s = _ida_domain.s39_s

s39_sac = _ida_domain.s39_sac

s39_sacf = _ida_domain.s39_sacf

s39_sal = _ida_domain.s39_sal

s39_sam24 = _ida_domain.s39_sam24

s39_sam31 = _ida_domain.s39_sam31

s39_sam64 = _ida_domain.s39_sam64

s39_sar = _ida_domain.s39_sar

s39_scctr = _ida_domain.s39_scctr

s39_schm = _ida_domain.s39_schm

s39_sck = _ida_domain.s39_sck

s39_sckc = _ida_domain.s39_sckc

s39_sckpf = _ida_domain.s39_sckpf

s39_sd = _ida_domain.s39_sd

s39_sdb = _ida_domain.s39_sdb

s39_sdbr = _ida_domain.s39_sdbr

s39_sdr = _ida_domain.s39_sdr

s39_sdtr = _ida_domain.s39_sdtr

s39_sdtra = _ida_domain.s39_sdtra

s39_se = _ida_domain.s39_se

s39_seb = _ida_domain.s39_seb

s39_sebr = _ida_domain.s39_sebr

s39_selgr = _ida_domain.s39_selgr

s39_selgro = _ida_domain.s39_selgro

s39_selgrh = _ida_domain.s39_selgrh

s39_selgrnle = _ida_domain.s39_selgrnle

s39_selgrl = _ida_domain.s39_selgrl

s39_selgrnhe = _ida_domain.s39_selgrnhe

s39_selgrlh = _ida_domain.s39_selgrlh

s39_selgrne = _ida_domain.s39_selgrne

s39_selgre = _ida_domain.s39_selgre

s39_selgrnlh = _ida_domain.s39_selgrnlh

s39_selgrhe = _ida_domain.s39_selgrhe

s39_selgrnl = _ida_domain.s39_selgrnl

s39_selgrle = _ida_domain.s39_selgrle

s39_selgrnh = _ida_domain.s39_selgrnh

s39_selgrno = _ida_domain.s39_selgrno

s39_selhhhr = _ida_domain.s39_selhhhr

s39_selhhhro = _ida_domain.s39_selhhhro

s39_selhhhrh = _ida_domain.s39_selhhhrh

s39_selhhhrnle = _ida_domain.s39_selhhhrnle

s39_selhhhrl = _ida_domain.s39_selhhhrl

s39_selhhhrnhe = _ida_domain.s39_selhhhrnhe

s39_selhhhrlh = _ida_domain.s39_selhhhrlh

s39_selhhhrne = _ida_domain.s39_selhhhrne

s39_selhhhre = _ida_domain.s39_selhhhre

s39_selhhhrnlh = _ida_domain.s39_selhhhrnlh

s39_selhhhrhe = _ida_domain.s39_selhhhrhe

s39_selhhhrnl = _ida_domain.s39_selhhhrnl

s39_selhhhrle = _ida_domain.s39_selhhhrle

s39_selhhhrnh = _ida_domain.s39_selhhhrnh

s39_selhhhrno = _ida_domain.s39_selhhhrno

s39_selr = _ida_domain.s39_selr

s39_selro = _ida_domain.s39_selro

s39_selrh = _ida_domain.s39_selrh

s39_selrnle = _ida_domain.s39_selrnle

s39_selrl = _ida_domain.s39_selrl

s39_selrnhe = _ida_domain.s39_selrnhe

s39_selrlh = _ida_domain.s39_selrlh

s39_selrne = _ida_domain.s39_selrne

s39_selre = _ida_domain.s39_selre

s39_selrnlh = _ida_domain.s39_selrnlh

s39_selrhe = _ida_domain.s39_selrhe

s39_selrnl = _ida_domain.s39_selrnl

s39_selrle = _ida_domain.s39_selrle

s39_selrnh = _ida_domain.s39_selrnh

s39_selrno = _ida_domain.s39_selrno

s39_ser = _ida_domain.s39_ser

s39_sfasr = _ida_domain.s39_sfasr

s39_sfpc = _ida_domain.s39_sfpc

s39_sg = _ida_domain.s39_sg

s39_sgf = _ida_domain.s39_sgf

s39_sgfr = _ida_domain.s39_sgfr

s39_sgh = _ida_domain.s39_sgh

s39_sgr = _ida_domain.s39_sgr

s39_sgrk = _ida_domain.s39_sgrk

s39_sh = _ida_domain.s39_sh

s39_shhhr = _ida_domain.s39_shhhr

s39_shhlr = _ida_domain.s39_shhlr

s39_shy = _ida_domain.s39_shy

s39_sie = _ida_domain.s39_sie

s39_siga = _ida_domain.s39_siga

s39_sigp = _ida_domain.s39_sigp

s39_sl = _ida_domain.s39_sl

s39_sla = _ida_domain.s39_sla

s39_slag = _ida_domain.s39_slag

s39_slak = _ida_domain.s39_slak

s39_slb = _ida_domain.s39_slb

s39_slbg = _ida_domain.s39_slbg

s39_slbgr = _ida_domain.s39_slbgr

s39_slbr = _ida_domain.s39_slbr

s39_slda = _ida_domain.s39_slda

s39_sldl = _ida_domain.s39_sldl

s39_sldt = _ida_domain.s39_sldt

s39_slfi = _ida_domain.s39_slfi

s39_slg = _ida_domain.s39_slg

s39_slgf = _ida_domain.s39_slgf

s39_slgfi = _ida_domain.s39_slgfi

s39_slgfr = _ida_domain.s39_slgfr

s39_slgr = _ida_domain.s39_slgr

s39_slgrk = _ida_domain.s39_slgrk

s39_slhhhr = _ida_domain.s39_slhhhr

s39_slhhlr = _ida_domain.s39_slhhlr

s39_sll = _ida_domain.s39_sll

s39_sllg = _ida_domain.s39_sllg

s39_sllk = _ida_domain.s39_sllk

s39_slr = _ida_domain.s39_slr

s39_slrk = _ida_domain.s39_slrk

s39_slxt = _ida_domain.s39_slxt

s39_sly = _ida_domain.s39_sly

s39_sortl = _ida_domain.s39_sortl

s39_sp = _ida_domain.s39_sp

s39_spctr = _ida_domain.s39_spctr

s39_spka = _ida_domain.s39_spka

s39_spm = _ida_domain.s39_spm

s39_spt = _ida_domain.s39_spt

s39_spx = _ida_domain.s39_spx

s39_sqd = _ida_domain.s39_sqd

s39_sqdb = _ida_domain.s39_sqdb

s39_sqdbr = _ida_domain.s39_sqdbr

s39_sqdr = _ida_domain.s39_sqdr

s39_sqe = _ida_domain.s39_sqe

s39_sqeb = _ida_domain.s39_sqeb

s39_sqebr = _ida_domain.s39_sqebr

s39_sqer = _ida_domain.s39_sqer

s39_sqxbr = _ida_domain.s39_sqxbr

s39_sqxr = _ida_domain.s39_sqxr

s39_sr = _ida_domain.s39_sr

s39_sra = _ida_domain.s39_sra

s39_srag = _ida_domain.s39_srag

s39_srak = _ida_domain.s39_srak

s39_srda = _ida_domain.s39_srda

s39_srdl = _ida_domain.s39_srdl

s39_srdt = _ida_domain.s39_srdt

s39_srk = _ida_domain.s39_srk

s39_srl = _ida_domain.s39_srl

s39_srlg = _ida_domain.s39_srlg

s39_srlk = _ida_domain.s39_srlk

s39_srnm = _ida_domain.s39_srnm

s39_srnmb = _ida_domain.s39_srnmb

s39_srnmt = _ida_domain.s39_srnmt

s39_srp = _ida_domain.s39_srp

s39_srst = _ida_domain.s39_srst

s39_srstu = _ida_domain.s39_srstu

s39_srxt = _ida_domain.s39_srxt

s39_ssair = _ida_domain.s39_ssair

s39_ssar = _ida_domain.s39_ssar

s39_ssch = _ida_domain.s39_ssch

s39_sske = _ida_domain.s39_sske

s39_ssm = _ida_domain.s39_ssm

s39_st = _ida_domain.s39_st

s39_stam = _ida_domain.s39_stam

s39_stamy = _ida_domain.s39_stamy

s39_stap = _ida_domain.s39_stap

s39_stc = _ida_domain.s39_stc

s39_stch = _ida_domain.s39_stch

s39_stck = _ida_domain.s39_stck

s39_stckc = _ida_domain.s39_stckc

s39_stcke = _ida_domain.s39_stcke

s39_stckf = _ida_domain.s39_stckf

s39_stcm = _ida_domain.s39_stcm

s39_stcmh = _ida_domain.s39_stcmh

s39_stcmy = _ida_domain.s39_stcmy

s39_stcps = _ida_domain.s39_stcps

s39_stcrw = _ida_domain.s39_stcrw

s39_stctg = _ida_domain.s39_stctg

s39_stctl = _ida_domain.s39_stctl

s39_stcy = _ida_domain.s39_stcy

s39_std = _ida_domain.s39_std

s39_stdrv = _ida_domain.s39_stdrv

s39_stdy = _ida_domain.s39_stdy

s39_ste = _ida_domain.s39_ste

s39_sterv = _ida_domain.s39_sterv

s39_stey = _ida_domain.s39_stey

s39_stfh = _ida_domain.s39_stfh

s39_stfl = _ida_domain.s39_stfl

s39_stfle = _ida_domain.s39_stfle

s39_stfpc = _ida_domain.s39_stfpc

s39_stg = _ida_domain.s39_stg

s39_stgrl = _ida_domain.s39_stgrl

s39_stgsc = _ida_domain.s39_stgsc

s39_sth = _ida_domain.s39_sth

s39_sthh = _ida_domain.s39_sthh

s39_sthrl = _ida_domain.s39_sthrl

s39_sthy = _ida_domain.s39_sthy

s39_stidp = _ida_domain.s39_stidp

s39_stm = _ida_domain.s39_stm

s39_stmg = _ida_domain.s39_stmg

s39_stmh = _ida_domain.s39_stmh

s39_stmy = _ida_domain.s39_stmy

s39_stnsm = _ida_domain.s39_stnsm

s39_stoc = _ida_domain.s39_stoc

s39_stoco = _ida_domain.s39_stoco

s39_stoch = _ida_domain.s39_stoch

s39_stocnle = _ida_domain.s39_stocnle

s39_stocl = _ida_domain.s39_stocl

s39_stocnhe = _ida_domain.s39_stocnhe

s39_stoclh = _ida_domain.s39_stoclh

s39_stocne = _ida_domain.s39_stocne

s39_stoce = _ida_domain.s39_stoce

s39_stocnlh = _ida_domain.s39_stocnlh

s39_stoche = _ida_domain.s39_stoche

s39_stocnl = _ida_domain.s39_stocnl

s39_stocle = _ida_domain.s39_stocle

s39_stocnh = _ida_domain.s39_stocnh

s39_stocno = _ida_domain.s39_stocno

s39_stocfh = _ida_domain.s39_stocfh

s39_stocfho = _ida_domain.s39_stocfho

s39_stocfhh = _ida_domain.s39_stocfhh

s39_stocfhnle = _ida_domain.s39_stocfhnle

s39_stocfhl = _ida_domain.s39_stocfhl

s39_stocfhnhe = _ida_domain.s39_stocfhnhe

s39_stocfhlh = _ida_domain.s39_stocfhlh

s39_stocfhne = _ida_domain.s39_stocfhne

s39_stocfhe = _ida_domain.s39_stocfhe

s39_stocfhnlh = _ida_domain.s39_stocfhnlh

s39_stocfhhe = _ida_domain.s39_stocfhhe

s39_stocfhnl = _ida_domain.s39_stocfhnl

s39_stocfhle = _ida_domain.s39_stocfhle

s39_stocfhnh = _ida_domain.s39_stocfhnh

s39_stocfhno = _ida_domain.s39_stocfhno

s39_stocg = _ida_domain.s39_stocg

s39_stocgo = _ida_domain.s39_stocgo

s39_stocgh = _ida_domain.s39_stocgh

s39_stocgnle = _ida_domain.s39_stocgnle

s39_stocgl = _ida_domain.s39_stocgl

s39_stocgnhe = _ida_domain.s39_stocgnhe

s39_stocglh = _ida_domain.s39_stocglh

s39_stocgne = _ida_domain.s39_stocgne

s39_stocge = _ida_domain.s39_stocge

s39_stocgnlh = _ida_domain.s39_stocgnlh

s39_stocghe = _ida_domain.s39_stocghe

s39_stocgnl = _ida_domain.s39_stocgnl

s39_stocgle = _ida_domain.s39_stocgle

s39_stocgnh = _ida_domain.s39_stocgnh

s39_stocgno = _ida_domain.s39_stocgno

s39_stosm = _ida_domain.s39_stosm

s39_stpq = _ida_domain.s39_stpq

s39_stpt = _ida_domain.s39_stpt

s39_stpx = _ida_domain.s39_stpx

s39_strag = _ida_domain.s39_strag

s39_strl = _ida_domain.s39_strl

s39_strv = _ida_domain.s39_strv

s39_strvg = _ida_domain.s39_strvg

s39_strvh = _ida_domain.s39_strvh

s39_stsch = _ida_domain.s39_stsch

s39_stsi = _ida_domain.s39_stsi

s39_stura = _ida_domain.s39_stura

s39_sturg = _ida_domain.s39_sturg

s39_sty = _ida_domain.s39_sty

s39_su = _ida_domain.s39_su

s39_sur = _ida_domain.s39_sur

s39_svc = _ida_domain.s39_svc

s39_sw = _ida_domain.s39_sw

s39_swr = _ida_domain.s39_swr

s39_sxbr = _ida_domain.s39_sxbr

s39_sxr = _ida_domain.s39_sxr

s39_sxtr = _ida_domain.s39_sxtr

s39_sxtra = _ida_domain.s39_sxtra

s39_sy = _ida_domain.s39_sy

s39_tabort = _ida_domain.s39_tabort

s39_tam = _ida_domain.s39_tam

s39_tar = _ida_domain.s39_tar

s39_tb = _ida_domain.s39_tb

s39_tbdr = _ida_domain.s39_tbdr

s39_tbedr = _ida_domain.s39_tbedr

s39_tbegin = _ida_domain.s39_tbegin

s39_tbeginc = _ida_domain.s39_tbeginc

s39_tcdb = _ida_domain.s39_tcdb

s39_tceb = _ida_domain.s39_tceb

s39_tcxb = _ida_domain.s39_tcxb

s39_tdcdt = _ida_domain.s39_tdcdt

s39_tdcet = _ida_domain.s39_tdcet

s39_tdcxt = _ida_domain.s39_tdcxt

s39_tdgdt = _ida_domain.s39_tdgdt

s39_tdget = _ida_domain.s39_tdget

s39_tdgxt = _ida_domain.s39_tdgxt

s39_tend = _ida_domain.s39_tend

s39_thder = _ida_domain.s39_thder

s39_thdr = _ida_domain.s39_thdr

s39_tm = _ida_domain.s39_tm

s39_tmhh = _ida_domain.s39_tmhh

s39_tmhl = _ida_domain.s39_tmhl

s39_tmlh = _ida_domain.s39_tmlh

s39_tmll = _ida_domain.s39_tmll

s39_tmy = _ida_domain.s39_tmy

s39_tp = _ida_domain.s39_tp

s39_tpei = _ida_domain.s39_tpei

s39_tpi = _ida_domain.s39_tpi

s39_tprot = _ida_domain.s39_tprot

s39_tr = _ida_domain.s39_tr

s39_trace = _ida_domain.s39_trace

s39_tracg = _ida_domain.s39_tracg

s39_trap2 = _ida_domain.s39_trap2

s39_trap4 = _ida_domain.s39_trap4

s39_tre = _ida_domain.s39_tre

s39_troo = _ida_domain.s39_troo

s39_trot = _ida_domain.s39_trot

s39_trt = _ida_domain.s39_trt

s39_trte = _ida_domain.s39_trte

s39_trto = _ida_domain.s39_trto

s39_trtr = _ida_domain.s39_trtr

s39_trtre = _ida_domain.s39_trtre

s39_trtt = _ida_domain.s39_trtt

s39_ts = _ida_domain.s39_ts

s39_tsch = _ida_domain.s39_tsch

s39_unpk = _ida_domain.s39_unpk

s39_unpka = _ida_domain.s39_unpka

s39_unpku = _ida_domain.s39_unpku

s39_upt = _ida_domain.s39_upt

s39_va = _ida_domain.s39_va

s39_vab = _ida_domain.s39_vab

s39_vac = _ida_domain.s39_vac

s39_vacc = _ida_domain.s39_vacc

s39_vaccb = _ida_domain.s39_vaccb

s39_vaccc = _ida_domain.s39_vaccc

s39_vacccq = _ida_domain.s39_vacccq

s39_vaccf = _ida_domain.s39_vaccf

s39_vaccg = _ida_domain.s39_vaccg

s39_vacch = _ida_domain.s39_vacch

s39_vaccq = _ida_domain.s39_vaccq

s39_vacq = _ida_domain.s39_vacq

s39_vaf = _ida_domain.s39_vaf

s39_vag = _ida_domain.s39_vag

s39_vah = _ida_domain.s39_vah

s39_vap = _ida_domain.s39_vap

s39_vaq = _ida_domain.s39_vaq

s39_vavg = _ida_domain.s39_vavg

s39_vavgb = _ida_domain.s39_vavgb

s39_vavgf = _ida_domain.s39_vavgf

s39_vavgg = _ida_domain.s39_vavgg

s39_vavgh = _ida_domain.s39_vavgh

s39_vavgl = _ida_domain.s39_vavgl

s39_vavglb = _ida_domain.s39_vavglb

s39_vavglf = _ida_domain.s39_vavglf

s39_vavglg = _ida_domain.s39_vavglg

s39_vavglh = _ida_domain.s39_vavglh

s39_vbperm = _ida_domain.s39_vbperm

s39_vcdg = _ida_domain.s39_vcdg

s39_vcdgb = _ida_domain.s39_vcdgb

s39_vcdlg = _ida_domain.s39_vcdlg

s39_vcdlgb = _ida_domain.s39_vcdlgb

s39_vcefb = _ida_domain.s39_vcefb

s39_vcelfb = _ida_domain.s39_vcelfb

s39_vceq = _ida_domain.s39_vceq

s39_vceqb = _ida_domain.s39_vceqb

s39_vceqbs = _ida_domain.s39_vceqbs

s39_vceqf = _ida_domain.s39_vceqf

s39_vceqfs = _ida_domain.s39_vceqfs

s39_vceqg = _ida_domain.s39_vceqg

s39_vceqgs = _ida_domain.s39_vceqgs

s39_vceqh = _ida_domain.s39_vceqh

s39_vceqhs = _ida_domain.s39_vceqhs

s39_vcfeb = _ida_domain.s39_vcfeb

s39_vcfpl = _ida_domain.s39_vcfpl

s39_vcfps = _ida_domain.s39_vcfps

s39_vcgd = _ida_domain.s39_vcgd

s39_vcgdb = _ida_domain.s39_vcgdb

s39_vch = _ida_domain.s39_vch

s39_vchb = _ida_domain.s39_vchb

s39_vchbs = _ida_domain.s39_vchbs

s39_vchf = _ida_domain.s39_vchf

s39_vchfs = _ida_domain.s39_vchfs

s39_vchg = _ida_domain.s39_vchg

s39_vchgs = _ida_domain.s39_vchgs

s39_vchh = _ida_domain.s39_vchh

s39_vchhs = _ida_domain.s39_vchhs

s39_vchl = _ida_domain.s39_vchl

s39_vchlb = _ida_domain.s39_vchlb

s39_vchlbs = _ida_domain.s39_vchlbs

s39_vchlf = _ida_domain.s39_vchlf

s39_vchlfs = _ida_domain.s39_vchlfs

s39_vchlg = _ida_domain.s39_vchlg

s39_vchlgs = _ida_domain.s39_vchlgs

s39_vchlh = _ida_domain.s39_vchlh

s39_vchlhs = _ida_domain.s39_vchlhs

s39_vcksm = _ida_domain.s39_vcksm

s39_vclfeb = _ida_domain.s39_vclfeb

s39_vclfp = _ida_domain.s39_vclfp

s39_vclgd = _ida_domain.s39_vclgd

s39_vclgdb = _ida_domain.s39_vclgdb

s39_vclz = _ida_domain.s39_vclz

s39_vclzb = _ida_domain.s39_vclzb

s39_vclzf = _ida_domain.s39_vclzf

s39_vclzg = _ida_domain.s39_vclzg

s39_vclzh = _ida_domain.s39_vclzh

s39_vcp = _ida_domain.s39_vcp

s39_vcsfp = _ida_domain.s39_vcsfp

s39_vctz = _ida_domain.s39_vctz

s39_vctzb = _ida_domain.s39_vctzb

s39_vctzf = _ida_domain.s39_vctzf

s39_vctzg = _ida_domain.s39_vctzg

s39_vctzh = _ida_domain.s39_vctzh

s39_vcvb = _ida_domain.s39_vcvb

s39_vcvbg = _ida_domain.s39_vcvbg

s39_vcvd = _ida_domain.s39_vcvd

s39_vcvdg = _ida_domain.s39_vcvdg

s39_vdp = _ida_domain.s39_vdp

s39_vec = _ida_domain.s39_vec

s39_vecb = _ida_domain.s39_vecb

s39_vecf = _ida_domain.s39_vecf

s39_vecg = _ida_domain.s39_vecg

s39_vech = _ida_domain.s39_vech

s39_vecl = _ida_domain.s39_vecl

s39_veclb = _ida_domain.s39_veclb

s39_veclf = _ida_domain.s39_veclf

s39_veclg = _ida_domain.s39_veclg

s39_veclh = _ida_domain.s39_veclh

s39_verim = _ida_domain.s39_verim

s39_verimb = _ida_domain.s39_verimb

s39_verimf = _ida_domain.s39_verimf

s39_verimg = _ida_domain.s39_verimg

s39_verimh = _ida_domain.s39_verimh

s39_verll = _ida_domain.s39_verll

s39_verllb = _ida_domain.s39_verllb

s39_verllf = _ida_domain.s39_verllf

s39_verllg = _ida_domain.s39_verllg

s39_verllh = _ida_domain.s39_verllh

s39_verllv = _ida_domain.s39_verllv

s39_verllvb = _ida_domain.s39_verllvb

s39_verllvf = _ida_domain.s39_verllvf

s39_verllvg = _ida_domain.s39_verllvg

s39_verllvh = _ida_domain.s39_verllvh

s39_vesl = _ida_domain.s39_vesl

s39_veslb = _ida_domain.s39_veslb

s39_veslf = _ida_domain.s39_veslf

s39_veslg = _ida_domain.s39_veslg

s39_veslh = _ida_domain.s39_veslh

s39_veslv = _ida_domain.s39_veslv

s39_veslvb = _ida_domain.s39_veslvb

s39_veslvf = _ida_domain.s39_veslvf

s39_veslvg = _ida_domain.s39_veslvg

s39_veslvh = _ida_domain.s39_veslvh

s39_vesra = _ida_domain.s39_vesra

s39_vesrab = _ida_domain.s39_vesrab

s39_vesraf = _ida_domain.s39_vesraf

s39_vesrag = _ida_domain.s39_vesrag

s39_vesrah = _ida_domain.s39_vesrah

s39_vesrav = _ida_domain.s39_vesrav

s39_vesravb = _ida_domain.s39_vesravb

s39_vesravf = _ida_domain.s39_vesravf

s39_vesravg = _ida_domain.s39_vesravg

s39_vesravh = _ida_domain.s39_vesravh

s39_vesrl = _ida_domain.s39_vesrl

s39_vesrlb = _ida_domain.s39_vesrlb

s39_vesrlf = _ida_domain.s39_vesrlf

s39_vesrlg = _ida_domain.s39_vesrlg

s39_vesrlh = _ida_domain.s39_vesrlh

s39_vesrlv = _ida_domain.s39_vesrlv

s39_vesrlvb = _ida_domain.s39_vesrlvb

s39_vesrlvf = _ida_domain.s39_vesrlvf

s39_vesrlvg = _ida_domain.s39_vesrlvg

s39_vesrlvh = _ida_domain.s39_vesrlvh

s39_vfa = _ida_domain.s39_vfa

s39_vfadb = _ida_domain.s39_vfadb

s39_vfae = _ida_domain.s39_vfae

s39_vfaeb = _ida_domain.s39_vfaeb

s39_vfaebs = _ida_domain.s39_vfaebs

s39_vfaef = _ida_domain.s39_vfaef

s39_vfaefs = _ida_domain.s39_vfaefs

s39_vfaeh = _ida_domain.s39_vfaeh

s39_vfaehs = _ida_domain.s39_vfaehs

s39_vfaezb = _ida_domain.s39_vfaezb

s39_vfaezbs = _ida_domain.s39_vfaezbs

s39_vfaezf = _ida_domain.s39_vfaezf

s39_vfaezfs = _ida_domain.s39_vfaezfs

s39_vfaezh = _ida_domain.s39_vfaezh

s39_vfaezhs = _ida_domain.s39_vfaezhs

s39_vfasb = _ida_domain.s39_vfasb

s39_vfce = _ida_domain.s39_vfce

s39_vfcedb = _ida_domain.s39_vfcedb

s39_vfcedbs = _ida_domain.s39_vfcedbs

s39_vfcesb = _ida_domain.s39_vfcesb

s39_vfcesbs = _ida_domain.s39_vfcesbs

s39_vfch = _ida_domain.s39_vfch

s39_vfchdb = _ida_domain.s39_vfchdb

s39_vfchdbs = _ida_domain.s39_vfchdbs

s39_vfche = _ida_domain.s39_vfche

s39_vfchedb = _ida_domain.s39_vfchedb

s39_vfchedbs = _ida_domain.s39_vfchedbs

s39_vfchesb = _ida_domain.s39_vfchesb

s39_vfchesbs = _ida_domain.s39_vfchesbs

s39_vfchsb = _ida_domain.s39_vfchsb

s39_vfchsbs = _ida_domain.s39_vfchsbs

s39_vfd = _ida_domain.s39_vfd

s39_vfddb = _ida_domain.s39_vfddb

s39_vfdsb = _ida_domain.s39_vfdsb

s39_vfee = _ida_domain.s39_vfee

s39_vfeeb = _ida_domain.s39_vfeeb

s39_vfeebs = _ida_domain.s39_vfeebs

s39_vfeef = _ida_domain.s39_vfeef

s39_vfeefs = _ida_domain.s39_vfeefs

s39_vfeeh = _ida_domain.s39_vfeeh

s39_vfeehs = _ida_domain.s39_vfeehs

s39_vfeezb = _ida_domain.s39_vfeezb

s39_vfeezbs = _ida_domain.s39_vfeezbs

s39_vfeezf = _ida_domain.s39_vfeezf

s39_vfeezfs = _ida_domain.s39_vfeezfs

s39_vfeezh = _ida_domain.s39_vfeezh

s39_vfeezhs = _ida_domain.s39_vfeezhs

s39_vfene = _ida_domain.s39_vfene

s39_vfeneb = _ida_domain.s39_vfeneb

s39_vfenebs = _ida_domain.s39_vfenebs

s39_vfenef = _ida_domain.s39_vfenef

s39_vfenefs = _ida_domain.s39_vfenefs

s39_vfeneh = _ida_domain.s39_vfeneh

s39_vfenehs = _ida_domain.s39_vfenehs

s39_vfenezb = _ida_domain.s39_vfenezb

s39_vfenezbs = _ida_domain.s39_vfenezbs

s39_vfenezf = _ida_domain.s39_vfenezf

s39_vfenezfs = _ida_domain.s39_vfenezfs

s39_vfenezh = _ida_domain.s39_vfenezh

s39_vfenezhs = _ida_domain.s39_vfenezhs

s39_vfi = _ida_domain.s39_vfi

s39_vfidb = _ida_domain.s39_vfidb

s39_vfisb = _ida_domain.s39_vfisb

s39_vfkedb = _ida_domain.s39_vfkedb

s39_vfkedbs = _ida_domain.s39_vfkedbs

s39_vfkesb = _ida_domain.s39_vfkesb

s39_vfkesbs = _ida_domain.s39_vfkesbs

s39_vfkhdb = _ida_domain.s39_vfkhdb

s39_vfkhdbs = _ida_domain.s39_vfkhdbs

s39_vfkhedb = _ida_domain.s39_vfkhedb

s39_vfkhedbs = _ida_domain.s39_vfkhedbs

s39_vfkhesb = _ida_domain.s39_vfkhesb

s39_vfkhesbs = _ida_domain.s39_vfkhesbs

s39_vfkhsb = _ida_domain.s39_vfkhsb

s39_vfkhsbs = _ida_domain.s39_vfkhsbs

s39_vflcdb = _ida_domain.s39_vflcdb

s39_vflcsb = _ida_domain.s39_vflcsb

s39_vfll = _ida_domain.s39_vfll

s39_vflls = _ida_domain.s39_vflls

s39_vflndb = _ida_domain.s39_vflndb

s39_vflnsb = _ida_domain.s39_vflnsb

s39_vflpdb = _ida_domain.s39_vflpdb

s39_vflpsb = _ida_domain.s39_vflpsb

s39_vflr = _ida_domain.s39_vflr

s39_vflrd = _ida_domain.s39_vflrd

s39_vfm = _ida_domain.s39_vfm

s39_vfma = _ida_domain.s39_vfma

s39_vfmadb = _ida_domain.s39_vfmadb

s39_vfmasb = _ida_domain.s39_vfmasb

s39_vfmax = _ida_domain.s39_vfmax

s39_vfmaxdb = _ida_domain.s39_vfmaxdb

s39_vfmaxsb = _ida_domain.s39_vfmaxsb

s39_vfmdb = _ida_domain.s39_vfmdb

s39_vfmin = _ida_domain.s39_vfmin

s39_vfmindb = _ida_domain.s39_vfmindb

s39_vfminsb = _ida_domain.s39_vfminsb

s39_vfms = _ida_domain.s39_vfms

s39_vfmsb = _ida_domain.s39_vfmsb

s39_vfmsdb = _ida_domain.s39_vfmsdb

s39_vfmssb = _ida_domain.s39_vfmssb

s39_vfnma = _ida_domain.s39_vfnma

s39_vfnmadb = _ida_domain.s39_vfnmadb

s39_vfnmasb = _ida_domain.s39_vfnmasb

s39_vfnms = _ida_domain.s39_vfnms

s39_vfnmsdb = _ida_domain.s39_vfnmsdb

s39_vfnmssb = _ida_domain.s39_vfnmssb

s39_vfpso = _ida_domain.s39_vfpso

s39_vfpsodb = _ida_domain.s39_vfpsodb

s39_vfpsosb = _ida_domain.s39_vfpsosb

s39_vfs = _ida_domain.s39_vfs

s39_vfsdb = _ida_domain.s39_vfsdb

s39_vfsq = _ida_domain.s39_vfsq

s39_vfsqdb = _ida_domain.s39_vfsqdb

s39_vfsqsb = _ida_domain.s39_vfsqsb

s39_vfssb = _ida_domain.s39_vfssb

s39_vftci = _ida_domain.s39_vftci

s39_vftcidb = _ida_domain.s39_vftcidb

s39_vftcisb = _ida_domain.s39_vftcisb

s39_vgbm = _ida_domain.s39_vgbm

s39_vgef = _ida_domain.s39_vgef

s39_vgeg = _ida_domain.s39_vgeg

s39_vgfm = _ida_domain.s39_vgfm

s39_vgfma = _ida_domain.s39_vgfma

s39_vgfmab = _ida_domain.s39_vgfmab

s39_vgfmaf = _ida_domain.s39_vgfmaf

s39_vgfmag = _ida_domain.s39_vgfmag

s39_vgfmah = _ida_domain.s39_vgfmah

s39_vgfmb = _ida_domain.s39_vgfmb

s39_vgfmf = _ida_domain.s39_vgfmf

s39_vgfmg = _ida_domain.s39_vgfmg

s39_vgfmh = _ida_domain.s39_vgfmh

s39_vgm = _ida_domain.s39_vgm

s39_vgmb = _ida_domain.s39_vgmb

s39_vgmf = _ida_domain.s39_vgmf

s39_vgmg = _ida_domain.s39_vgmg

s39_vgmh = _ida_domain.s39_vgmh

s39_vistr = _ida_domain.s39_vistr

s39_vistrb = _ida_domain.s39_vistrb

s39_vistrbs = _ida_domain.s39_vistrbs

s39_vistrf = _ida_domain.s39_vistrf

s39_vistrfs = _ida_domain.s39_vistrfs

s39_vistrh = _ida_domain.s39_vistrh

s39_vistrhs = _ida_domain.s39_vistrhs

s39_vl = _ida_domain.s39_vl

s39_vlbb = _ida_domain.s39_vlbb

s39_vlbr = _ida_domain.s39_vlbr

s39_vlbrf = _ida_domain.s39_vlbrf

s39_vlbrg = _ida_domain.s39_vlbrg

s39_vlbrh = _ida_domain.s39_vlbrh

s39_vlbrq = _ida_domain.s39_vlbrq

s39_vlbrrep = _ida_domain.s39_vlbrrep

s39_vlbrrepf = _ida_domain.s39_vlbrrepf

s39_vlbrrepg = _ida_domain.s39_vlbrrepg

s39_vlbrreph = _ida_domain.s39_vlbrreph

s39_vlc = _ida_domain.s39_vlc

s39_vlcb = _ida_domain.s39_vlcb

s39_vlcf = _ida_domain.s39_vlcf

s39_vlcg = _ida_domain.s39_vlcg

s39_vlch = _ida_domain.s39_vlch

s39_vlde = _ida_domain.s39_vlde

s39_vldeb = _ida_domain.s39_vldeb

s39_vleb = _ida_domain.s39_vleb

s39_vlebrf = _ida_domain.s39_vlebrf

s39_vlebrg = _ida_domain.s39_vlebrg

s39_vlebrh = _ida_domain.s39_vlebrh

s39_vled = _ida_domain.s39_vled

s39_vledb = _ida_domain.s39_vledb

s39_vlef = _ida_domain.s39_vlef

s39_vleg = _ida_domain.s39_vleg

s39_vleh = _ida_domain.s39_vleh

s39_vleib = _ida_domain.s39_vleib

s39_vleif = _ida_domain.s39_vleif

s39_vleig = _ida_domain.s39_vleig

s39_vleih = _ida_domain.s39_vleih

s39_vler = _ida_domain.s39_vler

s39_vlerf = _ida_domain.s39_vlerf

s39_vlerg = _ida_domain.s39_vlerg

s39_vlerh = _ida_domain.s39_vlerh

s39_vlgv = _ida_domain.s39_vlgv

s39_vlgvb = _ida_domain.s39_vlgvb

s39_vlgvf = _ida_domain.s39_vlgvf

s39_vlgvg = _ida_domain.s39_vlgvg

s39_vlgvh = _ida_domain.s39_vlgvh

s39_vlip = _ida_domain.s39_vlip

s39_vll = _ida_domain.s39_vll

s39_vllebrz = _ida_domain.s39_vllebrz

s39_vllebrze = _ida_domain.s39_vllebrze

s39_vllebrzf = _ida_domain.s39_vllebrzf

s39_vllebrzg = _ida_domain.s39_vllebrzg

s39_vllebrzh = _ida_domain.s39_vllebrzh

s39_vllez = _ida_domain.s39_vllez

s39_vllezb = _ida_domain.s39_vllezb

s39_vllezf = _ida_domain.s39_vllezf

s39_vllezg = _ida_domain.s39_vllezg

s39_vllezh = _ida_domain.s39_vllezh

s39_vllezlf = _ida_domain.s39_vllezlf

s39_vlm = _ida_domain.s39_vlm

s39_vlp = _ida_domain.s39_vlp

s39_vlpb = _ida_domain.s39_vlpb

s39_vlpf = _ida_domain.s39_vlpf

s39_vlpg = _ida_domain.s39_vlpg

s39_vlph = _ida_domain.s39_vlph

s39_vlr = _ida_domain.s39_vlr

s39_vlrep = _ida_domain.s39_vlrep

s39_vlrepb = _ida_domain.s39_vlrepb

s39_vlrepf = _ida_domain.s39_vlrepf

s39_vlrepg = _ida_domain.s39_vlrepg

s39_vlreph = _ida_domain.s39_vlreph

s39_vlrl = _ida_domain.s39_vlrl

s39_vlrlr = _ida_domain.s39_vlrlr

s39_vlvg = _ida_domain.s39_vlvg

s39_vlvgb = _ida_domain.s39_vlvgb

s39_vlvgf = _ida_domain.s39_vlvgf

s39_vlvgg = _ida_domain.s39_vlvgg

s39_vlvgh = _ida_domain.s39_vlvgh

s39_vlvgp = _ida_domain.s39_vlvgp

s39_vmae = _ida_domain.s39_vmae

s39_vmaeb = _ida_domain.s39_vmaeb

s39_vmaef = _ida_domain.s39_vmaef

s39_vmaeh = _ida_domain.s39_vmaeh

s39_vmah = _ida_domain.s39_vmah

s39_vmahb = _ida_domain.s39_vmahb

s39_vmahf = _ida_domain.s39_vmahf

s39_vmahh = _ida_domain.s39_vmahh

s39_vmal = _ida_domain.s39_vmal

s39_vmalb = _ida_domain.s39_vmalb

s39_vmale = _ida_domain.s39_vmale

s39_vmaleb = _ida_domain.s39_vmaleb

s39_vmalef = _ida_domain.s39_vmalef

s39_vmaleh = _ida_domain.s39_vmaleh

s39_vmalf = _ida_domain.s39_vmalf

s39_vmalh = _ida_domain.s39_vmalh

s39_vmalhb = _ida_domain.s39_vmalhb

s39_vmalhf = _ida_domain.s39_vmalhf

s39_vmalhh = _ida_domain.s39_vmalhh

s39_vmalhw = _ida_domain.s39_vmalhw

s39_vmalo = _ida_domain.s39_vmalo

s39_vmalob = _ida_domain.s39_vmalob

s39_vmalof = _ida_domain.s39_vmalof

s39_vmaloh = _ida_domain.s39_vmaloh

s39_vmao = _ida_domain.s39_vmao

s39_vmaob = _ida_domain.s39_vmaob

s39_vmaof = _ida_domain.s39_vmaof

s39_vmaoh = _ida_domain.s39_vmaoh

s39_vme = _ida_domain.s39_vme

s39_vmeb = _ida_domain.s39_vmeb

s39_vmef = _ida_domain.s39_vmef

s39_vmeh = _ida_domain.s39_vmeh

s39_vmh = _ida_domain.s39_vmh

s39_vmhb = _ida_domain.s39_vmhb

s39_vmhf = _ida_domain.s39_vmhf

s39_vmhh = _ida_domain.s39_vmhh

s39_vml = _ida_domain.s39_vml

s39_vmlb = _ida_domain.s39_vmlb

s39_vmle = _ida_domain.s39_vmle

s39_vmleb = _ida_domain.s39_vmleb

s39_vmlef = _ida_domain.s39_vmlef

s39_vmleh = _ida_domain.s39_vmleh

s39_vmlf = _ida_domain.s39_vmlf

s39_vmlh = _ida_domain.s39_vmlh

s39_vmlhb = _ida_domain.s39_vmlhb

s39_vmlhf = _ida_domain.s39_vmlhf

s39_vmlhh = _ida_domain.s39_vmlhh

s39_vmlhw = _ida_domain.s39_vmlhw

s39_vmlo = _ida_domain.s39_vmlo

s39_vmlob = _ida_domain.s39_vmlob

s39_vmlof = _ida_domain.s39_vmlof

s39_vmloh = _ida_domain.s39_vmloh

s39_vmn = _ida_domain.s39_vmn

s39_vmnb = _ida_domain.s39_vmnb

s39_vmnf = _ida_domain.s39_vmnf

s39_vmng = _ida_domain.s39_vmng

s39_vmnh = _ida_domain.s39_vmnh

s39_vmnl = _ida_domain.s39_vmnl

s39_vmnlb = _ida_domain.s39_vmnlb

s39_vmnlf = _ida_domain.s39_vmnlf

s39_vmnlg = _ida_domain.s39_vmnlg

s39_vmnlh = _ida_domain.s39_vmnlh

s39_vmo = _ida_domain.s39_vmo

s39_vmob = _ida_domain.s39_vmob

s39_vmof = _ida_domain.s39_vmof

s39_vmoh = _ida_domain.s39_vmoh

s39_vmp = _ida_domain.s39_vmp

s39_vmrh = _ida_domain.s39_vmrh

s39_vmrhb = _ida_domain.s39_vmrhb

s39_vmrhf = _ida_domain.s39_vmrhf

s39_vmrhg = _ida_domain.s39_vmrhg

s39_vmrhh = _ida_domain.s39_vmrhh

s39_vmrl = _ida_domain.s39_vmrl

s39_vmrlb = _ida_domain.s39_vmrlb

s39_vmrlf = _ida_domain.s39_vmrlf

s39_vmrlg = _ida_domain.s39_vmrlg

s39_vmrlh = _ida_domain.s39_vmrlh

s39_vmsl = _ida_domain.s39_vmsl

s39_vmslg = _ida_domain.s39_vmslg

s39_vmsp = _ida_domain.s39_vmsp

s39_vmx = _ida_domain.s39_vmx

s39_vmxb = _ida_domain.s39_vmxb

s39_vmxf = _ida_domain.s39_vmxf

s39_vmxg = _ida_domain.s39_vmxg

s39_vmxh = _ida_domain.s39_vmxh

s39_vmxl = _ida_domain.s39_vmxl

s39_vmxlb = _ida_domain.s39_vmxlb

s39_vmxlf = _ida_domain.s39_vmxlf

s39_vmxlg = _ida_domain.s39_vmxlg

s39_vmxlh = _ida_domain.s39_vmxlh

s39_vn = _ida_domain.s39_vn

s39_vnc = _ida_domain.s39_vnc

s39_vnn = _ida_domain.s39_vnn

s39_vno = _ida_domain.s39_vno

s39_vnot = _ida_domain.s39_vnot

s39_vnx = _ida_domain.s39_vnx

s39_vo = _ida_domain.s39_vo

s39_voc = _ida_domain.s39_voc

s39_vone = _ida_domain.s39_vone

s39_vpdi = _ida_domain.s39_vpdi

s39_vperm = _ida_domain.s39_vperm

s39_vpk = _ida_domain.s39_vpk

s39_vpkf = _ida_domain.s39_vpkf

s39_vpkg = _ida_domain.s39_vpkg

s39_vpkh = _ida_domain.s39_vpkh

s39_vpkls = _ida_domain.s39_vpkls

s39_vpklsf = _ida_domain.s39_vpklsf

s39_vpklsfs = _ida_domain.s39_vpklsfs

s39_vpklsg = _ida_domain.s39_vpklsg

s39_vpklsgs = _ida_domain.s39_vpklsgs

s39_vpklsh = _ida_domain.s39_vpklsh

s39_vpklshs = _ida_domain.s39_vpklshs

s39_vpks = _ida_domain.s39_vpks

s39_vpksf = _ida_domain.s39_vpksf

s39_vpksfs = _ida_domain.s39_vpksfs

s39_vpksg = _ida_domain.s39_vpksg

s39_vpksgs = _ida_domain.s39_vpksgs

s39_vpksh = _ida_domain.s39_vpksh

s39_vpkshs = _ida_domain.s39_vpkshs

s39_vpkz = _ida_domain.s39_vpkz

s39_vpopct = _ida_domain.s39_vpopct

s39_vpopctb = _ida_domain.s39_vpopctb

s39_vpopctf = _ida_domain.s39_vpopctf

s39_vpopctg = _ida_domain.s39_vpopctg

s39_vpopcth = _ida_domain.s39_vpopcth

s39_vpsop = _ida_domain.s39_vpsop

s39_vrep = _ida_domain.s39_vrep

s39_vrepb = _ida_domain.s39_vrepb

s39_vrepf = _ida_domain.s39_vrepf

s39_vrepg = _ida_domain.s39_vrepg

s39_vreph = _ida_domain.s39_vreph

s39_vrepi = _ida_domain.s39_vrepi

s39_vrepib = _ida_domain.s39_vrepib

s39_vrepif = _ida_domain.s39_vrepif

s39_vrepig = _ida_domain.s39_vrepig

s39_vrepih = _ida_domain.s39_vrepih

s39_vrp = _ida_domain.s39_vrp

s39_vs = _ida_domain.s39_vs

s39_vsb = _ida_domain.s39_vsb

s39_vsbcbi = _ida_domain.s39_vsbcbi

s39_vsbcbiq = _ida_domain.s39_vsbcbiq

s39_vsbi = _ida_domain.s39_vsbi

s39_vsbiq = _ida_domain.s39_vsbiq

s39_vscbi = _ida_domain.s39_vscbi

s39_vscbib = _ida_domain.s39_vscbib

s39_vscbif = _ida_domain.s39_vscbif

s39_vscbig = _ida_domain.s39_vscbig

s39_vscbih = _ida_domain.s39_vscbih

s39_vscbiq = _ida_domain.s39_vscbiq

s39_vscef = _ida_domain.s39_vscef

s39_vsceg = _ida_domain.s39_vsceg

s39_vsdp = _ida_domain.s39_vsdp

s39_vseg = _ida_domain.s39_vseg

s39_vsegb = _ida_domain.s39_vsegb

s39_vsegf = _ida_domain.s39_vsegf

s39_vsegh = _ida_domain.s39_vsegh

s39_vsel = _ida_domain.s39_vsel

s39_vsf = _ida_domain.s39_vsf

s39_vsg = _ida_domain.s39_vsg

s39_vsh = _ida_domain.s39_vsh

s39_vsl = _ida_domain.s39_vsl

s39_vslb = _ida_domain.s39_vslb

s39_vsld = _ida_domain.s39_vsld

s39_vsldb = _ida_domain.s39_vsldb

s39_vsp = _ida_domain.s39_vsp

s39_vsq = _ida_domain.s39_vsq

s39_vsra = _ida_domain.s39_vsra

s39_vsrab = _ida_domain.s39_vsrab

s39_vsrd = _ida_domain.s39_vsrd

s39_vsrl = _ida_domain.s39_vsrl

s39_vsrlb = _ida_domain.s39_vsrlb

s39_vsrp = _ida_domain.s39_vsrp

s39_vst = _ida_domain.s39_vst

s39_vstbr = _ida_domain.s39_vstbr

s39_vstbrf = _ida_domain.s39_vstbrf

s39_vstbrg = _ida_domain.s39_vstbrg

s39_vstbrh = _ida_domain.s39_vstbrh

s39_vstbrq = _ida_domain.s39_vstbrq

s39_vsteb = _ida_domain.s39_vsteb

s39_vstebrf = _ida_domain.s39_vstebrf

s39_vstebrg = _ida_domain.s39_vstebrg

s39_vstebrh = _ida_domain.s39_vstebrh

s39_vstef = _ida_domain.s39_vstef

s39_vsteg = _ida_domain.s39_vsteg

s39_vsteh = _ida_domain.s39_vsteh

s39_vster = _ida_domain.s39_vster

s39_vsterf = _ida_domain.s39_vsterf

s39_vsterg = _ida_domain.s39_vsterg

s39_vsterh = _ida_domain.s39_vsterh

s39_vstl = _ida_domain.s39_vstl

s39_vstm = _ida_domain.s39_vstm

s39_vstrc = _ida_domain.s39_vstrc

s39_vstrcb = _ida_domain.s39_vstrcb

s39_vstrcbs = _ida_domain.s39_vstrcbs

s39_vstrcf = _ida_domain.s39_vstrcf

s39_vstrcfs = _ida_domain.s39_vstrcfs

s39_vstrch = _ida_domain.s39_vstrch

s39_vstrchs = _ida_domain.s39_vstrchs

s39_vstrczb = _ida_domain.s39_vstrczb

s39_vstrczbs = _ida_domain.s39_vstrczbs

s39_vstrczf = _ida_domain.s39_vstrczf

s39_vstrczfs = _ida_domain.s39_vstrczfs

s39_vstrczh = _ida_domain.s39_vstrczh

s39_vstrczhs = _ida_domain.s39_vstrczhs

s39_vstrl = _ida_domain.s39_vstrl

s39_vstrlr = _ida_domain.s39_vstrlr

s39_vstrs = _ida_domain.s39_vstrs

s39_vstrsb = _ida_domain.s39_vstrsb

s39_vstrsf = _ida_domain.s39_vstrsf

s39_vstrsh = _ida_domain.s39_vstrsh

s39_vstrszb = _ida_domain.s39_vstrszb

s39_vstrszf = _ida_domain.s39_vstrszf

s39_vstrszh = _ida_domain.s39_vstrszh

s39_vsum = _ida_domain.s39_vsum

s39_vsumb = _ida_domain.s39_vsumb

s39_vsumg = _ida_domain.s39_vsumg

s39_vsumgf = _ida_domain.s39_vsumgf

s39_vsumgh = _ida_domain.s39_vsumgh

s39_vsumh = _ida_domain.s39_vsumh

s39_vsumq = _ida_domain.s39_vsumq

s39_vsumqf = _ida_domain.s39_vsumqf

s39_vsumqg = _ida_domain.s39_vsumqg

s39_vtm = _ida_domain.s39_vtm

s39_vtp = _ida_domain.s39_vtp

s39_vuph = _ida_domain.s39_vuph

s39_vuphb = _ida_domain.s39_vuphb

s39_vuphf = _ida_domain.s39_vuphf

s39_vuphh = _ida_domain.s39_vuphh

s39_vupkz = _ida_domain.s39_vupkz

s39_vupl = _ida_domain.s39_vupl

s39_vuplb = _ida_domain.s39_vuplb

s39_vuplf = _ida_domain.s39_vuplf

s39_vuplh = _ida_domain.s39_vuplh

s39_vuplhb = _ida_domain.s39_vuplhb

s39_vuplhf = _ida_domain.s39_vuplhf

s39_vuplhh = _ida_domain.s39_vuplhh

s39_vuplhw = _ida_domain.s39_vuplhw

s39_vupll = _ida_domain.s39_vupll

s39_vupllb = _ida_domain.s39_vupllb

s39_vupllf = _ida_domain.s39_vupllf

s39_vupllh = _ida_domain.s39_vupllh

s39_vzero = _ida_domain.s39_vzero

s39_wcdgb = _ida_domain.s39_wcdgb

s39_wcdlgb = _ida_domain.s39_wcdlgb

s39_wcefb = _ida_domain.s39_wcefb

s39_wcelfb = _ida_domain.s39_wcelfb

s39_wcfeb = _ida_domain.s39_wcfeb

s39_wcgdb = _ida_domain.s39_wcgdb

s39_wclfeb = _ida_domain.s39_wclfeb

s39_wclgdb = _ida_domain.s39_wclgdb

s39_wfadb = _ida_domain.s39_wfadb

s39_wfasb = _ida_domain.s39_wfasb

s39_wfaxb = _ida_domain.s39_wfaxb

s39_wfc = _ida_domain.s39_wfc

s39_wfcdb = _ida_domain.s39_wfcdb

s39_wfcedb = _ida_domain.s39_wfcedb

s39_wfcedbs = _ida_domain.s39_wfcedbs

s39_wfcesb = _ida_domain.s39_wfcesb

s39_wfcesbs = _ida_domain.s39_wfcesbs

s39_wfcexb = _ida_domain.s39_wfcexb

s39_wfcexbs = _ida_domain.s39_wfcexbs

s39_wfchdb = _ida_domain.s39_wfchdb

s39_wfchdbs = _ida_domain.s39_wfchdbs

s39_wfchedb = _ida_domain.s39_wfchedb

s39_wfchedbs = _ida_domain.s39_wfchedbs

s39_wfchesb = _ida_domain.s39_wfchesb

s39_wfchesbs = _ida_domain.s39_wfchesbs

s39_wfchexb = _ida_domain.s39_wfchexb

s39_wfchexbs = _ida_domain.s39_wfchexbs

s39_wfchsb = _ida_domain.s39_wfchsb

s39_wfchsbs = _ida_domain.s39_wfchsbs

s39_wfchxb = _ida_domain.s39_wfchxb

s39_wfchxbs = _ida_domain.s39_wfchxbs

s39_wfcsb = _ida_domain.s39_wfcsb

s39_wfcxb = _ida_domain.s39_wfcxb

s39_wfddb = _ida_domain.s39_wfddb

s39_wfdsb = _ida_domain.s39_wfdsb

s39_wfdxb = _ida_domain.s39_wfdxb

s39_wfidb = _ida_domain.s39_wfidb

s39_wfisb = _ida_domain.s39_wfisb

s39_wfixb = _ida_domain.s39_wfixb

s39_wfk = _ida_domain.s39_wfk

s39_wfkdb = _ida_domain.s39_wfkdb

s39_wfkedb = _ida_domain.s39_wfkedb

s39_wfkedbs = _ida_domain.s39_wfkedbs

s39_wfkesb = _ida_domain.s39_wfkesb

s39_wfkesbs = _ida_domain.s39_wfkesbs

s39_wfkexb = _ida_domain.s39_wfkexb

s39_wfkexbs = _ida_domain.s39_wfkexbs

s39_wfkhdb = _ida_domain.s39_wfkhdb

s39_wfkhdbs = _ida_domain.s39_wfkhdbs

s39_wfkhedb = _ida_domain.s39_wfkhedb

s39_wfkhedbs = _ida_domain.s39_wfkhedbs

s39_wfkhesb = _ida_domain.s39_wfkhesb

s39_wfkhesbs = _ida_domain.s39_wfkhesbs

s39_wfkhexb = _ida_domain.s39_wfkhexb

s39_wfkhexbs = _ida_domain.s39_wfkhexbs

s39_wfkhsb = _ida_domain.s39_wfkhsb

s39_wfkhsbs = _ida_domain.s39_wfkhsbs

s39_wfkhxb = _ida_domain.s39_wfkhxb

s39_wfkhxbs = _ida_domain.s39_wfkhxbs

s39_wfksb = _ida_domain.s39_wfksb

s39_wfkxb = _ida_domain.s39_wfkxb

s39_wflcdb = _ida_domain.s39_wflcdb

s39_wflcsb = _ida_domain.s39_wflcsb

s39_wflcxb = _ida_domain.s39_wflcxb

s39_wflld = _ida_domain.s39_wflld

s39_wflls = _ida_domain.s39_wflls

s39_wflndb = _ida_domain.s39_wflndb

s39_wflnsb = _ida_domain.s39_wflnsb

s39_wflnxb = _ida_domain.s39_wflnxb

s39_wflpdb = _ida_domain.s39_wflpdb

s39_wflpsb = _ida_domain.s39_wflpsb

s39_wflpxb = _ida_domain.s39_wflpxb

s39_wflrd = _ida_domain.s39_wflrd

s39_wflrx = _ida_domain.s39_wflrx

s39_wfmadb = _ida_domain.s39_wfmadb

s39_wfmasb = _ida_domain.s39_wfmasb

s39_wfmaxb = _ida_domain.s39_wfmaxb

s39_wfmaxdb = _ida_domain.s39_wfmaxdb

s39_wfmaxsb = _ida_domain.s39_wfmaxsb

s39_wfmaxxb = _ida_domain.s39_wfmaxxb

s39_wfmdb = _ida_domain.s39_wfmdb

s39_wfmindb = _ida_domain.s39_wfmindb

s39_wfminsb = _ida_domain.s39_wfminsb

s39_wfminxb = _ida_domain.s39_wfminxb

s39_wfmsb = _ida_domain.s39_wfmsb

s39_wfmsdb = _ida_domain.s39_wfmsdb

s39_wfmssb = _ida_domain.s39_wfmssb

s39_wfmsxb = _ida_domain.s39_wfmsxb

s39_wfmxb = _ida_domain.s39_wfmxb

s39_wfnmadb = _ida_domain.s39_wfnmadb

s39_wfnmasb = _ida_domain.s39_wfnmasb

s39_wfnmaxb = _ida_domain.s39_wfnmaxb

s39_wfnmsdb = _ida_domain.s39_wfnmsdb

s39_wfnmssb = _ida_domain.s39_wfnmssb

s39_wfnmsxb = _ida_domain.s39_wfnmsxb

s39_wfpsodb = _ida_domain.s39_wfpsodb

s39_wfpsosb = _ida_domain.s39_wfpsosb

s39_wfpsoxb = _ida_domain.s39_wfpsoxb

s39_wfsdb = _ida_domain.s39_wfsdb

s39_wfsqdb = _ida_domain.s39_wfsqdb

s39_wfsqsb = _ida_domain.s39_wfsqsb

s39_wfsqxb = _ida_domain.s39_wfsqxb

s39_wfssb = _ida_domain.s39_wfssb

s39_wfsxb = _ida_domain.s39_wfsxb

s39_wftcidb = _ida_domain.s39_wftcidb

s39_wftcisb = _ida_domain.s39_wftcisb

s39_wftcixb = _ida_domain.s39_wftcixb

s39_wldeb = _ida_domain.s39_wldeb

s39_wledb = _ida_domain.s39_wledb

s39_x = _ida_domain.s39_x

s39_xc = _ida_domain.s39_xc

s39_xg = _ida_domain.s39_xg

s39_xgr = _ida_domain.s39_xgr

s39_xgrk = _ida_domain.s39_xgrk

s39_xi = _ida_domain.s39_xi

s39_xihf = _ida_domain.s39_xihf

s39_xilf = _ida_domain.s39_xilf

s39_xiy = _ida_domain.s39_xiy

s39_xr = _ida_domain.s39_xr

s39_xrk = _ida_domain.s39_xrk

s39_xsch = _ida_domain.s39_xsch

s39_xy = _ida_domain.s39_xy

s39_zap = _ida_domain.s39_zap

s39_vx = _ida_domain.s39_vx

s39_last = _ida_domain.s39_last

RISCV_null = _ida_domain.RISCV_null

RISCV_lui = _ida_domain.RISCV_lui

RISCV_auipc = _ida_domain.RISCV_auipc

RISCV_jal = _ida_domain.RISCV_jal

RISCV_jalr = _ida_domain.RISCV_jalr

RISCV_beq = _ida_domain.RISCV_beq

RISCV_bne = _ida_domain.RISCV_bne

RISCV_blt = _ida_domain.RISCV_blt

RISCV_bge = _ida_domain.RISCV_bge

RISCV_bltu = _ida_domain.RISCV_bltu

RISCV_bgeu = _ida_domain.RISCV_bgeu

RISCV_lb = _ida_domain.RISCV_lb

RISCV_lh = _ida_domain.RISCV_lh

RISCV_lw = _ida_domain.RISCV_lw

RISCV_lbu = _ida_domain.RISCV_lbu

RISCV_lhu = _ida_domain.RISCV_lhu

RISCV_sb = _ida_domain.RISCV_sb

RISCV_sh = _ida_domain.RISCV_sh

RISCV_sw = _ida_domain.RISCV_sw

RISCV_addi = _ida_domain.RISCV_addi

RISCV_slti = _ida_domain.RISCV_slti

RISCV_sltiu = _ida_domain.RISCV_sltiu

RISCV_xori = _ida_domain.RISCV_xori

RISCV_ori = _ida_domain.RISCV_ori

RISCV_andi = _ida_domain.RISCV_andi

RISCV_slli = _ida_domain.RISCV_slli

RISCV_srli = _ida_domain.RISCV_srli

RISCV_srai = _ida_domain.RISCV_srai

RISCV_add = _ida_domain.RISCV_add

RISCV_sub = _ida_domain.RISCV_sub

RISCV_sll = _ida_domain.RISCV_sll

RISCV_slt = _ida_domain.RISCV_slt

RISCV_sltu = _ida_domain.RISCV_sltu

RISCV_xor = _ida_domain.RISCV_xor

RISCV_srl = _ida_domain.RISCV_srl

RISCV_sra = _ida_domain.RISCV_sra

RISCV_or = _ida_domain.RISCV_or

RISCV_and = _ida_domain.RISCV_and

RISCV_fence = _ida_domain.RISCV_fence

RISCV_ecall = _ida_domain.RISCV_ecall

RISCV_ebreak = _ida_domain.RISCV_ebreak

RISCV_uret = _ida_domain.RISCV_uret

RISCV_sret = _ida_domain.RISCV_sret

RISCV_mret = _ida_domain.RISCV_mret

RISCV_wfi = _ida_domain.RISCV_wfi

RISCV_sfence = _ida_domain.RISCV_sfence

RISCV_hfenceb = _ida_domain.RISCV_hfenceb

RISCV_hfenceg = _ida_domain.RISCV_hfenceg

RISCV_lwu = _ida_domain.RISCV_lwu

RISCV_ld = _ida_domain.RISCV_ld

RISCV_sd = _ida_domain.RISCV_sd

RISCV_addiw = _ida_domain.RISCV_addiw

RISCV_slliw = _ida_domain.RISCV_slliw

RISCV_srliw = _ida_domain.RISCV_srliw

RISCV_sraiw = _ida_domain.RISCV_sraiw

RISCV_addw = _ida_domain.RISCV_addw

RISCV_subw = _ida_domain.RISCV_subw

RISCV_sllw = _ida_domain.RISCV_sllw

RISCV_sltw = _ida_domain.RISCV_sltw

RISCV_srlw = _ida_domain.RISCV_srlw

RISCV_sraw = _ida_domain.RISCV_sraw

RISCV_fencei = _ida_domain.RISCV_fencei

RISCV_csrrw = _ida_domain.RISCV_csrrw

RISCV_csrrs = _ida_domain.RISCV_csrrs

RISCV_csrrc = _ida_domain.RISCV_csrrc

RISCV_csrrwi = _ida_domain.RISCV_csrrwi

RISCV_csrrsi = _ida_domain.RISCV_csrrsi

RISCV_csrrci = _ida_domain.RISCV_csrrci

RISCV_mul = _ida_domain.RISCV_mul

RISCV_mulh = _ida_domain.RISCV_mulh

RISCV_mulhsu = _ida_domain.RISCV_mulhsu

RISCV_mulhu = _ida_domain.RISCV_mulhu

RISCV_div = _ida_domain.RISCV_div

RISCV_divu = _ida_domain.RISCV_divu

RISCV_rem = _ida_domain.RISCV_rem

RISCV_remu = _ida_domain.RISCV_remu

RISCV_mulw = _ida_domain.RISCV_mulw

RISCV_divw = _ida_domain.RISCV_divw

RISCV_divuw = _ida_domain.RISCV_divuw

RISCV_remw = _ida_domain.RISCV_remw

RISCV_remuw = _ida_domain.RISCV_remuw

RISCV_lr = _ida_domain.RISCV_lr

RISCV_sc = _ida_domain.RISCV_sc

RISCV_amoswap = _ida_domain.RISCV_amoswap

RISCV_amoadd = _ida_domain.RISCV_amoadd

RISCV_amoxor = _ida_domain.RISCV_amoxor

RISCV_amoand = _ida_domain.RISCV_amoand

RISCV_amoor = _ida_domain.RISCV_amoor

RISCV_amomin = _ida_domain.RISCV_amomin

RISCV_amomax = _ida_domain.RISCV_amomax

RISCV_amominu = _ida_domain.RISCV_amominu

RISCV_amomaxu = _ida_domain.RISCV_amomaxu

RISCV_amocas = _ida_domain.RISCV_amocas

RISCV_flw = _ida_domain.RISCV_flw

RISCV_fsw = _ida_domain.RISCV_fsw

RISCV_fmadd = _ida_domain.RISCV_fmadd

RISCV_fmsub = _ida_domain.RISCV_fmsub

RISCV_fnmsub = _ida_domain.RISCV_fnmsub

RISCV_fnmadd = _ida_domain.RISCV_fnmadd

RISCV_fadd = _ida_domain.RISCV_fadd

RISCV_fsub = _ida_domain.RISCV_fsub

RISCV_fmul = _ida_domain.RISCV_fmul

RISCV_fdiv = _ida_domain.RISCV_fdiv

RISCV_fsqrt = _ida_domain.RISCV_fsqrt

RISCV_fsgnj = _ida_domain.RISCV_fsgnj

RISCV_fsgnjn = _ida_domain.RISCV_fsgnjn

RISCV_fsgnjx = _ida_domain.RISCV_fsgnjx

RISCV_fmin = _ida_domain.RISCV_fmin

RISCV_fmax = _ida_domain.RISCV_fmax

RISCV_fcvtf2f = _ida_domain.RISCV_fcvtf2f

RISCV_fcvtf2i = _ida_domain.RISCV_fcvtf2i

RISCV_fcvti2f = _ida_domain.RISCV_fcvti2f

RISCV_fmv = _ida_domain.RISCV_fmv

RISCV_feq = _ida_domain.RISCV_feq

RISCV_flt = _ida_domain.RISCV_flt

RISCV_fle = _ida_domain.RISCV_fle

RISCV_fclass = _ida_domain.RISCV_fclass

RISCV_fld = _ida_domain.RISCV_fld

RISCV_fsd = _ida_domain.RISCV_fsd

RISCV_flq = _ida_domain.RISCV_flq

RISCV_fsq = _ida_domain.RISCV_fsq

RISCV_nop = _ida_domain.RISCV_nop

RISCV_li = _ida_domain.RISCV_li

RISCV_mv = _ida_domain.RISCV_mv

RISCV_not = _ida_domain.RISCV_not

RISCV_neg = _ida_domain.RISCV_neg

RISCV_negw = _ida_domain.RISCV_negw

RISCV_sext = _ida_domain.RISCV_sext

RISCV_seqz = _ida_domain.RISCV_seqz

RISCV_snez = _ida_domain.RISCV_snez

RISCV_sltz = _ida_domain.RISCV_sltz

RISCV_sgtz = _ida_domain.RISCV_sgtz

RISCV_fabs = _ida_domain.RISCV_fabs

RISCV_fneg = _ida_domain.RISCV_fneg

RISCV_beqz = _ida_domain.RISCV_beqz

RISCV_bnez = _ida_domain.RISCV_bnez

RISCV_blez = _ida_domain.RISCV_blez

RISCV_bgez = _ida_domain.RISCV_bgez

RISCV_bltz = _ida_domain.RISCV_bltz

RISCV_bgtz = _ida_domain.RISCV_bgtz

RISCV_j = _ida_domain.RISCV_j

RISCV_jr = _ida_domain.RISCV_jr

RISCV_ret = _ida_domain.RISCV_ret

RISCV_rdinstret = _ida_domain.RISCV_rdinstret

RISCV_rdcycle = _ida_domain.RISCV_rdcycle

RISCV_rdtime = _ida_domain.RISCV_rdtime

RISCV_rdinstreth = _ida_domain.RISCV_rdinstreth

RISCV_rdcycleh = _ida_domain.RISCV_rdcycleh

RISCV_rdtimeh = _ida_domain.RISCV_rdtimeh

RISCV_csrr = _ida_domain.RISCV_csrr

RISCV_csrw = _ida_domain.RISCV_csrw

RISCV_csrs = _ida_domain.RISCV_csrs

RISCV_csrc = _ida_domain.RISCV_csrc

RISCV_csrwi = _ida_domain.RISCV_csrwi

RISCV_csrsi = _ida_domain.RISCV_csrsi

RISCV_csrci = _ida_domain.RISCV_csrci

RISCV_frcsr = _ida_domain.RISCV_frcsr

RISCV_fscsr = _ida_domain.RISCV_fscsr

RISCV_frrm = _ida_domain.RISCV_frrm

RISCV_fsrm = _ida_domain.RISCV_fsrm

RISCV_frflags = _ida_domain.RISCV_frflags

RISCV_fsflags = _ida_domain.RISCV_fsflags

RISCV_la = _ida_domain.RISCV_la

RISCV_call = _ida_domain.RISCV_call

RISCV_tail = _ida_domain.RISCV_tail

RISCV_jump = _ida_domain.RISCV_jump

RISCV_vsetvl = _ida_domain.RISCV_vsetvl

RISCV_vsetvli = _ida_domain.RISCV_vsetvli

RISCV_vsetivli = _ida_domain.RISCV_vsetivli

RISCV_vl = _ida_domain.RISCV_vl

RISCV_vs = _ida_domain.RISCV_vs

RISCV_vadd = _ida_domain.RISCV_vadd

RISCV_vsub = _ida_domain.RISCV_vsub

RISCV_vrsub = _ida_domain.RISCV_vrsub

RISCV_vminu = _ida_domain.RISCV_vminu

RISCV_vmin = _ida_domain.RISCV_vmin

RISCV_vmaxu = _ida_domain.RISCV_vmaxu

RISCV_vmax = _ida_domain.RISCV_vmax

RISCV_vand = _ida_domain.RISCV_vand

RISCV_vor = _ida_domain.RISCV_vor

RISCV_vxor = _ida_domain.RISCV_vxor

RISCV_vrgather = _ida_domain.RISCV_vrgather

RISCV_vslideup = _ida_domain.RISCV_vslideup

RISCV_vrgatherei16 = _ida_domain.RISCV_vrgatherei16

RISCV_vslidedown = _ida_domain.RISCV_vslidedown

RISCV_vadc = _ida_domain.RISCV_vadc

RISCV_vmadc = _ida_domain.RISCV_vmadc

RISCV_vsbc = _ida_domain.RISCV_vsbc

RISCV_vmsbc = _ida_domain.RISCV_vmsbc

RISCV_vmerge = _ida_domain.RISCV_vmerge

RISCV_vmv = _ida_domain.RISCV_vmv

RISCV_vmseq = _ida_domain.RISCV_vmseq

RISCV_vmsne = _ida_domain.RISCV_vmsne

RISCV_vmsltu = _ida_domain.RISCV_vmsltu

RISCV_vmslt = _ida_domain.RISCV_vmslt

RISCV_vmsleu = _ida_domain.RISCV_vmsleu

RISCV_vmsle = _ida_domain.RISCV_vmsle

RISCV_vmsgtu = _ida_domain.RISCV_vmsgtu

RISCV_vmsgt = _ida_domain.RISCV_vmsgt

RISCV_vsaddu = _ida_domain.RISCV_vsaddu

RISCV_vsadd = _ida_domain.RISCV_vsadd

RISCV_vssubu = _ida_domain.RISCV_vssubu

RISCV_vssub = _ida_domain.RISCV_vssub

RISCV_vsll = _ida_domain.RISCV_vsll

RISCV_vsmul = _ida_domain.RISCV_vsmul

RISCV_vmvr = _ida_domain.RISCV_vmvr

RISCV_vsrl = _ida_domain.RISCV_vsrl

RISCV_vsra = _ida_domain.RISCV_vsra

RISCV_vssrl = _ida_domain.RISCV_vssrl

RISCV_vssra = _ida_domain.RISCV_vssra

RISCV_vnsrl = _ida_domain.RISCV_vnsrl

RISCV_vnsra = _ida_domain.RISCV_vnsra

RISCV_vnclipu = _ida_domain.RISCV_vnclipu

RISCV_vnclip = _ida_domain.RISCV_vnclip

RISCV_vwredsumu = _ida_domain.RISCV_vwredsumu

RISCV_vwredsum = _ida_domain.RISCV_vwredsum

RISCV_vredsum = _ida_domain.RISCV_vredsum

RISCV_vredand = _ida_domain.RISCV_vredand

RISCV_vredor = _ida_domain.RISCV_vredor

RISCV_vredxor = _ida_domain.RISCV_vredxor

RISCV_vredminu = _ida_domain.RISCV_vredminu

RISCV_vredmin = _ida_domain.RISCV_vredmin

RISCV_vredmaxu = _ida_domain.RISCV_vredmaxu

RISCV_vredmax = _ida_domain.RISCV_vredmax

RISCV_vaaddu = _ida_domain.RISCV_vaaddu

RISCV_vaadd = _ida_domain.RISCV_vaadd

RISCV_vasubu = _ida_domain.RISCV_vasubu

RISCV_vasub = _ida_domain.RISCV_vasub

RISCV_vslide1up = _ida_domain.RISCV_vslide1up

RISCV_vslide1down = _ida_domain.RISCV_vslide1down

RISCV_vcpop = _ida_domain.RISCV_vcpop

RISCV_vfirst = _ida_domain.RISCV_vfirst

RISCV_vmvi = _ida_domain.RISCV_vmvi

RISCV_vzext = _ida_domain.RISCV_vzext

RISCV_vsext = _ida_domain.RISCV_vsext

RISCV_vmsbf = _ida_domain.RISCV_vmsbf

RISCV_vmsof = _ida_domain.RISCV_vmsof

RISCV_vmsif = _ida_domain.RISCV_vmsif

RISCV_viota = _ida_domain.RISCV_viota

RISCV_vid = _ida_domain.RISCV_vid

RISCV_vcompress = _ida_domain.RISCV_vcompress

RISCV_vmandn = _ida_domain.RISCV_vmandn

RISCV_vmand = _ida_domain.RISCV_vmand

RISCV_vmor = _ida_domain.RISCV_vmor

RISCV_vmxor = _ida_domain.RISCV_vmxor

RISCV_vmorn = _ida_domain.RISCV_vmorn

RISCV_vmnand = _ida_domain.RISCV_vmnand

RISCV_vmnor = _ida_domain.RISCV_vmnor

RISCV_vmxnor = _ida_domain.RISCV_vmxnor

RISCV_vdivu = _ida_domain.RISCV_vdivu

RISCV_vdiv = _ida_domain.RISCV_vdiv

RISCV_vremu = _ida_domain.RISCV_vremu

RISCV_vrem = _ida_domain.RISCV_vrem

RISCV_vmulhu = _ida_domain.RISCV_vmulhu

RISCV_vmul = _ida_domain.RISCV_vmul

RISCV_vmulhsu = _ida_domain.RISCV_vmulhsu

RISCV_vmulh = _ida_domain.RISCV_vmulh

RISCV_vmadd = _ida_domain.RISCV_vmadd

RISCV_vnmsub = _ida_domain.RISCV_vnmsub

RISCV_vmacc = _ida_domain.RISCV_vmacc

RISCV_vnmsac = _ida_domain.RISCV_vnmsac

RISCV_vwaddu = _ida_domain.RISCV_vwaddu

RISCV_vwadd = _ida_domain.RISCV_vwadd

RISCV_vwsubu = _ida_domain.RISCV_vwsubu

RISCV_vwsub = _ida_domain.RISCV_vwsub

RISCV_vwadduw = _ida_domain.RISCV_vwadduw

RISCV_vwaddw = _ida_domain.RISCV_vwaddw

RISCV_vwsubuw = _ida_domain.RISCV_vwsubuw

RISCV_vwsubw = _ida_domain.RISCV_vwsubw

RISCV_vwmulu = _ida_domain.RISCV_vwmulu

RISCV_vwmulsu = _ida_domain.RISCV_vwmulsu

RISCV_vwmul = _ida_domain.RISCV_vwmul

RISCV_vwmaccu = _ida_domain.RISCV_vwmaccu

RISCV_vwmacc = _ida_domain.RISCV_vwmacc

RISCV_vwmaccus = _ida_domain.RISCV_vwmaccus

RISCV_vwmaccsu = _ida_domain.RISCV_vwmaccsu

RISCV_vfadd = _ida_domain.RISCV_vfadd

RISCV_vfredusum = _ida_domain.RISCV_vfredusum

RISCV_vfsub = _ida_domain.RISCV_vfsub

RISCV_vfredosum = _ida_domain.RISCV_vfredosum

RISCV_vfmin = _ida_domain.RISCV_vfmin

RISCV_vfredmin = _ida_domain.RISCV_vfredmin

RISCV_vfmax = _ida_domain.RISCV_vfmax

RISCV_vfredmax = _ida_domain.RISCV_vfredmax

RISCV_vfsgnj = _ida_domain.RISCV_vfsgnj

RISCV_vfsgnjn = _ida_domain.RISCV_vfsgnjn

RISCV_vfsgnjx = _ida_domain.RISCV_vfsgnjx

RISCV_vfslide1up = _ida_domain.RISCV_vfslide1up

RISCV_vfslide1down = _ida_domain.RISCV_vfslide1down

RISCV_vfmov = _ida_domain.RISCV_vfmov

RISCV_vfcvt = _ida_domain.RISCV_vfcvt

RISCV_vfwcvt = _ida_domain.RISCV_vfwcvt

RISCV_vfncvt = _ida_domain.RISCV_vfncvt

RISCV_vfsqrt = _ida_domain.RISCV_vfsqrt

RISCV_vfrsqrt7 = _ida_domain.RISCV_vfrsqrt7

RISCV_vfrec7 = _ida_domain.RISCV_vfrec7

RISCV_vfclass = _ida_domain.RISCV_vfclass

RISCV_vfmerge = _ida_domain.RISCV_vfmerge

RISCV_vfmv = _ida_domain.RISCV_vfmv

RISCV_vmfeq = _ida_domain.RISCV_vmfeq

RISCV_vmfle = _ida_domain.RISCV_vmfle

RISCV_vmflt = _ida_domain.RISCV_vmflt

RISCV_vmfne = _ida_domain.RISCV_vmfne

RISCV_vmfgt = _ida_domain.RISCV_vmfgt

RISCV_vmfge = _ida_domain.RISCV_vmfge

RISCV_vfdiv = _ida_domain.RISCV_vfdiv

RISCV_vfrdiv = _ida_domain.RISCV_vfrdiv

RISCV_vfmul = _ida_domain.RISCV_vfmul

RISCV_vfrsub = _ida_domain.RISCV_vfrsub

RISCV_vfmadd = _ida_domain.RISCV_vfmadd

RISCV_vfnmadd = _ida_domain.RISCV_vfnmadd

RISCV_vfmsub = _ida_domain.RISCV_vfmsub

RISCV_vfnmsub = _ida_domain.RISCV_vfnmsub

RISCV_vfmacc = _ida_domain.RISCV_vfmacc

RISCV_vfnmacc = _ida_domain.RISCV_vfnmacc

RISCV_vfmsac = _ida_domain.RISCV_vfmsac

RISCV_vfnmsac = _ida_domain.RISCV_vfnmsac

RISCV_vfwadd = _ida_domain.RISCV_vfwadd

RISCV_vfwredusum = _ida_domain.RISCV_vfwredusum

RISCV_vfwsub = _ida_domain.RISCV_vfwsub

RISCV_vfwredosum = _ida_domain.RISCV_vfwredosum

RISCV_vfwaddw = _ida_domain.RISCV_vfwaddw

RISCV_vfwsubw = _ida_domain.RISCV_vfwsubw

RISCV_vfwmul = _ida_domain.RISCV_vfwmul

RISCV_vfwmacc = _ida_domain.RISCV_vfwmacc

RISCV_vfwnmacc = _ida_domain.RISCV_vfwnmacc

RISCV_vfwmsac = _ida_domain.RISCV_vfwmsac

RISCV_vfwnmsac = _ida_domain.RISCV_vfwnmsac

RISCV_vneg = _ida_domain.RISCV_vneg

RISCV_vwcvt = _ida_domain.RISCV_vwcvt

RISCV_vwcvtu = _ida_domain.RISCV_vwcvtu

RISCV_vnot = _ida_domain.RISCV_vnot

RISCV_vncvt = _ida_domain.RISCV_vncvt

RISCV_vfneg = _ida_domain.RISCV_vfneg

RISCV_vfabs = _ida_domain.RISCV_vfabs

RISCV_vmmv = _ida_domain.RISCV_vmmv

RISCV_vmclr = _ida_domain.RISCV_vmclr

RISCV_vmset = _ida_domain.RISCV_vmset

RISCV_vmnot = _ida_domain.RISCV_vmnot

RISCV_andn = _ida_domain.RISCV_andn

RISCV_bclr = _ida_domain.RISCV_bclr

RISCV_bclri = _ida_domain.RISCV_bclri

RISCV_bext = _ida_domain.RISCV_bext

RISCV_bexti = _ida_domain.RISCV_bexti

RISCV_binv = _ida_domain.RISCV_binv

RISCV_binvi = _ida_domain.RISCV_binvi

RISCV_bset = _ida_domain.RISCV_bset

RISCV_bseti = _ida_domain.RISCV_bseti

RISCV_clmul = _ida_domain.RISCV_clmul

RISCV_clmulh = _ida_domain.RISCV_clmulh

RISCV_clmulr = _ida_domain.RISCV_clmulr

RISCV_clz = _ida_domain.RISCV_clz

RISCV_clzw = _ida_domain.RISCV_clzw

RISCV_cpop = _ida_domain.RISCV_cpop

RISCV_cpopw = _ida_domain.RISCV_cpopw

RISCV_ctz = _ida_domain.RISCV_ctz

RISCV_ctzw = _ida_domain.RISCV_ctzw

RISCV_max = _ida_domain.RISCV_max

RISCV_maxu = _ida_domain.RISCV_maxu

RISCV_min = _ida_domain.RISCV_min

RISCV_minu = _ida_domain.RISCV_minu

RISCV_orc = _ida_domain.RISCV_orc

RISCV_orn = _ida_domain.RISCV_orn

RISCV_rev8 = _ida_domain.RISCV_rev8

RISCV_rol = _ida_domain.RISCV_rol

RISCV_rolw = _ida_domain.RISCV_rolw

RISCV_ror = _ida_domain.RISCV_ror

RISCV_rori = _ida_domain.RISCV_rori

RISCV_roriw = _ida_domain.RISCV_roriw

RISCV_rorw = _ida_domain.RISCV_rorw

RISCV_sh1add = _ida_domain.RISCV_sh1add

RISCV_sh2add = _ida_domain.RISCV_sh2add

RISCV_sh3add = _ida_domain.RISCV_sh3add

RISCV_xnor = _ida_domain.RISCV_xnor

RISCV_zext = _ida_domain.RISCV_zext

RISCV_flh = _ida_domain.RISCV_flh

RISCV_fsh = _ida_domain.RISCV_fsh

RISCV_hl = _ida_domain.RISCV_hl

RISCV_hs = _ida_domain.RISCV_hs

RISCV_sinval = _ida_domain.RISCV_sinval

RISCV_sfencefg = _ida_domain.RISCV_sfencefg

RISCV_hinval = _ida_domain.RISCV_hinval

RISCV_pause = _ida_domain.RISCV_pause

RISCV_cbo = _ida_domain.RISCV_cbo

RISCV_prefetch = _ida_domain.RISCV_prefetch

RISCV_sfencevm = _ida_domain.RISCV_sfencevm

RISCV_aes = _ida_domain.RISCV_aes

RISCV_aes64im = _ida_domain.RISCV_aes64im

RISCV_aes64ks1i = _ida_domain.RISCV_aes64ks1i

RISCV_aes64ks2 = _ida_domain.RISCV_aes64ks2

RISCV_brev8 = _ida_domain.RISCV_brev8

RISCV_pack = _ida_domain.RISCV_pack

RISCV_packh = _ida_domain.RISCV_packh

RISCV_packw = _ida_domain.RISCV_packw

RISCV_sha256 = _ida_domain.RISCV_sha256

RISCV_sha512 = _ida_domain.RISCV_sha512

RISCV_sm3 = _ida_domain.RISCV_sm3

RISCV_sm4 = _ida_domain.RISCV_sm4

RISCV_unzip = _ida_domain.RISCV_unzip

RISCV_xperm4 = _ida_domain.RISCV_xperm4

RISCV_xperm8 = _ida_domain.RISCV_xperm8

RISCV_zip = _ida_domain.RISCV_zip

RISCV_wrsnto = _ida_domain.RISCV_wrsnto

RISCV_wrssto = _ida_domain.RISCV_wrssto

RISCV_thdcachecall = _ida_domain.RISCV_thdcachecall

RISCV_thdcacheciall = _ida_domain.RISCV_thdcacheciall

RISCV_thdcacheiall = _ida_domain.RISCV_thdcacheiall

RISCV_thdcachecpa = _ida_domain.RISCV_thdcachecpa

RISCV_thdcachecipa = _ida_domain.RISCV_thdcachecipa

RISCV_thdcacheipa = _ida_domain.RISCV_thdcacheipa

RISCV_thdcachecva = _ida_domain.RISCV_thdcachecva

RISCV_thdcacheciva = _ida_domain.RISCV_thdcacheciva

RISCV_thdcacheiva = _ida_domain.RISCV_thdcacheiva

RISCV_thdcachecsw = _ida_domain.RISCV_thdcachecsw

RISCV_thdcachecisw = _ida_domain.RISCV_thdcachecisw

RISCV_thdcacheisw = _ida_domain.RISCV_thdcacheisw

RISCV_thdcachecpal1 = _ida_domain.RISCV_thdcachecpal1

RISCV_thdcachecval1 = _ida_domain.RISCV_thdcachecval1

RISCV_thicacheiall = _ida_domain.RISCV_thicacheiall

RISCV_thicacheialls = _ida_domain.RISCV_thicacheialls

RISCV_thicacheipa = _ida_domain.RISCV_thicacheipa

RISCV_thicacheiva = _ida_domain.RISCV_thicacheiva

RISCV_thl2cachecall = _ida_domain.RISCV_thl2cachecall

RISCV_thl2cacheciall = _ida_domain.RISCV_thl2cacheciall

RISCV_thl2cacheiall = _ida_domain.RISCV_thl2cacheiall

RISCV_thsfencevmas = _ida_domain.RISCV_thsfencevmas

RISCV_thsync = _ida_domain.RISCV_thsync

RISCV_thsyncs = _ida_domain.RISCV_thsyncs

RISCV_thsynci = _ida_domain.RISCV_thsynci

RISCV_thsyncis = _ida_domain.RISCV_thsyncis

RISCV_thaddsl = _ida_domain.RISCV_thaddsl

RISCV_thsrri = _ida_domain.RISCV_thsrri

RISCV_thsrriw = _ida_domain.RISCV_thsrriw

RISCV_thext = _ida_domain.RISCV_thext

RISCV_thextu = _ida_domain.RISCV_thextu

RISCV_thff0 = _ida_domain.RISCV_thff0

RISCV_thff1 = _ida_domain.RISCV_thff1

RISCV_threv = _ida_domain.RISCV_threv

RISCV_threvw = _ida_domain.RISCV_threvw

RISCV_thtstnbz = _ida_domain.RISCV_thtstnbz

RISCV_thtst = _ida_domain.RISCV_thtst

RISCV_thmveqz = _ida_domain.RISCV_thmveqz

RISCV_thmvnez = _ida_domain.RISCV_thmvnez

RISCV_thlbia = _ida_domain.RISCV_thlbia

RISCV_thlbib = _ida_domain.RISCV_thlbib

RISCV_thlbuia = _ida_domain.RISCV_thlbuia

RISCV_thlbuib = _ida_domain.RISCV_thlbuib

RISCV_thlhia = _ida_domain.RISCV_thlhia

RISCV_thlhib = _ida_domain.RISCV_thlhib

RISCV_thlhuia = _ida_domain.RISCV_thlhuia

RISCV_thlhuib = _ida_domain.RISCV_thlhuib

RISCV_thlwia = _ida_domain.RISCV_thlwia

RISCV_thlwib = _ida_domain.RISCV_thlwib

RISCV_thlwuia = _ida_domain.RISCV_thlwuia

RISCV_thlwuib = _ida_domain.RISCV_thlwuib

RISCV_thldia = _ida_domain.RISCV_thldia

RISCV_thldib = _ida_domain.RISCV_thldib

RISCV_thsbia = _ida_domain.RISCV_thsbia

RISCV_thsbib = _ida_domain.RISCV_thsbib

RISCV_thshia = _ida_domain.RISCV_thshia

RISCV_thshib = _ida_domain.RISCV_thshib

RISCV_thswia = _ida_domain.RISCV_thswia

RISCV_thswib = _ida_domain.RISCV_thswib

RISCV_thsdia = _ida_domain.RISCV_thsdia

RISCV_thsdib = _ida_domain.RISCV_thsdib

RISCV_thlrb = _ida_domain.RISCV_thlrb

RISCV_thlrbu = _ida_domain.RISCV_thlrbu

RISCV_thlrh = _ida_domain.RISCV_thlrh

RISCV_thlrhu = _ida_domain.RISCV_thlrhu

RISCV_thlrw = _ida_domain.RISCV_thlrw

RISCV_thlrwu = _ida_domain.RISCV_thlrwu

RISCV_thlrd = _ida_domain.RISCV_thlrd

RISCV_thsrb = _ida_domain.RISCV_thsrb

RISCV_thsrh = _ida_domain.RISCV_thsrh

RISCV_thsrw = _ida_domain.RISCV_thsrw

RISCV_thsrd = _ida_domain.RISCV_thsrd

RISCV_thlurb = _ida_domain.RISCV_thlurb

RISCV_thlurbu = _ida_domain.RISCV_thlurbu

RISCV_thlurh = _ida_domain.RISCV_thlurh

RISCV_thlurhu = _ida_domain.RISCV_thlurhu

RISCV_thlurw = _ida_domain.RISCV_thlurw

RISCV_thlurwu = _ida_domain.RISCV_thlurwu

RISCV_thlurd = _ida_domain.RISCV_thlurd

RISCV_thsurb = _ida_domain.RISCV_thsurb

RISCV_thsurh = _ida_domain.RISCV_thsurh

RISCV_thsurw = _ida_domain.RISCV_thsurw

RISCV_thsurd = _ida_domain.RISCV_thsurd

RISCV_thldd = _ida_domain.RISCV_thldd

RISCV_thlwd = _ida_domain.RISCV_thlwd

RISCV_thlwud = _ida_domain.RISCV_thlwud

RISCV_thsdd = _ida_domain.RISCV_thsdd

RISCV_thswd = _ida_domain.RISCV_thswd

RISCV_thflrd = _ida_domain.RISCV_thflrd

RISCV_thflrw = _ida_domain.RISCV_thflrw

RISCV_thflurd = _ida_domain.RISCV_thflurd

RISCV_thflurw = _ida_domain.RISCV_thflurw

RISCV_thfsrd = _ida_domain.RISCV_thfsrd

RISCV_thfsrw = _ida_domain.RISCV_thfsrw

RISCV_thfsurd = _ida_domain.RISCV_thfsurd

RISCV_thfsurw = _ida_domain.RISCV_thfsurw

RISCV_thmula = _ida_domain.RISCV_thmula

RISCV_thmulah = _ida_domain.RISCV_thmulah

RISCV_thmulaw = _ida_domain.RISCV_thmulaw

RISCV_thmuls = _ida_domain.RISCV_thmuls

RISCV_thmulsh = _ida_domain.RISCV_thmulsh

RISCV_thmulsw = _ida_domain.RISCV_thmulsw

RISCV_thfmv = _ida_domain.RISCV_thfmv

RISCV_thipush = _ida_domain.RISCV_thipush

RISCV_thipop = _ida_domain.RISCV_thipop

RISCV_thandn = _ida_domain.RISCV_thandn

RISCV_thorn = _ida_domain.RISCV_thorn

RISCV_thxorn = _ida_domain.RISCV_thxorn

RISCV_thpackl = _ida_domain.RISCV_thpackl

RISCV_thpackh = _ida_domain.RISCV_thpackh

RISCV_thpackhl = _ida_domain.RISCV_thpackhl

RISCV_thvmaqa = _ida_domain.RISCV_thvmaqa

RISCV_thvmaqau = _ida_domain.RISCV_thvmaqau

RISCV_thvmaqasu = _ida_domain.RISCV_thvmaqasu

RISCV_thvmaqaus = _ida_domain.RISCV_thvmaqaus

RISCV_thvpmaqa = _ida_domain.RISCV_thvpmaqa

RISCV_thvpmaqau = _ida_domain.RISCV_thvpmaqau

RISCV_thvpmaqaus = _ida_domain.RISCV_thvpmaqaus

RISCV_thvpmaqasu = _ida_domain.RISCV_thvpmaqasu

RISCV_thvpnclip = _ida_domain.RISCV_thvpnclip

RISCV_thvpnclipu = _ida_domain.RISCV_thvpnclipu

RISCV_thvpwadd = _ida_domain.RISCV_thvpwadd

RISCV_thvpwaddu = _ida_domain.RISCV_thvpwaddu

RISCV_unk = _ida_domain.RISCV_unk

RISCV_last = _ida_domain.RISCV_last

RL78_null = _ida_domain.RL78_null

RL78_subw = _ida_domain.RL78_subw

RL78_movw = _ida_domain.RL78_movw

RL78_call = _ida_domain.RL78_call

RL78_clrw = _ida_domain.RL78_clrw

RL78_addw = _ida_domain.RL78_addw

RL78_ret = _ida_domain.RL78_ret

RL78_sel = _ida_domain.RL78_sel

RL78_push = _ida_domain.RL78_push

RL78_onew = _ida_domain.RL78_onew

RL78_incw = _ida_domain.RL78_incw

RL78_cmpw = _ida_domain.RL78_cmpw

RL78_bnz = _ida_domain.RL78_bnz

RL78_clrb = _ida_domain.RL78_clrb

RL78_and = _ida_domain.RL78_and

RL78_or = _ida_domain.RL78_or

RL78_br = _ida_domain.RL78_br

RL78_pop = _ida_domain.RL78_pop

RL78_cmp = _ida_domain.RL78_cmp

RL78_decw = _ida_domain.RL78_decw

RL78_inc = _ida_domain.RL78_inc

RL78_bz = _ida_domain.RL78_bz

RL78_sknz = _ida_domain.RL78_sknz

RL78_sknh = _ida_domain.RL78_sknh

RL78_skh = _ida_domain.RL78_skh

RL78_xor1 = _ida_domain.RL78_xor1

RL78_or1 = _ida_domain.RL78_or1

RL78_and1 = _ida_domain.RL78_and1

RL78_mov1 = _ida_domain.RL78_mov1

RL78_clr1 = _ida_domain.RL78_clr1

RL78_set1 = _ida_domain.RL78_set1

RL78_not1 = _ida_domain.RL78_not1

RL78_skc = _ida_domain.RL78_skc

RL78_sknc = _ida_domain.RL78_sknc

RL78_skz = _ida_domain.RL78_skz

RL78_mov = _ida_domain.RL78_mov

RL78_btclr = _ida_domain.RL78_btclr

RL78_bt = _ida_domain.RL78_bt

RL78_bf = _ida_domain.RL78_bf

RL78_shl = _ida_domain.RL78_shl

RL78_shr = _ida_domain.RL78_shr

RL78_sar = _ida_domain.RL78_sar

RL78_shlw = _ida_domain.RL78_shlw

RL78_shrw = _ida_domain.RL78_shrw

RL78_sarw = _ida_domain.RL78_sarw

RL78_bc = _ida_domain.RL78_bc

RL78_bnc = _ida_domain.RL78_bnc

RL78_bh = _ida_domain.RL78_bh

RL78_bnh = _ida_domain.RL78_bnh

RL78_add = _ida_domain.RL78_add

RL78_addc = _ida_domain.RL78_addc

RL78_sub = _ida_domain.RL78_sub

RL78_subc = _ida_domain.RL78_subc

RL78_xor = _ida_domain.RL78_xor

RL78_xch = _ida_domain.RL78_xch

RL78_dec = _ida_domain.RL78_dec

RL78_rolwc = _ida_domain.RL78_rolwc

RL78_xchw = _ida_domain.RL78_xchw

RL78_cmps = _ida_domain.RL78_cmps

RL78_movs = _ida_domain.RL78_movs

RL78_halt = _ida_domain.RL78_halt

RL78_cmp0 = _ida_domain.RL78_cmp0

RL78_mulu = _ida_domain.RL78_mulu

RL78_oneb = _ida_domain.RL78_oneb

RL78_ror = _ida_domain.RL78_ror

RL78_rol = _ida_domain.RL78_rol

RL78_rorc = _ida_domain.RL78_rorc

RL78_rolc = _ida_domain.RL78_rolc

RL78_brk = _ida_domain.RL78_brk

RL78_retb = _ida_domain.RL78_retb

RL78_reti = _ida_domain.RL78_reti

RL78_stop = _ida_domain.RL78_stop

RL78_nop = _ida_domain.RL78_nop

RL78_callt = _ida_domain.RL78_callt

RL78_mulhu = _ida_domain.RL78_mulhu

RL78_mulh = _ida_domain.RL78_mulh

RL78_divhu = _ida_domain.RL78_divhu

RL78_divwu = _ida_domain.RL78_divwu

RL78_machu = _ida_domain.RL78_machu

RL78_mach = _ida_domain.RL78_mach

RL78_last = _ida_domain.RL78_last

RX_null = _ida_domain.RX_null

RX_abs = _ida_domain.RX_abs

RX_adc = _ida_domain.RX_adc

RX_add = _ida_domain.RX_add

RX_and = _ida_domain.RX_and

RX_bra = _ida_domain.RX_bra

RX_brk = _ida_domain.RX_brk

RX_bclr = _ida_domain.RX_bclr

RX_bfmov = _ida_domain.RX_bfmov

RX_bfmovz = _ida_domain.RX_bfmovz

RX_beq = _ida_domain.RX_beq

RX_bne = _ida_domain.RX_bne

RX_bgeu = _ida_domain.RX_bgeu

RX_bltu = _ida_domain.RX_bltu

RX_bgtu = _ida_domain.RX_bgtu

RX_bleu = _ida_domain.RX_bleu

RX_bpz = _ida_domain.RX_bpz

RX_bn = _ida_domain.RX_bn

RX_bge = _ida_domain.RX_bge

RX_blt = _ida_domain.RX_blt

RX_bgt = _ida_domain.RX_bgt

RX_ble = _ida_domain.RX_ble

RX_bo = _ida_domain.RX_bo

RX_bno = _ida_domain.RX_bno

RX_bmeq = _ida_domain.RX_bmeq

RX_bmne = _ida_domain.RX_bmne

RX_bmgeu = _ida_domain.RX_bmgeu

RX_bmltu = _ida_domain.RX_bmltu

RX_bmgtu = _ida_domain.RX_bmgtu

RX_bmleu = _ida_domain.RX_bmleu

RX_bmpz = _ida_domain.RX_bmpz

RX_bmn = _ida_domain.RX_bmn

RX_bmge = _ida_domain.RX_bmge

RX_bmlt = _ida_domain.RX_bmlt

RX_bmgt = _ida_domain.RX_bmgt

RX_bmle = _ida_domain.RX_bmle

RX_bmo = _ida_domain.RX_bmo

RX_bmno = _ida_domain.RX_bmno

RX_bnot = _ida_domain.RX_bnot

RX_bset = _ida_domain.RX_bset

RX_bsr = _ida_domain.RX_bsr

RX_btst = _ida_domain.RX_btst

RX_clrpsw = _ida_domain.RX_clrpsw

RX_cmp = _ida_domain.RX_cmp

RX_div = _ida_domain.RX_div

RX_divu = _ida_domain.RX_divu

RX_emaca = _ida_domain.RX_emaca

RX_emsba = _ida_domain.RX_emsba

RX_emula = _ida_domain.RX_emula

RX_emul = _ida_domain.RX_emul

RX_emulu = _ida_domain.RX_emulu

RX_fadd = _ida_domain.RX_fadd

RX_fcmp = _ida_domain.RX_fcmp

RX_fdiv = _ida_domain.RX_fdiv

RX_fmul = _ida_domain.RX_fmul

RX_fsqrt = _ida_domain.RX_fsqrt

RX_fsub = _ida_domain.RX_fsub

RX_ftoi = _ida_domain.RX_ftoi

RX_ftou = _ida_domain.RX_ftou

RX_int = _ida_domain.RX_int

RX_itof = _ida_domain.RX_itof

RX_jmp = _ida_domain.RX_jmp

RX_jsr = _ida_domain.RX_jsr

RX_machi = _ida_domain.RX_machi

RX_maclo = _ida_domain.RX_maclo

RX_maclh = _ida_domain.RX_maclh

RX_max = _ida_domain.RX_max

RX_min = _ida_domain.RX_min

RX_mov = _ida_domain.RX_mov

RX_movco = _ida_domain.RX_movco

RX_movli = _ida_domain.RX_movli

RX_movu = _ida_domain.RX_movu

RX_msbhi = _ida_domain.RX_msbhi

RX_msblo = _ida_domain.RX_msblo

RX_msblh = _ida_domain.RX_msblh

RX_mul = _ida_domain.RX_mul

RX_mulhi = _ida_domain.RX_mulhi

RX_mullo = _ida_domain.RX_mullo

RX_mullh = _ida_domain.RX_mullh

RX_mvfachi = _ida_domain.RX_mvfachi

RX_mvfaclo = _ida_domain.RX_mvfaclo

RX_mvfacmi = _ida_domain.RX_mvfacmi

RX_mvfacgu = _ida_domain.RX_mvfacgu

RX_mvfc = _ida_domain.RX_mvfc

RX_mvtacgu = _ida_domain.RX_mvtacgu

RX_mvtachi = _ida_domain.RX_mvtachi

RX_mvtaclo = _ida_domain.RX_mvtaclo

RX_mvtc = _ida_domain.RX_mvtc

RX_mvtipl = _ida_domain.RX_mvtipl

RX_neg = _ida_domain.RX_neg

RX_nop = _ida_domain.RX_nop

RX_not = _ida_domain.RX_not

RX_or = _ida_domain.RX_or

RX_pop = _ida_domain.RX_pop

RX_popc = _ida_domain.RX_popc

RX_popm = _ida_domain.RX_popm

RX_push = _ida_domain.RX_push

RX_pushc = _ida_domain.RX_pushc

RX_pushm = _ida_domain.RX_pushm

RX_racl = _ida_domain.RX_racl

RX_rdacl = _ida_domain.RX_rdacl

RX_racw = _ida_domain.RX_racw

RX_rdacw = _ida_domain.RX_rdacw

RX_revl = _ida_domain.RX_revl

RX_revw = _ida_domain.RX_revw

RX_rmpa = _ida_domain.RX_rmpa

RX_rolc = _ida_domain.RX_rolc

RX_rorc = _ida_domain.RX_rorc

RX_rotl = _ida_domain.RX_rotl

RX_rotr = _ida_domain.RX_rotr

RX_round = _ida_domain.RX_round

RX_rstr = _ida_domain.RX_rstr

RX_rte = _ida_domain.RX_rte

RX_rtfi = _ida_domain.RX_rtfi

RX_rts = _ida_domain.RX_rts

RX_rtsd = _ida_domain.RX_rtsd

RX_sat = _ida_domain.RX_sat

RX_satr = _ida_domain.RX_satr

RX_save = _ida_domain.RX_save

RX_sbb = _ida_domain.RX_sbb

RX_sceq = _ida_domain.RX_sceq

RX_scne = _ida_domain.RX_scne

RX_scgeu = _ida_domain.RX_scgeu

RX_scltu = _ida_domain.RX_scltu

RX_scgtu = _ida_domain.RX_scgtu

RX_scleu = _ida_domain.RX_scleu

RX_scpz = _ida_domain.RX_scpz

RX_scn = _ida_domain.RX_scn

RX_scge = _ida_domain.RX_scge

RX_sclt = _ida_domain.RX_sclt

RX_scgt = _ida_domain.RX_scgt

RX_scle = _ida_domain.RX_scle

RX_sco = _ida_domain.RX_sco

RX_scno = _ida_domain.RX_scno

RX_scmpu = _ida_domain.RX_scmpu

RX_setpsw = _ida_domain.RX_setpsw

RX_shar = _ida_domain.RX_shar

RX_shll = _ida_domain.RX_shll

RX_shlr = _ida_domain.RX_shlr

RX_smovb = _ida_domain.RX_smovb

RX_smovf = _ida_domain.RX_smovf

RX_smovu = _ida_domain.RX_smovu

RX_sstr = _ida_domain.RX_sstr

RX_stnz = _ida_domain.RX_stnz

RX_stz = _ida_domain.RX_stz

RX_sub = _ida_domain.RX_sub

RX_suntil = _ida_domain.RX_suntil

RX_swhile = _ida_domain.RX_swhile

RX_tst = _ida_domain.RX_tst

RX_utof = _ida_domain.RX_utof

RX_wait = _ida_domain.RX_wait

RX_xchg = _ida_domain.RX_xchg

RX_xor = _ida_domain.RX_xor

RX_dabs = _ida_domain.RX_dabs

RX_dadd = _ida_domain.RX_dadd

RX_dcmpun = _ida_domain.RX_dcmpun

RX_dcmpeq = _ida_domain.RX_dcmpeq

RX_dcmplt = _ida_domain.RX_dcmplt

RX_dcmple = _ida_domain.RX_dcmple

RX_ddiv = _ida_domain.RX_ddiv

RX_dmov = _ida_domain.RX_dmov

RX_dmul = _ida_domain.RX_dmul

RX_dneg = _ida_domain.RX_dneg

RX_dpopm = _ida_domain.RX_dpopm

RX_dpushm = _ida_domain.RX_dpushm

RX_dround = _ida_domain.RX_dround

RX_dsqrt = _ida_domain.RX_dsqrt

RX_dsub = _ida_domain.RX_dsub

RX_dtof = _ida_domain.RX_dtof

RX_dtoi = _ida_domain.RX_dtoi

RX_dtou = _ida_domain.RX_dtou

RX_ftod = _ida_domain.RX_ftod

RX_itod = _ida_domain.RX_itod

RX_mvfdc = _ida_domain.RX_mvfdc

RX_mvfdr = _ida_domain.RX_mvfdr

RX_mvtdc = _ida_domain.RX_mvtdc

RX_utod = _ida_domain.RX_utod

RX_last = _ida_domain.RX_last

XTENSA_null = _ida_domain.XTENSA_null

XTENSA_abs = _ida_domain.XTENSA_abs

XTENSA_add = _ida_domain.XTENSA_add

XTENSA_addi = _ida_domain.XTENSA_addi

XTENSA_addmi = _ida_domain.XTENSA_addmi

XTENSA_addx2 = _ida_domain.XTENSA_addx2

XTENSA_addx4 = _ida_domain.XTENSA_addx4

XTENSA_addx8 = _ida_domain.XTENSA_addx8

XTENSA_and = _ida_domain.XTENSA_and

XTENSA_ball = _ida_domain.XTENSA_ball

XTENSA_bany = _ida_domain.XTENSA_bany

XTENSA_bbc = _ida_domain.XTENSA_bbc

XTENSA_bbs = _ida_domain.XTENSA_bbs

XTENSA_bbci = _ida_domain.XTENSA_bbci

XTENSA_bbsi = _ida_domain.XTENSA_bbsi

XTENSA_beq = _ida_domain.XTENSA_beq

XTENSA_beqi = _ida_domain.XTENSA_beqi

XTENSA_beqz = _ida_domain.XTENSA_beqz

XTENSA_bge = _ida_domain.XTENSA_bge

XTENSA_bgei = _ida_domain.XTENSA_bgei

XTENSA_bgeu = _ida_domain.XTENSA_bgeu

XTENSA_bgeui = _ida_domain.XTENSA_bgeui

XTENSA_bgez = _ida_domain.XTENSA_bgez

XTENSA_blt = _ida_domain.XTENSA_blt

XTENSA_blti = _ida_domain.XTENSA_blti

XTENSA_bltu = _ida_domain.XTENSA_bltu

XTENSA_bltui = _ida_domain.XTENSA_bltui

XTENSA_bltz = _ida_domain.XTENSA_bltz

XTENSA_bnall = _ida_domain.XTENSA_bnall

XTENSA_bnone = _ida_domain.XTENSA_bnone

XTENSA_bne = _ida_domain.XTENSA_bne

XTENSA_bnei = _ida_domain.XTENSA_bnei

XTENSA_bnez = _ida_domain.XTENSA_bnez

XTENSA_break = _ida_domain.XTENSA_break

XTENSA_call0 = _ida_domain.XTENSA_call0

XTENSA_call4 = _ida_domain.XTENSA_call4

XTENSA_call8 = _ida_domain.XTENSA_call8

XTENSA_call12 = _ida_domain.XTENSA_call12

XTENSA_callx0 = _ida_domain.XTENSA_callx0

XTENSA_callx4 = _ida_domain.XTENSA_callx4

XTENSA_callx8 = _ida_domain.XTENSA_callx8

XTENSA_callx12 = _ida_domain.XTENSA_callx12

XTENSA_dsync = _ida_domain.XTENSA_dsync

XTENSA_entry = _ida_domain.XTENSA_entry

XTENSA_esync = _ida_domain.XTENSA_esync

XTENSA_excw = _ida_domain.XTENSA_excw

XTENSA_extui = _ida_domain.XTENSA_extui

XTENSA_extw = _ida_domain.XTENSA_extw

XTENSA_isync = _ida_domain.XTENSA_isync

XTENSA_j = _ida_domain.XTENSA_j

XTENSA_jx = _ida_domain.XTENSA_jx

XTENSA_loop = _ida_domain.XTENSA_loop

XTENSA_loopgtz = _ida_domain.XTENSA_loopgtz

XTENSA_loopnez = _ida_domain.XTENSA_loopnez

XTENSA_lsi = _ida_domain.XTENSA_lsi

XTENSA_lsx = _ida_domain.XTENSA_lsx

XTENSA_l8ui = _ida_domain.XTENSA_l8ui

XTENSA_l16si = _ida_domain.XTENSA_l16si

XTENSA_l16ui = _ida_domain.XTENSA_l16ui

XTENSA_l32i = _ida_domain.XTENSA_l32i

XTENSA_l32r = _ida_domain.XTENSA_l32r

XTENSA_max = _ida_domain.XTENSA_max

XTENSA_maxu = _ida_domain.XTENSA_maxu

XTENSA_memw = _ida_domain.XTENSA_memw

XTENSA_min = _ida_domain.XTENSA_min

XTENSA_minu = _ida_domain.XTENSA_minu

XTENSA_mov = _ida_domain.XTENSA_mov

XTENSA_moveqz = _ida_domain.XTENSA_moveqz

XTENSA_movgez = _ida_domain.XTENSA_movgez

XTENSA_movi = _ida_domain.XTENSA_movi

XTENSA_movltz = _ida_domain.XTENSA_movltz

XTENSA_movnez = _ida_domain.XTENSA_movnez

XTENSA_mul16s = _ida_domain.XTENSA_mul16s

XTENSA_mul16u = _ida_domain.XTENSA_mul16u

XTENSA_mull = _ida_domain.XTENSA_mull

XTENSA_neg = _ida_domain.XTENSA_neg

XTENSA_nsa = _ida_domain.XTENSA_nsa

XTENSA_nsau = _ida_domain.XTENSA_nsau

XTENSA_nop = _ida_domain.XTENSA_nop

XTENSA_or = _ida_domain.XTENSA_or

XTENSA_ret = _ida_domain.XTENSA_ret

XTENSA_retw = _ida_domain.XTENSA_retw

XTENSA_rfe = _ida_domain.XTENSA_rfe

XTENSA_rfi = _ida_domain.XTENSA_rfi

XTENSA_rsil = _ida_domain.XTENSA_rsil

XTENSA_rsr = _ida_domain.XTENSA_rsr

XTENSA_rsync = _ida_domain.XTENSA_rsync

XTENSA_s8i = _ida_domain.XTENSA_s8i

XTENSA_s16i = _ida_domain.XTENSA_s16i

XTENSA_s32i = _ida_domain.XTENSA_s32i

XTENSA_s32ri = _ida_domain.XTENSA_s32ri

XTENSA_sext = _ida_domain.XTENSA_sext

XTENSA_sll = _ida_domain.XTENSA_sll

XTENSA_slli = _ida_domain.XTENSA_slli

XTENSA_sra = _ida_domain.XTENSA_sra

XTENSA_srai = _ida_domain.XTENSA_srai

XTENSA_src = _ida_domain.XTENSA_src

XTENSA_srl = _ida_domain.XTENSA_srl

XTENSA_srli = _ida_domain.XTENSA_srli

XTENSA_ssa8b = _ida_domain.XTENSA_ssa8b

XTENSA_ssa8l = _ida_domain.XTENSA_ssa8l

XTENSA_ssai = _ida_domain.XTENSA_ssai

XTENSA_ssl = _ida_domain.XTENSA_ssl

XTENSA_ssr = _ida_domain.XTENSA_ssr

XTENSA_sub = _ida_domain.XTENSA_sub

XTENSA_subx2 = _ida_domain.XTENSA_subx2

XTENSA_subx4 = _ida_domain.XTENSA_subx4

XTENSA_subx8 = _ida_domain.XTENSA_subx8

XTENSA_waiti = _ida_domain.XTENSA_waiti

XTENSA_wdtlb = _ida_domain.XTENSA_wdtlb

XTENSA_witlb = _ida_domain.XTENSA_witlb

XTENSA_wsr = _ida_domain.XTENSA_wsr

XTENSA_xor = _ida_domain.XTENSA_xor

XTENSA_xsr = _ida_domain.XTENSA_xsr

XTENSA_ill = _ida_domain.XTENSA_ill

XTENSA_andi = _ida_domain.XTENSA_andi

XTENSA_ori = _ida_domain.XTENSA_ori

XTENSA_rur = _ida_domain.XTENSA_rur

XTENSA_wur = _ida_domain.XTENSA_wur

XTENSA_fsync = _ida_domain.XTENSA_fsync

XTENSA_rer = _ida_domain.XTENSA_rer

XTENSA_s32nb = _ida_domain.XTENSA_s32nb

XTENSA_salt = _ida_domain.XTENSA_salt

XTENSA_saltu = _ida_domain.XTENSA_saltu

XTENSA_wer = _ida_domain.XTENSA_wer

XTENSA_dhi_b = _ida_domain.XTENSA_dhi_b

XTENSA_dhwb_b = _ida_domain.XTENSA_dhwb_b

XTENSA_dhwbi_b = _ida_domain.XTENSA_dhwbi_b

XTENSA_dpfm_b = _ida_domain.XTENSA_dpfm_b

XTENSA_dpfm_bf = _ida_domain.XTENSA_dpfm_bf

XTENSA_dpfr_b = _ida_domain.XTENSA_dpfr_b

XTENSA_dpfr_bf = _ida_domain.XTENSA_dpfr_bf

XTENSA_dpfw_b = _ida_domain.XTENSA_dpfw_b

XTENSA_dpfw_bf = _ida_domain.XTENSA_dpfw_bf

XTENSA_all4 = _ida_domain.XTENSA_all4

XTENSA_all8 = _ida_domain.XTENSA_all8

XTENSA_andb = _ida_domain.XTENSA_andb

XTENSA_andbc = _ida_domain.XTENSA_andbc

XTENSA_any4 = _ida_domain.XTENSA_any4

XTENSA_any8 = _ida_domain.XTENSA_any8

XTENSA_bf = _ida_domain.XTENSA_bf

XTENSA_bt = _ida_domain.XTENSA_bt

XTENSA_movf = _ida_domain.XTENSA_movf

XTENSA_movt = _ida_domain.XTENSA_movt

XTENSA_orb = _ida_domain.XTENSA_orb

XTENSA_orbc = _ida_domain.XTENSA_orbc

XTENSA_xorb = _ida_domain.XTENSA_xorb

XTENSA_s32c1i = _ida_domain.XTENSA_s32c1i

XTENSA_dci = _ida_domain.XTENSA_dci

XTENSA_dcwb = _ida_domain.XTENSA_dcwb

XTENSA_dcwbi = _ida_domain.XTENSA_dcwbi

XTENSA_dhi = _ida_domain.XTENSA_dhi

XTENSA_dhu = _ida_domain.XTENSA_dhu

XTENSA_dhwb = _ida_domain.XTENSA_dhwb

XTENSA_dhwbi = _ida_domain.XTENSA_dhwbi

XTENSA_dii = _ida_domain.XTENSA_dii

XTENSA_diu = _ida_domain.XTENSA_diu

XTENSA_diwb = _ida_domain.XTENSA_diwb

XTENSA_diwbi = _ida_domain.XTENSA_diwbi

XTENSA_diwbui_p = _ida_domain.XTENSA_diwbui_p

XTENSA_dpfl = _ida_domain.XTENSA_dpfl

XTENSA_dpfr = _ida_domain.XTENSA_dpfr

XTENSA_dpfro = _ida_domain.XTENSA_dpfro

XTENSA_dpfw = _ida_domain.XTENSA_dpfw

XTENSA_dpfwo = _ida_domain.XTENSA_dpfwo

XTENSA_ldct = _ida_domain.XTENSA_ldct

XTENSA_ldcw = _ida_domain.XTENSA_ldcw

XTENSA_sdct = _ida_domain.XTENSA_sdct

XTENSA_sdcw = _ida_domain.XTENSA_sdcw

XTENSA_lddr32_p = _ida_domain.XTENSA_lddr32_p

XTENSA_rfdd = _ida_domain.XTENSA_rfdd

XTENSA_rfdo = _ida_domain.XTENSA_rfdo

XTENSA_sddr32_p = _ida_domain.XTENSA_sddr32_p

XTENSA_depbits = _ida_domain.XTENSA_depbits

XTENSA_rfde = _ida_domain.XTENSA_rfde

XTENSA_rfue = _ida_domain.XTENSA_rfue

XTENSA_syscall = _ida_domain.XTENSA_syscall

XTENSA_clrex = _ida_domain.XTENSA_clrex

XTENSA_getex = _ida_domain.XTENSA_getex

XTENSA_l32ex = _ida_domain.XTENSA_l32ex

XTENSA_s32ex = _ida_domain.XTENSA_s32ex

XTENSA_abs_d = _ida_domain.XTENSA_abs_d

XTENSA_abs_s = _ida_domain.XTENSA_abs_s

XTENSA_add_d = _ida_domain.XTENSA_add_d

XTENSA_add_s = _ida_domain.XTENSA_add_s

XTENSA_addexp_d = _ida_domain.XTENSA_addexp_d

XTENSA_addexp_s = _ida_domain.XTENSA_addexp_s

XTENSA_addexpm_d = _ida_domain.XTENSA_addexpm_d

XTENSA_addexpm_s = _ida_domain.XTENSA_addexpm_s

XTENSA_ceil_d = _ida_domain.XTENSA_ceil_d

XTENSA_ceil_s = _ida_domain.XTENSA_ceil_s

XTENSA_const_d = _ida_domain.XTENSA_const_d

XTENSA_const_s = _ida_domain.XTENSA_const_s

XTENSA_cvtd_s = _ida_domain.XTENSA_cvtd_s

XTENSA_cvts_d = _ida_domain.XTENSA_cvts_d

XTENSA_div0_d = _ida_domain.XTENSA_div0_d

XTENSA_div0_s = _ida_domain.XTENSA_div0_s

XTENSA_divn_d = _ida_domain.XTENSA_divn_d

XTENSA_divn_s = _ida_domain.XTENSA_divn_s

XTENSA_float_d = _ida_domain.XTENSA_float_d

XTENSA_float_s = _ida_domain.XTENSA_float_s

XTENSA_floor_d = _ida_domain.XTENSA_floor_d

XTENSA_floor_s = _ida_domain.XTENSA_floor_s

XTENSA_ldi = _ida_domain.XTENSA_ldi

XTENSA_ldip = _ida_domain.XTENSA_ldip

XTENSA_ldx = _ida_domain.XTENSA_ldx

XTENSA_ldxp = _ida_domain.XTENSA_ldxp

XTENSA_lsip = _ida_domain.XTENSA_lsip

XTENSA_lsiu = _ida_domain.XTENSA_lsiu

XTENSA_lsxp = _ida_domain.XTENSA_lsxp

XTENSA_lsxu = _ida_domain.XTENSA_lsxu

XTENSA_madd_d = _ida_domain.XTENSA_madd_d

XTENSA_madd_s = _ida_domain.XTENSA_madd_s

XTENSA_maddn_d = _ida_domain.XTENSA_maddn_d

XTENSA_maddn_s = _ida_domain.XTENSA_maddn_s

XTENSA_mkdadj_d = _ida_domain.XTENSA_mkdadj_d

XTENSA_mkdadj_s = _ida_domain.XTENSA_mkdadj_s

XTENSA_mksadj_d = _ida_domain.XTENSA_mksadj_d

XTENSA_mksadj_s = _ida_domain.XTENSA_mksadj_s

XTENSA_mov_d = _ida_domain.XTENSA_mov_d

XTENSA_mov_s = _ida_domain.XTENSA_mov_s

XTENSA_moveqz_s = _ida_domain.XTENSA_moveqz_s

XTENSA_movf_s = _ida_domain.XTENSA_movf_s

XTENSA_movgez_s = _ida_domain.XTENSA_movgez_s

XTENSA_movltz_s = _ida_domain.XTENSA_movltz_s

XTENSA_movnez_s = _ida_domain.XTENSA_movnez_s

XTENSA_movt_s = _ida_domain.XTENSA_movt_s

XTENSA_msub_d = _ida_domain.XTENSA_msub_d

XTENSA_msub_s = _ida_domain.XTENSA_msub_s

XTENSA_mul_d = _ida_domain.XTENSA_mul_d

XTENSA_mul_s = _ida_domain.XTENSA_mul_s

XTENSA_neg_d = _ida_domain.XTENSA_neg_d

XTENSA_neg_s = _ida_domain.XTENSA_neg_s

XTENSA_nexp01_d = _ida_domain.XTENSA_nexp01_d

XTENSA_nexp01_s = _ida_domain.XTENSA_nexp01_s

XTENSA_oeq_d = _ida_domain.XTENSA_oeq_d

XTENSA_oeq_s = _ida_domain.XTENSA_oeq_s

XTENSA_ole_d = _ida_domain.XTENSA_ole_d

XTENSA_ole_s = _ida_domain.XTENSA_ole_s

XTENSA_olt_d = _ida_domain.XTENSA_olt_d

XTENSA_olt_s = _ida_domain.XTENSA_olt_s

XTENSA_recip0_d = _ida_domain.XTENSA_recip0_d

XTENSA_recip0_s = _ida_domain.XTENSA_recip0_s

XTENSA_rfr = _ida_domain.XTENSA_rfr

XTENSA_rfrd = _ida_domain.XTENSA_rfrd

XTENSA_round_d = _ida_domain.XTENSA_round_d

XTENSA_round_s = _ida_domain.XTENSA_round_s

XTENSA_rsqrt0_d = _ida_domain.XTENSA_rsqrt0_d

XTENSA_rsqrt0_s = _ida_domain.XTENSA_rsqrt0_s

XTENSA_sdi = _ida_domain.XTENSA_sdi

XTENSA_sdip = _ida_domain.XTENSA_sdip

XTENSA_sdx = _ida_domain.XTENSA_sdx

XTENSA_sdxp = _ida_domain.XTENSA_sdxp

XTENSA_sqrt0_d = _ida_domain.XTENSA_sqrt0_d

XTENSA_sqrt0_s = _ida_domain.XTENSA_sqrt0_s

XTENSA_ssi = _ida_domain.XTENSA_ssi

XTENSA_ssip = _ida_domain.XTENSA_ssip

XTENSA_ssiu = _ida_domain.XTENSA_ssiu

XTENSA_ssx = _ida_domain.XTENSA_ssx

XTENSA_ssxp = _ida_domain.XTENSA_ssxp

XTENSA_ssxu = _ida_domain.XTENSA_ssxu

XTENSA_sub_d = _ida_domain.XTENSA_sub_d

XTENSA_sub_s = _ida_domain.XTENSA_sub_s

XTENSA_trunc_d = _ida_domain.XTENSA_trunc_d

XTENSA_trunc_s = _ida_domain.XTENSA_trunc_s

XTENSA_ueq_d = _ida_domain.XTENSA_ueq_d

XTENSA_ueq_s = _ida_domain.XTENSA_ueq_s

XTENSA_ufloat_d = _ida_domain.XTENSA_ufloat_d

XTENSA_ufloat_s = _ida_domain.XTENSA_ufloat_s

XTENSA_ule_d = _ida_domain.XTENSA_ule_d

XTENSA_ule_s = _ida_domain.XTENSA_ule_s

XTENSA_ult_d = _ida_domain.XTENSA_ult_d

XTENSA_ult_s = _ida_domain.XTENSA_ult_s

XTENSA_un_d = _ida_domain.XTENSA_un_d

XTENSA_un_s = _ida_domain.XTENSA_un_s

XTENSA_utrunc_d = _ida_domain.XTENSA_utrunc_d

XTENSA_utrunc_s = _ida_domain.XTENSA_utrunc_s

XTENSA_wfr = _ida_domain.XTENSA_wfr

XTENSA_wfrd = _ida_domain.XTENSA_wfrd

XTENSA_ihi = _ida_domain.XTENSA_ihi

XTENSA_ihu = _ida_domain.XTENSA_ihu

XTENSA_iii = _ida_domain.XTENSA_iii

XTENSA_iiu = _ida_domain.XTENSA_iiu

XTENSA_ipf = _ida_domain.XTENSA_ipf

XTENSA_ipfl = _ida_domain.XTENSA_ipfl

XTENSA_lict = _ida_domain.XTENSA_lict

XTENSA_licw = _ida_domain.XTENSA_licw

XTENSA_sict = _ida_domain.XTENSA_sict

XTENSA_sicw = _ida_domain.XTENSA_sicw

XTENSA_mulsh = _ida_domain.XTENSA_mulsh

XTENSA_muluh = _ida_domain.XTENSA_muluh

XTENSA_quos = _ida_domain.XTENSA_quos

XTENSA_quou = _ida_domain.XTENSA_quou

XTENSA_rems = _ida_domain.XTENSA_rems

XTENSA_remu = _ida_domain.XTENSA_remu

XTENSA_lddec = _ida_domain.XTENSA_lddec

XTENSA_ldinc = _ida_domain.XTENSA_ldinc

XTENSA_mul_aa = _ida_domain.XTENSA_mul_aa

XTENSA_mul_ad = _ida_domain.XTENSA_mul_ad

XTENSA_mul_da = _ida_domain.XTENSA_mul_da

XTENSA_mul_dd = _ida_domain.XTENSA_mul_dd

XTENSA_mula_aa = _ida_domain.XTENSA_mula_aa

XTENSA_mula_ad = _ida_domain.XTENSA_mula_ad

XTENSA_mula_da = _ida_domain.XTENSA_mula_da

XTENSA_mula_da_lddec = _ida_domain.XTENSA_mula_da_lddec

XTENSA_mula_da_ldinc = _ida_domain.XTENSA_mula_da_ldinc

XTENSA_mula_dd = _ida_domain.XTENSA_mula_dd

XTENSA_mula_dd_lddec = _ida_domain.XTENSA_mula_dd_lddec

XTENSA_mula_dd_ldinc = _ida_domain.XTENSA_mula_dd_ldinc

XTENSA_muls_aa = _ida_domain.XTENSA_muls_aa

XTENSA_muls_ad = _ida_domain.XTENSA_muls_ad

XTENSA_muls_da = _ida_domain.XTENSA_muls_da

XTENSA_muls_dd = _ida_domain.XTENSA_muls_dd

XTENSA_umul_aa = _ida_domain.XTENSA_umul_aa

XTENSA_rfme = _ida_domain.XTENSA_rfme

XTENSA_clamps = _ida_domain.XTENSA_clamps

XTENSA_l32ai = _ida_domain.XTENSA_l32ai

XTENSA_idtlb = _ida_domain.XTENSA_idtlb

XTENSA_iitlb = _ida_domain.XTENSA_iitlb

XTENSA_pdtlb = _ida_domain.XTENSA_pdtlb

XTENSA_pitlb = _ida_domain.XTENSA_pitlb

XTENSA_pptlb = _ida_domain.XTENSA_pptlb

XTENSA_rdtlb0 = _ida_domain.XTENSA_rdtlb0

XTENSA_rdtlb1 = _ida_domain.XTENSA_rdtlb1

XTENSA_ritlb0 = _ida_domain.XTENSA_ritlb0

XTENSA_ritlb1 = _ida_domain.XTENSA_ritlb1

XTENSA_rptlb0 = _ida_domain.XTENSA_rptlb0

XTENSA_rptlb1 = _ida_domain.XTENSA_rptlb1

XTENSA_wptlb = _ida_domain.XTENSA_wptlb

XTENSA_simcall = _ida_domain.XTENSA_simcall

XTENSA_l32e = _ida_domain.XTENSA_l32e

XTENSA_movsp = _ida_domain.XTENSA_movsp

XTENSA_rfwo = _ida_domain.XTENSA_rfwo

XTENSA_rfwu = _ida_domain.XTENSA_rfwu

XTENSA_rotw = _ida_domain.XTENSA_rotw

XTENSA_s32e = _ida_domain.XTENSA_s32e

XTENSA_clrb_expstate = _ida_domain.XTENSA_clrb_expstate

XTENSA_hwwdtlba = _ida_domain.XTENSA_hwwdtlba

XTENSA_hwwitlba = _ida_domain.XTENSA_hwwitlba

XTENSA_ldpte = _ida_domain.XTENSA_ldpte

XTENSA_read_impwire = _ida_domain.XTENSA_read_impwire

XTENSA_setb_expstate = _ida_domain.XTENSA_setb_expstate

XTENSA_wrmsk_expstate = _ida_domain.XTENSA_wrmsk_expstate

XTENSA_ae2_rur = _ida_domain.XTENSA_ae2_rur

XTENSA_ae2_wur = _ida_domain.XTENSA_ae2_wur

XTENSA_ae_rur = _ida_domain.XTENSA_ae_rur

XTENSA_ae_wur = _ida_domain.XTENSA_ae_wur

XTENSA_last = _ida_domain.XTENSA_last

class dyn_stkpnt_array(object):
    r"""Proxy of C++ dynamic_wrapped_array_t< stkpnt_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data: "stkpnt_t *" = property(_ida_domain.dyn_stkpnt_array_data_get, doc=r"""data""")
    count: "size_t" = property(_ida_domain.dyn_stkpnt_array_count_get, doc=r"""count""")

    def __init__(self, _data: "stkpnt_t", _count: "size_t"):
        r"""__init__(self, _data, _count) -> dyn_stkpnt_array"""
        _ida_domain.dyn_stkpnt_array_swiginit(self, _ida_domain.new_dyn_stkpnt_array(_data, _count))

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.dyn_stkpnt_array___len__(self)

    def __getitem__(self, i: "size_t") -> "stkpnt_t const &":
        r"""__getitem__(self, i) -> stkpnt_t"""
        return _ida_domain.dyn_stkpnt_array___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "stkpnt_t") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.dyn_stkpnt_array___setitem__(self, i, v)

    __iter__ = ida_idaapi._bounded_getitem_iterator

    __swig_destroy__ = _ida_domain.delete_dyn_stkpnt_array

# Register dyn_stkpnt_array in _ida_domain:
_ida_domain.dyn_stkpnt_array_swigregister(dyn_stkpnt_array)
class dyn_regvar_array(object):
    r"""Proxy of C++ dynamic_wrapped_array_t< regvar_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data: "regvar_t *" = property(_ida_domain.dyn_regvar_array_data_get, doc=r"""data""")
    count: "size_t" = property(_ida_domain.dyn_regvar_array_count_get, doc=r"""count""")

    def __init__(self, _data: "regvar_t", _count: "size_t"):
        r"""__init__(self, _data, _count) -> dyn_regvar_array"""
        _ida_domain.dyn_regvar_array_swiginit(self, _ida_domain.new_dyn_regvar_array(_data, _count))

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.dyn_regvar_array___len__(self)

    def __getitem__(self, i: "size_t") -> "regvar_t const &":
        r"""__getitem__(self, i) -> regvar_t"""
        return _ida_domain.dyn_regvar_array___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "regvar_t") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.dyn_regvar_array___setitem__(self, i, v)

    __iter__ = ida_idaapi._bounded_getitem_iterator

    __swig_destroy__ = _ida_domain.delete_dyn_regvar_array

# Register dyn_regvar_array in _ida_domain:
_ida_domain.dyn_regvar_array_swigregister(dyn_regvar_array)
class dyn_range_array(object):
    r"""Proxy of C++ dynamic_wrapped_array_t< range_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data: "range_t *" = property(_ida_domain.dyn_range_array_data_get, doc=r"""data""")
    count: "size_t" = property(_ida_domain.dyn_range_array_count_get, doc=r"""count""")

    def __init__(self, _data: "range_t", _count: "size_t"):
        r"""__init__(self, _data, _count) -> dyn_range_array"""
        _ida_domain.dyn_range_array_swiginit(self, _ida_domain.new_dyn_range_array(_data, _count))

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.dyn_range_array___len__(self)

    def __getitem__(self, i: "size_t") -> "range_t const &":
        r"""__getitem__(self, i) -> range_t"""
        return _ida_domain.dyn_range_array___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "range_t") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.dyn_range_array___setitem__(self, i, v)

    __iter__ = ida_idaapi._bounded_getitem_iterator

    __swig_destroy__ = _ida_domain.delete_dyn_range_array

# Register dyn_range_array in _ida_domain:
_ida_domain.dyn_range_array_swigregister(dyn_range_array)
class dyn_ea_array(object):
    r"""Proxy of C++ dynamic_wrapped_array_t< ea_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data: "unsigned long long *" = property(_ida_domain.dyn_ea_array_data_get, doc=r"""data""")
    count: "size_t" = property(_ida_domain.dyn_ea_array_count_get, doc=r"""count""")

    def __init__(self, _data: "unsigned long long *", _count: "size_t"):
        r"""__init__(self, _data, _count) -> dyn_ea_array"""
        _ida_domain.dyn_ea_array_swiginit(self, _ida_domain.new_dyn_ea_array(_data, _count))

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.dyn_ea_array___len__(self)

    def __getitem__(self, i: "size_t") -> "unsigned long long const &":
        r"""__getitem__(self, i) -> unsigned long long const &"""
        return _ida_domain.dyn_ea_array___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "unsigned long long const &") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.dyn_ea_array___setitem__(self, i, v)

    __iter__ = ida_idaapi._bounded_getitem_iterator

    __swig_destroy__ = _ida_domain.delete_dyn_ea_array

# Register dyn_ea_array in _ida_domain:
_ida_domain.dyn_ea_array_swigregister(dyn_ea_array)
class dyn_regarg_array(object):
    r"""Proxy of C++ dynamic_wrapped_array_t< regarg_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data: "regarg_t *" = property(_ida_domain.dyn_regarg_array_data_get, doc=r"""data""")
    count: "size_t" = property(_ida_domain.dyn_regarg_array_count_get, doc=r"""count""")

    def __init__(self, _data: "regarg_t", _count: "size_t"):
        r"""__init__(self, _data, _count) -> dyn_regarg_array"""
        _ida_domain.dyn_regarg_array_swiginit(self, _ida_domain.new_dyn_regarg_array(_data, _count))

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.dyn_regarg_array___len__(self)

    def __getitem__(self, i: "size_t") -> "regarg_t const &":
        r"""__getitem__(self, i) -> regarg_t"""
        return _ida_domain.dyn_regarg_array___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "regarg_t") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.dyn_regarg_array___setitem__(self, i, v)

    __iter__ = ida_idaapi._bounded_getitem_iterator

    __swig_destroy__ = _ida_domain.delete_dyn_regarg_array

# Register dyn_regarg_array in _ida_domain:
_ida_domain.dyn_regarg_array_swigregister(dyn_regarg_array)

def free_regarg(v: "regarg_t") -> "void":
    r"""free_regarg(v)"""
    return _ida_domain.free_regarg(v)
class regarg_t(object):
    r"""Proxy of C++ regarg_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    reg: "int" = property(_ida_domain.regarg_t_reg_get, _ida_domain.regarg_t_reg_set, doc=r"""reg""")
    type: "type_t *" = property(_ida_domain.regarg_t_type_get, _ida_domain.regarg_t_type_set, doc=r"""type""")
    name: "char *" = property(_ida_domain.regarg_t_name_get, _ida_domain.regarg_t_name_set, doc=r"""name""")

    def __init__(self, *args):
        r"""
        __init__(self) -> regarg_t
        __init__(self, r) -> regarg_t
        """
        _ida_domain.regarg_t_swiginit(self, _ida_domain.new_regarg_t(*args))
    __swig_destroy__ = _ida_domain.delete_regarg_t

    def swap(self, r: "regarg_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.regarg_t_swap(self, r)

# Register regarg_t in _ida_domain:
_ida_domain.regarg_t_swigregister(regarg_t)
class func_t(range_t):
    r"""Proxy of C++ func_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    flags: "uint64" = property(_ida_domain.func_t_flags_get, _ida_domain.func_t_flags_set, doc=r"""flags""")

    def is_far(self) -> "bool":
        r"""is_far(self) -> bool"""
        return _ida_domain.func_t_is_far(self)

    def does_return(self) -> "bool":
        r"""does_return(self) -> bool"""
        return _ida_domain.func_t_does_return(self)

    def analyzed_sp(self) -> "bool":
        r"""analyzed_sp(self) -> bool"""
        return _ida_domain.func_t_analyzed_sp(self)

    def need_prolog_analysis(self) -> "bool":
        r"""need_prolog_analysis(self) -> bool"""
        return _ida_domain.func_t_need_prolog_analysis(self)
    frame: "uval_t" = property(_ida_domain.func_t_frame_get, _ida_domain.func_t_frame_set, doc=r"""frame""")
    frsize: "asize_t" = property(_ida_domain.func_t_frsize_get, _ida_domain.func_t_frsize_set, doc=r"""frsize""")
    frregs: "ushort" = property(_ida_domain.func_t_frregs_get, _ida_domain.func_t_frregs_set, doc=r"""frregs""")
    argsize: "asize_t" = property(_ida_domain.func_t_argsize_get, _ida_domain.func_t_argsize_set, doc=r"""argsize""")
    fpd: "asize_t" = property(_ida_domain.func_t_fpd_get, _ida_domain.func_t_fpd_set, doc=r"""fpd""")
    color: "bgcolor_t" = property(_ida_domain.func_t_color_get, _ida_domain.func_t_color_set, doc=r"""color""")
    pntqty: "uint32" = property(_ida_domain.func_t_pntqty_get, _ida_domain.func_t_pntqty_set, doc=r"""pntqty""")
    points: "stkpnt_t *" = property(_ida_domain.func_t_points_get, _ida_domain.func_t_points_set, doc=r"""points""")
    regvarqty: "int" = property(_ida_domain.func_t_regvarqty_get, _ida_domain.func_t_regvarqty_set, doc=r"""regvarqty""")
    regvars: "regvar_t *" = property(_ida_domain.func_t_regvars_get, _ida_domain.func_t_regvars_set, doc=r"""regvars""")
    regargqty: "int" = property(_ida_domain.func_t_regargqty_get, _ida_domain.func_t_regargqty_set, doc=r"""regargqty""")
    regargs: "regarg_t *" = property(_ida_domain.func_t_regargs_get, _ida_domain.func_t_regargs_set, doc=r"""regargs""")
    tailqty: "int" = property(_ida_domain.func_t_tailqty_get, _ida_domain.func_t_tailqty_set, doc=r"""tailqty""")
    tails: "range_t *" = property(_ida_domain.func_t_tails_get, _ida_domain.func_t_tails_set, doc=r"""tails""")
    owner: "ea_t" = property(_ida_domain.func_t_owner_get, _ida_domain.func_t_owner_set, doc=r"""owner""")
    refqty: "int" = property(_ida_domain.func_t_refqty_get, _ida_domain.func_t_refqty_set, doc=r"""refqty""")
    referers: "ea_t *" = property(_ida_domain.func_t_referers_get, _ida_domain.func_t_referers_set, doc=r"""referers""")

    def __init__(self, start: "ea_t"=0, end: "ea_t"=0, f: "flags64_t"=0):
        r"""__init__(self, start=0, end=0, f=0) -> func_t"""
        _ida_domain.func_t_swiginit(self, _ida_domain.new_func_t(start, end, f))

    def __get_points__(self) -> "dynamic_wrapped_array_t< stkpnt_t >":
        r"""__get_points__(self) -> dyn_stkpnt_array"""
        return _ida_domain.func_t___get_points__(self)

    def __get_regvars__(self) -> "dynamic_wrapped_array_t< regvar_t >":
        r"""__get_regvars__(self) -> dyn_regvar_array"""
        return _ida_domain.func_t___get_regvars__(self)

    def __get_tails__(self) -> "dynamic_wrapped_array_t< range_t >":
        r"""__get_tails__(self) -> dyn_range_array"""
        return _ida_domain.func_t___get_tails__(self)

    def __get_referers__(self) -> "dynamic_wrapped_array_t< ea_t >":
        r"""__get_referers__(self) -> dyn_ea_array"""
        return _ida_domain.func_t___get_referers__(self)

    def __get_regargs__(self) -> "dynamic_wrapped_array_t< regarg_t >":
        r"""__get_regargs__(self) -> dyn_regarg_array"""
        return _ida_domain.func_t___get_regargs__(self)

    points = property(__get_points__)
    regvars = property(__get_regvars__)
    tails = property(__get_tails__)
    referers = property(__get_referers__)
    regargs = property(__get_regargs__)


    def addresses(self):
        """
        Alias for func_item_iterator_t(self).addresses()
        """
        yield from func_item_iterator_t(self).addresses()


    def code_items(self):
        """
        Alias for func_item_iterator_t(self).code_items()
        """
        yield from func_item_iterator_t(self).code_items()


    def data_items(self):
        """
        Alias for func_item_iterator_t(self).data_items()
        """
        yield from func_item_iterator_t(self).data_items()


    def head_items(self):
        """
        Alias for func_item_iterator_t(self).head_items()
        """
        yield from func_item_iterator_t(self).head_items()


    def not_tails(self):
        """
        Alias for func_item_iterator_t(self).not_tails()
        """
        yield from func_item_iterator_t(self).not_tails()


    def get_frame_object(self) -> "tinfo_t":
        r"""get_frame_object(self) -> tinfo_t"""
        val = _ida_domain.func_t_get_frame_object(self)

        if val.empty():
            val = None


        return val


    def get_name(self) -> "ssize_t":
        r"""get_name(self) -> ssize_t"""
        return _ida_domain.func_t_get_name(self)

    def get_prototype(self) -> "tinfo_t":
        r"""get_prototype(self) -> tinfo_t"""
        val = _ida_domain.func_t_get_prototype(self)

        if val.empty():
            val = None


        return val


    def __iter__(self):
        """
        Alias for func_item_iterator_t(self).__iter__()
        """
        return func_item_iterator_t(self).__iter__()

    frame_object = property(get_frame_object)
    name = property(get_name)
    prototype = property(get_prototype)

    __swig_destroy__ = _ida_domain.delete_func_t

# Register func_t in _ida_domain:
_ida_domain.func_t_swigregister(func_t)
FUNC_NORET = _ida_domain.FUNC_NORET

FUNC_FAR = _ida_domain.FUNC_FAR

FUNC_LIB = _ida_domain.FUNC_LIB

FUNC_STATICDEF = _ida_domain.FUNC_STATICDEF

FUNC_FRAME = _ida_domain.FUNC_FRAME

FUNC_USERFAR = _ida_domain.FUNC_USERFAR

FUNC_HIDDEN = _ida_domain.FUNC_HIDDEN

FUNC_THUNK = _ida_domain.FUNC_THUNK

FUNC_BOTTOMBP = _ida_domain.FUNC_BOTTOMBP

FUNC_NORET_PENDING = _ida_domain.FUNC_NORET_PENDING

FUNC_SP_READY = _ida_domain.FUNC_SP_READY

FUNC_FUZZY_SP = _ida_domain.FUNC_FUZZY_SP

FUNC_PROLOG_OK = _ida_domain.FUNC_PROLOG_OK

FUNC_PURGED_OK = _ida_domain.FUNC_PURGED_OK

FUNC_TAIL = _ida_domain.FUNC_TAIL

FUNC_LUMINA = _ida_domain.FUNC_LUMINA

FUNC_OUTLINE = _ida_domain.FUNC_OUTLINE

FUNC_REANALYZE = _ida_domain.FUNC_REANALYZE

FUNC_UNWIND = _ida_domain.FUNC_UNWIND

FUNC_CATCH = _ida_domain.FUNC_CATCH



def is_func_entry(pfn: "func_t") -> "bool":
    r"""is_func_entry(pfn) -> bool"""
    return _ida_domain.is_func_entry(pfn)

def is_func_tail(pfn: "func_t") -> "bool":
    r"""is_func_tail(pfn) -> bool"""
    return _ida_domain.is_func_tail(pfn)

def lock_func_range(pfn: "func_t", lock: "bool") -> "void":
    r"""lock_func_range(pfn, lock)"""
    return _ida_domain.lock_func_range(pfn, lock)
class lock_func(object):
    r"""Proxy of C++ lock_func class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _pfn: "func_t"):
        r"""__init__(self, _pfn) -> lock_func"""
        _ida_domain.lock_func_swiginit(self, _ida_domain.new_lock_func(_pfn))
    __swig_destroy__ = _ida_domain.delete_lock_func

# Register lock_func in _ida_domain:
_ida_domain.lock_func_swigregister(lock_func)
class lock_func_with_tails_t(object):
    r"""Proxy of C++ lock_func_with_tails_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pfn: "func_t"):
        r"""__init__(self, pfn) -> lock_func_with_tails_t"""
        _ida_domain.lock_func_with_tails_t_swiginit(self, _ida_domain.new_lock_func_with_tails_t(pfn))
    __swig_destroy__ = _ida_domain.delete_lock_func_with_tails_t

# Register lock_func_with_tails_t in _ida_domain:
_ida_domain.lock_func_with_tails_t_swigregister(lock_func_with_tails_t)

def is_func_locked(pfn: "func_t") -> "bool":
    r"""is_func_locked(pfn) -> bool"""
    return _ida_domain.is_func_locked(pfn)

def get_func(ea: "ea_t") -> "func_t *":
    r"""get_func(ea) -> func_t"""
    return _ida_domain.get_func(ea)

def get_func_chunknum(pfn: "func_t", ea: "ea_t") -> "int":
    r"""get_func_chunknum(pfn, ea) -> int"""
    return _ida_domain.get_func_chunknum(pfn, ea)

def func_contains(pfn: "func_t", ea: "ea_t") -> "bool":
    r"""func_contains(pfn, ea) -> bool"""
    return _ida_domain.func_contains(pfn, ea)

def is_same_func(ea1: "ea_t", ea2: "ea_t") -> "bool":
    r"""is_same_func(ea1, ea2) -> bool"""
    return _ida_domain.is_same_func(ea1, ea2)

def getn_func(n: "size_t") -> "func_t *":
    r"""getn_func(n) -> func_t"""
    return _ida_domain.getn_func(n)

def get_func_qty() -> "size_t":
    r"""get_func_qty() -> size_t"""
    return _ida_domain.get_func_qty()

def get_func_num(ea: "ea_t") -> "int":
    r"""get_func_num(ea) -> int"""
    return _ida_domain.get_func_num(ea)

def get_prev_func(ea: "ea_t") -> "func_t *":
    r"""get_prev_func(ea) -> func_t"""
    return _ida_domain.get_prev_func(ea)

def get_next_func(ea: "ea_t") -> "func_t *":
    r"""get_next_func(ea) -> func_t"""
    return _ida_domain.get_next_func(ea)

def get_func_ranges(ranges: "rangeset_t", pfn: "func_t") -> "ea_t":
    r"""get_func_ranges(ranges, pfn) -> ea_t"""
    return _ida_domain.get_func_ranges(ranges, pfn)

def get_func_cmt(pfn: "func_t", repeatable: "bool") -> "qstring *":
    r"""get_func_cmt(pfn, repeatable) -> ssize_t"""
    return _ida_domain.get_func_cmt(pfn, repeatable)

def set_func_cmt(pfn: "func_t", cmt: "char const *", repeatable: "bool") -> "bool":
    r"""set_func_cmt(pfn, cmt, repeatable) -> bool"""
    return _ida_domain.set_func_cmt(pfn, cmt, repeatable)

def update_func(pfn: "func_t") -> "bool":
    r"""update_func(pfn) -> bool"""
    return _ida_domain.update_func(pfn)

def add_func_ex(pfn: "func_t") -> "bool":
    r"""add_func_ex(pfn) -> bool"""
    return _ida_domain.add_func_ex(pfn)

def add_func(*args) -> "bool":
    r"""add_func(ea1, ea2=BADADDR) -> bool"""
    return _ida_domain.add_func(*args)

def del_func(ea: "ea_t") -> "bool":
    r"""del_func(ea) -> bool"""
    return _ida_domain.del_func(ea)

def set_func_start(ea: "ea_t", newstart: "ea_t") -> "int":
    r"""set_func_start(ea, newstart) -> int"""
    return _ida_domain.set_func_start(ea, newstart)
MOVE_FUNC_OK = _ida_domain.MOVE_FUNC_OK

MOVE_FUNC_NOCODE = _ida_domain.MOVE_FUNC_NOCODE

MOVE_FUNC_BADSTART = _ida_domain.MOVE_FUNC_BADSTART

MOVE_FUNC_NOFUNC = _ida_domain.MOVE_FUNC_NOFUNC

MOVE_FUNC_REFUSED = _ida_domain.MOVE_FUNC_REFUSED


def set_func_end(ea: "ea_t", newend: "ea_t") -> "bool":
    r"""set_func_end(ea, newend) -> bool"""
    return _ida_domain.set_func_end(ea, newend)

def reanalyze_function(*args) -> "void":
    r"""reanalyze_function(pfn, ea1=0, ea2=BADADDR, analyze_parents=False)"""
    return _ida_domain.reanalyze_function(*args)

def find_func_bounds(nfn: "func_t", flags: "int") -> "int":
    r"""find_func_bounds(nfn, flags) -> int"""
    return _ida_domain.find_func_bounds(nfn, flags)
FIND_FUNC_NORMAL = _ida_domain.FIND_FUNC_NORMAL

FIND_FUNC_DEFINE = _ida_domain.FIND_FUNC_DEFINE

FIND_FUNC_IGNOREFN = _ida_domain.FIND_FUNC_IGNOREFN

FIND_FUNC_KEEPBD = _ida_domain.FIND_FUNC_KEEPBD

FIND_FUNC_UNDEF = _ida_domain.FIND_FUNC_UNDEF

FIND_FUNC_OK = _ida_domain.FIND_FUNC_OK

FIND_FUNC_EXIST = _ida_domain.FIND_FUNC_EXIST


def get_func_name(ea: "ea_t") -> "qstring *":
    r"""get_func_name(ea) -> ssize_t"""
    return _ida_domain.get_func_name(ea)

def calc_func_size(pfn: "func_t") -> "asize_t":
    r"""calc_func_size(pfn) -> asize_t"""
    return _ida_domain.calc_func_size(pfn)

def get_func_bitness(pfn: "func_t") -> "int":
    r"""get_func_bitness(pfn) -> int"""
    return _ida_domain.get_func_bitness(pfn)

def get_func_bits(pfn: "func_t") -> "int":
    r"""get_func_bits(pfn) -> int"""
    return _ida_domain.get_func_bits(pfn)

def get_func_bytes(pfn: "func_t") -> "int":
    r"""get_func_bytes(pfn) -> int"""
    return _ida_domain.get_func_bytes(pfn)

def is_visible_func(pfn: "func_t") -> "bool":
    r"""is_visible_func(pfn) -> bool"""
    return _ida_domain.is_visible_func(pfn)

def is_finally_visible_func(pfn: "func_t") -> "bool":
    r"""is_finally_visible_func(pfn) -> bool"""
    return _ida_domain.is_finally_visible_func(pfn)

def set_visible_func(pfn: "func_t", visible: "bool") -> "void":
    r"""set_visible_func(pfn, visible)"""
    return _ida_domain.set_visible_func(pfn, visible)

def set_func_name_if_jumpfunc(pfn: "func_t", oldname: "char const *") -> "int":
    r"""set_func_name_if_jumpfunc(pfn, oldname) -> int"""
    return _ida_domain.set_func_name_if_jumpfunc(pfn, oldname)

def calc_thunk_func_target(pfn: "func_t") -> "ea_t *":
    r"""calc_thunk_func_target(pfn) -> ea_t"""
    return _ida_domain.calc_thunk_func_target(pfn)

def func_does_return(callee: "ea_t") -> "bool":
    r"""func_does_return(callee) -> bool"""
    return _ida_domain.func_does_return(callee)

def reanalyze_noret_flag(ea: "ea_t") -> "bool":
    r"""reanalyze_noret_flag(ea) -> bool"""
    return _ida_domain.reanalyze_noret_flag(ea)

def set_noret_insn(insn_ea: "ea_t", noret: "bool") -> "bool":
    r"""set_noret_insn(insn_ea, noret) -> bool"""
    return _ida_domain.set_noret_insn(insn_ea, noret)

def get_fchunk(ea: "ea_t") -> "func_t *":
    r"""get_fchunk(ea) -> func_t"""
    return _ida_domain.get_fchunk(ea)

def getn_fchunk(n: "int") -> "func_t *":
    r"""getn_fchunk(n) -> func_t"""
    return _ida_domain.getn_fchunk(n)

def get_fchunk_qty() -> "size_t":
    r"""get_fchunk_qty() -> size_t"""
    return _ida_domain.get_fchunk_qty()

def get_fchunk_num(ea: "ea_t") -> "int":
    r"""get_fchunk_num(ea) -> int"""
    return _ida_domain.get_fchunk_num(ea)

def get_prev_fchunk(ea: "ea_t") -> "func_t *":
    r"""get_prev_fchunk(ea) -> func_t"""
    return _ida_domain.get_prev_fchunk(ea)

def get_next_fchunk(ea: "ea_t") -> "func_t *":
    r"""get_next_fchunk(ea) -> func_t"""
    return _ida_domain.get_next_fchunk(ea)

def append_func_tail(pfn: "func_t", ea1: "ea_t", ea2: "ea_t") -> "bool":
    r"""append_func_tail(pfn, ea1, ea2) -> bool"""
    return _ida_domain.append_func_tail(pfn, ea1, ea2)

def remove_func_tail(pfn: "func_t", tail_ea: "ea_t") -> "bool":
    r"""remove_func_tail(pfn, tail_ea) -> bool"""
    return _ida_domain.remove_func_tail(pfn, tail_ea)

def set_tail_owner(fnt: "func_t", new_owner: "ea_t") -> "bool":
    r"""set_tail_owner(fnt, new_owner) -> bool"""
    return _ida_domain.set_tail_owner(fnt, new_owner)

def func_tail_iterator_set(fti: "func_tail_iterator_t", pfn: "func_t", ea: "ea_t") -> "bool":
    r"""func_tail_iterator_set(fti, pfn, ea) -> bool"""
    return _ida_domain.func_tail_iterator_set(fti, pfn, ea)

def func_tail_iterator_set_ea(fti: "func_tail_iterator_t", ea: "ea_t") -> "bool":
    r"""func_tail_iterator_set_ea(fti, ea) -> bool"""
    return _ida_domain.func_tail_iterator_set_ea(fti, ea)

def func_parent_iterator_set(fpi: "func_parent_iterator_t", pfn: "func_t") -> "bool":
    r"""func_parent_iterator_set(fpi, pfn) -> bool"""
    return _ida_domain.func_parent_iterator_set(fpi, pfn)

def f_any(arg1: "flags64_t", arg2: "void *") -> "bool":
    r"""f_any(arg1, arg2) -> bool"""
    return _ida_domain.f_any(arg1, arg2)
class func_tail_iterator_t(object):
    r"""Proxy of C++ func_tail_iterator_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> func_tail_iterator_t
        __init__(self, _pfn, ea=BADADDR) -> func_tail_iterator_t
        """
        _ida_domain.func_tail_iterator_t_swiginit(self, _ida_domain.new_func_tail_iterator_t(*args))
    __swig_destroy__ = _ida_domain.delete_func_tail_iterator_t

    def set(self, *args) -> "bool":
        r"""set(self, _pfn, ea=BADADDR) -> bool"""
        return _ida_domain.func_tail_iterator_t_set(self, *args)

    def set_ea(self, ea: "ea_t") -> "bool":
        r"""set_ea(self, ea) -> bool"""
        return _ida_domain.func_tail_iterator_t_set_ea(self, ea)

    def set_range(self, ea1: "ea_t", ea2: "ea_t") -> "bool":
        r"""set_range(self, ea1, ea2) -> bool"""
        return _ida_domain.func_tail_iterator_t_set_range(self, ea1, ea2)

    def chunk(self) -> "range_t const &":
        r"""chunk(self) -> range_t"""
        return _ida_domain.func_tail_iterator_t_chunk(self)

    def first(self) -> "bool":
        r"""first(self) -> bool"""
        return _ida_domain.func_tail_iterator_t_first(self)

    def last(self) -> "bool":
        r"""last(self) -> bool"""
        return _ida_domain.func_tail_iterator_t_last(self)

    def __next__(self) -> "bool":
        r"""__next__(self) -> bool"""
        return _ida_domain.func_tail_iterator_t___next__(self)

    def prev(self) -> "bool":
        r"""prev(self) -> bool"""
        return _ida_domain.func_tail_iterator_t_prev(self)

    def main(self) -> "bool":
        r"""main(self) -> bool"""
        return _ida_domain.func_tail_iterator_t_main(self)

    def __iter__(self):
        """
        Provide an iterator on function tails
        """
        ok = self.main()
        while ok:
            yield self.chunk()
            ok = self.next()


    next = __next__


# Register func_tail_iterator_t in _ida_domain:
_ida_domain.func_tail_iterator_t_swigregister(func_tail_iterator_t)
class func_item_iterator_t(object):
    r"""Proxy of C++ func_item_iterator_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> func_item_iterator_t
        __init__(self, pfn, _ea=BADADDR) -> func_item_iterator_t
        """
        _ida_domain.func_item_iterator_t_swiginit(self, _ida_domain.new_func_item_iterator_t(*args))

    def set(self, *args) -> "bool":
        r"""set(self, pfn, _ea=BADADDR) -> bool"""
        return _ida_domain.func_item_iterator_t_set(self, *args)

    def set_range(self, ea1: "ea_t", ea2: "ea_t") -> "bool":
        r"""set_range(self, ea1, ea2) -> bool"""
        return _ida_domain.func_item_iterator_t_set_range(self, ea1, ea2)

    def first(self) -> "bool":
        r"""first(self) -> bool"""
        return _ida_domain.func_item_iterator_t_first(self)

    def last(self) -> "bool":
        r"""last(self) -> bool"""
        return _ida_domain.func_item_iterator_t_last(self)

    def current(self) -> "ea_t":
        r"""current(self) -> ea_t"""
        return _ida_domain.func_item_iterator_t_current(self)

    def set_ea(self, _ea: "ea_t") -> "bool":
        r"""set_ea(self, _ea) -> bool"""
        return _ida_domain.func_item_iterator_t_set_ea(self, _ea)

    def chunk(self) -> "range_t const &":
        r"""chunk(self) -> range_t"""
        return _ida_domain.func_item_iterator_t_chunk(self)

    def __next__(self, func: "testf_t *") -> "bool":
        r"""__next__(self, func) -> bool"""
        return _ida_domain.func_item_iterator_t___next__(self, func)

    def prev(self, func: "testf_t *") -> "bool":
        r"""prev(self, func) -> bool"""
        return _ida_domain.func_item_iterator_t_prev(self, func)

    def next_addr(self) -> "bool":
        r"""next_addr(self) -> bool"""
        return _ida_domain.func_item_iterator_t_next_addr(self)

    def next_head(self) -> "bool":
        r"""next_head(self) -> bool"""
        return _ida_domain.func_item_iterator_t_next_head(self)

    def next_code(self) -> "bool":
        r"""next_code(self) -> bool"""
        return _ida_domain.func_item_iterator_t_next_code(self)

    def next_data(self) -> "bool":
        r"""next_data(self) -> bool"""
        return _ida_domain.func_item_iterator_t_next_data(self)

    def next_not_tail(self) -> "bool":
        r"""next_not_tail(self) -> bool"""
        return _ida_domain.func_item_iterator_t_next_not_tail(self)

    def prev_addr(self) -> "bool":
        r"""prev_addr(self) -> bool"""
        return _ida_domain.func_item_iterator_t_prev_addr(self)

    def prev_head(self) -> "bool":
        r"""prev_head(self) -> bool"""
        return _ida_domain.func_item_iterator_t_prev_head(self)

    def prev_code(self) -> "bool":
        r"""prev_code(self) -> bool"""
        return _ida_domain.func_item_iterator_t_prev_code(self)

    def prev_data(self) -> "bool":
        r"""prev_data(self) -> bool"""
        return _ida_domain.func_item_iterator_t_prev_data(self)

    def prev_not_tail(self) -> "bool":
        r"""prev_not_tail(self) -> bool"""
        return _ida_domain.func_item_iterator_t_prev_not_tail(self)

    def decode_prev_insn(self, out: "insn_t") -> "bool":
        r"""decode_prev_insn(self, out) -> bool"""
        return _ida_domain.func_item_iterator_t_decode_prev_insn(self, out)

    def decode_preceding_insn(self, visited: "uint64vec_t", p_farref: "bool *", out: "insn_t") -> "bool":
        r"""decode_preceding_insn(self, visited, p_farref, out) -> bool"""
        return _ida_domain.func_item_iterator_t_decode_preceding_insn(self, visited, p_farref, out)

    def succ(self, func: "testf_t *") -> "bool":
        r"""succ(self, func) -> bool"""
        return _ida_domain.func_item_iterator_t_succ(self, func)

    def succ_code(self) -> "bool":
        r"""succ_code(self) -> bool"""
        return _ida_domain.func_item_iterator_t_succ_code(self)

    def __iter__(self):
        """
        Provide an iterator on code items
        """
        ok = self.first()
        while ok:
            yield self.current()
            ok = self.next_code()


    next = __next__


    def addresses(self):
        """
        Provide an iterator on addresses contained within the function
        """
        ok = self.first()
        while ok:
            yield self.current()
            ok = self.next_addr()


    def code_items(self):
        """
        Provide an iterator on code items contained within the function
        """
        ok = self.first()
        while ok:
            yield self.current()
            ok = self.next_code()


    def data_items(self):
        """
        Provide an iterator on data items contained within the function
        """
        ok = self.first()
        while ok:
            yield self.current()
            ok = self.next_data()


    def head_items(self):
        """
        Provide an iterator on item heads contained within the function
        """
        ok = self.first()
        while ok:
            yield self.current()
            ok = self.next_head()


    def not_tails(self):
        """
        Provide an iterator on non-tail addresses contained within the function
        """
        ok = self.first()
        while ok:
            yield self.current()
            ok = self.next_not_tail()

    __swig_destroy__ = _ida_domain.delete_func_item_iterator_t

# Register func_item_iterator_t in _ida_domain:
_ida_domain.func_item_iterator_t_swigregister(func_item_iterator_t)
class func_parent_iterator_t(object):
    r"""Proxy of C++ func_parent_iterator_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> func_parent_iterator_t
        __init__(self, _fnt) -> func_parent_iterator_t
        """
        _ida_domain.func_parent_iterator_t_swiginit(self, _ida_domain.new_func_parent_iterator_t(*args))
    __swig_destroy__ = _ida_domain.delete_func_parent_iterator_t

    def set(self, _fnt: "func_t") -> "bool":
        r"""set(self, _fnt) -> bool"""
        return _ida_domain.func_parent_iterator_t_set(self, _fnt)

    def parent(self) -> "ea_t":
        r"""parent(self) -> ea_t"""
        return _ida_domain.func_parent_iterator_t_parent(self)

    def first(self) -> "bool":
        r"""first(self) -> bool"""
        return _ida_domain.func_parent_iterator_t_first(self)

    def last(self) -> "bool":
        r"""last(self) -> bool"""
        return _ida_domain.func_parent_iterator_t_last(self)

    def __next__(self) -> "bool":
        r"""__next__(self) -> bool"""
        return _ida_domain.func_parent_iterator_t___next__(self)

    def prev(self) -> "bool":
        r"""prev(self) -> bool"""
        return _ida_domain.func_parent_iterator_t_prev(self)

    def reset_fnt(self, _fnt: "func_t") -> "void":
        r"""reset_fnt(self, _fnt)"""
        return _ida_domain.func_parent_iterator_t_reset_fnt(self, _fnt)

    def __iter__(self):
        """
        Provide an iterator on function parents
        """
        ok = self.first()
        while ok:
            yield self.parent()
            ok = self.next()


    next = __next__


# Register func_parent_iterator_t in _ida_domain:
_ida_domain.func_parent_iterator_t_swigregister(func_parent_iterator_t)

def get_prev_func_addr(pfn: "func_t", ea: "ea_t") -> "ea_t":
    r"""get_prev_func_addr(pfn, ea) -> ea_t"""
    return _ida_domain.get_prev_func_addr(pfn, ea)

def get_next_func_addr(pfn: "func_t", ea: "ea_t") -> "ea_t":
    r"""get_next_func_addr(pfn, ea) -> ea_t"""
    return _ida_domain.get_next_func_addr(pfn, ea)

def read_regargs(pfn: "func_t") -> "void":
    r"""read_regargs(pfn)"""
    return _ida_domain.read_regargs(pfn)

def add_regarg(pfn: "func_t", reg: "int", tif: "tinfo_t", name: "char const *") -> "void":
    r"""add_regarg(pfn, reg, tif, name)"""
    return _ida_domain.add_regarg(pfn, reg, tif, name)
IDASGN_OK = _ida_domain.IDASGN_OK

IDASGN_BADARG = _ida_domain.IDASGN_BADARG

IDASGN_APPLIED = _ida_domain.IDASGN_APPLIED

IDASGN_CURRENT = _ida_domain.IDASGN_CURRENT

IDASGN_PLANNED = _ida_domain.IDASGN_PLANNED


def plan_to_apply_idasgn(fname: "char const *") -> "int":
    r"""plan_to_apply_idasgn(fname) -> int"""
    return _ida_domain.plan_to_apply_idasgn(fname)

def apply_idasgn_to(signame: "char const *", ea: "ea_t", is_startup: "bool") -> "int":
    r"""apply_idasgn_to(signame, ea, is_startup) -> int"""
    return _ida_domain.apply_idasgn_to(signame, ea, is_startup)

def get_idasgn_qty() -> "int":
    r"""get_idasgn_qty() -> int"""
    return _ida_domain.get_idasgn_qty()

def get_current_idasgn() -> "int":
    r"""get_current_idasgn() -> int"""
    return _ida_domain.get_current_idasgn()

def calc_idasgn_state(n: "int") -> "int":
    r"""calc_idasgn_state(n) -> int"""
    return _ida_domain.calc_idasgn_state(n)

def del_idasgn(n: "int") -> "int":
    r"""del_idasgn(n) -> int"""
    return _ida_domain.del_idasgn(n)

def get_idasgn_title(name: "char const *") -> "qstring *":
    r"""get_idasgn_title(name) -> ssize_t"""
    return _ida_domain.get_idasgn_title(name)

def apply_startup_sig(ea: "ea_t", startup: "char const *") -> "bool":
    r"""apply_startup_sig(ea, startup) -> bool"""
    return _ida_domain.apply_startup_sig(ea, startup)

def try_to_add_libfunc(ea: "ea_t") -> "int":
    r"""try_to_add_libfunc(ea) -> int"""
    return _ida_domain.try_to_add_libfunc(ea)
LIBFUNC_FOUND = _ida_domain.LIBFUNC_FOUND

LIBFUNC_NONE = _ida_domain.LIBFUNC_NONE

LIBFUNC_DELAY = _ida_domain.LIBFUNC_DELAY


def get_fchunk_referer(ea: "ea_t", idx: "size_t") -> "ea_t":
    r"""get_fchunk_referer(ea, idx) -> ea_t"""
    return _ida_domain.get_fchunk_referer(ea, idx)

def get_idasgn_desc(n: "int") -> "PyObject *":
    r"""get_idasgn_desc(n) -> PyObject *"""
    return _ida_domain.get_idasgn_desc(n)

def get_idasgn_desc_with_matches(n: "int") -> "PyObject *":
    r"""get_idasgn_desc_with_matches(n) -> PyObject *"""
    return _ida_domain.get_idasgn_desc_with_matches(n)

def func_t__from_ptrval__(ptrval: "size_t") -> "func_t *":
    r"""func_t__from_ptrval__(ptrval) -> func_t"""
    return _ida_domain.func_t__from_ptrval__(ptrval)

#<pycode(py_funcs)>
import ida_idaapi
@ida_idaapi.replfun
def calc_thunk_func_target(*args):
    if len(args) == 2:
        pfn, rawptr = args
        target, fptr = calc_thunk_func_target.__dict__["orig"](pfn)
        import ida_pro
        ida_pro.ea_pointer.frompointer(rawptr).assign(fptr)
        return target
    else:
        return calc_thunk_func_target.__dict__["orig"](*args)
#</pycode(py_funcs)>

class segment_defsr_array(object):
    r"""Proxy of C++ wrapped_array_t< sel_t,SREG_NUM > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data: "unsigned long long (&)[SREG_NUM]" = property(_ida_domain.segment_defsr_array_data_get, doc=r"""data""")

    def __init__(self, data: "unsigned long long (&)[SREG_NUM]"):
        r"""__init__(self, data) -> segment_defsr_array"""
        _ida_domain.segment_defsr_array_swiginit(self, _ida_domain.new_segment_defsr_array(data))

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.segment_defsr_array___len__(self)

    def __getitem__(self, i: "size_t") -> "unsigned long long const &":
        r"""__getitem__(self, i) -> unsigned long long const &"""
        return _ida_domain.segment_defsr_array___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "unsigned long long const &") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.segment_defsr_array___setitem__(self, i, v)

    def _get_bytes(self) -> "bytevec_t":
        r"""_get_bytes(self) -> bytevec_t"""
        return _ida_domain.segment_defsr_array__get_bytes(self)

    def _set_bytes(self, bts: "bytevec_t const &") -> "void":
        r"""_set_bytes(self, bts)"""
        return _ida_domain.segment_defsr_array__set_bytes(self, bts)

    __iter__ = ida_idaapi._bounded_getitem_iterator
    bytes = property(_get_bytes, _set_bytes)

    __swig_destroy__ = _ida_domain.delete_segment_defsr_array

# Register segment_defsr_array in _ida_domain:
_ida_domain.segment_defsr_array_swigregister(segment_defsr_array)

def set_segment_translations(segstart: "ea_t", transmap: "uint64vec_t") -> "bool":
    r"""set_segment_translations(segstart, transmap) -> bool"""
    return _ida_domain.set_segment_translations(segstart, transmap)
SREG_NUM = _ida_domain.SREG_NUM

class segment_t(range_t):
    r"""Proxy of C++ segment_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name: "uval_t" = property(_ida_domain.segment_t_name_get, _ida_domain.segment_t_name_set, doc=r"""name""")
    sclass: "uval_t" = property(_ida_domain.segment_t_sclass_get, _ida_domain.segment_t_sclass_set, doc=r"""sclass""")
    orgbase: "uval_t" = property(_ida_domain.segment_t_orgbase_get, _ida_domain.segment_t_orgbase_set, doc=r"""orgbase""")
    align: "uchar" = property(_ida_domain.segment_t_align_get, _ida_domain.segment_t_align_set, doc=r"""align""")
    comb: "uchar" = property(_ida_domain.segment_t_comb_get, _ida_domain.segment_t_comb_set, doc=r"""comb""")
    perm: "uchar" = property(_ida_domain.segment_t_perm_get, _ida_domain.segment_t_perm_set, doc=r"""perm""")
    bitness: "uchar" = property(_ida_domain.segment_t_bitness_get, _ida_domain.segment_t_bitness_set, doc=r"""bitness""")

    def is_16bit(self) -> "bool":
        r"""is_16bit(self) -> bool"""
        return _ida_domain.segment_t_is_16bit(self)

    def is_32bit(self) -> "bool":
        r"""is_32bit(self) -> bool"""
        return _ida_domain.segment_t_is_32bit(self)

    def is_64bit(self) -> "bool":
        r"""is_64bit(self) -> bool"""
        return _ida_domain.segment_t_is_64bit(self)

    def abits(self) -> "int":
        r"""abits(self) -> int"""
        return _ida_domain.segment_t_abits(self)

    def abytes(self) -> "int":
        r"""abytes(self) -> int"""
        return _ida_domain.segment_t_abytes(self)
    flags: "ushort" = property(_ida_domain.segment_t_flags_get, _ida_domain.segment_t_flags_set, doc=r"""flags""")

    def comorg(self) -> "bool":
        r"""comorg(self) -> bool"""
        return _ida_domain.segment_t_comorg(self)

    def set_comorg(self) -> "void":
        r"""set_comorg(self)"""
        return _ida_domain.segment_t_set_comorg(self)

    def clr_comorg(self) -> "void":
        r"""clr_comorg(self)"""
        return _ida_domain.segment_t_clr_comorg(self)

    def ob_ok(self) -> "bool":
        r"""ob_ok(self) -> bool"""
        return _ida_domain.segment_t_ob_ok(self)

    def set_ob_ok(self) -> "void":
        r"""set_ob_ok(self)"""
        return _ida_domain.segment_t_set_ob_ok(self)

    def clr_ob_ok(self) -> "void":
        r"""clr_ob_ok(self)"""
        return _ida_domain.segment_t_clr_ob_ok(self)

    def is_visible_segm(self) -> "bool":
        r"""is_visible_segm(self) -> bool"""
        return _ida_domain.segment_t_is_visible_segm(self)

    def set_visible_segm(self, visible: "bool") -> "void":
        r"""set_visible_segm(self, visible)"""
        return _ida_domain.segment_t_set_visible_segm(self, visible)

    def set_debugger_segm(self, debseg: "bool") -> "void":
        r"""set_debugger_segm(self, debseg)"""
        return _ida_domain.segment_t_set_debugger_segm(self, debseg)

    def is_loader_segm(self) -> "bool":
        r"""is_loader_segm(self) -> bool"""
        return _ida_domain.segment_t_is_loader_segm(self)

    def set_loader_segm(self, ldrseg: "bool") -> "void":
        r"""set_loader_segm(self, ldrseg)"""
        return _ida_domain.segment_t_set_loader_segm(self, ldrseg)

    def is_hidden_segtype(self) -> "bool":
        r"""is_hidden_segtype(self) -> bool"""
        return _ida_domain.segment_t_is_hidden_segtype(self)

    def set_hidden_segtype(self, hide: "bool") -> "void":
        r"""set_hidden_segtype(self, hide)"""
        return _ida_domain.segment_t_set_hidden_segtype(self, hide)

    def is_header_segm(self) -> "bool":
        r"""is_header_segm(self) -> bool"""
        return _ida_domain.segment_t_is_header_segm(self)

    def set_header_segm(self, on: "bool") -> "void":
        r"""set_header_segm(self, on)"""
        return _ida_domain.segment_t_set_header_segm(self, on)
    sel: "sel_t" = property(_ida_domain.segment_t_sel_get, _ida_domain.segment_t_sel_set, doc=r"""sel""")
    defsr: "sel_t [16]" = property(_ida_domain.segment_t_defsr_get, _ida_domain.segment_t_defsr_set, doc=r"""defsr""")
    type: "uchar" = property(_ida_domain.segment_t_type_get, _ida_domain.segment_t_type_set, doc=r"""type""")
    color: "bgcolor_t" = property(_ida_domain.segment_t_color_get, _ida_domain.segment_t_color_set, doc=r"""color""")

    def update(self) -> "bool":
        r"""update(self) -> bool"""
        return _ida_domain.segment_t_update(self)

    def __init__(self):
        r"""__init__(self) -> segment_t"""
        _ida_domain.segment_t_swiginit(self, _ida_domain.new_segment_t())
    start_ea: "ea_t" = property(_ida_domain.segment_t_start_ea_get, _ida_domain.segment_t_start_ea_set, doc=r"""start_ea""")
    end_ea: "ea_t" = property(_ida_domain.segment_t_end_ea_get, _ida_domain.segment_t_end_ea_set, doc=r"""end_ea""")

    def __getDefsr(self) -> "wrapped_array_t< sel_t,SREG_NUM >":
        r"""__getDefsr(self) -> segment_defsr_array"""
        return _ida_domain.segment_t___getDefsr(self)

    use64 = is_64bit
    defsr = property(__getDefsr)


    def get_label(self):
      return _ida_domain.get_segm_name(self)
    label = property(get_label, doc=r"""label : str""")

    __swig_destroy__ = _ida_domain.delete_segment_t

# Register segment_t in _ida_domain:
_ida_domain.segment_t_swigregister(segment_t)
saAbs = _ida_domain.saAbs

saRelByte = _ida_domain.saRelByte

saRelWord = _ida_domain.saRelWord

saRelPara = _ida_domain.saRelPara

saRelPage = _ida_domain.saRelPage

saRelDble = _ida_domain.saRelDble

saRel4K = _ida_domain.saRel4K

saGroup = _ida_domain.saGroup

saRel32Bytes = _ida_domain.saRel32Bytes

saRel64Bytes = _ida_domain.saRel64Bytes

saRelQword = _ida_domain.saRelQword

saRel128Bytes = _ida_domain.saRel128Bytes

saRel512Bytes = _ida_domain.saRel512Bytes

saRel1024Bytes = _ida_domain.saRel1024Bytes

saRel2048Bytes = _ida_domain.saRel2048Bytes

saRel_MAX_ALIGN_CODE = _ida_domain.saRel_MAX_ALIGN_CODE

scPriv = _ida_domain.scPriv

scGroup = _ida_domain.scGroup

scPub = _ida_domain.scPub

scPub2 = _ida_domain.scPub2

scStack = _ida_domain.scStack

scCommon = _ida_domain.scCommon

scPub3 = _ida_domain.scPub3

sc_MAX_COMB_CODE = _ida_domain.sc_MAX_COMB_CODE

SEGPERM_EXEC = _ida_domain.SEGPERM_EXEC

SEGPERM_WRITE = _ida_domain.SEGPERM_WRITE

SEGPERM_READ = _ida_domain.SEGPERM_READ

SEGPERM_MAXVAL = _ida_domain.SEGPERM_MAXVAL

SEG_MAX_BITNESS_CODE = _ida_domain.SEG_MAX_BITNESS_CODE

SFL_COMORG = _ida_domain.SFL_COMORG

SFL_OBOK = _ida_domain.SFL_OBOK

SFL_HIDDEN = _ida_domain.SFL_HIDDEN

SFL_DEBUG = _ida_domain.SFL_DEBUG

SFL_LOADER = _ida_domain.SFL_LOADER

SFL_HIDETYPE = _ida_domain.SFL_HIDETYPE

SFL_HEADER = _ida_domain.SFL_HEADER

SEG_NORM = _ida_domain.SEG_NORM

SEG_XTRN = _ida_domain.SEG_XTRN

SEG_CODE = _ida_domain.SEG_CODE

SEG_DATA = _ida_domain.SEG_DATA

SEG_IMP = _ida_domain.SEG_IMP

SEG_GRP = _ida_domain.SEG_GRP

SEG_NULL = _ida_domain.SEG_NULL

SEG_UNDF = _ida_domain.SEG_UNDF

SEG_BSS = _ida_domain.SEG_BSS

SEG_ABSSYM = _ida_domain.SEG_ABSSYM

SEG_COMM = _ida_domain.SEG_COMM

SEG_IMEM = _ida_domain.SEG_IMEM

SEG_MAX_SEGTYPE_CODE = _ida_domain.SEG_MAX_SEGTYPE_CODE



def is_visible_segm(s: "segment_t") -> "bool":
    r"""is_visible_segm(s) -> bool"""
    return _ida_domain.is_visible_segm(s)

def is_finally_visible_segm(s: "segment_t") -> "bool":
    r"""is_finally_visible_segm(s) -> bool"""
    return _ida_domain.is_finally_visible_segm(s)

def set_visible_segm(s: "segment_t", visible: "bool") -> "void":
    r"""set_visible_segm(s, visible)"""
    return _ida_domain.set_visible_segm(s, visible)

def is_spec_segm(seg_type: "uchar") -> "bool":
    r"""is_spec_segm(seg_type) -> bool"""
    return _ida_domain.is_spec_segm(seg_type)

def is_spec_ea(ea: "ea_t") -> "bool":
    r"""is_spec_ea(ea) -> bool"""
    return _ida_domain.is_spec_ea(ea)

def lock_segm(segm: "segment_t", lock: "bool") -> "void":
    r"""lock_segm(segm, lock)"""
    return _ida_domain.lock_segm(segm, lock)
class lock_segment(object):
    r"""Proxy of C++ lock_segment class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _segm: "segment_t"):
        r"""__init__(self, _segm) -> lock_segment"""
        _ida_domain.lock_segment_swiginit(self, _ida_domain.new_lock_segment(_segm))
    __swig_destroy__ = _ida_domain.delete_lock_segment

# Register lock_segment in _ida_domain:
_ida_domain.lock_segment_swigregister(lock_segment)

def is_segm_locked(segm: "segment_t") -> "bool":
    r"""is_segm_locked(segm) -> bool"""
    return _ida_domain.is_segm_locked(segm)

def getn_selector(n: "int") -> "sel_t *, ea_t *":
    r"""getn_selector(n) -> bool"""
    return _ida_domain.getn_selector(n)

def get_selector_qty() -> "size_t":
    r"""get_selector_qty() -> size_t"""
    return _ida_domain.get_selector_qty()

def setup_selector(segbase: "ea_t") -> "sel_t":
    r"""setup_selector(segbase) -> sel_t"""
    return _ida_domain.setup_selector(segbase)

def allocate_selector(segbase: "ea_t") -> "sel_t":
    r"""allocate_selector(segbase) -> sel_t"""
    return _ida_domain.allocate_selector(segbase)

def find_free_selector() -> "sel_t":
    r"""find_free_selector() -> sel_t"""
    return _ida_domain.find_free_selector()

def set_selector(selector: "sel_t", paragraph: "ea_t") -> "int":
    r"""set_selector(selector, paragraph) -> int"""
    return _ida_domain.set_selector(selector, paragraph)

def del_selector(selector: "sel_t") -> "void":
    r"""del_selector(selector)"""
    return _ida_domain.del_selector(selector)

def sel2para(selector: "sel_t") -> "ea_t":
    r"""sel2para(selector) -> ea_t"""
    return _ida_domain.sel2para(selector)

def sel2ea(selector: "sel_t") -> "ea_t":
    r"""sel2ea(selector) -> ea_t"""
    return _ida_domain.sel2ea(selector)

def find_selector(base: "ea_t") -> "sel_t":
    r"""find_selector(base) -> sel_t"""
    return _ida_domain.find_selector(base)

def get_segm_by_sel(selector: "sel_t") -> "segment_t *":
    r"""get_segm_by_sel(selector) -> segment_t"""
    return _ida_domain.get_segm_by_sel(selector)

def add_segm_ex(s: "segment_t", name: "char const *", sclass: "char const *", flags: "int") -> "bool":
    r"""add_segm_ex(s, name, sclass, flags) -> bool"""
    return _ida_domain.add_segm_ex(s, name, sclass, flags)
ADDSEG_NOSREG = _ida_domain.ADDSEG_NOSREG

ADDSEG_OR_DIE = _ida_domain.ADDSEG_OR_DIE

ADDSEG_NOTRUNC = _ida_domain.ADDSEG_NOTRUNC

ADDSEG_QUIET = _ida_domain.ADDSEG_QUIET

ADDSEG_FILLGAP = _ida_domain.ADDSEG_FILLGAP

ADDSEG_SPARSE = _ida_domain.ADDSEG_SPARSE

ADDSEG_NOAA = _ida_domain.ADDSEG_NOAA

ADDSEG_IDBENC = _ida_domain.ADDSEG_IDBENC


def add_segm(para: "ea_t", start: "ea_t", end: "ea_t", name: "char const *", sclass: "char const *", flags: "int"=0) -> "bool":
    r"""add_segm(para, start, end, name, sclass, flags=0) -> bool"""
    return _ida_domain.add_segm(para, start, end, name, sclass, flags)

def del_segm(ea: "ea_t", flags: "int") -> "bool":
    r"""del_segm(ea, flags) -> bool"""
    return _ida_domain.del_segm(ea, flags)
SEGMOD_KILL = _ida_domain.SEGMOD_KILL

SEGMOD_KEEP = _ida_domain.SEGMOD_KEEP

SEGMOD_SILENT = _ida_domain.SEGMOD_SILENT

SEGMOD_KEEP0 = _ida_domain.SEGMOD_KEEP0

SEGMOD_KEEPSEL = _ida_domain.SEGMOD_KEEPSEL

SEGMOD_NOMOVE = _ida_domain.SEGMOD_NOMOVE

SEGMOD_SPARSE = _ida_domain.SEGMOD_SPARSE


def get_segm_qty() -> "int":
    r"""get_segm_qty() -> int"""
    return _ida_domain.get_segm_qty()

def getseg(ea: "ea_t") -> "segment_t *":
    r"""getseg(ea) -> segment_t"""
    return _ida_domain.getseg(ea)

def getnseg(n: "int") -> "segment_t *":
    r"""getnseg(n) -> segment_t"""
    return _ida_domain.getnseg(n)

def get_segm_num(ea: "ea_t") -> "int":
    r"""get_segm_num(ea) -> int"""
    return _ida_domain.get_segm_num(ea)

def get_next_seg(ea: "ea_t") -> "segment_t *":
    r"""get_next_seg(ea) -> segment_t"""
    return _ida_domain.get_next_seg(ea)

def get_prev_seg(ea: "ea_t") -> "segment_t *":
    r"""get_prev_seg(ea) -> segment_t"""
    return _ida_domain.get_prev_seg(ea)

def get_first_seg() -> "segment_t *":
    r"""get_first_seg() -> segment_t"""
    return _ida_domain.get_first_seg()

def get_last_seg() -> "segment_t *":
    r"""get_last_seg() -> segment_t"""
    return _ida_domain.get_last_seg()

def get_segm_by_name(name: "char const *") -> "segment_t *":
    r"""get_segm_by_name(name) -> segment_t"""
    return _ida_domain.get_segm_by_name(name)

def set_segm_end(ea: "ea_t", newend: "ea_t", flags: "int") -> "bool":
    r"""set_segm_end(ea, newend, flags) -> bool"""
    return _ida_domain.set_segm_end(ea, newend, flags)

def set_segm_start(ea: "ea_t", newstart: "ea_t", flags: "int") -> "bool":
    r"""set_segm_start(ea, newstart, flags) -> bool"""
    return _ida_domain.set_segm_start(ea, newstart, flags)

def move_segm_start(ea: "ea_t", newstart: "ea_t", mode: "int") -> "bool":
    r"""move_segm_start(ea, newstart, mode) -> bool"""
    return _ida_domain.move_segm_start(ea, newstart, mode)
MOVE_SEGM_OK = _ida_domain.MOVE_SEGM_OK

MOVE_SEGM_PARAM = _ida_domain.MOVE_SEGM_PARAM

MOVE_SEGM_ROOM = _ida_domain.MOVE_SEGM_ROOM

MOVE_SEGM_IDP = _ida_domain.MOVE_SEGM_IDP

MOVE_SEGM_CHUNK = _ida_domain.MOVE_SEGM_CHUNK

MOVE_SEGM_LOADER = _ida_domain.MOVE_SEGM_LOADER

MOVE_SEGM_ODD = _ida_domain.MOVE_SEGM_ODD

MOVE_SEGM_ORPHAN = _ida_domain.MOVE_SEGM_ORPHAN

MOVE_SEGM_DEBUG = _ida_domain.MOVE_SEGM_DEBUG

MOVE_SEGM_SOURCEFILES = _ida_domain.MOVE_SEGM_SOURCEFILES

MOVE_SEGM_MAPPING = _ida_domain.MOVE_SEGM_MAPPING

MOVE_SEGM_INVAL = _ida_domain.MOVE_SEGM_INVAL


def move_segm_strerror(code: "move_segm_code_t") -> "char const *":
    r"""move_segm_strerror(code) -> char const *"""
    return _ida_domain.move_segm_strerror(code)

def move_segm(s: "segment_t", to: "ea_t", flags: "int"=0) -> "move_segm_code_t":
    r"""move_segm(s, to, flags=0) -> move_segm_code_t"""
    return _ida_domain.move_segm(s, to, flags)
MSF_SILENT = _ida_domain.MSF_SILENT

MSF_NOFIX = _ida_domain.MSF_NOFIX

MSF_LDKEEP = _ida_domain.MSF_LDKEEP

MSF_FIXONCE = _ida_domain.MSF_FIXONCE

MSF_PRIORITY = _ida_domain.MSF_PRIORITY

MSF_NETNODES = _ida_domain.MSF_NETNODES


def change_segment_status(s: "segment_t", is_deb_segm: "bool") -> "int":
    r"""change_segment_status(s, is_deb_segm) -> int"""
    return _ida_domain.change_segment_status(s, is_deb_segm)
CSS_OK = _ida_domain.CSS_OK

CSS_NODBG = _ida_domain.CSS_NODBG

CSS_NORANGE = _ida_domain.CSS_NORANGE

CSS_NOMEM = _ida_domain.CSS_NOMEM

CSS_BREAK = _ida_domain.CSS_BREAK

SNAP_ALL_SEG = _ida_domain.SNAP_ALL_SEG

SNAP_LOAD_SEG = _ida_domain.SNAP_LOAD_SEG

SNAP_CUR_SEG = _ida_domain.SNAP_CUR_SEG


def take_memory_snapshot(type: "int") -> "bool":
    r"""take_memory_snapshot(type) -> bool"""
    return _ida_domain.take_memory_snapshot(type)

def is_miniidb() -> "bool":
    r"""is_miniidb() -> bool"""
    return _ida_domain.is_miniidb()

def set_segm_base(s: "segment_t", newbase: "ea_t") -> "bool":
    r"""set_segm_base(s, newbase) -> bool"""
    return _ida_domain.set_segm_base(s, newbase)

def set_group_selector(grp: "sel_t", sel: "sel_t") -> "int":
    r"""set_group_selector(grp, sel) -> int"""
    return _ida_domain.set_group_selector(grp, sel)
MAX_GROUPS = _ida_domain.MAX_GROUPS


def get_group_selector(grpsel: "sel_t") -> "sel_t":
    r"""get_group_selector(grpsel) -> sel_t"""
    return _ida_domain.get_group_selector(grpsel)

def add_segment_translation(segstart: "ea_t", mappedseg: "ea_t") -> "bool":
    r"""add_segment_translation(segstart, mappedseg) -> bool"""
    return _ida_domain.add_segment_translation(segstart, mappedseg)
MAX_SEGM_TRANSLATIONS = _ida_domain.MAX_SEGM_TRANSLATIONS


def del_segment_translations(segstart: "ea_t") -> "void":
    r"""del_segment_translations(segstart)"""
    return _ida_domain.del_segment_translations(segstart)

def get_segment_translations(transmap: "uint64vec_t", segstart: "ea_t") -> "ssize_t":
    r"""get_segment_translations(transmap, segstart) -> ssize_t"""
    return _ida_domain.get_segment_translations(transmap, segstart)

def get_segment_cmt(s: "segment_t", repeatable: "bool") -> "qstring *":
    r"""get_segment_cmt(s, repeatable) -> ssize_t"""
    return _ida_domain.get_segment_cmt(s, repeatable)

def set_segment_cmt(s: "segment_t", cmt: "char const *", repeatable: "bool") -> "void":
    r"""set_segment_cmt(s, cmt, repeatable)"""
    return _ida_domain.set_segment_cmt(s, cmt, repeatable)

def std_out_segm_footer(ctx: "outctx_t", seg: "segment_t") -> "void":
    r"""std_out_segm_footer(ctx, seg)"""
    return _ida_domain.std_out_segm_footer(ctx, seg)

def set_segm_name(s: "segment_t", name: "char const *", flags: "int"=0) -> "int":
    r"""set_segm_name(s, name, flags=0) -> int"""
    return _ida_domain.set_segm_name(s, name, flags)

def get_segm_name(s: "segment_t", flags: "int"=0) -> "qstring *":
    r"""get_segm_name(s, flags=0) -> ssize_t"""
    return _ida_domain.get_segm_name(s, flags)

def get_visible_segm_name(s: "segment_t") -> "qstring *":
    r"""get_visible_segm_name(s) -> ssize_t"""
    return _ida_domain.get_visible_segm_name(s)

def get_segm_class(s: "segment_t") -> "qstring *":
    r"""get_segm_class(s) -> ssize_t"""
    return _ida_domain.get_segm_class(s)

def set_segm_class(s: "segment_t", sclass: "char const *", flags: "int"=0) -> "int":
    r"""set_segm_class(s, sclass, flags=0) -> int"""
    return _ida_domain.set_segm_class(s, sclass, flags)

def segtype(ea: "ea_t") -> "uchar":
    r"""segtype(ea) -> uchar"""
    return _ida_domain.segtype(ea)

def get_segment_alignment(align: "uchar") -> "char const *":
    r"""get_segment_alignment(align) -> char const *"""
    return _ida_domain.get_segment_alignment(align)

def get_segment_combination(comb: "uchar") -> "char const *":
    r"""get_segment_combination(comb) -> char const *"""
    return _ida_domain.get_segment_combination(comb)

def get_segm_para(s: "segment_t") -> "ea_t":
    r"""get_segm_para(s) -> ea_t"""
    return _ida_domain.get_segm_para(s)

def get_segm_base(s: "segment_t") -> "ea_t":
    r"""get_segm_base(s) -> ea_t"""
    return _ida_domain.get_segm_base(s)

def set_segm_addressing(s: "segment_t", bitness: "size_t") -> "bool":
    r"""set_segm_addressing(s, bitness) -> bool"""
    return _ida_domain.set_segm_addressing(s, bitness)

def update_segm(s: "segment_t") -> "bool":
    r"""update_segm(s) -> bool"""
    return _ida_domain.update_segm(s)

def segm_adjust_diff(s: "segment_t", delta: "adiff_t") -> "adiff_t":
    r"""segm_adjust_diff(s, delta) -> adiff_t"""
    return _ida_domain.segm_adjust_diff(s, delta)

def segm_adjust_ea(s: "segment_t", ea: "ea_t") -> "ea_t":
    r"""segm_adjust_ea(s, ea) -> ea_t"""
    return _ida_domain.segm_adjust_ea(s, ea)

def get_defsr(s: "segment_t", reg: "int") -> "sel_t":
    r"""get_defsr(s, reg) -> sel_t"""
    return _ida_domain.get_defsr(s, reg)

def set_defsr(s: "segment_t", reg: "int", value: "sel_t") -> "void":
    r"""set_defsr(s, reg, value)"""
    return _ida_domain.set_defsr(s, reg, value)

def rebase_program(delta: "PyObject *", flags: "int") -> "int":
    r"""rebase_program(delta, flags) -> int"""
    return _ida_domain.rebase_program(delta, flags)
class direntry_vec_t(object):
    r"""Proxy of C++ qvector< direntry_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> direntry_vec_t
        __init__(self, x) -> direntry_vec_t
        """
        _ida_domain.direntry_vec_t_swiginit(self, _ida_domain.new_direntry_vec_t(*args))
    __swig_destroy__ = _ida_domain.delete_direntry_vec_t

    def push_back(self, *args) -> "direntry_t &":
        r"""
        push_back(self, x)
        push_back(self) -> direntry_t
        """
        return _ida_domain.direntry_vec_t_push_back(self, *args)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.direntry_vec_t_pop_back(self)

    def size(self) -> "size_t":
        r"""size(self) -> size_t"""
        return _ida_domain.direntry_vec_t_size(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.direntry_vec_t_empty(self)

    def at(self, _idx: "size_t") -> "direntry_t const &":
        r"""at(self, _idx) -> direntry_t"""
        return _ida_domain.direntry_vec_t_at(self, _idx)

    def qclear(self) -> "void":
        r"""qclear(self)"""
        return _ida_domain.direntry_vec_t_qclear(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.direntry_vec_t_clear(self)

    def resize(self, *args) -> "void":
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_domain.direntry_vec_t_resize(self, *args)

    def grow(self, *args) -> "void":
        r"""grow(self, x=direntry_t())"""
        return _ida_domain.direntry_vec_t_grow(self, *args)

    def capacity(self) -> "size_t":
        r"""capacity(self) -> size_t"""
        return _ida_domain.direntry_vec_t_capacity(self)

    def reserve(self, cnt: "size_t") -> "void":
        r"""reserve(self, cnt)"""
        return _ida_domain.direntry_vec_t_reserve(self, cnt)

    def truncate(self) -> "void":
        r"""truncate(self)"""
        return _ida_domain.direntry_vec_t_truncate(self)

    def swap(self, r: "direntry_vec_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.direntry_vec_t_swap(self, r)

    def extract(self) -> "direntry_t *":
        r"""extract(self) -> direntry_t"""
        return _ida_domain.direntry_vec_t_extract(self)

    def inject(self, s: "direntry_t", len: "size_t") -> "void":
        r"""inject(self, s, len)"""
        return _ida_domain.direntry_vec_t_inject(self, s, len)

    def __eq__(self, r: "direntry_vec_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.direntry_vec_t___eq__(self, r)

    def __ne__(self, r: "direntry_vec_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.direntry_vec_t___ne__(self, r)

    def begin(self, *args) -> "qvector< direntry_t >::const_iterator":
        r"""
        begin(self) -> direntry_t
        begin(self) -> direntry_t
        """
        return _ida_domain.direntry_vec_t_begin(self, *args)

    def end(self, *args) -> "qvector< direntry_t >::const_iterator":
        r"""
        end(self) -> direntry_t
        end(self) -> direntry_t
        """
        return _ida_domain.direntry_vec_t_end(self, *args)

    def insert(self, it: "direntry_t", x: "direntry_t") -> "qvector< direntry_t >::iterator":
        r"""insert(self, it, x) -> direntry_t"""
        return _ida_domain.direntry_vec_t_insert(self, it, x)

    def erase(self, *args) -> "qvector< direntry_t >::iterator":
        r"""
        erase(self, it) -> direntry_t
        erase(self, first, last) -> direntry_t
        """
        return _ida_domain.direntry_vec_t_erase(self, *args)

    def find(self, *args) -> "qvector< direntry_t >::const_iterator":
        r"""
        find(self, x) -> direntry_t
        find(self, x) -> direntry_t
        """
        return _ida_domain.direntry_vec_t_find(self, *args)

    def has(self, x: "direntry_t") -> "bool":
        r"""has(self, x) -> bool"""
        return _ida_domain.direntry_vec_t_has(self, x)

    def add_unique(self, x: "direntry_t") -> "bool":
        r"""add_unique(self, x) -> bool"""
        return _ida_domain.direntry_vec_t_add_unique(self, x)

    def _del(self, x: "direntry_t") -> "bool":
        r"""_del(self, x) -> bool"""
        return _ida_domain.direntry_vec_t__del(self, x)

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.direntry_vec_t___len__(self)

    def __getitem__(self, i: "size_t") -> "direntry_t const &":
        r"""__getitem__(self, i) -> direntry_t"""
        return _ida_domain.direntry_vec_t___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "direntry_t") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.direntry_vec_t___setitem__(self, i, v)

    def append(self, x: "direntry_t") -> "void":
        r"""append(self, x)"""
        return _ida_domain.direntry_vec_t_append(self, x)

    def extend(self, x: "direntry_vec_t") -> "void":
        r"""extend(self, x)"""
        return _ida_domain.direntry_vec_t_extend(self, x)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register direntry_vec_t in _ida_domain:
_ida_domain.direntry_vec_t_swigregister(direntry_vec_t)
class dirtree_cursor_vec_t(object):
    r"""Proxy of C++ qvector< dirtree_cursor_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> dirtree_cursor_vec_t
        __init__(self, x) -> dirtree_cursor_vec_t
        """
        _ida_domain.dirtree_cursor_vec_t_swiginit(self, _ida_domain.new_dirtree_cursor_vec_t(*args))
    __swig_destroy__ = _ida_domain.delete_dirtree_cursor_vec_t

    def push_back(self, *args) -> "dirtree_cursor_t &":
        r"""
        push_back(self, x)
        push_back(self) -> dirtree_cursor_t
        """
        return _ida_domain.dirtree_cursor_vec_t_push_back(self, *args)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.dirtree_cursor_vec_t_pop_back(self)

    def size(self) -> "size_t":
        r"""size(self) -> size_t"""
        return _ida_domain.dirtree_cursor_vec_t_size(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.dirtree_cursor_vec_t_empty(self)

    def at(self, _idx: "size_t") -> "dirtree_cursor_t const &":
        r"""at(self, _idx) -> dirtree_cursor_t"""
        return _ida_domain.dirtree_cursor_vec_t_at(self, _idx)

    def qclear(self) -> "void":
        r"""qclear(self)"""
        return _ida_domain.dirtree_cursor_vec_t_qclear(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.dirtree_cursor_vec_t_clear(self)

    def resize(self, *args) -> "void":
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_domain.dirtree_cursor_vec_t_resize(self, *args)

    def grow(self, *args) -> "void":
        r"""grow(self, x=dirtree_cursor_t())"""
        return _ida_domain.dirtree_cursor_vec_t_grow(self, *args)

    def capacity(self) -> "size_t":
        r"""capacity(self) -> size_t"""
        return _ida_domain.dirtree_cursor_vec_t_capacity(self)

    def reserve(self, cnt: "size_t") -> "void":
        r"""reserve(self, cnt)"""
        return _ida_domain.dirtree_cursor_vec_t_reserve(self, cnt)

    def truncate(self) -> "void":
        r"""truncate(self)"""
        return _ida_domain.dirtree_cursor_vec_t_truncate(self)

    def swap(self, r: "dirtree_cursor_vec_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.dirtree_cursor_vec_t_swap(self, r)

    def extract(self) -> "dirtree_cursor_t *":
        r"""extract(self) -> dirtree_cursor_t"""
        return _ida_domain.dirtree_cursor_vec_t_extract(self)

    def inject(self, s: "dirtree_cursor_t", len: "size_t") -> "void":
        r"""inject(self, s, len)"""
        return _ida_domain.dirtree_cursor_vec_t_inject(self, s, len)

    def __eq__(self, r: "dirtree_cursor_vec_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.dirtree_cursor_vec_t___eq__(self, r)

    def __ne__(self, r: "dirtree_cursor_vec_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.dirtree_cursor_vec_t___ne__(self, r)

    def begin(self, *args) -> "qvector< dirtree_cursor_t >::const_iterator":
        r"""
        begin(self) -> dirtree_cursor_t
        begin(self) -> dirtree_cursor_t
        """
        return _ida_domain.dirtree_cursor_vec_t_begin(self, *args)

    def end(self, *args) -> "qvector< dirtree_cursor_t >::const_iterator":
        r"""
        end(self) -> dirtree_cursor_t
        end(self) -> dirtree_cursor_t
        """
        return _ida_domain.dirtree_cursor_vec_t_end(self, *args)

    def insert(self, it: "dirtree_cursor_t", x: "dirtree_cursor_t") -> "qvector< dirtree_cursor_t >::iterator":
        r"""insert(self, it, x) -> dirtree_cursor_t"""
        return _ida_domain.dirtree_cursor_vec_t_insert(self, it, x)

    def erase(self, *args) -> "qvector< dirtree_cursor_t >::iterator":
        r"""
        erase(self, it) -> dirtree_cursor_t
        erase(self, first, last) -> dirtree_cursor_t
        """
        return _ida_domain.dirtree_cursor_vec_t_erase(self, *args)

    def find(self, *args) -> "qvector< dirtree_cursor_t >::const_iterator":
        r"""
        find(self, x) -> dirtree_cursor_t
        find(self, x) -> dirtree_cursor_t
        """
        return _ida_domain.dirtree_cursor_vec_t_find(self, *args)

    def has(self, x: "dirtree_cursor_t") -> "bool":
        r"""has(self, x) -> bool"""
        return _ida_domain.dirtree_cursor_vec_t_has(self, x)

    def add_unique(self, x: "dirtree_cursor_t") -> "bool":
        r"""add_unique(self, x) -> bool"""
        return _ida_domain.dirtree_cursor_vec_t_add_unique(self, x)

    def _del(self, x: "dirtree_cursor_t") -> "bool":
        r"""_del(self, x) -> bool"""
        return _ida_domain.dirtree_cursor_vec_t__del(self, x)

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.dirtree_cursor_vec_t___len__(self)

    def __getitem__(self, i: "size_t") -> "dirtree_cursor_t const &":
        r"""__getitem__(self, i) -> dirtree_cursor_t"""
        return _ida_domain.dirtree_cursor_vec_t___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "dirtree_cursor_t") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.dirtree_cursor_vec_t___setitem__(self, i, v)

    def append(self, x: "dirtree_cursor_t") -> "void":
        r"""append(self, x)"""
        return _ida_domain.dirtree_cursor_vec_t_append(self, x)

    def extend(self, x: "dirtree_cursor_vec_t") -> "void":
        r"""extend(self, x)"""
        return _ida_domain.dirtree_cursor_vec_t_extend(self, x)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register dirtree_cursor_vec_t in _ida_domain:
_ida_domain.dirtree_cursor_vec_t_swigregister(dirtree_cursor_vec_t)
class direntry_t(object):
    r"""Proxy of C++ direntry_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    idx: "uval_t" = property(_ida_domain.direntry_t_idx_get, _ida_domain.direntry_t_idx_set, doc=r"""idx""")
    isdir: "bool" = property(_ida_domain.direntry_t_isdir_get, _ida_domain.direntry_t_isdir_set, doc=r"""isdir""")
    BADIDX = _ida_domain.direntry_t_BADIDX
    
    ROOTIDX = _ida_domain.direntry_t_ROOTIDX
    

    def __init__(self, *args):
        r"""__init__(self, i=BADIDX, d=False) -> direntry_t"""
        _ida_domain.direntry_t_swiginit(self, _ida_domain.new_direntry_t(*args))

    def valid(self) -> "bool":
        r"""valid(self) -> bool"""
        return _ida_domain.direntry_t_valid(self)

    def __eq__(self, r: "direntry_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.direntry_t___eq__(self, r)

    def __ne__(self, r: "direntry_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.direntry_t___ne__(self, r)

    def __lt__(self, r: "direntry_t") -> "bool":
        r"""__lt__(self, r) -> bool"""
        return _ida_domain.direntry_t___lt__(self, r)
    __swig_destroy__ = _ida_domain.delete_direntry_t

# Register direntry_t in _ida_domain:
_ida_domain.direntry_t_swigregister(direntry_t)
DTN_FULL_NAME = _ida_domain.DTN_FULL_NAME

DTN_DISPLAY_NAME = _ida_domain.DTN_DISPLAY_NAME

class dirspec_t(object):
    r"""Proxy of C++ dirspec_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    flags: "uint32" = property(_ida_domain.dirspec_t_flags_get, _ida_domain.dirspec_t_flags_set, doc=r"""flags""")
    DSF_INODE_EA = _ida_domain.dirspec_t_DSF_INODE_EA
    
    DSF_PRIVRANGE = _ida_domain.dirspec_t_DSF_PRIVRANGE
    
    DSF_ORDERABLE = _ida_domain.dirspec_t_DSF_ORDERABLE
    
    id: "qstring" = property(_ida_domain.dirspec_t_id_get, _ida_domain.dirspec_t_id_set, doc=r"""id""")

    def __init__(self, nm: "char const *"=None, f: "uint32"=0):
        r"""__init__(self, nm=None, f=0) -> dirspec_t"""
        if self.__class__ == dirspec_t:
            _self = None
        else:
            _self = self
        _ida_domain.dirspec_t_swiginit(self, _ida_domain.new_dirspec_t(_self, nm, f))
    __swig_destroy__ = _ida_domain.delete_dirspec_t

    def get_name(self, inode: "inode_t", name_flags: "uint32"=DTN_FULL_NAME) -> "bool":
        r"""get_name(self, inode, name_flags=DTN_FULL_NAME) -> bool"""
        return _ida_domain.dirspec_t_get_name(self, inode, name_flags)

    def get_inode(self, dirpath: "char const *", name: "char const *") -> "inode_t":
        r"""get_inode(self, dirpath, name) -> inode_t"""
        return _ida_domain.dirspec_t_get_inode(self, dirpath, name)

    def get_attrs(self, inode: "inode_t") -> "qstring":
        r"""get_attrs(self, inode) -> qstring"""
        return _ida_domain.dirspec_t_get_attrs(self, inode)

    def rename_inode(self, inode: "inode_t", newname: "char const *") -> "bool":
        r"""rename_inode(self, inode, newname) -> bool"""
        return _ida_domain.dirspec_t_rename_inode(self, inode, newname)

    def unlink_inode(self, inode: "inode_t") -> "void":
        r"""unlink_inode(self, inode)"""
        return _ida_domain.dirspec_t_unlink_inode(self, inode)

    def is_orderable(self) -> "bool":
        r"""is_orderable(self) -> bool"""
        return _ida_domain.dirspec_t_is_orderable(self)

    nodename = id

    def __disown__(self):
        self.this.disown()
        _ida_domain.disown_dirspec_t(self)
        return weakref.proxy(self)

# Register dirspec_t in _ida_domain:
_ida_domain.dirspec_t_swigregister(dirspec_t)
class dirtree_cursor_t(object):
    r"""Proxy of C++ dirtree_cursor_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    parent: "diridx_t" = property(_ida_domain.dirtree_cursor_t_parent_get, _ida_domain.dirtree_cursor_t_parent_set, doc=r"""parent""")
    rank: "size_t" = property(_ida_domain.dirtree_cursor_t_rank_get, _ida_domain.dirtree_cursor_t_rank_set, doc=r"""rank""")

    def __init__(self, *args):
        r"""__init__(self, _parent=BADIDX, _rank=size_t(-1)) -> dirtree_cursor_t"""
        _ida_domain.dirtree_cursor_t_swiginit(self, _ida_domain.new_dirtree_cursor_t(*args))

    def valid(self) -> "bool":
        r"""valid(self) -> bool"""
        return _ida_domain.dirtree_cursor_t_valid(self)

    def is_root_cursor(self) -> "bool":
        r"""is_root_cursor(self) -> bool"""
        return _ida_domain.dirtree_cursor_t_is_root_cursor(self)

    def set_root_cursor(self) -> "void":
        r"""set_root_cursor(self)"""
        return _ida_domain.dirtree_cursor_t_set_root_cursor(self)

    @staticmethod
    def root_cursor() -> "dirtree_cursor_t":
        r"""root_cursor() -> dirtree_cursor_t"""
        return _ida_domain.dirtree_cursor_t_root_cursor()

    def __eq__(self, r: "dirtree_cursor_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.dirtree_cursor_t___eq__(self, r)

    def __ne__(self, r: "dirtree_cursor_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.dirtree_cursor_t___ne__(self, r)

    def __lt__(self, r: "dirtree_cursor_t") -> "bool":
        r"""__lt__(self, r) -> bool"""
        return _ida_domain.dirtree_cursor_t___lt__(self, r)

    def __gt__(self, r: "dirtree_cursor_t") -> "bool":
        r"""__gt__(self, r) -> bool"""
        return _ida_domain.dirtree_cursor_t___gt__(self, r)

    def __le__(self, r: "dirtree_cursor_t") -> "bool":
        r"""__le__(self, r) -> bool"""
        return _ida_domain.dirtree_cursor_t___le__(self, r)

    def __ge__(self, r: "dirtree_cursor_t") -> "bool":
        r"""__ge__(self, r) -> bool"""
        return _ida_domain.dirtree_cursor_t___ge__(self, r)

    def compare(self, r: "dirtree_cursor_t") -> "int":
        r"""compare(self, r) -> int"""
        return _ida_domain.dirtree_cursor_t_compare(self, r)
    __swig_destroy__ = _ida_domain.delete_dirtree_cursor_t

# Register dirtree_cursor_t in _ida_domain:
_ida_domain.dirtree_cursor_t_swigregister(dirtree_cursor_t)
class dirtree_selection_t(dirtree_cursor_vec_t):
    r"""Proxy of C++ dirtree_selection_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> dirtree_selection_t"""
        _ida_domain.dirtree_selection_t_swiginit(self, _ida_domain.new_dirtree_selection_t())
    __swig_destroy__ = _ida_domain.delete_dirtree_selection_t

# Register dirtree_selection_t in _ida_domain:
_ida_domain.dirtree_selection_t_swigregister(dirtree_selection_t)
class dirtree_iterator_t(object):
    r"""Proxy of C++ dirtree_iterator_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pattern: "qstring" = property(_ida_domain.dirtree_iterator_t_pattern_get, _ida_domain.dirtree_iterator_t_pattern_set, doc=r"""pattern""")
    cursor: "dirtree_cursor_t" = property(_ida_domain.dirtree_iterator_t_cursor_get, _ida_domain.dirtree_iterator_t_cursor_set, doc=r"""cursor""")

    def __init__(self):
        r"""__init__(self) -> dirtree_iterator_t"""
        _ida_domain.dirtree_iterator_t_swiginit(self, _ida_domain.new_dirtree_iterator_t())
    __swig_destroy__ = _ida_domain.delete_dirtree_iterator_t

# Register dirtree_iterator_t in _ida_domain:
_ida_domain.dirtree_iterator_t_swigregister(dirtree_iterator_t)
DTE_OK = _ida_domain.DTE_OK

DTE_ALREADY_EXISTS = _ida_domain.DTE_ALREADY_EXISTS

DTE_NOT_FOUND = _ida_domain.DTE_NOT_FOUND

DTE_NOT_DIRECTORY = _ida_domain.DTE_NOT_DIRECTORY

DTE_NOT_EMPTY = _ida_domain.DTE_NOT_EMPTY

DTE_BAD_PATH = _ida_domain.DTE_BAD_PATH

DTE_CANT_RENAME = _ida_domain.DTE_CANT_RENAME

DTE_OWN_CHILD = _ida_domain.DTE_OWN_CHILD

DTE_MAX_DIR = _ida_domain.DTE_MAX_DIR

DTE_LAST = _ida_domain.DTE_LAST

class dirtree_visitor_t(object):
    r"""Proxy of C++ dirtree_visitor_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _ida_domain.delete_dirtree_visitor_t

    def visit(self, c: "dirtree_cursor_t", de: "direntry_t") -> "ssize_t":
        r"""visit(self, c, de) -> ssize_t"""
        return _ida_domain.dirtree_visitor_t_visit(self, c, de)

    def __init__(self):
        r"""__init__(self) -> dirtree_visitor_t"""
        if self.__class__ == dirtree_visitor_t:
            _self = None
        else:
            _self = self
        _ida_domain.dirtree_visitor_t_swiginit(self, _ida_domain.new_dirtree_visitor_t(_self, ))
    def __disown__(self):
        self.this.disown()
        _ida_domain.disown_dirtree_visitor_t(self)
        return weakref.proxy(self)

# Register dirtree_visitor_t in _ida_domain:
_ida_domain.dirtree_visitor_t_swigregister(dirtree_visitor_t)
class dirtree_t(object):
    r"""Proxy of C++ dirtree_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, ds: "dirspec_t"):
        r"""__init__(self, ds) -> dirtree_t"""
        _ida_domain.dirtree_t_swiginit(self, _ida_domain.new_dirtree_t(ds))
    __swig_destroy__ = _ida_domain.delete_dirtree_t

    @staticmethod
    def errstr(err: "dterr_t") -> "char const *":
        r"""errstr(err) -> char const *"""
        return _ida_domain.dirtree_t_errstr(err)

    def is_orderable(self) -> "bool":
        r"""is_orderable(self) -> bool"""
        return _ida_domain.dirtree_t_is_orderable(self)

    def chdir(self, path: "char const *") -> "dterr_t":
        r"""chdir(self, path) -> dterr_t"""
        return _ida_domain.dirtree_t_chdir(self, path)

    def getcwd(self) -> "qstring":
        r"""getcwd(self) -> qstring"""
        return _ida_domain.dirtree_t_getcwd(self)

    def get_abspath(self, *args) -> "qstring":
        r"""
        get_abspath(self, cursor, name_flags=DTN_FULL_NAME) -> qstring
        get_abspath(self, relpath) -> qstring
        """
        return _ida_domain.dirtree_t_get_abspath(self, *args)

    def resolve_cursor(self, cursor: "dirtree_cursor_t") -> "direntry_t":
        r"""resolve_cursor(self, cursor) -> direntry_t"""
        return _ida_domain.dirtree_t_resolve_cursor(self, cursor)

    def resolve_path(self, path: "char const *") -> "direntry_t":
        r"""resolve_path(self, path) -> direntry_t"""
        return _ida_domain.dirtree_t_resolve_path(self, path)

    def isdir(self, *args) -> "bool":
        r"""
        isdir(self, de) -> bool
        isdir(self, path) -> bool
        """
        return _ida_domain.dirtree_t_isdir(self, *args)

    def isfile(self, *args) -> "bool":
        r"""
        isfile(self, de) -> bool
        isfile(self, path) -> bool
        """
        return _ida_domain.dirtree_t_isfile(self, *args)

    def get_entry_name(self, de: "direntry_t", name_flags: "uint32"=DTN_FULL_NAME) -> "qstring":
        r"""get_entry_name(self, de, name_flags=DTN_FULL_NAME) -> qstring"""
        return _ida_domain.dirtree_t_get_entry_name(self, de, name_flags)

    def is_dir_ordered(self, diridx: "diridx_t") -> "bool":
        r"""is_dir_ordered(self, diridx) -> bool"""
        return _ida_domain.dirtree_t_is_dir_ordered(self, diridx)

    def set_natural_order(self, diridx: "diridx_t", enable: "bool") -> "bool":
        r"""set_natural_order(self, diridx, enable) -> bool"""
        return _ida_domain.dirtree_t_set_natural_order(self, diridx, enable)

    def get_dir_size(self, diridx: "diridx_t") -> "ssize_t":
        r"""get_dir_size(self, diridx) -> ssize_t"""
        return _ida_domain.dirtree_t_get_dir_size(self, diridx)

    def get_entry_attrs(self, de: "direntry_t") -> "qstring":
        r"""get_entry_attrs(self, de) -> qstring"""
        return _ida_domain.dirtree_t_get_entry_attrs(self, de)

    def findfirst(self, ff: "dirtree_iterator_t", pattern: "char const *") -> "bool":
        r"""findfirst(self, ff, pattern) -> bool"""
        return _ida_domain.dirtree_t_findfirst(self, ff, pattern)

    def findnext(self, ff: "dirtree_iterator_t") -> "bool":
        r"""findnext(self, ff) -> bool"""
        return _ida_domain.dirtree_t_findnext(self, ff)

    def mkdir(self, path: "char const *") -> "dterr_t":
        r"""mkdir(self, path) -> dterr_t"""
        return _ida_domain.dirtree_t_mkdir(self, path)

    def rmdir(self, path: "char const *") -> "dterr_t":
        r"""rmdir(self, path) -> dterr_t"""
        return _ida_domain.dirtree_t_rmdir(self, path)

    def link(self, *args) -> "dterr_t":
        r"""
        link(self, path) -> dterr_t
        link(self, inode) -> dterr_t
        """
        return _ida_domain.dirtree_t_link(self, *args)

    def unlink(self, *args) -> "dterr_t":
        r"""
        unlink(self, path) -> dterr_t
        unlink(self, inode) -> dterr_t
        """
        return _ida_domain.dirtree_t_unlink(self, *args)

    def rename(self, frm: "char const *", to: "char const *") -> "dterr_t":
        r"""rename(self, frm, to) -> dterr_t"""
        return _ida_domain.dirtree_t_rename(self, frm, to)

    def get_rank(self, diridx: "diridx_t", de: "direntry_t") -> "ssize_t":
        r"""get_rank(self, diridx, de) -> ssize_t"""
        return _ida_domain.dirtree_t_get_rank(self, diridx, de)

    def change_rank(self, path: "char const *", rank_delta: "ssize_t") -> "dterr_t":
        r"""change_rank(self, path, rank_delta) -> dterr_t"""
        return _ida_domain.dirtree_t_change_rank(self, path, rank_delta)

    def get_parent_cursor(self, cursor: "dirtree_cursor_t") -> "dirtree_cursor_t":
        r"""get_parent_cursor(self, cursor) -> dirtree_cursor_t"""
        return _ida_domain.dirtree_t_get_parent_cursor(self, cursor)

    def load(self) -> "bool":
        r"""load(self) -> bool"""
        return _ida_domain.dirtree_t_load(self)

    def save(self) -> "bool":
        r"""save(self) -> bool"""
        return _ida_domain.dirtree_t_save(self)

    def get_id(self) -> "char const *":
        r"""get_id(self) -> char const *"""
        return _ida_domain.dirtree_t_get_id(self)

    def set_id(self, nm: "char const *") -> "void":
        r"""set_id(self, nm)"""
        return _ida_domain.dirtree_t_set_id(self, nm)

    def notify_dirtree(self, added: "bool", inode: "inode_t") -> "void":
        r"""notify_dirtree(self, added, inode)"""
        return _ida_domain.dirtree_t_notify_dirtree(self, added, inode)

    def traverse(self, v: "dirtree_visitor_t") -> "ssize_t":
        r"""traverse(self, v) -> ssize_t"""
        return _ida_domain.dirtree_t_traverse(self, v)

    def find_entry(self, de: "direntry_t") -> "dirtree_cursor_t":
        r"""find_entry(self, de) -> dirtree_cursor_t"""
        return _ida_domain.dirtree_t_find_entry(self, de)

    get_nodename = get_id
    set_nodename = set_id


# Register dirtree_t in _ida_domain:
_ida_domain.dirtree_t_swigregister(dirtree_t)
DIRTREE_LOCAL_TYPES = _ida_domain.DIRTREE_LOCAL_TYPES

DIRTREE_FUNCS = _ida_domain.DIRTREE_FUNCS

DIRTREE_NAMES = _ida_domain.DIRTREE_NAMES

DIRTREE_IMPORTS = _ida_domain.DIRTREE_IMPORTS

DIRTREE_IDAPLACE_BOOKMARKS = _ida_domain.DIRTREE_IDAPLACE_BOOKMARKS

DIRTREE_BPTS = _ida_domain.DIRTREE_BPTS

DIRTREE_LTYPES_BOOKMARKS = _ida_domain.DIRTREE_LTYPES_BOOKMARKS

DIRTREE_END = _ida_domain.DIRTREE_END


def get_std_dirtree(id: "dirtree_id_t") -> "dirtree_t *":
    r"""get_std_dirtree(id) -> dirtree_t"""
    return _ida_domain.get_std_dirtree(id)

def get_auto_state() -> "atype_t":
    r"""get_auto_state() -> atype_t"""
    return _ida_domain.get_auto_state()

def set_auto_state(new_state: "atype_t") -> "atype_t":
    r"""set_auto_state(new_state) -> atype_t"""
    return _ida_domain.set_auto_state(new_state)
class auto_display_t(object):
    r"""Proxy of C++ auto_display_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type: "atype_t" = property(_ida_domain.auto_display_t_type_get, _ida_domain.auto_display_t_type_set, doc=r"""type""")
    ea: "ea_t" = property(_ida_domain.auto_display_t_ea_get, _ida_domain.auto_display_t_ea_set, doc=r"""ea""")
    state: "idastate_t" = property(_ida_domain.auto_display_t_state_get, _ida_domain.auto_display_t_state_set, doc=r"""state""")

    def __init__(self):
        r"""__init__(self) -> auto_display_t"""
        _ida_domain.auto_display_t_swiginit(self, _ida_domain.new_auto_display_t())
    __swig_destroy__ = _ida_domain.delete_auto_display_t

# Register auto_display_t in _ida_domain:
_ida_domain.auto_display_t_swigregister(auto_display_t)
AU_NONE = cvar.AU_NONE
AU_UNK = cvar.AU_UNK
AU_CODE = cvar.AU_CODE
AU_WEAK = cvar.AU_WEAK
AU_PROC = cvar.AU_PROC
AU_TAIL = cvar.AU_TAIL
AU_FCHUNK = cvar.AU_FCHUNK
AU_USED = cvar.AU_USED
AU_USD2 = cvar.AU_USD2
AU_TYPE = cvar.AU_TYPE
AU_LIBF = cvar.AU_LIBF
AU_LBF2 = cvar.AU_LBF2
AU_LBF3 = cvar.AU_LBF3
AU_CHLB = cvar.AU_CHLB
AU_FINAL = cvar.AU_FINAL
st_Ready = cvar.st_Ready
st_Think = cvar.st_Think
st_Waiting = cvar.st_Waiting
st_Work = cvar.st_Work


def get_auto_display(auto_display: "auto_display_t") -> "bool":
    r"""get_auto_display(auto_display) -> bool"""
    return _ida_domain.get_auto_display(auto_display)

def show_auto(*args) -> "void":
    r"""show_auto(ea, type=AU_NONE)"""
    return _ida_domain.show_auto(*args)

def show_addr(ea: "ea_t") -> "void":
    r"""show_addr(ea)"""
    return _ida_domain.show_addr(ea)

def set_ida_state(st: "idastate_t") -> "idastate_t":
    r"""set_ida_state(st) -> idastate_t"""
    return _ida_domain.set_ida_state(st)

def may_create_stkvars() -> "bool":
    r"""may_create_stkvars() -> bool"""
    return _ida_domain.may_create_stkvars()

def may_trace_sp() -> "bool":
    r"""may_trace_sp() -> bool"""
    return _ida_domain.may_trace_sp()

def auto_mark_range(start: "ea_t", end: "ea_t", type: "atype_t") -> "void":
    r"""auto_mark_range(start, end, type)"""
    return _ida_domain.auto_mark_range(start, end, type)

def auto_mark(ea: "ea_t", type: "atype_t") -> "void":
    r"""auto_mark(ea, type)"""
    return _ida_domain.auto_mark(ea, type)

def auto_unmark(start: "ea_t", end: "ea_t", type: "atype_t") -> "void":
    r"""auto_unmark(start, end, type)"""
    return _ida_domain.auto_unmark(start, end, type)

def plan_ea(ea: "ea_t") -> "void":
    r"""plan_ea(ea)"""
    return _ida_domain.plan_ea(ea)

def plan_range(sEA: "ea_t", eEA: "ea_t") -> "void":
    r"""plan_range(sEA, eEA)"""
    return _ida_domain.plan_range(sEA, eEA)

def auto_make_code(ea: "ea_t") -> "void":
    r"""auto_make_code(ea)"""
    return _ida_domain.auto_make_code(ea)

def auto_make_proc(ea: "ea_t") -> "void":
    r"""auto_make_proc(ea)"""
    return _ida_domain.auto_make_proc(ea)

def auto_postpone_analysis(ea: "ea_t") -> "bool":
    r"""auto_postpone_analysis(ea) -> bool"""
    return _ida_domain.auto_postpone_analysis(ea)

def reanalyze_callers(ea: "ea_t", noret: "bool") -> "void":
    r"""reanalyze_callers(ea, noret)"""
    return _ida_domain.reanalyze_callers(ea, noret)

def revert_ida_decisions(ea1: "ea_t", ea2: "ea_t") -> "void":
    r"""revert_ida_decisions(ea1, ea2)"""
    return _ida_domain.revert_ida_decisions(ea1, ea2)

def auto_apply_type(caller: "ea_t", callee: "ea_t") -> "void":
    r"""auto_apply_type(caller, callee)"""
    return _ida_domain.auto_apply_type(caller, callee)

def auto_apply_tail(tail_ea: "ea_t", parent_ea: "ea_t") -> "void":
    r"""auto_apply_tail(tail_ea, parent_ea)"""
    return _ida_domain.auto_apply_tail(tail_ea, parent_ea)

def plan_and_wait(ea1: "ea_t", ea2: "ea_t", final_pass: "bool"=True) -> "int":
    r"""plan_and_wait(ea1, ea2, final_pass=True) -> int"""
    return _ida_domain.plan_and_wait(ea1, ea2, final_pass)

def auto_wait() -> "bool":
    r"""auto_wait() -> bool"""
    return _ida_domain.auto_wait()

def auto_wait_range(ea1: "ea_t", ea2: "ea_t") -> "ssize_t":
    r"""auto_wait_range(ea1, ea2) -> ssize_t"""
    return _ida_domain.auto_wait_range(ea1, ea2)

def auto_make_step(ea1: "ea_t", ea2: "ea_t") -> "bool":
    r"""auto_make_step(ea1, ea2) -> bool"""
    return _ida_domain.auto_make_step(ea1, ea2)

def auto_cancel(ea1: "ea_t", ea2: "ea_t") -> "void":
    r"""auto_cancel(ea1, ea2)"""
    return _ida_domain.auto_cancel(ea1, ea2)

def auto_is_ok() -> "bool":
    r"""auto_is_ok() -> bool"""
    return _ida_domain.auto_is_ok()

def peek_auto_queue(low_ea: "ea_t", type: "atype_t") -> "ea_t":
    r"""peek_auto_queue(low_ea, type) -> ea_t"""
    return _ida_domain.peek_auto_queue(low_ea, type)

def auto_get(type: "atype_t *", lowEA: "ea_t", highEA: "ea_t") -> "ea_t":
    r"""auto_get(type, lowEA, highEA) -> ea_t"""
    return _ida_domain.auto_get(type, lowEA, highEA)

def auto_recreate_insn(ea: "ea_t") -> "int":
    r"""auto_recreate_insn(ea) -> int"""
    return _ida_domain.auto_recreate_insn(ea)

def is_auto_enabled() -> "bool":
    r"""is_auto_enabled() -> bool"""
    return _ida_domain.is_auto_enabled()

def enable_auto(enable: "bool") -> "bool":
    r"""enable_auto(enable) -> bool"""
    return _ida_domain.enable_auto(enable)
class bitrange_t(object):
    r"""Proxy of C++ bitrange_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, bit_ofs: "uint16"=0, size_in_bits: "uint16"=0):
        r"""__init__(self, bit_ofs=0, size_in_bits=0) -> bitrange_t"""
        _ida_domain.bitrange_t_swiginit(self, _ida_domain.new_bitrange_t(bit_ofs, size_in_bits))

    def init(self, bit_ofs: "uint16", size_in_bits: "uint16") -> "void":
        r"""init(self, bit_ofs, size_in_bits)"""
        return _ida_domain.bitrange_t_init(self, bit_ofs, size_in_bits)

    def reset(self) -> "void":
        r"""reset(self)"""
        return _ida_domain.bitrange_t_reset(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.bitrange_t_empty(self)

    def bitoff(self) -> "uint":
        r"""bitoff(self) -> uint"""
        return _ida_domain.bitrange_t_bitoff(self)

    def bitsize(self) -> "uint":
        r"""bitsize(self) -> uint"""
        return _ida_domain.bitrange_t_bitsize(self)

    def bytesize(self) -> "uint":
        r"""bytesize(self) -> uint"""
        return _ida_domain.bitrange_t_bytesize(self)

    def mask64(self) -> "uint64":
        r"""mask64(self) -> uint64"""
        return _ida_domain.bitrange_t_mask64(self)

    def has_common(self, r: "bitrange_t") -> "bool":
        r"""has_common(self, r) -> bool"""
        return _ida_domain.bitrange_t_has_common(self, r)

    def apply_mask(self, subrange: "bitrange_t") -> "bool":
        r"""apply_mask(self, subrange) -> bool"""
        return _ida_domain.bitrange_t_apply_mask(self, subrange)

    def intersect(self, r: "bitrange_t") -> "void":
        r"""intersect(self, r)"""
        return _ida_domain.bitrange_t_intersect(self, r)

    def create_union(self, r: "bitrange_t") -> "void":
        r"""create_union(self, r)"""
        return _ida_domain.bitrange_t_create_union(self, r)

    def sub(self, r: "bitrange_t") -> "bool":
        r"""sub(self, r) -> bool"""
        return _ida_domain.bitrange_t_sub(self, r)

    def shift_down(self, cnt: "uint") -> "void":
        r"""shift_down(self, cnt)"""
        return _ida_domain.bitrange_t_shift_down(self, cnt)

    def shift_up(self, cnt: "uint") -> "void":
        r"""shift_up(self, cnt)"""
        return _ida_domain.bitrange_t_shift_up(self, cnt)

    def extract(self, src: "void const *", is_mf: "bool") -> "bool":
        r"""extract(self, src, is_mf) -> bool"""
        return _ida_domain.bitrange_t_extract(self, src, is_mf)

    def inject(self, dst: "void *", src: "bytevec_t const &", is_mf: "bool") -> "bool":
        r"""inject(self, dst, src, is_mf) -> bool"""
        return _ida_domain.bitrange_t_inject(self, dst, src, is_mf)

    def __eq__(self, r: "bitrange_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.bitrange_t___eq__(self, r)

    def __ne__(self, r: "bitrange_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.bitrange_t___ne__(self, r)

    def __lt__(self, r: "bitrange_t") -> "bool":
        r"""__lt__(self, r) -> bool"""
        return _ida_domain.bitrange_t___lt__(self, r)

    def __gt__(self, r: "bitrange_t") -> "bool":
        r"""__gt__(self, r) -> bool"""
        return _ida_domain.bitrange_t___gt__(self, r)

    def __le__(self, r: "bitrange_t") -> "bool":
        r"""__le__(self, r) -> bool"""
        return _ida_domain.bitrange_t___le__(self, r)

    def __ge__(self, r: "bitrange_t") -> "bool":
        r"""__ge__(self, r) -> bool"""
        return _ida_domain.bitrange_t___ge__(self, r)

    def compare(self, r: "bitrange_t") -> "int":
        r"""compare(self, r) -> int"""
        return _ida_domain.bitrange_t_compare(self, r)

    def __str__(self) -> "qstring":
        r"""__str__(self) -> qstring"""
        return _ida_domain.bitrange_t___str__(self)

    def __repr__(self):
        return f"{self.__class__.__module__}.{self.__class__.__name__}({self.bitoff()}, {self.bitsize()})" % ()

    __swig_destroy__ = _ida_domain.delete_bitrange_t

# Register bitrange_t in _ida_domain:
_ida_domain.bitrange_t_swigregister(bitrange_t)
class qfile_t(object):
    r"""Proxy of C++ qfile_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __idc_cvt_id__: "int" = property(_ida_domain.qfile_t___idc_cvt_id___get, _ida_domain.qfile_t___idc_cvt_id___set, doc=r"""__idc_cvt_id__""")

    def __init__(self, *args):
        r"""
        __init__(self, rhs) -> qfile_t
        __init__(self, pycapsule=None) -> qfile_t
        """
        _ida_domain.qfile_t_swiginit(self, _ida_domain.new_qfile_t(*args))

    def opened(self) -> "bool":
        r"""opened(self) -> bool"""
        return _ida_domain.qfile_t_opened(self)

    def close(self) -> "void":
        r"""close(self)"""
        return _ida_domain.qfile_t_close(self)
    __swig_destroy__ = _ida_domain.delete_qfile_t

    def open(self, filename: "char const *", mode: "char const *") -> "bool":
        r"""open(self, filename, mode) -> bool"""
        return _ida_domain.qfile_t_open(self, filename, mode)

    @staticmethod
    def from_fp(fp: "FILE *") -> "qfile_t *":
        r"""from_fp(fp) -> qfile_t"""
        return _ida_domain.qfile_t_from_fp(fp)

    @staticmethod
    def from_capsule(pycapsule: "PyObject *") -> "qfile_t *":
        r"""from_capsule(pycapsule) -> qfile_t"""
        return _ida_domain.qfile_t_from_capsule(pycapsule)

    @staticmethod
    def tmpfile() -> "qfile_t *":
        r"""tmpfile() -> qfile_t"""
        return _ida_domain.qfile_t_tmpfile()

    def get_fp(self) -> "FILE *":
        r"""get_fp(self) -> FILE *"""
        return _ida_domain.qfile_t_get_fp(self)

    def seek(self, offset: "int64", whence: "int") -> "int":
        r"""seek(self, offset, whence) -> int"""
        return _ida_domain.qfile_t_seek(self, offset, whence)

    def tell(self) -> "int64":
        r"""tell(self) -> int64"""
        return _ida_domain.qfile_t_tell(self)

    def readbytes(self, size: "int", big_endian: "bool") -> "PyObject *":
        r"""readbytes(self, size, big_endian) -> PyObject *"""
        return _ida_domain.qfile_t_readbytes(self, size, big_endian)

    def read(self, size: "int") -> "PyObject *":
        r"""read(self, size) -> PyObject *"""
        return _ida_domain.qfile_t_read(self, size)

    def gets(self, size: "int") -> "PyObject *":
        r"""gets(self, size) -> PyObject *"""
        return _ida_domain.qfile_t_gets(self, size)

    def writebytes(self, py_buf: "PyObject *", big_endian: "bool") -> "int":
        r"""writebytes(self, py_buf, big_endian) -> int"""
        return _ida_domain.qfile_t_writebytes(self, py_buf, big_endian)

    def write(self, py_buf: "PyObject *") -> "int":
        r"""write(self, py_buf) -> int"""
        return _ida_domain.qfile_t_write(self, py_buf)

    def puts(self, str: "char const *") -> "int":
        r"""puts(self, str) -> int"""
        return _ida_domain.qfile_t_puts(self, str)

    def size(self) -> "int64":
        r"""size(self) -> int64"""
        return _ida_domain.qfile_t_size(self)

    def flush(self) -> "int":
        r"""flush(self) -> int"""
        return _ida_domain.qfile_t_flush(self)

    def filename(self) -> "PyObject *":
        r"""filename(self) -> PyObject *"""
        return _ida_domain.qfile_t_filename(self)

    def get_byte(self) -> "PyObject *":
        r"""get_byte(self) -> PyObject *"""
        return _ida_domain.qfile_t_get_byte(self)

    def put_byte(self, chr: "int") -> "int":
        r"""put_byte(self, chr) -> int"""
        return _ida_domain.qfile_t_put_byte(self, chr)

# Register qfile_t in _ida_domain:
_ida_domain.qfile_t_swigregister(qfile_t)

def qfclose(fp: "FILE *") -> "int":
    r"""qfclose(fp) -> int"""
    return _ida_domain.qfclose(fp)
QMOVE_CROSS_FS = _ida_domain.QMOVE_CROSS_FS

QMOVE_OVERWRITE = _ida_domain.QMOVE_OVERWRITE

QMOVE_OVR_RO = _ida_domain.QMOVE_OVR_RO


#<pycode(py_fpro_end)>
qfile_t_from_fp = qfile_t.from_fp
qfile_t_from_capsule = qfile_t.from_capsule
qfile_t_tmpfile = qfile_t.tmpfile
#</pycode(py_fpro_end)>

class bpt_vec_t(object):
    r"""Proxy of C++ qvector< bpt_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> bpt_vec_t
        __init__(self, x) -> bpt_vec_t
        """
        _ida_domain.bpt_vec_t_swiginit(self, _ida_domain.new_bpt_vec_t(*args))
    __swig_destroy__ = _ida_domain.delete_bpt_vec_t

    def push_back(self, *args) -> "bpt_t &":
        r"""
        push_back(self, x)
        push_back(self) -> bpt_t
        """
        return _ida_domain.bpt_vec_t_push_back(self, *args)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.bpt_vec_t_pop_back(self)

    def size(self) -> "size_t":
        r"""size(self) -> size_t"""
        return _ida_domain.bpt_vec_t_size(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.bpt_vec_t_empty(self)

    def at(self, _idx: "size_t") -> "bpt_t const &":
        r"""at(self, _idx) -> bpt_t"""
        return _ida_domain.bpt_vec_t_at(self, _idx)

    def qclear(self) -> "void":
        r"""qclear(self)"""
        return _ida_domain.bpt_vec_t_qclear(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.bpt_vec_t_clear(self)

    def resize(self, *args) -> "void":
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_domain.bpt_vec_t_resize(self, *args)

    def grow(self, *args) -> "void":
        r"""grow(self, x=bpt_t())"""
        return _ida_domain.bpt_vec_t_grow(self, *args)

    def capacity(self) -> "size_t":
        r"""capacity(self) -> size_t"""
        return _ida_domain.bpt_vec_t_capacity(self)

    def reserve(self, cnt: "size_t") -> "void":
        r"""reserve(self, cnt)"""
        return _ida_domain.bpt_vec_t_reserve(self, cnt)

    def truncate(self) -> "void":
        r"""truncate(self)"""
        return _ida_domain.bpt_vec_t_truncate(self)

    def swap(self, r: "bpt_vec_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.bpt_vec_t_swap(self, r)

    def extract(self) -> "bpt_t *":
        r"""extract(self) -> bpt_t"""
        return _ida_domain.bpt_vec_t_extract(self)

    def inject(self, s: "bpt_t", len: "size_t") -> "void":
        r"""inject(self, s, len)"""
        return _ida_domain.bpt_vec_t_inject(self, s, len)

    def begin(self, *args) -> "qvector< bpt_t >::const_iterator":
        r"""
        begin(self) -> bpt_t
        begin(self) -> bpt_t
        """
        return _ida_domain.bpt_vec_t_begin(self, *args)

    def end(self, *args) -> "qvector< bpt_t >::const_iterator":
        r"""
        end(self) -> bpt_t
        end(self) -> bpt_t
        """
        return _ida_domain.bpt_vec_t_end(self, *args)

    def insert(self, it: "bpt_t", x: "bpt_t") -> "qvector< bpt_t >::iterator":
        r"""insert(self, it, x) -> bpt_t"""
        return _ida_domain.bpt_vec_t_insert(self, it, x)

    def erase(self, *args) -> "qvector< bpt_t >::iterator":
        r"""
        erase(self, it) -> bpt_t
        erase(self, first, last) -> bpt_t
        """
        return _ida_domain.bpt_vec_t_erase(self, *args)

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.bpt_vec_t___len__(self)

    def __getitem__(self, i: "size_t") -> "bpt_t const &":
        r"""__getitem__(self, i) -> bpt_t"""
        return _ida_domain.bpt_vec_t___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "bpt_t") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.bpt_vec_t___setitem__(self, i, v)

    def append(self, x: "bpt_t") -> "void":
        r"""append(self, x)"""
        return _ida_domain.bpt_vec_t_append(self, x)

    def extend(self, x: "bpt_vec_t") -> "void":
        r"""extend(self, x)"""
        return _ida_domain.bpt_vec_t_extend(self, x)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register bpt_vec_t in _ida_domain:
_ida_domain.bpt_vec_t_swigregister(bpt_vec_t)
class tev_reg_values_t(object):
    r"""Proxy of C++ qvector< tev_reg_value_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> tev_reg_values_t
        __init__(self, x) -> tev_reg_values_t
        """
        _ida_domain.tev_reg_values_t_swiginit(self, _ida_domain.new_tev_reg_values_t(*args))
    __swig_destroy__ = _ida_domain.delete_tev_reg_values_t

    def push_back(self, *args) -> "tev_reg_value_t &":
        r"""
        push_back(self, x)
        push_back(self) -> tev_reg_value_t
        """
        return _ida_domain.tev_reg_values_t_push_back(self, *args)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.tev_reg_values_t_pop_back(self)

    def size(self) -> "size_t":
        r"""size(self) -> size_t"""
        return _ida_domain.tev_reg_values_t_size(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.tev_reg_values_t_empty(self)

    def at(self, _idx: "size_t") -> "tev_reg_value_t const &":
        r"""at(self, _idx) -> tev_reg_value_t"""
        return _ida_domain.tev_reg_values_t_at(self, _idx)

    def qclear(self) -> "void":
        r"""qclear(self)"""
        return _ida_domain.tev_reg_values_t_qclear(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.tev_reg_values_t_clear(self)

    def resize(self, *args) -> "void":
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_domain.tev_reg_values_t_resize(self, *args)

    def grow(self, *args) -> "void":
        r"""grow(self, x=tev_reg_value_t())"""
        return _ida_domain.tev_reg_values_t_grow(self, *args)

    def capacity(self) -> "size_t":
        r"""capacity(self) -> size_t"""
        return _ida_domain.tev_reg_values_t_capacity(self)

    def reserve(self, cnt: "size_t") -> "void":
        r"""reserve(self, cnt)"""
        return _ida_domain.tev_reg_values_t_reserve(self, cnt)

    def truncate(self) -> "void":
        r"""truncate(self)"""
        return _ida_domain.tev_reg_values_t_truncate(self)

    def swap(self, r: "tev_reg_values_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.tev_reg_values_t_swap(self, r)

    def extract(self) -> "tev_reg_value_t *":
        r"""extract(self) -> tev_reg_value_t"""
        return _ida_domain.tev_reg_values_t_extract(self)

    def inject(self, s: "tev_reg_value_t", len: "size_t") -> "void":
        r"""inject(self, s, len)"""
        return _ida_domain.tev_reg_values_t_inject(self, s, len)

    def begin(self, *args) -> "qvector< tev_reg_value_t >::const_iterator":
        r"""
        begin(self) -> tev_reg_value_t
        begin(self) -> tev_reg_value_t
        """
        return _ida_domain.tev_reg_values_t_begin(self, *args)

    def end(self, *args) -> "qvector< tev_reg_value_t >::const_iterator":
        r"""
        end(self) -> tev_reg_value_t
        end(self) -> tev_reg_value_t
        """
        return _ida_domain.tev_reg_values_t_end(self, *args)

    def insert(self, it: "tev_reg_value_t", x: "tev_reg_value_t") -> "qvector< tev_reg_value_t >::iterator":
        r"""insert(self, it, x) -> tev_reg_value_t"""
        return _ida_domain.tev_reg_values_t_insert(self, it, x)

    def erase(self, *args) -> "qvector< tev_reg_value_t >::iterator":
        r"""
        erase(self, it) -> tev_reg_value_t
        erase(self, first, last) -> tev_reg_value_t
        """
        return _ida_domain.tev_reg_values_t_erase(self, *args)

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.tev_reg_values_t___len__(self)

    def __getitem__(self, i: "size_t") -> "tev_reg_value_t const &":
        r"""__getitem__(self, i) -> tev_reg_value_t"""
        return _ida_domain.tev_reg_values_t___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "tev_reg_value_t") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.tev_reg_values_t___setitem__(self, i, v)

    def append(self, x: "tev_reg_value_t") -> "void":
        r"""append(self, x)"""
        return _ida_domain.tev_reg_values_t_append(self, x)

    def extend(self, x: "tev_reg_values_t") -> "void":
        r"""extend(self, x)"""
        return _ida_domain.tev_reg_values_t_extend(self, x)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register tev_reg_values_t in _ida_domain:
_ida_domain.tev_reg_values_t_swigregister(tev_reg_values_t)
class tevinforeg_vec_t(object):
    r"""Proxy of C++ qvector< tev_info_reg_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> tevinforeg_vec_t
        __init__(self, x) -> tevinforeg_vec_t
        """
        _ida_domain.tevinforeg_vec_t_swiginit(self, _ida_domain.new_tevinforeg_vec_t(*args))
    __swig_destroy__ = _ida_domain.delete_tevinforeg_vec_t

    def push_back(self, *args) -> "tev_info_reg_t &":
        r"""
        push_back(self, x)
        push_back(self) -> tev_info_reg_t
        """
        return _ida_domain.tevinforeg_vec_t_push_back(self, *args)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.tevinforeg_vec_t_pop_back(self)

    def size(self) -> "size_t":
        r"""size(self) -> size_t"""
        return _ida_domain.tevinforeg_vec_t_size(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.tevinforeg_vec_t_empty(self)

    def at(self, _idx: "size_t") -> "tev_info_reg_t const &":
        r"""at(self, _idx) -> tev_info_reg_t"""
        return _ida_domain.tevinforeg_vec_t_at(self, _idx)

    def qclear(self) -> "void":
        r"""qclear(self)"""
        return _ida_domain.tevinforeg_vec_t_qclear(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.tevinforeg_vec_t_clear(self)

    def resize(self, *args) -> "void":
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_domain.tevinforeg_vec_t_resize(self, *args)

    def grow(self, *args) -> "void":
        r"""grow(self, x=tev_info_reg_t())"""
        return _ida_domain.tevinforeg_vec_t_grow(self, *args)

    def capacity(self) -> "size_t":
        r"""capacity(self) -> size_t"""
        return _ida_domain.tevinforeg_vec_t_capacity(self)

    def reserve(self, cnt: "size_t") -> "void":
        r"""reserve(self, cnt)"""
        return _ida_domain.tevinforeg_vec_t_reserve(self, cnt)

    def truncate(self) -> "void":
        r"""truncate(self)"""
        return _ida_domain.tevinforeg_vec_t_truncate(self)

    def swap(self, r: "tevinforeg_vec_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.tevinforeg_vec_t_swap(self, r)

    def extract(self) -> "tev_info_reg_t *":
        r"""extract(self) -> tev_info_reg_t"""
        return _ida_domain.tevinforeg_vec_t_extract(self)

    def inject(self, s: "tev_info_reg_t", len: "size_t") -> "void":
        r"""inject(self, s, len)"""
        return _ida_domain.tevinforeg_vec_t_inject(self, s, len)

    def begin(self, *args) -> "qvector< tev_info_reg_t >::const_iterator":
        r"""
        begin(self) -> tev_info_reg_t
        begin(self) -> tev_info_reg_t
        """
        return _ida_domain.tevinforeg_vec_t_begin(self, *args)

    def end(self, *args) -> "qvector< tev_info_reg_t >::const_iterator":
        r"""
        end(self) -> tev_info_reg_t
        end(self) -> tev_info_reg_t
        """
        return _ida_domain.tevinforeg_vec_t_end(self, *args)

    def insert(self, it: "tev_info_reg_t", x: "tev_info_reg_t") -> "qvector< tev_info_reg_t >::iterator":
        r"""insert(self, it, x) -> tev_info_reg_t"""
        return _ida_domain.tevinforeg_vec_t_insert(self, it, x)

    def erase(self, *args) -> "qvector< tev_info_reg_t >::iterator":
        r"""
        erase(self, it) -> tev_info_reg_t
        erase(self, first, last) -> tev_info_reg_t
        """
        return _ida_domain.tevinforeg_vec_t_erase(self, *args)

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.tevinforeg_vec_t___len__(self)

    def __getitem__(self, i: "size_t") -> "tev_info_reg_t const &":
        r"""__getitem__(self, i) -> tev_info_reg_t"""
        return _ida_domain.tevinforeg_vec_t___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "tev_info_reg_t") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.tevinforeg_vec_t___setitem__(self, i, v)

    def append(self, x: "tev_info_reg_t") -> "void":
        r"""append(self, x)"""
        return _ida_domain.tevinforeg_vec_t_append(self, x)

    def extend(self, x: "tevinforeg_vec_t") -> "void":
        r"""extend(self, x)"""
        return _ida_domain.tevinforeg_vec_t_extend(self, x)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register tevinforeg_vec_t in _ida_domain:
_ida_domain.tevinforeg_vec_t_swigregister(tevinforeg_vec_t)
class memreg_infos_t(object):
    r"""Proxy of C++ qvector< memreg_info_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> memreg_infos_t
        __init__(self, x) -> memreg_infos_t
        """
        _ida_domain.memreg_infos_t_swiginit(self, _ida_domain.new_memreg_infos_t(*args))
    __swig_destroy__ = _ida_domain.delete_memreg_infos_t

    def push_back(self, *args) -> "memreg_info_t &":
        r"""
        push_back(self, x)
        push_back(self) -> memreg_info_t
        """
        return _ida_domain.memreg_infos_t_push_back(self, *args)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.memreg_infos_t_pop_back(self)

    def size(self) -> "size_t":
        r"""size(self) -> size_t"""
        return _ida_domain.memreg_infos_t_size(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.memreg_infos_t_empty(self)

    def at(self, _idx: "size_t") -> "memreg_info_t const &":
        r"""at(self, _idx) -> memreg_info_t"""
        return _ida_domain.memreg_infos_t_at(self, _idx)

    def qclear(self) -> "void":
        r"""qclear(self)"""
        return _ida_domain.memreg_infos_t_qclear(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.memreg_infos_t_clear(self)

    def resize(self, *args) -> "void":
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_domain.memreg_infos_t_resize(self, *args)

    def grow(self, *args) -> "void":
        r"""grow(self, x=memreg_info_t())"""
        return _ida_domain.memreg_infos_t_grow(self, *args)

    def capacity(self) -> "size_t":
        r"""capacity(self) -> size_t"""
        return _ida_domain.memreg_infos_t_capacity(self)

    def reserve(self, cnt: "size_t") -> "void":
        r"""reserve(self, cnt)"""
        return _ida_domain.memreg_infos_t_reserve(self, cnt)

    def truncate(self) -> "void":
        r"""truncate(self)"""
        return _ida_domain.memreg_infos_t_truncate(self)

    def swap(self, r: "memreg_infos_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.memreg_infos_t_swap(self, r)

    def extract(self) -> "memreg_info_t *":
        r"""extract(self) -> memreg_info_t"""
        return _ida_domain.memreg_infos_t_extract(self)

    def inject(self, s: "memreg_info_t", len: "size_t") -> "void":
        r"""inject(self, s, len)"""
        return _ida_domain.memreg_infos_t_inject(self, s, len)

    def begin(self, *args) -> "qvector< memreg_info_t >::const_iterator":
        r"""
        begin(self) -> memreg_info_t
        begin(self) -> memreg_info_t
        """
        return _ida_domain.memreg_infos_t_begin(self, *args)

    def end(self, *args) -> "qvector< memreg_info_t >::const_iterator":
        r"""
        end(self) -> memreg_info_t
        end(self) -> memreg_info_t
        """
        return _ida_domain.memreg_infos_t_end(self, *args)

    def insert(self, it: "memreg_info_t", x: "memreg_info_t") -> "qvector< memreg_info_t >::iterator":
        r"""insert(self, it, x) -> memreg_info_t"""
        return _ida_domain.memreg_infos_t_insert(self, it, x)

    def erase(self, *args) -> "qvector< memreg_info_t >::iterator":
        r"""
        erase(self, it) -> memreg_info_t
        erase(self, first, last) -> memreg_info_t
        """
        return _ida_domain.memreg_infos_t_erase(self, *args)

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.memreg_infos_t___len__(self)

    def __getitem__(self, i: "size_t") -> "memreg_info_t const &":
        r"""__getitem__(self, i) -> memreg_info_t"""
        return _ida_domain.memreg_infos_t___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "memreg_info_t") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.memreg_infos_t___setitem__(self, i, v)

    def append(self, x: "memreg_info_t") -> "void":
        r"""append(self, x)"""
        return _ida_domain.memreg_infos_t_append(self, x)

    def extend(self, x: "memreg_infos_t") -> "void":
        r"""extend(self, x)"""
        return _ida_domain.memreg_infos_t_extend(self, x)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register memreg_infos_t in _ida_domain:
_ida_domain.memreg_infos_t_swigregister(memreg_infos_t)

def run_to(*args) -> "bool":
    r"""run_to(ea, pid=NO_PROCESS, tid=NO_THREAD) -> bool"""
    return _ida_domain.run_to(*args)

def request_run_to(*args) -> "bool":
    r"""request_run_to(ea, pid=NO_PROCESS, tid=NO_THREAD) -> bool"""
    return _ida_domain.request_run_to(*args)
dbg_null = _ida_domain.dbg_null

dbg_process_start = _ida_domain.dbg_process_start

dbg_process_exit = _ida_domain.dbg_process_exit

dbg_process_attach = _ida_domain.dbg_process_attach

dbg_process_detach = _ida_domain.dbg_process_detach

dbg_thread_start = _ida_domain.dbg_thread_start

dbg_thread_exit = _ida_domain.dbg_thread_exit

dbg_library_load = _ida_domain.dbg_library_load

dbg_library_unload = _ida_domain.dbg_library_unload

dbg_information = _ida_domain.dbg_information

dbg_exception = _ida_domain.dbg_exception

dbg_suspend_process = _ida_domain.dbg_suspend_process

dbg_bpt = _ida_domain.dbg_bpt

dbg_trace = _ida_domain.dbg_trace

dbg_request_error = _ida_domain.dbg_request_error

dbg_step_into = _ida_domain.dbg_step_into

dbg_step_over = _ida_domain.dbg_step_over

dbg_run_to = _ida_domain.dbg_run_to

dbg_step_until_ret = _ida_domain.dbg_step_until_ret

dbg_bpt_changed = _ida_domain.dbg_bpt_changed

dbg_started_loading_bpts = _ida_domain.dbg_started_loading_bpts

dbg_finished_loading_bpts = _ida_domain.dbg_finished_loading_bpts

dbg_last = _ida_domain.dbg_last

BPTEV_ADDED = _ida_domain.BPTEV_ADDED

BPTEV_REMOVED = _ida_domain.BPTEV_REMOVED

BPTEV_CHANGED = _ida_domain.BPTEV_CHANGED


def run_requests() -> "bool":
    r"""run_requests() -> bool"""
    return _ida_domain.run_requests()

def get_running_request() -> "ui_notification_t":
    r"""get_running_request() -> ui_notification_t"""
    return _ida_domain.get_running_request()

def is_request_running() -> "bool":
    r"""is_request_running() -> bool"""
    return _ida_domain.is_request_running()

def get_running_notification() -> "dbg_notification_t":
    r"""get_running_notification() -> dbg_notification_t"""
    return _ida_domain.get_running_notification()

def clear_requests_queue() -> "void":
    r"""clear_requests_queue()"""
    return _ida_domain.clear_requests_queue()

def get_process_state() -> "int":
    r"""get_process_state() -> int"""
    return _ida_domain.get_process_state()
DSTATE_SUSP = _ida_domain.DSTATE_SUSP

DSTATE_NOTASK = _ida_domain.DSTATE_NOTASK

DSTATE_RUN = _ida_domain.DSTATE_RUN


def is_valid_dstate(state: "int") -> "bool":
    r"""is_valid_dstate(state) -> bool"""
    return _ida_domain.is_valid_dstate(state)
DBGINV_MEMORY = _ida_domain.DBGINV_MEMORY

DBGINV_MEMCFG = _ida_domain.DBGINV_MEMCFG

DBGINV_REGS = _ida_domain.DBGINV_REGS

DBGINV_ALL = _ida_domain.DBGINV_ALL

DBGINV_REDRAW = _ida_domain.DBGINV_REDRAW

DBGINV_NONE = _ida_domain.DBGINV_NONE


def set_process_state(newstate: "int", p_thid: "thid_t *", dbginv: "int") -> "int":
    r"""set_process_state(newstate, p_thid, dbginv) -> int"""
    return _ida_domain.set_process_state(newstate, p_thid, dbginv)

def invalidate_dbg_state(dbginv: "int") -> "int":
    r"""invalidate_dbg_state(dbginv) -> int"""
    return _ida_domain.invalidate_dbg_state(dbginv)

def start_process(path: "char const *"=None, args: "char const *"=None, sdir: "char const *"=None) -> "int":
    r"""start_process(path=None, args=None, sdir=None) -> int"""
    return _ida_domain.start_process(path, args, sdir)

def request_start_process(path: "char const *"=None, args: "char const *"=None, sdir: "char const *"=None) -> "int":
    r"""request_start_process(path=None, args=None, sdir=None) -> int"""
    return _ida_domain.request_start_process(path, args, sdir)

def suspend_process() -> "bool":
    r"""suspend_process() -> bool"""
    return _ida_domain.suspend_process()

def request_suspend_process() -> "bool":
    r"""request_suspend_process() -> bool"""
    return _ida_domain.request_suspend_process()

def continue_process() -> "bool":
    r"""continue_process() -> bool"""
    return _ida_domain.continue_process()

def request_continue_process() -> "bool":
    r"""request_continue_process() -> bool"""
    return _ida_domain.request_continue_process()

def continue_backwards() -> "bool":
    r"""continue_backwards() -> bool"""
    return _ida_domain.continue_backwards()

def request_continue_backwards() -> "bool":
    r"""request_continue_backwards() -> bool"""
    return _ida_domain.request_continue_backwards()

def exit_process() -> "bool":
    r"""exit_process() -> bool"""
    return _ida_domain.exit_process()

def request_exit_process() -> "bool":
    r"""request_exit_process() -> bool"""
    return _ida_domain.request_exit_process()

def get_processes(proclist: "procinfo_vec_t *") -> "ssize_t":
    r"""get_processes(proclist) -> ssize_t"""
    return _ida_domain.get_processes(proclist)

def attach_process(*args) -> "int":
    r"""attach_process(pid=NO_PROCESS, event_id=-1) -> int"""
    return _ida_domain.attach_process(*args)

def request_attach_process(pid: "pid_t", event_id: "int") -> "int":
    r"""request_attach_process(pid, event_id) -> int"""
    return _ida_domain.request_attach_process(pid, event_id)

def detach_process() -> "bool":
    r"""detach_process() -> bool"""
    return _ida_domain.detach_process()

def request_detach_process() -> "bool":
    r"""request_detach_process() -> bool"""
    return _ida_domain.request_detach_process()

def is_debugger_busy() -> "bool":
    r"""is_debugger_busy() -> bool"""
    return _ida_domain.is_debugger_busy()

def get_thread_qty() -> "int":
    r"""get_thread_qty() -> int"""
    return _ida_domain.get_thread_qty()

def getn_thread(n: "int") -> "thid_t":
    r"""getn_thread(n) -> thid_t"""
    return _ida_domain.getn_thread(n)

def get_current_thread() -> "thid_t":
    r"""get_current_thread() -> thid_t"""
    return _ida_domain.get_current_thread()

def getn_thread_name(n: "int") -> "char const *":
    r"""getn_thread_name(n) -> char const *"""
    return _ida_domain.getn_thread_name(n)

def select_thread(tid: "thid_t") -> "bool":
    r"""select_thread(tid) -> bool"""
    return _ida_domain.select_thread(tid)

def request_select_thread(tid: "thid_t") -> "bool":
    r"""request_select_thread(tid) -> bool"""
    return _ida_domain.request_select_thread(tid)

def suspend_thread(tid: "thid_t") -> "int":
    r"""suspend_thread(tid) -> int"""
    return _ida_domain.suspend_thread(tid)

def request_suspend_thread(tid: "thid_t") -> "int":
    r"""request_suspend_thread(tid) -> int"""
    return _ida_domain.request_suspend_thread(tid)

def resume_thread(tid: "thid_t") -> "int":
    r"""resume_thread(tid) -> int"""
    return _ida_domain.resume_thread(tid)

def request_resume_thread(tid: "thid_t") -> "int":
    r"""request_resume_thread(tid) -> int"""
    return _ida_domain.request_resume_thread(tid)

def get_first_module(modinfo: "modinfo_t *") -> "bool":
    r"""get_first_module(modinfo) -> bool"""
    return _ida_domain.get_first_module(modinfo)

def get_next_module(modinfo: "modinfo_t *") -> "bool":
    r"""get_next_module(modinfo) -> bool"""
    return _ida_domain.get_next_module(modinfo)

def step_into() -> "bool":
    r"""step_into() -> bool"""
    return _ida_domain.step_into()

def request_step_into() -> "bool":
    r"""request_step_into() -> bool"""
    return _ida_domain.request_step_into()

def step_over() -> "bool":
    r"""step_over() -> bool"""
    return _ida_domain.step_over()

def request_step_over() -> "bool":
    r"""request_step_over() -> bool"""
    return _ida_domain.request_step_over()

def step_into_backwards() -> "bool":
    r"""step_into_backwards() -> bool"""
    return _ida_domain.step_into_backwards()

def request_step_into_backwards() -> "bool":
    r"""request_step_into_backwards() -> bool"""
    return _ida_domain.request_step_into_backwards()

def step_over_backwards() -> "bool":
    r"""step_over_backwards() -> bool"""
    return _ida_domain.step_over_backwards()

def request_step_over_backwards() -> "bool":
    r"""request_step_over_backwards() -> bool"""
    return _ida_domain.request_step_over_backwards()

def run_to_backwards(*args) -> "bool":
    r"""run_to_backwards(ea, pid=NO_PROCESS, tid=NO_THREAD) -> bool"""
    return _ida_domain.run_to_backwards(*args)

def request_run_to_backwards(*args) -> "bool":
    r"""request_run_to_backwards(ea, pid=NO_PROCESS, tid=NO_THREAD) -> bool"""
    return _ida_domain.request_run_to_backwards(*args)

def step_until_ret() -> "bool":
    r"""step_until_ret() -> bool"""
    return _ida_domain.step_until_ret()

def request_step_until_ret() -> "bool":
    r"""request_step_until_ret() -> bool"""
    return _ida_domain.request_step_until_ret()

def set_resume_mode(tid: "thid_t", mode: "resume_mode_t") -> "bool":
    r"""set_resume_mode(tid, mode) -> bool"""
    return _ida_domain.set_resume_mode(tid, mode)

def request_set_resume_mode(tid: "thid_t", mode: "resume_mode_t") -> "bool":
    r"""request_set_resume_mode(tid, mode) -> bool"""
    return _ida_domain.request_set_resume_mode(tid, mode)

def get_dbg_reg_info(regname: "char const *", ri: "register_info_t *") -> "bool":
    r"""get_dbg_reg_info(regname, ri) -> bool"""
    return _ida_domain.get_dbg_reg_info(regname, ri)

def get_sp_val() -> "uint64 *":
    r"""get_sp_val() -> bool"""
    return _ida_domain.get_sp_val()

def get_ip_val() -> "uint64 *":
    r"""get_ip_val() -> bool"""
    return _ida_domain.get_ip_val()

def is_reg_integer(regname: "char const *") -> "bool":
    r"""is_reg_integer(regname) -> bool"""
    return _ida_domain.is_reg_integer(regname)

def is_reg_float(regname: "char const *") -> "bool":
    r"""is_reg_float(regname) -> bool"""
    return _ida_domain.is_reg_float(regname)

def is_reg_custom(regname: "char const *") -> "bool":
    r"""is_reg_custom(regname) -> bool"""
    return _ida_domain.is_reg_custom(regname)

def set_bptloc_string(s: "char const *") -> "int":
    r"""set_bptloc_string(s) -> int"""
    return _ida_domain.set_bptloc_string(s)

def get_bptloc_string(i: "int") -> "char const *":
    r"""get_bptloc_string(i) -> char const *"""
    return _ida_domain.get_bptloc_string(i)
MOVBPT_OK = _ida_domain.MOVBPT_OK

MOVBPT_NOT_FOUND = _ida_domain.MOVBPT_NOT_FOUND

MOVBPT_DEST_BUSY = _ida_domain.MOVBPT_DEST_BUSY

MOVBPT_BAD_TYPE = _ida_domain.MOVBPT_BAD_TYPE

class bptaddrs_t(uint64vec_t):
    r"""Proxy of C++ bptaddrs_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bpt: "bpt_t *" = property(_ida_domain.bptaddrs_t_bpt_get, _ida_domain.bptaddrs_t_bpt_set, doc=r"""bpt""")

    def __init__(self):
        r"""__init__(self) -> bptaddrs_t"""
        _ida_domain.bptaddrs_t_swiginit(self, _ida_domain.new_bptaddrs_t())
    __swig_destroy__ = _ida_domain.delete_bptaddrs_t

# Register bptaddrs_t in _ida_domain:
_ida_domain.bptaddrs_t_swigregister(bptaddrs_t)
BPLT_ABS = _ida_domain.BPLT_ABS

BPLT_REL = _ida_domain.BPLT_REL

BPLT_SYM = _ida_domain.BPLT_SYM

BPLT_SRC = _ida_domain.BPLT_SRC

class bpt_location_t(object):
    r"""Proxy of C++ bpt_location_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    info: "ea_t" = property(_ida_domain.bpt_location_t_info_get, _ida_domain.bpt_location_t_info_set, doc=r"""info""")
    index: "int" = property(_ida_domain.bpt_location_t_index_get, _ida_domain.bpt_location_t_index_set, doc=r"""index""")
    loctype: "bpt_loctype_t" = property(_ida_domain.bpt_location_t_loctype_get, _ida_domain.bpt_location_t_loctype_set, doc=r"""loctype""")

    def type(self) -> "bpt_loctype_t":
        r"""type(self) -> bpt_loctype_t"""
        return _ida_domain.bpt_location_t_type(self)

    def is_empty_path(self) -> "bool":
        r"""is_empty_path(self) -> bool"""
        return _ida_domain.bpt_location_t_is_empty_path(self)

    def path(self) -> "char const *":
        r"""path(self) -> char const *"""
        return _ida_domain.bpt_location_t_path(self)

    def symbol(self) -> "char const *":
        r"""symbol(self) -> char const *"""
        return _ida_domain.bpt_location_t_symbol(self)

    def lineno(self) -> "int":
        r"""lineno(self) -> int"""
        return _ida_domain.bpt_location_t_lineno(self)

    def offset(self) -> "uval_t":
        r"""offset(self) -> uval_t"""
        return _ida_domain.bpt_location_t_offset(self)

    def ea(self) -> "ea_t":
        r"""ea(self) -> ea_t"""
        return _ida_domain.bpt_location_t_ea(self)

    def __init__(self):
        r"""__init__(self) -> bpt_location_t"""
        _ida_domain.bpt_location_t_swiginit(self, _ida_domain.new_bpt_location_t())

    def set_abs_bpt(self, a: "ea_t") -> "void":
        r"""set_abs_bpt(self, a)"""
        return _ida_domain.bpt_location_t_set_abs_bpt(self, a)

    def set_src_bpt(self, fn: "char const *", _lineno: "int") -> "void":
        r"""set_src_bpt(self, fn, _lineno)"""
        return _ida_domain.bpt_location_t_set_src_bpt(self, fn, _lineno)

    def set_sym_bpt(self, _symbol: "char const *", _offset: "uval_t"=0) -> "void":
        r"""set_sym_bpt(self, _symbol, _offset=0)"""
        return _ida_domain.bpt_location_t_set_sym_bpt(self, _symbol, _offset)

    def set_rel_bpt(self, mod: "char const *", _offset: "uval_t") -> "void":
        r"""set_rel_bpt(self, mod, _offset)"""
        return _ida_domain.bpt_location_t_set_rel_bpt(self, mod, _offset)

    def compare(self, r: "bpt_location_t") -> "int":
        r"""compare(self, r) -> int"""
        return _ida_domain.bpt_location_t_compare(self, r)

    def __eq__(self, r: "bpt_location_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.bpt_location_t___eq__(self, r)

    def __ne__(self, r: "bpt_location_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.bpt_location_t___ne__(self, r)

    def __lt__(self, r: "bpt_location_t") -> "bool":
        r"""__lt__(self, r) -> bool"""
        return _ida_domain.bpt_location_t___lt__(self, r)

    def __gt__(self, r: "bpt_location_t") -> "bool":
        r"""__gt__(self, r) -> bool"""
        return _ida_domain.bpt_location_t___gt__(self, r)

    def __le__(self, r: "bpt_location_t") -> "bool":
        r"""__le__(self, r) -> bool"""
        return _ida_domain.bpt_location_t___le__(self, r)

    def __ge__(self, r: "bpt_location_t") -> "bool":
        r"""__ge__(self, r) -> bool"""
        return _ida_domain.bpt_location_t___ge__(self, r)
    __swig_destroy__ = _ida_domain.delete_bpt_location_t

# Register bpt_location_t in _ida_domain:
_ida_domain.bpt_location_t_swigregister(bpt_location_t)
class bpt_t(object):
    r"""Proxy of C++ bpt_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cb: "size_t" = property(_ida_domain.bpt_t_cb_get, _ida_domain.bpt_t_cb_set, doc=r"""cb""")
    loc: "bpt_location_t" = property(_ida_domain.bpt_t_loc_get, _ida_domain.bpt_t_loc_set, doc=r"""loc""")
    pid: "pid_t" = property(_ida_domain.bpt_t_pid_get, _ida_domain.bpt_t_pid_set, doc=r"""pid""")
    tid: "thid_t" = property(_ida_domain.bpt_t_tid_get, _ida_domain.bpt_t_tid_set, doc=r"""tid""")
    ea: "ea_t" = property(_ida_domain.bpt_t_ea_get, _ida_domain.bpt_t_ea_set, doc=r"""ea""")
    type: "bpttype_t" = property(_ida_domain.bpt_t_type_get, _ida_domain.bpt_t_type_set, doc=r"""type""")
    pass_count: "int" = property(_ida_domain.bpt_t_pass_count_get, _ida_domain.bpt_t_pass_count_set, doc=r"""pass_count""")
    flags: "uint32" = property(_ida_domain.bpt_t_flags_get, _ida_domain.bpt_t_flags_set, doc=r"""flags""")
    props: "uint32" = property(_ida_domain.bpt_t_props_get, _ida_domain.bpt_t_props_set, doc=r"""props""")
    size: "int" = property(_ida_domain.bpt_t_size_get, _ida_domain.bpt_t_size_set, doc=r"""size""")
    cndidx: "int" = property(_ida_domain.bpt_t_cndidx_get, _ida_domain.bpt_t_cndidx_set, doc=r"""cndidx""")
    bptid: "inode_t" = property(_ida_domain.bpt_t_bptid_get, _ida_domain.bpt_t_bptid_set, doc=r"""bptid""")

    def __init__(self):
        r"""__init__(self) -> bpt_t"""
        _ida_domain.bpt_t_swiginit(self, _ida_domain.new_bpt_t())

    def is_hwbpt(self) -> "bool":
        r"""is_hwbpt(self) -> bool"""
        return _ida_domain.bpt_t_is_hwbpt(self)

    def enabled(self) -> "bool":
        r"""enabled(self) -> bool"""
        return _ida_domain.bpt_t_enabled(self)

    def is_low_level(self) -> "bool":
        r"""is_low_level(self) -> bool"""
        return _ida_domain.bpt_t_is_low_level(self)

    def badbpt(self) -> "bool":
        r"""badbpt(self) -> bool"""
        return _ida_domain.bpt_t_badbpt(self)

    def listbpt(self) -> "bool":
        r"""listbpt(self) -> bool"""
        return _ida_domain.bpt_t_listbpt(self)

    def is_compiled(self) -> "bool":
        r"""is_compiled(self) -> bool"""
        return _ida_domain.bpt_t_is_compiled(self)

    def is_active(self) -> "bool":
        r"""is_active(self) -> bool"""
        return _ida_domain.bpt_t_is_active(self)

    def is_partially_active(self) -> "bool":
        r"""is_partially_active(self) -> bool"""
        return _ida_domain.bpt_t_is_partially_active(self)

    def is_inactive(self) -> "bool":
        r"""is_inactive(self) -> bool"""
        return _ida_domain.bpt_t_is_inactive(self)

    def is_page_bpt(self) -> "bool":
        r"""is_page_bpt(self) -> bool"""
        return _ida_domain.bpt_t_is_page_bpt(self)

    def get_size(self) -> "int":
        r"""get_size(self) -> int"""
        return _ida_domain.bpt_t_get_size(self)

    def set_abs_bpt(self, a: "ea_t") -> "void":
        r"""set_abs_bpt(self, a)"""
        return _ida_domain.bpt_t_set_abs_bpt(self, a)

    def set_src_bpt(self, fn: "char const *", lineno: "int") -> "void":
        r"""set_src_bpt(self, fn, lineno)"""
        return _ida_domain.bpt_t_set_src_bpt(self, fn, lineno)

    def set_sym_bpt(self, sym: "char const *", o: "uval_t") -> "void":
        r"""set_sym_bpt(self, sym, o)"""
        return _ida_domain.bpt_t_set_sym_bpt(self, sym, o)

    def set_rel_bpt(self, mod: "char const *", o: "uval_t") -> "void":
        r"""set_rel_bpt(self, mod, o)"""
        return _ida_domain.bpt_t_set_rel_bpt(self, mod, o)

    def is_absbpt(self) -> "bool":
        r"""is_absbpt(self) -> bool"""
        return _ida_domain.bpt_t_is_absbpt(self)

    def is_relbpt(self) -> "bool":
        r"""is_relbpt(self) -> bool"""
        return _ida_domain.bpt_t_is_relbpt(self)

    def is_symbpt(self) -> "bool":
        r"""is_symbpt(self) -> bool"""
        return _ida_domain.bpt_t_is_symbpt(self)

    def is_srcbpt(self) -> "bool":
        r"""is_srcbpt(self) -> bool"""
        return _ida_domain.bpt_t_is_srcbpt(self)

    def is_tracemodebpt(self) -> "bool":
        r"""is_tracemodebpt(self) -> bool"""
        return _ida_domain.bpt_t_is_tracemodebpt(self)

    def is_traceonbpt(self) -> "bool":
        r"""is_traceonbpt(self) -> bool"""
        return _ida_domain.bpt_t_is_traceonbpt(self)

    def is_traceoffbpt(self) -> "bool":
        r"""is_traceoffbpt(self) -> bool"""
        return _ida_domain.bpt_t_is_traceoffbpt(self)

    def set_trace_action(self, enable: "bool", trace_types: "int") -> "bool":
        r"""set_trace_action(self, enable, trace_types) -> bool"""
        return _ida_domain.bpt_t_set_trace_action(self, enable, trace_types)

    def get_cnd_elang_idx(self) -> "size_t":
        r"""get_cnd_elang_idx(self) -> size_t"""
        return _ida_domain.bpt_t_get_cnd_elang_idx(self)
    condition: "PyObject *" = property(_ida_domain.bpt_t_condition_get, _ida_domain.bpt_t_condition_set, doc=r"""condition""")
    elang: "PyObject *" = property(_ida_domain.bpt_t_elang_get, _ida_domain.bpt_t_elang_set, doc=r"""elang""")
    __swig_destroy__ = _ida_domain.delete_bpt_t

# Register bpt_t in _ida_domain:
_ida_domain.bpt_t_swigregister(bpt_t)
BPT_BRK = _ida_domain.BPT_BRK

BPT_TRACE = _ida_domain.BPT_TRACE

BPT_UPDMEM = _ida_domain.BPT_UPDMEM

BPT_ENABLED = _ida_domain.BPT_ENABLED

BPT_LOWCND = _ida_domain.BPT_LOWCND

BPT_TRACEON = _ida_domain.BPT_TRACEON

BPT_TRACE_INSN = _ida_domain.BPT_TRACE_INSN

BPT_TRACE_FUNC = _ida_domain.BPT_TRACE_FUNC

BPT_TRACE_BBLK = _ida_domain.BPT_TRACE_BBLK

BPT_TRACE_TYPES = _ida_domain.BPT_TRACE_TYPES

BPT_ELANG_MASK = _ida_domain.BPT_ELANG_MASK

BPT_ELANG_SHIFT = _ida_domain.BPT_ELANG_SHIFT

BKPT_BADBPT = _ida_domain.BKPT_BADBPT

BKPT_LISTBPT = _ida_domain.BKPT_LISTBPT

BKPT_TRACE = _ida_domain.BKPT_TRACE

BKPT_ACTIVE = _ida_domain.BKPT_ACTIVE

BKPT_PARTIAL = _ida_domain.BKPT_PARTIAL

BKPT_CNDREADY = _ida_domain.BKPT_CNDREADY

BKPT_FAKEPEND = _ida_domain.BKPT_FAKEPEND

BKPT_PAGE = _ida_domain.BKPT_PAGE



def get_bpt_qty() -> "int":
    r"""get_bpt_qty() -> int"""
    return _ida_domain.get_bpt_qty()

def getn_bpt(n: "int", bpt: "bpt_t") -> "bool":
    r"""getn_bpt(n, bpt) -> bool"""
    return _ida_domain.getn_bpt(n, bpt)

def get_bpt(ea: "ea_t", bpt: "bpt_t") -> "bool":
    r"""get_bpt(ea, bpt) -> bool"""
    return _ida_domain.get_bpt(ea, bpt)

def exist_bpt(ea: "ea_t") -> "bool":
    r"""exist_bpt(ea) -> bool"""
    return _ida_domain.exist_bpt(ea)

def add_bpt(*args) -> "bool":
    r"""
    add_bpt(ea, size=0, type=BPT_DEFAULT) -> bool
    add_bpt(bpt) -> bool
    """
    return _ida_domain.add_bpt(*args)

def request_add_bpt(*args) -> "bool":
    r"""
    request_add_bpt(ea, size=0, type=BPT_DEFAULT) -> bool
    request_add_bpt(bpt) -> bool
    """
    return _ida_domain.request_add_bpt(*args)

def del_bpt(*args) -> "bool":
    r"""
    del_bpt(ea) -> bool
    del_bpt(bptloc) -> bool
    """
    return _ida_domain.del_bpt(*args)

def request_del_bpt(*args) -> "bool":
    r"""
    request_del_bpt(ea) -> bool
    request_del_bpt(bptloc) -> bool
    """
    return _ida_domain.request_del_bpt(*args)

def update_bpt(bpt: "bpt_t") -> "bool":
    r"""update_bpt(bpt) -> bool"""
    return _ida_domain.update_bpt(bpt)

def find_bpt(bptloc: "bpt_location_t", bpt: "bpt_t") -> "bool":
    r"""find_bpt(bptloc, bpt) -> bool"""
    return _ida_domain.find_bpt(bptloc, bpt)

def enable_bpt(*args) -> "bool":
    r"""
    enable_bpt(ea, enable=True) -> bool
    enable_bpt(bptloc, enable=True) -> bool
    """
    return _ida_domain.enable_bpt(*args)

def disable_bpt(*args) -> "bool":
    r"""
    disable_bpt(ea) -> bool
    disable_bpt(bptloc) -> bool
    """
    return _ida_domain.disable_bpt(*args)

def request_enable_bpt(*args) -> "bool":
    r"""
    request_enable_bpt(ea, enable=True) -> bool
    request_enable_bpt(bptloc, enable=True) -> bool
    """
    return _ida_domain.request_enable_bpt(*args)

def request_disable_bpt(*args) -> "bool":
    r"""
    request_disable_bpt(ea) -> bool
    request_disable_bpt(bptloc) -> bool
    """
    return _ida_domain.request_disable_bpt(*args)

def check_bpt(ea: "ea_t") -> "int":
    r"""check_bpt(ea) -> int"""
    return _ida_domain.check_bpt(ea)
BPTCK_NONE = _ida_domain.BPTCK_NONE

BPTCK_NO = _ida_domain.BPTCK_NO

BPTCK_YES = _ida_domain.BPTCK_YES

BPTCK_ACT = _ida_domain.BPTCK_ACT


def set_trace_size(size: "int") -> "bool":
    r"""set_trace_size(size) -> bool"""
    return _ida_domain.set_trace_size(size)

def clear_trace() -> "void":
    r"""clear_trace()"""
    return _ida_domain.clear_trace()

def request_clear_trace() -> "void":
    r"""request_clear_trace()"""
    return _ida_domain.request_clear_trace()

def is_step_trace_enabled() -> "bool":
    r"""is_step_trace_enabled() -> bool"""
    return _ida_domain.is_step_trace_enabled()

def enable_step_trace(enable: "int"=1) -> "bool":
    r"""enable_step_trace(enable=1) -> bool"""
    return _ida_domain.enable_step_trace(enable)

def disable_step_trace() -> "bool":
    r"""disable_step_trace() -> bool"""
    return _ida_domain.disable_step_trace()

def request_enable_step_trace(enable: "int"=1) -> "bool":
    r"""request_enable_step_trace(enable=1) -> bool"""
    return _ida_domain.request_enable_step_trace(enable)

def request_disable_step_trace() -> "bool":
    r"""request_disable_step_trace() -> bool"""
    return _ida_domain.request_disable_step_trace()
ST_OVER_DEBUG_SEG = _ida_domain.ST_OVER_DEBUG_SEG

ST_OVER_LIB_FUNC = _ida_domain.ST_OVER_LIB_FUNC

ST_ALREADY_LOGGED = _ida_domain.ST_ALREADY_LOGGED

ST_SKIP_LOOPS = _ida_domain.ST_SKIP_LOOPS

ST_DIFFERENTIAL = _ida_domain.ST_DIFFERENTIAL

ST_OPTIONS_MASK = _ida_domain.ST_OPTIONS_MASK

ST_OPTIONS_DEFAULT = _ida_domain.ST_OPTIONS_DEFAULT

IT_LOG_SAME_IP = _ida_domain.IT_LOG_SAME_IP

FT_LOG_RET = _ida_domain.FT_LOG_RET

BT_LOG_INSTS = _ida_domain.BT_LOG_INSTS


def get_step_trace_options() -> "int":
    r"""get_step_trace_options() -> int"""
    return _ida_domain.get_step_trace_options()

def set_step_trace_options(options: "int") -> "void":
    r"""set_step_trace_options(options)"""
    return _ida_domain.set_step_trace_options(options)

def request_set_step_trace_options(options: "int") -> "void":
    r"""request_set_step_trace_options(options)"""
    return _ida_domain.request_set_step_trace_options(options)

def is_insn_trace_enabled() -> "bool":
    r"""is_insn_trace_enabled() -> bool"""
    return _ida_domain.is_insn_trace_enabled()

def enable_insn_trace(enable: "bool"=True) -> "bool":
    r"""enable_insn_trace(enable=True) -> bool"""
    return _ida_domain.enable_insn_trace(enable)

def disable_insn_trace() -> "bool":
    r"""disable_insn_trace() -> bool"""
    return _ida_domain.disable_insn_trace()

def request_enable_insn_trace(enable: "bool"=True) -> "bool":
    r"""request_enable_insn_trace(enable=True) -> bool"""
    return _ida_domain.request_enable_insn_trace(enable)

def request_disable_insn_trace() -> "bool":
    r"""request_disable_insn_trace() -> bool"""
    return _ida_domain.request_disable_insn_trace()

def get_insn_trace_options() -> "int":
    r"""get_insn_trace_options() -> int"""
    return _ida_domain.get_insn_trace_options()

def set_insn_trace_options(options: "int") -> "void":
    r"""set_insn_trace_options(options)"""
    return _ida_domain.set_insn_trace_options(options)

def request_set_insn_trace_options(options: "int") -> "void":
    r"""request_set_insn_trace_options(options)"""
    return _ida_domain.request_set_insn_trace_options(options)

def is_func_trace_enabled() -> "bool":
    r"""is_func_trace_enabled() -> bool"""
    return _ida_domain.is_func_trace_enabled()

def enable_func_trace(enable: "bool"=True) -> "bool":
    r"""enable_func_trace(enable=True) -> bool"""
    return _ida_domain.enable_func_trace(enable)

def disable_func_trace() -> "bool":
    r"""disable_func_trace() -> bool"""
    return _ida_domain.disable_func_trace()

def request_enable_func_trace(enable: "bool"=True) -> "bool":
    r"""request_enable_func_trace(enable=True) -> bool"""
    return _ida_domain.request_enable_func_trace(enable)

def request_disable_func_trace() -> "bool":
    r"""request_disable_func_trace() -> bool"""
    return _ida_domain.request_disable_func_trace()

def get_func_trace_options() -> "int":
    r"""get_func_trace_options() -> int"""
    return _ida_domain.get_func_trace_options()

def set_func_trace_options(options: "int") -> "void":
    r"""set_func_trace_options(options)"""
    return _ida_domain.set_func_trace_options(options)

def request_set_func_trace_options(options: "int") -> "void":
    r"""request_set_func_trace_options(options)"""
    return _ida_domain.request_set_func_trace_options(options)

def enable_bblk_trace(enable: "bool"=True) -> "bool":
    r"""enable_bblk_trace(enable=True) -> bool"""
    return _ida_domain.enable_bblk_trace(enable)

def disable_bblk_trace() -> "bool":
    r"""disable_bblk_trace() -> bool"""
    return _ida_domain.disable_bblk_trace()

def request_enable_bblk_trace(enable: "bool"=True) -> "bool":
    r"""request_enable_bblk_trace(enable=True) -> bool"""
    return _ida_domain.request_enable_bblk_trace(enable)

def request_disable_bblk_trace() -> "bool":
    r"""request_disable_bblk_trace() -> bool"""
    return _ida_domain.request_disable_bblk_trace()

def is_bblk_trace_enabled() -> "bool":
    r"""is_bblk_trace_enabled() -> bool"""
    return _ida_domain.is_bblk_trace_enabled()

def get_bblk_trace_options() -> "int":
    r"""get_bblk_trace_options() -> int"""
    return _ida_domain.get_bblk_trace_options()

def set_bblk_trace_options(options: "int") -> "void":
    r"""set_bblk_trace_options(options)"""
    return _ida_domain.set_bblk_trace_options(options)

def request_set_bblk_trace_options(options: "int") -> "void":
    r"""request_set_bblk_trace_options(options)"""
    return _ida_domain.request_set_bblk_trace_options(options)
tev_none = _ida_domain.tev_none

tev_insn = _ida_domain.tev_insn

tev_call = _ida_domain.tev_call

tev_ret = _ida_domain.tev_ret

tev_bpt = _ida_domain.tev_bpt

tev_mem = _ida_domain.tev_mem

tev_event = _ida_domain.tev_event

tev_max = _ida_domain.tev_max

class tev_info_t(object):
    r"""Proxy of C++ tev_info_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type: "tev_type_t" = property(_ida_domain.tev_info_t_type_get, _ida_domain.tev_info_t_type_set, doc=r"""type""")
    tid: "thid_t" = property(_ida_domain.tev_info_t_tid_get, _ida_domain.tev_info_t_tid_set, doc=r"""tid""")
    ea: "ea_t" = property(_ida_domain.tev_info_t_ea_get, _ida_domain.tev_info_t_ea_set, doc=r"""ea""")

    def __init__(self):
        r"""__init__(self) -> tev_info_t"""
        _ida_domain.tev_info_t_swiginit(self, _ida_domain.new_tev_info_t())
    __swig_destroy__ = _ida_domain.delete_tev_info_t

# Register tev_info_t in _ida_domain:
_ida_domain.tev_info_t_swigregister(tev_info_t)
class memreg_info_t(object):
    r"""Proxy of C++ memreg_info_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ea: "ea_t" = property(_ida_domain.memreg_info_t_ea_get, _ida_domain.memreg_info_t_ea_set, doc=r"""ea""")

    def get_bytes(self) -> "PyObject *":
        r"""get_bytes(self) -> PyObject *"""
        return _ida_domain.memreg_info_t_get_bytes(self)

    bytes = property(get_bytes)


    def __init__(self):
        r"""__init__(self) -> memreg_info_t"""
        _ida_domain.memreg_info_t_swiginit(self, _ida_domain.new_memreg_info_t())
    __swig_destroy__ = _ida_domain.delete_memreg_info_t

# Register memreg_info_t in _ida_domain:
_ida_domain.memreg_info_t_swigregister(memreg_info_t)

def get_tev_qty() -> "int":
    r"""get_tev_qty() -> int"""
    return _ida_domain.get_tev_qty()

def get_tev_info(n: "int", tev_info: "tev_info_t") -> "bool":
    r"""get_tev_info(n, tev_info) -> bool"""
    return _ida_domain.get_tev_info(n, tev_info)

def get_insn_tev_reg_val(n: "int", regname: "char const *", regval: "regval_t *") -> "bool":
    r"""get_insn_tev_reg_val(n, regname, regval) -> bool"""
    return _ida_domain.get_insn_tev_reg_val(n, regname, regval)

def get_insn_tev_reg_mem(n: "int", memmap: "memreg_infos_t") -> "bool":
    r"""get_insn_tev_reg_mem(n, memmap) -> bool"""
    return _ida_domain.get_insn_tev_reg_mem(n, memmap)

def get_insn_tev_reg_result(n: "int", regname: "char const *", regval: "regval_t *") -> "bool":
    r"""get_insn_tev_reg_result(n, regname, regval) -> bool"""
    return _ida_domain.get_insn_tev_reg_result(n, regname, regval)

def get_call_tev_callee(n: "int") -> "ea_t":
    r"""get_call_tev_callee(n) -> ea_t"""
    return _ida_domain.get_call_tev_callee(n)

def get_ret_tev_return(n: "int") -> "ea_t":
    r"""get_ret_tev_return(n) -> ea_t"""
    return _ida_domain.get_ret_tev_return(n)

def get_bpt_tev_ea(n: "int") -> "ea_t":
    r"""get_bpt_tev_ea(n) -> ea_t"""
    return _ida_domain.get_bpt_tev_ea(n)

def get_tev_memory_info(n: "int", mi: "meminfo_vec_t *") -> "bool":
    r"""get_tev_memory_info(n, mi) -> bool"""
    return _ida_domain.get_tev_memory_info(n, mi)

def get_tev_event(n: "int", d: "debug_event_t *") -> "bool":
    r"""get_tev_event(n, d) -> bool"""
    return _ida_domain.get_tev_event(n, d)

def get_trace_base_address() -> "ea_t":
    r"""get_trace_base_address() -> ea_t"""
    return _ida_domain.get_trace_base_address()

def set_trace_base_address(ea: "ea_t") -> "void":
    r"""set_trace_base_address(ea)"""
    return _ida_domain.set_trace_base_address(ea)

def dbg_add_thread(tid: "thid_t") -> "void":
    r"""dbg_add_thread(tid)"""
    return _ida_domain.dbg_add_thread(tid)

def dbg_del_thread(tid: "thid_t") -> "void":
    r"""dbg_del_thread(tid)"""
    return _ida_domain.dbg_del_thread(tid)

def dbg_add_tev(type: "tev_type_t", tid: "thid_t", address: "ea_t") -> "void":
    r"""dbg_add_tev(type, tid, address)"""
    return _ida_domain.dbg_add_tev(type, tid, address)
class tev_reg_value_t(object):
    r"""Proxy of C++ tev_reg_value_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    value: "regval_t" = property(_ida_domain.tev_reg_value_t_value_get, _ida_domain.tev_reg_value_t_value_set, doc=r"""value""")
    reg_idx: "int" = property(_ida_domain.tev_reg_value_t_reg_idx_get, _ida_domain.tev_reg_value_t_reg_idx_set, doc=r"""reg_idx""")

    def __init__(self, *args):
        r"""__init__(self, _reg_idx=-1, _value=uint64(-1)) -> tev_reg_value_t"""
        _ida_domain.tev_reg_value_t_swiginit(self, _ida_domain.new_tev_reg_value_t(*args))
    __swig_destroy__ = _ida_domain.delete_tev_reg_value_t

# Register tev_reg_value_t in _ida_domain:
_ida_domain.tev_reg_value_t_swigregister(tev_reg_value_t)
class tev_info_reg_t(object):
    r"""Proxy of C++ tev_info_reg_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    info: "tev_info_t" = property(_ida_domain.tev_info_reg_t_info_get, _ida_domain.tev_info_reg_t_info_set, doc=r"""info""")
    registers: "tev_reg_values_t" = property(_ida_domain.tev_info_reg_t_registers_get, _ida_domain.tev_info_reg_t_registers_set, doc=r"""registers""")

    def __init__(self):
        r"""__init__(self) -> tev_info_reg_t"""
        _ida_domain.tev_info_reg_t_swiginit(self, _ida_domain.new_tev_info_reg_t())
    __swig_destroy__ = _ida_domain.delete_tev_info_reg_t

# Register tev_info_reg_t in _ida_domain:
_ida_domain.tev_info_reg_t_swigregister(tev_info_reg_t)
SAVE_ALL_VALUES = _ida_domain.SAVE_ALL_VALUES

SAVE_DIFF = _ida_domain.SAVE_DIFF

SAVE_NONE = _ida_domain.SAVE_NONE


def dbg_add_many_tevs(new_tevs: "tevinforeg_vec_t") -> "bool":
    r"""dbg_add_many_tevs(new_tevs) -> bool"""
    return _ida_domain.dbg_add_many_tevs(new_tevs)

def dbg_add_insn_tev(tid: "thid_t", ea: "ea_t", save: "save_reg_values_t"=SAVE_DIFF) -> "bool":
    r"""dbg_add_insn_tev(tid, ea, save=SAVE_DIFF) -> bool"""
    return _ida_domain.dbg_add_insn_tev(tid, ea, save)

def dbg_add_bpt_tev(tid: "thid_t", ea: "ea_t", bp: "ea_t") -> "bool":
    r"""dbg_add_bpt_tev(tid, ea, bp) -> bool"""
    return _ida_domain.dbg_add_bpt_tev(tid, ea, bp)

def dbg_add_call_tev(tid: "thid_t", caller: "ea_t", callee: "ea_t") -> "void":
    r"""dbg_add_call_tev(tid, caller, callee)"""
    return _ida_domain.dbg_add_call_tev(tid, caller, callee)

def dbg_add_ret_tev(tid: "thid_t", ret_insn: "ea_t", return_to: "ea_t") -> "void":
    r"""dbg_add_ret_tev(tid, ret_insn, return_to)"""
    return _ida_domain.dbg_add_ret_tev(tid, ret_insn, return_to)

def dbg_add_debug_event(event: "debug_event_t *") -> "void":
    r"""dbg_add_debug_event(event)"""
    return _ida_domain.dbg_add_debug_event(event)

def load_trace_file(filename: "char const *") -> "qstring *":
    r"""load_trace_file(filename) -> bool"""
    return _ida_domain.load_trace_file(filename)

def save_trace_file(filename: "char const *", description: "char const *") -> "bool":
    r"""save_trace_file(filename, description) -> bool"""
    return _ida_domain.save_trace_file(filename, description)

def is_valid_trace_file(filename: "char const *") -> "bool":
    r"""is_valid_trace_file(filename) -> bool"""
    return _ida_domain.is_valid_trace_file(filename)

def set_trace_file_desc(filename: "char const *", description: "char const *") -> "bool":
    r"""set_trace_file_desc(filename, description) -> bool"""
    return _ida_domain.set_trace_file_desc(filename, description)

def get_trace_file_desc(filename: "char const *") -> "qstring *":
    r"""get_trace_file_desc(filename) -> bool"""
    return _ida_domain.get_trace_file_desc(filename)

def choose_trace_file() -> "qstring *":
    r"""choose_trace_file() -> bool"""
    return _ida_domain.choose_trace_file()

def diff_trace_file(filename: "char const *") -> "bool":
    r"""diff_trace_file(filename) -> bool"""
    return _ida_domain.diff_trace_file(filename)

def graph_trace() -> "bool":
    r"""graph_trace() -> bool"""
    return _ida_domain.graph_trace()

def set_highlight_trace_options(hilight: "bool", color: "bgcolor_t", diff: "bgcolor_t") -> "void":
    r"""set_highlight_trace_options(hilight, color, diff)"""
    return _ida_domain.set_highlight_trace_options(hilight, color, diff)

def set_trace_platform(platform: "char const *") -> "void":
    r"""set_trace_platform(platform)"""
    return _ida_domain.set_trace_platform(platform)

def get_trace_platform() -> "char const *":
    r"""get_trace_platform() -> char const *"""
    return _ida_domain.get_trace_platform()

def set_trace_dynamic_register_set(idaregs: "dynamic_register_set_t &") -> "void":
    r"""set_trace_dynamic_register_set(idaregs)"""
    return _ida_domain.set_trace_dynamic_register_set(idaregs)

def get_trace_dynamic_register_set(idaregs: "dynamic_register_set_t *") -> "void":
    r"""get_trace_dynamic_register_set(idaregs)"""
    return _ida_domain.get_trace_dynamic_register_set(idaregs)
DEC_NOTASK = _ida_domain.DEC_NOTASK

DEC_ERROR = _ida_domain.DEC_ERROR

DEC_TIMEOUT = _ida_domain.DEC_TIMEOUT

WFNE_ANY = _ida_domain.WFNE_ANY

WFNE_SUSP = _ida_domain.WFNE_SUSP

WFNE_SILENT = _ida_domain.WFNE_SILENT

WFNE_CONT = _ida_domain.WFNE_CONT

WFNE_NOWAIT = _ida_domain.WFNE_NOWAIT

WFNE_USEC = _ida_domain.WFNE_USEC

DOPT_SEGM_MSGS = _ida_domain.DOPT_SEGM_MSGS

DOPT_START_BPT = _ida_domain.DOPT_START_BPT

DOPT_THREAD_MSGS = _ida_domain.DOPT_THREAD_MSGS

DOPT_THREAD_BPT = _ida_domain.DOPT_THREAD_BPT

DOPT_BPT_MSGS = _ida_domain.DOPT_BPT_MSGS

DOPT_LIB_MSGS = _ida_domain.DOPT_LIB_MSGS

DOPT_LIB_BPT = _ida_domain.DOPT_LIB_BPT

DOPT_INFO_MSGS = _ida_domain.DOPT_INFO_MSGS

DOPT_INFO_BPT = _ida_domain.DOPT_INFO_BPT

DOPT_REAL_MEMORY = _ida_domain.DOPT_REAL_MEMORY

DOPT_REDO_STACK = _ida_domain.DOPT_REDO_STACK

DOPT_ENTRY_BPT = _ida_domain.DOPT_ENTRY_BPT

DOPT_EXCDLG = _ida_domain.DOPT_EXCDLG

EXCDLG_NEVER = _ida_domain.EXCDLG_NEVER

EXCDLG_UNKNOWN = _ida_domain.EXCDLG_UNKNOWN

EXCDLG_ALWAYS = _ida_domain.EXCDLG_ALWAYS

DOPT_LOAD_DINFO = _ida_domain.DOPT_LOAD_DINFO

DOPT_END_BPT = _ida_domain.DOPT_END_BPT

DOPT_TEMP_HWBPT = _ida_domain.DOPT_TEMP_HWBPT

DOPT_FAST_STEP = _ida_domain.DOPT_FAST_STEP

DOPT_DISABLE_ASLR = _ida_domain.DOPT_DISABLE_ASLR


def wait_for_next_event(wfne: "int", timeout: "int") -> "dbg_event_code_t":
    r"""wait_for_next_event(wfne, timeout) -> dbg_event_code_t"""
    return _ida_domain.wait_for_next_event(wfne, timeout)

def get_debug_event() -> "debug_event_t const *":
    r"""get_debug_event() -> debug_event_t const *"""
    return _ida_domain.get_debug_event()

def set_debugger_options(options: "uint") -> "uint":
    r"""set_debugger_options(options) -> uint"""
    return _ida_domain.set_debugger_options(options)

def set_remote_debugger(host: "char const *", _pass: "char const *", port: "int"=-1) -> "void":
    r"""set_remote_debugger(host, _pass, port=-1)"""
    return _ida_domain.set_remote_debugger(host, _pass, port)

def get_process_options2() -> "qstring *, qstring *, launch_env_t *, qstring *, qstring *, qstring *, int *":
    r"""get_process_options2()"""
    return _ida_domain.get_process_options2()

def retrieve_exceptions() -> "excvec_t *":
    r"""retrieve_exceptions() -> excvec_t *"""
    return _ida_domain.retrieve_exceptions()

def store_exceptions() -> "bool":
    r"""store_exceptions() -> bool"""
    return _ida_domain.store_exceptions()

def define_exception(code: "uint", name: "char const *", desc: "char const *", flags: "int") -> "char const *":
    r"""define_exception(code, name, desc, flags) -> char const *"""
    return _ida_domain.define_exception(code, name, desc, flags)
class eval_ctx_t(object):
    r"""Proxy of C++ eval_ctx_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _ea: "ea_t"):
        r"""__init__(self, _ea) -> eval_ctx_t"""
        _ida_domain.eval_ctx_t_swiginit(self, _ida_domain.new_eval_ctx_t(_ea))
    ea: "ea_t" = property(_ida_domain.eval_ctx_t_ea_get, _ida_domain.eval_ctx_t_ea_set, doc=r"""ea""")
    __swig_destroy__ = _ida_domain.delete_eval_ctx_t

# Register eval_ctx_t in _ida_domain:
_ida_domain.eval_ctx_t_swigregister(eval_ctx_t)
SRCIT_NONE = _ida_domain.SRCIT_NONE

SRCIT_MODULE = _ida_domain.SRCIT_MODULE

SRCIT_FUNC = _ida_domain.SRCIT_FUNC

SRCIT_STMT = _ida_domain.SRCIT_STMT

SRCIT_EXPR = _ida_domain.SRCIT_EXPR

SRCIT_STTVAR = _ida_domain.SRCIT_STTVAR

SRCIT_LOCVAR = _ida_domain.SRCIT_LOCVAR

SRCDBG_PROV_VERSION = _ida_domain.SRCDBG_PROV_VERSION


def create_source_viewer(out_ccv: "TWidget **", parent: "TWidget *", custview: "TWidget *", sf: "source_file_ptr", lines: "strvec_t *", lnnum: "int", colnum: "int", flags: "int") -> "source_view_t *":
    r"""create_source_viewer(out_ccv, parent, custview, sf, lines, lnnum, colnum, flags) -> source_view_t *"""
    return _ida_domain.create_source_viewer(out_ccv, parent, custview, sf, lines, lnnum, colnum, flags)

def get_dbg_byte(ea: "ea_t") -> "uint32 *":
    r"""get_dbg_byte(ea) -> bool"""
    return _ida_domain.get_dbg_byte(ea)

def put_dbg_byte(ea: "ea_t", x: "uint32") -> "bool":
    r"""put_dbg_byte(ea, x) -> bool"""
    return _ida_domain.put_dbg_byte(ea, x)

def invalidate_dbgmem_config() -> "void":
    r"""invalidate_dbgmem_config()"""
    return _ida_domain.invalidate_dbgmem_config()

def invalidate_dbgmem_contents(ea: "ea_t", size: "asize_t") -> "void":
    r"""invalidate_dbgmem_contents(ea, size)"""
    return _ida_domain.invalidate_dbgmem_contents(ea, size)

def is_debugger_on() -> "bool":
    r"""is_debugger_on() -> bool"""
    return _ida_domain.is_debugger_on()

def is_debugger_memory(ea: "ea_t") -> "bool":
    r"""is_debugger_memory(ea) -> bool"""
    return _ida_domain.is_debugger_memory(ea)

def get_tev_ea(n: "int") -> "ea_t":
    r"""get_tev_ea(n) -> ea_t"""
    return _ida_domain.get_tev_ea(n)

def get_tev_type(n: "int") -> "int":
    r"""get_tev_type(n) -> int"""
    return _ida_domain.get_tev_type(n)

def get_tev_tid(n: "int") -> "int":
    r"""get_tev_tid(n) -> int"""
    return _ida_domain.get_tev_tid(n)

def bring_debugger_to_front() -> "void":
    r"""bring_debugger_to_front()"""
    return _ida_domain.bring_debugger_to_front()

def set_manual_regions(ranges: "meminfo_vec_t const *") -> "void":
    r"""set_manual_regions(ranges)"""
    return _ida_domain.set_manual_regions(ranges)

def edit_manual_regions() -> "void":
    r"""edit_manual_regions()"""
    return _ida_domain.edit_manual_regions()

def enable_manual_regions(enable: "bool") -> "void":
    r"""enable_manual_regions(enable)"""
    return _ida_domain.enable_manual_regions(enable)

def handle_debug_event(ev: "debug_event_t const *", rqflags: "int") -> "int":
    r"""handle_debug_event(ev, rqflags) -> int"""
    return _ida_domain.handle_debug_event(ev, rqflags)

def add_virt_module(mod: "modinfo_t const *") -> "bool":
    r"""add_virt_module(mod) -> bool"""
    return _ida_domain.add_virt_module(mod)

def del_virt_module(base: "ea_t const") -> "bool":
    r"""del_virt_module(base) -> bool"""
    return _ida_domain.del_virt_module(base)

def internal_ioctl(fn: "int", buf: "void const *", poutbuf: "void **", poutsize: "ssize_t *") -> "int":
    r"""internal_ioctl(fn, buf, poutbuf, poutsize) -> int"""
    return _ida_domain.internal_ioctl(fn, buf, poutbuf, poutsize)

def get_dbg_memory_info(ranges: "meminfo_vec_t *") -> "int":
    r"""get_dbg_memory_info(ranges) -> int"""
    return _ida_domain.get_dbg_memory_info(ranges)

def set_bpt_group(bpt: "bpt_t", grp_name: "char const *") -> "bool":
    r"""set_bpt_group(bpt, grp_name) -> bool"""
    return _ida_domain.set_bpt_group(bpt, grp_name)

def set_bptloc_group(bptloc: "bpt_location_t", grp_name: "char const *") -> "bool":
    r"""set_bptloc_group(bptloc, grp_name) -> bool"""
    return _ida_domain.set_bptloc_group(bptloc, grp_name)

def get_bpt_group(bptloc: "bpt_location_t") -> "qstring *":
    r"""get_bpt_group(bptloc) -> bool"""
    return _ida_domain.get_bpt_group(bptloc)

def rename_bptgrp(old_name: "char const *", new_name: "char const *") -> "bool":
    r"""rename_bptgrp(old_name, new_name) -> bool"""
    return _ida_domain.rename_bptgrp(old_name, new_name)

def del_bptgrp(name: "char const *") -> "bool":
    r"""del_bptgrp(name) -> bool"""
    return _ida_domain.del_bptgrp(name)

def get_grp_bpts(bpts: "bpt_vec_t", grp_name: "char const *") -> "ssize_t":
    r"""get_grp_bpts(bpts, grp_name) -> ssize_t"""
    return _ida_domain.get_grp_bpts(bpts, grp_name)

def enable_bptgrp(bptgrp_name: "char const *", enable: "bool"=True) -> "int":
    r"""enable_bptgrp(bptgrp_name, enable=True) -> int"""
    return _ida_domain.enable_bptgrp(bptgrp_name, enable)

def get_local_vars(prov: "srcinfo_provider_t *", ea: "ea_t", out: "source_items_t *") -> "bool":
    r"""get_local_vars(prov, ea, out) -> bool"""
    return _ida_domain.get_local_vars(prov, ea, out)

def srcdbg_request_step_into() -> "bool":
    r"""srcdbg_request_step_into() -> bool"""
    return _ida_domain.srcdbg_request_step_into()

def srcdbg_request_step_over() -> "bool":
    r"""srcdbg_request_step_over() -> bool"""
    return _ida_domain.srcdbg_request_step_over()

def srcdbg_request_step_until_ret() -> "bool":
    r"""srcdbg_request_step_until_ret() -> bool"""
    return _ida_domain.srcdbg_request_step_until_ret()

def hide_all_bpts() -> "int":
    r"""hide_all_bpts() -> int"""
    return _ida_domain.hide_all_bpts()

def read_dbg_memory(ea: "ea_t", buffer: "void *", size: "size_t") -> "ssize_t":
    r"""read_dbg_memory(ea, buffer, size) -> ssize_t"""
    return _ida_domain.read_dbg_memory(ea, buffer, size)

def get_module_info(ea: "ea_t", modinfo: "modinfo_t *") -> "bool":
    r"""get_module_info(ea, modinfo) -> bool"""
    return _ida_domain.get_module_info(ea, modinfo)

def dbg_bin_search(start_ea: "ea_t", end_ea: "ea_t", data: "compiled_binpat_vec_t const &", srch_flags: "int") -> "uint64 *, qstring *":
    r"""dbg_bin_search(start_ea, end_ea, data, srch_flags) -> drc_t"""
    return _ida_domain.dbg_bin_search(start_ea, end_ea, data, srch_flags)

def load_debugger(dbgname: "char const *", use_remote: "bool") -> "bool":
    r"""load_debugger(dbgname, use_remote) -> bool"""
    return _ida_domain.load_debugger(dbgname, use_remote)

def collect_stack_trace(tid: "thid_t", trace: "call_stack_t *") -> "bool":
    r"""collect_stack_trace(tid, trace) -> bool"""
    return _ida_domain.collect_stack_trace(tid, trace)

def get_global_var(prov: "srcinfo_provider_t *", ea: "ea_t", name: "char const *", out: "source_item_ptr *") -> "bool":
    r"""get_global_var(prov, ea, name, out) -> bool"""
    return _ida_domain.get_global_var(prov, ea, name, out)

def get_local_var(prov: "srcinfo_provider_t *", ea: "ea_t", name: "char const *", out: "source_item_ptr *") -> "bool":
    r"""get_local_var(prov, ea, name, out) -> bool"""
    return _ida_domain.get_local_var(prov, ea, name, out)

def get_srcinfo_provider(name: "char const *") -> "srcinfo_provider_t *":
    r"""get_srcinfo_provider(name) -> srcinfo_provider_t *"""
    return _ida_domain.get_srcinfo_provider(name)

def get_current_source_file() -> "qstring *":
    r"""get_current_source_file() -> bool"""
    return _ida_domain.get_current_source_file()

def get_current_source_line() -> "int":
    r"""get_current_source_line() -> int"""
    return _ida_domain.get_current_source_line()

def add_path_mapping(src: "char const *", dst: "char const *") -> "void":
    r"""add_path_mapping(src, dst)"""
    return _ida_domain.add_path_mapping(src, dst)

def srcdbg_step_into() -> "bool":
    r"""srcdbg_step_into() -> bool"""
    return _ida_domain.srcdbg_step_into()

def srcdbg_step_over() -> "bool":
    r"""srcdbg_step_over() -> bool"""
    return _ida_domain.srcdbg_step_over()

def srcdbg_step_until_ret() -> "bool":
    r"""srcdbg_step_until_ret() -> bool"""
    return _ida_domain.srcdbg_step_until_ret()

def set_debugger_event_cond(evcond: "char const *") -> "void":
    r"""set_debugger_event_cond(evcond)"""
    return _ida_domain.set_debugger_event_cond(evcond)

def get_debugger_event_cond() -> "char const *":
    r"""get_debugger_event_cond() -> char const *"""
    return _ida_domain.get_debugger_event_cond()

def set_process_options(*args) -> "void":
    r"""
    set_process_options(path, args, envs, sdir, host, _pass, port)
    set_process_options(path, args, sdir, host, _pass, port)
    """
    return _ida_domain.set_process_options(*args)

def get_process_options() -> "qstring *, qstring *, qstring *, qstring *, qstring *, int *":
    r"""get_process_options()"""
    return _ida_domain.get_process_options()

def get_manual_regions(*args) -> "PyObject *":
    r"""
    get_manual_regions(ranges)
    get_manual_regions() -> PyObject *
    """
    return _ida_domain.get_manual_regions(*args)

def dbg_is_loaded() -> "bool":
    r"""dbg_is_loaded() -> bool"""
    return _ida_domain.dbg_is_loaded()

def refresh_debugger_memory() -> "PyObject *":
    r"""refresh_debugger_memory() -> PyObject *"""
    return _ida_domain.refresh_debugger_memory()
class DBG_Hooks(object):
    r"""Proxy of C++ DBG_Hooks class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(self, _flags=0, _hkcb_flags=HKCB_GLOBAL) -> DBG_Hooks"""
        if self.__class__ == DBG_Hooks:
            _self = None
        else:
            _self = self
        _ida_domain.DBG_Hooks_swiginit(self, _ida_domain.new_DBG_Hooks(_self, *args))

    def hook(self) -> "bool":
        r"""hook(self) -> bool"""
        return _ida_domain.DBG_Hooks_hook(self)

    def unhook(self) -> "bool":
        r"""unhook(self) -> bool"""
        return _ida_domain.DBG_Hooks_unhook(self)

    def dbg_process_start(self, pid: "pid_t", tid: "thid_t", ea: "ea_t", modinfo_name: "char const *", modinfo_base: "ea_t", modinfo_size: "asize_t") -> "void":
        r"""dbg_process_start(self, pid, tid, ea, modinfo_name, modinfo_base, modinfo_size)"""
        return _ida_domain.DBG_Hooks_dbg_process_start(self, pid, tid, ea, modinfo_name, modinfo_base, modinfo_size)

    def dbg_process_exit(self, pid: "pid_t", tid: "thid_t", ea: "ea_t", exit_code: "int") -> "void":
        r"""dbg_process_exit(self, pid, tid, ea, exit_code)"""
        return _ida_domain.DBG_Hooks_dbg_process_exit(self, pid, tid, ea, exit_code)

    def dbg_process_attach(self, pid: "pid_t", tid: "thid_t", ea: "ea_t", modinfo_name: "char const *", modinfo_base: "ea_t", modinfo_size: "asize_t") -> "void":
        r"""dbg_process_attach(self, pid, tid, ea, modinfo_name, modinfo_base, modinfo_size)"""
        return _ida_domain.DBG_Hooks_dbg_process_attach(self, pid, tid, ea, modinfo_name, modinfo_base, modinfo_size)

    def dbg_process_detach(self, pid: "pid_t", tid: "thid_t", ea: "ea_t") -> "void":
        r"""dbg_process_detach(self, pid, tid, ea)"""
        return _ida_domain.DBG_Hooks_dbg_process_detach(self, pid, tid, ea)

    def dbg_thread_start(self, pid: "pid_t", tid: "thid_t", ea: "ea_t") -> "void":
        r"""dbg_thread_start(self, pid, tid, ea)"""
        return _ida_domain.DBG_Hooks_dbg_thread_start(self, pid, tid, ea)

    def dbg_thread_exit(self, pid: "pid_t", tid: "thid_t", ea: "ea_t", exit_code: "int") -> "void":
        r"""dbg_thread_exit(self, pid, tid, ea, exit_code)"""
        return _ida_domain.DBG_Hooks_dbg_thread_exit(self, pid, tid, ea, exit_code)

    def dbg_library_load(self, pid: "pid_t", tid: "thid_t", ea: "ea_t", modinfo_name: "char const *", modinfo_base: "ea_t", modinfo_size: "asize_t") -> "void":
        r"""dbg_library_load(self, pid, tid, ea, modinfo_name, modinfo_base, modinfo_size)"""
        return _ida_domain.DBG_Hooks_dbg_library_load(self, pid, tid, ea, modinfo_name, modinfo_base, modinfo_size)

    def dbg_library_unload(self, pid: "pid_t", tid: "thid_t", ea: "ea_t", info: "char const *") -> "void":
        r"""dbg_library_unload(self, pid, tid, ea, info)"""
        return _ida_domain.DBG_Hooks_dbg_library_unload(self, pid, tid, ea, info)

    def dbg_information(self, pid: "pid_t", tid: "thid_t", ea: "ea_t", info: "char const *") -> "void":
        r"""dbg_information(self, pid, tid, ea, info)"""
        return _ida_domain.DBG_Hooks_dbg_information(self, pid, tid, ea, info)

    def dbg_exception(self, pid: "pid_t", tid: "thid_t", ea: "ea_t", exc_code: "int", exc_can_cont: "bool", exc_ea: "ea_t", exc_info: "char const *") -> "int":
        r"""dbg_exception(self, pid, tid, ea, exc_code, exc_can_cont, exc_ea, exc_info) -> int"""
        return _ida_domain.DBG_Hooks_dbg_exception(self, pid, tid, ea, exc_code, exc_can_cont, exc_ea, exc_info)

    def dbg_suspend_process(self) -> "void":
        r"""dbg_suspend_process(self)"""
        return _ida_domain.DBG_Hooks_dbg_suspend_process(self)

    def dbg_bpt(self, tid: "thid_t", bptea: "ea_t") -> "int":
        r"""dbg_bpt(self, tid, bptea) -> int"""
        return _ida_domain.DBG_Hooks_dbg_bpt(self, tid, bptea)

    def dbg_trace(self, tid: "thid_t", ip: "ea_t") -> "int":
        r"""dbg_trace(self, tid, ip) -> int"""
        return _ida_domain.DBG_Hooks_dbg_trace(self, tid, ip)

    def dbg_request_error(self, failed_command: "int", failed_dbg_notification: "int") -> "void":
        r"""dbg_request_error(self, failed_command, failed_dbg_notification)"""
        return _ida_domain.DBG_Hooks_dbg_request_error(self, failed_command, failed_dbg_notification)

    def dbg_step_into(self) -> "void":
        r"""dbg_step_into(self)"""
        return _ida_domain.DBG_Hooks_dbg_step_into(self)

    def dbg_step_over(self) -> "void":
        r"""dbg_step_over(self)"""
        return _ida_domain.DBG_Hooks_dbg_step_over(self)

    def dbg_run_to(self, pid: "pid_t", tid: "thid_t", ea: "ea_t") -> "void":
        r"""dbg_run_to(self, pid, tid, ea)"""
        return _ida_domain.DBG_Hooks_dbg_run_to(self, pid, tid, ea)

    def dbg_step_until_ret(self) -> "void":
        r"""dbg_step_until_ret(self)"""
        return _ida_domain.DBG_Hooks_dbg_step_until_ret(self)

    def dbg_bpt_changed(self, bptev_code: "int", bpt: "bpt_t") -> "void":
        r"""dbg_bpt_changed(self, bptev_code, bpt)"""
        return _ida_domain.DBG_Hooks_dbg_bpt_changed(self, bptev_code, bpt)

    def dbg_started_loading_bpts(self) -> "void":
        r"""dbg_started_loading_bpts(self)"""
        return _ida_domain.DBG_Hooks_dbg_started_loading_bpts(self)

    def dbg_finished_loading_bpts(self) -> "void":
        r"""dbg_finished_loading_bpts(self)"""
        return _ida_domain.DBG_Hooks_dbg_finished_loading_bpts(self)
    __swig_destroy__ = _ida_domain.delete_DBG_Hooks
    def __disown__(self):
        self.this.disown()
        _ida_domain.disown_DBG_Hooks(self)
        return weakref.proxy(self)

# Register DBG_Hooks in _ida_domain:
_ida_domain.DBG_Hooks_swigregister(DBG_Hooks)

def list_bptgrps() -> "PyObject *":
    r"""list_bptgrps() -> PyObject *"""
    return _ida_domain.list_bptgrps()

def internal_get_sreg_base(tid: "thid_t", sreg_value: "int") -> "ea_t":
    r"""internal_get_sreg_base(tid, sreg_value) -> ea_t"""
    return _ida_domain.internal_get_sreg_base(tid, sreg_value)

def write_dbg_memory(*args) -> "ssize_t":
    r"""write_dbg_memory(ea, py_buf, size=size_t(-1)) -> ssize_t"""
    return _ida_domain.write_dbg_memory(*args)

def dbg_can_query() -> "bool":
    r"""dbg_can_query() -> bool"""
    return _ida_domain.dbg_can_query()

def set_reg_val(*args) -> "PyObject *":
    r"""
    set_reg_val(regname, value) -> PyObject
    set_reg_val(tid, regidx, value) -> PyObject *
    """
    return _ida_domain.set_reg_val(*args)

def request_set_reg_val(regname: "char const *", o: "PyObject *") -> "PyObject *":
    r"""request_set_reg_val(regname, o) -> PyObject *"""
    return _ida_domain.request_set_reg_val(regname, o)

def get_reg_val(*args) -> "PyObject *":
    r"""
    get_reg_val(regname, regval) -> bool
    get_reg_val(regname, ival) -> bool
    get_reg_val(regname) -> PyObject *
    """
    return _ida_domain.get_reg_val(*args)

def get_reg_vals(tid: "thid_t", clsmask: "int") -> "regvals_t *":
    r"""get_reg_vals(tid, clsmask) -> regvals_t *"""
    return _ida_domain.get_reg_vals(tid, clsmask)

#<pycode(py_dbg)>
import ida_idaapi
import ida_idd
import ida_expr

def get_tev_reg_val(tev, reg):
    rv = ida_idd.regval_t()
    if get_insn_tev_reg_val(tev, reg, rv):
        if rv.rvtype == ida_idd.RVT_INT:
            return rv.ival

def get_tev_reg_mem_qty(tev):
    ti = tev_info_t()
    if get_tev_info(tev, ti):
        mis = memreg_infos_t()
        if get_insn_tev_reg_mem(tev, mis):
            return mis.size()

def get_tev_reg_mem(tev, idx):
    mis = memreg_infos_t()
    if get_insn_tev_reg_mem(tev, mis):
        if idx < mis.size():
            return mis[idx].bytes

def get_tev_reg_mem_ea(tev, idx):
    ti = tev_info_t()
    if get_tev_info(tev, ti):
        mis = memreg_infos_t()
        if get_insn_tev_reg_mem(tev, mis):
            if idx >= 0 and idx < mis.size():
                return mis[idx].ea

def send_dbg_command(command):
    """
    Send a direct command to the debugger backend, and
    retrieve the result as a string.

    Note: any double-quotes in 'command' must be backslash-escaped.
    Note: this only works with some debugger backends: Bochs, WinDbg, GDB.

    Returns: (True, <result string>) on success, or (False, <Error message string>) on failure
    """
    rv = ida_expr.idc_value_t()
    err = ida_expr.eval_idc_expr(rv, ida_idaapi.BADADDR, """send_dbg_command("%s");""" % command)
    if err:
        return False, "eval_idc_expr() failed: %s" % err
    vtype = ord(rv.vtype)
    if vtype == ida_expr.VT_STR:
        s = rv.c_str()
        if "IDC_FAILURE" in s:
            return False, "eval_idc_expr() reported an error: %s" % s
        return True, s
    elif vtype == ida_expr.VT_LONG:
        return True, str(rv.num)
    else:
        return False, "eval_idc_expr(): wrong return type: %d" % vtype

move_bpt_to_grp = set_bpt_group

#</pycode(py_dbg)>

class operands_array(object):
    r"""Proxy of C++ wrapped_array_t< op_t,UA_MAXOP > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data: "op_t (&)[UA_MAXOP]" = property(_ida_domain.operands_array_data_get, doc=r"""data""")

    def __init__(self, data: "op_t (&)[UA_MAXOP]"):
        r"""__init__(self, data) -> operands_array"""
        _ida_domain.operands_array_swiginit(self, _ida_domain.new_operands_array(data))

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.operands_array___len__(self)

    def __getitem__(self, i: "size_t") -> "op_t const &":
        r"""__getitem__(self, i) -> op_t"""
        return _ida_domain.operands_array___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "op_t") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.operands_array___setitem__(self, i, v)

    def _get_bytes(self) -> "bytevec_t":
        r"""_get_bytes(self) -> bytevec_t"""
        return _ida_domain.operands_array__get_bytes(self)

    def _set_bytes(self, bts: "bytevec_t const &") -> "void":
        r"""_set_bytes(self, bts)"""
        return _ida_domain.operands_array__set_bytes(self, bts)

    __iter__ = ida_idaapi._bounded_getitem_iterator
    bytes = property(_get_bytes, _set_bytes)

    __swig_destroy__ = _ida_domain.delete_operands_array

# Register operands_array in _ida_domain:
_ida_domain.operands_array_swigregister(operands_array)
class op_t(object):
    r"""Proxy of C++ op_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n: "uchar" = property(_ida_domain.op_t_n_get, _ida_domain.op_t_n_set, doc=r"""n""")
    type: "optype_t" = property(_ida_domain.op_t_type_get, _ida_domain.op_t_type_set, doc=r"""type""")
    offb: "char" = property(_ida_domain.op_t_offb_get, _ida_domain.op_t_offb_set, doc=r"""offb""")
    offo: "char" = property(_ida_domain.op_t_offo_get, _ida_domain.op_t_offo_set, doc=r"""offo""")
    flags: "uchar" = property(_ida_domain.op_t_flags_get, _ida_domain.op_t_flags_set, doc=r"""flags""")

    def set_shown(self) -> "void":
        r"""set_shown(self)"""
        return _ida_domain.op_t_set_shown(self)

    def clr_shown(self) -> "void":
        r"""clr_shown(self)"""
        return _ida_domain.op_t_clr_shown(self)

    def shown(self) -> "bool":
        r"""shown(self) -> bool"""
        return _ida_domain.op_t_shown(self)
    dtype: "op_dtype_t" = property(_ida_domain.op_t_dtype_get, _ida_domain.op_t_dtype_set, doc=r"""dtype""")
    reg: "uint16" = property(_ida_domain.op_t_reg_get, _ida_domain.op_t_reg_set, doc=r"""reg""")
    phrase: "uint16" = property(_ida_domain.op_t_phrase_get, _ida_domain.op_t_phrase_set, doc=r"""phrase""")

    def is_reg(self, r: "int") -> "bool":
        r"""is_reg(self, r) -> bool"""
        return _ida_domain.op_t_is_reg(self, r)
    value: "uval_t" = property(_ida_domain.op_t_value_get, _ida_domain.op_t_value_set, doc=r"""value""")

    def is_imm(self, v: "uval_t") -> "bool":
        r"""is_imm(self, v) -> bool"""
        return _ida_domain.op_t_is_imm(self, v)
    addr: "ea_t" = property(_ida_domain.op_t_addr_get, _ida_domain.op_t_addr_set, doc=r"""addr""")
    specval: "ea_t" = property(_ida_domain.op_t_specval_get, _ida_domain.op_t_specval_set, doc=r"""specval""")
    specflag1: "char" = property(_ida_domain.op_t_specflag1_get, _ida_domain.op_t_specflag1_set, doc=r"""specflag1""")
    specflag2: "char" = property(_ida_domain.op_t_specflag2_get, _ida_domain.op_t_specflag2_set, doc=r"""specflag2""")
    specflag3: "char" = property(_ida_domain.op_t_specflag3_get, _ida_domain.op_t_specflag3_set, doc=r"""specflag3""")
    specflag4: "char" = property(_ida_domain.op_t_specflag4_get, _ida_domain.op_t_specflag4_set, doc=r"""specflag4""")

    def __init__(self):
        r"""__init__(self) -> op_t"""
        _ida_domain.op_t_swiginit(self, _ida_domain.new_op_t())

    def __get_reg_phrase__(self) -> "uint16":
        r"""__get_reg_phrase__(self) -> uint16"""
        return _ida_domain.op_t___get_reg_phrase__(self)

    def __set_reg_phrase__(self, r: "uint16") -> "void":
        r"""__set_reg_phrase__(self, r)"""
        return _ida_domain.op_t___set_reg_phrase__(self, r)

    def __get_value__(self) -> "ea_t":
        r"""__get_value__(self) -> ea_t"""
        return _ida_domain.op_t___get_value__(self)

    def __set_value__(self, v: "ea_t") -> "void":
        r"""__set_value__(self, v)"""
        return _ida_domain.op_t___set_value__(self, v)

    def __get_value64__(self) -> "uint64":
        r"""__get_value64__(self) -> uint64"""
        return _ida_domain.op_t___get_value64__(self)

    def __set_value64__(self, v: "uint64") -> "void":
        r"""__set_value64__(self, v)"""
        return _ida_domain.op_t___set_value64__(self, v)

    def __get_addr__(self) -> "ea_t":
        r"""__get_addr__(self) -> ea_t"""
        return _ida_domain.op_t___get_addr__(self)

    def __set_addr__(self, v: "ea_t") -> "void":
        r"""__set_addr__(self, v)"""
        return _ida_domain.op_t___set_addr__(self, v)

    def __get_specval__(self) -> "ea_t":
        r"""__get_specval__(self) -> ea_t"""
        return _ida_domain.op_t___get_specval__(self)

    def __set_specval__(self, v: "ea_t") -> "void":
        r"""__set_specval__(self, v)"""
        return _ida_domain.op_t___set_specval__(self, v)

    def assign(self, other: "op_t") -> "void":
        r"""assign(self, other)"""
        return _ida_domain.op_t_assign(self, other)

    def has_reg(self, r):
        """Checks if the operand accesses the given processor register"""
        return self.reg == r.reg

    reg = property(__get_reg_phrase__, __set_reg_phrase__)
    phrase = property(__get_reg_phrase__, __set_reg_phrase__)
    value = property(__get_value__, __set_value__)
    value64 = property(__get_value64__, __set_value64__)
    addr = property(__get_addr__, __set_addr__)
    specval = property(__get_specval__, __set_specval__)

    __swig_destroy__ = _ida_domain.delete_op_t

# Register op_t in _ida_domain:
_ida_domain.op_t_swigregister(op_t)
o_void = cvar.o_void
o_reg = cvar.o_reg
o_mem = cvar.o_mem
o_phrase = cvar.o_phrase
o_displ = cvar.o_displ
o_imm = cvar.o_imm
o_far = cvar.o_far
o_near = cvar.o_near
o_idpspec0 = cvar.o_idpspec0
o_idpspec1 = cvar.o_idpspec1
o_idpspec2 = cvar.o_idpspec2
o_idpspec3 = cvar.o_idpspec3
o_idpspec4 = cvar.o_idpspec4
o_idpspec5 = cvar.o_idpspec5
OF_NO_BASE_DISP = _ida_domain.OF_NO_BASE_DISP

OF_OUTER_DISP = _ida_domain.OF_OUTER_DISP

PACK_FORM_DEF = _ida_domain.PACK_FORM_DEF

OF_NUMBER = _ida_domain.OF_NUMBER

OF_SHOW = _ida_domain.OF_SHOW

dt_byte = _ida_domain.dt_byte

dt_word = _ida_domain.dt_word

dt_dword = _ida_domain.dt_dword

dt_float = _ida_domain.dt_float

dt_double = _ida_domain.dt_double

dt_tbyte = _ida_domain.dt_tbyte

dt_packreal = _ida_domain.dt_packreal

dt_qword = _ida_domain.dt_qword

dt_byte16 = _ida_domain.dt_byte16

dt_code = _ida_domain.dt_code

dt_void = _ida_domain.dt_void

dt_fword = _ida_domain.dt_fword

dt_bitfild = _ida_domain.dt_bitfild

dt_string = _ida_domain.dt_string

dt_unicode = _ida_domain.dt_unicode

dt_ldbl = _ida_domain.dt_ldbl

dt_byte32 = _ida_domain.dt_byte32

dt_byte64 = _ida_domain.dt_byte64

dt_half = _ida_domain.dt_half



def insn_add_cref(insn: "insn_t", to: "ea_t", opoff: "int", type: "cref_t") -> "void":
    r"""insn_add_cref(insn, to, opoff, type)"""
    return _ida_domain.insn_add_cref(insn, to, opoff, type)

def insn_add_dref(insn: "insn_t", to: "ea_t", opoff: "int", type: "dref_t") -> "void":
    r"""insn_add_dref(insn, to, opoff, type)"""
    return _ida_domain.insn_add_dref(insn, to, opoff, type)

def insn_add_off_drefs(insn: "insn_t", x: "op_t", type: "dref_t", outf: "int") -> "ea_t":
    r"""insn_add_off_drefs(insn, x, type, outf) -> ea_t"""
    return _ida_domain.insn_add_off_drefs(insn, x, type, outf)

def insn_create_stkvar(insn: "insn_t", x: "op_t", v: "adiff_t", flags: "int") -> "bool":
    r"""insn_create_stkvar(insn, x, v, flags) -> bool"""
    return _ida_domain.insn_create_stkvar(insn, x, v, flags)
class insn_t(object):
    r"""Proxy of C++ insn_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> insn_t"""
        _ida_domain.insn_t_swiginit(self, _ida_domain.new_insn_t())
    cs: "ea_t" = property(_ida_domain.insn_t_cs_get, _ida_domain.insn_t_cs_set, doc=r"""cs""")
    ip: "ea_t" = property(_ida_domain.insn_t_ip_get, _ida_domain.insn_t_ip_set, doc=r"""ip""")
    ea: "ea_t" = property(_ida_domain.insn_t_ea_get, _ida_domain.insn_t_ea_set, doc=r"""ea""")
    itype: "uint16" = property(_ida_domain.insn_t_itype_get, _ida_domain.insn_t_itype_set, doc=r"""itype""")
    size: "uint16" = property(_ida_domain.insn_t_size_get, _ida_domain.insn_t_size_set, doc=r"""size""")
    auxpref: "uint32" = property(_ida_domain.insn_t_auxpref_get, _ida_domain.insn_t_auxpref_set, doc=r"""auxpref""")
    auxpref_u16: "uint16 [2]" = property(_ida_domain.insn_t_auxpref_u16_get, _ida_domain.insn_t_auxpref_u16_set, doc=r"""auxpref_u16""")
    auxpref_u8: "uint8 [4]" = property(_ida_domain.insn_t_auxpref_u8_get, _ida_domain.insn_t_auxpref_u8_set, doc=r"""auxpref_u8""")
    segpref: "char" = property(_ida_domain.insn_t_segpref_get, _ida_domain.insn_t_segpref_set, doc=r"""segpref""")
    insnpref: "char" = property(_ida_domain.insn_t_insnpref_get, _ida_domain.insn_t_insnpref_set, doc=r"""insnpref""")
    flags: "int16" = property(_ida_domain.insn_t_flags_get, _ida_domain.insn_t_flags_set, doc=r"""flags""")
    ops: "op_t [UA_MAXOP]" = property(_ida_domain.insn_t_ops_get, _ida_domain.insn_t_ops_set, doc=r"""ops""")

    def is_macro(self) -> "bool":
        r"""is_macro(self) -> bool"""
        return _ida_domain.insn_t_is_macro(self)

    def is_64bit(self) -> "bool":
        r"""is_64bit(self) -> bool"""
        return _ida_domain.insn_t_is_64bit(self)

    def get_next_byte(self) -> "uint8":
        r"""get_next_byte(self) -> uint8"""
        return _ida_domain.insn_t_get_next_byte(self)

    def get_next_word(self) -> "uint16":
        r"""get_next_word(self) -> uint16"""
        return _ida_domain.insn_t_get_next_word(self)

    def get_next_dword(self) -> "uint32":
        r"""get_next_dword(self) -> uint32"""
        return _ida_domain.insn_t_get_next_dword(self)

    def get_next_qword(self) -> "uint64":
        r"""get_next_qword(self) -> uint64"""
        return _ida_domain.insn_t_get_next_qword(self)

    def create_op_data(self, *args) -> "bool":
        r"""
        create_op_data(self, ea_, opoff, dtype) -> bool
        create_op_data(self, ea_, op) -> bool
        """
        return _ida_domain.insn_t_create_op_data(self, *args)

    def create_stkvar(self, x: "op_t", v: "adiff_t", flags_: "int") -> "bool":
        r"""create_stkvar(self, x, v, flags_) -> bool"""
        return _ida_domain.insn_t_create_stkvar(self, x, v, flags_)

    def add_cref(self, to: "ea_t", opoff: "int", type: "cref_t") -> "void":
        r"""add_cref(self, to, opoff, type)"""
        return _ida_domain.insn_t_add_cref(self, to, opoff, type)

    def add_dref(self, to: "ea_t", opoff: "int", type: "dref_t") -> "void":
        r"""add_dref(self, to, opoff, type)"""
        return _ida_domain.insn_t_add_dref(self, to, opoff, type)

    def add_off_drefs(self, x: "op_t", type: "dref_t", outf: "int") -> "ea_t":
        r"""add_off_drefs(self, x, type, outf) -> ea_t"""
        return _ida_domain.insn_t_add_off_drefs(self, x, type, outf)

    def __get_ops__(self) -> "wrapped_array_t< op_t,UA_MAXOP >":
        r"""__get_ops__(self) -> operands_array"""
        return _ida_domain.insn_t___get_ops__(self)

    def __get_operand__(self, n: "int") -> "op_t *":
        r"""__get_operand__(self, n) -> op_t"""
        return _ida_domain.insn_t___get_operand__(self, n)

    def __get_auxpref__(self) -> "uint32":
        r"""__get_auxpref__(self) -> uint32"""
        return _ida_domain.insn_t___get_auxpref__(self)

    def __set_auxpref__(self, v: "uint32") -> "void":
        r"""__set_auxpref__(self, v)"""
        return _ida_domain.insn_t___set_auxpref__(self, v)

    def assign(self, other: "insn_t") -> "void":
        r"""assign(self, other)"""
        return _ida_domain.insn_t_assign(self, other)

    def is_canon_insn(self, *args) -> "bool":
        r"""
        is_canon_insn(self, ph) -> bool
        is_canon_insn(self) -> bool
        """
        return _ida_domain.insn_t_is_canon_insn(self, *args)

    def get_canon_feature(self, *args) -> "uint32":
        r"""
        get_canon_feature(self, ph) -> uint32
        get_canon_feature(self) -> uint32
        """
        return _ida_domain.insn_t_get_canon_feature(self, *args)

    def get_canon_mnem(self, *args) -> "char const *":
        r"""
        get_canon_mnem(self, ph) -> char const
        get_canon_mnem(self) -> char const *
        """
        return _ida_domain.insn_t_get_canon_mnem(self, *args)

    ops = property(__get_ops__)
    Op1 = property(lambda self: self.__get_operand__(0))
    Op2 = property(lambda self: self.__get_operand__(1))
    Op3 = property(lambda self: self.__get_operand__(2))
    Op4 = property(lambda self: self.__get_operand__(3))
    Op5 = property(lambda self: self.__get_operand__(4))
    Op6 = property(lambda self: self.__get_operand__(5))
    Op7 = property(lambda self: self.__get_operand__(6))
    Op8 = property(lambda self: self.__get_operand__(7))

    auxpref = property(__get_auxpref__, __set_auxpref__)

    def __iter__(self):
        return (self.ops[idx] for idx in range(0, UA_MAXOP))

    def __getitem__(self, idx):
        """
        Operands can be accessed directly as indexes
        @return op_t: Returns an operand of type op_t
        """
        if idx >= UA_MAXOP:
            raise KeyError
        else:
            return self.ops[idx]

    __swig_destroy__ = _ida_domain.delete_insn_t

# Register insn_t in _ida_domain:
_ida_domain.insn_t_swigregister(insn_t)
INSN_MACRO = _ida_domain.INSN_MACRO

INSN_MODMAC = _ida_domain.INSN_MODMAC

INSN_64BIT = _ida_domain.INSN_64BIT



def get_lookback() -> "int":
    r"""get_lookback() -> int"""
    return _ida_domain.get_lookback()

def calc_dataseg(insn: "insn_t", n: "int"=-1, rgnum: "int"=-1) -> "ea_t":
    r"""calc_dataseg(insn, n=-1, rgnum=-1) -> ea_t"""
    return _ida_domain.calc_dataseg(insn, n, rgnum)

def map_data_ea(*args) -> "ea_t":
    r"""
    map_data_ea(insn, addr, opnum=-1) -> ea_t
    map_data_ea(insn, op) -> ea_t
    """
    return _ida_domain.map_data_ea(*args)

def map_code_ea(*args) -> "ea_t":
    r"""
    map_code_ea(insn, addr, opnum) -> ea_t
    map_code_ea(insn, op) -> ea_t
    """
    return _ida_domain.map_code_ea(*args)

def map_ea(*args) -> "ea_t":
    r"""
    map_ea(insn, op, iscode) -> ea_t
    map_ea(insn, addr, opnum, iscode) -> ea_t
    """
    return _ida_domain.map_ea(*args)
class outctx_base_t(object):
    r"""Proxy of C++ outctx_base_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    insn_ea: "ea_t" = property(_ida_domain.outctx_base_t_insn_ea_get, _ida_domain.outctx_base_t_insn_ea_set, doc=r"""insn_ea""")
    outbuf: "qstring" = property(_ida_domain.outctx_base_t_outbuf_get, _ida_domain.outctx_base_t_outbuf_set, doc=r"""outbuf""")
    F32: "flags_t" = property(_ida_domain.outctx_base_t_F32_get, _ida_domain.outctx_base_t_F32_set, doc=r"""F32""")
    default_lnnum: "int" = property(_ida_domain.outctx_base_t_default_lnnum_get, _ida_domain.outctx_base_t_default_lnnum_set, doc=r"""default_lnnum""")

    def only_main_line(self) -> "bool":
        r"""only_main_line(self) -> bool"""
        return _ida_domain.outctx_base_t_only_main_line(self)

    def multiline(self) -> "bool":
        r"""multiline(self) -> bool"""
        return _ida_domain.outctx_base_t_multiline(self)

    def force_code(self) -> "bool":
        r"""force_code(self) -> bool"""
        return _ida_domain.outctx_base_t_force_code(self)

    def stack_view(self) -> "bool":
        r"""stack_view(self) -> bool"""
        return _ida_domain.outctx_base_t_stack_view(self)

    def display_voids(self) -> "bool":
        r"""display_voids(self) -> bool"""
        return _ida_domain.outctx_base_t_display_voids(self)

    def set_gen_xrefs(self, on: "bool"=True) -> "void":
        r"""set_gen_xrefs(self, on=True)"""
        return _ida_domain.outctx_base_t_set_gen_xrefs(self, on)

    def set_gen_cmt(self, on: "bool"=True) -> "void":
        r"""set_gen_cmt(self, on=True)"""
        return _ida_domain.outctx_base_t_set_gen_cmt(self, on)

    def clr_gen_label(self) -> "void":
        r"""clr_gen_label(self)"""
        return _ida_domain.outctx_base_t_clr_gen_label(self)

    def set_gen_label(self) -> "void":
        r"""set_gen_label(self)"""
        return _ida_domain.outctx_base_t_set_gen_label(self)

    def set_gen_demangled_label(self) -> "void":
        r"""set_gen_demangled_label(self)"""
        return _ida_domain.outctx_base_t_set_gen_demangled_label(self)

    def set_comment_addr(self, ea: "ea_t") -> "void":
        r"""set_comment_addr(self, ea)"""
        return _ida_domain.outctx_base_t_set_comment_addr(self, ea)

    def set_dlbind_opnd(self) -> "void":
        r"""set_dlbind_opnd(self)"""
        return _ida_domain.outctx_base_t_set_dlbind_opnd(self)

    def print_label_now(self) -> "bool":
        r"""print_label_now(self) -> bool"""
        return _ida_domain.outctx_base_t_print_label_now(self)

    def forbid_annotations(self) -> "int":
        r"""forbid_annotations(self) -> int"""
        return _ida_domain.outctx_base_t_forbid_annotations(self)

    def restore_ctxflags(self, saved_flags: "int") -> "void":
        r"""restore_ctxflags(self, saved_flags)"""
        return _ida_domain.outctx_base_t_restore_ctxflags(self, saved_flags)

    def out_printf(self, format: "char const *") -> "size_t":
        r"""out_printf(self, format) -> size_t"""
        return _ida_domain.outctx_base_t_out_printf(self, format)

    def out_value(self, x: "op_t", outf: "int"=0) -> "flags64_t":
        r"""out_value(self, x, outf=0) -> flags64_t"""
        return _ida_domain.outctx_base_t_out_value(self, x, outf)

    def out_symbol(self, c: "char") -> "void":
        r"""out_symbol(self, c)"""
        return _ida_domain.outctx_base_t_out_symbol(self, c)

    def out_chars(self, c: "char", n: "int") -> "void":
        r"""out_chars(self, c, n)"""
        return _ida_domain.outctx_base_t_out_chars(self, c, n)

    def out_spaces(self, len: "ssize_t") -> "void":
        r"""out_spaces(self, len)"""
        return _ida_domain.outctx_base_t_out_spaces(self, len)

    def out_line(self, str: "char const *", color: "color_t"=0) -> "void":
        r"""out_line(self, str, color=0)"""
        return _ida_domain.outctx_base_t_out_line(self, str, color)

    def out_keyword(self, str: "char const *") -> "void":
        r"""out_keyword(self, str)"""
        return _ida_domain.outctx_base_t_out_keyword(self, str)

    def out_register(self, str: "char const *") -> "void":
        r"""out_register(self, str)"""
        return _ida_domain.outctx_base_t_out_register(self, str)

    def out_lvar(self, name: "char const *", width: "int"=-1) -> "void":
        r"""out_lvar(self, name, width=-1)"""
        return _ida_domain.outctx_base_t_out_lvar(self, name, width)

    def out_tagon(self, tag: "color_t") -> "void":
        r"""out_tagon(self, tag)"""
        return _ida_domain.outctx_base_t_out_tagon(self, tag)

    def out_tagoff(self, tag: "color_t") -> "void":
        r"""out_tagoff(self, tag)"""
        return _ida_domain.outctx_base_t_out_tagoff(self, tag)

    def out_addr_tag(self, ea: "ea_t") -> "void":
        r"""out_addr_tag(self, ea)"""
        return _ida_domain.outctx_base_t_out_addr_tag(self, ea)

    def out_colored_register_line(self, str: "char const *") -> "void":
        r"""out_colored_register_line(self, str)"""
        return _ida_domain.outctx_base_t_out_colored_register_line(self, str)

    def out_char(self, c: "char") -> "void":
        r"""out_char(self, c)"""
        return _ida_domain.outctx_base_t_out_char(self, c)

    def out_btoa(self, Word: "uval_t", radix: "char"=0) -> "void":
        r"""out_btoa(self, Word, radix=0)"""
        return _ida_domain.outctx_base_t_out_btoa(self, Word, radix)

    def out_long(self, v: "sval_t", radix: "char") -> "void":
        r"""out_long(self, v, radix)"""
        return _ida_domain.outctx_base_t_out_long(self, v, radix)

    def out_name_expr(self, *args) -> "bool":
        r"""out_name_expr(self, x, ea, off=BADADDR) -> bool"""
        return _ida_domain.outctx_base_t_out_name_expr(self, *args)

    def close_comment(self) -> "void":
        r"""close_comment(self)"""
        return _ida_domain.outctx_base_t_close_comment(self)

    def flush_outbuf(self, indent: "int"=-1) -> "bool":
        r"""flush_outbuf(self, indent=-1) -> bool"""
        return _ida_domain.outctx_base_t_flush_outbuf(self, indent)

    def flush_buf(self, buf: "char const *", indent: "int"=-1) -> "bool":
        r"""flush_buf(self, buf, indent=-1) -> bool"""
        return _ida_domain.outctx_base_t_flush_buf(self, buf, indent)

    def term_outctx(self, prefix: "char const *"=None) -> "int":
        r"""term_outctx(self, prefix=None) -> int"""
        return _ida_domain.outctx_base_t_term_outctx(self, prefix)

    def gen_printf(self, indent: "int", format: "char const *") -> "bool":
        r"""gen_printf(self, indent, format) -> bool"""
        return _ida_domain.outctx_base_t_gen_printf(self, indent, format)

    def gen_empty_line(self) -> "bool":
        r"""gen_empty_line(self) -> bool"""
        return _ida_domain.outctx_base_t_gen_empty_line(self)

    def gen_border_line(self, solid: "bool"=False) -> "bool":
        r"""gen_border_line(self, solid=False) -> bool"""
        return _ida_domain.outctx_base_t_gen_border_line(self, solid)

    def gen_cmt_line(self, format: "char const *") -> "bool":
        r"""gen_cmt_line(self, format) -> bool"""
        return _ida_domain.outctx_base_t_gen_cmt_line(self, format)

    def gen_collapsed_line(self, format: "char const *") -> "bool":
        r"""gen_collapsed_line(self, format) -> bool"""
        return _ida_domain.outctx_base_t_gen_collapsed_line(self, format)

    def gen_block_cmt(self, cmt: "char const *", color: "color_t") -> "bool":
        r"""gen_block_cmt(self, cmt, color) -> bool"""
        return _ida_domain.outctx_base_t_gen_block_cmt(self, cmt, color)

    def setup_outctx(self, prefix: "char const *", makeline_flags: "int") -> "void":
        r"""setup_outctx(self, prefix, makeline_flags)"""
        return _ida_domain.outctx_base_t_setup_outctx(self, prefix, makeline_flags)

    def retrieve_cmt(self) -> "ssize_t":
        r"""retrieve_cmt(self) -> ssize_t"""
        return _ida_domain.outctx_base_t_retrieve_cmt(self)

    def retrieve_name(self, arg2: "qstring *", arg3: "color_t *") -> "ssize_t":
        r"""retrieve_name(self, arg2, arg3) -> ssize_t"""
        return _ida_domain.outctx_base_t_retrieve_name(self, arg2, arg3)

    def gen_xref_lines(self) -> "bool":
        r"""gen_xref_lines(self) -> bool"""
        return _ida_domain.outctx_base_t_gen_xref_lines(self)

    def init_lines_array(self, answers: "qstrvec_t *", maxsize: "int") -> "void":
        r"""init_lines_array(self, answers, maxsize)"""
        return _ida_domain.outctx_base_t_init_lines_array(self, answers, maxsize)

    def get_stkvar(self, x: "op_t", v: "uval_t", vv: "sval_t *", is_sp_based: "int *", _frame: "tinfo_t") -> "ssize_t":
        r"""get_stkvar(self, x, v, vv, is_sp_based, _frame) -> ssize_t"""
        return _ida_domain.outctx_base_t_get_stkvar(self, x, v, vv, is_sp_based, _frame)

    def gen_empty_line_without_annotations(self) -> "void":
        r"""gen_empty_line_without_annotations(self)"""
        return _ida_domain.outctx_base_t_gen_empty_line_without_annotations(self)

    def getF(self) -> "flags64_t":
        r"""getF(self) -> flags64_t"""
        return _ida_domain.outctx_base_t_getF(self)

# Register outctx_base_t in _ida_domain:
_ida_domain.outctx_base_t_swigregister(outctx_base_t)
CTXF_MAIN = _ida_domain.CTXF_MAIN

CTXF_MULTI = _ida_domain.CTXF_MULTI

CTXF_CODE = _ida_domain.CTXF_CODE

CTXF_STACK = _ida_domain.CTXF_STACK

CTXF_GEN_XREFS = _ida_domain.CTXF_GEN_XREFS

CTXF_XREF_STATE = _ida_domain.CTXF_XREF_STATE

XREFSTATE_NONE = _ida_domain.XREFSTATE_NONE

XREFSTATE_GO = _ida_domain.XREFSTATE_GO

XREFSTATE_DONE = _ida_domain.XREFSTATE_DONE

CTXF_GEN_CMT = _ida_domain.CTXF_GEN_CMT

CTXF_CMT_STATE = _ida_domain.CTXF_CMT_STATE

COMMSTATE_NONE = _ida_domain.COMMSTATE_NONE

COMMSTATE_GO = _ida_domain.COMMSTATE_GO

COMMSTATE_DONE = _ida_domain.COMMSTATE_DONE

CTXF_VOIDS = _ida_domain.CTXF_VOIDS

CTXF_NORMAL_LABEL = _ida_domain.CTXF_NORMAL_LABEL

CTXF_DEMANGLED_LABEL = _ida_domain.CTXF_DEMANGLED_LABEL

CTXF_LABEL_OK = _ida_domain.CTXF_LABEL_OK

CTXF_DEMANGLED_OK = _ida_domain.CTXF_DEMANGLED_OK

CTXF_OVSTORE_PRNT = _ida_domain.CTXF_OVSTORE_PRNT

CTXF_OUTCTX_T = _ida_domain.CTXF_OUTCTX_T

CTXF_DBLIND_OPND = _ida_domain.CTXF_DBLIND_OPND

CTXF_BINOP_STATE = _ida_domain.CTXF_BINOP_STATE

BINOPSTATE_NONE = _ida_domain.BINOPSTATE_NONE

BINOPSTATE_GO = _ida_domain.BINOPSTATE_GO

BINOPSTATE_DONE = _ida_domain.BINOPSTATE_DONE

CTXF_HIDDEN_ADDR = _ida_domain.CTXF_HIDDEN_ADDR

CTXF_BIT_PREFIX = _ida_domain.CTXF_BIT_PREFIX

OOF_SIGNMASK = _ida_domain.OOF_SIGNMASK

OOFS_IFSIGN = _ida_domain.OOFS_IFSIGN

OOFS_NOSIGN = _ida_domain.OOFS_NOSIGN

OOFS_NEEDSIGN = _ida_domain.OOFS_NEEDSIGN

OOF_SIGNED = _ida_domain.OOF_SIGNED

OOF_NUMBER = _ida_domain.OOF_NUMBER

OOF_WIDTHMASK = _ida_domain.OOF_WIDTHMASK

OOFW_IMM = _ida_domain.OOFW_IMM

OOFW_8 = _ida_domain.OOFW_8

OOFW_16 = _ida_domain.OOFW_16

OOFW_24 = _ida_domain.OOFW_24

OOFW_32 = _ida_domain.OOFW_32

OOFW_64 = _ida_domain.OOFW_64

OOF_ADDR = _ida_domain.OOF_ADDR

OOF_OUTER = _ida_domain.OOF_OUTER

OOF_ZSTROFF = _ida_domain.OOF_ZSTROFF

OOF_NOBNOT = _ida_domain.OOF_NOBNOT

OOF_SPACES = _ida_domain.OOF_SPACES

OOF_ANYSERIAL = _ida_domain.OOF_ANYSERIAL

OOF_LZEROES = _ida_domain.OOF_LZEROES

OOF_NO_LZEROES = _ida_domain.OOF_NO_LZEROES

DEFAULT_INDENT = _ida_domain.DEFAULT_INDENT

MAKELINE_NONE = _ida_domain.MAKELINE_NONE

MAKELINE_BINPREF = _ida_domain.MAKELINE_BINPREF

MAKELINE_VOID = _ida_domain.MAKELINE_VOID

MAKELINE_STACK = _ida_domain.MAKELINE_STACK


class outctx_t(outctx_base_t):
    r"""Proxy of C++ outctx_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    bin_ea: "ea_t" = property(_ida_domain.outctx_t_bin_ea_get, _ida_domain.outctx_t_bin_ea_set, doc=r"""bin_ea""")
    bin_state: "char" = property(_ida_domain.outctx_t_bin_state_get, _ida_domain.outctx_t_bin_state_set, doc=r"""bin_state""")
    gl_bpsize: "int" = property(_ida_domain.outctx_t_gl_bpsize_get, _ida_domain.outctx_t_gl_bpsize_set, doc=r"""gl_bpsize""")
    bin_width: "int" = property(_ida_domain.outctx_t_bin_width_get, _ida_domain.outctx_t_bin_width_set, doc=r"""bin_width""")
    insn: "insn_t" = property(_ida_domain.outctx_t_insn_get, _ida_domain.outctx_t_insn_set, doc=r"""insn""")
    curlabel: "qstring" = property(_ida_domain.outctx_t_curlabel_get, _ida_domain.outctx_t_curlabel_set, doc=r"""curlabel""")
    wif: "printop_t const *" = property(_ida_domain.outctx_t_wif_get, _ida_domain.outctx_t_wif_set, doc=r"""wif""")
    procmod: "procmod_t *" = property(_ida_domain.outctx_t_procmod_get, _ida_domain.outctx_t_procmod_set, doc=r"""procmod""")
    ph: "processor_t &" = property(_ida_domain.outctx_t_ph_get, _ida_domain.outctx_t_ph_set, doc=r"""ph""")
    ash: "asm_t &" = property(_ida_domain.outctx_t_ash_get, _ida_domain.outctx_t_ash_set, doc=r"""ash""")
    saved_immvals: "uval_t [UA_MAXOP]" = property(_ida_domain.outctx_t_saved_immvals_get, _ida_domain.outctx_t_saved_immvals_set, doc=r"""saved_immvals""")
    prefix_ea: "ea_t" = property(_ida_domain.outctx_t_prefix_ea_get, _ida_domain.outctx_t_prefix_ea_set, doc=r"""prefix_ea""")
    next_line_ea: "ea_t" = property(_ida_domain.outctx_t_next_line_ea_get, _ida_domain.outctx_t_next_line_ea_set, doc=r"""next_line_ea""")

    def setup_outctx(self, prefix: "char const *", flags: "int") -> "void":
        r"""setup_outctx(self, prefix, flags)"""
        return _ida_domain.outctx_t_setup_outctx(self, prefix, flags)

    def term_outctx(self, prefix: "char const *"=None) -> "int":
        r"""term_outctx(self, prefix=None) -> int"""
        return _ida_domain.outctx_t_term_outctx(self, prefix)

    def retrieve_cmt(self) -> "ssize_t":
        r"""retrieve_cmt(self) -> ssize_t"""
        return _ida_domain.outctx_t_retrieve_cmt(self)

    def retrieve_name(self, arg2: "qstring *", arg3: "color_t *") -> "ssize_t":
        r"""retrieve_name(self, arg2, arg3) -> ssize_t"""
        return _ida_domain.outctx_t_retrieve_name(self, arg2, arg3)

    def gen_xref_lines(self) -> "bool":
        r"""gen_xref_lines(self) -> bool"""
        return _ida_domain.outctx_t_gen_xref_lines(self)

    def out_btoa(self, Word: "uval_t", radix: "char"=0) -> "void":
        r"""out_btoa(self, Word, radix=0)"""
        return _ida_domain.outctx_t_out_btoa(self, Word, radix)

    def set_bin_state(self, value: "int") -> "void":
        r"""set_bin_state(self, value)"""
        return _ida_domain.outctx_t_set_bin_state(self, value)

    def out_mnem(self, width: "int"=8, postfix: "char const *"=None) -> "void":
        r"""out_mnem(self, width=8, postfix=None)"""
        return _ida_domain.outctx_t_out_mnem(self, width, postfix)

    def out_custom_mnem(self, mnem: "char const *", width: "int"=8, postfix: "char const *"=None) -> "void":
        r"""out_custom_mnem(self, mnem, width=8, postfix=None)"""
        return _ida_domain.outctx_t_out_custom_mnem(self, mnem, width, postfix)

    def out_mnemonic(self) -> "void":
        r"""out_mnemonic(self)"""
        return _ida_domain.outctx_t_out_mnemonic(self)

    def out_one_operand(self, n: "int") -> "bool":
        r"""out_one_operand(self, n) -> bool"""
        return _ida_domain.outctx_t_out_one_operand(self, n)

    def out_immchar_cmts(self) -> "void":
        r"""out_immchar_cmts(self)"""
        return _ida_domain.outctx_t_out_immchar_cmts(self)

    def gen_func_header(self, pfn: "func_t") -> "void":
        r"""gen_func_header(self, pfn)"""
        return _ida_domain.outctx_t_gen_func_header(self, pfn)

    def gen_func_footer(self, pfn: "func_t") -> "void":
        r"""gen_func_footer(self, pfn)"""
        return _ida_domain.outctx_t_gen_func_footer(self, pfn)

    def out_data(self, analyze_only: "bool") -> "void":
        r"""out_data(self, analyze_only)"""
        return _ida_domain.outctx_t_out_data(self, analyze_only)

    def out_specea(self, segtype: "uchar") -> "bool":
        r"""out_specea(self, segtype) -> bool"""
        return _ida_domain.outctx_t_out_specea(self, segtype)

    def gen_header_extra(self) -> "void":
        r"""gen_header_extra(self)"""
        return _ida_domain.outctx_t_gen_header_extra(self)

    def gen_header(self, *args) -> "void":
        r"""gen_header(self, flags=((1 << 0)|(1 << 1)), proc_name=None, proc_flavour=None)"""
        return _ida_domain.outctx_t_gen_header(self, *args)

    def out_fcref_names(self) -> "void":
        r"""out_fcref_names(self)"""
        return _ida_domain.outctx_t_out_fcref_names(self)

# Register outctx_t in _ida_domain:
_ida_domain.outctx_t_swigregister(outctx_t)
GH_PRINT_PROC = _ida_domain.GH_PRINT_PROC

GH_PRINT_ASM = _ida_domain.GH_PRINT_ASM

GH_PRINT_BYTESEX = _ida_domain.GH_PRINT_BYTESEX

GH_PRINT_HEADER = _ida_domain.GH_PRINT_HEADER

GH_BYTESEX_HAS_HIGHBYTE = _ida_domain.GH_BYTESEX_HAS_HIGHBYTE

GH_PRINT_PROC_AND_ASM = _ida_domain.GH_PRINT_PROC_AND_ASM

GH_PRINT_PROC_ASM_AND_BYTESEX = _ida_domain.GH_PRINT_PROC_ASM_AND_BYTESEX

GH_PRINT_ALL = _ida_domain.GH_PRINT_ALL

GH_PRINT_ALL_BUT_BYTESEX = _ida_domain.GH_PRINT_ALL_BUT_BYTESEX



def create_outctx(ea: "ea_t", F: "flags64_t"=0, suspop: "int"=0) -> "outctx_base_t *":
    r"""create_outctx(ea, F=0, suspop=0) -> outctx_base_t"""
    return _ida_domain.create_outctx(ea, F, suspop)

def print_insn_mnem(ea: "ea_t") -> "qstring *":
    r"""print_insn_mnem(ea) -> bool"""
    return _ida_domain.print_insn_mnem(ea)
FCBF_CONT = _ida_domain.FCBF_CONT

FCBF_ERR_REPL = _ida_domain.FCBF_ERR_REPL

FCBF_FF_LIT = _ida_domain.FCBF_FF_LIT

FCBF_DELIM = _ida_domain.FCBF_DELIM


def get_dtype_flag(dtype: "op_dtype_t") -> "flags64_t":
    r"""get_dtype_flag(dtype) -> flags64_t"""
    return _ida_domain.get_dtype_flag(dtype)

def get_dtype_size(dtype: "op_dtype_t") -> "size_t":
    r"""get_dtype_size(dtype) -> size_t"""
    return _ida_domain.get_dtype_size(dtype)

def is_floating_dtype(dtype: "op_dtype_t") -> "bool":
    r"""is_floating_dtype(dtype) -> bool"""
    return _ida_domain.is_floating_dtype(dtype)

def create_insn(ea: "ea_t", out: "insn_t"=None) -> "int":
    r"""create_insn(ea, out=None) -> int"""
    return _ida_domain.create_insn(ea, out)

def decode_insn(out: "insn_t", ea: "ea_t") -> "int":
    r"""decode_insn(out, ea) -> int"""
    return _ida_domain.decode_insn(out, ea)

def can_decode(ea: "ea_t") -> "bool":
    r"""can_decode(ea) -> bool"""
    return _ida_domain.can_decode(ea)

def print_operand(ea: "ea_t", n: "int", getn_flags: "int"=0, newtype: "printop_t *"=None) -> "qstring *":
    r"""print_operand(ea, n, getn_flags=0, newtype=None) -> bool"""
    return _ida_domain.print_operand(ea, n, getn_flags, newtype)

def decode_prev_insn(out: "insn_t", ea: "ea_t") -> "ea_t":
    r"""decode_prev_insn(out, ea) -> ea_t"""
    return _ida_domain.decode_prev_insn(out, ea)
class macro_constructor_t(object):
    r"""Proxy of C++ macro_constructor_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    reserved: "size_t" = property(_ida_domain.macro_constructor_t_reserved_get, _ida_domain.macro_constructor_t_reserved_set, doc=r"""reserved""")
    __swig_destroy__ = _ida_domain.delete_macro_constructor_t

    def construct_macro(self, insn: "insn_t", enable: "bool") -> "bool":
        r"""construct_macro(self, insn, enable) -> bool"""
        return _ida_domain.macro_constructor_t_construct_macro(self, insn, enable)

    def build_macro(self, insn: "insn_t", may_go_forward: "bool") -> "bool":
        r"""build_macro(self, insn, may_go_forward) -> bool"""
        return _ida_domain.macro_constructor_t_build_macro(self, insn, may_go_forward)

    def __init__(self):
        r"""__init__(self) -> macro_constructor_t"""
        if self.__class__ == macro_constructor_t:
            _self = None
        else:
            _self = self
        _ida_domain.macro_constructor_t_swiginit(self, _ida_domain.new_macro_constructor_t(_self, ))
    def __disown__(self):
        self.this.disown()
        _ida_domain.disown_macro_constructor_t(self)
        return weakref.proxy(self)

# Register macro_constructor_t in _ida_domain:
_ida_domain.macro_constructor_t_swigregister(macro_constructor_t)

def decode_preceding_insn(out: "insn_t", ea: "ea_t") -> "PyObject *":
    r"""decode_preceding_insn(out, ea) -> PyObject *"""
    return _ida_domain.decode_preceding_insn(out, ea)

def construct_macro(*args) -> "bool":
    r"""
    construct_macro(_this, insn, enable) -> bool
    construct_macro(insn, enable, build_macro) -> bool
    """
    return _ida_domain.construct_macro(*args)

def get_dtype_by_size(size: "asize_t") -> "int":
    r"""get_dtype_by_size(size) -> int"""
    return _ida_domain.get_dtype_by_size(size)

def get_immvals(ea: "ea_t", n: "int", F: "flags64_t"=0) -> "PyObject *":
    r"""get_immvals(ea, n, F=0) -> PyObject"""
    return _ida_domain.get_immvals(ea, n, F)

def get_printable_immvals(ea: "ea_t", n: "int", F: "flags64_t"=0) -> "PyObject *":
    r"""get_printable_immvals(ea, n, F=0) -> PyObject"""
    return _ida_domain.get_printable_immvals(ea, n, F)

def insn_t__from_ptrval__(ptrval: "size_t") -> "insn_t *":
    r"""insn_t__from_ptrval__(ptrval) -> insn_t"""
    return _ida_domain.insn_t__from_ptrval__(ptrval)

def op_t__from_ptrval__(ptrval: "size_t") -> "op_t *":
    r"""op_t__from_ptrval__(ptrval) -> op_t"""
    return _ida_domain.op_t__from_ptrval__(ptrval)

def outctx_base_t__from_ptrval__(ptrval: "size_t") -> "outctx_base_t *":
    r"""outctx_base_t__from_ptrval__(ptrval) -> outctx_base_t"""
    return _ida_domain.outctx_base_t__from_ptrval__(ptrval)

def outctx_t__from_ptrval__(ptrval: "size_t") -> "outctx_t *":
    r"""outctx_t__from_ptrval__(ptrval) -> outctx_t"""
    return _ida_domain.outctx_t__from_ptrval__(ptrval)

#<pycode(py_ua)>
ua_mnem = print_insn_mnem
#</pycode(py_ua)>

class xreflist_t(object):
    r"""Proxy of C++ qvector< xreflist_entry_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> xreflist_t
        __init__(self, x) -> xreflist_t
        """
        _ida_domain.xreflist_t_swiginit(self, _ida_domain.new_xreflist_t(*args))
    __swig_destroy__ = _ida_domain.delete_xreflist_t

    def push_back(self, *args) -> "xreflist_entry_t &":
        r"""
        push_back(self, x)
        push_back(self) -> xreflist_entry_t
        """
        return _ida_domain.xreflist_t_push_back(self, *args)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.xreflist_t_pop_back(self)

    def size(self) -> "size_t":
        r"""size(self) -> size_t"""
        return _ida_domain.xreflist_t_size(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.xreflist_t_empty(self)

    def at(self, _idx: "size_t") -> "xreflist_entry_t const &":
        r"""at(self, _idx) -> xreflist_entry_t"""
        return _ida_domain.xreflist_t_at(self, _idx)

    def qclear(self) -> "void":
        r"""qclear(self)"""
        return _ida_domain.xreflist_t_qclear(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.xreflist_t_clear(self)

    def resize(self, *args) -> "void":
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_domain.xreflist_t_resize(self, *args)

    def grow(self, *args) -> "void":
        r"""grow(self, x=xreflist_entry_t())"""
        return _ida_domain.xreflist_t_grow(self, *args)

    def capacity(self) -> "size_t":
        r"""capacity(self) -> size_t"""
        return _ida_domain.xreflist_t_capacity(self)

    def reserve(self, cnt: "size_t") -> "void":
        r"""reserve(self, cnt)"""
        return _ida_domain.xreflist_t_reserve(self, cnt)

    def truncate(self) -> "void":
        r"""truncate(self)"""
        return _ida_domain.xreflist_t_truncate(self)

    def swap(self, r: "xreflist_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.xreflist_t_swap(self, r)

    def extract(self) -> "xreflist_entry_t *":
        r"""extract(self) -> xreflist_entry_t"""
        return _ida_domain.xreflist_t_extract(self)

    def inject(self, s: "xreflist_entry_t", len: "size_t") -> "void":
        r"""inject(self, s, len)"""
        return _ida_domain.xreflist_t_inject(self, s, len)

    def __eq__(self, r: "xreflist_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.xreflist_t___eq__(self, r)

    def __ne__(self, r: "xreflist_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.xreflist_t___ne__(self, r)

    def begin(self, *args) -> "qvector< xreflist_entry_t >::const_iterator":
        r"""
        begin(self) -> xreflist_entry_t
        begin(self) -> xreflist_entry_t
        """
        return _ida_domain.xreflist_t_begin(self, *args)

    def end(self, *args) -> "qvector< xreflist_entry_t >::const_iterator":
        r"""
        end(self) -> xreflist_entry_t
        end(self) -> xreflist_entry_t
        """
        return _ida_domain.xreflist_t_end(self, *args)

    def insert(self, it: "xreflist_entry_t", x: "xreflist_entry_t") -> "qvector< xreflist_entry_t >::iterator":
        r"""insert(self, it, x) -> xreflist_entry_t"""
        return _ida_domain.xreflist_t_insert(self, it, x)

    def erase(self, *args) -> "qvector< xreflist_entry_t >::iterator":
        r"""
        erase(self, it) -> xreflist_entry_t
        erase(self, first, last) -> xreflist_entry_t
        """
        return _ida_domain.xreflist_t_erase(self, *args)

    def find(self, *args) -> "qvector< xreflist_entry_t >::const_iterator":
        r"""
        find(self, x) -> xreflist_entry_t
        find(self, x) -> xreflist_entry_t
        """
        return _ida_domain.xreflist_t_find(self, *args)

    def has(self, x: "xreflist_entry_t") -> "bool":
        r"""has(self, x) -> bool"""
        return _ida_domain.xreflist_t_has(self, x)

    def add_unique(self, x: "xreflist_entry_t") -> "bool":
        r"""add_unique(self, x) -> bool"""
        return _ida_domain.xreflist_t_add_unique(self, x)

    def _del(self, x: "xreflist_entry_t") -> "bool":
        r"""_del(self, x) -> bool"""
        return _ida_domain.xreflist_t__del(self, x)

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.xreflist_t___len__(self)

    def __getitem__(self, i: "size_t") -> "xreflist_entry_t const &":
        r"""__getitem__(self, i) -> xreflist_entry_t"""
        return _ida_domain.xreflist_t___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "xreflist_entry_t") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.xreflist_t___setitem__(self, i, v)

    def append(self, x: "xreflist_entry_t") -> "void":
        r"""append(self, x)"""
        return _ida_domain.xreflist_t_append(self, x)

    def extend(self, x: "xreflist_t") -> "void":
        r"""extend(self, x)"""
        return _ida_domain.xreflist_t_extend(self, x)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register xreflist_t in _ida_domain:
_ida_domain.xreflist_t_swigregister(xreflist_t)

def is_funcarg_off(pfn: "func_t", frameoff: "uval_t") -> "bool":
    r"""is_funcarg_off(pfn, frameoff) -> bool"""
    return _ida_domain.is_funcarg_off(pfn, frameoff)

def lvar_off(pfn: "func_t", frameoff: "uval_t") -> "sval_t":
    r"""lvar_off(pfn, frameoff) -> sval_t"""
    return _ida_domain.lvar_off(pfn, frameoff)
FRAME_UDM_NAME_R = _ida_domain.FRAME_UDM_NAME_R

FRAME_UDM_NAME_S = _ida_domain.FRAME_UDM_NAME_S

class stkpnt_t(object):
    r"""Proxy of C++ stkpnt_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ea: "ea_t" = property(_ida_domain.stkpnt_t_ea_get, _ida_domain.stkpnt_t_ea_set, doc=r"""ea""")
    spd: "sval_t" = property(_ida_domain.stkpnt_t_spd_get, _ida_domain.stkpnt_t_spd_set, doc=r"""spd""")

    def __eq__(self, r: "stkpnt_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.stkpnt_t___eq__(self, r)

    def __ne__(self, r: "stkpnt_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.stkpnt_t___ne__(self, r)

    def __lt__(self, r: "stkpnt_t") -> "bool":
        r"""__lt__(self, r) -> bool"""
        return _ida_domain.stkpnt_t___lt__(self, r)

    def __gt__(self, r: "stkpnt_t") -> "bool":
        r"""__gt__(self, r) -> bool"""
        return _ida_domain.stkpnt_t___gt__(self, r)

    def __le__(self, r: "stkpnt_t") -> "bool":
        r"""__le__(self, r) -> bool"""
        return _ida_domain.stkpnt_t___le__(self, r)

    def __ge__(self, r: "stkpnt_t") -> "bool":
        r"""__ge__(self, r) -> bool"""
        return _ida_domain.stkpnt_t___ge__(self, r)

    def compare(self, r: "stkpnt_t") -> "int":
        r"""compare(self, r) -> int"""
        return _ida_domain.stkpnt_t_compare(self, r)

    def __init__(self):
        r"""__init__(self) -> stkpnt_t"""
        _ida_domain.stkpnt_t_swiginit(self, _ida_domain.new_stkpnt_t())
    __swig_destroy__ = _ida_domain.delete_stkpnt_t

# Register stkpnt_t in _ida_domain:
_ida_domain.stkpnt_t_swigregister(stkpnt_t)
class stkpnts_t(object):
    r"""Proxy of C++ stkpnts_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __eq__(self, r: "stkpnts_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.stkpnts_t___eq__(self, r)

    def __ne__(self, r: "stkpnts_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.stkpnts_t___ne__(self, r)

    def __lt__(self, r: "stkpnts_t") -> "bool":
        r"""__lt__(self, r) -> bool"""
        return _ida_domain.stkpnts_t___lt__(self, r)

    def __gt__(self, r: "stkpnts_t") -> "bool":
        r"""__gt__(self, r) -> bool"""
        return _ida_domain.stkpnts_t___gt__(self, r)

    def __le__(self, r: "stkpnts_t") -> "bool":
        r"""__le__(self, r) -> bool"""
        return _ida_domain.stkpnts_t___le__(self, r)

    def __ge__(self, r: "stkpnts_t") -> "bool":
        r"""__ge__(self, r) -> bool"""
        return _ida_domain.stkpnts_t___ge__(self, r)

    def compare(self, r: "stkpnts_t") -> "int":
        r"""compare(self, r) -> int"""
        return _ida_domain.stkpnts_t_compare(self, r)

    def __init__(self):
        r"""__init__(self) -> stkpnts_t"""
        _ida_domain.stkpnts_t_swiginit(self, _ida_domain.new_stkpnts_t())
    __swig_destroy__ = _ida_domain.delete_stkpnts_t

# Register stkpnts_t in _ida_domain:
_ida_domain.stkpnts_t_swigregister(stkpnts_t)

def add_frame(pfn: "func_t", frsize: "sval_t", frregs: "ushort", argsize: "asize_t") -> "bool":
    r"""add_frame(pfn, frsize, frregs, argsize) -> bool"""
    return _ida_domain.add_frame(pfn, frsize, frregs, argsize)

def del_frame(pfn: "func_t") -> "bool":
    r"""del_frame(pfn) -> bool"""
    return _ida_domain.del_frame(pfn)

def set_frame_size(pfn: "func_t", frsize: "asize_t", frregs: "ushort", argsize: "asize_t") -> "bool":
    r"""set_frame_size(pfn, frsize, frregs, argsize) -> bool"""
    return _ida_domain.set_frame_size(pfn, frsize, frregs, argsize)

def get_frame_size(pfn: "func_t") -> "asize_t":
    r"""get_frame_size(pfn) -> asize_t"""
    return _ida_domain.get_frame_size(pfn)

def get_frame_retsize(pfn: "func_t") -> "int":
    r"""get_frame_retsize(pfn) -> int"""
    return _ida_domain.get_frame_retsize(pfn)
FPC_ARGS = _ida_domain.FPC_ARGS

FPC_RETADDR = _ida_domain.FPC_RETADDR

FPC_SAVREGS = _ida_domain.FPC_SAVREGS

FPC_LVARS = _ida_domain.FPC_LVARS


def get_frame_part(range: "range_t", pfn: "func_t", part: "frame_part_t") -> "void":
    r"""get_frame_part(range, pfn, part)"""
    return _ida_domain.get_frame_part(range, pfn, part)

def frame_off_args(pfn: "func_t") -> "ea_t":
    r"""frame_off_args(pfn) -> ea_t"""
    return _ida_domain.frame_off_args(pfn)

def frame_off_retaddr(pfn: "func_t") -> "ea_t":
    r"""frame_off_retaddr(pfn) -> ea_t"""
    return _ida_domain.frame_off_retaddr(pfn)

def frame_off_savregs(pfn: "func_t") -> "ea_t":
    r"""frame_off_savregs(pfn) -> ea_t"""
    return _ida_domain.frame_off_savregs(pfn)

def frame_off_lvars(pfn: "func_t") -> "ea_t":
    r"""frame_off_lvars(pfn) -> ea_t"""
    return _ida_domain.frame_off_lvars(pfn)

def get_func_frame(out: "tinfo_t", pfn: "func_t") -> "bool":
    r"""get_func_frame(out, pfn) -> bool"""
    return _ida_domain.get_func_frame(out, pfn)

def soff_to_fpoff(pfn: "func_t", soff: "uval_t") -> "sval_t":
    r"""soff_to_fpoff(pfn, soff) -> sval_t"""
    return _ida_domain.soff_to_fpoff(pfn, soff)

def update_fpd(pfn: "func_t", fpd: "asize_t") -> "bool":
    r"""update_fpd(pfn, fpd) -> bool"""
    return _ida_domain.update_fpd(pfn, fpd)

def set_purged(ea: "ea_t", nbytes: "int", override_old_value: "bool") -> "bool":
    r"""set_purged(ea, nbytes, override_old_value) -> bool"""
    return _ida_domain.set_purged(ea, nbytes, override_old_value)

def define_stkvar(pfn: "func_t", name: "char const *", off: "sval_t", tif: "tinfo_t", repr: "value_repr_t"=None) -> "bool":
    r"""define_stkvar(pfn, name, off, tif, repr=None) -> bool"""
    return _ida_domain.define_stkvar(pfn, name, off, tif, repr)

def add_frame_member(pfn: "func_t", name: "char const *", offset: "uval_t", tif: "tinfo_t", repr: "value_repr_t"=None, etf_flags: "uint"=0) -> "bool":
    r"""add_frame_member(pfn, name, offset, tif, repr=None, etf_flags=0) -> bool"""
    return _ida_domain.add_frame_member(pfn, name, offset, tif, repr, etf_flags)

def is_anonymous_member_name(name: "char const *") -> "bool":
    r"""is_anonymous_member_name(name) -> bool"""
    return _ida_domain.is_anonymous_member_name(name)

def is_dummy_member_name(name: "char const *") -> "bool":
    r"""is_dummy_member_name(name) -> bool"""
    return _ida_domain.is_dummy_member_name(name)

def is_special_frame_member(tid: "tid_t") -> "bool":
    r"""is_special_frame_member(tid) -> bool"""
    return _ida_domain.is_special_frame_member(tid)

def set_frame_member_type(pfn: "func_t", offset: "uval_t", tif: "tinfo_t", repr: "value_repr_t"=None, etf_flags: "uint"=0) -> "bool":
    r"""set_frame_member_type(pfn, offset, tif, repr=None, etf_flags=0) -> bool"""
    return _ida_domain.set_frame_member_type(pfn, offset, tif, repr, etf_flags)

def delete_frame_members(pfn: "func_t", start_offset: "uval_t", end_offset: "uval_t") -> "bool":
    r"""delete_frame_members(pfn, start_offset, end_offset) -> bool"""
    return _ida_domain.delete_frame_members(pfn, start_offset, end_offset)

def build_stkvar_name(pfn: "func_t", v: "sval_t") -> "qstring *":
    r"""build_stkvar_name(pfn, v) -> ssize_t"""
    return _ida_domain.build_stkvar_name(pfn, v)

def calc_stkvar_struc_offset(pfn: "func_t", insn: "insn_t", n: "int") -> "ea_t":
    r"""calc_stkvar_struc_offset(pfn, insn, n) -> ea_t"""
    return _ida_domain.calc_stkvar_struc_offset(pfn, insn, n)

def calc_frame_offset(pfn: "func_t", off: "sval_t", insn: "insn_t"=None, op: "op_t"=None) -> "sval_t":
    r"""calc_frame_offset(pfn, off, insn=None, op=None) -> sval_t"""
    return _ida_domain.calc_frame_offset(pfn, off, insn, op)

def free_regvar(v: "regvar_t") -> "void":
    r"""free_regvar(v)"""
    return _ida_domain.free_regvar(v)
class regvar_t(range_t):
    r"""Proxy of C++ regvar_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    canon: "char *" = property(_ida_domain.regvar_t_canon_get, _ida_domain.regvar_t_canon_set, doc=r"""canon""")
    user: "char *" = property(_ida_domain.regvar_t_user_get, _ida_domain.regvar_t_user_set, doc=r"""user""")
    cmt: "char *" = property(_ida_domain.regvar_t_cmt_get, _ida_domain.regvar_t_cmt_set, doc=r"""cmt""")

    def __init__(self, *args):
        r"""
        __init__(self) -> regvar_t
        __init__(self, r) -> regvar_t
        """
        _ida_domain.regvar_t_swiginit(self, _ida_domain.new_regvar_t(*args))
    __swig_destroy__ = _ida_domain.delete_regvar_t

    def swap(self, r: "regvar_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.regvar_t_swap(self, r)

# Register regvar_t in _ida_domain:
_ida_domain.regvar_t_swigregister(regvar_t)

def add_regvar(pfn: "func_t", ea1: "ea_t", ea2: "ea_t", canon: "char const *", user: "char const *", cmt: "char const *") -> "int":
    r"""add_regvar(pfn, ea1, ea2, canon, user, cmt) -> int"""
    return _ida_domain.add_regvar(pfn, ea1, ea2, canon, user, cmt)
REGVAR_ERROR_OK = _ida_domain.REGVAR_ERROR_OK

REGVAR_ERROR_ARG = _ida_domain.REGVAR_ERROR_ARG

REGVAR_ERROR_RANGE = _ida_domain.REGVAR_ERROR_RANGE

REGVAR_ERROR_NAME = _ida_domain.REGVAR_ERROR_NAME


def find_regvar(*args) -> "regvar_t *":
    r"""
    find_regvar(pfn, ea1, ea2, canon, user) -> regvar_t
    find_regvar(pfn, ea, canon) -> regvar_t
    """
    return _ida_domain.find_regvar(*args)

def has_regvar(pfn: "func_t", ea: "ea_t") -> "bool":
    r"""has_regvar(pfn, ea) -> bool"""
    return _ida_domain.has_regvar(pfn, ea)

def rename_regvar(pfn: "func_t", v: "regvar_t", user: "char const *") -> "int":
    r"""rename_regvar(pfn, v, user) -> int"""
    return _ida_domain.rename_regvar(pfn, v, user)

def set_regvar_cmt(pfn: "func_t", v: "regvar_t", cmt: "char const *") -> "int":
    r"""set_regvar_cmt(pfn, v, cmt) -> int"""
    return _ida_domain.set_regvar_cmt(pfn, v, cmt)

def del_regvar(pfn: "func_t", ea1: "ea_t", ea2: "ea_t", canon: "char const *") -> "int":
    r"""del_regvar(pfn, ea1, ea2, canon) -> int"""
    return _ida_domain.del_regvar(pfn, ea1, ea2, canon)

def add_auto_stkpnt(pfn: "func_t", ea: "ea_t", delta: "sval_t") -> "bool":
    r"""add_auto_stkpnt(pfn, ea, delta) -> bool"""
    return _ida_domain.add_auto_stkpnt(pfn, ea, delta)

def add_user_stkpnt(ea: "ea_t", delta: "sval_t") -> "bool":
    r"""add_user_stkpnt(ea, delta) -> bool"""
    return _ida_domain.add_user_stkpnt(ea, delta)

def del_stkpnt(pfn: "func_t", ea: "ea_t") -> "bool":
    r"""del_stkpnt(pfn, ea) -> bool"""
    return _ida_domain.del_stkpnt(pfn, ea)

def get_spd(pfn: "func_t", ea: "ea_t") -> "sval_t":
    r"""get_spd(pfn, ea) -> sval_t"""
    return _ida_domain.get_spd(pfn, ea)

def get_effective_spd(pfn: "func_t", ea: "ea_t") -> "sval_t":
    r"""get_effective_spd(pfn, ea) -> sval_t"""
    return _ida_domain.get_effective_spd(pfn, ea)

def get_sp_delta(pfn: "func_t", ea: "ea_t") -> "sval_t":
    r"""get_sp_delta(pfn, ea) -> sval_t"""
    return _ida_domain.get_sp_delta(pfn, ea)

def set_auto_spd(pfn: "func_t", ea: "ea_t", new_spd: "sval_t") -> "bool":
    r"""set_auto_spd(pfn, ea, new_spd) -> bool"""
    return _ida_domain.set_auto_spd(pfn, ea, new_spd)

def recalc_spd(cur_ea: "ea_t") -> "bool":
    r"""recalc_spd(cur_ea) -> bool"""
    return _ida_domain.recalc_spd(cur_ea)

def recalc_spd_for_basic_block(pfn: "func_t", cur_ea: "ea_t") -> "bool":
    r"""recalc_spd_for_basic_block(pfn, cur_ea) -> bool"""
    return _ida_domain.recalc_spd_for_basic_block(pfn, cur_ea)
class xreflist_entry_t(object):
    r"""Proxy of C++ xreflist_entry_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ea: "ea_t" = property(_ida_domain.xreflist_entry_t_ea_get, _ida_domain.xreflist_entry_t_ea_set, doc=r"""ea""")
    opnum: "uchar" = property(_ida_domain.xreflist_entry_t_opnum_get, _ida_domain.xreflist_entry_t_opnum_set, doc=r"""opnum""")
    type: "uchar" = property(_ida_domain.xreflist_entry_t_type_get, _ida_domain.xreflist_entry_t_type_set, doc=r"""type""")

    def __eq__(self, r: "xreflist_entry_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.xreflist_entry_t___eq__(self, r)

    def __ne__(self, r: "xreflist_entry_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.xreflist_entry_t___ne__(self, r)

    def __lt__(self, r: "xreflist_entry_t") -> "bool":
        r"""__lt__(self, r) -> bool"""
        return _ida_domain.xreflist_entry_t___lt__(self, r)

    def __gt__(self, r: "xreflist_entry_t") -> "bool":
        r"""__gt__(self, r) -> bool"""
        return _ida_domain.xreflist_entry_t___gt__(self, r)

    def __le__(self, r: "xreflist_entry_t") -> "bool":
        r"""__le__(self, r) -> bool"""
        return _ida_domain.xreflist_entry_t___le__(self, r)

    def __ge__(self, r: "xreflist_entry_t") -> "bool":
        r"""__ge__(self, r) -> bool"""
        return _ida_domain.xreflist_entry_t___ge__(self, r)

    def compare(self, r: "xreflist_entry_t") -> "int":
        r"""compare(self, r) -> int"""
        return _ida_domain.xreflist_entry_t_compare(self, r)

    def __init__(self):
        r"""__init__(self) -> xreflist_entry_t"""
        _ida_domain.xreflist_entry_t_swiginit(self, _ida_domain.new_xreflist_entry_t())
    __swig_destroy__ = _ida_domain.delete_xreflist_entry_t

# Register xreflist_entry_t in _ida_domain:
_ida_domain.xreflist_entry_t_swigregister(xreflist_entry_t)

def build_stkvar_xrefs(out: "xreflist_t", pfn: "func_t", start_offset: "uval_t", end_offset: "uval_t") -> "void":
    r"""build_stkvar_xrefs(out, pfn, start_offset, end_offset)"""
    return _ida_domain.build_stkvar_xrefs(out, pfn, start_offset, end_offset)
class qvector_snapshotvec_t(object):
    r"""Proxy of C++ qvector< snapshot_t * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> qvector_snapshotvec_t
        __init__(self, x) -> qvector_snapshotvec_t
        """
        _ida_domain.qvector_snapshotvec_t_swiginit(self, _ida_domain.new_qvector_snapshotvec_t(*args))
    __swig_destroy__ = _ida_domain.delete_qvector_snapshotvec_t

    def push_back(self, *args) -> "snapshot_t *&":
        r"""
        push_back(self, x)
        push_back(self) -> snapshot_t *&
        """
        return _ida_domain.qvector_snapshotvec_t_push_back(self, *args)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.qvector_snapshotvec_t_pop_back(self)

    def size(self) -> "size_t":
        r"""size(self) -> size_t"""
        return _ida_domain.qvector_snapshotvec_t_size(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.qvector_snapshotvec_t_empty(self)

    def at(self, _idx: "size_t") -> "snapshot_t *const &":
        r"""at(self, _idx) -> snapshot_t"""
        return _ida_domain.qvector_snapshotvec_t_at(self, _idx)

    def qclear(self) -> "void":
        r"""qclear(self)"""
        return _ida_domain.qvector_snapshotvec_t_qclear(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.qvector_snapshotvec_t_clear(self)

    def resize(self, *args) -> "void":
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_domain.qvector_snapshotvec_t_resize(self, *args)

    def capacity(self) -> "size_t":
        r"""capacity(self) -> size_t"""
        return _ida_domain.qvector_snapshotvec_t_capacity(self)

    def reserve(self, cnt: "size_t") -> "void":
        r"""reserve(self, cnt)"""
        return _ida_domain.qvector_snapshotvec_t_reserve(self, cnt)

    def truncate(self) -> "void":
        r"""truncate(self)"""
        return _ida_domain.qvector_snapshotvec_t_truncate(self)

    def swap(self, r: "qvector_snapshotvec_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.qvector_snapshotvec_t_swap(self, r)

    def extract(self) -> "snapshot_t **":
        r"""extract(self) -> snapshot_t **"""
        return _ida_domain.qvector_snapshotvec_t_extract(self)

    def inject(self, s: "snapshot_t **", len: "size_t") -> "void":
        r"""inject(self, s, len)"""
        return _ida_domain.qvector_snapshotvec_t_inject(self, s, len)

    def __eq__(self, r: "qvector_snapshotvec_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.qvector_snapshotvec_t___eq__(self, r)

    def __ne__(self, r: "qvector_snapshotvec_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.qvector_snapshotvec_t___ne__(self, r)

    def begin(self, *args) -> "qvector< snapshot_t * >::const_iterator":
        r"""
        begin(self) -> qvector< snapshot_t * >::iterator
        begin(self) -> qvector< snapshot_t * >::const_iterator
        """
        return _ida_domain.qvector_snapshotvec_t_begin(self, *args)

    def end(self, *args) -> "qvector< snapshot_t * >::const_iterator":
        r"""
        end(self) -> qvector< snapshot_t * >::iterator
        end(self) -> qvector< snapshot_t * >::const_iterator
        """
        return _ida_domain.qvector_snapshotvec_t_end(self, *args)

    def insert(self, it: "qvector< snapshot_t * >::iterator", x: "snapshot_t") -> "qvector< snapshot_t * >::iterator":
        r"""insert(self, it, x) -> qvector< snapshot_t * >::iterator"""
        return _ida_domain.qvector_snapshotvec_t_insert(self, it, x)

    def erase(self, *args) -> "qvector< snapshot_t * >::iterator":
        r"""
        erase(self, it) -> qvector< snapshot_t * >::iterator
        erase(self, first, last) -> qvector< snapshot_t * >::iterator
        """
        return _ida_domain.qvector_snapshotvec_t_erase(self, *args)

    def find(self, *args) -> "qvector< snapshot_t * >::const_iterator":
        r"""
        find(self, x) -> qvector< snapshot_t * >::iterator
        find(self, x) -> qvector< snapshot_t * >::const_iterator
        """
        return _ida_domain.qvector_snapshotvec_t_find(self, *args)

    def has(self, x: "snapshot_t") -> "bool":
        r"""has(self, x) -> bool"""
        return _ida_domain.qvector_snapshotvec_t_has(self, x)

    def add_unique(self, x: "snapshot_t") -> "bool":
        r"""add_unique(self, x) -> bool"""
        return _ida_domain.qvector_snapshotvec_t_add_unique(self, x)

    def _del(self, x: "snapshot_t") -> "bool":
        r"""_del(self, x) -> bool"""
        return _ida_domain.qvector_snapshotvec_t__del(self, x)

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.qvector_snapshotvec_t___len__(self)

    def __getitem__(self, i: "size_t") -> "snapshot_t *const &":
        r"""__getitem__(self, i) -> snapshot_t"""
        return _ida_domain.qvector_snapshotvec_t___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "snapshot_t") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.qvector_snapshotvec_t___setitem__(self, i, v)

    def append(self, x: "snapshot_t") -> "void":
        r"""append(self, x)"""
        return _ida_domain.qvector_snapshotvec_t_append(self, x)

    def extend(self, x: "qvector_snapshotvec_t") -> "void":
        r"""extend(self, x)"""
        return _ida_domain.qvector_snapshotvec_t_extend(self, x)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register qvector_snapshotvec_t in _ida_domain:
_ida_domain.qvector_snapshotvec_t_swigregister(qvector_snapshotvec_t)
class loader_t(object):
    r"""Proxy of C++ loader_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    version: "uint32" = property(_ida_domain.loader_t_version_get, _ida_domain.loader_t_version_set, doc=r"""version""")
    flags: "uint32" = property(_ida_domain.loader_t_flags_get, _ida_domain.loader_t_flags_set, doc=r"""flags""")

    def __init__(self):
        r"""__init__(self) -> loader_t"""
        _ida_domain.loader_t_swiginit(self, _ida_domain.new_loader_t())
    __swig_destroy__ = _ida_domain.delete_loader_t

# Register loader_t in _ida_domain:
_ida_domain.loader_t_swigregister(loader_t)
LDRF_RELOAD = _ida_domain.LDRF_RELOAD

LDRF_REQ_PROC = _ida_domain.LDRF_REQ_PROC

ACCEPT_ARCHIVE = _ida_domain.ACCEPT_ARCHIVE

ACCEPT_CONTINUE = _ida_domain.ACCEPT_CONTINUE

ACCEPT_FIRST = _ida_domain.ACCEPT_FIRST

NEF_SEGS = _ida_domain.NEF_SEGS

NEF_RSCS = _ida_domain.NEF_RSCS

NEF_NAME = _ida_domain.NEF_NAME

NEF_MAN = _ida_domain.NEF_MAN

NEF_FILL = _ida_domain.NEF_FILL

NEF_IMPS = _ida_domain.NEF_IMPS

NEF_FIRST = _ida_domain.NEF_FIRST

NEF_CODE = _ida_domain.NEF_CODE

NEF_RELOAD = _ida_domain.NEF_RELOAD

NEF_FLAT = _ida_domain.NEF_FLAT

NEF_MINI = _ida_domain.NEF_MINI

NEF_LOPT = _ida_domain.NEF_LOPT

NEF_LALL = _ida_domain.NEF_LALL


DLLEXT = _ida_domain.DLLEXT

LOADER_DLL = _ida_domain.LOADER_DLL


def load_binary_file(filename: "char const *", li: "linput_t *", _neflags: "ushort", fileoff: "qoff64_t", basepara: "ea_t", binoff: "ea_t", nbytes: "uint64") -> "bool":
    r"""load_binary_file(filename, li, _neflags, fileoff, basepara, binoff, nbytes) -> bool"""
    return _ida_domain.load_binary_file(filename, li, _neflags, fileoff, basepara, binoff, nbytes)

def process_archive(temp_file: "qstring *", li: "linput_t *", module_name: "qstring *", neflags: "ushort *", defmember: "char const *", loader: "load_info_t const *") -> "qstring *":
    r"""process_archive(temp_file, li, module_name, neflags, defmember, loader) -> int"""
    return _ida_domain.process_archive(temp_file, li, module_name, neflags, defmember, loader)
OFILE_MAP = _ida_domain.OFILE_MAP

OFILE_EXE = _ida_domain.OFILE_EXE

OFILE_IDC = _ida_domain.OFILE_IDC

OFILE_LST = _ida_domain.OFILE_LST

OFILE_ASM = _ida_domain.OFILE_ASM

OFILE_DIF = _ida_domain.OFILE_DIF


def gen_file(otype: "ofile_type_t", fp: "FILE *", ea1: "ea_t", ea2: "ea_t", flags: "int") -> "int":
    r"""gen_file(otype, fp, ea1, ea2, flags) -> int"""
    return _ida_domain.gen_file(otype, fp, ea1, ea2, flags)
GENFLG_MAPSEG = _ida_domain.GENFLG_MAPSEG

GENFLG_MAPNAME = _ida_domain.GENFLG_MAPNAME

GENFLG_MAPDMNG = _ida_domain.GENFLG_MAPDMNG

GENFLG_MAPLOC = _ida_domain.GENFLG_MAPLOC

GENFLG_IDCTYPE = _ida_domain.GENFLG_IDCTYPE

GENFLG_ASMTYPE = _ida_domain.GENFLG_ASMTYPE

GENFLG_GENHTML = _ida_domain.GENFLG_GENHTML

GENFLG_ASMINC = _ida_domain.GENFLG_ASMINC


def file2base(li: "linput_t *", pos: "qoff64_t", ea1: "ea_t", ea2: "ea_t", patchable: "int") -> "int":
    r"""file2base(li, pos, ea1, ea2, patchable) -> int"""
    return _ida_domain.file2base(li, pos, ea1, ea2, patchable)
FILEREG_PATCHABLE = _ida_domain.FILEREG_PATCHABLE

FILEREG_NOTPATCHABLE = _ida_domain.FILEREG_NOTPATCHABLE


def base2file(fp: "FILE *", pos: "qoff64_t", ea1: "ea_t", ea2: "ea_t") -> "int":
    r"""base2file(fp, pos, ea1, ea2) -> int"""
    return _ida_domain.base2file(fp, pos, ea1, ea2)

def get_basic_file_type(li: "linput_t *") -> "filetype_t":
    r"""get_basic_file_type(li) -> filetype_t"""
    return _ida_domain.get_basic_file_type(li)

def get_file_type_name() -> "size_t":
    r"""get_file_type_name() -> size_t"""
    return _ida_domain.get_file_type_name()

def set_import_ordinal(modnode: "uval_t", ea: "ea_t", ord: "uval_t") -> "void":
    r"""set_import_ordinal(modnode, ea, ord)"""
    return _ida_domain.set_import_ordinal(modnode, ea, ord)

def set_import_name(modnode: "uval_t", ea: "ea_t", name: "char const *") -> "void":
    r"""set_import_name(modnode, ea, name)"""
    return _ida_domain.set_import_name(modnode, ea, name)

def load_ids_module(fname: "char *") -> "int":
    r"""load_ids_module(fname) -> int"""
    return _ida_domain.load_ids_module(fname)

def get_plugin_options(plugin: "char const *") -> "char const *":
    r"""get_plugin_options(plugin) -> char const *"""
    return _ida_domain.get_plugin_options(plugin)
PLUGIN_DLL = _ida_domain.PLUGIN_DLL

MODULE_ENTRY_LOADER = _ida_domain.MODULE_ENTRY_LOADER

MODULE_ENTRY_PLUGIN = _ida_domain.MODULE_ENTRY_PLUGIN

MODULE_ENTRY_IDP = _ida_domain.MODULE_ENTRY_IDP

class idp_name_t(object):
    r"""Proxy of C++ idp_name_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lname: "qstring" = property(_ida_domain.idp_name_t_lname_get, _ida_domain.idp_name_t_lname_set, doc=r"""lname""")
    sname: "qstring" = property(_ida_domain.idp_name_t_sname_get, _ida_domain.idp_name_t_sname_set, doc=r"""sname""")
    hidden: "bool" = property(_ida_domain.idp_name_t_hidden_get, _ida_domain.idp_name_t_hidden_set, doc=r"""hidden""")

    def __init__(self):
        r"""__init__(self) -> idp_name_t"""
        _ida_domain.idp_name_t_swiginit(self, _ida_domain.new_idp_name_t())
    __swig_destroy__ = _ida_domain.delete_idp_name_t

# Register idp_name_t in _ida_domain:
_ida_domain.idp_name_t_swigregister(idp_name_t)
class idp_desc_t(object):
    r"""Proxy of C++ idp_desc_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    path: "qstring" = property(_ida_domain.idp_desc_t_path_get, _ida_domain.idp_desc_t_path_set, doc=r"""path""")
    mtime: "time_t" = property(_ida_domain.idp_desc_t_mtime_get, _ida_domain.idp_desc_t_mtime_set, doc=r"""mtime""")
    family: "qstring" = property(_ida_domain.idp_desc_t_family_get, _ida_domain.idp_desc_t_family_set, doc=r"""family""")
    names: "idp_names_t" = property(_ida_domain.idp_desc_t_names_get, _ida_domain.idp_desc_t_names_set, doc=r"""names""")
    is_script: "bool" = property(_ida_domain.idp_desc_t_is_script_get, _ida_domain.idp_desc_t_is_script_set, doc=r"""is_script""")
    checked: "bool" = property(_ida_domain.idp_desc_t_checked_get, _ida_domain.idp_desc_t_checked_set, doc=r"""checked""")

    def __init__(self):
        r"""__init__(self) -> idp_desc_t"""
        _ida_domain.idp_desc_t_swiginit(self, _ida_domain.new_idp_desc_t())
    __swig_destroy__ = _ida_domain.delete_idp_desc_t

# Register idp_desc_t in _ida_domain:
_ida_domain.idp_desc_t_swigregister(idp_desc_t)
IDP_DLL = _ida_domain.IDP_DLL

class plugin_info_t(object):
    r"""Proxy of C++ plugin_info_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __next__: "plugin_info_t *" = property(_ida_domain.plugin_info_t___next___get, _ida_domain.plugin_info_t___next___set, doc=r"""__next__""")
    path: "char *" = property(_ida_domain.plugin_info_t_path_get, _ida_domain.plugin_info_t_path_set, doc=r"""path""")
    org_name: "char *" = property(_ida_domain.plugin_info_t_org_name_get, _ida_domain.plugin_info_t_org_name_set, doc=r"""org_name""")
    name: "char *" = property(_ida_domain.plugin_info_t_name_get, _ida_domain.plugin_info_t_name_set, doc=r"""name""")
    org_hotkey: "ushort" = property(_ida_domain.plugin_info_t_org_hotkey_get, _ida_domain.plugin_info_t_org_hotkey_set, doc=r"""org_hotkey""")
    hotkey: "ushort" = property(_ida_domain.plugin_info_t_hotkey_get, _ida_domain.plugin_info_t_hotkey_set, doc=r"""hotkey""")
    arg: "size_t" = property(_ida_domain.plugin_info_t_arg_get, _ida_domain.plugin_info_t_arg_set, doc=r"""arg""")
    entry: "plugin_t *" = property(_ida_domain.plugin_info_t_entry_get, _ida_domain.plugin_info_t_entry_set, doc=r"""entry""")
    dllmem: "idadll_t" = property(_ida_domain.plugin_info_t_dllmem_get, _ida_domain.plugin_info_t_dllmem_set, doc=r"""dllmem""")
    flags: "int" = property(_ida_domain.plugin_info_t_flags_get, _ida_domain.plugin_info_t_flags_set, doc=r"""flags""")
    comment: "char *" = property(_ida_domain.plugin_info_t_comment_get, _ida_domain.plugin_info_t_comment_set, doc=r"""comment""")
    idaplg_name: "qstring" = property(_ida_domain.plugin_info_t_idaplg_name_get, _ida_domain.plugin_info_t_idaplg_name_set, doc=r"""idaplg_name""")

    def __init__(self):
        r"""__init__(self) -> plugin_info_t"""
        _ida_domain.plugin_info_t_swiginit(self, _ida_domain.new_plugin_info_t())
    __swig_destroy__ = _ida_domain.delete_plugin_info_t

# Register plugin_info_t in _ida_domain:
_ida_domain.plugin_info_t_swigregister(plugin_info_t)

def find_plugin(name: "char const *", load_if_needed: "bool"=False) -> "plugin_t *":
    r"""find_plugin(name, load_if_needed=False) -> plugin_t"""
    return _ida_domain.find_plugin(name, load_if_needed)

def get_fileregion_offset(ea: "ea_t") -> "qoff64_t":
    r"""get_fileregion_offset(ea) -> qoff64_t"""
    return _ida_domain.get_fileregion_offset(ea)

def get_fileregion_ea(offset: "qoff64_t") -> "ea_t":
    r"""get_fileregion_ea(offset) -> ea_t"""
    return _ida_domain.get_fileregion_ea(offset)

def gen_exe_file(fp: "FILE *") -> "int":
    r"""gen_exe_file(fp) -> int"""
    return _ida_domain.gen_exe_file(fp)

def reload_file(file: "char const *", is_remote: "bool") -> "bool":
    r"""reload_file(file, is_remote) -> bool"""
    return _ida_domain.reload_file(file, is_remote)
MAX_DATABASE_DESCRIPTION = _ida_domain.MAX_DATABASE_DESCRIPTION

class snapshot_t(object):
    r"""Proxy of C++ snapshot_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id: "qtime64_t" = property(_ida_domain.snapshot_t_id_get, _ida_domain.snapshot_t_id_set, doc=r"""id""")
    flags: "uint16" = property(_ida_domain.snapshot_t_flags_get, _ida_domain.snapshot_t_flags_set, doc=r"""flags""")
    desc: "char [128]" = property(_ida_domain.snapshot_t_desc_get, _ida_domain.snapshot_t_desc_set, doc=r"""desc""")
    filename: "char [QMAXPATH]" = property(_ida_domain.snapshot_t_filename_get, _ida_domain.snapshot_t_filename_set, doc=r"""filename""")
    children: "snapshots_t" = property(_ida_domain.snapshot_t_children_get, _ida_domain.snapshot_t_children_set, doc=r"""children""")

    def __eq__(self, r: "snapshot_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.snapshot_t___eq__(self, r)

    def __ne__(self, r: "snapshot_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.snapshot_t___ne__(self, r)

    def __lt__(self, r: "snapshot_t") -> "bool":
        r"""__lt__(self, r) -> bool"""
        return _ida_domain.snapshot_t___lt__(self, r)

    def __gt__(self, r: "snapshot_t") -> "bool":
        r"""__gt__(self, r) -> bool"""
        return _ida_domain.snapshot_t___gt__(self, r)

    def __le__(self, r: "snapshot_t") -> "bool":
        r"""__le__(self, r) -> bool"""
        return _ida_domain.snapshot_t___le__(self, r)

    def __ge__(self, r: "snapshot_t") -> "bool":
        r"""__ge__(self, r) -> bool"""
        return _ida_domain.snapshot_t___ge__(self, r)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.snapshot_t_clear(self)

    def __init__(self):
        r"""__init__(self) -> snapshot_t"""
        _ida_domain.snapshot_t_swiginit(self, _ida_domain.new_snapshot_t())
    __swig_destroy__ = _ida_domain.delete_snapshot_t

# Register snapshot_t in _ida_domain:
_ida_domain.snapshot_t_swigregister(snapshot_t)
SSF_AUTOMATIC = _ida_domain.SSF_AUTOMATIC



def build_snapshot_tree(root: "snapshot_t") -> "bool":
    r"""build_snapshot_tree(root) -> bool"""
    return _ida_domain.build_snapshot_tree(root)
SSUF_DESC = _ida_domain.SSUF_DESC

SSUF_PATH = _ida_domain.SSUF_PATH

SSUF_FLAGS = _ida_domain.SSUF_FLAGS


def flush_buffers() -> "int":
    r"""flush_buffers() -> int"""
    return _ida_domain.flush_buffers()

def is_trusted_idb() -> "bool":
    r"""is_trusted_idb() -> bool"""
    return _ida_domain.is_trusted_idb()

def save_database(outfile: "char const *"=None, flags: "uint32"=-1, root: "snapshot_t"=None, attr: "snapshot_t"=None) -> "bool":
    r"""save_database(outfile=None, flags=-1, root=None, attr=None) -> bool"""
    return _ida_domain.save_database(outfile, flags, root, attr)
DBFL_KILL = _ida_domain.DBFL_KILL

DBFL_COMP = _ida_domain.DBFL_COMP

DBFL_BAK = _ida_domain.DBFL_BAK

DBFL_TEMP = _ida_domain.DBFL_TEMP


def is_database_flag(dbfl: "uint32") -> "bool":
    r"""is_database_flag(dbfl) -> bool"""
    return _ida_domain.is_database_flag(dbfl)

def set_database_flag(dbfl: "uint32", cnd: "bool"=True) -> "void":
    r"""set_database_flag(dbfl, cnd=True)"""
    return _ida_domain.set_database_flag(dbfl, cnd)

def clr_database_flag(dbfl: "uint32") -> "void":
    r"""clr_database_flag(dbfl)"""
    return _ida_domain.clr_database_flag(dbfl)
PATH_TYPE_CMD = _ida_domain.PATH_TYPE_CMD

PATH_TYPE_IDB = _ida_domain.PATH_TYPE_IDB

PATH_TYPE_ID0 = _ida_domain.PATH_TYPE_ID0


def get_path(pt: "path_type_t") -> "char const *":
    r"""get_path(pt) -> char const *"""
    return _ida_domain.get_path(pt)

def set_path(pt: "path_type_t", path: "char const *") -> "void":
    r"""set_path(pt, path)"""
    return _ida_domain.set_path(pt, path)

def get_elf_debug_file_directory() -> "char const *":
    r"""get_elf_debug_file_directory() -> char const *"""
    return _ida_domain.get_elf_debug_file_directory()

def mem2base(mem: "PyObject *", ea: "ea_t", fpos: "qoff64_t"=-1) -> "int":
    r"""mem2base(mem, ea, fpos=-1) -> int"""
    return _ida_domain.mem2base(mem, ea, fpos)

def load_plugin(name: "char const *") -> "PyObject *":
    r"""load_plugin(name) -> PyObject *"""
    return _ida_domain.load_plugin(name)

def run_plugin(plg: "PyObject *", arg: "size_t") -> "bool":
    r"""run_plugin(plg, arg) -> bool"""
    return _ida_domain.run_plugin(plg, arg)

def load_and_run_plugin(name: "char const *", arg: "size_t") -> "bool":
    r"""load_and_run_plugin(name, arg) -> bool"""
    return _ida_domain.load_and_run_plugin(name, arg)

def extract_module_from_archive(fname: "char const *", is_remote: "bool"=False) -> "PyObject *":
    r"""extract_module_from_archive(fname, is_remote=False) -> PyObject"""
    return _ida_domain.extract_module_from_archive(fname, is_remote)
class ea_name_vec_t(object):
    r"""Proxy of C++ qvector< ea_name_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> ea_name_vec_t
        __init__(self, x) -> ea_name_vec_t
        """
        _ida_domain.ea_name_vec_t_swiginit(self, _ida_domain.new_ea_name_vec_t(*args))
    __swig_destroy__ = _ida_domain.delete_ea_name_vec_t

    def push_back(self, *args) -> "ea_name_t &":
        r"""
        push_back(self, x)
        push_back(self) -> ea_name_t
        """
        return _ida_domain.ea_name_vec_t_push_back(self, *args)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.ea_name_vec_t_pop_back(self)

    def size(self) -> "size_t":
        r"""size(self) -> size_t"""
        return _ida_domain.ea_name_vec_t_size(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.ea_name_vec_t_empty(self)

    def at(self, _idx: "size_t") -> "ea_name_t const &":
        r"""at(self, _idx) -> ea_name_t"""
        return _ida_domain.ea_name_vec_t_at(self, _idx)

    def qclear(self) -> "void":
        r"""qclear(self)"""
        return _ida_domain.ea_name_vec_t_qclear(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.ea_name_vec_t_clear(self)

    def resize(self, *args) -> "void":
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_domain.ea_name_vec_t_resize(self, *args)

    def grow(self, *args) -> "void":
        r"""grow(self, x=ea_name_t())"""
        return _ida_domain.ea_name_vec_t_grow(self, *args)

    def capacity(self) -> "size_t":
        r"""capacity(self) -> size_t"""
        return _ida_domain.ea_name_vec_t_capacity(self)

    def reserve(self, cnt: "size_t") -> "void":
        r"""reserve(self, cnt)"""
        return _ida_domain.ea_name_vec_t_reserve(self, cnt)

    def truncate(self) -> "void":
        r"""truncate(self)"""
        return _ida_domain.ea_name_vec_t_truncate(self)

    def swap(self, r: "ea_name_vec_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.ea_name_vec_t_swap(self, r)

    def extract(self) -> "ea_name_t *":
        r"""extract(self) -> ea_name_t"""
        return _ida_domain.ea_name_vec_t_extract(self)

    def inject(self, s: "ea_name_t", len: "size_t") -> "void":
        r"""inject(self, s, len)"""
        return _ida_domain.ea_name_vec_t_inject(self, s, len)

    def begin(self, *args) -> "qvector< ea_name_t >::const_iterator":
        r"""
        begin(self) -> ea_name_t
        begin(self) -> ea_name_t
        """
        return _ida_domain.ea_name_vec_t_begin(self, *args)

    def end(self, *args) -> "qvector< ea_name_t >::const_iterator":
        r"""
        end(self) -> ea_name_t
        end(self) -> ea_name_t
        """
        return _ida_domain.ea_name_vec_t_end(self, *args)

    def insert(self, it: "ea_name_t", x: "ea_name_t") -> "qvector< ea_name_t >::iterator":
        r"""insert(self, it, x) -> ea_name_t"""
        return _ida_domain.ea_name_vec_t_insert(self, it, x)

    def erase(self, *args) -> "qvector< ea_name_t >::iterator":
        r"""
        erase(self, it) -> ea_name_t
        erase(self, first, last) -> ea_name_t
        """
        return _ida_domain.ea_name_vec_t_erase(self, *args)

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.ea_name_vec_t___len__(self)

    def __getitem__(self, i: "size_t") -> "ea_name_t const &":
        r"""__getitem__(self, i) -> ea_name_t"""
        return _ida_domain.ea_name_vec_t___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "ea_name_t") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.ea_name_vec_t___setitem__(self, i, v)

    def append(self, x: "ea_name_t") -> "void":
        r"""append(self, x)"""
        return _ida_domain.ea_name_vec_t_append(self, x)

    def extend(self, x: "ea_name_vec_t") -> "void":
        r"""extend(self, x)"""
        return _ida_domain.ea_name_vec_t_extend(self, x)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register ea_name_vec_t in _ida_domain:
_ida_domain.ea_name_vec_t_swigregister(ea_name_vec_t)

def get_name(ea: "ea_t") -> "qstring":
    r"""get_name(ea) -> qstring"""
    return _ida_domain.get_name(ea)

def get_colored_name(ea: "ea_t") -> "qstring":
    r"""get_colored_name(ea) -> qstring"""
    return _ida_domain.get_colored_name(ea)
MAXNAMELEN = _ida_domain.MAXNAMELEN

FUNC_IMPORT_PREFIX = _ida_domain.FUNC_IMPORT_PREFIX


def set_name(ea: "ea_t", name: "char const *", flags: "int"=0) -> "bool":
    r"""set_name(ea, name, flags=0) -> bool"""
    return _ida_domain.set_name(ea, name, flags)
SN_CHECK = _ida_domain.SN_CHECK

SN_NOCHECK = _ida_domain.SN_NOCHECK

SN_PUBLIC = _ida_domain.SN_PUBLIC

SN_NON_PUBLIC = _ida_domain.SN_NON_PUBLIC

SN_WEAK = _ida_domain.SN_WEAK

SN_NON_WEAK = _ida_domain.SN_NON_WEAK

SN_AUTO = _ida_domain.SN_AUTO

SN_NON_AUTO = _ida_domain.SN_NON_AUTO

SN_NOLIST = _ida_domain.SN_NOLIST

SN_NOWARN = _ida_domain.SN_NOWARN

SN_LOCAL = _ida_domain.SN_LOCAL

SN_IDBENC = _ida_domain.SN_IDBENC

SN_FORCE = _ida_domain.SN_FORCE

SN_NODUMMY = _ida_domain.SN_NODUMMY

SN_DELTAIL = _ida_domain.SN_DELTAIL


def force_name(ea: "ea_t", name: "char const *", flags: "int"=0) -> "bool":
    r"""force_name(ea, name, flags=0) -> bool"""
    return _ida_domain.force_name(ea, name, flags)

def del_global_name(ea: "ea_t") -> "bool":
    r"""del_global_name(ea) -> bool"""
    return _ida_domain.del_global_name(ea)

def del_local_name(ea: "ea_t") -> "bool":
    r"""del_local_name(ea) -> bool"""
    return _ida_domain.del_local_name(ea)

def set_dummy_name(frm: "ea_t", ea: "ea_t") -> "bool":
    r"""set_dummy_name(frm, ea) -> bool"""
    return _ida_domain.set_dummy_name(frm, ea)

def make_name_auto(ea: "ea_t") -> "bool":
    r"""make_name_auto(ea) -> bool"""
    return _ida_domain.make_name_auto(ea)

def make_name_user(ea: "ea_t") -> "bool":
    r"""make_name_user(ea) -> bool"""
    return _ida_domain.make_name_user(ea)
UCDR_STRLIT = _ida_domain.UCDR_STRLIT

UCDR_NAME = _ida_domain.UCDR_NAME

UCDR_MANGLED = _ida_domain.UCDR_MANGLED

UCDR_TYPE = _ida_domain.UCDR_TYPE

VNT_IDENT = _ida_domain.VNT_IDENT

VNT_TYPE = _ida_domain.VNT_TYPE

VNT_UDTMEM = _ida_domain.VNT_UDTMEM

VNT_STRLIT = _ida_domain.VNT_STRLIT

VNT_VISIBLE = _ida_domain.VNT_VISIBLE


def is_valid_cp(cp: "wchar32_t", kind: "nametype_t", data: "void *"=None) -> "bool":
    r"""is_valid_cp(cp, kind, data=None) -> bool"""
    return _ida_domain.is_valid_cp(cp, kind, data)

def set_cp_validity(*args) -> "void":
    r"""set_cp_validity(kind, cp, endcp=wchar32_t(-1), valid=True)"""
    return _ida_domain.set_cp_validity(*args)

def get_cp_validity(*args) -> "bool":
    r"""get_cp_validity(kind, cp, endcp=wchar32_t(-1)) -> bool"""
    return _ida_domain.get_cp_validity(*args)

def is_ident_cp(cp: "wchar32_t") -> "bool":
    r"""is_ident_cp(cp) -> bool"""
    return _ida_domain.is_ident_cp(cp)

def is_strlit_cp(cp: "wchar32_t", specific_ranges: "rangeset_crefvec_t const *"=None) -> "bool":
    r"""is_strlit_cp(cp, specific_ranges=None) -> bool"""
    return _ida_domain.is_strlit_cp(cp, specific_ranges)

def is_visible_cp(cp: "wchar32_t") -> "bool":
    r"""is_visible_cp(cp) -> bool"""
    return _ida_domain.is_visible_cp(cp)

def is_ident(name: "char const *") -> "bool":
    r"""is_ident(name) -> bool"""
    return _ida_domain.is_ident(name)

def is_uname(name: "char const *") -> "bool":
    r"""is_uname(name) -> bool"""
    return _ida_domain.is_uname(name)

def is_valid_typename(name: "char const *") -> "bool":
    r"""is_valid_typename(name) -> bool"""
    return _ida_domain.is_valid_typename(name)

def extract_name(line: "char const *", x: "int") -> "qstring *":
    r"""extract_name(line, x) -> ssize_t"""
    return _ida_domain.extract_name(line, x)

def hide_name(ea: "ea_t") -> "void":
    r"""hide_name(ea)"""
    return _ida_domain.hide_name(ea)

def show_name(ea: "ea_t") -> "void":
    r"""show_name(ea)"""
    return _ida_domain.show_name(ea)

def get_name_ea(frm: "ea_t", name: "char const *") -> "ea_t":
    r"""get_name_ea(frm, name) -> ea_t"""
    return _ida_domain.get_name_ea(frm, name)

def get_name_base_ea(frm: "ea_t", to: "ea_t") -> "ea_t":
    r"""get_name_base_ea(frm, to) -> ea_t"""
    return _ida_domain.get_name_base_ea(frm, to)

def get_name_value(frm: "ea_t", name: "char const *") -> "uval_t *":
    r"""get_name_value(frm, name) -> int"""
    return _ida_domain.get_name_value(frm, name)
NT_NONE = _ida_domain.NT_NONE

NT_BYTE = _ida_domain.NT_BYTE

NT_LOCAL = _ida_domain.NT_LOCAL

NT_STKVAR = _ida_domain.NT_STKVAR

NT_ENUM = _ida_domain.NT_ENUM

NT_ABS = _ida_domain.NT_ABS

NT_SEG = _ida_domain.NT_SEG

NT_STROFF = _ida_domain.NT_STROFF

NT_BMASK = _ida_domain.NT_BMASK

NT_REGVAR = _ida_domain.NT_REGVAR

GN_VISIBLE = _ida_domain.GN_VISIBLE

GN_COLORED = _ida_domain.GN_COLORED

GN_DEMANGLED = _ida_domain.GN_DEMANGLED

GN_STRICT = _ida_domain.GN_STRICT

GN_SHORT = _ida_domain.GN_SHORT

GN_LONG = _ida_domain.GN_LONG

GN_LOCAL = _ida_domain.GN_LOCAL

GN_ISRET = _ida_domain.GN_ISRET

GN_NOT_ISRET = _ida_domain.GN_NOT_ISRET

GN_NOT_DUMMY = _ida_domain.GN_NOT_DUMMY


def get_visible_name(ea: "ea_t", gtn_flags: "int"=0) -> "qstring":
    r"""get_visible_name(ea, gtn_flags=0) -> qstring"""
    return _ida_domain.get_visible_name(ea, gtn_flags)

def get_short_name(ea: "ea_t", gtn_flags: "int"=0) -> "qstring":
    r"""get_short_name(ea, gtn_flags=0) -> qstring"""
    return _ida_domain.get_short_name(ea, gtn_flags)

def get_long_name(ea: "ea_t", gtn_flags: "int"=0) -> "qstring":
    r"""get_long_name(ea, gtn_flags=0) -> qstring"""
    return _ida_domain.get_long_name(ea, gtn_flags)

def get_colored_short_name(ea: "ea_t", gtn_flags: "int"=0) -> "qstring":
    r"""get_colored_short_name(ea, gtn_flags=0) -> qstring"""
    return _ida_domain.get_colored_short_name(ea, gtn_flags)

def get_colored_long_name(ea: "ea_t", gtn_flags: "int"=0) -> "qstring":
    r"""get_colored_long_name(ea, gtn_flags=0) -> qstring"""
    return _ida_domain.get_colored_long_name(ea, gtn_flags)

def get_demangled_name(ea: "ea_t", inhibitor: "int32", demform: "int", gtn_flags: "int"=0) -> "qstring":
    r"""get_demangled_name(ea, inhibitor, demform, gtn_flags=0) -> qstring"""
    return _ida_domain.get_demangled_name(ea, inhibitor, demform, gtn_flags)

def get_colored_demangled_name(ea: "ea_t", inhibitor: "int32", demform: "int", gtn_flags: "int"=0) -> "qstring":
    r"""get_colored_demangled_name(ea, inhibitor, demform, gtn_flags=0) -> qstring"""
    return _ida_domain.get_colored_demangled_name(ea, inhibitor, demform, gtn_flags)

def get_name_color(frm: "ea_t", ea: "ea_t") -> "color_t":
    r"""get_name_color(frm, ea) -> color_t"""
    return _ida_domain.get_name_color(frm, ea)
GETN_APPZERO = _ida_domain.GETN_APPZERO

GETN_NOFIXUP = _ida_domain.GETN_NOFIXUP

GETN_NODUMMY = _ida_domain.GETN_NODUMMY


def get_name_expr(frm: "ea_t", n: "int", ea: "ea_t", off: "uval_t", flags: "int"=1) -> "qstring *":
    r"""get_name_expr(frm, n, ea, off, flags=1) -> ssize_t"""
    return _ida_domain.get_name_expr(frm, n, ea, off, flags)

def get_nice_colored_name(ea: "ea_t", flags: "int"=0) -> "qstring *":
    r"""get_nice_colored_name(ea, flags=0) -> ssize_t"""
    return _ida_domain.get_nice_colored_name(ea, flags)
GNCN_NOSEG = _ida_domain.GNCN_NOSEG

GNCN_NOCOLOR = _ida_domain.GNCN_NOCOLOR

GNCN_NOLABEL = _ida_domain.GNCN_NOLABEL

GNCN_NOFUNC = _ida_domain.GNCN_NOFUNC

GNCN_SEG_FUNC = _ida_domain.GNCN_SEG_FUNC

GNCN_SEGNUM = _ida_domain.GNCN_SEGNUM

GNCN_REQFUNC = _ida_domain.GNCN_REQFUNC

GNCN_REQNAME = _ida_domain.GNCN_REQNAME

GNCN_NODBGNM = _ida_domain.GNCN_NODBGNM

GNCN_PREFDBG = _ida_domain.GNCN_PREFDBG


def append_struct_fields(disp: "adiff_t *", n: "int", path: "tid_t const *", flags: "flags64_t", delta: "adiff_t", appzero: "bool") -> "qstring *, adiff_t *":
    r"""append_struct_fields(disp, n, path, flags, delta, appzero) -> flags64_t"""
    return _ida_domain.append_struct_fields(disp, n, path, flags, delta, appzero)

def is_public_name(ea: "ea_t") -> "bool":
    r"""is_public_name(ea) -> bool"""
    return _ida_domain.is_public_name(ea)

def make_name_public(ea: "ea_t") -> "void":
    r"""make_name_public(ea)"""
    return _ida_domain.make_name_public(ea)

def make_name_non_public(ea: "ea_t") -> "void":
    r"""make_name_non_public(ea)"""
    return _ida_domain.make_name_non_public(ea)

def is_weak_name(ea: "ea_t") -> "bool":
    r"""is_weak_name(ea) -> bool"""
    return _ida_domain.is_weak_name(ea)

def make_name_weak(ea: "ea_t") -> "void":
    r"""make_name_weak(ea)"""
    return _ida_domain.make_name_weak(ea)

def make_name_non_weak(ea: "ea_t") -> "void":
    r"""make_name_non_weak(ea)"""
    return _ida_domain.make_name_non_weak(ea)

def get_nlist_size() -> "size_t":
    r"""get_nlist_size() -> size_t"""
    return _ida_domain.get_nlist_size()

def get_nlist_idx(ea: "ea_t") -> "size_t":
    r"""get_nlist_idx(ea) -> size_t"""
    return _ida_domain.get_nlist_idx(ea)

def is_in_nlist(ea: "ea_t") -> "bool":
    r"""is_in_nlist(ea) -> bool"""
    return _ida_domain.is_in_nlist(ea)

def get_nlist_ea(idx: "size_t") -> "ea_t":
    r"""get_nlist_ea(idx) -> ea_t"""
    return _ida_domain.get_nlist_ea(idx)

def get_nlist_name(idx: "size_t") -> "char const *":
    r"""get_nlist_name(idx) -> char const *"""
    return _ida_domain.get_nlist_name(idx)

def rebuild_nlist() -> "void":
    r"""rebuild_nlist()"""
    return _ida_domain.rebuild_nlist()

def reorder_dummy_names() -> "void":
    r"""reorder_dummy_names()"""
    return _ida_domain.reorder_dummy_names()
DEBNAME_EXACT = _ida_domain.DEBNAME_EXACT

DEBNAME_LOWER = _ida_domain.DEBNAME_LOWER

DEBNAME_UPPER = _ida_domain.DEBNAME_UPPER

DEBNAME_NICE = _ida_domain.DEBNAME_NICE

class ea_name_t(object):
    r"""Proxy of C++ ea_name_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ea: "ea_t" = property(_ida_domain.ea_name_t_ea_get, _ida_domain.ea_name_t_ea_set, doc=r"""ea""")
    name: "qstring" = property(_ida_domain.ea_name_t_name_get, _ida_domain.ea_name_t_name_set, doc=r"""name""")

    def __init__(self, *args):
        r"""
        __init__(self) -> ea_name_t
        __init__(self, _ea, _name) -> ea_name_t
        """
        _ida_domain.ea_name_t_swiginit(self, _ida_domain.new_ea_name_t(*args))
    __swig_destroy__ = _ida_domain.delete_ea_name_t

# Register ea_name_t in _ida_domain:
_ida_domain.ea_name_t_swigregister(ea_name_t)

def set_debug_name(ea: "ea_t", name: "char const *") -> "bool":
    r"""set_debug_name(ea, name) -> bool"""
    return _ida_domain.set_debug_name(ea, name)

def get_debug_name(ea_ptr: "ea_t *", how: "debug_name_how_t") -> "qstring *":
    r"""get_debug_name(ea_ptr, how) -> ssize_t"""
    return _ida_domain.get_debug_name(ea_ptr, how)

def del_debug_names(ea1: "ea_t", ea2: "ea_t") -> "void":
    r"""del_debug_names(ea1, ea2)"""
    return _ida_domain.del_debug_names(ea1, ea2)

def get_debug_name_ea(name: "char const *") -> "ea_t":
    r"""get_debug_name_ea(name) -> ea_t"""
    return _ida_domain.get_debug_name_ea(name)
DQT_NPURGED_8 = _ida_domain.DQT_NPURGED_8

DQT_NPURGED_4 = _ida_domain.DQT_NPURGED_4

DQT_NPURGED_2 = _ida_domain.DQT_NPURGED_2

DQT_COMPILER = _ida_domain.DQT_COMPILER

DQT_NAME_TYPE = _ida_domain.DQT_NAME_TYPE

DQT_FULL = _ida_domain.DQT_FULL


def demangle_name(name: "char const *", disable_mask: "uint32", demreq: "demreq_type_t"=DQT_FULL) -> "qstring *":
    r"""demangle_name(name, disable_mask, demreq=DQT_FULL) -> int32"""
    return _ida_domain.demangle_name(name, disable_mask, demreq)

def is_name_defined_locally(*args) -> "bool":
    r"""is_name_defined_locally(pfn, name, ignore_name_def, ea1=BADADDR, ea2=BADADDR) -> bool"""
    return _ida_domain.is_name_defined_locally(*args)

def cleanup_name(ea: "ea_t", name: "char const *", flags: "uint32"=0) -> "qstring *":
    r"""cleanup_name(ea, name, flags=0) -> bool"""
    return _ida_domain.cleanup_name(ea, name, flags)
CN_KEEP_TRAILING_DIGITS = _ida_domain.CN_KEEP_TRAILING_DIGITS

CN_KEEP_UNDERSCORES = _ida_domain.CN_KEEP_UNDERSCORES

ME_INTERR = _ida_domain.ME_INTERR

ME_PARAMERR = _ida_domain.ME_PARAMERR

ME_ILLSTR = _ida_domain.ME_ILLSTR

ME_SMALLANS = _ida_domain.ME_SMALLANS

ME_FRAME = _ida_domain.ME_FRAME

ME_NOCOMP = _ida_domain.ME_NOCOMP

ME_ERRAUTO = _ida_domain.ME_ERRAUTO

ME_NOHASHMEM = _ida_domain.ME_NOHASHMEM

ME_NOSTRMEM = _ida_domain.ME_NOSTRMEM

ME_NOERROR_LIMIT = _ida_domain.ME_NOERROR_LIMIT

M_PRCMSK = _ida_domain.M_PRCMSK

MT_DEFAULT = _ida_domain.MT_DEFAULT

MT_CDECL = _ida_domain.MT_CDECL

MT_PASCAL = _ida_domain.MT_PASCAL

MT_STDCALL = _ida_domain.MT_STDCALL

MT_FASTCALL = _ida_domain.MT_FASTCALL

MT_THISCALL = _ida_domain.MT_THISCALL

MT_FORTRAN = _ida_domain.MT_FORTRAN

MT_SYSCALL = _ida_domain.MT_SYSCALL

MT_INTERRUPT = _ida_domain.MT_INTERRUPT

MT_MSFASTCALL = _ida_domain.MT_MSFASTCALL

MT_CLRCALL = _ida_domain.MT_CLRCALL

MT_DMDCALL = _ida_domain.MT_DMDCALL

MT_VECTORCALL = _ida_domain.MT_VECTORCALL

MT_REGCALL = _ida_domain.MT_REGCALL

MT_LOCALNAME = _ida_domain.MT_LOCALNAME

M_SAVEREGS = _ida_domain.M_SAVEREGS

M_CLASS = _ida_domain.M_CLASS

MT_PUBLIC = _ida_domain.MT_PUBLIC

MT_PRIVATE = _ida_domain.MT_PRIVATE

MT_PROTECT = _ida_domain.MT_PROTECT

MT_MEMBER = _ida_domain.MT_MEMBER

MT_VTABLE = _ida_domain.MT_VTABLE

MT_RTTI = _ida_domain.MT_RTTI

M_PARMSK = _ida_domain.M_PARMSK

MT_PARSHF = _ida_domain.MT_PARSHF

MT_PARMAX = _ida_domain.MT_PARMAX

M_ELLIPSIS = _ida_domain.M_ELLIPSIS

MT_VOIDARG = _ida_domain.MT_VOIDARG

M_STATIC = _ida_domain.M_STATIC

M_VIRTUAL = _ida_domain.M_VIRTUAL

M_AUTOCRT = _ida_domain.M_AUTOCRT

M_TYPMASK = _ida_domain.M_TYPMASK

MT_OPERAT = _ida_domain.MT_OPERAT

MT_CONSTR = _ida_domain.MT_CONSTR

MT_DESTR = _ida_domain.MT_DESTR

MT_CASTING = _ida_domain.MT_CASTING

MT_CLRCDTOR = _ida_domain.MT_CLRCDTOR

M_TRUNCATE = _ida_domain.M_TRUNCATE

M_THUNK = _ida_domain.M_THUNK

M_ANONNSP = _ida_domain.M_ANONNSP

M_TMPLNAM = _ida_domain.M_TMPLNAM

M_DBGNAME = _ida_domain.M_DBGNAME

M_COMPILER = _ida_domain.M_COMPILER

MT_MSCOMP = _ida_domain.MT_MSCOMP

MT_BORLAN = _ida_domain.MT_BORLAN

MT_WATCOM = _ida_domain.MT_WATCOM

MT_OTHER = _ida_domain.MT_OTHER

MT_GNU = _ida_domain.MT_GNU

MT_GCC3 = _ida_domain.MT_GCC3

MT_VISAGE = _ida_domain.MT_VISAGE

MNG_PTRMSK = _ida_domain.MNG_PTRMSK

MNG_DEFNEAR = _ida_domain.MNG_DEFNEAR

MNG_DEFNEARANY = _ida_domain.MNG_DEFNEARANY

MNG_DEFFAR = _ida_domain.MNG_DEFFAR

MNG_NOPTRTYP16 = _ida_domain.MNG_NOPTRTYP16

MNG_DEFHUGE = _ida_domain.MNG_DEFHUGE

MNG_DEFPTR64 = _ida_domain.MNG_DEFPTR64

MNG_DEFNONE = _ida_domain.MNG_DEFNONE

MNG_NOPTRTYP = _ida_domain.MNG_NOPTRTYP

MNG_NODEFINIT = _ida_domain.MNG_NODEFINIT

MNG_NOUNDERSCORE = _ida_domain.MNG_NOUNDERSCORE

MNG_NOTYPE = _ida_domain.MNG_NOTYPE

MNG_NORETTYPE = _ida_domain.MNG_NORETTYPE

MNG_NOBASEDT = _ida_domain.MNG_NOBASEDT

MNG_NOCALLC = _ida_domain.MNG_NOCALLC

MNG_NOPOSTFC = _ida_domain.MNG_NOPOSTFC

MNG_NOSCTYP = _ida_domain.MNG_NOSCTYP

MNG_NOTHROW = _ida_domain.MNG_NOTHROW

MNG_NOSTVIR = _ida_domain.MNG_NOSTVIR

MNG_NOECSU = _ida_domain.MNG_NOECSU

MNG_NOCSVOL = _ida_domain.MNG_NOCSVOL

MNG_NOCLOSUR = _ida_domain.MNG_NOCLOSUR

MNG_NOUNALG = _ida_domain.MNG_NOUNALG

MNG_NOMANAGE = _ida_domain.MNG_NOMANAGE

MNG_NOMODULE = _ida_domain.MNG_NOMODULE

MNG_SHORT_S = _ida_domain.MNG_SHORT_S

MNG_SHORT_U = _ida_domain.MNG_SHORT_U

MNG_ZPT_SPACE = _ida_domain.MNG_ZPT_SPACE

MNG_DROP_IMP = _ida_domain.MNG_DROP_IMP

MNG_IGN_ANYWAY = _ida_domain.MNG_IGN_ANYWAY

MNG_IGN_JMP = _ida_domain.MNG_IGN_JMP

MNG_MOVE_JMP = _ida_domain.MNG_MOVE_JMP

MNG_COMPILER_MSK = _ida_domain.MNG_COMPILER_MSK

MNG_SHORT_FORM = _ida_domain.MNG_SHORT_FORM

MNG_LONG_FORM = _ida_domain.MNG_LONG_FORM

MNG_CALC_VALID = _ida_domain.MNG_CALC_VALID


def get_mangled_name_type(name: "char const *") -> "mangled_name_type_t":
    r"""get_mangled_name_type(name) -> mangled_name_type_t"""
    return _ida_domain.get_mangled_name_type(name)

def get_debug_names(*args) -> "PyObject *":
    r"""
    get_debug_names(names, ea1, ea2)
    get_debug_names(ea1, ea2, return_list=False) -> PyObject
    """
    return _ida_domain.get_debug_names(*args)

def get_ea_name(ea: "ea_t", gtn_flags: "int"=0) -> "qstring":
    r"""get_ea_name(ea, gtn_flags=0) -> qstring"""
    return _ida_domain.get_ea_name(ea, gtn_flags)

def validate_name(name: "char const *", type: "nametype_t", flags: "int"=1) -> "PyObject *":
    r"""validate_name(name, type, flags=1) -> PyObject"""
    return _ida_domain.validate_name(name, type, flags)

#<pycode(py_name)>
import _ida_idaapi
import _ida_funcs
import bisect


class NearestName(object):
    """
    Utility class to help find the nearest name in a given ea/name dictionary
    """
    def __init__(self, ea_names):
        self.update(ea_names)


    def update(self, ea_names):
        """Updates the ea/names map"""
        self._names = ea_names
        self._addrs = list(ea_names.keys())
        self._addrs.sort()


    def find(self, ea):
        """
        Returns a tupple (ea, name, pos) that is the nearest to the passed ea
        If no name is matched then None is returned
        """
        pos = bisect.bisect_left(self._addrs, ea)
# no match
        if pos >= len(self._addrs):
            return None
# exact match?
        if self._addrs[pos] != ea:
            pos -= 1 # go to previous element
        if pos < 0:
            return None
        return self[pos]


    def _get_item(self, index):
        ea = self._addrs[index]
        return (ea, self._names[ea], index)


    def __iter__(self):
        return (self._get_item(index) for index in range(0, len(self._addrs)))


    def __getitem__(self, index):
        """Returns the tupple (ea, name, index)"""
        if index > len(self._addrs):
            raise StopIteration
        return self._get_item(index)

def calc_gtn_flags(fromaddr, ea):
    """
    Calculate flags for get_ea_name() function

    @param fromaddr: the referring address. May be BADADDR.
    @param ea: linear address

    @return: flags
    """
    gtn_flags = 0
    if fromaddr != _ida_idaapi.BADADDR:
        pfn = _ida_funcs.get_func(fromaddr)
        if _ida_funcs.func_contains(pfn, ea):
            gtn_flags = GN_LOCAL
    return gtn_flags

#</pycode(py_name)>


def get_entry_qty() -> "size_t":
    r"""get_entry_qty() -> size_t"""
    return _ida_domain.get_entry_qty()
AEF_UTF8 = _ida_domain.AEF_UTF8

AEF_IDBENC = _ida_domain.AEF_IDBENC

AEF_NODUMMY = _ida_domain.AEF_NODUMMY


def add_entry(ord: "uval_t", ea: "ea_t", name: "char const *", makecode: "bool", flags: "int"=0) -> "bool":
    r"""add_entry(ord, ea, name, makecode, flags=0) -> bool"""
    return _ida_domain.add_entry(ord, ea, name, makecode, flags)

def get_entry_ordinal(idx: "size_t") -> "uval_t":
    r"""get_entry_ordinal(idx) -> uval_t"""
    return _ida_domain.get_entry_ordinal(idx)

def get_entry(ord: "uval_t") -> "ea_t":
    r"""get_entry(ord) -> ea_t"""
    return _ida_domain.get_entry(ord)

def get_entry_name(ord: "uval_t") -> "qstring *":
    r"""get_entry_name(ord) -> ssize_t"""
    return _ida_domain.get_entry_name(ord)

def rename_entry(ord: "uval_t", name: "char const *", flags: "int"=0) -> "bool":
    r"""rename_entry(ord, name, flags=0) -> bool"""
    return _ida_domain.rename_entry(ord, name, flags)

def set_entry_forwarder(ord: "uval_t", name: "char const *", flags: "int"=0) -> "bool":
    r"""set_entry_forwarder(ord, name, flags=0) -> bool"""
    return _ida_domain.set_entry_forwarder(ord, name, flags)

def get_entry_forwarder(ord: "uval_t") -> "qstring *":
    r"""get_entry_forwarder(ord) -> ssize_t"""
    return _ida_domain.get_entry_forwarder(ord)
FIXUP_OFF8 = _ida_domain.FIXUP_OFF8

FIXUP_OFF16 = _ida_domain.FIXUP_OFF16

FIXUP_SEG16 = _ida_domain.FIXUP_SEG16

FIXUP_PTR16 = _ida_domain.FIXUP_PTR16

FIXUP_OFF32 = _ida_domain.FIXUP_OFF32

FIXUP_PTR32 = _ida_domain.FIXUP_PTR32

FIXUP_HI8 = _ida_domain.FIXUP_HI8

FIXUP_HI16 = _ida_domain.FIXUP_HI16

FIXUP_LOW8 = _ida_domain.FIXUP_LOW8

FIXUP_LOW16 = _ida_domain.FIXUP_LOW16

V695_FIXUP_VHIGH = _ida_domain.V695_FIXUP_VHIGH

V695_FIXUP_VLOW = _ida_domain.V695_FIXUP_VLOW

FIXUP_OFF64 = _ida_domain.FIXUP_OFF64

FIXUP_OFF8S = _ida_domain.FIXUP_OFF8S

FIXUP_OFF16S = _ida_domain.FIXUP_OFF16S

FIXUP_OFF32S = _ida_domain.FIXUP_OFF32S

FIXUP_CUSTOM = _ida_domain.FIXUP_CUSTOM


def is_fixup_custom(type: "fixup_type_t") -> "bool":
    r"""is_fixup_custom(type) -> bool"""
    return _ida_domain.is_fixup_custom(type)
FIXUPF_REL = _ida_domain.FIXUPF_REL

FIXUPF_EXTDEF = _ida_domain.FIXUPF_EXTDEF

FIXUPF_UNUSED = _ida_domain.FIXUPF_UNUSED

FIXUPF_CREATED = _ida_domain.FIXUPF_CREATED

FIXUPF_LOADER_MASK = _ida_domain.FIXUPF_LOADER_MASK

class fixup_data_t(object):
    r"""Proxy of C++ fixup_data_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sel: "sel_t" = property(_ida_domain.fixup_data_t_sel_get, _ida_domain.fixup_data_t_sel_set, doc=r"""sel""")
    off: "ea_t" = property(_ida_domain.fixup_data_t_off_get, _ida_domain.fixup_data_t_off_set, doc=r"""off""")
    displacement: "adiff_t" = property(_ida_domain.fixup_data_t_displacement_get, _ida_domain.fixup_data_t_displacement_set, doc=r"""displacement""")

    def __init__(self, *args):
        r"""
        __init__(self) -> fixup_data_t
        __init__(self, type_, flags_=0) -> fixup_data_t
        """
        _ida_domain.fixup_data_t_swiginit(self, _ida_domain.new_fixup_data_t(*args))

    def get_type(self) -> "fixup_type_t":
        r"""get_type(self) -> fixup_type_t"""
        return _ida_domain.fixup_data_t_get_type(self)

    def set_type(self, type_: "fixup_type_t") -> "void":
        r"""set_type(self, type_)"""
        return _ida_domain.fixup_data_t_set_type(self, type_)

    def set_type_and_flags(self, type_: "fixup_type_t", flags_: "uint32"=0) -> "void":
        r"""set_type_and_flags(self, type_, flags_=0)"""
        return _ida_domain.fixup_data_t_set_type_and_flags(self, type_, flags_)

    def is_custom(self) -> "bool":
        r"""is_custom(self) -> bool"""
        return _ida_domain.fixup_data_t_is_custom(self)

    def get_flags(self) -> "uint32":
        r"""get_flags(self) -> uint32"""
        return _ida_domain.fixup_data_t_get_flags(self)

    def is_extdef(self) -> "bool":
        r"""is_extdef(self) -> bool"""
        return _ida_domain.fixup_data_t_is_extdef(self)

    def set_extdef(self) -> "void":
        r"""set_extdef(self)"""
        return _ida_domain.fixup_data_t_set_extdef(self)

    def clr_extdef(self) -> "void":
        r"""clr_extdef(self)"""
        return _ida_domain.fixup_data_t_clr_extdef(self)

    def is_unused(self) -> "bool":
        r"""is_unused(self) -> bool"""
        return _ida_domain.fixup_data_t_is_unused(self)

    def set_unused(self) -> "void":
        r"""set_unused(self)"""
        return _ida_domain.fixup_data_t_set_unused(self)

    def clr_unused(self) -> "void":
        r"""clr_unused(self)"""
        return _ida_domain.fixup_data_t_clr_unused(self)

    def has_base(self) -> "bool":
        r"""has_base(self) -> bool"""
        return _ida_domain.fixup_data_t_has_base(self)

    def was_created(self) -> "bool":
        r"""was_created(self) -> bool"""
        return _ida_domain.fixup_data_t_was_created(self)

    def get_base(self) -> "ea_t":
        r"""get_base(self) -> ea_t"""
        return _ida_domain.fixup_data_t_get_base(self)

    def set_base(self, new_base: "ea_t") -> "void":
        r"""set_base(self, new_base)"""
        return _ida_domain.fixup_data_t_set_base(self, new_base)

    def set_sel(self, seg: "segment_t") -> "void":
        r"""set_sel(self, seg)"""
        return _ida_domain.fixup_data_t_set_sel(self, seg)

    def set_target_sel(self) -> "void":
        r"""set_target_sel(self)"""
        return _ida_domain.fixup_data_t_set_target_sel(self)

    def set(self, source: "ea_t") -> "void":
        r"""set(self, source)"""
        return _ida_domain.fixup_data_t_set(self, source)

    def get(self, source: "ea_t") -> "bool":
        r"""get(self, source) -> bool"""
        return _ida_domain.fixup_data_t_get(self, source)

    def get_handler(self) -> "fixup_handler_t const *":
        r"""get_handler(self) -> fixup_handler_t const *"""
        return _ida_domain.fixup_data_t_get_handler(self)

    def get_desc(self, source: "ea_t") -> "char const *":
        r"""get_desc(self, source) -> char const *"""
        return _ida_domain.fixup_data_t_get_desc(self, source)

    def calc_size(self) -> "int":
        r"""calc_size(self) -> int"""
        return _ida_domain.fixup_data_t_calc_size(self)

    def get_value(self, ea: "ea_t") -> "uval_t":
        r"""get_value(self, ea) -> uval_t"""
        return _ida_domain.fixup_data_t_get_value(self, ea)

    def patch_value(self, ea: "ea_t") -> "bool":
        r"""patch_value(self, ea) -> bool"""
        return _ida_domain.fixup_data_t_patch_value(self, ea)
    __swig_destroy__ = _ida_domain.delete_fixup_data_t

# Register fixup_data_t in _ida_domain:
_ida_domain.fixup_data_t_swigregister(fixup_data_t)
ignore_none = cvar.ignore_none
ignore_regvar = cvar.ignore_regvar
ignore_llabel = cvar.ignore_llabel
ignore_stkvar = cvar.ignore_stkvar
ignore_glabel = cvar.ignore_glabel
MANGLED_CODE = cvar.MANGLED_CODE
MANGLED_DATA = cvar.MANGLED_DATA
MANGLED_UNKNOWN = cvar.MANGLED_UNKNOWN


def get_fixup(fd: "fixup_data_t", source: "ea_t") -> "bool":
    r"""get_fixup(fd, source) -> bool"""
    return _ida_domain.get_fixup(fd, source)

def exists_fixup(source: "ea_t") -> "bool":
    r"""exists_fixup(source) -> bool"""
    return _ida_domain.exists_fixup(source)

def set_fixup(source: "ea_t", fd: "fixup_data_t") -> "void":
    r"""set_fixup(source, fd)"""
    return _ida_domain.set_fixup(source, fd)

def del_fixup(source: "ea_t") -> "void":
    r"""del_fixup(source)"""
    return _ida_domain.del_fixup(source)

def get_first_fixup_ea() -> "ea_t":
    r"""get_first_fixup_ea() -> ea_t"""
    return _ida_domain.get_first_fixup_ea()

def get_next_fixup_ea(ea: "ea_t") -> "ea_t":
    r"""get_next_fixup_ea(ea) -> ea_t"""
    return _ida_domain.get_next_fixup_ea(ea)

def get_prev_fixup_ea(ea: "ea_t") -> "ea_t":
    r"""get_prev_fixup_ea(ea) -> ea_t"""
    return _ida_domain.get_prev_fixup_ea(ea)

def get_fixup_handler(type: "fixup_type_t") -> "fixup_handler_t const *":
    r"""get_fixup_handler(type) -> fixup_handler_t const *"""
    return _ida_domain.get_fixup_handler(type)

def get_fixup_value(ea: "ea_t", type: "fixup_type_t") -> "uval_t":
    r"""get_fixup_value(ea, type) -> uval_t"""
    return _ida_domain.get_fixup_value(ea, type)

def patch_fixup_value(ea: "ea_t", fd: "fixup_data_t") -> "bool":
    r"""patch_fixup_value(ea, fd) -> bool"""
    return _ida_domain.patch_fixup_value(ea, fd)

def get_fixup_desc(source: "ea_t", fd: "fixup_data_t") -> "fixup_data_t const &":
    r"""get_fixup_desc(source, fd) -> char const *"""
    return _ida_domain.get_fixup_desc(source, fd)

def calc_fixup_size(type: "fixup_type_t") -> "int":
    r"""calc_fixup_size(type) -> int"""
    return _ida_domain.calc_fixup_size(type)

def find_custom_fixup(name: "char const *") -> "fixup_type_t":
    r"""find_custom_fixup(name) -> fixup_type_t"""
    return _ida_domain.find_custom_fixup(name)
class fixup_info_t(object):
    r"""Proxy of C++ fixup_info_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ea: "ea_t" = property(_ida_domain.fixup_info_t_ea_get, _ida_domain.fixup_info_t_ea_set, doc=r"""ea""")
    fd: "fixup_data_t" = property(_ida_domain.fixup_info_t_fd_get, _ida_domain.fixup_info_t_fd_set, doc=r"""fd""")

    def __init__(self):
        r"""__init__(self) -> fixup_info_t"""
        _ida_domain.fixup_info_t_swiginit(self, _ida_domain.new_fixup_info_t())
    __swig_destroy__ = _ida_domain.delete_fixup_info_t

# Register fixup_info_t in _ida_domain:
_ida_domain.fixup_info_t_swigregister(fixup_info_t)

def get_fixups(out: "fixups_t *", ea: "ea_t", size: "asize_t") -> "bool":
    r"""get_fixups(out, ea, size) -> bool"""
    return _ida_domain.get_fixups(out, ea, size)

def contains_fixups(ea: "ea_t", size: "asize_t") -> "bool":
    r"""contains_fixups(ea, size) -> bool"""
    return _ida_domain.contains_fixups(ea, size)

def gen_fix_fixups(frm: "ea_t", to: "ea_t", size: "asize_t") -> "void":
    r"""gen_fix_fixups(frm, to, size)"""
    return _ida_domain.gen_fix_fixups(frm, to, size)

def handle_fixups_in_macro(ri: "refinfo_t *", ea: "ea_t", other: "fixup_type_t", macro_reft_and_flags: "uint32") -> "bool":
    r"""handle_fixups_in_macro(ri, ea, other, macro_reft_and_flags) -> bool"""
    return _ida_domain.handle_fixups_in_macro(ri, ea, other, macro_reft_and_flags)

def create_undo_point(*args) -> "bool":
    r"""
    create_undo_point(action_name, label) -> bool
    create_undo_point(bytes) -> bool
    """
    return _ida_domain.create_undo_point(*args)

def get_undo_action_label() -> "qstring *":
    r"""get_undo_action_label() -> bool"""
    return _ida_domain.get_undo_action_label()

def get_redo_action_label() -> "qstring *":
    r"""get_redo_action_label() -> bool"""
    return _ida_domain.get_redo_action_label()

def perform_undo() -> "bool":
    r"""perform_undo() -> bool"""
    return _ida_domain.perform_undo()

def perform_redo() -> "bool":
    r"""perform_redo() -> bool"""
    return _ida_domain.perform_redo()

def mark_position(ea: "ea_t", lnnum: "int", x: "short", y: "short", slot: "int32", comment: "char const *") -> "void":
    r"""mark_position(ea, lnnum, x, y, slot, comment)"""
    return _ida_domain.mark_position(ea, lnnum, x, y, slot, comment)

def get_marked_pos(slot: "int32") -> "ea_t":
    r"""get_marked_pos(slot) -> ea_t"""
    return _ida_domain.get_marked_pos(slot)

def get_mark_comment(slot: "int32") -> "PyObject *":
    r"""get_mark_comment(slot) -> PyObject *"""
    return _ida_domain.get_mark_comment(slot)

#<pycode(py_idc)>
#</pycode(py_idc)>

class idasgn_header_t(object):
    r"""Proxy of C++ idasgn_header_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    magic: "char [6]" = property(_ida_domain.idasgn_header_t_magic_get, _ida_domain.idasgn_header_t_magic_set, doc=r"""magic""")
    version: "uchar" = property(_ida_domain.idasgn_header_t_version_get, _ida_domain.idasgn_header_t_version_set, doc=r"""version""")
    processor_id: "uchar" = property(_ida_domain.idasgn_header_t_processor_id_get, _ida_domain.idasgn_header_t_processor_id_set, doc=r"""processor_id""")
    file_formats: "uint32" = property(_ida_domain.idasgn_header_t_file_formats_get, _ida_domain.idasgn_header_t_file_formats_set, doc=r"""file_formats""")
    ostype: "uint16" = property(_ida_domain.idasgn_header_t_ostype_get, _ida_domain.idasgn_header_t_ostype_set, doc=r"""ostype""")
    apptype: "uint16" = property(_ida_domain.idasgn_header_t_apptype_get, _ida_domain.idasgn_header_t_apptype_set, doc=r"""apptype""")
    flags: "uint16" = property(_ida_domain.idasgn_header_t_flags_get, _ida_domain.idasgn_header_t_flags_set, doc=r"""flags""")
    number_of_modules_v5: "uint16" = property(_ida_domain.idasgn_header_t_number_of_modules_v5_get, _ida_domain.idasgn_header_t_number_of_modules_v5_set, doc=r"""number_of_modules_v5""")
    ctype_crc: "uint16" = property(_ida_domain.idasgn_header_t_ctype_crc_get, _ida_domain.idasgn_header_t_ctype_crc_set, doc=r"""ctype_crc""")
    ctype_name: "char [12]" = property(_ida_domain.idasgn_header_t_ctype_name_get, _ida_domain.idasgn_header_t_ctype_name_set, doc=r"""ctype_name""")
    libname_length: "uchar" = property(_ida_domain.idasgn_header_t_libname_length_get, _ida_domain.idasgn_header_t_libname_length_set, doc=r"""libname_length""")
    ctype_crc_alt: "uint16" = property(_ida_domain.idasgn_header_t_ctype_crc_alt_get, _ida_domain.idasgn_header_t_ctype_crc_alt_set, doc=r"""ctype_crc_alt""")
    number_of_modules: "uint32" = property(_ida_domain.idasgn_header_t_number_of_modules_get, _ida_domain.idasgn_header_t_number_of_modules_set, doc=r"""number_of_modules""")
    pattern_length: "uint16" = property(_ida_domain.idasgn_header_t_pattern_length_get, _ida_domain.idasgn_header_t_pattern_length_set, doc=r"""pattern_length""")
    ctype_crc_3v: "uint16" = property(_ida_domain.idasgn_header_t_ctype_crc_3v_get, _ida_domain.idasgn_header_t_ctype_crc_3v_set, doc=r"""ctype_crc_3v""")

    def __init__(self):
        r"""__init__(self) -> idasgn_header_t"""
        _ida_domain.idasgn_header_t_swiginit(self, _ida_domain.new_idasgn_header_t())
    __swig_destroy__ = _ida_domain.delete_idasgn_header_t

# Register idasgn_header_t in _ida_domain:
_ida_domain.idasgn_header_t_swigregister(idasgn_header_t)
SIGN_HEADER_MAGIC = _ida_domain.SIGN_HEADER_MAGIC

SIGN_HEADER_VERSION = _ida_domain.SIGN_HEADER_VERSION

OSTYPE_MSDOS = _ida_domain.OSTYPE_MSDOS

OSTYPE_WIN = _ida_domain.OSTYPE_WIN

OSTYPE_OS2 = _ida_domain.OSTYPE_OS2

OSTYPE_NETW = _ida_domain.OSTYPE_NETW

OSTYPE_UNIX = _ida_domain.OSTYPE_UNIX

OSTYPE_OTHER = _ida_domain.OSTYPE_OTHER

APPT_CONSOLE = _ida_domain.APPT_CONSOLE

APPT_GRAPHIC = _ida_domain.APPT_GRAPHIC

APPT_PROGRAM = _ida_domain.APPT_PROGRAM

APPT_LIBRARY = _ida_domain.APPT_LIBRARY

APPT_DRIVER = _ida_domain.APPT_DRIVER

APPT_1THREAD = _ida_domain.APPT_1THREAD

APPT_MTHREAD = _ida_domain.APPT_MTHREAD

APPT_16BIT = _ida_domain.APPT_16BIT

APPT_32BIT = _ida_domain.APPT_32BIT

APPT_64BIT = _ida_domain.APPT_64BIT

LS_STARTUP = _ida_domain.LS_STARTUP

LS_CTYPE = _ida_domain.LS_CTYPE

LS_CTYPE2 = _ida_domain.LS_CTYPE2

LS_CTYPE_ALT = _ida_domain.LS_CTYPE_ALT

LS_ZIP = _ida_domain.LS_ZIP

LS_CTYPE_3V = _ida_domain.LS_CTYPE_3V



def get_idasgn_header_by_short_name(out_header: "idasgn_header_t", name: "char const *") -> "qstring *":
    r"""get_idasgn_header_by_short_name(out_header, name) -> bool"""
    return _ida_domain.get_idasgn_header_by_short_name(out_header, name)

def get_idasgn_path_by_short_name(name: "char const *") -> "qstring *":
    r"""get_idasgn_path_by_short_name(name) -> bool"""
    return _ida_domain.get_idasgn_path_by_short_name(name)

def get_default_reftype(ea: "ea_t") -> "reftype_t":
    r"""get_default_reftype(ea) -> reftype_t"""
    return _ida_domain.get_default_reftype(ea)

def op_offset_ex(ea: "ea_t", n: "int", ri: "refinfo_t const *") -> "bool":
    r"""op_offset_ex(ea, n, ri) -> bool"""
    return _ida_domain.op_offset_ex(ea, n, ri)

def op_offset(*args) -> "bool":
    r"""op_offset(ea, n, type_and_flags, target=BADADDR, base=0, tdelta=0) -> bool"""
    return _ida_domain.op_offset(*args)

def op_plain_offset(ea: "ea_t", n: "int", base: "ea_t") -> "bool":
    r"""op_plain_offset(ea, n, base) -> bool"""
    return _ida_domain.op_plain_offset(ea, n, base)

def get_offbase(ea: "ea_t", n: "int") -> "ea_t":
    r"""get_offbase(ea, n) -> ea_t"""
    return _ida_domain.get_offbase(ea, n)

def get_offset_expression(ea: "ea_t", n: "int", frm: "ea_t", offset: "adiff_t", getn_flags: "int"=0) -> "qstring *":
    r"""get_offset_expression(ea, n, frm, offset, getn_flags=0) -> int"""
    return _ida_domain.get_offset_expression(ea, n, frm, offset, getn_flags)

def get_offset_expr(ea: "ea_t", n: "int", ri: "refinfo_t const &", frm: "ea_t", offset: "adiff_t", getn_flags: "int"=0) -> "qstring *":
    r"""get_offset_expr(ea, n, ri, frm, offset, getn_flags=0) -> int"""
    return _ida_domain.get_offset_expr(ea, n, ri, frm, offset, getn_flags)

def can_be_off32(ea: "ea_t") -> "ea_t":
    r"""can_be_off32(ea) -> ea_t"""
    return _ida_domain.can_be_off32(ea)

def calc_offset_base(ea: "ea_t", n: "int") -> "ea_t":
    r"""calc_offset_base(ea, n) -> ea_t"""
    return _ida_domain.calc_offset_base(ea, n)

def calc_probable_base_by_value(ea: "ea_t", off: "uval_t") -> "ea_t":
    r"""calc_probable_base_by_value(ea, off) -> ea_t"""
    return _ida_domain.calc_probable_base_by_value(ea, off)

def calc_reference_data(target: "ea_t *", frm: "ea_t", ri: "refinfo_t const &", opval: "adiff_t") -> "ea_t *":
    r"""calc_reference_data(target, frm, ri, opval) -> bool"""
    return _ida_domain.calc_reference_data(target, frm, ri, opval)

def add_refinfo_dref(insn: "insn_t", frm: "ea_t", ri: "refinfo_t const &", opval: "adiff_t", type: "dref_t", opoff: "int") -> "ea_t":
    r"""add_refinfo_dref(insn, frm, ri, opval, type, opoff) -> ea_t"""
    return _ida_domain.add_refinfo_dref(insn, frm, ri, opval, type, opoff)

def calc_target(*args) -> "ea_t":
    r"""
    calc_target(frm, opval, ri) -> ea_t
    calc_target(frm, ea, n, opval) -> ea_t
    """
    return _ida_domain.calc_target(*args)

def calc_basevalue(target: "ea_t", base: "ea_t") -> "ea_t":
    r"""calc_basevalue(target, base) -> ea_t"""
    return _ida_domain.calc_basevalue(target, base)
class strwinsetup_t(object):
    r"""Proxy of C++ strwinsetup_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    minlen: "sval_t" = property(_ida_domain.strwinsetup_t_minlen_get, _ida_domain.strwinsetup_t_minlen_set, doc=r"""minlen""")
    display_only_existing_strings: "uchar" = property(_ida_domain.strwinsetup_t_display_only_existing_strings_get, _ida_domain.strwinsetup_t_display_only_existing_strings_set, doc=r"""display_only_existing_strings""")
    only_7bit: "uchar" = property(_ida_domain.strwinsetup_t_only_7bit_get, _ida_domain.strwinsetup_t_only_7bit_set, doc=r"""only_7bit""")
    ignore_heads: "uchar" = property(_ida_domain.strwinsetup_t_ignore_heads_get, _ida_domain.strwinsetup_t_ignore_heads_set, doc=r"""ignore_heads""")

    def _get_strtypes(self) -> "PyObject *":
        r"""_get_strtypes(self) -> PyObject *"""
        return _ida_domain.strwinsetup_t__get_strtypes(self)

    def _set_strtypes(self, py_t: "PyObject *") -> "PyObject *":
        r"""_set_strtypes(self, py_t) -> PyObject *"""
        return _ida_domain.strwinsetup_t__set_strtypes(self, py_t)

    strtypes = property(_get_strtypes, _set_strtypes)


    def __init__(self):
        r"""__init__(self) -> strwinsetup_t"""
        _ida_domain.strwinsetup_t_swiginit(self, _ida_domain.new_strwinsetup_t())
    __swig_destroy__ = _ida_domain.delete_strwinsetup_t

# Register strwinsetup_t in _ida_domain:
_ida_domain.strwinsetup_t_swigregister(strwinsetup_t)
class string_info_t(object):
    r"""Proxy of C++ string_info_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ea: "ea_t" = property(_ida_domain.string_info_t_ea_get, _ida_domain.string_info_t_ea_set, doc=r"""ea""")
    length: "int" = property(_ida_domain.string_info_t_length_get, _ida_domain.string_info_t_length_set, doc=r"""length""")
    type: "int" = property(_ida_domain.string_info_t_type_get, _ida_domain.string_info_t_type_set, doc=r"""type""")

    def __init__(self, *args):
        r"""__init__(self, _ea=BADADDR) -> string_info_t"""
        _ida_domain.string_info_t_swiginit(self, _ida_domain.new_string_info_t(*args))

    def __lt__(self, r: "string_info_t") -> "bool":
        r"""__lt__(self, r) -> bool"""
        return _ida_domain.string_info_t___lt__(self, r)
    __swig_destroy__ = _ida_domain.delete_string_info_t

# Register string_info_t in _ida_domain:
_ida_domain.string_info_t_swigregister(string_info_t)

def get_strlist_options() -> "strwinsetup_t const *":
    r"""get_strlist_options() -> strwinsetup_t"""
    return _ida_domain.get_strlist_options()

def build_strlist() -> "void":
    r"""build_strlist()"""
    return _ida_domain.build_strlist()

def clear_strlist() -> "void":
    r"""clear_strlist()"""
    return _ida_domain.clear_strlist()

def get_strlist_qty() -> "size_t":
    r"""get_strlist_qty() -> size_t"""
    return _ida_domain.get_strlist_qty()

def get_strlist_item(si: "string_info_t", n: "size_t") -> "bool":
    r"""get_strlist_item(si, n) -> bool"""
    return _ida_domain.get_strlist_item(si, n)
class tryblks_t(object):
    r"""Proxy of C++ qvector< tryblk_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> tryblks_t
        __init__(self, x) -> tryblks_t
        """
        _ida_domain.tryblks_t_swiginit(self, _ida_domain.new_tryblks_t(*args))
    __swig_destroy__ = _ida_domain.delete_tryblks_t

    def push_back(self, *args) -> "tryblk_t &":
        r"""
        push_back(self, x)
        push_back(self) -> tryblk_t
        """
        return _ida_domain.tryblks_t_push_back(self, *args)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.tryblks_t_pop_back(self)

    def size(self) -> "size_t":
        r"""size(self) -> size_t"""
        return _ida_domain.tryblks_t_size(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.tryblks_t_empty(self)

    def at(self, _idx: "size_t") -> "tryblk_t const &":
        r"""at(self, _idx) -> tryblk_t"""
        return _ida_domain.tryblks_t_at(self, _idx)

    def qclear(self) -> "void":
        r"""qclear(self)"""
        return _ida_domain.tryblks_t_qclear(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.tryblks_t_clear(self)

    def resize(self, *args) -> "void":
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_domain.tryblks_t_resize(self, *args)

    def grow(self, *args) -> "void":
        r"""grow(self, x=tryblk_t())"""
        return _ida_domain.tryblks_t_grow(self, *args)

    def capacity(self) -> "size_t":
        r"""capacity(self) -> size_t"""
        return _ida_domain.tryblks_t_capacity(self)

    def reserve(self, cnt: "size_t") -> "void":
        r"""reserve(self, cnt)"""
        return _ida_domain.tryblks_t_reserve(self, cnt)

    def truncate(self) -> "void":
        r"""truncate(self)"""
        return _ida_domain.tryblks_t_truncate(self)

    def swap(self, r: "tryblks_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.tryblks_t_swap(self, r)

    def extract(self) -> "tryblk_t *":
        r"""extract(self) -> tryblk_t"""
        return _ida_domain.tryblks_t_extract(self)

    def inject(self, s: "tryblk_t", len: "size_t") -> "void":
        r"""inject(self, s, len)"""
        return _ida_domain.tryblks_t_inject(self, s, len)

    def __eq__(self, r: "tryblks_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.tryblks_t___eq__(self, r)

    def __ne__(self, r: "tryblks_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.tryblks_t___ne__(self, r)

    def begin(self, *args) -> "qvector< tryblk_t >::const_iterator":
        r"""
        begin(self) -> tryblk_t
        begin(self) -> tryblk_t
        """
        return _ida_domain.tryblks_t_begin(self, *args)

    def end(self, *args) -> "qvector< tryblk_t >::const_iterator":
        r"""
        end(self) -> tryblk_t
        end(self) -> tryblk_t
        """
        return _ida_domain.tryblks_t_end(self, *args)

    def insert(self, it: "tryblk_t", x: "tryblk_t") -> "qvector< tryblk_t >::iterator":
        r"""insert(self, it, x) -> tryblk_t"""
        return _ida_domain.tryblks_t_insert(self, it, x)

    def erase(self, *args) -> "qvector< tryblk_t >::iterator":
        r"""
        erase(self, it) -> tryblk_t
        erase(self, first, last) -> tryblk_t
        """
        return _ida_domain.tryblks_t_erase(self, *args)

    def find(self, *args) -> "qvector< tryblk_t >::const_iterator":
        r"""
        find(self, x) -> tryblk_t
        find(self, x) -> tryblk_t
        """
        return _ida_domain.tryblks_t_find(self, *args)

    def has(self, x: "tryblk_t") -> "bool":
        r"""has(self, x) -> bool"""
        return _ida_domain.tryblks_t_has(self, x)

    def add_unique(self, x: "tryblk_t") -> "bool":
        r"""add_unique(self, x) -> bool"""
        return _ida_domain.tryblks_t_add_unique(self, x)

    def _del(self, x: "tryblk_t") -> "bool":
        r"""_del(self, x) -> bool"""
        return _ida_domain.tryblks_t__del(self, x)

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.tryblks_t___len__(self)

    def __getitem__(self, i: "size_t") -> "tryblk_t const &":
        r"""__getitem__(self, i) -> tryblk_t"""
        return _ida_domain.tryblks_t___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "tryblk_t") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.tryblks_t___setitem__(self, i, v)

    def append(self, x: "tryblk_t") -> "void":
        r"""append(self, x)"""
        return _ida_domain.tryblks_t_append(self, x)

    def extend(self, x: "tryblks_t") -> "void":
        r"""extend(self, x)"""
        return _ida_domain.tryblks_t_extend(self, x)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register tryblks_t in _ida_domain:
_ida_domain.tryblks_t_swigregister(tryblks_t)
class catchvec_t(object):
    r"""Proxy of C++ qvector< catch_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> catchvec_t
        __init__(self, x) -> catchvec_t
        """
        _ida_domain.catchvec_t_swiginit(self, _ida_domain.new_catchvec_t(*args))
    __swig_destroy__ = _ida_domain.delete_catchvec_t

    def push_back(self, *args) -> "catch_t &":
        r"""
        push_back(self, x)
        push_back(self) -> catch_t
        """
        return _ida_domain.catchvec_t_push_back(self, *args)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.catchvec_t_pop_back(self)

    def size(self) -> "size_t":
        r"""size(self) -> size_t"""
        return _ida_domain.catchvec_t_size(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.catchvec_t_empty(self)

    def at(self, _idx: "size_t") -> "catch_t const &":
        r"""at(self, _idx) -> catch_t"""
        return _ida_domain.catchvec_t_at(self, _idx)

    def qclear(self) -> "void":
        r"""qclear(self)"""
        return _ida_domain.catchvec_t_qclear(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.catchvec_t_clear(self)

    def resize(self, *args) -> "void":
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_domain.catchvec_t_resize(self, *args)

    def grow(self, *args) -> "void":
        r"""grow(self, x=catch_t())"""
        return _ida_domain.catchvec_t_grow(self, *args)

    def capacity(self) -> "size_t":
        r"""capacity(self) -> size_t"""
        return _ida_domain.catchvec_t_capacity(self)

    def reserve(self, cnt: "size_t") -> "void":
        r"""reserve(self, cnt)"""
        return _ida_domain.catchvec_t_reserve(self, cnt)

    def truncate(self) -> "void":
        r"""truncate(self)"""
        return _ida_domain.catchvec_t_truncate(self)

    def swap(self, r: "catchvec_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.catchvec_t_swap(self, r)

    def extract(self) -> "catch_t *":
        r"""extract(self) -> catch_t"""
        return _ida_domain.catchvec_t_extract(self)

    def inject(self, s: "catch_t", len: "size_t") -> "void":
        r"""inject(self, s, len)"""
        return _ida_domain.catchvec_t_inject(self, s, len)

    def __eq__(self, r: "catchvec_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.catchvec_t___eq__(self, r)

    def __ne__(self, r: "catchvec_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.catchvec_t___ne__(self, r)

    def begin(self, *args) -> "qvector< catch_t >::const_iterator":
        r"""
        begin(self) -> catch_t
        begin(self) -> catch_t
        """
        return _ida_domain.catchvec_t_begin(self, *args)

    def end(self, *args) -> "qvector< catch_t >::const_iterator":
        r"""
        end(self) -> catch_t
        end(self) -> catch_t
        """
        return _ida_domain.catchvec_t_end(self, *args)

    def insert(self, it: "catch_t", x: "catch_t") -> "qvector< catch_t >::iterator":
        r"""insert(self, it, x) -> catch_t"""
        return _ida_domain.catchvec_t_insert(self, it, x)

    def erase(self, *args) -> "qvector< catch_t >::iterator":
        r"""
        erase(self, it) -> catch_t
        erase(self, first, last) -> catch_t
        """
        return _ida_domain.catchvec_t_erase(self, *args)

    def find(self, *args) -> "qvector< catch_t >::const_iterator":
        r"""
        find(self, x) -> catch_t
        find(self, x) -> catch_t
        """
        return _ida_domain.catchvec_t_find(self, *args)

    def has(self, x: "catch_t") -> "bool":
        r"""has(self, x) -> bool"""
        return _ida_domain.catchvec_t_has(self, x)

    def add_unique(self, x: "catch_t") -> "bool":
        r"""add_unique(self, x) -> bool"""
        return _ida_domain.catchvec_t_add_unique(self, x)

    def _del(self, x: "catch_t") -> "bool":
        r"""_del(self, x) -> bool"""
        return _ida_domain.catchvec_t__del(self, x)

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.catchvec_t___len__(self)

    def __getitem__(self, i: "size_t") -> "catch_t const &":
        r"""__getitem__(self, i) -> catch_t"""
        return _ida_domain.catchvec_t___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "catch_t") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.catchvec_t___setitem__(self, i, v)

    def append(self, x: "catch_t") -> "void":
        r"""append(self, x)"""
        return _ida_domain.catchvec_t_append(self, x)

    def extend(self, x: "catchvec_t") -> "void":
        r"""extend(self, x)"""
        return _ida_domain.catchvec_t_extend(self, x)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register catchvec_t in _ida_domain:
_ida_domain.catchvec_t_swigregister(catchvec_t)
class try_handler_t(rangevec_t):
    r"""Proxy of C++ try_handler_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    disp: "sval_t" = property(_ida_domain.try_handler_t_disp_get, _ida_domain.try_handler_t_disp_set, doc=r"""disp""")
    fpreg: "int" = property(_ida_domain.try_handler_t_fpreg_get, _ida_domain.try_handler_t_fpreg_set, doc=r"""fpreg""")

    def __init__(self):
        r"""__init__(self) -> try_handler_t"""
        _ida_domain.try_handler_t_swiginit(self, _ida_domain.new_try_handler_t())

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.try_handler_t_clear(self)
    __swig_destroy__ = _ida_domain.delete_try_handler_t

# Register try_handler_t in _ida_domain:
_ida_domain.try_handler_t_swigregister(try_handler_t)
class seh_t(try_handler_t):
    r"""Proxy of C++ seh_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    filter: "rangevec_t" = property(_ida_domain.seh_t_filter_get, _ida_domain.seh_t_filter_set, doc=r"""filter""")
    seh_code: "ea_t" = property(_ida_domain.seh_t_seh_code_get, _ida_domain.seh_t_seh_code_set, doc=r"""seh_code""")

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.seh_t_clear(self)

    def __init__(self):
        r"""__init__(self) -> seh_t"""
        _ida_domain.seh_t_swiginit(self, _ida_domain.new_seh_t())
    __swig_destroy__ = _ida_domain.delete_seh_t

# Register seh_t in _ida_domain:
_ida_domain.seh_t_swigregister(seh_t)
class catch_t(try_handler_t):
    r"""Proxy of C++ catch_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    obj: "sval_t" = property(_ida_domain.catch_t_obj_get, _ida_domain.catch_t_obj_set, doc=r"""obj""")
    type_id: "sval_t" = property(_ida_domain.catch_t_type_id_get, _ida_domain.catch_t_type_id_set, doc=r"""type_id""")

    def __init__(self):
        r"""__init__(self) -> catch_t"""
        _ida_domain.catch_t_swiginit(self, _ida_domain.new_catch_t())
    __swig_destroy__ = _ida_domain.delete_catch_t

# Register catch_t in _ida_domain:
_ida_domain.catch_t_swigregister(catch_t)
class tryblk_t(rangevec_t):
    r"""Proxy of C++ tryblk_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    level: "uchar" = property(_ida_domain.tryblk_t_level_get, _ida_domain.tryblk_t_level_set, doc=r"""level""")

    def cpp(self) -> "catchvec_t &":
        r"""cpp(self) -> catchvec_t"""
        return _ida_domain.tryblk_t_cpp(self)

    def seh(self) -> "seh_t &":
        r"""seh(self) -> seh_t"""
        return _ida_domain.tryblk_t_seh(self)
    __swig_destroy__ = _ida_domain.delete_tryblk_t

    def __init__(self, *args):
        r"""
        __init__(self) -> tryblk_t
        __init__(self, r) -> tryblk_t
        """
        _ida_domain.tryblk_t_swiginit(self, _ida_domain.new_tryblk_t(*args))

    def get_kind(self) -> "uchar":
        r"""get_kind(self) -> uchar"""
        return _ida_domain.tryblk_t_get_kind(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.tryblk_t_empty(self)

    def is_seh(self) -> "bool":
        r"""is_seh(self) -> bool"""
        return _ida_domain.tryblk_t_is_seh(self)

    def is_cpp(self) -> "bool":
        r"""is_cpp(self) -> bool"""
        return _ida_domain.tryblk_t_is_cpp(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.tryblk_t_clear(self)

    def set_seh(self) -> "seh_t &":
        r"""set_seh(self) -> seh_t"""
        return _ida_domain.tryblk_t_set_seh(self)

    def set_cpp(self) -> "catchvec_t &":
        r"""set_cpp(self) -> catchvec_t"""
        return _ida_domain.tryblk_t_set_cpp(self)

# Register tryblk_t in _ida_domain:
_ida_domain.tryblk_t_swigregister(tryblk_t)

def get_tryblks(tbv: "tryblks_t", range: "range_t") -> "size_t":
    r"""get_tryblks(tbv, range) -> size_t"""
    return _ida_domain.get_tryblks(tbv, range)

def del_tryblks(range: "range_t") -> "void":
    r"""del_tryblks(range)"""
    return _ida_domain.del_tryblks(range)

def add_tryblk(tb: "tryblk_t") -> "int":
    r"""add_tryblk(tb) -> int"""
    return _ida_domain.add_tryblk(tb)
TBERR_OK = _ida_domain.TBERR_OK

TBERR_START = _ida_domain.TBERR_START

TBERR_END = _ida_domain.TBERR_END

TBERR_ORDER = _ida_domain.TBERR_ORDER

TBERR_EMPTY = _ida_domain.TBERR_EMPTY

TBERR_KIND = _ida_domain.TBERR_KIND

TBERR_NO_CATCHES = _ida_domain.TBERR_NO_CATCHES

TBERR_INTERSECT = _ida_domain.TBERR_INTERSECT


def find_syseh(ea: "ea_t") -> "ea_t":
    r"""find_syseh(ea) -> ea_t"""
    return _ida_domain.find_syseh(ea)
TBEA_TRY = _ida_domain.TBEA_TRY

TBEA_CATCH = _ida_domain.TBEA_CATCH

TBEA_SEHTRY = _ida_domain.TBEA_SEHTRY

TBEA_SEHLPAD = _ida_domain.TBEA_SEHLPAD

TBEA_SEHFILT = _ida_domain.TBEA_SEHFILT

TBEA_ANY = _ida_domain.TBEA_ANY

TBEA_FALLTHRU = _ida_domain.TBEA_FALLTHRU


def is_ea_tryblks(ea: "ea_t", flags: "uint32") -> "bool":
    r"""is_ea_tryblks(ea, flags) -> bool"""
    return _ida_domain.is_ea_tryblks(ea, flags)

#<pycode(py_search)>
#</pycode(py_search)>

SEARCH_UP = _ida_domain.SEARCH_UP

SEARCH_DOWN = _ida_domain.SEARCH_DOWN

SEARCH_NEXT = _ida_domain.SEARCH_NEXT

SEARCH_CASE = _ida_domain.SEARCH_CASE

SEARCH_REGEX = _ida_domain.SEARCH_REGEX

SEARCH_NOBRK = _ida_domain.SEARCH_NOBRK

SEARCH_NOSHOW = _ida_domain.SEARCH_NOSHOW

SEARCH_IDENT = _ida_domain.SEARCH_IDENT

SEARCH_BRK = _ida_domain.SEARCH_BRK

SEARCH_USE = _ida_domain.SEARCH_USE

SEARCH_DEF = _ida_domain.SEARCH_DEF

SEARCH_USESEL = _ida_domain.SEARCH_USESEL


def search_down(sflag: "int") -> "bool":
    r"""search_down(sflag) -> bool"""
    return _ida_domain.search_down(sflag)

def find_error(ea: "ea_t", sflag: "int") -> "int *":
    r"""find_error(ea, sflag) -> ea_t"""
    return _ida_domain.find_error(ea, sflag)

def find_notype(ea: "ea_t", sflag: "int") -> "int *":
    r"""find_notype(ea, sflag) -> ea_t"""
    return _ida_domain.find_notype(ea, sflag)

def find_unknown(ea: "ea_t", sflag: "int") -> "ea_t":
    r"""find_unknown(ea, sflag) -> ea_t"""
    return _ida_domain.find_unknown(ea, sflag)

def find_defined(ea: "ea_t", sflag: "int") -> "ea_t":
    r"""find_defined(ea, sflag) -> ea_t"""
    return _ida_domain.find_defined(ea, sflag)

def find_suspop(ea: "ea_t", sflag: "int") -> "int *":
    r"""find_suspop(ea, sflag) -> ea_t"""
    return _ida_domain.find_suspop(ea, sflag)

def find_data(ea: "ea_t", sflag: "int") -> "ea_t":
    r"""find_data(ea, sflag) -> ea_t"""
    return _ida_domain.find_data(ea, sflag)

def find_code(ea: "ea_t", sflag: "int") -> "ea_t":
    r"""find_code(ea, sflag) -> ea_t"""
    return _ida_domain.find_code(ea, sflag)

def find_not_func(ea: "ea_t", sflag: "int") -> "ea_t":
    r"""find_not_func(ea, sflag) -> ea_t"""
    return _ida_domain.find_not_func(ea, sflag)

def find_imm(ea: "ea_t", sflag: "int", search_value: "uval_t") -> "int *":
    r"""find_imm(ea, sflag, search_value) -> ea_t"""
    return _ida_domain.find_imm(ea, sflag, search_value)

def find_text(start_ea: "ea_t", y: "int", x: "int", ustr: "char const *", sflag: "int") -> "ea_t":
    r"""find_text(start_ea, y, x, ustr, sflag) -> ea_t"""
    return _ida_domain.find_text(start_ea, y, x, ustr, sflag)

def find_reg_access(out: "reg_access_t *", start_ea: "ea_t", end_ea: "ea_t", regname: "char const *", sflag: "int") -> "ea_t":
    r"""find_reg_access(out, start_ea, end_ea, regname, sflag) -> ea_t"""
    return _ida_domain.find_reg_access(out, start_ea, end_ea, regname, sflag)
SRCLANG_C = _ida_domain.SRCLANG_C

SRCLANG_CPP = _ida_domain.SRCLANG_CPP

SRCLANG_OBJC = _ida_domain.SRCLANG_OBJC

SRCLANG_SWIFT = _ida_domain.SRCLANG_SWIFT

SRCLANG_GO = _ida_domain.SRCLANG_GO


def select_parser_by_name(name: "char const *") -> "bool":
    r"""select_parser_by_name(name) -> bool"""
    return _ida_domain.select_parser_by_name(name)

def select_parser_by_srclang(lang: "srclang_t") -> "bool":
    r"""select_parser_by_srclang(lang) -> bool"""
    return _ida_domain.select_parser_by_srclang(lang)

def set_parser_argv(parser_name: "char const *", argv: "char const *") -> "int":
    r"""set_parser_argv(parser_name, argv) -> int"""
    return _ida_domain.set_parser_argv(parser_name, argv)

def parse_decls_for_srclang(lang: "srclang_t", til: "til_t", input: "char const *", is_path: "bool") -> "int":
    r"""parse_decls_for_srclang(lang, til, input, is_path) -> int"""
    return _ida_domain.parse_decls_for_srclang(lang, til, input, is_path)

def parse_decls_with_parser(parser_name: "char const *", til: "til_t", input: "char const *", is_path: "bool") -> "int":
    r"""parse_decls_with_parser(parser_name, til, input, is_path) -> int"""
    return _ida_domain.parse_decls_with_parser(parser_name, til, input, is_path)

def create_switch_xrefs(ea: "ea_t", si: "switch_info_t const &") -> "bool":
    r"""create_switch_xrefs(ea, si) -> bool"""
    return _ida_domain.create_switch_xrefs(ea, si)
class cases_and_targets_t(object):
    r"""Proxy of C++ cases_and_targets_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cases: "casevec_t" = property(_ida_domain.cases_and_targets_t_cases_get, _ida_domain.cases_and_targets_t_cases_set, doc=r"""cases""")
    targets: "eavec_t" = property(_ida_domain.cases_and_targets_t_targets_get, _ida_domain.cases_and_targets_t_targets_set, doc=r"""targets""")

    def __init__(self):
        r"""__init__(self) -> cases_and_targets_t"""
        _ida_domain.cases_and_targets_t_swiginit(self, _ida_domain.new_cases_and_targets_t())
    __swig_destroy__ = _ida_domain.delete_cases_and_targets_t

# Register cases_and_targets_t in _ida_domain:
_ida_domain.cases_and_targets_t_swigregister(cases_and_targets_t)

def calc_switch_cases(ea: "ea_t", si: "switch_info_t const &") -> "cases_and_targets_t *":
    r"""calc_switch_cases(ea, si) -> cases_and_targets_t"""
    return _ida_domain.calc_switch_cases(ea, si)

def create_switch_table(ea: "ea_t", si: "switch_info_t const &") -> "bool":
    r"""create_switch_table(ea, si) -> bool"""
    return _ida_domain.create_switch_table(ea, si)
fl_U = _ida_domain.fl_U

fl_CF = _ida_domain.fl_CF

fl_CN = _ida_domain.fl_CN

fl_JF = _ida_domain.fl_JF

fl_JN = _ida_domain.fl_JN

fl_USobsolete = _ida_domain.fl_USobsolete

fl_F = _ida_domain.fl_F

dr_U = _ida_domain.dr_U

dr_O = _ida_domain.dr_O

dr_W = _ida_domain.dr_W

dr_R = _ida_domain.dr_R

dr_T = _ida_domain.dr_T

dr_I = _ida_domain.dr_I

dr_S = _ida_domain.dr_S

XREF_USER = _ida_domain.XREF_USER

XREF_TAIL = _ida_domain.XREF_TAIL

XREF_BASE = _ida_domain.XREF_BASE

XREF_MASK = _ida_domain.XREF_MASK

XREF_PASTEND = _ida_domain.XREF_PASTEND


def xrefchar(xrtype: "char") -> "char":
    r"""xrefchar(xrtype) -> char"""
    return _ida_domain.xrefchar(xrtype)

def add_cref(frm: "ea_t", to: "ea_t", type: "cref_t") -> "bool":
    r"""add_cref(frm, to, type) -> bool"""
    return _ida_domain.add_cref(frm, to, type)

def del_cref(frm: "ea_t", to: "ea_t", expand: "bool") -> "bool":
    r"""del_cref(frm, to, expand) -> bool"""
    return _ida_domain.del_cref(frm, to, expand)

def add_dref(frm: "ea_t", to: "ea_t", type: "dref_t") -> "bool":
    r"""add_dref(frm, to, type) -> bool"""
    return _ida_domain.add_dref(frm, to, type)

def del_dref(frm: "ea_t", to: "ea_t") -> "void":
    r"""del_dref(frm, to)"""
    return _ida_domain.del_dref(frm, to)
class xrefblk_t(object):
    r"""Proxy of C++ xrefblk_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    frm: "ea_t" = property(_ida_domain.xrefblk_t_frm_get, _ida_domain.xrefblk_t_frm_set, doc=r"""frm""")
    to: "ea_t" = property(_ida_domain.xrefblk_t_to_get, _ida_domain.xrefblk_t_to_set, doc=r"""to""")
    iscode: "bool" = property(_ida_domain.xrefblk_t_iscode_get, _ida_domain.xrefblk_t_iscode_set, doc=r"""iscode""")
    type: "uchar" = property(_ida_domain.xrefblk_t_type_get, _ida_domain.xrefblk_t_type_set, doc=r"""type""")
    user: "bool" = property(_ida_domain.xrefblk_t_user_get, _ida_domain.xrefblk_t_user_set, doc=r"""user""")
    _flags: "uchar" = property(_ida_domain.xrefblk_t__flags_get, _ida_domain.xrefblk_t__flags_set, doc=r"""_flags""")

    def first_from(self, _from: "ea_t", flags: "int"=0) -> "bool":
        r"""first_from(self, _from, flags=0) -> bool"""
        return _ida_domain.xrefblk_t_first_from(self, _from, flags)

    def first_to(self, _to: "ea_t", flags: "int"=0) -> "bool":
        r"""first_to(self, _to, flags=0) -> bool"""
        return _ida_domain.xrefblk_t_first_to(self, _to, flags)

    def next_from(self, *args) -> "bool":
        r"""
        next_from(self) -> bool
        next_from(self, _from, _to, flags) -> bool
        """
        return _ida_domain.xrefblk_t_next_from(self, *args)

    def next_to(self, *args) -> "bool":
        r"""
        next_to(self) -> bool
        next_to(self, _from, _to, flags) -> bool
        """
        return _ida_domain.xrefblk_t_next_to(self, *args)

    def crefs_to(self, ea):
        """
        Provide an iterator on code references to ea including flow references
        """
        ref = get_first_cref_to(ea)
        while ref != ida_idaapi.BADADDR:
            yield ref
            ref = get_next_cref_to(ea, ref)


    def fcrefs_to(self, ea):
        """
        Provide an iterator on code references to ea
        """
        ref = get_first_fcref_to(ea)
        while ref != ida_idaapi.BADADDR:
            yield ref
            ref = get_next_fcref_to(ea, ref)


    def crefs_from(self, ea):
        """
        Provide an iterator on code references from ea including flow references
        """
        ref = get_first_cref_from(ea)
        while ref != ida_idaapi.BADADDR:
            yield ref
            ref = get_next_cref_from(ea, ref)


    def fcrefs_from(self, ea):
        """
        Provide an iterator on code references from ea
        """
        ref = get_first_fcref_from(ea)
        while ref != ida_idaapi.BADADDR:
            yield ref
            ref = get_next_fcref_from(ea, ref)


    def drefs_to(self, ea):
        """
        Provide an iterator on data references to ea
        """
        ref = get_first_dref_to(ea)
        while ref != ida_idaapi.BADADDR:
            yield ref
            ref = get_next_dref_to(ea, ref)


    def drefs_from(self, ea):
        """
        Provide an iterator on data references from ea
        """
        ref = get_first_dref_from(ea)
        while ref != ida_idaapi.BADADDR:
            yield ref
            ref = get_next_dref_from(ea, ref)


    def refs_from(self, ea, flag):
        """
        Provide an iterator on from reference represented by flag
        """
        def _copy_xref():
            """ Make a private copy of the xref class to preserve its contents """
            class _xref(object):
                pass

            xr = _xref()
            for attr in [ 'frm', 'to', 'iscode', 'type', 'user' ]:
                setattr(xr, attr, getattr(self, attr))
            return xr

        if self.first_from(ea, flag):
            yield _copy_xref()
            while self.next_from():
                yield _copy_xref()


    def refs_to(self, ea, flag):
        """
        Provide an iterator on to reference represented by flag
        """
        def _copy_xref():
            """ Make a private copy of the xref class to preserve its contents """
            class _xref(object):
                pass

            xr = _xref()
            for attr in [ 'frm', 'to', 'iscode', 'type', 'user' ]:
                setattr(xr, attr, getattr(self, attr))
            return xr

        if self.first_to(ea, flag):
            yield _copy_xref()
            while self.next_to():
                yield _copy_xref()


    def __init__(self):
        r"""__init__(self) -> xrefblk_t"""
        _ida_domain.xrefblk_t_swiginit(self, _ida_domain.new_xrefblk_t())
    __swig_destroy__ = _ida_domain.delete_xrefblk_t

# Register xrefblk_t in _ida_domain:
_ida_domain.xrefblk_t_swigregister(xrefblk_t)
XREF_FLOW = _ida_domain.XREF_FLOW

XREF_NOFLOW = _ida_domain.XREF_NOFLOW

XREF_DATA = _ida_domain.XREF_DATA

XREF_CODE = _ida_domain.XREF_CODE

XREF_EA = _ida_domain.XREF_EA

XREF_TID = _ida_domain.XREF_TID



def get_first_dref_from(frm: "ea_t") -> "ea_t":
    r"""get_first_dref_from(frm) -> ea_t"""
    return _ida_domain.get_first_dref_from(frm)

def get_next_dref_from(frm: "ea_t", current: "ea_t") -> "ea_t":
    r"""get_next_dref_from(frm, current) -> ea_t"""
    return _ida_domain.get_next_dref_from(frm, current)

def get_first_dref_to(to: "ea_t") -> "ea_t":
    r"""get_first_dref_to(to) -> ea_t"""
    return _ida_domain.get_first_dref_to(to)

def get_next_dref_to(to: "ea_t", current: "ea_t") -> "ea_t":
    r"""get_next_dref_to(to, current) -> ea_t"""
    return _ida_domain.get_next_dref_to(to, current)

def get_first_cref_from(frm: "ea_t") -> "ea_t":
    r"""get_first_cref_from(frm) -> ea_t"""
    return _ida_domain.get_first_cref_from(frm)

def get_next_cref_from(frm: "ea_t", current: "ea_t") -> "ea_t":
    r"""get_next_cref_from(frm, current) -> ea_t"""
    return _ida_domain.get_next_cref_from(frm, current)

def get_first_cref_to(to: "ea_t") -> "ea_t":
    r"""get_first_cref_to(to) -> ea_t"""
    return _ida_domain.get_first_cref_to(to)

def get_next_cref_to(to: "ea_t", current: "ea_t") -> "ea_t":
    r"""get_next_cref_to(to, current) -> ea_t"""
    return _ida_domain.get_next_cref_to(to, current)

def get_first_fcref_from(frm: "ea_t") -> "ea_t":
    r"""get_first_fcref_from(frm) -> ea_t"""
    return _ida_domain.get_first_fcref_from(frm)

def get_next_fcref_from(frm: "ea_t", current: "ea_t") -> "ea_t":
    r"""get_next_fcref_from(frm, current) -> ea_t"""
    return _ida_domain.get_next_fcref_from(frm, current)

def get_first_fcref_to(to: "ea_t") -> "ea_t":
    r"""get_first_fcref_to(to) -> ea_t"""
    return _ida_domain.get_first_fcref_to(to)

def get_next_fcref_to(to: "ea_t", current: "ea_t") -> "ea_t":
    r"""get_next_fcref_to(to, current) -> ea_t"""
    return _ida_domain.get_next_fcref_to(to, current)

def has_external_refs(pfn: "func_t", ea: "ea_t") -> "bool":
    r"""has_external_refs(pfn, ea) -> bool"""
    return _ida_domain.has_external_refs(pfn, ea)

def has_jump_or_flow_xref(ea: "ea_t") -> "bool":
    r"""has_jump_or_flow_xref(ea) -> bool"""
    return _ida_domain.has_jump_or_flow_xref(ea)
XREF_ALL = _ida_domain.XREF_ALL

XREF_FAR = _ida_domain.XREF_FAR

class casevec_t(object):
    r"""Proxy of C++ qvector< qvector< sval_t > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> casevec_t
        __init__(self, x) -> casevec_t
        """
        _ida_domain.casevec_t_swiginit(self, _ida_domain.new_casevec_t(*args))
    __swig_destroy__ = _ida_domain.delete_casevec_t

    def push_back(self, *args) -> "qvector< long long > &":
        r"""
        push_back(self, x)
        push_back(self) -> int64vec_t
        """
        return _ida_domain.casevec_t_push_back(self, *args)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.casevec_t_pop_back(self)

    def size(self) -> "size_t":
        r"""size(self) -> size_t"""
        return _ida_domain.casevec_t_size(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.casevec_t_empty(self)

    def at(self, _idx: "size_t") -> "qvector< long long > const &":
        r"""at(self, _idx) -> int64vec_t"""
        return _ida_domain.casevec_t_at(self, _idx)

    def qclear(self) -> "void":
        r"""qclear(self)"""
        return _ida_domain.casevec_t_qclear(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.casevec_t_clear(self)

    def resize(self, *args) -> "void":
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_domain.casevec_t_resize(self, *args)

    def grow(self, *args) -> "void":
        r"""grow(self, x=qvector< long long >())"""
        return _ida_domain.casevec_t_grow(self, *args)

    def capacity(self) -> "size_t":
        r"""capacity(self) -> size_t"""
        return _ida_domain.casevec_t_capacity(self)

    def reserve(self, cnt: "size_t") -> "void":
        r"""reserve(self, cnt)"""
        return _ida_domain.casevec_t_reserve(self, cnt)

    def truncate(self) -> "void":
        r"""truncate(self)"""
        return _ida_domain.casevec_t_truncate(self)

    def swap(self, r: "casevec_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.casevec_t_swap(self, r)

    def extract(self) -> "qvector< long long > *":
        r"""extract(self) -> int64vec_t"""
        return _ida_domain.casevec_t_extract(self)

    def inject(self, s: "int64vec_t", len: "size_t") -> "void":
        r"""inject(self, s, len)"""
        return _ida_domain.casevec_t_inject(self, s, len)

    def __eq__(self, r: "casevec_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.casevec_t___eq__(self, r)

    def __ne__(self, r: "casevec_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.casevec_t___ne__(self, r)

    def begin(self, *args) -> "qvector< qvector< long long > >::const_iterator":
        r"""
        begin(self) -> int64vec_t
        begin(self) -> int64vec_t
        """
        return _ida_domain.casevec_t_begin(self, *args)

    def end(self, *args) -> "qvector< qvector< long long > >::const_iterator":
        r"""
        end(self) -> int64vec_t
        end(self) -> int64vec_t
        """
        return _ida_domain.casevec_t_end(self, *args)

    def insert(self, it: "int64vec_t", x: "int64vec_t") -> "qvector< qvector< long long > >::iterator":
        r"""insert(self, it, x) -> int64vec_t"""
        return _ida_domain.casevec_t_insert(self, it, x)

    def erase(self, *args) -> "qvector< qvector< long long > >::iterator":
        r"""
        erase(self, it) -> int64vec_t
        erase(self, first, last) -> int64vec_t
        """
        return _ida_domain.casevec_t_erase(self, *args)

    def find(self, *args) -> "qvector< qvector< long long > >::const_iterator":
        r"""
        find(self, x) -> int64vec_t
        find(self, x) -> int64vec_t
        """
        return _ida_domain.casevec_t_find(self, *args)

    def has(self, x: "int64vec_t") -> "bool":
        r"""has(self, x) -> bool"""
        return _ida_domain.casevec_t_has(self, x)

    def add_unique(self, x: "int64vec_t") -> "bool":
        r"""add_unique(self, x) -> bool"""
        return _ida_domain.casevec_t_add_unique(self, x)

    def _del(self, x: "int64vec_t") -> "bool":
        r"""_del(self, x) -> bool"""
        return _ida_domain.casevec_t__del(self, x)

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.casevec_t___len__(self)

    def __getitem__(self, i: "size_t") -> "qvector< long long > const &":
        r"""__getitem__(self, i) -> int64vec_t"""
        return _ida_domain.casevec_t___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "int64vec_t") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.casevec_t___setitem__(self, i, v)

    def append(self, x: "int64vec_t") -> "void":
        r"""append(self, x)"""
        return _ida_domain.casevec_t_append(self, x)

    def extend(self, x: "casevec_t") -> "void":
        r"""extend(self, x)"""
        return _ida_domain.casevec_t_extend(self, x)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register casevec_t in _ida_domain:
_ida_domain.casevec_t_swigregister(casevec_t)

#<pycode(py_xref)>

import ida_idaapi
ida_idaapi._listify_types(
        casevec_t)

XREF_ALL = XREF_FLOW
XREF_FAR = XREF_NOFLOW

#</pycode(py_xref)>

DEFMASK64 = _ida_domain.DEFMASK64


def deserialize_tinfo(tif: "tinfo_t", til: "til_t", ptype: "type_t const **", pfields: "p_list const **", pfldcmts: "p_list const **", cmt: "char const *"=None) -> "bool":
    r"""deserialize_tinfo(tif, til, ptype, pfields, pfldcmts, cmt=None) -> bool"""
    return _ida_domain.deserialize_tinfo(tif, til, ptype, pfields, pfldcmts, cmt)
class funcargvec_t(object):
    r"""Proxy of C++ qvector< funcarg_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> funcargvec_t
        __init__(self, x) -> funcargvec_t
        """
        _ida_domain.funcargvec_t_swiginit(self, _ida_domain.new_funcargvec_t(*args))
    __swig_destroy__ = _ida_domain.delete_funcargvec_t

    def push_back(self, *args) -> "funcarg_t &":
        r"""
        push_back(self, x)
        push_back(self) -> funcarg_t
        """
        return _ida_domain.funcargvec_t_push_back(self, *args)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.funcargvec_t_pop_back(self)

    def size(self) -> "size_t":
        r"""size(self) -> size_t"""
        return _ida_domain.funcargvec_t_size(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.funcargvec_t_empty(self)

    def at(self, _idx: "size_t") -> "funcarg_t const &":
        r"""at(self, _idx) -> funcarg_t"""
        return _ida_domain.funcargvec_t_at(self, _idx)

    def qclear(self) -> "void":
        r"""qclear(self)"""
        return _ida_domain.funcargvec_t_qclear(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.funcargvec_t_clear(self)

    def resize(self, *args) -> "void":
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_domain.funcargvec_t_resize(self, *args)

    def grow(self, *args) -> "void":
        r"""grow(self, x=funcarg_t())"""
        return _ida_domain.funcargvec_t_grow(self, *args)

    def capacity(self) -> "size_t":
        r"""capacity(self) -> size_t"""
        return _ida_domain.funcargvec_t_capacity(self)

    def reserve(self, cnt: "size_t") -> "void":
        r"""reserve(self, cnt)"""
        return _ida_domain.funcargvec_t_reserve(self, cnt)

    def truncate(self) -> "void":
        r"""truncate(self)"""
        return _ida_domain.funcargvec_t_truncate(self)

    def swap(self, r: "funcargvec_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.funcargvec_t_swap(self, r)

    def extract(self) -> "funcarg_t *":
        r"""extract(self) -> funcarg_t"""
        return _ida_domain.funcargvec_t_extract(self)

    def inject(self, s: "funcarg_t", len: "size_t") -> "void":
        r"""inject(self, s, len)"""
        return _ida_domain.funcargvec_t_inject(self, s, len)

    def __eq__(self, r: "funcargvec_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.funcargvec_t___eq__(self, r)

    def __ne__(self, r: "funcargvec_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.funcargvec_t___ne__(self, r)

    def begin(self, *args) -> "qvector< funcarg_t >::const_iterator":
        r"""
        begin(self) -> funcarg_t
        begin(self) -> funcarg_t
        """
        return _ida_domain.funcargvec_t_begin(self, *args)

    def end(self, *args) -> "qvector< funcarg_t >::const_iterator":
        r"""
        end(self) -> funcarg_t
        end(self) -> funcarg_t
        """
        return _ida_domain.funcargvec_t_end(self, *args)

    def insert(self, it: "funcarg_t", x: "funcarg_t") -> "qvector< funcarg_t >::iterator":
        r"""insert(self, it, x) -> funcarg_t"""
        return _ida_domain.funcargvec_t_insert(self, it, x)

    def erase(self, *args) -> "qvector< funcarg_t >::iterator":
        r"""
        erase(self, it) -> funcarg_t
        erase(self, first, last) -> funcarg_t
        """
        return _ida_domain.funcargvec_t_erase(self, *args)

    def find(self, *args) -> "qvector< funcarg_t >::const_iterator":
        r"""
        find(self, x) -> funcarg_t
        find(self, x) -> funcarg_t
        """
        return _ida_domain.funcargvec_t_find(self, *args)

    def has(self, x: "funcarg_t") -> "bool":
        r"""has(self, x) -> bool"""
        return _ida_domain.funcargvec_t_has(self, x)

    def add_unique(self, x: "funcarg_t") -> "bool":
        r"""add_unique(self, x) -> bool"""
        return _ida_domain.funcargvec_t_add_unique(self, x)

    def _del(self, x: "funcarg_t") -> "bool":
        r"""_del(self, x) -> bool"""
        return _ida_domain.funcargvec_t__del(self, x)

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.funcargvec_t___len__(self)

    def __getitem__(self, i: "size_t") -> "funcarg_t const &":
        r"""__getitem__(self, i) -> funcarg_t"""
        return _ida_domain.funcargvec_t___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "funcarg_t") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.funcargvec_t___setitem__(self, i, v)

    def append(self, x: "funcarg_t") -> "void":
        r"""append(self, x)"""
        return _ida_domain.funcargvec_t_append(self, x)

    def extend(self, x: "funcargvec_t") -> "void":
        r"""extend(self, x)"""
        return _ida_domain.funcargvec_t_extend(self, x)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register funcargvec_t in _ida_domain:
_ida_domain.funcargvec_t_swigregister(funcargvec_t)
class reginfovec_t(object):
    r"""Proxy of C++ qvector< reg_info_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> reginfovec_t
        __init__(self, x) -> reginfovec_t
        """
        _ida_domain.reginfovec_t_swiginit(self, _ida_domain.new_reginfovec_t(*args))
    __swig_destroy__ = _ida_domain.delete_reginfovec_t

    def push_back(self, *args) -> "reg_info_t &":
        r"""
        push_back(self, x)
        push_back(self) -> reg_info_t &
        """
        return _ida_domain.reginfovec_t_push_back(self, *args)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.reginfovec_t_pop_back(self)

    def size(self) -> "size_t":
        r"""size(self) -> size_t"""
        return _ida_domain.reginfovec_t_size(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.reginfovec_t_empty(self)

    def at(self, _idx: "size_t") -> "reg_info_t const &":
        r"""at(self, _idx) -> reg_info_t const &"""
        return _ida_domain.reginfovec_t_at(self, _idx)

    def qclear(self) -> "void":
        r"""qclear(self)"""
        return _ida_domain.reginfovec_t_qclear(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.reginfovec_t_clear(self)

    def resize(self, *args) -> "void":
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_domain.reginfovec_t_resize(self, *args)

    def grow(self, *args) -> "void":
        r"""grow(self, x=reg_info_t())"""
        return _ida_domain.reginfovec_t_grow(self, *args)

    def capacity(self) -> "size_t":
        r"""capacity(self) -> size_t"""
        return _ida_domain.reginfovec_t_capacity(self)

    def reserve(self, cnt: "size_t") -> "void":
        r"""reserve(self, cnt)"""
        return _ida_domain.reginfovec_t_reserve(self, cnt)

    def truncate(self) -> "void":
        r"""truncate(self)"""
        return _ida_domain.reginfovec_t_truncate(self)

    def swap(self, r: "reginfovec_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.reginfovec_t_swap(self, r)

    def extract(self) -> "reg_info_t *":
        r"""extract(self) -> reg_info_t *"""
        return _ida_domain.reginfovec_t_extract(self)

    def inject(self, s: "reg_info_t *", len: "size_t") -> "void":
        r"""inject(self, s, len)"""
        return _ida_domain.reginfovec_t_inject(self, s, len)

    def __eq__(self, r: "reginfovec_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.reginfovec_t___eq__(self, r)

    def __ne__(self, r: "reginfovec_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.reginfovec_t___ne__(self, r)

    def begin(self, *args) -> "qvector< reg_info_t >::const_iterator":
        r"""
        begin(self) -> qvector< reg_info_t >::iterator
        begin(self) -> qvector< reg_info_t >::const_iterator
        """
        return _ida_domain.reginfovec_t_begin(self, *args)

    def end(self, *args) -> "qvector< reg_info_t >::const_iterator":
        r"""
        end(self) -> qvector< reg_info_t >::iterator
        end(self) -> qvector< reg_info_t >::const_iterator
        """
        return _ida_domain.reginfovec_t_end(self, *args)

    def insert(self, it: "qvector< reg_info_t >::iterator", x: "reg_info_t const &") -> "qvector< reg_info_t >::iterator":
        r"""insert(self, it, x) -> qvector< reg_info_t >::iterator"""
        return _ida_domain.reginfovec_t_insert(self, it, x)

    def erase(self, *args) -> "qvector< reg_info_t >::iterator":
        r"""
        erase(self, it) -> qvector< reg_info_t >::iterator
        erase(self, first, last) -> qvector< reg_info_t >::iterator
        """
        return _ida_domain.reginfovec_t_erase(self, *args)

    def find(self, *args) -> "qvector< reg_info_t >::const_iterator":
        r"""
        find(self, x) -> qvector< reg_info_t >::iterator
        find(self, x) -> qvector< reg_info_t >::const_iterator
        """
        return _ida_domain.reginfovec_t_find(self, *args)

    def has(self, x: "reg_info_t const &") -> "bool":
        r"""has(self, x) -> bool"""
        return _ida_domain.reginfovec_t_has(self, x)

    def add_unique(self, x: "reg_info_t const &") -> "bool":
        r"""add_unique(self, x) -> bool"""
        return _ida_domain.reginfovec_t_add_unique(self, x)

    def _del(self, x: "reg_info_t const &") -> "bool":
        r"""_del(self, x) -> bool"""
        return _ida_domain.reginfovec_t__del(self, x)

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.reginfovec_t___len__(self)

    def __getitem__(self, i: "size_t") -> "reg_info_t const &":
        r"""__getitem__(self, i) -> reg_info_t const &"""
        return _ida_domain.reginfovec_t___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "reg_info_t const &") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.reginfovec_t___setitem__(self, i, v)

    def append(self, x: "reg_info_t const &") -> "void":
        r"""append(self, x)"""
        return _ida_domain.reginfovec_t_append(self, x)

    def extend(self, x: "reginfovec_t") -> "void":
        r"""extend(self, x)"""
        return _ida_domain.reginfovec_t_extend(self, x)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register reginfovec_t in _ida_domain:
_ida_domain.reginfovec_t_swigregister(reginfovec_t)
class edmvec_t(object):
    r"""Proxy of C++ qvector< edm_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> edmvec_t
        __init__(self, x) -> edmvec_t
        """
        _ida_domain.edmvec_t_swiginit(self, _ida_domain.new_edmvec_t(*args))
    __swig_destroy__ = _ida_domain.delete_edmvec_t

    def push_back(self, *args) -> "edm_t &":
        r"""
        push_back(self, x)
        push_back(self) -> edm_t
        """
        return _ida_domain.edmvec_t_push_back(self, *args)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.edmvec_t_pop_back(self)

    def size(self) -> "size_t":
        r"""size(self) -> size_t"""
        return _ida_domain.edmvec_t_size(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.edmvec_t_empty(self)

    def at(self, _idx: "size_t") -> "edm_t const &":
        r"""at(self, _idx) -> edm_t"""
        return _ida_domain.edmvec_t_at(self, _idx)

    def qclear(self) -> "void":
        r"""qclear(self)"""
        return _ida_domain.edmvec_t_qclear(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.edmvec_t_clear(self)

    def resize(self, *args) -> "void":
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_domain.edmvec_t_resize(self, *args)

    def grow(self, *args) -> "void":
        r"""grow(self, x=edm_t())"""
        return _ida_domain.edmvec_t_grow(self, *args)

    def capacity(self) -> "size_t":
        r"""capacity(self) -> size_t"""
        return _ida_domain.edmvec_t_capacity(self)

    def reserve(self, cnt: "size_t") -> "void":
        r"""reserve(self, cnt)"""
        return _ida_domain.edmvec_t_reserve(self, cnt)

    def truncate(self) -> "void":
        r"""truncate(self)"""
        return _ida_domain.edmvec_t_truncate(self)

    def swap(self, r: "edmvec_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.edmvec_t_swap(self, r)

    def extract(self) -> "edm_t *":
        r"""extract(self) -> edm_t"""
        return _ida_domain.edmvec_t_extract(self)

    def inject(self, s: "edm_t", len: "size_t") -> "void":
        r"""inject(self, s, len)"""
        return _ida_domain.edmvec_t_inject(self, s, len)

    def __eq__(self, r: "edmvec_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.edmvec_t___eq__(self, r)

    def __ne__(self, r: "edmvec_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.edmvec_t___ne__(self, r)

    def begin(self, *args) -> "qvector< edm_t >::const_iterator":
        r"""
        begin(self) -> edm_t
        begin(self) -> edm_t
        """
        return _ida_domain.edmvec_t_begin(self, *args)

    def end(self, *args) -> "qvector< edm_t >::const_iterator":
        r"""
        end(self) -> edm_t
        end(self) -> edm_t
        """
        return _ida_domain.edmvec_t_end(self, *args)

    def insert(self, it: "edm_t", x: "edm_t") -> "qvector< edm_t >::iterator":
        r"""insert(self, it, x) -> edm_t"""
        return _ida_domain.edmvec_t_insert(self, it, x)

    def erase(self, *args) -> "qvector< edm_t >::iterator":
        r"""
        erase(self, it) -> edm_t
        erase(self, first, last) -> edm_t
        """
        return _ida_domain.edmvec_t_erase(self, *args)

    def find(self, *args) -> "qvector< edm_t >::const_iterator":
        r"""
        find(self, x) -> edm_t
        find(self, x) -> edm_t
        """
        return _ida_domain.edmvec_t_find(self, *args)

    def has(self, x: "edm_t") -> "bool":
        r"""has(self, x) -> bool"""
        return _ida_domain.edmvec_t_has(self, x)

    def add_unique(self, x: "edm_t") -> "bool":
        r"""add_unique(self, x) -> bool"""
        return _ida_domain.edmvec_t_add_unique(self, x)

    def _del(self, x: "edm_t") -> "bool":
        r"""_del(self, x) -> bool"""
        return _ida_domain.edmvec_t__del(self, x)

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.edmvec_t___len__(self)

    def __getitem__(self, i: "size_t") -> "edm_t const &":
        r"""__getitem__(self, i) -> edm_t"""
        return _ida_domain.edmvec_t___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "edm_t") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.edmvec_t___setitem__(self, i, v)

    def append(self, x: "edm_t") -> "void":
        r"""append(self, x)"""
        return _ida_domain.edmvec_t_append(self, x)

    def extend(self, x: "edmvec_t") -> "void":
        r"""extend(self, x)"""
        return _ida_domain.edmvec_t_extend(self, x)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register edmvec_t in _ida_domain:
_ida_domain.edmvec_t_swigregister(edmvec_t)
class argpartvec_t(object):
    r"""Proxy of C++ qvector< argpart_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> argpartvec_t
        __init__(self, x) -> argpartvec_t
        """
        _ida_domain.argpartvec_t_swiginit(self, _ida_domain.new_argpartvec_t(*args))
    __swig_destroy__ = _ida_domain.delete_argpartvec_t

    def push_back(self, *args) -> "argpart_t &":
        r"""
        push_back(self, x)
        push_back(self) -> argpart_t
        """
        return _ida_domain.argpartvec_t_push_back(self, *args)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.argpartvec_t_pop_back(self)

    def size(self) -> "size_t":
        r"""size(self) -> size_t"""
        return _ida_domain.argpartvec_t_size(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.argpartvec_t_empty(self)

    def at(self, _idx: "size_t") -> "argpart_t const &":
        r"""at(self, _idx) -> argpart_t"""
        return _ida_domain.argpartvec_t_at(self, _idx)

    def qclear(self) -> "void":
        r"""qclear(self)"""
        return _ida_domain.argpartvec_t_qclear(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.argpartvec_t_clear(self)

    def resize(self, *args) -> "void":
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_domain.argpartvec_t_resize(self, *args)

    def grow(self, *args) -> "void":
        r"""grow(self, x=argpart_t())"""
        return _ida_domain.argpartvec_t_grow(self, *args)

    def capacity(self) -> "size_t":
        r"""capacity(self) -> size_t"""
        return _ida_domain.argpartvec_t_capacity(self)

    def reserve(self, cnt: "size_t") -> "void":
        r"""reserve(self, cnt)"""
        return _ida_domain.argpartvec_t_reserve(self, cnt)

    def truncate(self) -> "void":
        r"""truncate(self)"""
        return _ida_domain.argpartvec_t_truncate(self)

    def swap(self, r: "argpartvec_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.argpartvec_t_swap(self, r)

    def extract(self) -> "argpart_t *":
        r"""extract(self) -> argpart_t"""
        return _ida_domain.argpartvec_t_extract(self)

    def inject(self, s: "argpart_t", len: "size_t") -> "void":
        r"""inject(self, s, len)"""
        return _ida_domain.argpartvec_t_inject(self, s, len)

    def __eq__(self, r: "argpartvec_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.argpartvec_t___eq__(self, r)

    def __ne__(self, r: "argpartvec_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.argpartvec_t___ne__(self, r)

    def begin(self, *args) -> "qvector< argpart_t >::const_iterator":
        r"""
        begin(self) -> argpart_t
        begin(self) -> argpart_t
        """
        return _ida_domain.argpartvec_t_begin(self, *args)

    def end(self, *args) -> "qvector< argpart_t >::const_iterator":
        r"""
        end(self) -> argpart_t
        end(self) -> argpart_t
        """
        return _ida_domain.argpartvec_t_end(self, *args)

    def insert(self, it: "argpart_t", x: "argpart_t") -> "qvector< argpart_t >::iterator":
        r"""insert(self, it, x) -> argpart_t"""
        return _ida_domain.argpartvec_t_insert(self, it, x)

    def erase(self, *args) -> "qvector< argpart_t >::iterator":
        r"""
        erase(self, it) -> argpart_t
        erase(self, first, last) -> argpart_t
        """
        return _ida_domain.argpartvec_t_erase(self, *args)

    def find(self, *args) -> "qvector< argpart_t >::const_iterator":
        r"""
        find(self, x) -> argpart_t
        find(self, x) -> argpart_t
        """
        return _ida_domain.argpartvec_t_find(self, *args)

    def has(self, x: "argpart_t") -> "bool":
        r"""has(self, x) -> bool"""
        return _ida_domain.argpartvec_t_has(self, x)

    def add_unique(self, x: "argpart_t") -> "bool":
        r"""add_unique(self, x) -> bool"""
        return _ida_domain.argpartvec_t_add_unique(self, x)

    def _del(self, x: "argpart_t") -> "bool":
        r"""_del(self, x) -> bool"""
        return _ida_domain.argpartvec_t__del(self, x)

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.argpartvec_t___len__(self)

    def __getitem__(self, i: "size_t") -> "argpart_t const &":
        r"""__getitem__(self, i) -> argpart_t"""
        return _ida_domain.argpartvec_t___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "argpart_t") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.argpartvec_t___setitem__(self, i, v)

    def append(self, x: "argpart_t") -> "void":
        r"""append(self, x)"""
        return _ida_domain.argpartvec_t_append(self, x)

    def extend(self, x: "argpartvec_t") -> "void":
        r"""extend(self, x)"""
        return _ida_domain.argpartvec_t_extend(self, x)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register argpartvec_t in _ida_domain:
_ida_domain.argpartvec_t_swigregister(argpartvec_t)
class valstrvec_t(object):
    r"""Proxy of C++ qvector< valstr_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> valstrvec_t
        __init__(self, x) -> valstrvec_t
        """
        _ida_domain.valstrvec_t_swiginit(self, _ida_domain.new_valstrvec_t(*args))
    __swig_destroy__ = _ida_domain.delete_valstrvec_t

    def push_back(self, *args) -> "valstr_t &":
        r"""
        push_back(self, x)
        push_back(self) -> valstr_t
        """
        return _ida_domain.valstrvec_t_push_back(self, *args)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.valstrvec_t_pop_back(self)

    def size(self) -> "size_t":
        r"""size(self) -> size_t"""
        return _ida_domain.valstrvec_t_size(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.valstrvec_t_empty(self)

    def at(self, _idx: "size_t") -> "valstr_t const &":
        r"""at(self, _idx) -> valstr_t"""
        return _ida_domain.valstrvec_t_at(self, _idx)

    def qclear(self) -> "void":
        r"""qclear(self)"""
        return _ida_domain.valstrvec_t_qclear(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.valstrvec_t_clear(self)

    def resize(self, *args) -> "void":
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_domain.valstrvec_t_resize(self, *args)

    def grow(self, *args) -> "void":
        r"""grow(self, x=valstr_t())"""
        return _ida_domain.valstrvec_t_grow(self, *args)

    def capacity(self) -> "size_t":
        r"""capacity(self) -> size_t"""
        return _ida_domain.valstrvec_t_capacity(self)

    def reserve(self, cnt: "size_t") -> "void":
        r"""reserve(self, cnt)"""
        return _ida_domain.valstrvec_t_reserve(self, cnt)

    def truncate(self) -> "void":
        r"""truncate(self)"""
        return _ida_domain.valstrvec_t_truncate(self)

    def swap(self, r: "valstrvec_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.valstrvec_t_swap(self, r)

    def extract(self) -> "valstr_t *":
        r"""extract(self) -> valstr_t"""
        return _ida_domain.valstrvec_t_extract(self)

    def inject(self, s: "valstr_t", len: "size_t") -> "void":
        r"""inject(self, s, len)"""
        return _ida_domain.valstrvec_t_inject(self, s, len)

    def begin(self, *args) -> "qvector< valstr_t >::const_iterator":
        r"""
        begin(self) -> valstr_t
        begin(self) -> valstr_t
        """
        return _ida_domain.valstrvec_t_begin(self, *args)

    def end(self, *args) -> "qvector< valstr_t >::const_iterator":
        r"""
        end(self) -> valstr_t
        end(self) -> valstr_t
        """
        return _ida_domain.valstrvec_t_end(self, *args)

    def insert(self, it: "valstr_t", x: "valstr_t") -> "qvector< valstr_t >::iterator":
        r"""insert(self, it, x) -> valstr_t"""
        return _ida_domain.valstrvec_t_insert(self, it, x)

    def erase(self, *args) -> "qvector< valstr_t >::iterator":
        r"""
        erase(self, it) -> valstr_t
        erase(self, first, last) -> valstr_t
        """
        return _ida_domain.valstrvec_t_erase(self, *args)

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.valstrvec_t___len__(self)

    def __getitem__(self, i: "size_t") -> "valstr_t const &":
        r"""__getitem__(self, i) -> valstr_t"""
        return _ida_domain.valstrvec_t___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "valstr_t") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.valstrvec_t___setitem__(self, i, v)

    def append(self, x: "valstr_t") -> "void":
        r"""append(self, x)"""
        return _ida_domain.valstrvec_t_append(self, x)

    def extend(self, x: "valstrvec_t") -> "void":
        r"""extend(self, x)"""
        return _ida_domain.valstrvec_t_extend(self, x)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register valstrvec_t in _ida_domain:
_ida_domain.valstrvec_t_swigregister(valstrvec_t)
class regobjvec_t(object):
    r"""Proxy of C++ qvector< regobj_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> regobjvec_t
        __init__(self, x) -> regobjvec_t
        """
        _ida_domain.regobjvec_t_swiginit(self, _ida_domain.new_regobjvec_t(*args))
    __swig_destroy__ = _ida_domain.delete_regobjvec_t

    def push_back(self, *args) -> "regobj_t &":
        r"""
        push_back(self, x)
        push_back(self) -> regobj_t
        """
        return _ida_domain.regobjvec_t_push_back(self, *args)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.regobjvec_t_pop_back(self)

    def size(self) -> "size_t":
        r"""size(self) -> size_t"""
        return _ida_domain.regobjvec_t_size(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.regobjvec_t_empty(self)

    def at(self, _idx: "size_t") -> "regobj_t const &":
        r"""at(self, _idx) -> regobj_t"""
        return _ida_domain.regobjvec_t_at(self, _idx)

    def qclear(self) -> "void":
        r"""qclear(self)"""
        return _ida_domain.regobjvec_t_qclear(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.regobjvec_t_clear(self)

    def resize(self, *args) -> "void":
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_domain.regobjvec_t_resize(self, *args)

    def grow(self, *args) -> "void":
        r"""grow(self, x=regobj_t())"""
        return _ida_domain.regobjvec_t_grow(self, *args)

    def capacity(self) -> "size_t":
        r"""capacity(self) -> size_t"""
        return _ida_domain.regobjvec_t_capacity(self)

    def reserve(self, cnt: "size_t") -> "void":
        r"""reserve(self, cnt)"""
        return _ida_domain.regobjvec_t_reserve(self, cnt)

    def truncate(self) -> "void":
        r"""truncate(self)"""
        return _ida_domain.regobjvec_t_truncate(self)

    def swap(self, r: "regobjvec_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.regobjvec_t_swap(self, r)

    def extract(self) -> "regobj_t *":
        r"""extract(self) -> regobj_t"""
        return _ida_domain.regobjvec_t_extract(self)

    def inject(self, s: "regobj_t", len: "size_t") -> "void":
        r"""inject(self, s, len)"""
        return _ida_domain.regobjvec_t_inject(self, s, len)

    def begin(self, *args) -> "qvector< regobj_t >::const_iterator":
        r"""
        begin(self) -> regobj_t
        begin(self) -> regobj_t
        """
        return _ida_domain.regobjvec_t_begin(self, *args)

    def end(self, *args) -> "qvector< regobj_t >::const_iterator":
        r"""
        end(self) -> regobj_t
        end(self) -> regobj_t
        """
        return _ida_domain.regobjvec_t_end(self, *args)

    def insert(self, it: "regobj_t", x: "regobj_t") -> "qvector< regobj_t >::iterator":
        r"""insert(self, it, x) -> regobj_t"""
        return _ida_domain.regobjvec_t_insert(self, it, x)

    def erase(self, *args) -> "qvector< regobj_t >::iterator":
        r"""
        erase(self, it) -> regobj_t
        erase(self, first, last) -> regobj_t
        """
        return _ida_domain.regobjvec_t_erase(self, *args)

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.regobjvec_t___len__(self)

    def __getitem__(self, i: "size_t") -> "regobj_t const &":
        r"""__getitem__(self, i) -> regobj_t"""
        return _ida_domain.regobjvec_t___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "regobj_t") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.regobjvec_t___setitem__(self, i, v)

    def append(self, x: "regobj_t") -> "void":
        r"""append(self, x)"""
        return _ida_domain.regobjvec_t_append(self, x)

    def extend(self, x: "regobjvec_t") -> "void":
        r"""extend(self, x)"""
        return _ida_domain.regobjvec_t_extend(self, x)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register regobjvec_t in _ida_domain:
_ida_domain.regobjvec_t_swigregister(regobjvec_t)
class type_attrs_t(object):
    r"""Proxy of C++ qvector< type_attr_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> type_attrs_t
        __init__(self, x) -> type_attrs_t
        """
        _ida_domain.type_attrs_t_swiginit(self, _ida_domain.new_type_attrs_t(*args))
    __swig_destroy__ = _ida_domain.delete_type_attrs_t

    def push_back(self, *args) -> "type_attr_t &":
        r"""
        push_back(self, x)
        push_back(self) -> type_attr_t
        """
        return _ida_domain.type_attrs_t_push_back(self, *args)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.type_attrs_t_pop_back(self)

    def size(self) -> "size_t":
        r"""size(self) -> size_t"""
        return _ida_domain.type_attrs_t_size(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.type_attrs_t_empty(self)

    def at(self, _idx: "size_t") -> "type_attr_t const &":
        r"""at(self, _idx) -> type_attr_t"""
        return _ida_domain.type_attrs_t_at(self, _idx)

    def qclear(self) -> "void":
        r"""qclear(self)"""
        return _ida_domain.type_attrs_t_qclear(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.type_attrs_t_clear(self)

    def resize(self, *args) -> "void":
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_domain.type_attrs_t_resize(self, *args)

    def grow(self, *args) -> "void":
        r"""grow(self, x=type_attr_t())"""
        return _ida_domain.type_attrs_t_grow(self, *args)

    def capacity(self) -> "size_t":
        r"""capacity(self) -> size_t"""
        return _ida_domain.type_attrs_t_capacity(self)

    def reserve(self, cnt: "size_t") -> "void":
        r"""reserve(self, cnt)"""
        return _ida_domain.type_attrs_t_reserve(self, cnt)

    def truncate(self) -> "void":
        r"""truncate(self)"""
        return _ida_domain.type_attrs_t_truncate(self)

    def swap(self, r: "type_attrs_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.type_attrs_t_swap(self, r)

    def extract(self) -> "type_attr_t *":
        r"""extract(self) -> type_attr_t"""
        return _ida_domain.type_attrs_t_extract(self)

    def inject(self, s: "type_attr_t", len: "size_t") -> "void":
        r"""inject(self, s, len)"""
        return _ida_domain.type_attrs_t_inject(self, s, len)

    def begin(self, *args) -> "qvector< type_attr_t >::const_iterator":
        r"""
        begin(self) -> type_attr_t
        begin(self) -> type_attr_t
        """
        return _ida_domain.type_attrs_t_begin(self, *args)

    def end(self, *args) -> "qvector< type_attr_t >::const_iterator":
        r"""
        end(self) -> type_attr_t
        end(self) -> type_attr_t
        """
        return _ida_domain.type_attrs_t_end(self, *args)

    def insert(self, it: "type_attr_t", x: "type_attr_t") -> "qvector< type_attr_t >::iterator":
        r"""insert(self, it, x) -> type_attr_t"""
        return _ida_domain.type_attrs_t_insert(self, it, x)

    def erase(self, *args) -> "qvector< type_attr_t >::iterator":
        r"""
        erase(self, it) -> type_attr_t
        erase(self, first, last) -> type_attr_t
        """
        return _ida_domain.type_attrs_t_erase(self, *args)

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.type_attrs_t___len__(self)

    def __getitem__(self, i: "size_t") -> "type_attr_t const &":
        r"""__getitem__(self, i) -> type_attr_t"""
        return _ida_domain.type_attrs_t___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "type_attr_t") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.type_attrs_t___setitem__(self, i, v)

    def append(self, x: "type_attr_t") -> "void":
        r"""append(self, x)"""
        return _ida_domain.type_attrs_t_append(self, x)

    def extend(self, x: "type_attrs_t") -> "void":
        r"""extend(self, x)"""
        return _ida_domain.type_attrs_t_extend(self, x)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register type_attrs_t in _ida_domain:
_ida_domain.type_attrs_t_swigregister(type_attrs_t)
class udtmembervec_template_t(object):
    r"""Proxy of C++ qvector< udm_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> udtmembervec_template_t
        __init__(self, x) -> udtmembervec_template_t
        """
        _ida_domain.udtmembervec_template_t_swiginit(self, _ida_domain.new_udtmembervec_template_t(*args))
    __swig_destroy__ = _ida_domain.delete_udtmembervec_template_t

    def push_back(self, *args) -> "udm_t &":
        r"""
        push_back(self, x)
        push_back(self) -> udm_t
        """
        return _ida_domain.udtmembervec_template_t_push_back(self, *args)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.udtmembervec_template_t_pop_back(self)

    def size(self) -> "size_t":
        r"""size(self) -> size_t"""
        return _ida_domain.udtmembervec_template_t_size(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.udtmembervec_template_t_empty(self)

    def at(self, _idx: "size_t") -> "udm_t const &":
        r"""at(self, _idx) -> udm_t"""
        return _ida_domain.udtmembervec_template_t_at(self, _idx)

    def qclear(self) -> "void":
        r"""qclear(self)"""
        return _ida_domain.udtmembervec_template_t_qclear(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.udtmembervec_template_t_clear(self)

    def resize(self, *args) -> "void":
        r"""
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_domain.udtmembervec_template_t_resize(self, *args)

    def grow(self, *args) -> "void":
        r"""grow(self, x=udm_t())"""
        return _ida_domain.udtmembervec_template_t_grow(self, *args)

    def capacity(self) -> "size_t":
        r"""capacity(self) -> size_t"""
        return _ida_domain.udtmembervec_template_t_capacity(self)

    def reserve(self, cnt: "size_t") -> "void":
        r"""reserve(self, cnt)"""
        return _ida_domain.udtmembervec_template_t_reserve(self, cnt)

    def truncate(self) -> "void":
        r"""truncate(self)"""
        return _ida_domain.udtmembervec_template_t_truncate(self)

    def swap(self, r: "udtmembervec_template_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.udtmembervec_template_t_swap(self, r)

    def extract(self) -> "udm_t *":
        r"""extract(self) -> udm_t"""
        return _ida_domain.udtmembervec_template_t_extract(self)

    def inject(self, s: "udm_t", len: "size_t") -> "void":
        r"""inject(self, s, len)"""
        return _ida_domain.udtmembervec_template_t_inject(self, s, len)

    def __eq__(self, r: "udtmembervec_template_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.udtmembervec_template_t___eq__(self, r)

    def __ne__(self, r: "udtmembervec_template_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.udtmembervec_template_t___ne__(self, r)

    def begin(self, *args) -> "qvector< udm_t >::const_iterator":
        r"""
        begin(self) -> udm_t
        begin(self) -> udm_t
        """
        return _ida_domain.udtmembervec_template_t_begin(self, *args)

    def end(self, *args) -> "qvector< udm_t >::const_iterator":
        r"""
        end(self) -> udm_t
        end(self) -> udm_t
        """
        return _ida_domain.udtmembervec_template_t_end(self, *args)

    def insert(self, it: "udm_t", x: "udm_t") -> "qvector< udm_t >::iterator":
        r"""insert(self, it, x) -> udm_t"""
        return _ida_domain.udtmembervec_template_t_insert(self, it, x)

    def erase(self, *args) -> "qvector< udm_t >::iterator":
        r"""
        erase(self, it) -> udm_t
        erase(self, first, last) -> udm_t
        """
        return _ida_domain.udtmembervec_template_t_erase(self, *args)

    def find(self, *args) -> "qvector< udm_t >::const_iterator":
        r"""
        find(self, x) -> udm_t
        find(self, x) -> udm_t
        """
        return _ida_domain.udtmembervec_template_t_find(self, *args)

    def has(self, x: "udm_t") -> "bool":
        r"""has(self, x) -> bool"""
        return _ida_domain.udtmembervec_template_t_has(self, x)

    def add_unique(self, x: "udm_t") -> "bool":
        r"""add_unique(self, x) -> bool"""
        return _ida_domain.udtmembervec_template_t_add_unique(self, x)

    def _del(self, x: "udm_t") -> "bool":
        r"""_del(self, x) -> bool"""
        return _ida_domain.udtmembervec_template_t__del(self, x)

    def __len__(self) -> "size_t":
        r"""__len__(self) -> size_t"""
        return _ida_domain.udtmembervec_template_t___len__(self)

    def __getitem__(self, i: "size_t") -> "udm_t const &":
        r"""__getitem__(self, i) -> udm_t"""
        return _ida_domain.udtmembervec_template_t___getitem__(self, i)

    def __setitem__(self, i: "size_t", v: "udm_t") -> "void":
        r"""__setitem__(self, i, v)"""
        return _ida_domain.udtmembervec_template_t___setitem__(self, i, v)

    def append(self, x: "udm_t") -> "void":
        r"""append(self, x)"""
        return _ida_domain.udtmembervec_template_t_append(self, x)

    def extend(self, x: "udtmembervec_template_t") -> "void":
        r"""extend(self, x)"""
        return _ida_domain.udtmembervec_template_t_extend(self, x)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator


# Register udtmembervec_template_t in _ida_domain:
_ida_domain.udtmembervec_template_t_swigregister(udtmembervec_template_t)
RESERVED_BYTE = _ida_domain.RESERVED_BYTE


def is_type_const(t: "type_t") -> "bool":
    r"""is_type_const(t) -> bool"""
    return _ida_domain.is_type_const(t)

def is_type_volatile(t: "type_t") -> "bool":
    r"""is_type_volatile(t) -> bool"""
    return _ida_domain.is_type_volatile(t)

def get_base_type(t: "type_t") -> "type_t":
    r"""get_base_type(t) -> type_t"""
    return _ida_domain.get_base_type(t)

def get_type_flags(t: "type_t") -> "type_t":
    r"""get_type_flags(t) -> type_t"""
    return _ida_domain.get_type_flags(t)

def get_full_type(t: "type_t") -> "type_t":
    r"""get_full_type(t) -> type_t"""
    return _ida_domain.get_full_type(t)

def is_typeid_last(t: "type_t") -> "bool":
    r"""is_typeid_last(t) -> bool"""
    return _ida_domain.is_typeid_last(t)

def is_type_partial(t: "type_t") -> "bool":
    r"""is_type_partial(t) -> bool"""
    return _ida_domain.is_type_partial(t)

def is_type_void(t: "type_t") -> "bool":
    r"""is_type_void(t) -> bool"""
    return _ida_domain.is_type_void(t)

def is_type_unknown(t: "type_t") -> "bool":
    r"""is_type_unknown(t) -> bool"""
    return _ida_domain.is_type_unknown(t)

def is_type_ptr(t: "type_t") -> "bool":
    r"""is_type_ptr(t) -> bool"""
    return _ida_domain.is_type_ptr(t)

def is_type_complex(t: "type_t") -> "bool":
    r"""is_type_complex(t) -> bool"""
    return _ida_domain.is_type_complex(t)

def is_type_func(t: "type_t") -> "bool":
    r"""is_type_func(t) -> bool"""
    return _ida_domain.is_type_func(t)

def is_type_array(t: "type_t") -> "bool":
    r"""is_type_array(t) -> bool"""
    return _ida_domain.is_type_array(t)

def is_type_typedef(t: "type_t") -> "bool":
    r"""is_type_typedef(t) -> bool"""
    return _ida_domain.is_type_typedef(t)

def is_type_sue(t: "type_t") -> "bool":
    r"""is_type_sue(t) -> bool"""
    return _ida_domain.is_type_sue(t)

def is_type_struct(t: "type_t") -> "bool":
    r"""is_type_struct(t) -> bool"""
    return _ida_domain.is_type_struct(t)

def is_type_union(t: "type_t") -> "bool":
    r"""is_type_union(t) -> bool"""
    return _ida_domain.is_type_union(t)

def is_type_struni(t: "type_t") -> "bool":
    r"""is_type_struni(t) -> bool"""
    return _ida_domain.is_type_struni(t)

def is_type_enum(t: "type_t") -> "bool":
    r"""is_type_enum(t) -> bool"""
    return _ida_domain.is_type_enum(t)

def is_type_bitfld(t: "type_t") -> "bool":
    r"""is_type_bitfld(t) -> bool"""
    return _ida_domain.is_type_bitfld(t)

def is_type_int(bt: "type_t") -> "bool":
    r"""is_type_int(bt) -> bool"""
    return _ida_domain.is_type_int(bt)

def is_type_int128(t: "type_t") -> "bool":
    r"""is_type_int128(t) -> bool"""
    return _ida_domain.is_type_int128(t)

def is_type_int64(t: "type_t") -> "bool":
    r"""is_type_int64(t) -> bool"""
    return _ida_domain.is_type_int64(t)

def is_type_int32(t: "type_t") -> "bool":
    r"""is_type_int32(t) -> bool"""
    return _ida_domain.is_type_int32(t)

def is_type_int16(t: "type_t") -> "bool":
    r"""is_type_int16(t) -> bool"""
    return _ida_domain.is_type_int16(t)

def is_type_char(t: "type_t") -> "bool":
    r"""is_type_char(t) -> bool"""
    return _ida_domain.is_type_char(t)

def is_type_paf(t: "type_t") -> "bool":
    r"""is_type_paf(t) -> bool"""
    return _ida_domain.is_type_paf(t)

def is_type_ptr_or_array(t: "type_t") -> "bool":
    r"""is_type_ptr_or_array(t) -> bool"""
    return _ida_domain.is_type_ptr_or_array(t)

def is_type_floating(t: "type_t") -> "bool":
    r"""is_type_floating(t) -> bool"""
    return _ida_domain.is_type_floating(t)

def is_type_integral(t: "type_t") -> "bool":
    r"""is_type_integral(t) -> bool"""
    return _ida_domain.is_type_integral(t)

def is_type_ext_integral(t: "type_t") -> "bool":
    r"""is_type_ext_integral(t) -> bool"""
    return _ida_domain.is_type_ext_integral(t)

def is_type_arithmetic(t: "type_t") -> "bool":
    r"""is_type_arithmetic(t) -> bool"""
    return _ida_domain.is_type_arithmetic(t)

def is_type_ext_arithmetic(t: "type_t") -> "bool":
    r"""is_type_ext_arithmetic(t) -> bool"""
    return _ida_domain.is_type_ext_arithmetic(t)

def is_type_uint(t: "type_t") -> "bool":
    r"""is_type_uint(t) -> bool"""
    return _ida_domain.is_type_uint(t)

def is_type_uchar(t: "type_t") -> "bool":
    r"""is_type_uchar(t) -> bool"""
    return _ida_domain.is_type_uchar(t)

def is_type_uint16(t: "type_t") -> "bool":
    r"""is_type_uint16(t) -> bool"""
    return _ida_domain.is_type_uint16(t)

def is_type_uint32(t: "type_t") -> "bool":
    r"""is_type_uint32(t) -> bool"""
    return _ida_domain.is_type_uint32(t)

def is_type_uint64(t: "type_t") -> "bool":
    r"""is_type_uint64(t) -> bool"""
    return _ida_domain.is_type_uint64(t)

def is_type_uint128(t: "type_t") -> "bool":
    r"""is_type_uint128(t) -> bool"""
    return _ida_domain.is_type_uint128(t)

def is_type_ldouble(t: "type_t") -> "bool":
    r"""is_type_ldouble(t) -> bool"""
    return _ida_domain.is_type_ldouble(t)

def is_type_double(t: "type_t") -> "bool":
    r"""is_type_double(t) -> bool"""
    return _ida_domain.is_type_double(t)

def is_type_float(t: "type_t") -> "bool":
    r"""is_type_float(t) -> bool"""
    return _ida_domain.is_type_float(t)

def is_type_tbyte(t: "type_t") -> "bool":
    r"""is_type_tbyte(t) -> bool"""
    return _ida_domain.is_type_tbyte(t)

def is_type_bool(t: "type_t") -> "bool":
    r"""is_type_bool(t) -> bool"""
    return _ida_domain.is_type_bool(t)
TAH_BYTE = _ida_domain.TAH_BYTE

FAH_BYTE = _ida_domain.FAH_BYTE

MAX_DECL_ALIGN = _ida_domain.MAX_DECL_ALIGN

TAH_HASATTRS = _ida_domain.TAH_HASATTRS

TAUDT_UNALIGNED = _ida_domain.TAUDT_UNALIGNED

TAUDT_MSSTRUCT = _ida_domain.TAUDT_MSSTRUCT

TAUDT_CPPOBJ = _ida_domain.TAUDT_CPPOBJ

TAUDT_VFTABLE = _ida_domain.TAUDT_VFTABLE

TAUDT_FIXED = _ida_domain.TAUDT_FIXED

TAFLD_BASECLASS = _ida_domain.TAFLD_BASECLASS

TAFLD_UNALIGNED = _ida_domain.TAFLD_UNALIGNED

TAFLD_VIRTBASE = _ida_domain.TAFLD_VIRTBASE

TAFLD_VFTABLE = _ida_domain.TAFLD_VFTABLE

TAFLD_METHOD = _ida_domain.TAFLD_METHOD

TAFLD_GAP = _ida_domain.TAFLD_GAP

TAFLD_REGCMT = _ida_domain.TAFLD_REGCMT

TAFLD_FRAME_R = _ida_domain.TAFLD_FRAME_R

TAFLD_FRAME_S = _ida_domain.TAFLD_FRAME_S

TAFLD_BYTIL = _ida_domain.TAFLD_BYTIL

TAPTR_PTR32 = _ida_domain.TAPTR_PTR32

TAPTR_PTR64 = _ida_domain.TAPTR_PTR64

TAPTR_RESTRICT = _ida_domain.TAPTR_RESTRICT

TAPTR_SHIFTED = _ida_domain.TAPTR_SHIFTED

TAENUM_64BIT = _ida_domain.TAENUM_64BIT

TAENUM_UNSIGNED = _ida_domain.TAENUM_UNSIGNED

TAENUM_SIGNED = _ida_domain.TAENUM_SIGNED

TAENUM_OCT = _ida_domain.TAENUM_OCT

TAENUM_BIN = _ida_domain.TAENUM_BIN

TAENUM_NUMSIGN = _ida_domain.TAENUM_NUMSIGN

TAENUM_LZERO = _ida_domain.TAENUM_LZERO

TAH_ALL = _ida_domain.TAH_ALL


def is_tah_byte(t: "type_t") -> "bool":
    r"""is_tah_byte(t) -> bool"""
    return _ida_domain.is_tah_byte(t)

def is_sdacl_byte(t: "type_t") -> "bool":
    r"""is_sdacl_byte(t) -> bool"""
    return _ida_domain.is_sdacl_byte(t)
class type_attr_t(object):
    r"""Proxy of C++ type_attr_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    key: "qstring" = property(_ida_domain.type_attr_t_key_get, _ida_domain.type_attr_t_key_set, doc=r"""key""")
    value: "bytevec_t" = property(_ida_domain.type_attr_t_value_get, _ida_domain.type_attr_t_value_set, doc=r"""value""")

    def __lt__(self, r: "type_attr_t") -> "bool":
        r"""__lt__(self, r) -> bool"""
        return _ida_domain.type_attr_t___lt__(self, r)

    def __ge__(self, r: "type_attr_t") -> "bool":
        r"""__ge__(self, r) -> bool"""
        return _ida_domain.type_attr_t___ge__(self, r)

    def __init__(self):
        r"""__init__(self) -> type_attr_t"""
        _ida_domain.type_attr_t_swiginit(self, _ida_domain.new_type_attr_t())
    __swig_destroy__ = _ida_domain.delete_type_attr_t

# Register type_attr_t in _ida_domain:
_ida_domain.type_attr_t_swigregister(type_attr_t)
TYPE_BASE_MASK = cvar.TYPE_BASE_MASK
TYPE_FLAGS_MASK = cvar.TYPE_FLAGS_MASK
TYPE_MODIF_MASK = cvar.TYPE_MODIF_MASK
TYPE_FULL_MASK = cvar.TYPE_FULL_MASK
BT_UNK = cvar.BT_UNK
BT_VOID = cvar.BT_VOID
BTMT_SIZE0 = cvar.BTMT_SIZE0
BTMT_SIZE12 = cvar.BTMT_SIZE12
BTMT_SIZE48 = cvar.BTMT_SIZE48
BTMT_SIZE128 = cvar.BTMT_SIZE128
BT_INT8 = cvar.BT_INT8
BT_INT16 = cvar.BT_INT16
BT_INT32 = cvar.BT_INT32
BT_INT64 = cvar.BT_INT64
BT_INT128 = cvar.BT_INT128
BT_INT = cvar.BT_INT
BTMT_UNKSIGN = cvar.BTMT_UNKSIGN
BTMT_SIGNED = cvar.BTMT_SIGNED
BTMT_USIGNED = cvar.BTMT_USIGNED
BTMT_UNSIGNED = cvar.BTMT_UNSIGNED
BTMT_CHAR = cvar.BTMT_CHAR
BT_BOOL = cvar.BT_BOOL
BTMT_DEFBOOL = cvar.BTMT_DEFBOOL
BTMT_BOOL1 = cvar.BTMT_BOOL1
BTMT_BOOL2 = cvar.BTMT_BOOL2
BTMT_BOOL8 = cvar.BTMT_BOOL8
BTMT_BOOL4 = cvar.BTMT_BOOL4
BT_FLOAT = cvar.BT_FLOAT
BTMT_FLOAT = cvar.BTMT_FLOAT
BTMT_DOUBLE = cvar.BTMT_DOUBLE
BTMT_LNGDBL = cvar.BTMT_LNGDBL
BTMT_SPECFLT = cvar.BTMT_SPECFLT
_BT_LAST_BASIC = cvar._BT_LAST_BASIC
BT_PTR = cvar.BT_PTR
BTMT_DEFPTR = cvar.BTMT_DEFPTR
BTMT_NEAR = cvar.BTMT_NEAR
BTMT_FAR = cvar.BTMT_FAR
BTMT_CLOSURE = cvar.BTMT_CLOSURE
BT_ARRAY = cvar.BT_ARRAY
BTMT_NONBASED = cvar.BTMT_NONBASED
BTMT_ARRESERV = cvar.BTMT_ARRESERV
BT_FUNC = cvar.BT_FUNC
BTMT_DEFCALL = cvar.BTMT_DEFCALL
BTMT_NEARCALL = cvar.BTMT_NEARCALL
BTMT_FARCALL = cvar.BTMT_FARCALL
BTMT_INTCALL = cvar.BTMT_INTCALL
BT_COMPLEX = cvar.BT_COMPLEX
BTMT_STRUCT = cvar.BTMT_STRUCT
BTMT_UNION = cvar.BTMT_UNION
BTMT_ENUM = cvar.BTMT_ENUM
BTMT_TYPEDEF = cvar.BTMT_TYPEDEF
BT_BITFIELD = cvar.BT_BITFIELD
BTMT_BFLDI8 = cvar.BTMT_BFLDI8
BTMT_BFLDI16 = cvar.BTMT_BFLDI16
BTMT_BFLDI32 = cvar.BTMT_BFLDI32
BTMT_BFLDI64 = cvar.BTMT_BFLDI64
BT_RESERVED = cvar.BT_RESERVED
BTM_CONST = cvar.BTM_CONST
BTM_VOLATILE = cvar.BTM_VOLATILE
BTE_SIZE_MASK = cvar.BTE_SIZE_MASK
BTE_RESERVED = cvar.BTE_RESERVED
BTE_BITMASK = cvar.BTE_BITMASK
BTE_OUT_MASK = cvar.BTE_OUT_MASK
BTE_HEX = cvar.BTE_HEX
BTE_CHAR = cvar.BTE_CHAR
BTE_SDEC = cvar.BTE_SDEC
BTE_UDEC = cvar.BTE_UDEC
BTE_ALWAYS = cvar.BTE_ALWAYS
BT_SEGREG = cvar.BT_SEGREG
BT_UNK_BYTE = cvar.BT_UNK_BYTE
BT_UNK_WORD = cvar.BT_UNK_WORD
BT_UNK_DWORD = cvar.BT_UNK_DWORD
BT_UNK_QWORD = cvar.BT_UNK_QWORD
BT_UNK_OWORD = cvar.BT_UNK_OWORD
BT_UNKNOWN = cvar.BT_UNKNOWN
BTF_BYTE = cvar.BTF_BYTE
BTF_UNK = cvar.BTF_UNK
BTF_VOID = cvar.BTF_VOID
BTF_INT8 = cvar.BTF_INT8
BTF_CHAR = cvar.BTF_CHAR
BTF_UCHAR = cvar.BTF_UCHAR
BTF_UINT8 = cvar.BTF_UINT8
BTF_INT16 = cvar.BTF_INT16
BTF_UINT16 = cvar.BTF_UINT16
BTF_INT32 = cvar.BTF_INT32
BTF_UINT32 = cvar.BTF_UINT32
BTF_INT64 = cvar.BTF_INT64
BTF_UINT64 = cvar.BTF_UINT64
BTF_INT128 = cvar.BTF_INT128
BTF_UINT128 = cvar.BTF_UINT128
BTF_INT = cvar.BTF_INT
BTF_UINT = cvar.BTF_UINT
BTF_SINT = cvar.BTF_SINT
BTF_BOOL = cvar.BTF_BOOL
BTF_FLOAT = cvar.BTF_FLOAT
BTF_DOUBLE = cvar.BTF_DOUBLE
BTF_LDOUBLE = cvar.BTF_LDOUBLE
BTF_TBYTE = cvar.BTF_TBYTE
BTF_STRUCT = cvar.BTF_STRUCT
BTF_UNION = cvar.BTF_UNION
BTF_ENUM = cvar.BTF_ENUM
BTF_TYPEDEF = cvar.BTF_TYPEDEF
TA_ORG_TYPEDEF = _ida_domain.TA_ORG_TYPEDEF

TA_ORG_ARRDIM = _ida_domain.TA_ORG_ARRDIM

TA_FORMAT = _ida_domain.TA_FORMAT

TA_VALUE_REPR = _ida_domain.TA_VALUE_REPR



def append_argloc(out: "qtype *", vloc: "argloc_t") -> "bool":
    r"""append_argloc(out, vloc) -> bool"""
    return _ida_domain.append_argloc(out, vloc)

def extract_argloc(vloc: "argloc_t", ptype: "type_t const **", forbid_stkoff: "bool") -> "bool":
    r"""extract_argloc(vloc, ptype, forbid_stkoff) -> bool"""
    return _ida_domain.extract_argloc(vloc, ptype, forbid_stkoff)

def resolve_typedef(til: "til_t", type: "type_t const *") -> "type_t const *":
    r"""resolve_typedef(til, type) -> type_t const *"""
    return _ida_domain.resolve_typedef(til, type)

def is_restype_void(til: "til_t", type: "type_t const *") -> "bool":
    r"""is_restype_void(til, type) -> bool"""
    return _ida_domain.is_restype_void(til, type)

def is_restype_enum(til: "til_t", type: "type_t const *") -> "bool":
    r"""is_restype_enum(til, type) -> bool"""
    return _ida_domain.is_restype_enum(til, type)

def is_restype_struni(til: "til_t", type: "type_t const *") -> "bool":
    r"""is_restype_struni(til, type) -> bool"""
    return _ida_domain.is_restype_struni(til, type)

def is_restype_struct(til: "til_t", type: "type_t const *") -> "bool":
    r"""is_restype_struct(til, type) -> bool"""
    return _ida_domain.is_restype_struct(til, type)

def get_scalar_bt(size: "int") -> "type_t":
    r"""get_scalar_bt(size) -> type_t"""
    return _ida_domain.get_scalar_bt(size)
class til_t(object):
    r"""Proxy of C++ til_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name: "char *" = property(_ida_domain.til_t_name_get, _ida_domain.til_t_name_set, doc=r"""name""")
    desc: "char *" = property(_ida_domain.til_t_desc_get, _ida_domain.til_t_desc_set, doc=r"""desc""")
    nbases: "int" = property(_ida_domain.til_t_nbases_get, _ida_domain.til_t_nbases_set, doc=r"""nbases""")
    flags: "uint32" = property(_ida_domain.til_t_flags_get, _ida_domain.til_t_flags_set, doc=r"""flags""")

    def is_dirty(self) -> "bool":
        r"""is_dirty(self) -> bool"""
        return _ida_domain.til_t_is_dirty(self)

    def set_dirty(self) -> "void":
        r"""set_dirty(self)"""
        return _ida_domain.til_t_set_dirty(self)

    def find_base(self, n: "char const *") -> "til_t *":
        r"""find_base(self, n) -> til_t"""
        return _ida_domain.til_t_find_base(self, n)
    cc: "compiler_info_t" = property(_ida_domain.til_t_cc_get, _ida_domain.til_t_cc_set, doc=r"""cc""")
    nrefs: "int" = property(_ida_domain.til_t_nrefs_get, _ida_domain.til_t_nrefs_set, doc=r"""nrefs""")
    nstreams: "int" = property(_ida_domain.til_t_nstreams_get, _ida_domain.til_t_nstreams_set, doc=r"""nstreams""")
    streams: "til_stream_t **" = property(_ida_domain.til_t_streams_get, _ida_domain.til_t_streams_set, doc=r"""streams""")

    def base(self, n: "int") -> "til_t *":
        r"""base(self, n) -> til_t"""
        return _ida_domain.til_t_base(self, n)

    def __eq__(self, r: "til_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.til_t___eq__(self, r)

    def __ne__(self, r: "til_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.til_t___ne__(self, r)

    def import_type(self, src: "tinfo_t") -> "tinfo_t":
        r"""import_type(self, src) -> tinfo_t"""
        return _ida_domain.til_t_import_type(self, src)

    def named_types(self):
        for name in self.type_names:
            tif = tinfo_t() # a new type. Always
            if tif.get_named_type(self, name):
                yield tif

    def numbered_types(self):
        for ord in range(1, get_ordinal_limit(self)):
            tif = tinfo_t() # a new type. Always
            if tif.get_numbered_type(self, ord):
                yield tif

    def get_named_type(self, name):
        tif = tinfo_t()
        if tif.get_named_type(self, name):
            return tif

    def get_numbered_type(self, ordinal):
        tif = tinfo_t()
        if tif.get_numbered_type(self, ordinal):
            return tif

    def get_type_names(self):
        n = first_named_type(self, NTF_TYPE)
        while n:
            yield n
            n = next_named_type(self, n, NTF_TYPE)

    type_names = property(get_type_names)


    def __init__(self):
        r"""__init__(self) -> til_t"""
        _ida_domain.til_t_swiginit(self, _ida_domain.new_til_t())
    __swig_destroy__ = _ida_domain.delete_til_t

# Register til_t in _ida_domain:
_ida_domain.til_t_swigregister(til_t)
no_sign = cvar.no_sign
type_signed = cvar.type_signed
type_unsigned = cvar.type_unsigned
TIL_ZIP = _ida_domain.TIL_ZIP

TIL_MAC = _ida_domain.TIL_MAC

TIL_ESI = _ida_domain.TIL_ESI

TIL_UNI = _ida_domain.TIL_UNI

TIL_ORD = _ida_domain.TIL_ORD

TIL_ALI = _ida_domain.TIL_ALI

TIL_MOD = _ida_domain.TIL_MOD

TIL_STM = _ida_domain.TIL_STM

TIL_SLD = _ida_domain.TIL_SLD



def new_til(name: "char const *", desc: "char const *") -> "til_t *":
    r"""new_til(name, desc) -> til_t"""
    return _ida_domain.new_til(name, desc)
TIL_ADD_FAILED = _ida_domain.TIL_ADD_FAILED

TIL_ADD_OK = _ida_domain.TIL_ADD_OK

TIL_ADD_ALREADY = _ida_domain.TIL_ADD_ALREADY


def load_til(name: "char const *", tildir: "char const *"=None) -> "qstring *":
    r"""load_til(name, tildir=None) -> til_t"""
    return _ida_domain.load_til(name, tildir)

def compact_til(ti: "til_t") -> "bool":
    r"""compact_til(ti) -> bool"""
    return _ida_domain.compact_til(ti)

def store_til(ti: "til_t", tildir: "char const *", name: "char const *") -> "bool":
    r"""store_til(ti, tildir, name) -> bool"""
    return _ida_domain.store_til(ti, tildir, name)

def free_til(ti: "til_t") -> "void":
    r"""free_til(ti)"""
    return _ida_domain.free_til(ti)

def load_til_header(tildir: "char const *", name: "char const *") -> "qstring *":
    r"""load_til_header(tildir, name) -> til_t"""
    return _ida_domain.load_til_header(tildir, name)

def is_code_far(cm: "cm_t") -> "bool":
    r"""is_code_far(cm) -> bool"""
    return _ida_domain.is_code_far(cm)

def is_data_far(cm: "cm_t") -> "bool":
    r"""is_data_far(cm) -> bool"""
    return _ida_domain.is_data_far(cm)
class rrel_t(object):
    r"""Proxy of C++ rrel_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    off: "sval_t" = property(_ida_domain.rrel_t_off_get, _ida_domain.rrel_t_off_set, doc=r"""off""")
    reg: "int" = property(_ida_domain.rrel_t_reg_get, _ida_domain.rrel_t_reg_set, doc=r"""reg""")

    def __init__(self):
        r"""__init__(self) -> rrel_t"""
        _ida_domain.rrel_t_swiginit(self, _ida_domain.new_rrel_t())
    __swig_destroy__ = _ida_domain.delete_rrel_t

# Register rrel_t in _ida_domain:
_ida_domain.rrel_t_swigregister(rrel_t)
CM_MASK = cvar.CM_MASK
CM_UNKNOWN = cvar.CM_UNKNOWN
CM_N8_F16 = cvar.CM_N8_F16
CM_N64 = cvar.CM_N64
CM_N16_F32 = cvar.CM_N16_F32
CM_N32_F48 = cvar.CM_N32_F48
CM_M_MASK = cvar.CM_M_MASK
CM_M_NN = cvar.CM_M_NN
CM_M_FF = cvar.CM_M_FF
CM_M_NF = cvar.CM_M_NF
CM_M_FN = cvar.CM_M_FN
CM_CC_MASK = cvar.CM_CC_MASK
CM_CC_INVALID = cvar.CM_CC_INVALID
CM_CC_UNKNOWN = cvar.CM_CC_UNKNOWN
CM_CC_VOIDARG = cvar.CM_CC_VOIDARG
CM_CC_CDECL = cvar.CM_CC_CDECL
CM_CC_ELLIPSIS = cvar.CM_CC_ELLIPSIS
CM_CC_STDCALL = cvar.CM_CC_STDCALL
CM_CC_PASCAL = cvar.CM_CC_PASCAL
CM_CC_FASTCALL = cvar.CM_CC_FASTCALL
CM_CC_THISCALL = cvar.CM_CC_THISCALL
CM_CC_SWIFT = cvar.CM_CC_SWIFT
CM_CC_SPOILED = cvar.CM_CC_SPOILED
CM_CC_GOLANG = cvar.CM_CC_GOLANG
CM_CC_RESERVE3 = cvar.CM_CC_RESERVE3
CM_CC_SPECIALE = cvar.CM_CC_SPECIALE
CM_CC_SPECIALP = cvar.CM_CC_SPECIALP
CM_CC_SPECIAL = cvar.CM_CC_SPECIAL
BFA_NORET = cvar.BFA_NORET
BFA_PURE = cvar.BFA_PURE
BFA_HIGH = cvar.BFA_HIGH
BFA_STATIC = cvar.BFA_STATIC
BFA_VIRTUAL = cvar.BFA_VIRTUAL
BFA_FUNC_MARKER = cvar.BFA_FUNC_MARKER
BFA_FUNC_EXT_FORMAT = cvar.BFA_FUNC_EXT_FORMAT
ALOC_NONE = cvar.ALOC_NONE
ALOC_STACK = cvar.ALOC_STACK
ALOC_DIST = cvar.ALOC_DIST
ALOC_REG1 = cvar.ALOC_REG1
ALOC_REG2 = cvar.ALOC_REG2
ALOC_RREL = cvar.ALOC_RREL
ALOC_STATIC = cvar.ALOC_STATIC
ALOC_CUSTOM = cvar.ALOC_CUSTOM

class argloc_t(object):
    r"""Proxy of C++ argloc_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> argloc_t
        __init__(self, r) -> argloc_t
        """
        _ida_domain.argloc_t_swiginit(self, _ida_domain.new_argloc_t(*args))
    __swig_destroy__ = _ida_domain.delete_argloc_t

    def swap(self, r: "argloc_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.argloc_t_swap(self, r)

    def atype(self) -> "argloc_type_t":
        r"""atype(self) -> argloc_type_t"""
        return _ida_domain.argloc_t_atype(self)

    def is_reg1(self) -> "bool":
        r"""is_reg1(self) -> bool"""
        return _ida_domain.argloc_t_is_reg1(self)

    def is_reg2(self) -> "bool":
        r"""is_reg2(self) -> bool"""
        return _ida_domain.argloc_t_is_reg2(self)

    def is_reg(self) -> "bool":
        r"""is_reg(self) -> bool"""
        return _ida_domain.argloc_t_is_reg(self)

    def is_rrel(self) -> "bool":
        r"""is_rrel(self) -> bool"""
        return _ida_domain.argloc_t_is_rrel(self)

    def is_ea(self) -> "bool":
        r"""is_ea(self) -> bool"""
        return _ida_domain.argloc_t_is_ea(self)

    def is_stkoff(self) -> "bool":
        r"""is_stkoff(self) -> bool"""
        return _ida_domain.argloc_t_is_stkoff(self)

    def is_scattered(self) -> "bool":
        r"""is_scattered(self) -> bool"""
        return _ida_domain.argloc_t_is_scattered(self)

    def has_reg(self) -> "bool":
        r"""has_reg(self) -> bool"""
        return _ida_domain.argloc_t_has_reg(self)

    def has_stkoff(self) -> "bool":
        r"""has_stkoff(self) -> bool"""
        return _ida_domain.argloc_t_has_stkoff(self)

    def is_mixed_scattered(self) -> "bool":
        r"""is_mixed_scattered(self) -> bool"""
        return _ida_domain.argloc_t_is_mixed_scattered(self)

    def in_stack(self) -> "bool":
        r"""in_stack(self) -> bool"""
        return _ida_domain.argloc_t_in_stack(self)

    def is_fragmented(self) -> "bool":
        r"""is_fragmented(self) -> bool"""
        return _ida_domain.argloc_t_is_fragmented(self)

    def is_custom(self) -> "bool":
        r"""is_custom(self) -> bool"""
        return _ida_domain.argloc_t_is_custom(self)

    def is_badloc(self) -> "bool":
        r"""is_badloc(self) -> bool"""
        return _ida_domain.argloc_t_is_badloc(self)

    def reg1(self) -> "int":
        r"""reg1(self) -> int"""
        return _ida_domain.argloc_t_reg1(self)

    def regoff(self) -> "int":
        r"""regoff(self) -> int"""
        return _ida_domain.argloc_t_regoff(self)

    def reg2(self) -> "int":
        r"""reg2(self) -> int"""
        return _ida_domain.argloc_t_reg2(self)

    def get_reginfo(self) -> "uint32":
        r"""get_reginfo(self) -> uint32"""
        return _ida_domain.argloc_t_get_reginfo(self)

    def stkoff(self) -> "sval_t":
        r"""stkoff(self) -> sval_t"""
        return _ida_domain.argloc_t_stkoff(self)

    def get_ea(self) -> "ea_t":
        r"""get_ea(self) -> ea_t"""
        return _ida_domain.argloc_t_get_ea(self)

    def scattered(self) -> "scattered_aloc_t &":
        r"""scattered(self) -> scattered_aloc_t"""
        return _ida_domain.argloc_t_scattered(self)

    def get_rrel(self) -> "rrel_t &":
        r"""get_rrel(self) -> rrel_t"""
        return _ida_domain.argloc_t_get_rrel(self)

    def get_custom(self) -> "void *":
        r"""get_custom(self) -> void *"""
        return _ida_domain.argloc_t_get_custom(self)

    def get_biggest(self) -> "argloc_t::biggest_t":
        r"""get_biggest(self) -> argloc_t::biggest_t"""
        return _ida_domain.argloc_t_get_biggest(self)

    def _set_badloc(self) -> "void":
        r"""_set_badloc(self)"""
        return _ida_domain.argloc_t__set_badloc(self)

    def _set_reg1(self, reg: "int", off: "int"=0) -> "void":
        r"""_set_reg1(self, reg, off=0)"""
        return _ida_domain.argloc_t__set_reg1(self, reg, off)

    def _set_reg2(self, _reg1: "int", _reg2: "int") -> "void":
        r"""_set_reg2(self, _reg1, _reg2)"""
        return _ida_domain.argloc_t__set_reg2(self, _reg1, _reg2)

    def _set_stkoff(self, off: "sval_t") -> "void":
        r"""_set_stkoff(self, off)"""
        return _ida_domain.argloc_t__set_stkoff(self, off)

    def _set_ea(self, _ea: "ea_t") -> "void":
        r"""_set_ea(self, _ea)"""
        return _ida_domain.argloc_t__set_ea(self, _ea)

    def _consume_rrel(self, p: "rrel_t") -> "bool":
        r"""_consume_rrel(self, p) -> bool"""
        return _ida_domain.argloc_t__consume_rrel(self, p)

    def _consume_scattered(self, p: "scattered_aloc_t") -> "bool":
        r"""_consume_scattered(self, p) -> bool"""
        return _ida_domain.argloc_t__consume_scattered(self, p)

    def _set_custom(self, ct: "argloc_type_t", pdata: "void *") -> "void":
        r"""_set_custom(self, ct, pdata)"""
        return _ida_domain.argloc_t__set_custom(self, ct, pdata)

    def _set_biggest(self, ct: "argloc_type_t", data: "argloc_t::biggest_t") -> "void":
        r"""_set_biggest(self, ct, data)"""
        return _ida_domain.argloc_t__set_biggest(self, ct, data)

    def set_reg1(self, reg: "int", off: "int"=0) -> "void":
        r"""set_reg1(self, reg, off=0)"""
        return _ida_domain.argloc_t_set_reg1(self, reg, off)

    def set_reg2(self, _reg1: "int", _reg2: "int") -> "void":
        r"""set_reg2(self, _reg1, _reg2)"""
        return _ida_domain.argloc_t_set_reg2(self, _reg1, _reg2)

    def set_stkoff(self, off: "sval_t") -> "void":
        r"""set_stkoff(self, off)"""
        return _ida_domain.argloc_t_set_stkoff(self, off)

    def set_ea(self, _ea: "ea_t") -> "void":
        r"""set_ea(self, _ea)"""
        return _ida_domain.argloc_t_set_ea(self, _ea)

    def consume_rrel(self, p: "rrel_t") -> "void":
        r"""consume_rrel(self, p)"""
        return _ida_domain.argloc_t_consume_rrel(self, p)

    def set_badloc(self) -> "void":
        r"""set_badloc(self)"""
        return _ida_domain.argloc_t_set_badloc(self)

    def calc_offset(self) -> "sval_t":
        r"""calc_offset(self) -> sval_t"""
        return _ida_domain.argloc_t_calc_offset(self)

    def advance(self, delta: "int") -> "bool":
        r"""advance(self, delta) -> bool"""
        return _ida_domain.argloc_t_advance(self, delta)

    def align_reg_high(self, size: "size_t", _slotsize: "size_t") -> "void":
        r"""align_reg_high(self, size, _slotsize)"""
        return _ida_domain.argloc_t_align_reg_high(self, size, _slotsize)

    def align_stkoff_high(self, size: "size_t", _slotsize: "size_t") -> "void":
        r"""align_stkoff_high(self, size, _slotsize)"""
        return _ida_domain.argloc_t_align_stkoff_high(self, size, _slotsize)

    def __eq__(self, r: "argloc_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.argloc_t___eq__(self, r)

    def __ne__(self, r: "argloc_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.argloc_t___ne__(self, r)

    def __lt__(self, r: "argloc_t") -> "bool":
        r"""__lt__(self, r) -> bool"""
        return _ida_domain.argloc_t___lt__(self, r)

    def __gt__(self, r: "argloc_t") -> "bool":
        r"""__gt__(self, r) -> bool"""
        return _ida_domain.argloc_t___gt__(self, r)

    def __le__(self, r: "argloc_t") -> "bool":
        r"""__le__(self, r) -> bool"""
        return _ida_domain.argloc_t___le__(self, r)

    def __ge__(self, r: "argloc_t") -> "bool":
        r"""__ge__(self, r) -> bool"""
        return _ida_domain.argloc_t___ge__(self, r)

    def compare(self, r: "argloc_t") -> "int":
        r"""compare(self, r) -> int"""
        return _ida_domain.argloc_t_compare(self, r)

    def consume_scattered(self, p: "scattered_aloc_t") -> "void":
        r"""consume_scattered(self, p)"""
        return _ida_domain.argloc_t_consume_scattered(self, p)

# Register argloc_t in _ida_domain:
_ida_domain.argloc_t_swigregister(argloc_t)
class argpart_t(argloc_t):
    r"""Proxy of C++ argpart_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    off: "ushort" = property(_ida_domain.argpart_t_off_get, _ida_domain.argpart_t_off_set, doc=r"""off""")
    size: "ushort" = property(_ida_domain.argpart_t_size_get, _ida_domain.argpart_t_size_set, doc=r"""size""")

    def __init__(self, *args):
        r"""
        __init__(self, a) -> argpart_t
        __init__(self) -> argpart_t
        """
        _ida_domain.argpart_t_swiginit(self, _ida_domain.new_argpart_t(*args))

    def bad_offset(self) -> "bool":
        r"""bad_offset(self) -> bool"""
        return _ida_domain.argpart_t_bad_offset(self)

    def bad_size(self) -> "bool":
        r"""bad_size(self) -> bool"""
        return _ida_domain.argpart_t_bad_size(self)

    def __lt__(self, r: "argpart_t") -> "bool":
        r"""__lt__(self, r) -> bool"""
        return _ida_domain.argpart_t___lt__(self, r)

    def swap(self, r: "argpart_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.argpart_t_swap(self, r)
    __swig_destroy__ = _ida_domain.delete_argpart_t

# Register argpart_t in _ida_domain:
_ida_domain.argpart_t_swigregister(argpart_t)
class scattered_aloc_t(argpartvec_t):
    r"""Proxy of C++ scattered_aloc_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> scattered_aloc_t"""
        _ida_domain.scattered_aloc_t_swiginit(self, _ida_domain.new_scattered_aloc_t())
    __swig_destroy__ = _ida_domain.delete_scattered_aloc_t

# Register scattered_aloc_t in _ida_domain:
_ida_domain.scattered_aloc_t_swigregister(scattered_aloc_t)

def verify_argloc(vloc: "argloc_t", size: "int", gaps: "rangeset_t") -> "int":
    r"""verify_argloc(vloc, size, gaps) -> int"""
    return _ida_domain.verify_argloc(vloc, size, gaps)

def optimize_argloc(vloc: "argloc_t", size: "int", gaps: "rangeset_t") -> "bool":
    r"""optimize_argloc(vloc, size, gaps) -> bool"""
    return _ida_domain.optimize_argloc(vloc, size, gaps)

def print_argloc(vloc: "argloc_t", size: "int"=0, vflags: "int"=0) -> "size_t":
    r"""print_argloc(vloc, size=0, vflags=0) -> size_t"""
    return _ida_domain.print_argloc(vloc, size, vflags)
PRALOC_VERIFY = _ida_domain.PRALOC_VERIFY

PRALOC_STKOFF = _ida_domain.PRALOC_STKOFF

class aloc_visitor_t(object):
    r"""Proxy of C++ aloc_visitor_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def visit_location(self, v: "argloc_t", off: "int", size: "int") -> "int":
        r"""visit_location(self, v, off, size) -> int"""
        return _ida_domain.aloc_visitor_t_visit_location(self, v, off, size)
    __swig_destroy__ = _ida_domain.delete_aloc_visitor_t

    def __init__(self):
        r"""__init__(self) -> aloc_visitor_t"""
        if self.__class__ == aloc_visitor_t:
            _self = None
        else:
            _self = self
        _ida_domain.aloc_visitor_t_swiginit(self, _ida_domain.new_aloc_visitor_t(_self, ))
    def __disown__(self):
        self.this.disown()
        _ida_domain.disown_aloc_visitor_t(self)
        return weakref.proxy(self)

# Register aloc_visitor_t in _ida_domain:
_ida_domain.aloc_visitor_t_swigregister(aloc_visitor_t)

def for_all_arglocs(vv: "aloc_visitor_t", vloc: "argloc_t", size: "int", off: "int"=0) -> "int":
    r"""for_all_arglocs(vv, vloc, size, off=0) -> int"""
    return _ida_domain.for_all_arglocs(vv, vloc, size, off)
class const_aloc_visitor_t(object):
    r"""Proxy of C++ const_aloc_visitor_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def visit_location(self, v: "argloc_t", off: "int", size: "int") -> "int":
        r"""visit_location(self, v, off, size) -> int"""
        return _ida_domain.const_aloc_visitor_t_visit_location(self, v, off, size)
    __swig_destroy__ = _ida_domain.delete_const_aloc_visitor_t

    def __init__(self):
        r"""__init__(self) -> const_aloc_visitor_t"""
        if self.__class__ == const_aloc_visitor_t:
            _self = None
        else:
            _self = self
        _ida_domain.const_aloc_visitor_t_swiginit(self, _ida_domain.new_const_aloc_visitor_t(_self, ))
    def __disown__(self):
        self.this.disown()
        _ida_domain.disown_const_aloc_visitor_t(self)
        return weakref.proxy(self)

# Register const_aloc_visitor_t in _ida_domain:
_ida_domain.const_aloc_visitor_t_swigregister(const_aloc_visitor_t)

def for_all_const_arglocs(vv: "const_aloc_visitor_t", vloc: "argloc_t", size: "int", off: "int"=0) -> "int":
    r"""for_all_const_arglocs(vv, vloc, size, off=0) -> int"""
    return _ida_domain.for_all_const_arglocs(vv, vloc, size, off)

def is_user_cc(cm: "cm_t") -> "bool":
    r"""is_user_cc(cm) -> bool"""
    return _ida_domain.is_user_cc(cm)

def is_vararg_cc(cm: "cm_t") -> "bool":
    r"""is_vararg_cc(cm) -> bool"""
    return _ida_domain.is_vararg_cc(cm)

def is_purging_cc(cm: "cm_t") -> "bool":
    r"""is_purging_cc(cm) -> bool"""
    return _ida_domain.is_purging_cc(cm)

def is_golang_cc(cc: "cm_t") -> "bool":
    r"""is_golang_cc(cc) -> bool"""
    return _ida_domain.is_golang_cc(cc)

def is_swift_cc(cc: "cm_t") -> "bool":
    r"""is_swift_cc(cc) -> bool"""
    return _ida_domain.is_swift_cc(cc)
ARGREGS_POLICY_UNDEFINED = _ida_domain.ARGREGS_POLICY_UNDEFINED

ARGREGS_GP_ONLY = _ida_domain.ARGREGS_GP_ONLY

ARGREGS_INDEPENDENT = _ida_domain.ARGREGS_INDEPENDENT

ARGREGS_BY_SLOTS = _ida_domain.ARGREGS_BY_SLOTS

ARGREGS_FP_MASKS_GP = _ida_domain.ARGREGS_FP_MASKS_GP

ARGREGS_MIPS_O32 = _ida_domain.ARGREGS_MIPS_O32

ARGREGS_RISCV = _ida_domain.ARGREGS_RISCV

class callregs_t(object):
    r"""Proxy of C++ callregs_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    policy: "argreg_policy_t" = property(_ida_domain.callregs_t_policy_get, _ida_domain.callregs_t_policy_set, doc=r"""policy""")
    nregs: "int" = property(_ida_domain.callregs_t_nregs_get, _ida_domain.callregs_t_nregs_set, doc=r"""nregs""")
    gpregs: "intvec_t" = property(_ida_domain.callregs_t_gpregs_get, _ida_domain.callregs_t_gpregs_set, doc=r"""gpregs""")
    fpregs: "intvec_t" = property(_ida_domain.callregs_t_fpregs_get, _ida_domain.callregs_t_fpregs_set, doc=r"""fpregs""")

    def __init__(self, *args):
        r"""
        __init__(self) -> callregs_t
        __init__(self, cc) -> callregs_t
        """
        _ida_domain.callregs_t_swiginit(self, _ida_domain.new_callregs_t(*args))

    def swap(self, r: "callregs_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.callregs_t_swap(self, r)

    def init_regs(self, cc: "cm_t") -> "void":
        r"""init_regs(self, cc)"""
        return _ida_domain.callregs_t_init_regs(self, cc)

    def by_slots(self) -> "bool":
        r"""by_slots(self) -> bool"""
        return _ida_domain.callregs_t_by_slots(self)

    def set(self, _policy: "argreg_policy_t", gprs: "int const *", fprs: "int const *") -> "void":
        r"""set(self, _policy, gprs, fprs)"""
        return _ida_domain.callregs_t_set(self, _policy, gprs, fprs)
    GPREGS = _ida_domain.callregs_t_GPREGS
    
    FPREGS = _ida_domain.callregs_t_FPREGS
    

    def set_registers(self, kind: "callregs_t::reg_kind_t", first_reg: "int", last_reg: "int") -> "void":
        r"""set_registers(self, kind, first_reg, last_reg)"""
        return _ida_domain.callregs_t_set_registers(self, kind, first_reg, last_reg)

    def reset(self) -> "void":
        r"""reset(self)"""
        return _ida_domain.callregs_t_reset(self)

    @staticmethod
    def regcount(cc: "cm_t") -> "int":
        r"""regcount(cc) -> int"""
        return _ida_domain.callregs_t_regcount(cc)

    def reginds(self, gp_ind: "int *", fp_ind: "int *", r: "int") -> "bool":
        r"""reginds(self, gp_ind, fp_ind, r) -> bool"""
        return _ida_domain.callregs_t_reginds(self, gp_ind, fp_ind, r)
    __swig_destroy__ = _ida_domain.delete_callregs_t

# Register callregs_t in _ida_domain:
_ida_domain.callregs_t_swigregister(callregs_t)
C_PC_TINY = cvar.C_PC_TINY
C_PC_SMALL = cvar.C_PC_SMALL
C_PC_COMPACT = cvar.C_PC_COMPACT
C_PC_MEDIUM = cvar.C_PC_MEDIUM
C_PC_LARGE = cvar.C_PC_LARGE
C_PC_HUGE = cvar.C_PC_HUGE
C_PC_FLAT = cvar.C_PC_FLAT


def get_comp(comp: "comp_t") -> "comp_t":
    r"""get_comp(comp) -> comp_t"""
    return _ida_domain.get_comp(comp)

def get_compiler_name(id: "comp_t") -> "char const *":
    r"""get_compiler_name(id) -> char const *"""
    return _ida_domain.get_compiler_name(id)

def get_compiler_abbr(id: "comp_t") -> "char const *":
    r"""get_compiler_abbr(id) -> char const *"""
    return _ida_domain.get_compiler_abbr(id)

def get_compilers(ids: "compvec_t *", names: "qstrvec_t *", abbrs: "qstrvec_t *") -> "void":
    r"""get_compilers(ids, names, abbrs)"""
    return _ida_domain.get_compilers(ids, names, abbrs)

def is_comp_unsure(comp: "comp_t") -> "comp_t":
    r"""is_comp_unsure(comp) -> comp_t"""
    return _ida_domain.is_comp_unsure(comp)

def default_compiler() -> "comp_t":
    r"""default_compiler() -> comp_t"""
    return _ida_domain.default_compiler()

def is_gcc() -> "bool":
    r"""is_gcc() -> bool"""
    return _ida_domain.is_gcc()

def is_gcc32() -> "bool":
    r"""is_gcc32() -> bool"""
    return _ida_domain.is_gcc32()

def is_gcc64() -> "bool":
    r"""is_gcc64() -> bool"""
    return _ida_domain.is_gcc64()

def gcc_layout() -> "bool":
    r"""gcc_layout() -> bool"""
    return _ida_domain.gcc_layout()

def set_compiler(cc: "compiler_info_t const &", flags: "int", abiname: "char const *"=None) -> "bool":
    r"""set_compiler(cc, flags, abiname=None) -> bool"""
    return _ida_domain.set_compiler(cc, flags, abiname)
SETCOMP_OVERRIDE = _ida_domain.SETCOMP_OVERRIDE

SETCOMP_ONLY_ID = _ida_domain.SETCOMP_ONLY_ID

SETCOMP_ONLY_ABI = _ida_domain.SETCOMP_ONLY_ABI

SETCOMP_BY_USER = _ida_domain.SETCOMP_BY_USER


def set_compiler_id(id: "comp_t", abiname: "char const *"=None) -> "bool":
    r"""set_compiler_id(id, abiname=None) -> bool"""
    return _ida_domain.set_compiler_id(id, abiname)

def set_abi_name(abiname: "char const *", user_level: "bool"=False) -> "bool":
    r"""set_abi_name(abiname, user_level=False) -> bool"""
    return _ida_domain.set_abi_name(abiname, user_level)

def get_abi_name() -> "qstring *":
    r"""get_abi_name() -> ssize_t"""
    return _ida_domain.get_abi_name()

def append_abi_opts(abi_opts: "char const *", user_level: "bool"=False) -> "bool":
    r"""append_abi_opts(abi_opts, user_level=False) -> bool"""
    return _ida_domain.append_abi_opts(abi_opts, user_level)

def remove_abi_opts(abi_opts: "char const *", user_level: "bool"=False) -> "bool":
    r"""remove_abi_opts(abi_opts, user_level=False) -> bool"""
    return _ida_domain.remove_abi_opts(abi_opts, user_level)

def set_compiler_string(compstr: "char const *", user_level: "bool") -> "bool":
    r"""set_compiler_string(compstr, user_level) -> bool"""
    return _ida_domain.set_compiler_string(compstr, user_level)

def use_golang_cc() -> "bool":
    r"""use_golang_cc() -> bool"""
    return _ida_domain.use_golang_cc()

def switch_to_golang() -> "void":
    r"""switch_to_golang()"""
    return _ida_domain.switch_to_golang()
MAX_FUNC_ARGS = _ida_domain.MAX_FUNC_ARGS

ABS_UNK = _ida_domain.ABS_UNK

ABS_NO = _ida_domain.ABS_NO

ABS_YES = _ida_domain.ABS_YES

SC_UNK = _ida_domain.SC_UNK

SC_TYPE = _ida_domain.SC_TYPE

SC_EXT = _ida_domain.SC_EXT

SC_STAT = _ida_domain.SC_STAT

SC_REG = _ida_domain.SC_REG

SC_AUTO = _ida_domain.SC_AUTO

SC_FRIEND = _ida_domain.SC_FRIEND

SC_VIRT = _ida_domain.SC_VIRT

HTI_CPP = _ida_domain.HTI_CPP

HTI_INT = _ida_domain.HTI_INT

HTI_EXT = _ida_domain.HTI_EXT

HTI_LEX = _ida_domain.HTI_LEX

HTI_UNP = _ida_domain.HTI_UNP

HTI_TST = _ida_domain.HTI_TST

HTI_FIL = _ida_domain.HTI_FIL

HTI_MAC = _ida_domain.HTI_MAC

HTI_NWR = _ida_domain.HTI_NWR

HTI_NER = _ida_domain.HTI_NER

HTI_DCL = _ida_domain.HTI_DCL

HTI_NDC = _ida_domain.HTI_NDC

HTI_PAK = _ida_domain.HTI_PAK

HTI_PAK_SHIFT = _ida_domain.HTI_PAK_SHIFT

HTI_PAKDEF = _ida_domain.HTI_PAKDEF

HTI_PAK1 = _ida_domain.HTI_PAK1

HTI_PAK2 = _ida_domain.HTI_PAK2

HTI_PAK4 = _ida_domain.HTI_PAK4

HTI_PAK8 = _ida_domain.HTI_PAK8

HTI_PAK16 = _ida_domain.HTI_PAK16

HTI_HIGH = _ida_domain.HTI_HIGH

HTI_LOWER = _ida_domain.HTI_LOWER

HTI_RAWARGS = _ida_domain.HTI_RAWARGS

HTI_RELAXED = _ida_domain.HTI_RELAXED

HTI_NOBASE = _ida_domain.HTI_NOBASE

HTI_SEMICOLON = _ida_domain.HTI_SEMICOLON


def convert_pt_flags_to_hti(pt_flags: "int") -> "int":
    r"""convert_pt_flags_to_hti(pt_flags) -> int"""
    return _ida_domain.convert_pt_flags_to_hti(pt_flags)

def parse_decl(out_tif: "tinfo_t", til: "til_t", decl: "char const *", pt_flags: "int") -> "qstring *":
    r"""parse_decl(out_tif, til, decl, pt_flags) -> bool"""
    return _ida_domain.parse_decl(out_tif, til, decl, pt_flags)
PT_SIL = _ida_domain.PT_SIL

PT_NDC = _ida_domain.PT_NDC

PT_TYP = _ida_domain.PT_TYP

PT_VAR = _ida_domain.PT_VAR

PT_PACKMASK = _ida_domain.PT_PACKMASK

PT_HIGH = _ida_domain.PT_HIGH

PT_LOWER = _ida_domain.PT_LOWER

PT_REPLACE = _ida_domain.PT_REPLACE

PT_RAWARGS = _ida_domain.PT_RAWARGS

PT_RELAXED = _ida_domain.PT_RELAXED

PT_EMPTY = _ida_domain.PT_EMPTY

PT_SEMICOLON = _ida_domain.PT_SEMICOLON


def parse_decls(til: "til_t", input: "char const *", printer: "printer_t *", hti_flags: "int") -> "int":
    r"""parse_decls(til, input, printer, hti_flags) -> int"""
    return _ida_domain.parse_decls(til, input, printer, hti_flags)

def print_type(ea: "ea_t", prtype_flags: "int") -> "qstring *":
    r"""print_type(ea, prtype_flags) -> bool"""
    return _ida_domain.print_type(ea, prtype_flags)
PRTYPE_1LINE = _ida_domain.PRTYPE_1LINE

PRTYPE_MULTI = _ida_domain.PRTYPE_MULTI

PRTYPE_TYPE = _ida_domain.PRTYPE_TYPE

PRTYPE_PRAGMA = _ida_domain.PRTYPE_PRAGMA

PRTYPE_SEMI = _ida_domain.PRTYPE_SEMI

PRTYPE_CPP = _ida_domain.PRTYPE_CPP

PRTYPE_DEF = _ida_domain.PRTYPE_DEF

PRTYPE_NOARGS = _ida_domain.PRTYPE_NOARGS

PRTYPE_NOARRS = _ida_domain.PRTYPE_NOARRS

PRTYPE_NORES = _ida_domain.PRTYPE_NORES

PRTYPE_RESTORE = _ida_domain.PRTYPE_RESTORE

PRTYPE_NOREGEX = _ida_domain.PRTYPE_NOREGEX

PRTYPE_COLORED = _ida_domain.PRTYPE_COLORED

PRTYPE_METHODS = _ida_domain.PRTYPE_METHODS

PRTYPE_1LINCMT = _ida_domain.PRTYPE_1LINCMT

PRTYPE_HEADER = _ida_domain.PRTYPE_HEADER

PRTYPE_OFFSETS = _ida_domain.PRTYPE_OFFSETS

PRTYPE_MAXSTR = _ida_domain.PRTYPE_MAXSTR

PRTYPE_TAIL = _ida_domain.PRTYPE_TAIL

PRTYPE_ARGLOCS = _ida_domain.PRTYPE_ARGLOCS

NTF_TYPE = _ida_domain.NTF_TYPE

NTF_SYMU = _ida_domain.NTF_SYMU

NTF_SYMM = _ida_domain.NTF_SYMM

NTF_NOBASE = _ida_domain.NTF_NOBASE

NTF_REPLACE = _ida_domain.NTF_REPLACE

NTF_UMANGLED = _ida_domain.NTF_UMANGLED

NTF_NOCUR = _ida_domain.NTF_NOCUR

NTF_64BIT = _ida_domain.NTF_64BIT

NTF_FIXNAME = _ida_domain.NTF_FIXNAME

NTF_IDBENC = _ida_domain.NTF_IDBENC

NTF_CHKSYNC = _ida_domain.NTF_CHKSYNC

NTF_NO_NAMECHK = _ida_domain.NTF_NO_NAMECHK

NTF_COPY = _ida_domain.NTF_COPY

TERR_OK = _ida_domain.TERR_OK

TERR_SAVE_ERROR = _ida_domain.TERR_SAVE_ERROR

TERR_SERIALIZE = _ida_domain.TERR_SERIALIZE

TERR_BAD_NAME = _ida_domain.TERR_BAD_NAME

TERR_BAD_ARG = _ida_domain.TERR_BAD_ARG

TERR_BAD_TYPE = _ida_domain.TERR_BAD_TYPE

TERR_BAD_SIZE = _ida_domain.TERR_BAD_SIZE

TERR_BAD_INDEX = _ida_domain.TERR_BAD_INDEX

TERR_BAD_ARRAY = _ida_domain.TERR_BAD_ARRAY

TERR_BAD_BF = _ida_domain.TERR_BAD_BF

TERR_BAD_OFFSET = _ida_domain.TERR_BAD_OFFSET

TERR_BAD_UNIVAR = _ida_domain.TERR_BAD_UNIVAR

TERR_BAD_VARLAST = _ida_domain.TERR_BAD_VARLAST

TERR_OVERLAP = _ida_domain.TERR_OVERLAP

TERR_BAD_SUBTYPE = _ida_domain.TERR_BAD_SUBTYPE

TERR_BAD_VALUE = _ida_domain.TERR_BAD_VALUE

TERR_NO_BMASK = _ida_domain.TERR_NO_BMASK

TERR_BAD_BMASK = _ida_domain.TERR_BAD_BMASK

TERR_BAD_MSKVAL = _ida_domain.TERR_BAD_MSKVAL

TERR_BAD_REPR = _ida_domain.TERR_BAD_REPR

TERR_GRP_NOEMPTY = _ida_domain.TERR_GRP_NOEMPTY

TERR_DUPNAME = _ida_domain.TERR_DUPNAME

TERR_UNION_BF = _ida_domain.TERR_UNION_BF

TERR_BAD_TAH = _ida_domain.TERR_BAD_TAH

TERR_BAD_BASE = _ida_domain.TERR_BAD_BASE

TERR_BAD_GAP = _ida_domain.TERR_BAD_GAP

TERR_NESTED = _ida_domain.TERR_NESTED

TERR_NOT_COMPAT = _ida_domain.TERR_NOT_COMPAT

TERR_BAD_LAYOUT = _ida_domain.TERR_BAD_LAYOUT

TERR_BAD_GROUPS = _ida_domain.TERR_BAD_GROUPS

TERR_BAD_SERIAL = _ida_domain.TERR_BAD_SERIAL

TERR_ALIEN_NAME = _ida_domain.TERR_ALIEN_NAME

TERR_STOCK = _ida_domain.TERR_STOCK

TERR_ENUM_SIZE = _ida_domain.TERR_ENUM_SIZE

TERR_NOT_IMPL = _ida_domain.TERR_NOT_IMPL

TERR_TYPE_WORSE = _ida_domain.TERR_TYPE_WORSE

TERR_BAD_FX_SIZE = _ida_domain.TERR_BAD_FX_SIZE

TERR_STRUCT_SIZE = _ida_domain.TERR_STRUCT_SIZE

TERR_NOT_FOUND = _ida_domain.TERR_NOT_FOUND

TERR_COUNT = _ida_domain.TERR_COUNT


def tinfo_errstr(code: "tinfo_code_t") -> "char const *":
    r"""tinfo_errstr(code) -> char const *"""
    return _ida_domain.tinfo_errstr(code)

def del_named_type(ti: "til_t", name: "char const *", ntf_flags: "int") -> "bool":
    r"""del_named_type(ti, name, ntf_flags) -> bool"""
    return _ida_domain.del_named_type(ti, name, ntf_flags)

def first_named_type(ti: "til_t", ntf_flags: "int") -> "char const *":
    r"""first_named_type(ti, ntf_flags) -> char const *"""
    return _ida_domain.first_named_type(ti, ntf_flags)

def next_named_type(ti: "til_t", name: "char const *", ntf_flags: "int") -> "char const *":
    r"""next_named_type(ti, name, ntf_flags) -> char const *"""
    return _ida_domain.next_named_type(ti, name, ntf_flags)

def copy_named_type(dsttil: "til_t", srctil: "til_t", name: "char const *") -> "uint32":
    r"""copy_named_type(dsttil, srctil, name) -> uint32"""
    return _ida_domain.copy_named_type(dsttil, srctil, name)

def gen_decorate_name(name: "char const *", mangle: "bool", cc: "cm_t", type: "tinfo_t") -> "qstring *":
    r"""gen_decorate_name(name, mangle, cc, type) -> bool"""
    return _ida_domain.gen_decorate_name(name, mangle, cc, type)

def calc_c_cpp_name(name: "char const *", type: "tinfo_t", ccn_flags: "int") -> "qstring *":
    r"""calc_c_cpp_name(name, type, ccn_flags) -> ssize_t"""
    return _ida_domain.calc_c_cpp_name(name, type, ccn_flags)
CCN_C = _ida_domain.CCN_C

CCN_CPP = _ida_domain.CCN_CPP


def enable_numbered_types(ti: "til_t", enable: "bool") -> "bool":
    r"""enable_numbered_types(ti, enable) -> bool"""
    return _ida_domain.enable_numbered_types(ti, enable)

def alloc_type_ordinals(ti: "til_t", qty: "int") -> "uint32":
    r"""alloc_type_ordinals(ti, qty) -> uint32"""
    return _ida_domain.alloc_type_ordinals(ti, qty)

def alloc_type_ordinal(ti: "til_t") -> "uint32":
    r"""alloc_type_ordinal(ti) -> uint32"""
    return _ida_domain.alloc_type_ordinal(ti)

def get_ordinal_limit(ti: "til_t"=None) -> "uint32":
    r"""get_ordinal_limit(ti=None) -> uint32"""
    return _ida_domain.get_ordinal_limit(ti)

def get_ordinal_count(ti: "til_t"=None) -> "uint32":
    r"""get_ordinal_count(ti=None) -> uint32"""
    return _ida_domain.get_ordinal_count(ti)

def del_numbered_type(ti: "til_t", ordinal: "uint32") -> "bool":
    r"""del_numbered_type(ti, ordinal) -> bool"""
    return _ida_domain.del_numbered_type(ti, ordinal)

def set_type_alias(ti: "til_t", src_ordinal: "uint32", dst_ordinal: "uint32") -> "bool":
    r"""set_type_alias(ti, src_ordinal, dst_ordinal) -> bool"""
    return _ida_domain.set_type_alias(ti, src_ordinal, dst_ordinal)

def get_alias_target(ti: "til_t", ordinal: "uint32") -> "uint32":
    r"""get_alias_target(ti, ordinal) -> uint32"""
    return _ida_domain.get_alias_target(ti, ordinal)

def get_type_ordinal(ti: "til_t", name: "char const *") -> "int32":
    r"""get_type_ordinal(ti, name) -> int32"""
    return _ida_domain.get_type_ordinal(ti, name)

def get_numbered_type_name(ti: "til_t", ordinal: "uint32") -> "char const *":
    r"""get_numbered_type_name(ti, ordinal) -> char const *"""
    return _ida_domain.get_numbered_type_name(ti, ordinal)

def create_numbered_type_name(ord: "int32") -> "qstring *":
    r"""create_numbered_type_name(ord) -> ssize_t"""
    return _ida_domain.create_numbered_type_name(ord)

def is_ordinal_name(name: "char const *", ord: "uint32 *"=None) -> "bool":
    r"""is_ordinal_name(name, ord=None) -> bool"""
    return _ida_domain.is_ordinal_name(name, ord)

def is_type_choosable(ti: "til_t", ordinal: "uint32") -> "bool":
    r"""is_type_choosable(ti, ordinal) -> bool"""
    return _ida_domain.is_type_choosable(ti, ordinal)

def set_type_choosable(ti: "til_t", ordinal: "uint32", value: "bool") -> "void":
    r"""set_type_choosable(ti, ordinal, value)"""
    return _ida_domain.set_type_choosable(ti, ordinal, value)

def get_vftable_ea(ordinal: "uint32") -> "ea_t":
    r"""get_vftable_ea(ordinal) -> ea_t"""
    return _ida_domain.get_vftable_ea(ordinal)

def get_vftable_ordinal(vftable_ea: "ea_t") -> "uint32":
    r"""get_vftable_ordinal(vftable_ea) -> uint32"""
    return _ida_domain.get_vftable_ordinal(vftable_ea)

def set_vftable_ea(ordinal: "uint32", vftable_ea: "ea_t") -> "bool":
    r"""set_vftable_ea(ordinal, vftable_ea) -> bool"""
    return _ida_domain.set_vftable_ea(ordinal, vftable_ea)

def del_vftable_ea(ordinal: "uint32") -> "bool":
    r"""del_vftable_ea(ordinal) -> bool"""
    return _ida_domain.del_vftable_ea(ordinal)

def deref_ptr(ptr_ea: "ea_t *", tif: "tinfo_t", closure_obj: "ea_t *"=None) -> "bool":
    r"""deref_ptr(ptr_ea, tif, closure_obj=None) -> bool"""
    return _ida_domain.deref_ptr(ptr_ea, tif, closure_obj)

def add_til(name: "char const *", flags: "int") -> "int":
    r"""add_til(name, flags) -> int"""
    return _ida_domain.add_til(name, flags)
ADDTIL_DEFAULT = _ida_domain.ADDTIL_DEFAULT

ADDTIL_INCOMP = _ida_domain.ADDTIL_INCOMP

ADDTIL_SILENT = _ida_domain.ADDTIL_SILENT

ADDTIL_FAILED = _ida_domain.ADDTIL_FAILED

ADDTIL_OK = _ida_domain.ADDTIL_OK

ADDTIL_COMP = _ida_domain.ADDTIL_COMP

ADDTIL_ABORTED = _ida_domain.ADDTIL_ABORTED


def del_til(name: "char const *") -> "bool":
    r"""del_til(name) -> bool"""
    return _ida_domain.del_til(name)

def apply_named_type(ea: "ea_t", name: "char const *") -> "bool":
    r"""apply_named_type(ea, name) -> bool"""
    return _ida_domain.apply_named_type(ea, name)

def apply_tinfo(ea: "ea_t", tif: "tinfo_t", flags: "uint32") -> "bool":
    r"""apply_tinfo(ea, tif, flags) -> bool"""
    return _ida_domain.apply_tinfo(ea, tif, flags)
TINFO_GUESSED = _ida_domain.TINFO_GUESSED

TINFO_DEFINITE = _ida_domain.TINFO_DEFINITE

TINFO_DELAYFUNC = _ida_domain.TINFO_DELAYFUNC

TINFO_STRICT = _ida_domain.TINFO_STRICT


def apply_cdecl(til: "til_t", ea: "ea_t", decl: "char const *", flags: "int"=0) -> "bool":
    r"""apply_cdecl(til, ea, decl, flags=0) -> bool"""
    return _ida_domain.apply_cdecl(til, ea, decl, flags)

def apply_callee_tinfo(caller: "ea_t", tif: "tinfo_t") -> "bool":
    r"""apply_callee_tinfo(caller, tif) -> bool"""
    return _ida_domain.apply_callee_tinfo(caller, tif)

def apply_once_tinfo_and_name(dea: "ea_t", tif: "tinfo_t", name: "char const *") -> "bool":
    r"""apply_once_tinfo_and_name(dea, tif, name) -> bool"""
    return _ida_domain.apply_once_tinfo_and_name(dea, tif, name)

def guess_tinfo(out: "tinfo_t", id: "tid_t") -> "int":
    r"""guess_tinfo(out, id) -> int"""
    return _ida_domain.guess_tinfo(out, id)
GUESS_FUNC_FAILED = _ida_domain.GUESS_FUNC_FAILED

GUESS_FUNC_TRIVIAL = _ida_domain.GUESS_FUNC_TRIVIAL

GUESS_FUNC_OK = _ida_domain.GUESS_FUNC_OK


def set_c_header_path(incdir: "char const *") -> "void":
    r"""set_c_header_path(incdir)"""
    return _ida_domain.set_c_header_path(incdir)

def get_c_header_path() -> "qstring *":
    r"""get_c_header_path() -> ssize_t"""
    return _ida_domain.get_c_header_path()

def set_c_macros(macros: "char const *") -> "void":
    r"""set_c_macros(macros)"""
    return _ida_domain.set_c_macros(macros)

def get_c_macros() -> "qstring *":
    r"""get_c_macros() -> ssize_t"""
    return _ida_domain.get_c_macros()

def get_idati() -> "til_t *":
    r"""get_idati() -> til_t"""
    return _ida_domain.get_idati()

def get_idainfo_by_type(tif: "tinfo_t") -> "size_t *, flags64_t *, opinfo_t *, size_t *":
    r"""get_idainfo_by_type(tif) -> bool"""
    return _ida_domain.get_idainfo_by_type(tif)

def get_tinfo_by_flags(out: "tinfo_t", flags: "flags64_t") -> "bool":
    r"""get_tinfo_by_flags(out, flags) -> bool"""
    return _ida_domain.get_tinfo_by_flags(out, flags)
STI_PCHAR = _ida_domain.STI_PCHAR

STI_PUCHAR = _ida_domain.STI_PUCHAR

STI_PCCHAR = _ida_domain.STI_PCCHAR

STI_PCUCHAR = _ida_domain.STI_PCUCHAR

STI_PBYTE = _ida_domain.STI_PBYTE

STI_PINT = _ida_domain.STI_PINT

STI_PUINT = _ida_domain.STI_PUINT

STI_PVOID = _ida_domain.STI_PVOID

STI_PPVOID = _ida_domain.STI_PPVOID

STI_PCVOID = _ida_domain.STI_PCVOID

STI_ACHAR = _ida_domain.STI_ACHAR

STI_AUCHAR = _ida_domain.STI_AUCHAR

STI_ACCHAR = _ida_domain.STI_ACCHAR

STI_ACUCHAR = _ida_domain.STI_ACUCHAR

STI_FPURGING = _ida_domain.STI_FPURGING

STI_FDELOP = _ida_domain.STI_FDELOP

STI_MSGSEND = _ida_domain.STI_MSGSEND

STI_AEABI_LCMP = _ida_domain.STI_AEABI_LCMP

STI_AEABI_ULCMP = _ida_domain.STI_AEABI_ULCMP

STI_DONT_USE = _ida_domain.STI_DONT_USE

STI_SIZE_T = _ida_domain.STI_SIZE_T

STI_SSIZE_T = _ida_domain.STI_SSIZE_T

STI_AEABI_MEMCPY = _ida_domain.STI_AEABI_MEMCPY

STI_AEABI_MEMSET = _ida_domain.STI_AEABI_MEMSET

STI_AEABI_MEMCLR = _ida_domain.STI_AEABI_MEMCLR

STI_RTC_CHECK_2 = _ida_domain.STI_RTC_CHECK_2

STI_RTC_CHECK_4 = _ida_domain.STI_RTC_CHECK_4

STI_RTC_CHECK_8 = _ida_domain.STI_RTC_CHECK_8

STI_COMPLEX64 = _ida_domain.STI_COMPLEX64

STI_COMPLEX128 = _ida_domain.STI_COMPLEX128

STI_PUNKNOWN = _ida_domain.STI_PUNKNOWN

STI_LAST = _ida_domain.STI_LAST

ETF_NO_SAVE = _ida_domain.ETF_NO_SAVE

ETF_NO_LAYOUT = _ida_domain.ETF_NO_LAYOUT

ETF_MAY_DESTROY = _ida_domain.ETF_MAY_DESTROY

ETF_COMPATIBLE = _ida_domain.ETF_COMPATIBLE

ETF_FUNCARG = _ida_domain.ETF_FUNCARG

ETF_FORCENAME = _ida_domain.ETF_FORCENAME

ETF_AUTONAME = _ida_domain.ETF_AUTONAME

ETF_BYTIL = _ida_domain.ETF_BYTIL

ETF_NO_ARRAY = _ida_domain.ETF_NO_ARRAY

GTD_CALC_LAYOUT = _ida_domain.GTD_CALC_LAYOUT

GTD_NO_LAYOUT = _ida_domain.GTD_NO_LAYOUT

GTD_DEL_BITFLDS = _ida_domain.GTD_DEL_BITFLDS

GTD_CALC_ARGLOCS = _ida_domain.GTD_CALC_ARGLOCS

GTD_NO_ARGLOCS = _ida_domain.GTD_NO_ARGLOCS

GTS_NESTED = _ida_domain.GTS_NESTED

GTS_BASECLASS = _ida_domain.GTS_BASECLASS

SUDT_SORT = _ida_domain.SUDT_SORT

SUDT_ALIGN = _ida_domain.SUDT_ALIGN

SUDT_GAPS = _ida_domain.SUDT_GAPS

SUDT_UNEX = _ida_domain.SUDT_UNEX

SUDT_FAST = _ida_domain.SUDT_FAST

SUDT_CONST = _ida_domain.SUDT_CONST

SUDT_VOLATILE = _ida_domain.SUDT_VOLATILE

SUDT_TRUNC = _ida_domain.SUDT_TRUNC

SUDT_SERDEF = _ida_domain.SUDT_SERDEF


def copy_tinfo_t(_this: "tinfo_t", r: "tinfo_t") -> "void":
    r"""copy_tinfo_t(_this, r)"""
    return _ida_domain.copy_tinfo_t(_this, r)

def detach_tinfo_t(_this: "tinfo_t") -> "bool":
    r"""detach_tinfo_t(_this) -> bool"""
    return _ida_domain.detach_tinfo_t(_this)

def clear_tinfo_t(_this: "tinfo_t") -> "void":
    r"""clear_tinfo_t(_this)"""
    return _ida_domain.clear_tinfo_t(_this)

def create_tinfo(_this: "tinfo_t", bt: "type_t", bt2: "type_t", ptr: "void *") -> "bool":
    r"""create_tinfo(_this, bt, bt2, ptr) -> bool"""
    return _ida_domain.create_tinfo(_this, bt, bt2, ptr)

def verify_tinfo(typid: "typid_t") -> "int":
    r"""verify_tinfo(typid) -> int"""
    return _ida_domain.verify_tinfo(typid)

def get_tinfo_details(typid: "typid_t", bt2: "type_t", buf: "void *") -> "bool":
    r"""get_tinfo_details(typid, bt2, buf) -> bool"""
    return _ida_domain.get_tinfo_details(typid, bt2, buf)

def get_tinfo_size(p_effalign: "uint32 *", typid: "typid_t", gts_code: "int") -> "size_t":
    r"""get_tinfo_size(p_effalign, typid, gts_code) -> size_t"""
    return _ida_domain.get_tinfo_size(p_effalign, typid, gts_code)

def get_tinfo_pdata(outptr: "void *", typid: "typid_t", what: "int") -> "size_t":
    r"""get_tinfo_pdata(outptr, typid, what) -> size_t"""
    return _ida_domain.get_tinfo_pdata(outptr, typid, what)

def get_tinfo_property(typid: "typid_t", gta_prop: "int") -> "size_t":
    r"""get_tinfo_property(typid, gta_prop) -> size_t"""
    return _ida_domain.get_tinfo_property(typid, gta_prop)

def get_tinfo_property4(typid: "typid_t", gta_prop: "int", p1: "size_t", p2: "size_t", p3: "size_t", p4: "size_t") -> "size_t":
    r"""get_tinfo_property4(typid, gta_prop, p1, p2, p3, p4) -> size_t"""
    return _ida_domain.get_tinfo_property4(typid, gta_prop, p1, p2, p3, p4)

def set_tinfo_property(tif: "tinfo_t", sta_prop: "int", x: "size_t") -> "size_t":
    r"""set_tinfo_property(tif, sta_prop, x) -> size_t"""
    return _ida_domain.set_tinfo_property(tif, sta_prop, x)

def set_tinfo_property4(tif: "tinfo_t", sta_prop: "int", p1: "size_t", p2: "size_t", p3: "size_t", p4: "size_t") -> "size_t":
    r"""set_tinfo_property4(tif, sta_prop, p1, p2, p3, p4) -> size_t"""
    return _ida_domain.set_tinfo_property4(tif, sta_prop, p1, p2, p3, p4)

def serialize_tinfo(type: "qtype *", fields: "qtype *", fldcmts: "qtype *", tif: "tinfo_t", sudt_flags: "int") -> "bool":
    r"""serialize_tinfo(type, fields, fldcmts, tif, sudt_flags) -> bool"""
    return _ida_domain.serialize_tinfo(type, fields, fldcmts, tif, sudt_flags)

def find_tinfo_udt_member(udm: "udm_t", typid: "typid_t", strmem_flags: "int") -> "int":
    r"""find_tinfo_udt_member(udm, typid, strmem_flags) -> int"""
    return _ida_domain.find_tinfo_udt_member(udm, typid, strmem_flags)

def print_tinfo(prefix: "char const *", indent: "int", cmtindent: "int", flags: "int", tif: "tinfo_t", name: "char const *", cmt: "char const *") -> "qstring *":
    r"""print_tinfo(prefix, indent, cmtindent, flags, tif, name, cmt) -> bool"""
    return _ida_domain.print_tinfo(prefix, indent, cmtindent, flags, tif, name, cmt)

def dstr_tinfo(tif: "tinfo_t") -> "char const *":
    r"""dstr_tinfo(tif) -> char const *"""
    return _ida_domain.dstr_tinfo(tif)

def visit_subtypes(visitor: "tinfo_visitor_t", out: "type_mods_t", tif: "tinfo_t", name: "char const *", cmt: "char const *") -> "int":
    r"""visit_subtypes(visitor, out, tif, name, cmt) -> int"""
    return _ida_domain.visit_subtypes(visitor, out, tif, name, cmt)

def compare_tinfo(t1: "typid_t", t2: "typid_t", tcflags: "int") -> "bool":
    r"""compare_tinfo(t1, t2, tcflags) -> bool"""
    return _ida_domain.compare_tinfo(t1, t2, tcflags)

def lexcompare_tinfo(t1: "typid_t", t2: "typid_t", arg3: "int") -> "int":
    r"""lexcompare_tinfo(t1, t2, arg3) -> int"""
    return _ida_domain.lexcompare_tinfo(t1, t2, arg3)

def get_stock_tinfo(tif: "tinfo_t", id: "stock_type_id_t") -> "bool":
    r"""get_stock_tinfo(tif, id) -> bool"""
    return _ida_domain.get_stock_tinfo(tif, id)

def read_tinfo_bitfield_value(typid: "typid_t", v: "uint64", bitoff: "int") -> "uint64":
    r"""read_tinfo_bitfield_value(typid, v, bitoff) -> uint64"""
    return _ida_domain.read_tinfo_bitfield_value(typid, v, bitoff)

def write_tinfo_bitfield_value(typid: "typid_t", dst: "uint64", v: "uint64", bitoff: "int") -> "uint64":
    r"""write_tinfo_bitfield_value(typid, dst, v, bitoff) -> uint64"""
    return _ida_domain.write_tinfo_bitfield_value(typid, dst, v, bitoff)

def get_tinfo_attr(typid: "typid_t", key: "qstring const &", bv: "bytevec_t *", all_attrs: "bool") -> "bool":
    r"""get_tinfo_attr(typid, key, bv, all_attrs) -> bool"""
    return _ida_domain.get_tinfo_attr(typid, key, bv, all_attrs)

def set_tinfo_attr(tif: "tinfo_t", ta: "type_attr_t", may_overwrite: "bool") -> "bool":
    r"""set_tinfo_attr(tif, ta, may_overwrite) -> bool"""
    return _ida_domain.set_tinfo_attr(tif, ta, may_overwrite)

def del_tinfo_attr(tif: "tinfo_t", key: "qstring const &", make_copy: "bool") -> "bool":
    r"""del_tinfo_attr(tif, key, make_copy) -> bool"""
    return _ida_domain.del_tinfo_attr(tif, key, make_copy)

def get_tinfo_attrs(typid: "typid_t", tav: "type_attrs_t", include_ref_attrs: "bool") -> "bool":
    r"""get_tinfo_attrs(typid, tav, include_ref_attrs) -> bool"""
    return _ida_domain.get_tinfo_attrs(typid, tav, include_ref_attrs)

def set_tinfo_attrs(tif: "tinfo_t", ta: "type_attrs_t") -> "bool":
    r"""set_tinfo_attrs(tif, ta) -> bool"""
    return _ida_domain.set_tinfo_attrs(tif, ta)

def score_tinfo(tif: "tinfo_t") -> "uint32":
    r"""score_tinfo(tif) -> uint32"""
    return _ida_domain.score_tinfo(tif)

def save_tinfo(tif: "tinfo_t", til: "til_t", ord: "size_t", name: "char const *", ntf_flags: "int") -> "tinfo_code_t":
    r"""save_tinfo(tif, til, ord, name, ntf_flags) -> tinfo_code_t"""
    return _ida_domain.save_tinfo(tif, til, ord, name, ntf_flags)

def append_tinfo_covered(out: "rangeset_t", typid: "typid_t", offset: "uint64") -> "bool":
    r"""append_tinfo_covered(out, typid, offset) -> bool"""
    return _ida_domain.append_tinfo_covered(out, typid, offset)

def calc_tinfo_gaps(out: "rangeset_t", typid: "typid_t") -> "bool":
    r"""calc_tinfo_gaps(out, typid) -> bool"""
    return _ida_domain.calc_tinfo_gaps(out, typid)

def value_repr_t__from_opinfo(_this: "value_repr_t", flags: "flags64_t", afl: "aflags_t", opinfo: "opinfo_t const *", ap: "array_parameters_t const *") -> "bool":
    r"""value_repr_t__from_opinfo(_this, flags, afl, opinfo, ap) -> bool"""
    return _ida_domain.value_repr_t__from_opinfo(_this, flags, afl, opinfo, ap)

def value_repr_t__print_(_this: "value_repr_t", colored: "bool") -> "qstring *":
    r"""value_repr_t__print_(_this, colored) -> size_t"""
    return _ida_domain.value_repr_t__print_(_this, colored)

def udt_type_data_t__find_member(_this: "udt_type_data_t", udm: "udm_t", strmem_flags: "int") -> "ssize_t":
    r"""udt_type_data_t__find_member(_this, udm, strmem_flags) -> ssize_t"""
    return _ida_domain.udt_type_data_t__find_member(_this, udm, strmem_flags)

def udt_type_data_t__get_best_fit_member(_this: "udt_type_data_t", disp: "asize_t") -> "ssize_t":
    r"""udt_type_data_t__get_best_fit_member(_this, disp) -> ssize_t"""
    return _ida_domain.udt_type_data_t__get_best_fit_member(_this, disp)

def get_tinfo_by_edm_name(tif: "tinfo_t", til: "til_t", mname: "char const *") -> "ssize_t":
    r"""get_tinfo_by_edm_name(tif, til, mname) -> ssize_t"""
    return _ida_domain.get_tinfo_by_edm_name(tif, til, mname)
class tinfo_t(object):
    r"""Proxy of C++ tinfo_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, ordinal=None, name=None, tid=None, til=None):
        _ida_domain.tinfo_t_swiginit(self, _ida_domain.new_tinfo_t(*args))
        if args and self.empty():
            raise ValueError("Invalid input data: %s" % str(args))
        elif ordinal is not None:
            if not self.get_numbered_type(til, ordinal):
                raise ValueError("No type with ordinal %s in type library %s" % (ordinal, til))
        elif name is not None:
            if not self.get_named_type(til, name):
                raise ValueError("No type with name %s in type library %s" % (name, til))
        elif tid is not None:
            if not self.get_type_by_tid(tid):
                raise ValueError("No type with ID %s in type library %s" % (name, til))



    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.tinfo_t_clear(self)

    def swap(self, r: "tinfo_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.tinfo_t_swap(self, r)

    def get_named_type(self, *args) -> "bool":
        r"""
        get_named_type(self, til, name, decl_type=BTF_TYPEDEF, resolve=True, try_ordinal=True) -> bool
        get_named_type(self, name, decl_type=BTF_TYPEDEF, resolve=True, try_ordinal=True) -> bool
        """
        return _ida_domain.tinfo_t_get_named_type(self, *args)

    def get_numbered_type(self, *args) -> "bool":
        r"""
        get_numbered_type(self, til, ordinal, decl_type=BTF_TYPEDEF, resolve=True) -> bool
        get_numbered_type(self, ordinal, decl_type=BTF_TYPEDEF, resolve=True) -> bool
        """
        return _ida_domain.tinfo_t_get_numbered_type(self, *args)

    def detach(self) -> "bool":
        r"""detach(self) -> bool"""
        return _ida_domain.tinfo_t_detach(self)

    def is_correct(self) -> "bool":
        r"""is_correct(self) -> bool"""
        return _ida_domain.tinfo_t_is_correct(self)

    def get_realtype(self, full: "bool"=False) -> "type_t":
        r"""get_realtype(self, full=False) -> type_t"""
        return _ida_domain.tinfo_t_get_realtype(self, full)

    def get_decltype(self) -> "type_t":
        r"""get_decltype(self) -> type_t"""
        return _ida_domain.tinfo_t_get_decltype(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.tinfo_t_empty(self)

    def present(self) -> "bool":
        r"""present(self) -> bool"""
        return _ida_domain.tinfo_t_present(self)

    def get_size(self, p_effalign: "uint32 *"=None, gts_code: "int"=0) -> "size_t":
        r"""get_size(self, p_effalign=None, gts_code=0) -> size_t"""
        return _ida_domain.tinfo_t_get_size(self, p_effalign, gts_code)

    def get_unpadded_size(self) -> "size_t":
        r"""get_unpadded_size(self) -> size_t"""
        return _ida_domain.tinfo_t_get_unpadded_size(self)

    def get_alignment(self) -> "uint32":
        r"""get_alignment(self) -> uint32"""
        return _ida_domain.tinfo_t_get_alignment(self)

    def get_sign(self) -> "type_sign_t":
        r"""get_sign(self) -> type_sign_t"""
        return _ida_domain.tinfo_t_get_sign(self)

    def is_signed(self) -> "bool":
        r"""is_signed(self) -> bool"""
        return _ida_domain.tinfo_t_is_signed(self)

    def is_unsigned(self) -> "bool":
        r"""is_unsigned(self) -> bool"""
        return _ida_domain.tinfo_t_is_unsigned(self)

    def get_declalign(self) -> "uchar":
        r"""get_declalign(self) -> uchar"""
        return _ida_domain.tinfo_t_get_declalign(self)

    def is_typeref(self) -> "bool":
        r"""is_typeref(self) -> bool"""
        return _ida_domain.tinfo_t_is_typeref(self)

    def has_details(self) -> "bool":
        r"""has_details(self) -> bool"""
        return _ida_domain.tinfo_t_has_details(self)

    def get_type_name(self) -> "bool":
        r"""get_type_name(self) -> bool"""
        return _ida_domain.tinfo_t_get_type_name(self)

    def get_nice_type_name(self) -> "bool":
        r"""get_nice_type_name(self) -> bool"""
        return _ida_domain.tinfo_t_get_nice_type_name(self)

    def rename_type(self, name: "char const *", ntf_flags: "int"=0) -> "tinfo_code_t":
        r"""rename_type(self, name, ntf_flags=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_rename_type(self, name, ntf_flags)

    def get_final_type_name(self) -> "bool":
        r"""get_final_type_name(self) -> bool"""
        return _ida_domain.tinfo_t_get_final_type_name(self)

    def get_next_type_name(self) -> "bool":
        r"""get_next_type_name(self) -> bool"""
        return _ida_domain.tinfo_t_get_next_type_name(self)

    def get_tid(self) -> "tid_t":
        r"""get_tid(self) -> tid_t"""
        return _ida_domain.tinfo_t_get_tid(self)

    def force_tid(self) -> "tid_t":
        r"""force_tid(self) -> tid_t"""
        return _ida_domain.tinfo_t_force_tid(self)

    def get_ordinal(self) -> "uint32":
        r"""get_ordinal(self) -> uint32"""
        return _ida_domain.tinfo_t_get_ordinal(self)

    def get_final_ordinal(self) -> "uint32":
        r"""get_final_ordinal(self) -> uint32"""
        return _ida_domain.tinfo_t_get_final_ordinal(self)

    def get_til(self) -> "til_t *":
        r"""get_til(self) -> til_t"""
        return _ida_domain.tinfo_t_get_til(self)

    def is_from_subtil(self) -> "bool":
        r"""is_from_subtil(self) -> bool"""
        return _ida_domain.tinfo_t_is_from_subtil(self)

    def is_forward_decl(self) -> "bool":
        r"""is_forward_decl(self) -> bool"""
        return _ida_domain.tinfo_t_is_forward_decl(self)

    def get_forward_type(self) -> "type_t":
        r"""get_forward_type(self) -> type_t"""
        return _ida_domain.tinfo_t_get_forward_type(self)

    def is_forward_struct(self) -> "bool":
        r"""is_forward_struct(self) -> bool"""
        return _ida_domain.tinfo_t_is_forward_struct(self)

    def is_forward_union(self) -> "bool":
        r"""is_forward_union(self) -> bool"""
        return _ida_domain.tinfo_t_is_forward_union(self)

    def is_forward_enum(self) -> "bool":
        r"""is_forward_enum(self) -> bool"""
        return _ida_domain.tinfo_t_is_forward_enum(self)

    def is_typedef(self) -> "bool":
        r"""is_typedef(self) -> bool"""
        return _ida_domain.tinfo_t_is_typedef(self)

    def get_type_cmt(self) -> "int":
        r"""get_type_cmt(self) -> int"""
        return _ida_domain.tinfo_t_get_type_cmt(self)

    def get_type_rptcmt(self) -> "bool":
        r"""get_type_rptcmt(self) -> bool"""
        return _ida_domain.tinfo_t_get_type_rptcmt(self)

    def is_decl_const(self) -> "bool":
        r"""is_decl_const(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_const(self)

    def is_decl_volatile(self) -> "bool":
        r"""is_decl_volatile(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_volatile(self)

    def is_decl_void(self) -> "bool":
        r"""is_decl_void(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_void(self)

    def is_decl_partial(self) -> "bool":
        r"""is_decl_partial(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_partial(self)

    def is_decl_unknown(self) -> "bool":
        r"""is_decl_unknown(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_unknown(self)

    def is_decl_last(self) -> "bool":
        r"""is_decl_last(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_last(self)

    def is_decl_ptr(self) -> "bool":
        r"""is_decl_ptr(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_ptr(self)

    def is_decl_array(self) -> "bool":
        r"""is_decl_array(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_array(self)

    def is_decl_func(self) -> "bool":
        r"""is_decl_func(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_func(self)

    def is_decl_complex(self) -> "bool":
        r"""is_decl_complex(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_complex(self)

    def is_decl_typedef(self) -> "bool":
        r"""is_decl_typedef(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_typedef(self)

    def is_decl_sue(self) -> "bool":
        r"""is_decl_sue(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_sue(self)

    def is_decl_struct(self) -> "bool":
        r"""is_decl_struct(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_struct(self)

    def is_decl_union(self) -> "bool":
        r"""is_decl_union(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_union(self)

    def is_decl_udt(self) -> "bool":
        r"""is_decl_udt(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_udt(self)

    def is_decl_enum(self) -> "bool":
        r"""is_decl_enum(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_enum(self)

    def is_decl_bitfield(self) -> "bool":
        r"""is_decl_bitfield(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_bitfield(self)

    def is_decl_int128(self) -> "bool":
        r"""is_decl_int128(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_int128(self)

    def is_decl_int64(self) -> "bool":
        r"""is_decl_int64(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_int64(self)

    def is_decl_int32(self) -> "bool":
        r"""is_decl_int32(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_int32(self)

    def is_decl_int16(self) -> "bool":
        r"""is_decl_int16(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_int16(self)

    def is_decl_int(self) -> "bool":
        r"""is_decl_int(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_int(self)

    def is_decl_char(self) -> "bool":
        r"""is_decl_char(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_char(self)

    def is_decl_uint(self) -> "bool":
        r"""is_decl_uint(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_uint(self)

    def is_decl_uchar(self) -> "bool":
        r"""is_decl_uchar(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_uchar(self)

    def is_decl_uint16(self) -> "bool":
        r"""is_decl_uint16(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_uint16(self)

    def is_decl_uint32(self) -> "bool":
        r"""is_decl_uint32(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_uint32(self)

    def is_decl_uint64(self) -> "bool":
        r"""is_decl_uint64(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_uint64(self)

    def is_decl_uint128(self) -> "bool":
        r"""is_decl_uint128(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_uint128(self)

    def is_decl_ldouble(self) -> "bool":
        r"""is_decl_ldouble(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_ldouble(self)

    def is_decl_double(self) -> "bool":
        r"""is_decl_double(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_double(self)

    def is_decl_float(self) -> "bool":
        r"""is_decl_float(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_float(self)

    def is_decl_tbyte(self) -> "bool":
        r"""is_decl_tbyte(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_tbyte(self)

    def is_decl_floating(self) -> "bool":
        r"""is_decl_floating(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_floating(self)

    def is_decl_bool(self) -> "bool":
        r"""is_decl_bool(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_bool(self)

    def is_decl_paf(self) -> "bool":
        r"""is_decl_paf(self) -> bool"""
        return _ida_domain.tinfo_t_is_decl_paf(self)

    def is_well_defined(self) -> "bool":
        r"""is_well_defined(self) -> bool"""
        return _ida_domain.tinfo_t_is_well_defined(self)

    def is_const(self) -> "bool":
        r"""is_const(self) -> bool"""
        return _ida_domain.tinfo_t_is_const(self)

    def is_volatile(self) -> "bool":
        r"""is_volatile(self) -> bool"""
        return _ida_domain.tinfo_t_is_volatile(self)

    def is_void(self) -> "bool":
        r"""is_void(self) -> bool"""
        return _ida_domain.tinfo_t_is_void(self)

    def is_partial(self) -> "bool":
        r"""is_partial(self) -> bool"""
        return _ida_domain.tinfo_t_is_partial(self)

    def is_unknown(self) -> "bool":
        r"""is_unknown(self) -> bool"""
        return _ida_domain.tinfo_t_is_unknown(self)

    def is_ptr(self) -> "bool":
        r"""is_ptr(self) -> bool"""
        return _ida_domain.tinfo_t_is_ptr(self)

    def is_array(self) -> "bool":
        r"""is_array(self) -> bool"""
        return _ida_domain.tinfo_t_is_array(self)

    def is_func(self) -> "bool":
        r"""is_func(self) -> bool"""
        return _ida_domain.tinfo_t_is_func(self)

    def is_complex(self) -> "bool":
        r"""is_complex(self) -> bool"""
        return _ida_domain.tinfo_t_is_complex(self)

    def is_struct(self) -> "bool":
        r"""is_struct(self) -> bool"""
        return _ida_domain.tinfo_t_is_struct(self)

    def is_union(self) -> "bool":
        r"""is_union(self) -> bool"""
        return _ida_domain.tinfo_t_is_union(self)

    def is_udt(self) -> "bool":
        r"""is_udt(self) -> bool"""
        return _ida_domain.tinfo_t_is_udt(self)

    def is_enum(self) -> "bool":
        r"""is_enum(self) -> bool"""
        return _ida_domain.tinfo_t_is_enum(self)

    def is_sue(self) -> "bool":
        r"""is_sue(self) -> bool"""
        return _ida_domain.tinfo_t_is_sue(self)

    def is_bitfield(self) -> "bool":
        r"""is_bitfield(self) -> bool"""
        return _ida_domain.tinfo_t_is_bitfield(self)

    def is_int128(self) -> "bool":
        r"""is_int128(self) -> bool"""
        return _ida_domain.tinfo_t_is_int128(self)

    def is_int64(self) -> "bool":
        r"""is_int64(self) -> bool"""
        return _ida_domain.tinfo_t_is_int64(self)

    def is_int32(self) -> "bool":
        r"""is_int32(self) -> bool"""
        return _ida_domain.tinfo_t_is_int32(self)

    def is_int16(self) -> "bool":
        r"""is_int16(self) -> bool"""
        return _ida_domain.tinfo_t_is_int16(self)

    def is_int(self) -> "bool":
        r"""is_int(self) -> bool"""
        return _ida_domain.tinfo_t_is_int(self)

    def is_char(self) -> "bool":
        r"""is_char(self) -> bool"""
        return _ida_domain.tinfo_t_is_char(self)

    def is_uint(self) -> "bool":
        r"""is_uint(self) -> bool"""
        return _ida_domain.tinfo_t_is_uint(self)

    def is_uchar(self) -> "bool":
        r"""is_uchar(self) -> bool"""
        return _ida_domain.tinfo_t_is_uchar(self)

    def is_uint16(self) -> "bool":
        r"""is_uint16(self) -> bool"""
        return _ida_domain.tinfo_t_is_uint16(self)

    def is_uint32(self) -> "bool":
        r"""is_uint32(self) -> bool"""
        return _ida_domain.tinfo_t_is_uint32(self)

    def is_uint64(self) -> "bool":
        r"""is_uint64(self) -> bool"""
        return _ida_domain.tinfo_t_is_uint64(self)

    def is_uint128(self) -> "bool":
        r"""is_uint128(self) -> bool"""
        return _ida_domain.tinfo_t_is_uint128(self)

    def is_ldouble(self) -> "bool":
        r"""is_ldouble(self) -> bool"""
        return _ida_domain.tinfo_t_is_ldouble(self)

    def is_double(self) -> "bool":
        r"""is_double(self) -> bool"""
        return _ida_domain.tinfo_t_is_double(self)

    def is_float(self) -> "bool":
        r"""is_float(self) -> bool"""
        return _ida_domain.tinfo_t_is_float(self)

    def is_tbyte(self) -> "bool":
        r"""is_tbyte(self) -> bool"""
        return _ida_domain.tinfo_t_is_tbyte(self)

    def is_bool(self) -> "bool":
        r"""is_bool(self) -> bool"""
        return _ida_domain.tinfo_t_is_bool(self)

    def is_paf(self) -> "bool":
        r"""is_paf(self) -> bool"""
        return _ida_domain.tinfo_t_is_paf(self)

    def is_ptr_or_array(self) -> "bool":
        r"""is_ptr_or_array(self) -> bool"""
        return _ida_domain.tinfo_t_is_ptr_or_array(self)

    def is_integral(self) -> "bool":
        r"""is_integral(self) -> bool"""
        return _ida_domain.tinfo_t_is_integral(self)

    def is_ext_integral(self) -> "bool":
        r"""is_ext_integral(self) -> bool"""
        return _ida_domain.tinfo_t_is_ext_integral(self)

    def is_floating(self) -> "bool":
        r"""is_floating(self) -> bool"""
        return _ida_domain.tinfo_t_is_floating(self)

    def is_arithmetic(self) -> "bool":
        r"""is_arithmetic(self) -> bool"""
        return _ida_domain.tinfo_t_is_arithmetic(self)

    def is_ext_arithmetic(self) -> "bool":
        r"""is_ext_arithmetic(self) -> bool"""
        return _ida_domain.tinfo_t_is_ext_arithmetic(self)

    def is_scalar(self) -> "bool":
        r"""is_scalar(self) -> bool"""
        return _ida_domain.tinfo_t_is_scalar(self)

    def get_ptr_details(self, pi: "ptr_type_data_t") -> "bool":
        r"""get_ptr_details(self, pi) -> bool"""
        return _ida_domain.tinfo_t_get_ptr_details(self, pi)

    def get_array_details(self, ai: "array_type_data_t") -> "bool":
        r"""get_array_details(self, ai) -> bool"""
        return _ida_domain.tinfo_t_get_array_details(self, ai)

    def get_enum_details(self, ei: "enum_type_data_t") -> "bool":
        r"""get_enum_details(self, ei) -> bool"""
        return _ida_domain.tinfo_t_get_enum_details(self, ei)

    def get_bitfield_details(self, bi: "bitfield_type_data_t") -> "bool":
        r"""get_bitfield_details(self, bi) -> bool"""
        return _ida_domain.tinfo_t_get_bitfield_details(self, bi)

    def get_udt_details(self, udt: "udt_type_data_t", gtd: "gtd_udt_t"=GTD_CALC_LAYOUT) -> "bool":
        r"""get_udt_details(self, udt, gtd=GTD_CALC_LAYOUT) -> bool"""
        return _ida_domain.tinfo_t_get_udt_details(self, udt, gtd)

    def get_func_details(self, fi: "func_type_data_t", gtd: "gtd_func_t"=GTD_CALC_ARGLOCS) -> "bool":
        r"""get_func_details(self, fi, gtd=GTD_CALC_ARGLOCS) -> bool"""
        return _ida_domain.tinfo_t_get_func_details(self, fi, gtd)

    def is_funcptr(self) -> "bool":
        r"""is_funcptr(self) -> bool"""
        return _ida_domain.tinfo_t_is_funcptr(self)

    def is_shifted_ptr(self) -> "bool":
        r"""is_shifted_ptr(self) -> bool"""
        return _ida_domain.tinfo_t_is_shifted_ptr(self)

    def is_varstruct(self) -> "bool":
        r"""is_varstruct(self) -> bool"""
        return _ida_domain.tinfo_t_is_varstruct(self)

    def is_varmember(self) -> "bool":
        r"""is_varmember(self) -> bool"""
        return _ida_domain.tinfo_t_is_varmember(self)

    def get_ptrarr_objsize(self) -> "int":
        r"""get_ptrarr_objsize(self) -> int"""
        return _ida_domain.tinfo_t_get_ptrarr_objsize(self)

    def get_ptrarr_object(self) -> "tinfo_t":
        r"""get_ptrarr_object(self) -> tinfo_t"""
        return _ida_domain.tinfo_t_get_ptrarr_object(self)

    def get_pointed_object(self) -> "tinfo_t":
        r"""get_pointed_object(self) -> tinfo_t"""
        return _ida_domain.tinfo_t_get_pointed_object(self)

    def is_pvoid(self) -> "bool":
        r"""is_pvoid(self) -> bool"""
        return _ida_domain.tinfo_t_is_pvoid(self)

    def is_punknown(self) -> "bool":
        r"""is_punknown(self) -> bool"""
        return _ida_domain.tinfo_t_is_punknown(self)

    def get_array_element(self) -> "tinfo_t":
        r"""get_array_element(self) -> tinfo_t"""
        return _ida_domain.tinfo_t_get_array_element(self)

    def get_final_element(self) -> "tinfo_t":
        r"""get_final_element(self) -> tinfo_t"""
        return _ida_domain.tinfo_t_get_final_element(self)

    def get_array_nelems(self) -> "int":
        r"""get_array_nelems(self) -> int"""
        return _ida_domain.tinfo_t_get_array_nelems(self)

    def get_nth_arg(self, n: "int") -> "tinfo_t":
        r"""get_nth_arg(self, n) -> tinfo_t"""
        return _ida_domain.tinfo_t_get_nth_arg(self, n)

    def get_rettype(self) -> "tinfo_t":
        r"""get_rettype(self) -> tinfo_t"""
        return _ida_domain.tinfo_t_get_rettype(self)

    def get_nargs(self) -> "int":
        r"""get_nargs(self) -> int"""
        return _ida_domain.tinfo_t_get_nargs(self)

    def is_user_cc(self) -> "bool":
        r"""is_user_cc(self) -> bool"""
        return _ida_domain.tinfo_t_is_user_cc(self)

    def is_vararg_cc(self) -> "bool":
        r"""is_vararg_cc(self) -> bool"""
        return _ida_domain.tinfo_t_is_vararg_cc(self)

    def is_purging_cc(self) -> "bool":
        r"""is_purging_cc(self) -> bool"""
        return _ida_domain.tinfo_t_is_purging_cc(self)

    def calc_purged_bytes(self) -> "int":
        r"""calc_purged_bytes(self) -> int"""
        return _ida_domain.tinfo_t_calc_purged_bytes(self)

    def is_high_func(self) -> "bool":
        r"""is_high_func(self) -> bool"""
        return _ida_domain.tinfo_t_is_high_func(self)

    def get_methods(self, methods: "udtmembervec_t") -> "bool":
        r"""get_methods(self, methods) -> bool"""
        return _ida_domain.tinfo_t_get_methods(self, methods)

    def get_bit_buckets(self, buckets: "range64vec_t *") -> "bool":
        r"""get_bit_buckets(self, buckets) -> bool"""
        return _ida_domain.tinfo_t_get_bit_buckets(self, buckets)

    def find_udm(self, *args) -> "int":
        r"""
        find_udm(self, udm, strmem_flags) -> int
        find_udm(self, offset, strmem_flags=0) -> int
        find_udm(self, name, strmem_flags=0) -> int
        """
        return _ida_domain.tinfo_t_find_udm(self, *args)

    def get_udm(self, *args) -> "int":
        r"""
        get_udm(self, name) -> int
        get_udm(self, index) -> int
        """
        return _ida_domain.tinfo_t_get_udm(self, *args)

    def get_udm_by_offset(self, offset: "uint64") -> "int":
        r"""get_udm_by_offset(self, offset) -> int"""
        return _ida_domain.tinfo_t_get_udm_by_offset(self, offset)

    def get_udt_nmembers(self) -> "int":
        r"""get_udt_nmembers(self) -> int"""
        return _ida_domain.tinfo_t_get_udt_nmembers(self)

    def is_empty_udt(self) -> "bool":
        r"""is_empty_udt(self) -> bool"""
        return _ida_domain.tinfo_t_is_empty_udt(self)

    def is_small_udt(self) -> "bool":
        r"""is_small_udt(self) -> bool"""
        return _ida_domain.tinfo_t_is_small_udt(self)

    def requires_qualifier(self, name: "char const *", offset: "uint64") -> "bool":
        r"""requires_qualifier(self, name, offset) -> bool"""
        return _ida_domain.tinfo_t_requires_qualifier(self, name, offset)

    def append_covered(self, out: "rangeset_t", offset: "uint64"=0) -> "bool":
        r"""append_covered(self, out, offset=0) -> bool"""
        return _ida_domain.tinfo_t_append_covered(self, out, offset)

    def calc_gaps(self, out: "rangeset_t") -> "bool":
        r"""calc_gaps(self, out) -> bool"""
        return _ida_domain.tinfo_t_calc_gaps(self, out)

    def is_one_fpval(self) -> "bool":
        r"""is_one_fpval(self) -> bool"""
        return _ida_domain.tinfo_t_is_one_fpval(self)

    def is_sse_type(self) -> "bool":
        r"""is_sse_type(self) -> bool"""
        return _ida_domain.tinfo_t_is_sse_type(self)

    def is_anonymous_udt(self) -> "bool":
        r"""is_anonymous_udt(self) -> bool"""
        return _ida_domain.tinfo_t_is_anonymous_udt(self)

    def is_vftable(self) -> "bool":
        r"""is_vftable(self) -> bool"""
        return _ida_domain.tinfo_t_is_vftable(self)

    def has_vftable(self) -> "bool":
        r"""has_vftable(self) -> bool"""
        return _ida_domain.tinfo_t_has_vftable(self)

    def has_union(self) -> "bool":
        r"""has_union(self) -> bool"""
        return _ida_domain.tinfo_t_has_union(self)

    def get_enum_nmembers(self) -> "size_t":
        r"""get_enum_nmembers(self) -> size_t"""
        return _ida_domain.tinfo_t_get_enum_nmembers(self)

    def is_empty_enum(self) -> "bool":
        r"""is_empty_enum(self) -> bool"""
        return _ida_domain.tinfo_t_is_empty_enum(self)

    def get_enum_base_type(self) -> "type_t":
        r"""get_enum_base_type(self) -> type_t"""
        return _ida_domain.tinfo_t_get_enum_base_type(self)

    def is_bitmask_enum(self) -> "bool":
        r"""is_bitmask_enum(self) -> bool"""
        return _ida_domain.tinfo_t_is_bitmask_enum(self)

    def get_enum_radix(self) -> "int":
        r"""get_enum_radix(self) -> int"""
        return _ida_domain.tinfo_t_get_enum_radix(self)

    def get_enum_repr(self, repr: "value_repr_t") -> "tinfo_code_t":
        r"""get_enum_repr(self, repr) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_get_enum_repr(self, repr)

    def get_enum_width(self) -> "int":
        r"""get_enum_width(self) -> int"""
        return _ida_domain.tinfo_t_get_enum_width(self)

    def calc_enum_mask(self) -> "uint64":
        r"""calc_enum_mask(self) -> uint64"""
        return _ida_domain.tinfo_t_calc_enum_mask(self)

    def get_edm_by_value(self, *args) -> "ssize_t":
        r"""get_edm_by_value(self, value, bmask=bmask64_t(-1), serial=0) -> ssize_t"""
        return _ida_domain.tinfo_t_get_edm_by_value(self, *args)

    def get_edm_tid(self, idx: "size_t") -> "tid_t":
        r"""get_edm_tid(self, idx) -> tid_t"""
        return _ida_domain.tinfo_t_get_edm_tid(self, idx)

    def get_onemember_type(self) -> "tinfo_t":
        r"""get_onemember_type(self) -> tinfo_t"""
        return _ida_domain.tinfo_t_get_onemember_type(self)

    def get_innermost_udm(self, bitoffset: "uint64") -> "tinfo_t":
        r"""get_innermost_udm(self, bitoffset) -> tinfo_t"""
        return _ida_domain.tinfo_t_get_innermost_udm(self, bitoffset)

    def get_innermost_member_type(self, bitoffset: "uint64") -> "tinfo_t":
        r"""get_innermost_member_type(self, bitoffset) -> tinfo_t"""
        return _ida_domain.tinfo_t_get_innermost_member_type(self, bitoffset)

    def calc_score(self) -> "uint32":
        r"""calc_score(self) -> uint32"""
        return _ida_domain.tinfo_t_calc_score(self)

    def _print(self, name: "char const *"=None, prtype_flags: "int"=0, indent: "int"=0, cmtindent: "int"=0, prefix: "char const *"=None, cmt: "char const *"=None) -> "bool":
        r"""_print(self, name=None, prtype_flags=0, indent=0, cmtindent=0, prefix=None, cmt=None) -> bool"""
        return _ida_domain.tinfo_t__print(self, name, prtype_flags, indent, cmtindent, prefix, cmt)

    def dstr(self) -> "char const *":
        r"""dstr(self) -> char const *"""
        return _ida_domain.tinfo_t_dstr(self)

    def get_attrs(self, tav: "type_attrs_t", all_attrs: "bool"=False) -> "bool":
        r"""get_attrs(self, tav, all_attrs=False) -> bool"""
        return _ida_domain.tinfo_t_get_attrs(self, tav, all_attrs)

    def set_attrs(self, tav: "type_attrs_t") -> "bool":
        r"""set_attrs(self, tav) -> bool"""
        return _ida_domain.tinfo_t_set_attrs(self, tav)

    def set_attr(self, ta: "type_attr_t", may_overwrite: "bool"=True) -> "bool":
        r"""set_attr(self, ta, may_overwrite=True) -> bool"""
        return _ida_domain.tinfo_t_set_attr(self, ta, may_overwrite)

    def del_attrs(self) -> "void":
        r"""del_attrs(self)"""
        return _ida_domain.tinfo_t_del_attrs(self)

    def del_attr(self, key: "qstring const &", make_copy: "bool"=True) -> "bool":
        r"""del_attr(self, key, make_copy=True) -> bool"""
        return _ida_domain.tinfo_t_del_attr(self, key, make_copy)

    def create_simple_type(self, decl_type: "type_t") -> "bool":
        r"""create_simple_type(self, decl_type) -> bool"""
        return _ida_domain.tinfo_t_create_simple_type(self, decl_type)

    def create_ptr(self, *args) -> "bool":
        r"""
        create_ptr(self, p, decl_type=BT_PTR) -> bool
        create_ptr(self, tif, bps=0, decl_type=BT_PTR) -> bool
        """
        return _ida_domain.tinfo_t_create_ptr(self, *args)

    def create_array(self, *args) -> "bool":
        r"""
        create_array(self, p, decl_type=BT_ARRAY) -> bool
        create_array(self, tif, nelems=0, base=0, decl_type=BT_ARRAY) -> bool
        """
        return _ida_domain.tinfo_t_create_array(self, *args)

    def create_typedef(self, *args) -> "void":
        r"""
        create_typedef(self, p, decl_type=BTF_TYPEDEF, try_ordinal=True) -> bool
        create_typedef(self, til, name, decl_type=BTF_TYPEDEF, try_ordinal=True)
        create_typedef(self, til, ord, decl_type=BTF_TYPEDEF)
        """
        return _ida_domain.tinfo_t_create_typedef(self, *args)

    def create_bitfield(self, *args) -> "bool":
        r"""
        create_bitfield(self, p, decl_type=BT_BITFIELD) -> bool
        create_bitfield(self, nbytes, width, is_unsigned=False, decl_type=BT_BITFIELD) -> bool
        """
        return _ida_domain.tinfo_t_create_bitfield(self, *args)

    def parse(self, decl: "char const *", til: "til_t"=None, pt_flags: "int"=0) -> "bool":
        r"""parse(self, decl, til=None, pt_flags=0) -> bool"""
        return _ida_domain.tinfo_t_parse(self, decl, til, pt_flags)

    def create_udt(self, *args) -> "bool":
        r"""
        create_udt(self, is_union=False) -> bool
        create_udt(self, p) -> bool
        create_udt(self, p, decl_type) -> bool
        """
        return _ida_domain.tinfo_t_create_udt(self, *args)

    def create_enum(self, *args) -> "bool":
        r"""
        create_enum(self, bte=BTE_ALWAYS|BTE_HEX) -> bool
        create_enum(self, p, decl_type=BTF_ENUM) -> bool
        """
        return _ida_domain.tinfo_t_create_enum(self, *args)

    def create_func(self, *args) -> "bool":
        r"""create_func(self, p, decl_type=BT_FUNC) -> bool"""
        return _ida_domain.tinfo_t_create_func(self, *args)

    def get_udm_by_tid(self, udm: "udm_t", tid: "tid_t") -> "ssize_t":
        r"""get_udm_by_tid(self, udm, tid) -> ssize_t"""
        return _ida_domain.tinfo_t_get_udm_by_tid(self, udm, tid)

    def get_edm_by_tid(self, edm: "edm_t", tid: "tid_t") -> "ssize_t":
        r"""get_edm_by_tid(self, edm, tid) -> ssize_t"""
        return _ida_domain.tinfo_t_get_edm_by_tid(self, edm, tid)

    def get_type_by_tid(self, tid: "tid_t") -> "bool":
        r"""get_type_by_tid(self, tid) -> bool"""
        return _ida_domain.tinfo_t_get_type_by_tid(self, tid)

    def get_by_edm_name(self, mname: "char const *", til: "til_t"=None) -> "ssize_t":
        r"""get_by_edm_name(self, mname, til=None) -> ssize_t"""
        return _ida_domain.tinfo_t_get_by_edm_name(self, mname, til)

    def set_named_type(self, til: "til_t", name: "char const *", ntf_flags: "int"=0) -> "tinfo_code_t":
        r"""set_named_type(self, til, name, ntf_flags=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_set_named_type(self, til, name, ntf_flags)

    def set_symbol_type(self, til: "til_t", name: "char const *", ntf_flags: "int"=0) -> "tinfo_code_t":
        r"""set_symbol_type(self, til, name, ntf_flags=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_set_symbol_type(self, til, name, ntf_flags)

    def set_numbered_type(self, til: "til_t", ord: "uint32", ntf_flags: "int"=0, name: "char const *"=None) -> "tinfo_code_t":
        r"""set_numbered_type(self, til, ord, ntf_flags=0, name=None) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_set_numbered_type(self, til, ord, ntf_flags, name)

    def save_type(self, *args) -> "tinfo_code_t":
        r"""save_type(self, ntf_flags=0x0001|0x0004) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_save_type(self, *args)

    def copy_type(self, *args) -> "tinfo_code_t":
        r"""copy_type(self, til, name, ntf_flags=0x0001|0x1000) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_copy_type(self, *args)

    def create_forward_decl(self, til: "til_t", decl_type: "type_t", name: "char const *", ntf_flags: "int"=0) -> "tinfo_code_t":
        r"""create_forward_decl(self, til, decl_type, name, ntf_flags=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_create_forward_decl(self, til, decl_type, name, ntf_flags)

    @staticmethod
    def get_stock(id: "stock_type_id_t") -> "tinfo_t":
        r"""get_stock(id) -> tinfo_t"""
        return _ida_domain.tinfo_t_get_stock(id)

    def convert_array_to_ptr(self) -> "bool":
        r"""convert_array_to_ptr(self) -> bool"""
        return _ida_domain.tinfo_t_convert_array_to_ptr(self)

    def remove_ptr_or_array(self) -> "bool":
        r"""remove_ptr_or_array(self) -> bool"""
        return _ida_domain.tinfo_t_remove_ptr_or_array(self)

    def read_bitfield_value(self, v: "uint64", bitoff: "int") -> "uint64":
        r"""read_bitfield_value(self, v, bitoff) -> uint64"""
        return _ida_domain.tinfo_t_read_bitfield_value(self, v, bitoff)

    def write_bitfield_value(self, dst: "uint64", v: "uint64", bitoff: "int") -> "uint64":
        r"""write_bitfield_value(self, dst, v, bitoff) -> uint64"""
        return _ida_domain.tinfo_t_write_bitfield_value(self, dst, v, bitoff)

    def get_modifiers(self) -> "type_t":
        r"""get_modifiers(self) -> type_t"""
        return _ida_domain.tinfo_t_get_modifiers(self)

    def set_modifiers(self, mod: "type_t") -> "void":
        r"""set_modifiers(self, mod)"""
        return _ida_domain.tinfo_t_set_modifiers(self, mod)

    def set_const(self) -> "void":
        r"""set_const(self)"""
        return _ida_domain.tinfo_t_set_const(self)

    def set_volatile(self) -> "void":
        r"""set_volatile(self)"""
        return _ida_domain.tinfo_t_set_volatile(self)

    def clr_decl_const_volatile(self) -> "void":
        r"""clr_decl_const_volatile(self)"""
        return _ida_domain.tinfo_t_clr_decl_const_volatile(self)

    def clr_const(self) -> "bool":
        r"""clr_const(self) -> bool"""
        return _ida_domain.tinfo_t_clr_const(self)

    def clr_volatile(self) -> "bool":
        r"""clr_volatile(self) -> bool"""
        return _ida_domain.tinfo_t_clr_volatile(self)

    def clr_const_volatile(self) -> "bool":
        r"""clr_const_volatile(self) -> bool"""
        return _ida_domain.tinfo_t_clr_const_volatile(self)

    def set_type_alignment(self, declalign: "uchar", etf_flags: "uint"=0) -> "tinfo_code_t":
        r"""set_type_alignment(self, declalign, etf_flags=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_set_type_alignment(self, declalign, etf_flags)

    def set_declalign(self, declalign: "uchar") -> "bool":
        r"""set_declalign(self, declalign) -> bool"""
        return _ida_domain.tinfo_t_set_declalign(self, declalign)

    def change_sign(self, sign: "type_sign_t") -> "bool":
        r"""change_sign(self, sign) -> bool"""
        return _ida_domain.tinfo_t_change_sign(self, sign)

    def calc_udt_aligns(self, sudt_flags: "int"=4) -> "bool":
        r"""calc_udt_aligns(self, sudt_flags=4) -> bool"""
        return _ida_domain.tinfo_t_calc_udt_aligns(self, sudt_flags)

    def set_methods(self, methods: "udtmembervec_t") -> "bool":
        r"""set_methods(self, methods) -> bool"""
        return _ida_domain.tinfo_t_set_methods(self, methods)

    def set_type_cmt(self, cmt: "char const *", is_regcmt: "bool"=False, etf_flags: "uint"=0) -> "tinfo_code_t":
        r"""set_type_cmt(self, cmt, is_regcmt=False, etf_flags=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_set_type_cmt(self, cmt, is_regcmt, etf_flags)

    def get_alias_target(self) -> "uint32":
        r"""get_alias_target(self) -> uint32"""
        return _ida_domain.tinfo_t_get_alias_target(self)

    def is_aliased(self) -> "bool":
        r"""is_aliased(self) -> bool"""
        return _ida_domain.tinfo_t_is_aliased(self)

    def set_type_alias(self, dest_ord: "uint32") -> "bool":
        r"""set_type_alias(self, dest_ord) -> bool"""
        return _ida_domain.tinfo_t_set_type_alias(self, dest_ord)

    def set_udt_alignment(self, sda: "int", etf_flags: "uint"=0) -> "tinfo_code_t":
        r"""set_udt_alignment(self, sda, etf_flags=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_set_udt_alignment(self, sda, etf_flags)

    def set_udt_pack(self, pack: "int", etf_flags: "uint"=0) -> "tinfo_code_t":
        r"""set_udt_pack(self, pack, etf_flags=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_set_udt_pack(self, pack, etf_flags)

    def get_udm_tid(self, idx: "size_t") -> "tid_t":
        r"""get_udm_tid(self, idx) -> tid_t"""
        return _ida_domain.tinfo_t_get_udm_tid(self, idx)

    def add_udm(self, *args) -> "tinfo_code_t":
        r"""
        add_udm(self, udm, etf_flags=0, times=1, idx=-1) -> tinfo_code_t
        add_udm(self, name, type, offset=0, etf_flags=0, times=1, idx=-1) -> tinfo_code_t
        add_udm(self, name, type, offset=0, etf_flags=0, times=1, idx=-1) -> tinfo_code_t
        add_udm(self, name, type, offset=0, etf_flags=0, times=1, idx=-1) -> tinfo_code_t
        """
        val = _ida_domain.tinfo_t_add_udm(self, *args)

        if val != 0:
            raise ValueError("Invalid input data: %s" % tinfo_errstr(val))


        return val


    def del_udm(self, index: "size_t", etf_flags: "uint"=0) -> "tinfo_code_t":
        r"""del_udm(self, index, etf_flags=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_del_udm(self, index, etf_flags)

    def del_udms(self, idx1: "size_t", idx2: "size_t", etf_flags: "uint"=0) -> "tinfo_code_t":
        r"""del_udms(self, idx1, idx2, etf_flags=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_del_udms(self, idx1, idx2, etf_flags)

    def rename_udm(self, index: "size_t", name: "char const *", etf_flags: "uint"=0) -> "tinfo_code_t":
        r"""rename_udm(self, index, name, etf_flags=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_rename_udm(self, index, name, etf_flags)

    def set_udm_type(self, index: "size_t", tif: "tinfo_t", etf_flags: "uint"=0, repr: "value_repr_t"=None) -> "tinfo_code_t":
        r"""set_udm_type(self, index, tif, etf_flags=0, repr=None) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_set_udm_type(self, index, tif, etf_flags, repr)

    def set_udm_cmt(self, index: "size_t", cmt: "char const *", is_regcmt: "bool"=False, etf_flags: "uint"=0) -> "tinfo_code_t":
        r"""set_udm_cmt(self, index, cmt, is_regcmt=False, etf_flags=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_set_udm_cmt(self, index, cmt, is_regcmt, etf_flags)

    def set_udm_repr(self, index: "size_t", repr: "value_repr_t", etf_flags: "uint"=0) -> "tinfo_code_t":
        r"""set_udm_repr(self, index, repr, etf_flags=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_set_udm_repr(self, index, repr, etf_flags)

    def is_udm_by_til(self, idx: "size_t") -> "bool":
        r"""is_udm_by_til(self, idx) -> bool"""
        return _ida_domain.tinfo_t_is_udm_by_til(self, idx)

    def set_udm_by_til(self, idx: "size_t", on: "bool"=True, etf_flags: "uint"=0) -> "tinfo_code_t":
        r"""set_udm_by_til(self, idx, on=True, etf_flags=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_set_udm_by_til(self, idx, on, etf_flags)

    def set_fixed_struct(self, on: "bool"=True) -> "tinfo_code_t":
        r"""set_fixed_struct(self, on=True) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_set_fixed_struct(self, on)

    def set_struct_size(self, new_size: "size_t") -> "tinfo_code_t":
        r"""set_struct_size(self, new_size) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_set_struct_size(self, new_size)

    def is_fixed_struct(self) -> "bool":
        r"""is_fixed_struct(self) -> bool"""
        return _ida_domain.tinfo_t_is_fixed_struct(self)

    def expand_udt(self, idx: "size_t", delta: "adiff_t", etf_flags: "uint"=0) -> "tinfo_code_t":
        r"""expand_udt(self, idx, delta, etf_flags=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_expand_udt(self, idx, delta, etf_flags)

    def get_func_frame(self, pfn: "func_t") -> "bool":
        r"""get_func_frame(self, pfn) -> bool"""
        return _ida_domain.tinfo_t_get_func_frame(self, pfn)

    def is_frame(self) -> "bool":
        r"""is_frame(self) -> bool"""
        return _ida_domain.tinfo_t_is_frame(self)

    def get_frame_func(self) -> "ea_t":
        r"""get_frame_func(self) -> ea_t"""
        return _ida_domain.tinfo_t_get_frame_func(self)

    def set_enum_width(self, nbytes: "int", etf_flags: "uint"=0) -> "tinfo_code_t":
        r"""set_enum_width(self, nbytes, etf_flags=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_set_enum_width(self, nbytes, etf_flags)

    def set_enum_sign(self, sign: "type_sign_t", etf_flags: "uint"=0) -> "tinfo_code_t":
        r"""set_enum_sign(self, sign, etf_flags=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_set_enum_sign(self, sign, etf_flags)
    ENUMBM_OFF = _ida_domain.tinfo_t_ENUMBM_OFF
    
    ENUMBM_ON = _ida_domain.tinfo_t_ENUMBM_ON
    
    ENUMBM_AUTO = _ida_domain.tinfo_t_ENUMBM_AUTO
    

    def set_enum_is_bitmask(self, *args) -> "tinfo_code_t":
        r"""set_enum_is_bitmask(self, stance=ENUMBM_ON, etf_flags=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_set_enum_is_bitmask(self, *args)

    def set_enum_repr(self, repr: "value_repr_t", etf_flags: "uint"=0) -> "tinfo_code_t":
        r"""set_enum_repr(self, repr, etf_flags=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_set_enum_repr(self, repr, etf_flags)

    def set_enum_radix(self, radix: "int", sign: "bool", etf_flags: "uint"=0) -> "tinfo_code_t":
        r"""set_enum_radix(self, radix, sign, etf_flags=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_set_enum_radix(self, radix, sign, etf_flags)

    def add_edm(self, *args) -> "tinfo_code_t":
        r"""
        add_edm(self, edm, bmask=bmask64_t(-1), etf_flags=0, idx=-1) -> tinfo_code_t
        add_edm(self, name, value, bmask=bmask64_t(-1), etf_flags=0, idx=-1) -> tinfo_code_t
        """
        val = _ida_domain.tinfo_t_add_edm(self, *args)

        if val != 0:
            raise ValueError("Invalid input data: %s" % tinfo_errstr(val))


        return val


    def del_edms(self, idx1: "size_t", idx2: "size_t", etf_flags: "uint"=0) -> "tinfo_code_t":
        r"""del_edms(self, idx1, idx2, etf_flags=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_del_edms(self, idx1, idx2, etf_flags)

    def del_edm(self, *args) -> "tinfo_code_t":
        r"""
        del_edm(self, idx, etf_flags=0) -> tinfo_code_t
        del_edm(self, name, etf_flags=0) -> tinfo_code_t
        """
        return _ida_domain.tinfo_t_del_edm(self, *args)

    def del_edm_by_value(self, *args) -> "tinfo_code_t":
        r"""del_edm_by_value(self, value, etf_flags=0, bmask=bmask64_t(-1), serial=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_del_edm_by_value(self, *args)

    def rename_edm(self, idx: "size_t", name: "char const *", etf_flags: "uint"=0) -> "tinfo_code_t":
        r"""rename_edm(self, idx, name, etf_flags=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_rename_edm(self, idx, name, etf_flags)

    def set_edm_cmt(self, idx: "size_t", cmt: "char const *", etf_flags: "uint"=0) -> "tinfo_code_t":
        r"""set_edm_cmt(self, idx, cmt, etf_flags=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_set_edm_cmt(self, idx, cmt, etf_flags)

    def edit_edm(self, *args) -> "tinfo_code_t":
        r"""edit_edm(self, idx, value, bmask=bmask64_t(-1), etf_flags=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_edit_edm(self, *args)

    def rename_funcarg(self, index: "size_t", name: "char const *", etf_flags: "uint"=0) -> "tinfo_code_t":
        r"""rename_funcarg(self, index, name, etf_flags=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_rename_funcarg(self, index, name, etf_flags)

    def set_funcarg_type(self, index: "size_t", tif: "tinfo_t", etf_flags: "uint"=0) -> "tinfo_code_t":
        r"""set_funcarg_type(self, index, tif, etf_flags=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_set_funcarg_type(self, index, tif, etf_flags)

    def set_func_rettype(self, tif: "tinfo_t", etf_flags: "uint"=0) -> "tinfo_code_t":
        r"""set_func_rettype(self, tif, etf_flags=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_set_func_rettype(self, tif, etf_flags)

    def del_funcargs(self, idx1: "size_t", idx2: "size_t", etf_flags: "uint"=0) -> "tinfo_code_t":
        r"""del_funcargs(self, idx1, idx2, etf_flags=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_del_funcargs(self, idx1, idx2, etf_flags)

    def del_funcarg(self, idx: "size_t", etf_flags: "uint"=0) -> "tinfo_code_t":
        r"""del_funcarg(self, idx, etf_flags=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_del_funcarg(self, idx, etf_flags)

    def add_funcarg(self, farg: "funcarg_t", etf_flags: "uint"=0, idx: "ssize_t"=-1) -> "tinfo_code_t":
        r"""add_funcarg(self, farg, etf_flags=0, idx=-1) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_add_funcarg(self, farg, etf_flags, idx)

    def set_func_cc(self, cc: "cm_t", etf_flags: "uint"=0) -> "tinfo_code_t":
        r"""set_func_cc(self, cc, etf_flags=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_set_func_cc(self, cc, etf_flags)

    def set_funcarg_loc(self, index: "size_t", argloc: "argloc_t", etf_flags: "uint"=0) -> "tinfo_code_t":
        r"""set_funcarg_loc(self, index, argloc, etf_flags=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_set_funcarg_loc(self, index, argloc, etf_flags)

    def set_func_retloc(self, argloc: "argloc_t", etf_flags: "uint"=0) -> "tinfo_code_t":
        r"""set_func_retloc(self, argloc, etf_flags=0) -> tinfo_code_t"""
        return _ida_domain.tinfo_t_set_func_retloc(self, argloc, etf_flags)

    def __eq__(self, r: "tinfo_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.tinfo_t___eq__(self, r)

    def __ne__(self, r: "tinfo_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.tinfo_t___ne__(self, r)

    def __lt__(self, r: "tinfo_t") -> "bool":
        r"""__lt__(self, r) -> bool"""
        return _ida_domain.tinfo_t___lt__(self, r)

    def __gt__(self, r: "tinfo_t") -> "bool":
        r"""__gt__(self, r) -> bool"""
        return _ida_domain.tinfo_t___gt__(self, r)

    def __le__(self, r: "tinfo_t") -> "bool":
        r"""__le__(self, r) -> bool"""
        return _ida_domain.tinfo_t___le__(self, r)

    def __ge__(self, r: "tinfo_t") -> "bool":
        r"""__ge__(self, r) -> bool"""
        return _ida_domain.tinfo_t___ge__(self, r)

    def compare(self, r: "tinfo_t") -> "int":
        r"""compare(self, r) -> int"""
        return _ida_domain.tinfo_t_compare(self, r)

    def compare_with(self, r: "tinfo_t", tcflags: "int"=0) -> "bool":
        r"""compare_with(self, r, tcflags=0) -> bool"""
        return _ida_domain.tinfo_t_compare_with(self, r, tcflags)

    def equals_to(self, r: "tinfo_t") -> "bool":
        r"""equals_to(self, r) -> bool"""
        return _ida_domain.tinfo_t_equals_to(self, r)

    def is_castable_to(self, target: "tinfo_t") -> "bool":
        r"""is_castable_to(self, target) -> bool"""
        return _ida_domain.tinfo_t_is_castable_to(self, target)

    def is_manually_castable_to(self, target: "tinfo_t") -> "bool":
        r"""is_manually_castable_to(self, target) -> bool"""
        return _ida_domain.tinfo_t_is_manually_castable_to(self, target)

    def serialize(self, *args) -> "PyObject *":
        r"""serialize(self, sudt_flags=SUDT_FAST|SUDT_TRUNC) -> PyObject"""
        return _ida_domain.tinfo_t_serialize(self, *args)

    def deserialize(self, *args) -> "bool":
        r"""
        deserialize(self, til, ptype, pfields=None, pfldcmts=None, cmt=None) -> bool
        deserialize(self, til, type, fields, cmts=None) -> bool
        """
        return _ida_domain.tinfo_t_deserialize(self, *args)

    def get_stkvar(self, insn: "insn_t", x: "op_t", v: "sval_t") -> "ssize_t":
        r"""get_stkvar(self, insn, x, v) -> ssize_t"""
        return _ida_domain.tinfo_t_get_stkvar(self, insn, x, v)

    def copy(self) -> "tinfo_t":
        r"""copy(self) -> tinfo_t"""
        return _ida_domain.tinfo_t_copy(self)

    def __str__(self) -> "qstring":
        r"""__str__(self) -> qstring"""
        return _ida_domain.tinfo_t___str__(self)
    __swig_destroy__ = _ida_domain.delete_tinfo_t

    def get_attr(self, key: "qstring const &", all_attrs: "bool"=True) -> "PyObject *":
        r"""get_attr(self, key, all_attrs=True) -> PyObject"""
        return _ida_domain.tinfo_t_get_attr(self, key, all_attrs)

    def get_edm(self, *args) -> "int":
        r"""
        get_edm(self, name) -> ssize_t
        get_edm(self, edm, idx) -> tinfo_code_t
        get_edm(self, idx) -> int
        """
        return _ida_domain.tinfo_t_get_edm(self, *args)

    def find_edm(self, *args) -> "ssize_t":
        r"""
        find_edm(self, edm, value, bmask=DEFMASK64, serial=0) -> ssize_t
        find_edm(self, edm, name) -> ssize_t
        """
        return _ida_domain.tinfo_t_find_edm(self, *args)


    def __repr__(self):
        if self.present():
            til = self.get_til()
            if til == get_idati():
                name = self.get_type_name()
                if name:
                    return f'{self.__class__.__module__}.{self.__class__.__name__}(get_idati(), "{name}")'
                else:
                    ord = self.get_ordinal()
                    if ord > 0:
                        return f'{self.__class__.__module__}.{self.__class__.__name__}(get_idati(), {ord})'
            return f'{self.__class__.__module__}.{self.__class__.__name__}("""{self._print()}""")'
        return f'{self.__class__.__module__}.{self.__class__.__name__}()'

    def iter_struct(self):
        udt = udt_type_data_t()
        if not self.is_struct() or not self.get_udt_details(udt):
            raise TypeError("Type is not a structure")
        for udm in udt:
            yield udm_t(udm)


    def iter_union(self):
        udt = udt_type_data_t()
        if not self.is_union() or not self.get_udt_details(udt):
            raise TypeError("Type is not a union")
        for udm in udt:
            yield udm_t(udm)

    def iter_udt(self):
        udt = udt_type_data_t()
        if not self.is_udt() or not self.get_udt_details(udt):
            raise TypeError("Type is not a structure or union")
        for udm in udt:
            yield udm_t(udm)

    def iter_enum(self):
        edt = enum_type_data_t()
        if not self.is_enum() or not self.get_enum_details(edt):
            raise TypeError("Type is not a structure")
        for edm in edt:
            yield edm_t(edm)

    def iter_func(self):
        fdt = func_type_data_t()
        if not self.is_func() or not self.get_func_details(fdt):
            raise TypeError("Type is not a function")
        for arg in fdt:
            yield funcarg_t(arg)

    get_edm_by_name = get_by_edm_name # bw-compat


    name = property(get_type_name, doc=r"""name : str""")


# Register tinfo_t in _ida_domain:
_ida_domain.tinfo_t_swigregister(tinfo_t)
COMP_MASK = cvar.COMP_MASK
COMP_UNK = cvar.COMP_UNK
COMP_MS = cvar.COMP_MS
COMP_BC = cvar.COMP_BC
COMP_WATCOM = cvar.COMP_WATCOM
COMP_GNU = cvar.COMP_GNU
COMP_VISAGE = cvar.COMP_VISAGE
COMP_BP = cvar.COMP_BP
COMP_UNSURE = cvar.COMP_UNSURE
BADSIZE = cvar.BADSIZE
FIRST_NONTRIVIAL_TYPID = cvar.FIRST_NONTRIVIAL_TYPID
TYPID_ISREF = cvar.TYPID_ISREF
TYPID_SHIFT = cvar.TYPID_SHIFT

def remove_pointer(tif: "tinfo_t") -> "tinfo_t":
    r"""remove_pointer(tif) -> tinfo_t"""
    return _ida_domain.remove_pointer(tif)
STRMEM_MASK = _ida_domain.STRMEM_MASK

STRMEM_OFFSET = _ida_domain.STRMEM_OFFSET

STRMEM_INDEX = _ida_domain.STRMEM_INDEX

STRMEM_AUTO = _ida_domain.STRMEM_AUTO

STRMEM_NAME = _ida_domain.STRMEM_NAME

STRMEM_TYPE = _ida_domain.STRMEM_TYPE

STRMEM_SIZE = _ida_domain.STRMEM_SIZE

STRMEM_MINS = _ida_domain.STRMEM_MINS

STRMEM_MAXS = _ida_domain.STRMEM_MAXS

STRMEM_LOWBND = _ida_domain.STRMEM_LOWBND

STRMEM_NEXT = _ida_domain.STRMEM_NEXT

STRMEM_VFTABLE = _ida_domain.STRMEM_VFTABLE

STRMEM_SKIP_EMPTY = _ida_domain.STRMEM_SKIP_EMPTY

STRMEM_CASTABLE_TO = _ida_domain.STRMEM_CASTABLE_TO

STRMEM_ANON = _ida_domain.STRMEM_ANON

STRMEM_SKIP_GAPS = _ida_domain.STRMEM_SKIP_GAPS

TCMP_EQUAL = _ida_domain.TCMP_EQUAL

TCMP_IGNMODS = _ida_domain.TCMP_IGNMODS

TCMP_AUTOCAST = _ida_domain.TCMP_AUTOCAST

TCMP_MANCAST = _ida_domain.TCMP_MANCAST

TCMP_CALL = _ida_domain.TCMP_CALL

TCMP_DELPTR = _ida_domain.TCMP_DELPTR

TCMP_DECL = _ida_domain.TCMP_DECL

TCMP_ANYBASE = _ida_domain.TCMP_ANYBASE

TCMP_SKIPTHIS = _ida_domain.TCMP_SKIPTHIS


class simd_info_t(object):
    r"""Proxy of C++ simd_info_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name: "char const *" = property(_ida_domain.simd_info_t_name_get, _ida_domain.simd_info_t_name_set, doc=r"""name""")
    tif: "tinfo_t" = property(_ida_domain.simd_info_t_tif_get, _ida_domain.simd_info_t_tif_set, doc=r"""tif""")
    size: "uint16" = property(_ida_domain.simd_info_t_size_get, _ida_domain.simd_info_t_size_set, doc=r"""size""")
    memtype: "type_t" = property(_ida_domain.simd_info_t_memtype_get, _ida_domain.simd_info_t_memtype_set, doc=r"""memtype""")

    def __init__(self, *args):
        r"""__init__(self, nm=None, sz=0, memt=BTF_UNK) -> simd_info_t"""
        _ida_domain.simd_info_t_swiginit(self, _ida_domain.new_simd_info_t(*args))

    def match_pattern(self, pattern: "simd_info_t") -> "bool":
        r"""match_pattern(self, pattern) -> bool"""
        return _ida_domain.simd_info_t_match_pattern(self, pattern)
    __swig_destroy__ = _ida_domain.delete_simd_info_t

# Register simd_info_t in _ida_domain:
_ida_domain.simd_info_t_swigregister(simd_info_t)

def guess_func_cc(fti: "func_type_data_t", npurged: "int", cc_flags: "int") -> "cm_t":
    r"""guess_func_cc(fti, npurged, cc_flags) -> cm_t"""
    return _ida_domain.guess_func_cc(fti, npurged, cc_flags)

def dump_func_type_data(fti: "func_type_data_t", praloc_bits: "int") -> "qstring *":
    r"""dump_func_type_data(fti, praloc_bits) -> bool"""
    return _ida_domain.dump_func_type_data(fti, praloc_bits)
class ptr_type_data_t(object):
    r"""Proxy of C++ ptr_type_data_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    obj_type: "tinfo_t" = property(_ida_domain.ptr_type_data_t_obj_type_get, _ida_domain.ptr_type_data_t_obj_type_set, doc=r"""obj_type""")
    closure: "tinfo_t" = property(_ida_domain.ptr_type_data_t_closure_get, _ida_domain.ptr_type_data_t_closure_set, doc=r"""closure""")
    parent: "tinfo_t" = property(_ida_domain.ptr_type_data_t_parent_get, _ida_domain.ptr_type_data_t_parent_set, doc=r"""parent""")
    delta: "int32" = property(_ida_domain.ptr_type_data_t_delta_get, _ida_domain.ptr_type_data_t_delta_set, doc=r"""delta""")
    based_ptr_size: "uchar" = property(_ida_domain.ptr_type_data_t_based_ptr_size_get, _ida_domain.ptr_type_data_t_based_ptr_size_set, doc=r"""based_ptr_size""")
    taptr_bits: "uchar" = property(_ida_domain.ptr_type_data_t_taptr_bits_get, _ida_domain.ptr_type_data_t_taptr_bits_set, doc=r"""taptr_bits""")

    def __init__(self, *args):
        r"""__init__(self, c=tinfo_t(), bps=0, p=tinfo_t(), d=0) -> ptr_type_data_t"""
        _ida_domain.ptr_type_data_t_swiginit(self, _ida_domain.new_ptr_type_data_t(*args))

    def swap(self, r: "ptr_type_data_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.ptr_type_data_t_swap(self, r)

    def __eq__(self, r: "ptr_type_data_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.ptr_type_data_t___eq__(self, r)

    def __ne__(self, r: "ptr_type_data_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.ptr_type_data_t___ne__(self, r)

    def is_code_ptr(self) -> "bool":
        r"""is_code_ptr(self) -> bool"""
        return _ida_domain.ptr_type_data_t_is_code_ptr(self)

    def is_shifted(self) -> "bool":
        r"""is_shifted(self) -> bool"""
        return _ida_domain.ptr_type_data_t_is_shifted(self)
    __swig_destroy__ = _ida_domain.delete_ptr_type_data_t

# Register ptr_type_data_t in _ida_domain:
_ida_domain.ptr_type_data_t_swigregister(ptr_type_data_t)
class array_type_data_t(object):
    r"""Proxy of C++ array_type_data_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    elem_type: "tinfo_t" = property(_ida_domain.array_type_data_t_elem_type_get, _ida_domain.array_type_data_t_elem_type_set, doc=r"""elem_type""")
    base: "uint32" = property(_ida_domain.array_type_data_t_base_get, _ida_domain.array_type_data_t_base_set, doc=r"""base""")
    nelems: "uint32" = property(_ida_domain.array_type_data_t_nelems_get, _ida_domain.array_type_data_t_nelems_set, doc=r"""nelems""")

    def __init__(self, b: "size_t"=0, n: "size_t"=0):
        r"""__init__(self, b=0, n=0) -> array_type_data_t"""
        _ida_domain.array_type_data_t_swiginit(self, _ida_domain.new_array_type_data_t(b, n))

    def swap(self, r: "array_type_data_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.array_type_data_t_swap(self, r)
    __swig_destroy__ = _ida_domain.delete_array_type_data_t

# Register array_type_data_t in _ida_domain:
_ida_domain.array_type_data_t_swigregister(array_type_data_t)
class funcarg_t(object):
    r"""Proxy of C++ funcarg_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    argloc: "argloc_t" = property(_ida_domain.funcarg_t_argloc_get, _ida_domain.funcarg_t_argloc_set, doc=r"""argloc""")
    name: "qstring" = property(_ida_domain.funcarg_t_name_get, _ida_domain.funcarg_t_name_set, doc=r"""name""")
    cmt: "qstring" = property(_ida_domain.funcarg_t_cmt_get, _ida_domain.funcarg_t_cmt_set, doc=r"""cmt""")
    type: "tinfo_t" = property(_ida_domain.funcarg_t_type_get, _ida_domain.funcarg_t_type_set, doc=r"""type""")
    flags: "uint32" = property(_ida_domain.funcarg_t_flags_get, _ida_domain.funcarg_t_flags_set, doc=r"""flags""")

    def __eq__(self, r: "funcarg_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.funcarg_t___eq__(self, r)

    def __ne__(self, r: "funcarg_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.funcarg_t___ne__(self, r)

    def __init__(self, *args):
        r"""
        __init__(self) -> funcarg_t
        __init__(self, _name, _type, _argloc=argloc_t()) -> funcarg_t
        __init__(self, _name, _type, _argloc=argloc_t()) -> funcarg_t
        __init__(self, _name, _type, _argloc=argloc_t()) -> funcarg_t
        __init__(self, r) -> funcarg_t
        """
        _ida_domain.funcarg_t_swiginit(self, _ida_domain.new_funcarg_t(*args))

        if args and self.type.empty():
            raise ValueError("Invalid input data: %s" % str(args))



    __swig_destroy__ = _ida_domain.delete_funcarg_t

# Register funcarg_t in _ida_domain:
_ida_domain.funcarg_t_swigregister(funcarg_t)
FAI_HIDDEN = _ida_domain.FAI_HIDDEN

FAI_RETPTR = _ida_domain.FAI_RETPTR

FAI_STRUCT = _ida_domain.FAI_STRUCT

FAI_ARRAY = _ida_domain.FAI_ARRAY

FAI_UNUSED = _ida_domain.FAI_UNUSED


class func_type_data_t(funcargvec_t):
    r"""Proxy of C++ func_type_data_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    flags: "int" = property(_ida_domain.func_type_data_t_flags_get, _ida_domain.func_type_data_t_flags_set, doc=r"""flags""")
    rettype: "tinfo_t" = property(_ida_domain.func_type_data_t_rettype_get, _ida_domain.func_type_data_t_rettype_set, doc=r"""rettype""")
    retloc: "argloc_t" = property(_ida_domain.func_type_data_t_retloc_get, _ida_domain.func_type_data_t_retloc_set, doc=r"""retloc""")
    stkargs: "uval_t" = property(_ida_domain.func_type_data_t_stkargs_get, _ida_domain.func_type_data_t_stkargs_set, doc=r"""stkargs""")
    spoiled: "reginfovec_t" = property(_ida_domain.func_type_data_t_spoiled_get, _ida_domain.func_type_data_t_spoiled_set, doc=r"""spoiled""")
    cc: "cm_t" = property(_ida_domain.func_type_data_t_cc_get, _ida_domain.func_type_data_t_cc_set, doc=r"""cc""")

    def swap(self, r: "func_type_data_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.func_type_data_t_swap(self, r)

    def is_high(self) -> "bool":
        r"""is_high(self) -> bool"""
        return _ida_domain.func_type_data_t_is_high(self)

    def is_noret(self) -> "bool":
        r"""is_noret(self) -> bool"""
        return _ida_domain.func_type_data_t_is_noret(self)

    def is_pure(self) -> "bool":
        r"""is_pure(self) -> bool"""
        return _ida_domain.func_type_data_t_is_pure(self)

    def is_static(self) -> "bool":
        r"""is_static(self) -> bool"""
        return _ida_domain.func_type_data_t_is_static(self)

    def is_virtual(self) -> "bool":
        r"""is_virtual(self) -> bool"""
        return _ida_domain.func_type_data_t_is_virtual(self)

    def is_const(self) -> "bool":
        r"""is_const(self) -> bool"""
        return _ida_domain.func_type_data_t_is_const(self)

    def is_ctor(self) -> "bool":
        r"""is_ctor(self) -> bool"""
        return _ida_domain.func_type_data_t_is_ctor(self)

    def is_dtor(self) -> "bool":
        r"""is_dtor(self) -> bool"""
        return _ida_domain.func_type_data_t_is_dtor(self)

    def get_call_method(self) -> "int":
        r"""get_call_method(self) -> int"""
        return _ida_domain.func_type_data_t_get_call_method(self)

    def is_vararg_cc(self) -> "bool":
        r"""is_vararg_cc(self) -> bool"""
        return _ida_domain.func_type_data_t_is_vararg_cc(self)

    def is_golang_cc(self) -> "bool":
        r"""is_golang_cc(self) -> bool"""
        return _ida_domain.func_type_data_t_is_golang_cc(self)

    def is_swift_cc(self) -> "bool":
        r"""is_swift_cc(self) -> bool"""
        return _ida_domain.func_type_data_t_is_swift_cc(self)

    def guess_cc(self, purged: "int", cc_flags: "int") -> "cm_t":
        r"""guess_cc(self, purged, cc_flags) -> cm_t"""
        return _ida_domain.func_type_data_t_guess_cc(self, purged, cc_flags)

    def dump(self, praloc_bits: "int"=2) -> "bool":
        r"""dump(self, praloc_bits=2) -> bool"""
        return _ida_domain.func_type_data_t_dump(self, praloc_bits)

    def find_argument(self, *args) -> "ssize_t":
        r"""find_argument(self, name, frm=0, to=size_t(-1)) -> ssize_t"""
        return _ida_domain.func_type_data_t_find_argument(self, *args)
    __swig_destroy__ = _ida_domain.delete_func_type_data_t

    def __init__(self):
        r"""__init__(self) -> func_type_data_t"""
        _ida_domain.func_type_data_t_swiginit(self, _ida_domain.new_func_type_data_t())

# Register func_type_data_t in _ida_domain:
_ida_domain.func_type_data_t_swigregister(func_type_data_t)
FTI_SPOILED = _ida_domain.FTI_SPOILED

FTI_NORET = _ida_domain.FTI_NORET

FTI_PURE = _ida_domain.FTI_PURE

FTI_HIGH = _ida_domain.FTI_HIGH

FTI_STATIC = _ida_domain.FTI_STATIC

FTI_VIRTUAL = _ida_domain.FTI_VIRTUAL

FTI_CALLTYPE = _ida_domain.FTI_CALLTYPE

FTI_DEFCALL = _ida_domain.FTI_DEFCALL

FTI_NEARCALL = _ida_domain.FTI_NEARCALL

FTI_FARCALL = _ida_domain.FTI_FARCALL

FTI_INTCALL = _ida_domain.FTI_INTCALL

FTI_ARGLOCS = _ida_domain.FTI_ARGLOCS

FTI_EXPLOCS = _ida_domain.FTI_EXPLOCS

FTI_CONST = _ida_domain.FTI_CONST

FTI_CTOR = _ida_domain.FTI_CTOR

FTI_DTOR = _ida_domain.FTI_DTOR

FTI_ALL = _ida_domain.FTI_ALL

CC_CDECL_OK = _ida_domain.CC_CDECL_OK

CC_ALLOW_ARGPERM = _ida_domain.CC_ALLOW_ARGPERM

CC_ALLOW_REGHOLES = _ida_domain.CC_ALLOW_REGHOLES

CC_HAS_ELLIPSIS = _ida_domain.CC_HAS_ELLIPSIS

CC_GOLANG_OK = _ida_domain.CC_GOLANG_OK


FMTFUNC_PRINTF = _ida_domain.FMTFUNC_PRINTF

FMTFUNC_SCANF = _ida_domain.FMTFUNC_SCANF

FMTFUNC_STRFTIME = _ida_domain.FMTFUNC_STRFTIME

FMTFUNC_STRFMON = _ida_domain.FMTFUNC_STRFMON

class stkarg_area_info_t(object):
    r"""Proxy of C++ stkarg_area_info_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cb: "size_t" = property(_ida_domain.stkarg_area_info_t_cb_get, _ida_domain.stkarg_area_info_t_cb_set, doc=r"""cb""")
    stkarg_offset: "sval_t" = property(_ida_domain.stkarg_area_info_t_stkarg_offset_get, _ida_domain.stkarg_area_info_t_stkarg_offset_set, doc=r"""stkarg_offset""")
    shadow_size: "sval_t" = property(_ida_domain.stkarg_area_info_t_shadow_size_get, _ida_domain.stkarg_area_info_t_shadow_size_set, doc=r"""shadow_size""")
    linkage_area: "sval_t" = property(_ida_domain.stkarg_area_info_t_linkage_area_get, _ida_domain.stkarg_area_info_t_linkage_area_set, doc=r"""linkage_area""")

    def __init__(self):
        r"""__init__(self) -> stkarg_area_info_t"""
        _ida_domain.stkarg_area_info_t_swiginit(self, _ida_domain.new_stkarg_area_info_t())
    __swig_destroy__ = _ida_domain.delete_stkarg_area_info_t

# Register stkarg_area_info_t in _ida_domain:
_ida_domain.stkarg_area_info_t_swigregister(stkarg_area_info_t)
class edm_t(object):
    r"""Proxy of C++ edm_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name: "qstring" = property(_ida_domain.edm_t_name_get, _ida_domain.edm_t_name_set, doc=r"""name""")
    cmt: "qstring" = property(_ida_domain.edm_t_cmt_get, _ida_domain.edm_t_cmt_set, doc=r"""cmt""")
    value: "uint64" = property(_ida_domain.edm_t_value_get, _ida_domain.edm_t_value_set, doc=r"""value""")

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.edm_t_empty(self)

    def __eq__(self, r: "edm_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.edm_t___eq__(self, r)

    def __ne__(self, r: "edm_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.edm_t___ne__(self, r)

    def swap(self, r: "edm_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.edm_t_swap(self, r)

    def get_tid(self) -> "tid_t":
        r"""get_tid(self) -> tid_t"""
        return _ida_domain.edm_t_get_tid(self)

    def __init__(self, *args):
        r"""
        __init__(self) -> edm_t
        __init__(self, _name, _value, _cmt=None) -> edm_t
        __init__(self, r) -> edm_t
        """
        _ida_domain.edm_t_swiginit(self, _ida_domain.new_edm_t(*args))
    __swig_destroy__ = _ida_domain.delete_edm_t

# Register edm_t in _ida_domain:
_ida_domain.edm_t_swigregister(edm_t)
class enum_type_data_t(edmvec_t):
    r"""Proxy of C++ enum_type_data_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    group_sizes: "intvec_t" = property(_ida_domain.enum_type_data_t_group_sizes_get, _ida_domain.enum_type_data_t_group_sizes_set, doc=r"""group_sizes""")
    taenum_bits: "uint32" = property(_ida_domain.enum_type_data_t_taenum_bits_get, _ida_domain.enum_type_data_t_taenum_bits_set, doc=r"""taenum_bits""")
    bte: "bte_t" = property(_ida_domain.enum_type_data_t_bte_get, _ida_domain.enum_type_data_t_bte_set, doc=r"""bte""")

    def __init__(self, *args):
        r"""__init__(self, _bte=BTE_ALWAYS|BTE_HEX) -> enum_type_data_t"""
        _ida_domain.enum_type_data_t_swiginit(self, _ida_domain.new_enum_type_data_t(*args))

    def get_enum_radix(self) -> "int":
        r"""get_enum_radix(self) -> int"""
        return _ida_domain.enum_type_data_t_get_enum_radix(self)

    def is_number_signed(self) -> "bool":
        r"""is_number_signed(self) -> bool"""
        return _ida_domain.enum_type_data_t_is_number_signed(self)

    def set_enum_radix(self, radix: "int", sign: "bool") -> "void":
        r"""set_enum_radix(self, radix, sign)"""
        return _ida_domain.enum_type_data_t_set_enum_radix(self, radix, sign)

    def is_char(self) -> "bool":
        r"""is_char(self) -> bool"""
        return _ida_domain.enum_type_data_t_is_char(self)

    def is_dec(self) -> "bool":
        r"""is_dec(self) -> bool"""
        return _ida_domain.enum_type_data_t_is_dec(self)

    def is_hex(self) -> "bool":
        r"""is_hex(self) -> bool"""
        return _ida_domain.enum_type_data_t_is_hex(self)

    def is_oct(self) -> "bool":
        r"""is_oct(self) -> bool"""
        return _ida_domain.enum_type_data_t_is_oct(self)

    def is_bin(self) -> "bool":
        r"""is_bin(self) -> bool"""
        return _ida_domain.enum_type_data_t_is_bin(self)

    def is_udec(self) -> "bool":
        r"""is_udec(self) -> bool"""
        return _ida_domain.enum_type_data_t_is_udec(self)

    def is_shex(self) -> "bool":
        r"""is_shex(self) -> bool"""
        return _ida_domain.enum_type_data_t_is_shex(self)

    def is_soct(self) -> "bool":
        r"""is_soct(self) -> bool"""
        return _ida_domain.enum_type_data_t_is_soct(self)

    def is_sbin(self) -> "bool":
        r"""is_sbin(self) -> bool"""
        return _ida_domain.enum_type_data_t_is_sbin(self)

    def has_lzero(self) -> "bool":
        r"""has_lzero(self) -> bool"""
        return _ida_domain.enum_type_data_t_has_lzero(self)

    def set_lzero(self, on: "bool") -> "void":
        r"""set_lzero(self, on)"""
        return _ida_domain.enum_type_data_t_set_lzero(self, on)

    def calc_mask(self) -> "uint64":
        r"""calc_mask(self) -> uint64"""
        return _ida_domain.enum_type_data_t_calc_mask(self)

    def store_64bit_values(self) -> "bool":
        r"""store_64bit_values(self) -> bool"""
        return _ida_domain.enum_type_data_t_store_64bit_values(self)

    def is_bf(self) -> "bool":
        r"""is_bf(self) -> bool"""
        return _ida_domain.enum_type_data_t_is_bf(self)

    def calc_nbytes(self) -> "int":
        r"""calc_nbytes(self) -> int"""
        return _ida_domain.enum_type_data_t_calc_nbytes(self)

    def set_nbytes(self, nbytes: "int") -> "bool":
        r"""set_nbytes(self, nbytes) -> bool"""
        return _ida_domain.enum_type_data_t_set_nbytes(self, nbytes)

    def is_group_mask_at(self, idx: "size_t") -> "bool":
        r"""is_group_mask_at(self, idx) -> bool"""
        return _ida_domain.enum_type_data_t_is_group_mask_at(self, idx)

    def is_valid_group_sizes(self) -> "bool":
        r"""is_valid_group_sizes(self) -> bool"""
        return _ida_domain.enum_type_data_t_is_valid_group_sizes(self)

    def find_member(self, *args) -> "ssize_t":
        r"""
        find_member(self, name, frm=0, to=size_t(-1)) -> ssize_t
        find_member(self, value, serial, frm=0, to=size_t(-1), vmask=uint64(-1)) -> ssize_t
        """
        return _ida_domain.enum_type_data_t_find_member(self, *args)

    def swap(self, r: "enum_type_data_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.enum_type_data_t_swap(self, r)

    def add_constant(self, name: "char const *", value: "uint64", cmt: "char const *"=None) -> "void":
        r"""add_constant(self, name, value, cmt=None)"""
        return _ida_domain.enum_type_data_t_add_constant(self, name, value, cmt)

    def get_value_repr(self, repr: "value_repr_t") -> "tinfo_code_t":
        r"""get_value_repr(self, repr) -> tinfo_code_t"""
        return _ida_domain.enum_type_data_t_get_value_repr(self, repr)

    def set_value_repr(self, repr: "value_repr_t") -> "tinfo_code_t":
        r"""set_value_repr(self, repr) -> tinfo_code_t"""
        return _ida_domain.enum_type_data_t_set_value_repr(self, repr)

    def get_serial(self, index: "size_t") -> "uchar":
        r"""get_serial(self, index) -> uchar"""
        return _ida_domain.enum_type_data_t_get_serial(self, index)

    def get_max_serial(self, value: "uint64") -> "uchar":
        r"""get_max_serial(self, value) -> uchar"""
        return _ida_domain.enum_type_data_t_get_max_serial(self, value)

    def get_constant_group(self, *args) -> "PyObject *":
        r"""
        get_constant_group(self, group_start_index, group_size, idx) -> bool
        get_constant_group(self, idx) -> PyObject *
        """
        return _ida_domain.enum_type_data_t_get_constant_group(self, *args)

    def all_groups(self, skip_trivial=False):
        """
        Generate tuples for bitmask enum groups.
        Each tupple is:
        [0] enum member index of group start
        [1] group size
        Tupples may include or not the group with 1 element.
        """
        if len(self.group_sizes) != 0 and self.is_valid_group_sizes():
            grp_start = 0
            for grp_size in self.group_sizes:
                if not skip_trivial or grp_size != 1:
                    yield (grp_start, grp_size)
                grp_start += grp_size
            return None


    def all_constants(self):
        """
        Generate tupples of all constants except of bitmasks.
        Each tupple is:
        [0] constant index
        [1] enum member index of group start
        [2] group size
        In case of regular enum the second element of tupple is 0 and the third element of tupple is the number of enum members.
        """
        if len(self.group_sizes) != 0:  # bitmask enum
            for (grp_start, grp_size) in self.all_groups():
                grp_end = grp_start + grp_size
                if grp_size != 1:
                    grp_start += 1
                for idx in range(grp_start, grp_end):
                    yield (idx, grp_start, grp_size)
        else: # regular enum
            sz = self.size()
            for idx in range(0, sz):
                yield (idx, 0, sz)
        return None

    __swig_destroy__ = _ida_domain.delete_enum_type_data_t

# Register enum_type_data_t in _ida_domain:
_ida_domain.enum_type_data_t_swigregister(enum_type_data_t)
class typedef_type_data_t(object):
    r"""Proxy of C++ typedef_type_data_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    til: "til_t const *" = property(_ida_domain.typedef_type_data_t_til_get, _ida_domain.typedef_type_data_t_til_set, doc=r"""til""")
    name: "char const *" = property(_ida_domain.typedef_type_data_t_name_get, _ida_domain.typedef_type_data_t_name_set, doc=r"""name""")
    ordinal: "uint32" = property(_ida_domain.typedef_type_data_t_ordinal_get, _ida_domain.typedef_type_data_t_ordinal_set, doc=r"""ordinal""")
    is_ordref: "bool" = property(_ida_domain.typedef_type_data_t_is_ordref_get, _ida_domain.typedef_type_data_t_is_ordref_set, doc=r"""is_ordref""")
    resolve: "bool" = property(_ida_domain.typedef_type_data_t_resolve_get, _ida_domain.typedef_type_data_t_resolve_set, doc=r"""resolve""")

    def __init__(self, *args):
        r"""
        __init__(self, _til, _name, _resolve=False) -> typedef_type_data_t
        __init__(self, _til, ord, _resolve=False) -> typedef_type_data_t
        """
        _ida_domain.typedef_type_data_t_swiginit(self, _ida_domain.new_typedef_type_data_t(*args))

    def swap(self, r: "typedef_type_data_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.typedef_type_data_t_swap(self, r)
    __swig_destroy__ = _ida_domain.delete_typedef_type_data_t

# Register typedef_type_data_t in _ida_domain:
_ida_domain.typedef_type_data_t_swigregister(typedef_type_data_t)
MAX_ENUM_SERIAL = cvar.MAX_ENUM_SERIAL

class custom_data_type_info_t(object):
    r"""Proxy of C++ custom_data_type_info_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dtid: "int16" = property(_ida_domain.custom_data_type_info_t_dtid_get, _ida_domain.custom_data_type_info_t_dtid_set, doc=r"""dtid""")
    fid: "int16" = property(_ida_domain.custom_data_type_info_t_fid_get, _ida_domain.custom_data_type_info_t_fid_set, doc=r"""fid""")

    def __init__(self):
        r"""__init__(self) -> custom_data_type_info_t"""
        _ida_domain.custom_data_type_info_t_swiginit(self, _ida_domain.new_custom_data_type_info_t())
    __swig_destroy__ = _ida_domain.delete_custom_data_type_info_t

# Register custom_data_type_info_t in _ida_domain:
_ida_domain.custom_data_type_info_t_swigregister(custom_data_type_info_t)
class value_repr_t(object):
    r"""Proxy of C++ value_repr_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bits: "uint64" = property(_ida_domain.value_repr_t_bits_get, _ida_domain.value_repr_t_bits_set, doc=r"""bits""")
    ri: "refinfo_t" = property(_ida_domain.value_repr_t_ri_get, _ida_domain.value_repr_t_ri_set, doc=r"""ri""")
    strtype: "int32" = property(_ida_domain.value_repr_t_strtype_get, _ida_domain.value_repr_t_strtype_set, doc=r"""strtype""")
    delta: "adiff_t" = property(_ida_domain.value_repr_t_delta_get, _ida_domain.value_repr_t_delta_set, doc=r"""delta""")
    type_ordinal: "uint32" = property(_ida_domain.value_repr_t_type_ordinal_get, _ida_domain.value_repr_t_type_ordinal_set, doc=r"""type_ordinal""")
    cd: "custom_data_type_info_t" = property(_ida_domain.value_repr_t_cd_get, _ida_domain.value_repr_t_cd_set, doc=r"""cd""")
    ap: "array_parameters_t" = property(_ida_domain.value_repr_t_ap_get, _ida_domain.value_repr_t_ap_set, doc=r"""ap""")

    def swap(self, r: "value_repr_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.value_repr_t_swap(self, r)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.value_repr_t_clear(self)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.value_repr_t_empty(self)

    def is_enum(self) -> "bool":
        r"""is_enum(self) -> bool"""
        return _ida_domain.value_repr_t_is_enum(self)

    def is_offset(self) -> "bool":
        r"""is_offset(self) -> bool"""
        return _ida_domain.value_repr_t_is_offset(self)

    def is_strlit(self) -> "bool":
        r"""is_strlit(self) -> bool"""
        return _ida_domain.value_repr_t_is_strlit(self)

    def is_custom(self) -> "bool":
        r"""is_custom(self) -> bool"""
        return _ida_domain.value_repr_t_is_custom(self)

    def is_stroff(self) -> "bool":
        r"""is_stroff(self) -> bool"""
        return _ida_domain.value_repr_t_is_stroff(self)

    def is_typref(self) -> "bool":
        r"""is_typref(self) -> bool"""
        return _ida_domain.value_repr_t_is_typref(self)

    def is_signed(self) -> "bool":
        r"""is_signed(self) -> bool"""
        return _ida_domain.value_repr_t_is_signed(self)

    def has_tabform(self) -> "bool":
        r"""has_tabform(self) -> bool"""
        return _ida_domain.value_repr_t_has_tabform(self)

    def has_lzeroes(self) -> "bool":
        r"""has_lzeroes(self) -> bool"""
        return _ida_domain.value_repr_t_has_lzeroes(self)

    def get_vtype(self) -> "uint64":
        r"""get_vtype(self) -> uint64"""
        return _ida_domain.value_repr_t_get_vtype(self)

    def set_vtype(self, vt: "uint64") -> "void":
        r"""set_vtype(self, vt)"""
        return _ida_domain.value_repr_t_set_vtype(self, vt)

    def set_signed(self, on: "bool") -> "void":
        r"""set_signed(self, on)"""
        return _ida_domain.value_repr_t_set_signed(self, on)

    def set_tabform(self, on: "bool") -> "void":
        r"""set_tabform(self, on)"""
        return _ida_domain.value_repr_t_set_tabform(self, on)

    def set_lzeroes(self, on: "bool") -> "void":
        r"""set_lzeroes(self, on)"""
        return _ida_domain.value_repr_t_set_lzeroes(self, on)

    def set_ap(self, _ap: "array_parameters_t const &") -> "void":
        r"""set_ap(self, _ap)"""
        return _ida_domain.value_repr_t_set_ap(self, _ap)

    def init_ap(self, _ap: "array_parameters_t *") -> "void":
        r"""init_ap(self, _ap)"""
        return _ida_domain.value_repr_t_init_ap(self, _ap)

    def from_opinfo(self, flags: "flags64_t", afl: "aflags_t", opinfo: "opinfo_t const *", _ap: "array_parameters_t const *") -> "bool":
        r"""from_opinfo(self, flags, afl, opinfo, _ap) -> bool"""
        return _ida_domain.value_repr_t_from_opinfo(self, flags, afl, opinfo, _ap)

    def _print(self, colored: "bool"=False) -> "size_t":
        r"""_print(self, colored=False) -> size_t"""
        return _ida_domain.value_repr_t__print(self, colored)

    def parse_value_repr(self, *args) -> "bool":
        r"""parse_value_repr(self, attr, target_type=BTF_STRUCT) -> bool"""
        return _ida_domain.value_repr_t_parse_value_repr(self, *args)

    def __str__(self) -> "qstring":
        r"""__str__(self) -> qstring"""
        return _ida_domain.value_repr_t___str__(self)

    def __init__(self):
        r"""__init__(self) -> value_repr_t"""
        _ida_domain.value_repr_t_swiginit(self, _ida_domain.new_value_repr_t())
    __swig_destroy__ = _ida_domain.delete_value_repr_t

# Register value_repr_t in _ida_domain:
_ida_domain.value_repr_t_swigregister(value_repr_t)
FRB_MASK = _ida_domain.FRB_MASK

FRB_UNK = _ida_domain.FRB_UNK

FRB_NUMB = _ida_domain.FRB_NUMB

FRB_NUMO = _ida_domain.FRB_NUMO

FRB_NUMH = _ida_domain.FRB_NUMH

FRB_NUMD = _ida_domain.FRB_NUMD

FRB_FLOAT = _ida_domain.FRB_FLOAT

FRB_CHAR = _ida_domain.FRB_CHAR

FRB_SEG = _ida_domain.FRB_SEG

FRB_ENUM = _ida_domain.FRB_ENUM

FRB_OFFSET = _ida_domain.FRB_OFFSET

FRB_STRLIT = _ida_domain.FRB_STRLIT

FRB_STROFF = _ida_domain.FRB_STROFF

FRB_CUSTOM = _ida_domain.FRB_CUSTOM

FRB_INVSIGN = _ida_domain.FRB_INVSIGN

FRB_INVBITS = _ida_domain.FRB_INVBITS

FRB_SIGNED = _ida_domain.FRB_SIGNED

FRB_LZERO = _ida_domain.FRB_LZERO

FRB_TABFORM = _ida_domain.FRB_TABFORM


class udm_t(object):
    r"""Proxy of C++ udm_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    offset: "uint64" = property(_ida_domain.udm_t_offset_get, _ida_domain.udm_t_offset_set, doc=r"""offset""")
    size: "uint64" = property(_ida_domain.udm_t_size_get, _ida_domain.udm_t_size_set, doc=r"""size""")
    name: "qstring" = property(_ida_domain.udm_t_name_get, _ida_domain.udm_t_name_set, doc=r"""name""")
    cmt: "qstring" = property(_ida_domain.udm_t_cmt_get, _ida_domain.udm_t_cmt_set, doc=r"""cmt""")
    type: "tinfo_t" = property(_ida_domain.udm_t_type_get, _ida_domain.udm_t_type_set, doc=r"""type""")
    repr: "value_repr_t" = property(_ida_domain.udm_t_repr_get, _ida_domain.udm_t_repr_set, doc=r"""repr""")
    effalign: "int" = property(_ida_domain.udm_t_effalign_get, _ida_domain.udm_t_effalign_set, doc=r"""effalign""")
    tafld_bits: "uint32" = property(_ida_domain.udm_t_tafld_bits_get, _ida_domain.udm_t_tafld_bits_set, doc=r"""tafld_bits""")
    fda: "uchar" = property(_ida_domain.udm_t_fda_get, _ida_domain.udm_t_fda_set, doc=r"""fda""")

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.udm_t_empty(self)

    def is_bitfield(self) -> "bool":
        r"""is_bitfield(self) -> bool"""
        return _ida_domain.udm_t_is_bitfield(self)

    def is_zero_bitfield(self) -> "bool":
        r"""is_zero_bitfield(self) -> bool"""
        return _ida_domain.udm_t_is_zero_bitfield(self)

    def is_unaligned(self) -> "bool":
        r"""is_unaligned(self) -> bool"""
        return _ida_domain.udm_t_is_unaligned(self)

    def is_baseclass(self) -> "bool":
        r"""is_baseclass(self) -> bool"""
        return _ida_domain.udm_t_is_baseclass(self)

    def is_virtbase(self) -> "bool":
        r"""is_virtbase(self) -> bool"""
        return _ida_domain.udm_t_is_virtbase(self)

    def is_vftable(self) -> "bool":
        r"""is_vftable(self) -> bool"""
        return _ida_domain.udm_t_is_vftable(self)

    def is_method(self) -> "bool":
        r"""is_method(self) -> bool"""
        return _ida_domain.udm_t_is_method(self)

    def is_gap(self) -> "bool":
        r"""is_gap(self) -> bool"""
        return _ida_domain.udm_t_is_gap(self)

    def is_regcmt(self) -> "bool":
        r"""is_regcmt(self) -> bool"""
        return _ida_domain.udm_t_is_regcmt(self)

    def is_retaddr(self) -> "bool":
        r"""is_retaddr(self) -> bool"""
        return _ida_domain.udm_t_is_retaddr(self)

    def is_savregs(self) -> "bool":
        r"""is_savregs(self) -> bool"""
        return _ida_domain.udm_t_is_savregs(self)

    def is_special_member(self) -> "bool":
        r"""is_special_member(self) -> bool"""
        return _ida_domain.udm_t_is_special_member(self)

    def is_by_til(self) -> "bool":
        r"""is_by_til(self) -> bool"""
        return _ida_domain.udm_t_is_by_til(self)

    def set_unaligned(self, on: "bool"=True) -> "void":
        r"""set_unaligned(self, on=True)"""
        return _ida_domain.udm_t_set_unaligned(self, on)

    def set_baseclass(self, on: "bool"=True) -> "void":
        r"""set_baseclass(self, on=True)"""
        return _ida_domain.udm_t_set_baseclass(self, on)

    def set_virtbase(self, on: "bool"=True) -> "void":
        r"""set_virtbase(self, on=True)"""
        return _ida_domain.udm_t_set_virtbase(self, on)

    def set_vftable(self, on: "bool"=True) -> "void":
        r"""set_vftable(self, on=True)"""
        return _ida_domain.udm_t_set_vftable(self, on)

    def set_method(self, on: "bool"=True) -> "void":
        r"""set_method(self, on=True)"""
        return _ida_domain.udm_t_set_method(self, on)

    def set_regcmt(self, on: "bool"=True) -> "void":
        r"""set_regcmt(self, on=True)"""
        return _ida_domain.udm_t_set_regcmt(self, on)

    def set_retaddr(self, on: "bool"=True) -> "void":
        r"""set_retaddr(self, on=True)"""
        return _ida_domain.udm_t_set_retaddr(self, on)

    def set_savregs(self, on: "bool"=True) -> "void":
        r"""set_savregs(self, on=True)"""
        return _ida_domain.udm_t_set_savregs(self, on)

    def set_by_til(self, on: "bool"=True) -> "void":
        r"""set_by_til(self, on=True)"""
        return _ida_domain.udm_t_set_by_til(self, on)

    def clr_unaligned(self) -> "void":
        r"""clr_unaligned(self)"""
        return _ida_domain.udm_t_clr_unaligned(self)

    def clr_baseclass(self) -> "void":
        r"""clr_baseclass(self)"""
        return _ida_domain.udm_t_clr_baseclass(self)

    def clr_virtbase(self) -> "void":
        r"""clr_virtbase(self)"""
        return _ida_domain.udm_t_clr_virtbase(self)

    def clr_vftable(self) -> "void":
        r"""clr_vftable(self)"""
        return _ida_domain.udm_t_clr_vftable(self)

    def clr_method(self) -> "void":
        r"""clr_method(self)"""
        return _ida_domain.udm_t_clr_method(self)

    def begin(self) -> "uint64":
        r"""begin(self) -> uint64"""
        return _ida_domain.udm_t_begin(self)

    def end(self) -> "uint64":
        r"""end(self) -> uint64"""
        return _ida_domain.udm_t_end(self)

    def __lt__(self, r: "udm_t") -> "bool":
        r"""__lt__(self, r) -> bool"""
        return _ida_domain.udm_t___lt__(self, r)

    def __eq__(self, r: "udm_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.udm_t___eq__(self, r)

    def __ne__(self, r: "udm_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.udm_t___ne__(self, r)

    def swap(self, r: "udm_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.udm_t_swap(self, r)

    def is_anonymous_udm(self) -> "bool":
        r"""is_anonymous_udm(self) -> bool"""
        return _ida_domain.udm_t_is_anonymous_udm(self)

    def set_value_repr(self, r: "value_repr_t") -> "void":
        r"""set_value_repr(self, r)"""
        return _ida_domain.udm_t_set_value_repr(self, r)

    def can_be_dtor(self) -> "bool":
        r"""can_be_dtor(self) -> bool"""
        return _ida_domain.udm_t_can_be_dtor(self)

    def can_rename(self) -> "bool":
        r"""can_rename(self) -> bool"""
        return _ida_domain.udm_t_can_rename(self)

    def __init__(self, *args):
        r"""
        __init__(self) -> udm_t
        __init__(self, _name, _type, _offset=0) -> udm_t
        __init__(self, _name, _type, _offset=0) -> udm_t
        __init__(self, _name, _type, _offset=0) -> udm_t
        __init__(self, r) -> udm_t
        """
        _ida_domain.udm_t_swiginit(self, _ida_domain.new_udm_t(*args))

        if args and self.empty():
            raise ValueError("Invalid input data: %s" % str(args))



    __swig_destroy__ = _ida_domain.delete_udm_t

# Register udm_t in _ida_domain:
_ida_domain.udm_t_swigregister(udm_t)
class udtmembervec_t(udtmembervec_template_t):
    r"""Proxy of C++ udtmembervec_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> udtmembervec_t"""
        _ida_domain.udtmembervec_t_swiginit(self, _ida_domain.new_udtmembervec_t())
    __swig_destroy__ = _ida_domain.delete_udtmembervec_t

# Register udtmembervec_t in _ida_domain:
_ida_domain.udtmembervec_t_swigregister(udtmembervec_t)
class udt_type_data_t(udtmembervec_t):
    r"""Proxy of C++ udt_type_data_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    total_size: "size_t" = property(_ida_domain.udt_type_data_t_total_size_get, _ida_domain.udt_type_data_t_total_size_set, doc=r"""total_size""")
    unpadded_size: "size_t" = property(_ida_domain.udt_type_data_t_unpadded_size_get, _ida_domain.udt_type_data_t_unpadded_size_set, doc=r"""unpadded_size""")
    effalign: "uint32" = property(_ida_domain.udt_type_data_t_effalign_get, _ida_domain.udt_type_data_t_effalign_set, doc=r"""effalign""")
    taudt_bits: "uint32" = property(_ida_domain.udt_type_data_t_taudt_bits_get, _ida_domain.udt_type_data_t_taudt_bits_set, doc=r"""taudt_bits""")
    version: "uchar" = property(_ida_domain.udt_type_data_t_version_get, _ida_domain.udt_type_data_t_version_set, doc=r"""version""")
    sda: "uchar" = property(_ida_domain.udt_type_data_t_sda_get, _ida_domain.udt_type_data_t_sda_set, doc=r"""sda""")
    pack: "uchar" = property(_ida_domain.udt_type_data_t_pack_get, _ida_domain.udt_type_data_t_pack_set, doc=r"""pack""")
    is_union: "bool" = property(_ida_domain.udt_type_data_t_is_union_get, _ida_domain.udt_type_data_t_is_union_set, doc=r"""is_union""")

    def swap(self, r: "udt_type_data_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.udt_type_data_t_swap(self, r)

    def is_unaligned(self) -> "bool":
        r"""is_unaligned(self) -> bool"""
        return _ida_domain.udt_type_data_t_is_unaligned(self)

    def is_msstruct(self) -> "bool":
        r"""is_msstruct(self) -> bool"""
        return _ida_domain.udt_type_data_t_is_msstruct(self)

    def is_cppobj(self) -> "bool":
        r"""is_cppobj(self) -> bool"""
        return _ida_domain.udt_type_data_t_is_cppobj(self)

    def is_vftable(self) -> "bool":
        r"""is_vftable(self) -> bool"""
        return _ida_domain.udt_type_data_t_is_vftable(self)

    def is_fixed(self) -> "bool":
        r"""is_fixed(self) -> bool"""
        return _ida_domain.udt_type_data_t_is_fixed(self)

    def set_vftable(self, on: "bool"=True) -> "void":
        r"""set_vftable(self, on=True)"""
        return _ida_domain.udt_type_data_t_set_vftable(self, on)

    def set_fixed(self, on: "bool"=True) -> "void":
        r"""set_fixed(self, on=True)"""
        return _ida_domain.udt_type_data_t_set_fixed(self, on)

    def is_last_baseclass(self, idx: "size_t") -> "bool":
        r"""is_last_baseclass(self, idx) -> bool"""
        return _ida_domain.udt_type_data_t_is_last_baseclass(self, idx)

    def add_member(self, _name: "char const *", _type: "tinfo_t", _offset: "uint64"=0) -> "udm_t &":
        r"""add_member(self, _name, _type, _offset=0) -> udm_t"""
        return _ida_domain.udt_type_data_t_add_member(self, _name, _type, _offset)

    def find_member(self, *args) -> "ssize_t":
        r"""
        find_member(self, pattern_udm, strmem_flags) -> ssize_t
        find_member(self, name) -> ssize_t
        find_member(self, bit_offset) -> ssize_t
        """
        return _ida_domain.udt_type_data_t_find_member(self, *args)

    def get_best_fit_member(self, disp: "asize_t") -> "ssize_t":
        r"""get_best_fit_member(self, disp) -> ssize_t"""
        return _ida_domain.udt_type_data_t_get_best_fit_member(self, disp)
    __swig_destroy__ = _ida_domain.delete_udt_type_data_t

    def __init__(self):
        r"""__init__(self) -> udt_type_data_t"""
        _ida_domain.udt_type_data_t_swiginit(self, _ida_domain.new_udt_type_data_t())

# Register udt_type_data_t in _ida_domain:
_ida_domain.udt_type_data_t_swigregister(udt_type_data_t)
STRUC_SEPARATOR = _ida_domain.STRUC_SEPARATOR

VTBL_SUFFIX = _ida_domain.VTBL_SUFFIX

VTBL_MEMNAME = _ida_domain.VTBL_MEMNAME


def stroff_as_size(plen: "int", tif: "tinfo_t", value: "asize_t") -> "bool":
    r"""stroff_as_size(plen, tif, value) -> bool"""
    return _ida_domain.stroff_as_size(plen, tif, value)
class udm_visitor_t(object):
    r"""Proxy of C++ udm_visitor_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def visit_udm(self, tid: "tid_t", tif: "tinfo_t", udt: "udt_type_data_t", idx: "ssize_t") -> "int":
        r"""visit_udm(self, tid, tif, udt, idx) -> int"""
        return _ida_domain.udm_visitor_t_visit_udm(self, tid, tif, udt, idx)
    __swig_destroy__ = _ida_domain.delete_udm_visitor_t

    def __init__(self):
        r"""__init__(self) -> udm_visitor_t"""
        if self.__class__ == udm_visitor_t:
            _self = None
        else:
            _self = self
        _ida_domain.udm_visitor_t_swiginit(self, _ida_domain.new_udm_visitor_t(_self, ))
    def __disown__(self):
        self.this.disown()
        _ida_domain.disown_udm_visitor_t(self)
        return weakref.proxy(self)

# Register udm_visitor_t in _ida_domain:
_ida_domain.udm_visitor_t_swigregister(udm_visitor_t)

def visit_stroff_udms(sfv: "udm_visitor_t", path: "tid_t const *", disp: "adiff_t *", appzero: "bool") -> "adiff_t *":
    r"""visit_stroff_udms(sfv, path, disp, appzero) -> int"""
    return _ida_domain.visit_stroff_udms(sfv, path, disp, appzero)
class bitfield_type_data_t(object):
    r"""Proxy of C++ bitfield_type_data_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nbytes: "uchar" = property(_ida_domain.bitfield_type_data_t_nbytes_get, _ida_domain.bitfield_type_data_t_nbytes_set, doc=r"""nbytes""")
    width: "uchar" = property(_ida_domain.bitfield_type_data_t_width_get, _ida_domain.bitfield_type_data_t_width_set, doc=r"""width""")
    is_unsigned: "bool" = property(_ida_domain.bitfield_type_data_t_is_unsigned_get, _ida_domain.bitfield_type_data_t_is_unsigned_set, doc=r"""is_unsigned""")

    def __init__(self, _nbytes: "uchar"=0, _width: "uchar"=0, _is_unsigned: "bool"=False):
        r"""__init__(self, _nbytes=0, _width=0, _is_unsigned=False) -> bitfield_type_data_t"""
        _ida_domain.bitfield_type_data_t_swiginit(self, _ida_domain.new_bitfield_type_data_t(_nbytes, _width, _is_unsigned))

    def __eq__(self, r: "bitfield_type_data_t") -> "bool":
        r"""__eq__(self, r) -> bool"""
        return _ida_domain.bitfield_type_data_t___eq__(self, r)

    def __ne__(self, r: "bitfield_type_data_t") -> "bool":
        r"""__ne__(self, r) -> bool"""
        return _ida_domain.bitfield_type_data_t___ne__(self, r)

    def __lt__(self, r: "bitfield_type_data_t") -> "bool":
        r"""__lt__(self, r) -> bool"""
        return _ida_domain.bitfield_type_data_t___lt__(self, r)

    def __gt__(self, r: "bitfield_type_data_t") -> "bool":
        r"""__gt__(self, r) -> bool"""
        return _ida_domain.bitfield_type_data_t___gt__(self, r)

    def __le__(self, r: "bitfield_type_data_t") -> "bool":
        r"""__le__(self, r) -> bool"""
        return _ida_domain.bitfield_type_data_t___le__(self, r)

    def __ge__(self, r: "bitfield_type_data_t") -> "bool":
        r"""__ge__(self, r) -> bool"""
        return _ida_domain.bitfield_type_data_t___ge__(self, r)

    def compare(self, r: "bitfield_type_data_t") -> "int":
        r"""compare(self, r) -> int"""
        return _ida_domain.bitfield_type_data_t_compare(self, r)

    def swap(self, r: "bitfield_type_data_t") -> "void":
        r"""swap(self, r)"""
        return _ida_domain.bitfield_type_data_t_swap(self, r)

    def is_valid_bitfield(self) -> "bool":
        r"""is_valid_bitfield(self) -> bool"""
        return _ida_domain.bitfield_type_data_t_is_valid_bitfield(self)
    __swig_destroy__ = _ida_domain.delete_bitfield_type_data_t

# Register bitfield_type_data_t in _ida_domain:
_ida_domain.bitfield_type_data_t_swigregister(bitfield_type_data_t)
TPOS_LNNUM = _ida_domain.TPOS_LNNUM

TPOS_REGCMT = _ida_domain.TPOS_REGCMT


def is_one_bit_mask(mask: "uval_t") -> "bool":
    r"""is_one_bit_mask(mask) -> bool"""
    return _ida_domain.is_one_bit_mask(mask)

def inf_pack_stkargs(cc: "cm_t") -> "bool":
    r"""inf_pack_stkargs(cc) -> bool"""
    return _ida_domain.inf_pack_stkargs(cc)

def inf_big_arg_align(cc: "cm_t") -> "bool":
    r"""inf_big_arg_align(cc) -> bool"""
    return _ida_domain.inf_big_arg_align(cc)

def inf_huge_arg_align(cc: "cm_t") -> "bool":
    r"""inf_huge_arg_align(cc) -> bool"""
    return _ida_domain.inf_huge_arg_align(cc)
class type_mods_t(object):
    r"""Proxy of C++ type_mods_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type: "tinfo_t" = property(_ida_domain.type_mods_t_type_get, _ida_domain.type_mods_t_type_set, doc=r"""type""")
    name: "qstring" = property(_ida_domain.type_mods_t_name_get, _ida_domain.type_mods_t_name_set, doc=r"""name""")
    cmt: "qstring" = property(_ida_domain.type_mods_t_cmt_get, _ida_domain.type_mods_t_cmt_set, doc=r"""cmt""")
    flags: "int" = property(_ida_domain.type_mods_t_flags_get, _ida_domain.type_mods_t_flags_set, doc=r"""flags""")

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.type_mods_t_clear(self)

    def set_new_type(self, t: "tinfo_t") -> "void":
        r"""set_new_type(self, t)"""
        return _ida_domain.type_mods_t_set_new_type(self, t)

    def set_new_name(self, n: "qstring const &") -> "void":
        r"""set_new_name(self, n)"""
        return _ida_domain.type_mods_t_set_new_name(self, n)

    def set_new_cmt(self, c: "qstring const &", rptcmt: "bool") -> "void":
        r"""set_new_cmt(self, c, rptcmt)"""
        return _ida_domain.type_mods_t_set_new_cmt(self, c, rptcmt)

    def has_type(self) -> "bool":
        r"""has_type(self) -> bool"""
        return _ida_domain.type_mods_t_has_type(self)

    def has_name(self) -> "bool":
        r"""has_name(self) -> bool"""
        return _ida_domain.type_mods_t_has_name(self)

    def has_cmt(self) -> "bool":
        r"""has_cmt(self) -> bool"""
        return _ida_domain.type_mods_t_has_cmt(self)

    def is_rptcmt(self) -> "bool":
        r"""is_rptcmt(self) -> bool"""
        return _ida_domain.type_mods_t_is_rptcmt(self)

    def has_info(self) -> "bool":
        r"""has_info(self) -> bool"""
        return _ida_domain.type_mods_t_has_info(self)

    def __init__(self):
        r"""__init__(self) -> type_mods_t"""
        _ida_domain.type_mods_t_swiginit(self, _ida_domain.new_type_mods_t())
    __swig_destroy__ = _ida_domain.delete_type_mods_t

# Register type_mods_t in _ida_domain:
_ida_domain.type_mods_t_swigregister(type_mods_t)
TVIS_TYPE = _ida_domain.TVIS_TYPE

TVIS_NAME = _ida_domain.TVIS_NAME

TVIS_CMT = _ida_domain.TVIS_CMT

TVIS_RPTCMT = _ida_domain.TVIS_RPTCMT


class tinfo_visitor_t(object):
    r"""Proxy of C++ tinfo_visitor_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    state: "int" = property(_ida_domain.tinfo_visitor_t_state_get, _ida_domain.tinfo_visitor_t_state_set, doc=r"""state""")

    def __init__(self, s: "int"=0):
        r"""__init__(self, s=0) -> tinfo_visitor_t"""
        if self.__class__ == tinfo_visitor_t:
            _self = None
        else:
            _self = self
        _ida_domain.tinfo_visitor_t_swiginit(self, _ida_domain.new_tinfo_visitor_t(_self, s))
    __swig_destroy__ = _ida_domain.delete_tinfo_visitor_t

    def visit_type(self, out: "type_mods_t", tif: "tinfo_t", name: "char const *", cmt: "char const *") -> "int":
        r"""visit_type(self, out, tif, name, cmt) -> int"""
        return _ida_domain.tinfo_visitor_t_visit_type(self, out, tif, name, cmt)

    def prune_now(self) -> "void":
        r"""prune_now(self)"""
        return _ida_domain.tinfo_visitor_t_prune_now(self)

    def apply_to(self, tif: "tinfo_t", out: "type_mods_t"=None, name: "char const *"=None, cmt: "char const *"=None) -> "int":
        r"""apply_to(self, tif, out=None, name=None, cmt=None) -> int"""
        return _ida_domain.tinfo_visitor_t_apply_to(self, tif, out, name, cmt)
    def __disown__(self):
        self.this.disown()
        _ida_domain.disown_tinfo_visitor_t(self)
        return weakref.proxy(self)

# Register tinfo_visitor_t in _ida_domain:
_ida_domain.tinfo_visitor_t_swigregister(tinfo_visitor_t)
TVST_PRUNE = _ida_domain.TVST_PRUNE

TVST_DEF = _ida_domain.TVST_DEF

TVST_LEVEL = _ida_domain.TVST_LEVEL


class regobj_t(object):
    r"""Proxy of C++ regobj_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    regidx: "int" = property(_ida_domain.regobj_t_regidx_get, _ida_domain.regobj_t_regidx_set, doc=r"""regidx""")
    relocate: "int" = property(_ida_domain.regobj_t_relocate_get, _ida_domain.regobj_t_relocate_set, doc=r"""relocate""")
    value: "bytevec_t" = property(_ida_domain.regobj_t_value_get, _ida_domain.regobj_t_value_set, doc=r"""value""")

    def size(self) -> "size_t":
        r"""size(self) -> size_t"""
        return _ida_domain.regobj_t_size(self)

    def __init__(self):
        r"""__init__(self) -> regobj_t"""
        _ida_domain.regobj_t_swiginit(self, _ida_domain.new_regobj_t())
    __swig_destroy__ = _ida_domain.delete_regobj_t

# Register regobj_t in _ida_domain:
_ida_domain.regobj_t_swigregister(regobj_t)
class regobjs_t(regobjvec_t):
    r"""Proxy of C++ regobjs_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> regobjs_t"""
        _ida_domain.regobjs_t_swiginit(self, _ida_domain.new_regobjs_t())
    __swig_destroy__ = _ida_domain.delete_regobjs_t

# Register regobjs_t in _ida_domain:
_ida_domain.regobjs_t_swigregister(regobjs_t)

def unpack_idcobj_from_idb(obj: "idc_value_t", tif: "tinfo_t", ea: "ea_t", off0: "bytevec_t const *", pio_flags: "int"=0) -> "error_t":
    r"""unpack_idcobj_from_idb(obj, tif, ea, off0, pio_flags=0) -> error_t"""
    return _ida_domain.unpack_idcobj_from_idb(obj, tif, ea, off0, pio_flags)
PIO_NOATTR_FAIL = _ida_domain.PIO_NOATTR_FAIL

PIO_IGNORE_PTRS = _ida_domain.PIO_IGNORE_PTRS


def unpack_idcobj_from_bv(obj: "idc_value_t", tif: "tinfo_t", bytes: "bytevec_t const &", pio_flags: "int"=0) -> "error_t":
    r"""unpack_idcobj_from_bv(obj, tif, bytes, pio_flags=0) -> error_t"""
    return _ida_domain.unpack_idcobj_from_bv(obj, tif, bytes, pio_flags)

def pack_idcobj_to_idb(obj: "idc_value_t", tif: "tinfo_t", ea: "ea_t", pio_flags: "int"=0) -> "error_t":
    r"""pack_idcobj_to_idb(obj, tif, ea, pio_flags=0) -> error_t"""
    return _ida_domain.pack_idcobj_to_idb(obj, tif, ea, pio_flags)

def pack_idcobj_to_bv(obj: "idc_value_t", tif: "tinfo_t", bytes: "relobj_t *", objoff: "void *", pio_flags: "int"=0) -> "error_t":
    r"""pack_idcobj_to_bv(obj, tif, bytes, objoff, pio_flags=0) -> error_t"""
    return _ida_domain.pack_idcobj_to_bv(obj, tif, bytes, objoff, pio_flags)

def apply_tinfo_to_stkarg(insn: "insn_t", x: "op_t", v: "uval_t", tif: "tinfo_t", name: "char const *") -> "bool":
    r"""apply_tinfo_to_stkarg(insn, x, v, tif, name) -> bool"""
    return _ida_domain.apply_tinfo_to_stkarg(insn, x, v, tif, name)
class argtinfo_helper_t(object):
    r"""Proxy of C++ argtinfo_helper_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    reserved: "size_t" = property(_ida_domain.argtinfo_helper_t_reserved_get, _ida_domain.argtinfo_helper_t_reserved_set, doc=r"""reserved""")
    __swig_destroy__ = _ida_domain.delete_argtinfo_helper_t

    def set_op_tinfo(self, insn: "insn_t", x: "op_t", tif: "tinfo_t", name: "char const *") -> "bool":
        r"""set_op_tinfo(self, insn, x, tif, name) -> bool"""
        return _ida_domain.argtinfo_helper_t_set_op_tinfo(self, insn, x, tif, name)

    def is_stkarg_load(self, insn: "insn_t", src: "int *", dst: "int *") -> "bool":
        r"""is_stkarg_load(self, insn, src, dst) -> bool"""
        return _ida_domain.argtinfo_helper_t_is_stkarg_load(self, insn, src, dst)

    def has_delay_slot(self, arg0: "ea_t") -> "bool":
        r"""has_delay_slot(self, arg0) -> bool"""
        return _ida_domain.argtinfo_helper_t_has_delay_slot(self, arg0)

    def use_arg_tinfos(self, caller: "ea_t", fti: "func_type_data_t", rargs: "funcargvec_t") -> "void":
        r"""use_arg_tinfos(self, caller, fti, rargs)"""
        return _ida_domain.argtinfo_helper_t_use_arg_tinfos(self, caller, fti, rargs)

    def __init__(self):
        r"""__init__(self) -> argtinfo_helper_t"""
        if self.__class__ == argtinfo_helper_t:
            _self = None
        else:
            _self = self
        _ida_domain.argtinfo_helper_t_swiginit(self, _ida_domain.new_argtinfo_helper_t(_self, ))
    def __disown__(self):
        self.this.disown()
        _ida_domain.disown_argtinfo_helper_t(self)
        return weakref.proxy(self)

# Register argtinfo_helper_t in _ida_domain:
_ida_domain.argtinfo_helper_t_swigregister(argtinfo_helper_t)

def gen_use_arg_tinfos(_this: "argtinfo_helper_t", caller: "ea_t", fti: "func_type_data_t", rargs: "funcargvec_t") -> "void":
    r"""gen_use_arg_tinfos(_this, caller, fti, rargs)"""
    return _ida_domain.gen_use_arg_tinfos(_this, caller, fti, rargs)

def func_has_stkframe_hole(ea: "ea_t", fti: "func_type_data_t") -> "bool":
    r"""func_has_stkframe_hole(ea, fti) -> bool"""
    return _ida_domain.func_has_stkframe_hole(ea, fti)
class lowertype_helper_t(object):
    r"""Proxy of C++ lowertype_helper_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ida_domain.delete_lowertype_helper_t

    def func_has_stkframe_hole(self, candidate: "tinfo_t", candidate_data: "func_type_data_t") -> "bool":
        r"""func_has_stkframe_hole(self, candidate, candidate_data) -> bool"""
        return _ida_domain.lowertype_helper_t_func_has_stkframe_hole(self, candidate, candidate_data)

    def get_func_purged_bytes(self, candidate: "tinfo_t", candidate_data: "func_type_data_t") -> "int":
        r"""get_func_purged_bytes(self, candidate, candidate_data) -> int"""
        return _ida_domain.lowertype_helper_t_get_func_purged_bytes(self, candidate, candidate_data)

# Register lowertype_helper_t in _ida_domain:
_ida_domain.lowertype_helper_t_swigregister(lowertype_helper_t)
class ida_lowertype_helper_t(lowertype_helper_t):
    r"""Proxy of C++ ida_lowertype_helper_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _tif: "tinfo_t", _ea: "ea_t", _pb: "int"):
        r"""__init__(self, _tif, _ea, _pb) -> ida_lowertype_helper_t"""
        _ida_domain.ida_lowertype_helper_t_swiginit(self, _ida_domain.new_ida_lowertype_helper_t(_tif, _ea, _pb))

    def func_has_stkframe_hole(self, candidate: "tinfo_t", candidate_data: "func_type_data_t") -> "bool":
        r"""func_has_stkframe_hole(self, candidate, candidate_data) -> bool"""
        return _ida_domain.ida_lowertype_helper_t_func_has_stkframe_hole(self, candidate, candidate_data)

    def get_func_purged_bytes(self, candidate: "tinfo_t", arg3: "func_type_data_t") -> "int":
        r"""get_func_purged_bytes(self, candidate, arg3) -> int"""
        return _ida_domain.ida_lowertype_helper_t_get_func_purged_bytes(self, candidate, arg3)
    __swig_destroy__ = _ida_domain.delete_ida_lowertype_helper_t

# Register ida_lowertype_helper_t in _ida_domain:
_ida_domain.ida_lowertype_helper_t_swigregister(ida_lowertype_helper_t)

def lower_type(til: "til_t", tif: "tinfo_t", name: "char const *"=None, _helper: "lowertype_helper_t"=None) -> "int":
    r"""lower_type(til, tif, name=None, _helper=None) -> int"""
    return _ida_domain.lower_type(til, tif, name, _helper)

def replace_ordinal_typerefs(til: "til_t", tif: "tinfo_t") -> "int":
    r"""replace_ordinal_typerefs(til, tif) -> int"""
    return _ida_domain.replace_ordinal_typerefs(til, tif)
UTP_ENUM = _ida_domain.UTP_ENUM

UTP_STRUCT = _ida_domain.UTP_STRUCT


def begin_type_updating(utp: "update_type_t") -> "void":
    r"""begin_type_updating(utp)"""
    return _ida_domain.begin_type_updating(utp)

def end_type_updating(utp: "update_type_t") -> "void":
    r"""end_type_updating(utp)"""
    return _ida_domain.end_type_updating(utp)

def get_named_type_tid(name: "char const *") -> "tid_t":
    r"""get_named_type_tid(name) -> tid_t"""
    return _ida_domain.get_named_type_tid(name)

def get_tid_name(tid: "tid_t") -> "qstring *":
    r"""get_tid_name(tid) -> bool"""
    return _ida_domain.get_tid_name(tid)

def get_tid_ordinal(tid: "tid_t") -> "uint32":
    r"""get_tid_ordinal(tid) -> uint32"""
    return _ida_domain.get_tid_ordinal(tid)

def get_udm_by_fullname(udm: "udm_t", fullname: "char const *") -> "ssize_t":
    r"""get_udm_by_fullname(udm, fullname) -> ssize_t"""
    return _ida_domain.get_udm_by_fullname(udm, fullname)

def get_idainfo_by_udm(*args) -> "bool":
    r"""get_idainfo_by_udm(flags, ti, udm, refinfo_ea=BADADDR) -> bool"""
    return _ida_domain.get_idainfo_by_udm(*args)

def create_enum_type(enum_name: "char const *", ei: "enum_type_data_t", enum_width: "int", sign: "type_sign_t", convert_to_bitmask: "bool", enum_cmt: "char const *"=None) -> "tid_t":
    r"""create_enum_type(enum_name, ei, enum_width, sign, convert_to_bitmask, enum_cmt=None) -> tid_t"""
    return _ida_domain.create_enum_type(enum_name, ei, enum_width, sign, convert_to_bitmask, enum_cmt)
class valstr_t(object):
    r"""Proxy of C++ valstr_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    oneline: "qstring" = property(_ida_domain.valstr_t_oneline_get, _ida_domain.valstr_t_oneline_set, doc=r"""oneline""")
    length: "size_t" = property(_ida_domain.valstr_t_length_get, _ida_domain.valstr_t_length_set, doc=r"""length""")
    members: "valstrs_t *" = property(_ida_domain.valstr_t_members_get, _ida_domain.valstr_t_members_set, doc=r"""members""")
    info: "valinfo_t *" = property(_ida_domain.valstr_t_info_get, _ida_domain.valstr_t_info_set, doc=r"""info""")
    props: "int" = property(_ida_domain.valstr_t_props_get, _ida_domain.valstr_t_props_set, doc=r"""props""")

    def __init__(self):
        r"""__init__(self) -> valstr_t"""
        _ida_domain.valstr_t_swiginit(self, _ida_domain.new_valstr_t())
    __swig_destroy__ = _ida_domain.delete_valstr_t

# Register valstr_t in _ida_domain:
_ida_domain.valstr_t_swigregister(valstr_t)
VALSTR_OPEN = _ida_domain.VALSTR_OPEN


class valstrs_t(valstrvec_t):
    r"""Proxy of C++ valstrs_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> valstrs_t"""
        _ida_domain.valstrs_t_swiginit(self, _ida_domain.new_valstrs_t())
    __swig_destroy__ = _ida_domain.delete_valstrs_t

# Register valstrs_t in _ida_domain:
_ida_domain.valstrs_t_swigregister(valstrs_t)
class text_sink_t(object):
    r"""Proxy of C++ text_sink_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _ida_domain.delete_text_sink_t

    def _print(self, str: "char const *") -> "int":
        r"""_print(self, str) -> int"""
        return _ida_domain.text_sink_t__print(self, str)

    def __init__(self):
        r"""__init__(self) -> text_sink_t"""
        if self.__class__ == text_sink_t:
            _self = None
        else:
            _self = self
        _ida_domain.text_sink_t_swiginit(self, _ida_domain.new_text_sink_t(_self, ))
    def __disown__(self):
        self.this.disown()
        _ida_domain.disown_text_sink_t(self)
        return weakref.proxy(self)

# Register text_sink_t in _ida_domain:
_ida_domain.text_sink_t_swigregister(text_sink_t)
PDF_INCL_DEPS = _ida_domain.PDF_INCL_DEPS

PDF_DEF_FWD = _ida_domain.PDF_DEF_FWD

PDF_DEF_BASE = _ida_domain.PDF_DEF_BASE

PDF_HEADER_CMT = _ida_domain.PDF_HEADER_CMT


def calc_number_of_children(loc: "argloc_t", tif: "tinfo_t", dont_deref_ptr: "bool"=False) -> "int":
    r"""calc_number_of_children(loc, tif, dont_deref_ptr=False) -> int"""
    return _ida_domain.calc_number_of_children(loc, tif, dont_deref_ptr)

def get_enum_member_expr(tif: "tinfo_t", serial: "int", value: "uint64") -> "qstring *":
    r"""get_enum_member_expr(tif, serial, value) -> bool"""
    return _ida_domain.get_enum_member_expr(tif, serial, value)
class til_symbol_t(object):
    r"""Proxy of C++ til_symbol_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name: "char const *" = property(_ida_domain.til_symbol_t_name_get, _ida_domain.til_symbol_t_name_set, doc=r"""name""")
    til: "til_t const *" = property(_ida_domain.til_symbol_t_til_get, _ida_domain.til_symbol_t_til_set, doc=r"""til""")

    def __init__(self, n: "char const *"=None, t: "til_t"=None):
        r"""__init__(self, n=None, t=None) -> til_symbol_t"""
        _ida_domain.til_symbol_t_swiginit(self, _ida_domain.new_til_symbol_t(n, t))
    __swig_destroy__ = _ida_domain.delete_til_symbol_t

# Register til_symbol_t in _ida_domain:
_ida_domain.til_symbol_t_swigregister(til_symbol_t)
class predicate_t(object):
    r"""Proxy of C++ predicate_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def should_display(self, til: "til_t", name: "char const *", type: "type_t const *", fields: "p_list const *") -> "bool":
        r"""should_display(self, til, name, type, fields) -> bool"""
        return _ida_domain.predicate_t_should_display(self, til, name, type, fields)
    __swig_destroy__ = _ida_domain.delete_predicate_t

    def __init__(self):
        r"""__init__(self) -> predicate_t"""
        if self.__class__ == predicate_t:
            _self = None
        else:
            _self = self
        _ida_domain.predicate_t_swiginit(self, _ida_domain.new_predicate_t(_self, ))
    def __disown__(self):
        self.this.disown()
        _ida_domain.disown_predicate_t(self)
        return weakref.proxy(self)

# Register predicate_t in _ida_domain:
_ida_domain.predicate_t_swigregister(predicate_t)

def choose_named_type(out_sym: "til_symbol_t", root_til: "til_t", title: "char const *", ntf_flags: "int", predicate: "predicate_t"=None) -> "bool":
    r"""choose_named_type(out_sym, root_til, title, ntf_flags, predicate=None) -> bool"""
    return _ida_domain.choose_named_type(out_sym, root_til, title, ntf_flags, predicate)

def choose_local_tinfo(ti: "til_t", title: "char const *", func: "local_tinfo_predicate_t *"=None, def_ord: "uint32"=0, ud: "void *"=None) -> "uint32":
    r"""choose_local_tinfo(ti, title, func=None, def_ord=0, ud=None) -> uint32"""
    return _ida_domain.choose_local_tinfo(ti, title, func, def_ord, ud)

def choose_local_tinfo_and_delta(delta: "int32 *", ti: "til_t", title: "char const *", func: "local_tinfo_predicate_t *"=None, def_ord: "uint32"=0, ud: "void *"=None) -> "uint32":
    r"""choose_local_tinfo_and_delta(delta, ti, title, func=None, def_ord=0, ud=None) -> uint32"""
    return _ida_domain.choose_local_tinfo_and_delta(delta, ti, title, func, def_ord, ud)
class til_type_ref_t(object):
    r"""Proxy of C++ til_type_ref_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cb: "size_t" = property(_ida_domain.til_type_ref_t_cb_get, _ida_domain.til_type_ref_t_cb_set, doc=r"""cb""")
    tif: "tinfo_t" = property(_ida_domain.til_type_ref_t_tif_get, _ida_domain.til_type_ref_t_tif_set, doc=r"""tif""")
    cursor: "tif_cursor_t" = property(_ida_domain.til_type_ref_t_cursor_get, _ida_domain.til_type_ref_t_cursor_set, doc=r"""cursor""")
    ordinal: "uint32" = property(_ida_domain.til_type_ref_t_ordinal_get, _ida_domain.til_type_ref_t_ordinal_set, doc=r"""ordinal""")
    is_writable: "bool" = property(_ida_domain.til_type_ref_t_is_writable_get, _ida_domain.til_type_ref_t_is_writable_set, doc=r"""is_writable""")
    is_detached: "bool" = property(_ida_domain.til_type_ref_t_is_detached_get, _ida_domain.til_type_ref_t_is_detached_set, doc=r"""is_detached""")
    is_forward: "bool" = property(_ida_domain.til_type_ref_t_is_forward_get, _ida_domain.til_type_ref_t_is_forward_set, doc=r"""is_forward""")
    kind: "type_t" = property(_ida_domain.til_type_ref_t_kind_get, _ida_domain.til_type_ref_t_kind_set, doc=r"""kind""")
    memidx: "ssize_t" = property(_ida_domain.til_type_ref_t_memidx_get, _ida_domain.til_type_ref_t_memidx_set, doc=r"""memidx""")
    nmembers: "size_t" = property(_ida_domain.til_type_ref_t_nmembers_get, _ida_domain.til_type_ref_t_nmembers_set, doc=r"""nmembers""")
    udm: "udm_t" = property(_ida_domain.til_type_ref_t_udm_get, _ida_domain.til_type_ref_t_udm_set, doc=r"""udm""")
    total_size: "size_t" = property(_ida_domain.til_type_ref_t_total_size_get, _ida_domain.til_type_ref_t_total_size_set, doc=r"""total_size""")
    unpadded_size: "size_t" = property(_ida_domain.til_type_ref_t_unpadded_size_get, _ida_domain.til_type_ref_t_unpadded_size_set, doc=r"""unpadded_size""")
    last_udm_offset: "uint64" = property(_ida_domain.til_type_ref_t_last_udm_offset_get, _ida_domain.til_type_ref_t_last_udm_offset_set, doc=r"""last_udm_offset""")
    bucket_start: "uint64" = property(_ida_domain.til_type_ref_t_bucket_start_get, _ida_domain.til_type_ref_t_bucket_start_set, doc=r"""bucket_start""")
    bf_bitoff: "int" = property(_ida_domain.til_type_ref_t_bf_bitoff_get, _ida_domain.til_type_ref_t_bf_bitoff_set, doc=r"""bf_bitoff""")
    offset: "uint64" = property(_ida_domain.til_type_ref_t_offset_get, _ida_domain.til_type_ref_t_offset_set, doc=r"""offset""")
    edm: "edm_t" = property(_ida_domain.til_type_ref_t_edm_get, _ida_domain.til_type_ref_t_edm_set, doc=r"""edm""")
    fa: "funcarg_t const *" = property(_ida_domain.til_type_ref_t_fa_get, _ida_domain.til_type_ref_t_fa_set, doc=r"""fa""")

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.til_type_ref_t_clear(self)

    def on_member(self) -> "bool":
        r"""on_member(self) -> bool"""
        return _ida_domain.til_type_ref_t_on_member(self)

    def is_typedef(self) -> "bool":
        r"""is_typedef(self) -> bool"""
        return _ida_domain.til_type_ref_t_is_typedef(self)

    def is_struct(self) -> "bool":
        r"""is_struct(self) -> bool"""
        return _ida_domain.til_type_ref_t_is_struct(self)

    def is_union(self) -> "bool":
        r"""is_union(self) -> bool"""
        return _ida_domain.til_type_ref_t_is_union(self)

    def is_enum(self) -> "bool":
        r"""is_enum(self) -> bool"""
        return _ida_domain.til_type_ref_t_is_enum(self)

    def is_func(self) -> "bool":
        r"""is_func(self) -> bool"""
        return _ida_domain.til_type_ref_t_is_func(self)

    def is_udt(self) -> "bool":
        r"""is_udt(self) -> bool"""
        return _ida_domain.til_type_ref_t_is_udt(self)

    def __init__(self):
        r"""__init__(self) -> til_type_ref_t"""
        _ida_domain.til_type_ref_t_swiginit(self, _ida_domain.new_til_type_ref_t())
    __swig_destroy__ = _ida_domain.delete_til_type_ref_t

# Register til_type_ref_t in _ida_domain:
_ida_domain.til_type_ref_t_swigregister(til_type_ref_t)

def idc_parse_decl(til: "til_t", decl: "char const *", flags: "int") -> "PyObject *":
    r"""idc_parse_decl(til, decl, flags) -> PyObject *"""
    return _ida_domain.idc_parse_decl(til, decl, flags)

def calc_type_size(til: "til_t", type: "PyObject *") -> "PyObject *":
    r"""calc_type_size(til, type) -> PyObject *"""
    return _ida_domain.calc_type_size(til, type)

def apply_type(til: "til_t", type: "type_t const *", fields: "p_list const *", ea: "ea_t", flags: "int") -> "bool":
    r"""apply_type(til, type, fields, ea, flags) -> bool"""
    return _ida_domain.apply_type(til, type, fields, ea, flags)

def get_arg_addrs(caller: "ea_t") -> "PyObject *":
    r"""get_arg_addrs(caller) -> PyObject *"""
    return _ida_domain.get_arg_addrs(caller)

def unpack_object_from_idb(til: "til_t", type: "type_t const *", fields: "p_list const *", ea: "ea_t", pio_flags: "int") -> "PyObject *":
    r"""unpack_object_from_idb(til, type, fields, ea, pio_flags) -> PyObject *"""
    return _ida_domain.unpack_object_from_idb(til, type, fields, ea, pio_flags)

def unpack_object_from_bv(til: "til_t", type: "type_t const *", fields: "p_list const *", bytes: "bytevec_t const &", pio_flags: "int") -> "PyObject *":
    r"""unpack_object_from_bv(til, type, fields, bytes, pio_flags) -> PyObject *"""
    return _ida_domain.unpack_object_from_bv(til, type, fields, bytes, pio_flags)

def pack_object_to_idb(obj: "PyObject *", til: "til_t", type: "type_t const *", fields: "p_list const *", ea: "ea_t", pio_flags: "int") -> "PyObject *":
    r"""pack_object_to_idb(obj, til, type, fields, ea, pio_flags) -> PyObject *"""
    return _ida_domain.pack_object_to_idb(obj, til, type, fields, ea, pio_flags)

def pack_object_to_bv(obj: "PyObject *", til: "til_t", type: "type_t const *", fields: "p_list const *", base_ea: "ea_t", pio_flags: "int") -> "PyObject *":
    r"""pack_object_to_bv(obj, til, type, fields, base_ea, pio_flags) -> PyObject *"""
    return _ida_domain.pack_object_to_bv(obj, til, type, fields, base_ea, pio_flags)
PT_FILE = _ida_domain.PT_FILE


def idc_parse_types(input: "char const *", flags: "int") -> "int":
    r"""idc_parse_types(input, flags) -> int"""
    return _ida_domain.idc_parse_types(input, flags)

def idc_get_type_raw(ea: "ea_t") -> "PyObject *":
    r"""idc_get_type_raw(ea) -> PyObject *"""
    return _ida_domain.idc_get_type_raw(ea)

def idc_get_local_type_raw(ordinal: "int") -> "PyObject *":
    r"""idc_get_local_type_raw(ordinal) -> PyObject *"""
    return _ida_domain.idc_get_local_type_raw(ordinal)

def idc_guess_type(ea: "ea_t") -> "size_t":
    r"""idc_guess_type(ea) -> char *"""
    return _ida_domain.idc_guess_type(ea)

def idc_get_type(ea: "ea_t") -> "size_t":
    r"""idc_get_type(ea) -> char *"""
    return _ida_domain.idc_get_type(ea)

def idc_set_local_type(ordinal: "int", dcl: "char const *", flags: "int") -> "int":
    r"""idc_set_local_type(ordinal, dcl, flags) -> int"""
    return _ida_domain.idc_set_local_type(ordinal, dcl, flags)

def idc_get_local_type(ordinal: "int", flags: "int") -> "size_t":
    r"""idc_get_local_type(ordinal, flags) -> int"""
    return _ida_domain.idc_get_local_type(ordinal, flags)

def idc_print_type(type: "type_t const *", fields: "p_list const *", name: "char const *", flags: "int") -> "PyObject *":
    r"""idc_print_type(type, fields, name, flags) -> PyObject *"""
    return _ida_domain.idc_print_type(type, fields, name, flags)

def idc_get_local_type_name(ordinal: "int") -> "size_t":
    r"""idc_get_local_type_name(ordinal) -> char"""
    return _ida_domain.idc_get_local_type_name(ordinal)

def get_named_type(til: "til_t", name: "char const *", ntf_flags: "int") -> "PyObject *":
    r"""get_named_type(til, name, ntf_flags) -> PyObject *"""
    return _ida_domain.get_named_type(til, name, ntf_flags)

def get_named_type64(til: "til_t", name: "char const *", ntf_flags: "int") -> "PyObject *":
    r"""get_named_type64(til, name, ntf_flags) -> PyObject *"""
    return _ida_domain.get_named_type64(til, name, ntf_flags)

def print_decls(printer: "text_sink_t", til: "til_t", ordinals: "PyObject *", flags: "uint32") -> "PyObject *":
    r"""print_decls(printer, til, ordinals, flags) -> PyObject *"""
    return _ida_domain.print_decls(printer, til, ordinals, flags)

def remove_tinfo_pointer(tif: "tinfo_t", name: "char const *", til: "til_t") -> "PyObject *":
    r"""remove_tinfo_pointer(tif, name, til) -> PyObject *"""
    return _ida_domain.remove_tinfo_pointer(tif, name, til)

def get_numbered_type(til: "til_t", ordinal: "uint32") -> "PyObject *":
    r"""get_numbered_type(til, ordinal) -> PyObject *"""
    return _ida_domain.get_numbered_type(til, ordinal)

def set_numbered_type(ti: "til_t", ordinal: "uint32", ntf_flags: "int", name: "char const *", type: "type_t const *", fields: "p_list const *"=None, cmt: "char const *"=None, fldcmts: "p_list const *"=None, sclass: "sclass_t const *"=None) -> "tinfo_code_t":
    r"""set_numbered_type(ti, ordinal, ntf_flags, name, type, fields=None, cmt=None, fldcmts=None, sclass=None) -> tinfo_code_t"""
    return _ida_domain.set_numbered_type(ti, ordinal, ntf_flags, name, type, fields, cmt, fldcmts, sclass)

#<pycode(py_typeinf)>

import ida_idaapi
ida_idaapi._listify_types(
    reginfovec_t)

#
# When turning off BC695, 'idati' would still remain available
#
_real_cvar = cvar
_notify_idati = ida_idaapi._make_one_time_warning_message("idati", "get_idati()")

class _wrap_cvar(object):
    def __getattr__(self, attr):
        if attr == "idati":
            _notify_idati()
            return get_idati()
        return getattr(_real_cvar, attr)

    def __setattr__(self, attr, value):
        if attr != "idati":
            setattr(_real_cvar, attr, value)

cvar = _wrap_cvar()

# for compatilibity:
sc_auto   = SC_AUTO
sc_ext    = SC_EXT
sc_friend = SC_FRIEND
sc_reg    = SC_REG
sc_stat   = SC_STAT
sc_type   = SC_TYPE
sc_unk    = SC_UNK
sc_virt   = SC_VIRT

TERR_SAVE      = TERR_SAVE_ERROR
TERR_WRONGNAME = TERR_BAD_NAME

BADORD = 0xFFFFFFFF

enum_member_vec_t = edmvec_t
enum_member_t = edm_t
udt_member_t = udm_t
tinfo_t.find_udt_member = tinfo_t.find_udm

#</pycode(py_typeinf)>

R_es = _ida_domain.R_es

R_cs = _ida_domain.R_cs

R_ss = _ida_domain.R_ss

R_ds = _ida_domain.R_ds

R_fs = _ida_domain.R_fs

R_gs = _ida_domain.R_gs

class sreg_range_t(range_t):
    r"""Proxy of C++ sreg_range_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    val: "sel_t" = property(_ida_domain.sreg_range_t_val_get, _ida_domain.sreg_range_t_val_set, doc=r"""val""")
    tag: "uchar" = property(_ida_domain.sreg_range_t_tag_get, _ida_domain.sreg_range_t_tag_set, doc=r"""tag""")

    def __init__(self):
        r"""__init__(self) -> sreg_range_t"""
        _ida_domain.sreg_range_t_swiginit(self, _ida_domain.new_sreg_range_t())
    __swig_destroy__ = _ida_domain.delete_sreg_range_t

# Register sreg_range_t in _ida_domain:
_ida_domain.sreg_range_t_swigregister(sreg_range_t)
SR_inherit = _ida_domain.SR_inherit

SR_user = _ida_domain.SR_user

SR_auto = _ida_domain.SR_auto

SR_autostart = _ida_domain.SR_autostart



def get_sreg(ea: "ea_t", rg: "int") -> "sel_t":
    r"""get_sreg(ea, rg) -> sel_t"""
    return _ida_domain.get_sreg(ea, rg)

def split_sreg_range(ea: "ea_t", rg: "int", v: "sel_t", tag: "uchar", silent: "bool"=False) -> "bool":
    r"""split_sreg_range(ea, rg, v, tag, silent=False) -> bool"""
    return _ida_domain.split_sreg_range(ea, rg, v, tag, silent)

def set_default_sreg_value(sg: "segment_t", rg: "int", value: "sel_t") -> "bool":
    r"""set_default_sreg_value(sg, rg, value) -> bool"""
    return _ida_domain.set_default_sreg_value(sg, rg, value)

def set_sreg_at_next_code(ea1: "ea_t", ea2: "ea_t", rg: "int", value: "sel_t") -> "void":
    r"""set_sreg_at_next_code(ea1, ea2, rg, value)"""
    return _ida_domain.set_sreg_at_next_code(ea1, ea2, rg, value)

def get_sreg_range(out: "sreg_range_t", ea: "ea_t", rg: "int") -> "bool":
    r"""get_sreg_range(out, ea, rg) -> bool"""
    return _ida_domain.get_sreg_range(out, ea, rg)

def get_prev_sreg_range(out: "sreg_range_t", ea: "ea_t", rg: "int") -> "bool":
    r"""get_prev_sreg_range(out, ea, rg) -> bool"""
    return _ida_domain.get_prev_sreg_range(out, ea, rg)

def set_default_dataseg(ds_sel: "sel_t") -> "void":
    r"""set_default_dataseg(ds_sel)"""
    return _ida_domain.set_default_dataseg(ds_sel)

def get_sreg_ranges_qty(rg: "int") -> "size_t":
    r"""get_sreg_ranges_qty(rg) -> size_t"""
    return _ida_domain.get_sreg_ranges_qty(rg)

def getn_sreg_range(out: "sreg_range_t", rg: "int", n: "int") -> "bool":
    r"""getn_sreg_range(out, rg, n) -> bool"""
    return _ida_domain.getn_sreg_range(out, rg, n)

def get_sreg_range_num(ea: "ea_t", rg: "int") -> "int":
    r"""get_sreg_range_num(ea, rg) -> int"""
    return _ida_domain.get_sreg_range_num(ea, rg)

def del_sreg_range(ea: "ea_t", rg: "int") -> "bool":
    r"""del_sreg_range(ea, rg) -> bool"""
    return _ida_domain.del_sreg_range(ea, rg)

def copy_sreg_ranges(dst_rg: "int", src_rg: "int", map_selector: "bool"=False) -> "void":
    r"""copy_sreg_ranges(dst_rg, src_rg, map_selector=False)"""
    return _ida_domain.copy_sreg_ranges(dst_rg, src_rg, map_selector)

def reg_read_string(name: "char const *", subkey: "char const *"=None, _def: "char const *"=None) -> "PyObject *":
    r"""reg_read_string(name, subkey=None, _def=None) -> PyObject"""
    return _ida_domain.reg_read_string(name, subkey, _def)

def reg_data_type(name: "char const *", subkey: "char const *"=None) -> "regval_type_t":
    r"""reg_data_type(name, subkey=None) -> regval_type_t"""
    return _ida_domain.reg_data_type(name, subkey)

def reg_read_binary(name: "char const *", subkey: "char const *"=None) -> "PyObject *":
    r"""reg_read_binary(name, subkey=None) -> PyObject"""
    return _ida_domain.reg_read_binary(name, subkey)

def reg_write_binary(name: "char const *", py_bytes: "PyObject *", subkey: "char const *"=None) -> "PyObject *":
    r"""reg_write_binary(name, py_bytes, subkey=None) -> PyObject"""
    return _ida_domain.reg_write_binary(name, py_bytes, subkey)

def reg_subkey_subkeys(name: "char const *") -> "PyObject *":
    r"""reg_subkey_subkeys(name) -> PyObject *"""
    return _ida_domain.reg_subkey_subkeys(name)

def reg_subkey_values(name: "char const *") -> "PyObject *":
    r"""reg_subkey_values(name) -> PyObject *"""
    return _ida_domain.reg_subkey_values(name)
IDA_REGISTRY_NAME = _ida_domain.IDA_REGISTRY_NAME

HVUI_REGISTRY_NAME = _ida_domain.HVUI_REGISTRY_NAME

ROOT_KEY_NAME = _ida_domain.ROOT_KEY_NAME

reg_unknown = _ida_domain.reg_unknown

reg_sz = _ida_domain.reg_sz

reg_binary = _ida_domain.reg_binary

reg_dword = _ida_domain.reg_dword


def reg_delete_subkey(name: "char const *") -> "bool":
    r"""reg_delete_subkey(name) -> bool"""
    return _ida_domain.reg_delete_subkey(name)

def reg_delete_tree(name: "char const *") -> "bool":
    r"""reg_delete_tree(name) -> bool"""
    return _ida_domain.reg_delete_tree(name)

def reg_delete(name: "char const *", subkey: "char const *"=None) -> "bool":
    r"""reg_delete(name, subkey=None) -> bool"""
    return _ida_domain.reg_delete(name, subkey)

def reg_subkey_exists(name: "char const *") -> "bool":
    r"""reg_subkey_exists(name) -> bool"""
    return _ida_domain.reg_subkey_exists(name)

def reg_exists(name: "char const *", subkey: "char const *"=None) -> "bool":
    r"""reg_exists(name, subkey=None) -> bool"""
    return _ida_domain.reg_exists(name, subkey)

def reg_read_strlist(subkey: "char const *") -> "qstrvec_t *":
    r"""reg_read_strlist(subkey)"""
    return _ida_domain.reg_read_strlist(subkey)

def reg_write_strlist(_in: "qstrvec_t const &", subkey: "char const *") -> "void":
    r"""reg_write_strlist(_in, subkey)"""
    return _ida_domain.reg_write_strlist(_in, subkey)

def reg_update_strlist(subkey: "char const *", add: "char const *", maxrecs: "size_t", rem: "char const *"=None, ignorecase: "bool"=False) -> "void":
    r"""reg_update_strlist(subkey, add, maxrecs, rem=None, ignorecase=False)"""
    return _ida_domain.reg_update_strlist(subkey, add, maxrecs, rem, ignorecase)

def reg_write_string(name: "char const *", utf8: "char const *", subkey: "char const *"=None) -> "void":
    r"""reg_write_string(name, utf8, subkey=None)"""
    return _ida_domain.reg_write_string(name, utf8, subkey)

def reg_read_int(name: "char const *", defval: "int", subkey: "char const *"=None) -> "int":
    r"""reg_read_int(name, defval, subkey=None) -> int"""
    return _ida_domain.reg_read_int(name, defval, subkey)

def reg_write_int(name: "char const *", value: "int", subkey: "char const *"=None) -> "void":
    r"""reg_write_int(name, value, subkey=None)"""
    return _ida_domain.reg_write_int(name, value, subkey)

def reg_read_bool(name: "char const *", defval: "bool", subkey: "char const *"=None) -> "bool":
    r"""reg_read_bool(name, defval, subkey=None) -> bool"""
    return _ida_domain.reg_read_bool(name, defval, subkey)

def reg_write_bool(name: "char const *", value: "int", subkey: "char const *"=None) -> "void":
    r"""reg_write_bool(name, value, subkey=None)"""
    return _ida_domain.reg_write_bool(name, value, subkey)

def reg_update_filestrlist(subkey: "char const *", add: "char const *", maxrecs: "size_t", rem: "char const *"=None) -> "void":
    r"""reg_update_filestrlist(subkey, add, maxrecs, rem=None)"""
    return _ida_domain.reg_update_filestrlist(subkey, add, maxrecs, rem)

def set_registry_name(name: "char const *") -> "bool":
    r"""set_registry_name(name) -> bool"""
    return _ida_domain.set_registry_name(name)
BADNODE = _ida_domain.BADNODE

SIZEOF_nodeidx_t = _ida_domain.SIZEOF_nodeidx_t

class netnode(object):
    r"""Proxy of C++ netnode class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, num=nodeidx_t(-1)) -> netnode
        __init__(self, _name, namlen=0, do_create=False) -> netnode
        """
        _ida_domain.netnode_swiginit(self, _ida_domain.new_netnode(*args))

    @staticmethod
    def exist(_name: "char const *") -> "bool":
        r"""exist(_name) -> bool"""
        return _ida_domain.netnode_exist(_name)

    def create(self, *args) -> "bool":
        r"""
        create(self, _name, namlen=0) -> bool
        create(self) -> bool
        """
        return _ida_domain.netnode_create(self, *args)

    def kill(self) -> "void":
        r"""kill(self)"""
        return _ida_domain.netnode_kill(self)

    def get_name(self) -> "ssize_t":
        r"""get_name(self) -> ssize_t"""
        return _ida_domain.netnode_get_name(self)

    def rename(self, newname: "char const *", namlen: "size_t"=0) -> "bool":
        r"""rename(self, newname, namlen=0) -> bool"""
        return _ida_domain.netnode_rename(self, newname, namlen)

    def valobj(self, *args) -> "ssize_t":
        r"""valobj(self) -> ssize_t"""
        return _ida_domain.netnode_valobj(self, *args)

    def valstr(self) -> "ssize_t":
        r"""valstr(self) -> ssize_t"""
        return _ida_domain.netnode_valstr(self)

    def set(self, value: "void const *") -> "bool":
        r"""set(self, value) -> bool"""
        return _ida_domain.netnode_set(self, value)

    def delvalue(self) -> "bool":
        r"""delvalue(self) -> bool"""
        return _ida_domain.netnode_delvalue(self)

    def set_long(self, x: "nodeidx_t") -> "bool":
        r"""set_long(self, x) -> bool"""
        return _ida_domain.netnode_set_long(self, x)

    def value_exists(self) -> "bool":
        r"""value_exists(self) -> bool"""
        return _ida_domain.netnode_value_exists(self)

    def long_value(self) -> "nodeidx_t":
        r"""long_value(self) -> nodeidx_t"""
        return _ida_domain.netnode_long_value(self)

    def altval(self, *args) -> "nodeidx_t":
        r"""altval(self, alt, tag=atag) -> nodeidx_t"""
        return _ida_domain.netnode_altval(self, *args)

    def altval_ea(self, *args) -> "nodeidx_t":
        r"""altval_ea(self, ea, tag=atag) -> nodeidx_t"""
        return _ida_domain.netnode_altval_ea(self, *args)

    def altset(self, *args) -> "bool":
        r"""altset(self, alt, value, tag=atag) -> bool"""
        return _ida_domain.netnode_altset(self, *args)

    def altset_ea(self, *args) -> "bool":
        r"""altset_ea(self, ea, value, tag=atag) -> bool"""
        return _ida_domain.netnode_altset_ea(self, *args)

    def altdel_ea(self, *args) -> "bool":
        r"""altdel_ea(self, ea, tag=atag) -> bool"""
        return _ida_domain.netnode_altdel_ea(self, *args)

    def easet(self, ea: "ea_t", addr: "ea_t", tag: "uchar") -> "bool":
        r"""easet(self, ea, addr, tag) -> bool"""
        return _ida_domain.netnode_easet(self, ea, addr, tag)

    def eaget(self, ea: "ea_t", tag: "uchar") -> "ea_t":
        r"""eaget(self, ea, tag) -> ea_t"""
        return _ida_domain.netnode_eaget(self, ea, tag)

    def eadel(self, ea: "ea_t", tag: "uchar") -> "bool":
        r"""eadel(self, ea, tag) -> bool"""
        return _ida_domain.netnode_eadel(self, ea, tag)

    def easet_idx(self, idx: "nodeidx_t", addr: "ea_t", tag: "uchar") -> "bool":
        r"""easet_idx(self, idx, addr, tag) -> bool"""
        return _ida_domain.netnode_easet_idx(self, idx, addr, tag)

    def eaget_idx(self, idx: "nodeidx_t", tag: "uchar") -> "ea_t":
        r"""eaget_idx(self, idx, tag) -> ea_t"""
        return _ida_domain.netnode_eaget_idx(self, idx, tag)

    def easet_idx8(self, idx: "uchar", addr: "ea_t", tag: "uchar") -> "bool":
        r"""easet_idx8(self, idx, addr, tag) -> bool"""
        return _ida_domain.netnode_easet_idx8(self, idx, addr, tag)

    def eaget_idx8(self, idx: "uchar", tag: "uchar") -> "ea_t":
        r"""eaget_idx8(self, idx, tag) -> ea_t"""
        return _ida_domain.netnode_eaget_idx8(self, idx, tag)

    def eadel_idx8(self, idx: "uchar", tag: "uchar") -> "bool":
        r"""eadel_idx8(self, idx, tag) -> bool"""
        return _ida_domain.netnode_eadel_idx8(self, idx, tag)

    def altfirst(self, *args) -> "nodeidx_t":
        r"""altfirst(self, tag=atag) -> nodeidx_t"""
        return _ida_domain.netnode_altfirst(self, *args)

    def altnext(self, *args) -> "nodeidx_t":
        r"""altnext(self, cur, tag=atag) -> nodeidx_t"""
        return _ida_domain.netnode_altnext(self, *args)

    def altlast(self, *args) -> "nodeidx_t":
        r"""altlast(self, tag=atag) -> nodeidx_t"""
        return _ida_domain.netnode_altlast(self, *args)

    def altprev(self, *args) -> "nodeidx_t":
        r"""altprev(self, cur, tag=atag) -> nodeidx_t"""
        return _ida_domain.netnode_altprev(self, *args)

    def altshift(self, *args) -> "size_t":
        r"""altshift(self, frm, to, size, tag=atag) -> size_t"""
        return _ida_domain.netnode_altshift(self, *args)

    def charval(self, alt: "nodeidx_t", tag: "uchar") -> "uchar":
        r"""charval(self, alt, tag) -> uchar"""
        return _ida_domain.netnode_charval(self, alt, tag)

    def charset(self, alt: "nodeidx_t", val: "uchar", tag: "uchar") -> "bool":
        r"""charset(self, alt, val, tag) -> bool"""
        return _ida_domain.netnode_charset(self, alt, val, tag)

    def chardel(self, alt: "nodeidx_t", tag: "uchar") -> "bool":
        r"""chardel(self, alt, tag) -> bool"""
        return _ida_domain.netnode_chardel(self, alt, tag)

    def charval_ea(self, ea: "ea_t", tag: "uchar") -> "uchar":
        r"""charval_ea(self, ea, tag) -> uchar"""
        return _ida_domain.netnode_charval_ea(self, ea, tag)

    def charset_ea(self, ea: "ea_t", val: "uchar", tag: "uchar") -> "bool":
        r"""charset_ea(self, ea, val, tag) -> bool"""
        return _ida_domain.netnode_charset_ea(self, ea, val, tag)

    def chardel_ea(self, ea: "ea_t", tag: "uchar") -> "bool":
        r"""chardel_ea(self, ea, tag) -> bool"""
        return _ida_domain.netnode_chardel_ea(self, ea, tag)

    def charfirst(self, tag: "uchar") -> "nodeidx_t":
        r"""charfirst(self, tag) -> nodeidx_t"""
        return _ida_domain.netnode_charfirst(self, tag)

    def charnext(self, cur: "nodeidx_t", tag: "uchar") -> "nodeidx_t":
        r"""charnext(self, cur, tag) -> nodeidx_t"""
        return _ida_domain.netnode_charnext(self, cur, tag)

    def charlast(self, tag: "uchar") -> "nodeidx_t":
        r"""charlast(self, tag) -> nodeidx_t"""
        return _ida_domain.netnode_charlast(self, tag)

    def charprev(self, cur: "nodeidx_t", tag: "uchar") -> "nodeidx_t":
        r"""charprev(self, cur, tag) -> nodeidx_t"""
        return _ida_domain.netnode_charprev(self, cur, tag)

    def charshift(self, frm: "nodeidx_t", to: "nodeidx_t", size: "nodeidx_t", tag: "uchar") -> "size_t":
        r"""charshift(self, frm, to, size, tag) -> size_t"""
        return _ida_domain.netnode_charshift(self, frm, to, size, tag)

    def altval_idx8(self, alt: "uchar", tag: "uchar") -> "nodeidx_t":
        r"""altval_idx8(self, alt, tag) -> nodeidx_t"""
        return _ida_domain.netnode_altval_idx8(self, alt, tag)

    def altset_idx8(self, alt: "uchar", val: "nodeidx_t", tag: "uchar") -> "bool":
        r"""altset_idx8(self, alt, val, tag) -> bool"""
        return _ida_domain.netnode_altset_idx8(self, alt, val, tag)

    def altdel_idx8(self, alt: "uchar", tag: "uchar") -> "bool":
        r"""altdel_idx8(self, alt, tag) -> bool"""
        return _ida_domain.netnode_altdel_idx8(self, alt, tag)

    def altfirst_idx8(self, tag: "uchar") -> "nodeidx_t":
        r"""altfirst_idx8(self, tag) -> nodeidx_t"""
        return _ida_domain.netnode_altfirst_idx8(self, tag)

    def altnext_idx8(self, cur: "uchar", tag: "uchar") -> "nodeidx_t":
        r"""altnext_idx8(self, cur, tag) -> nodeidx_t"""
        return _ida_domain.netnode_altnext_idx8(self, cur, tag)

    def altlast_idx8(self, tag: "uchar") -> "nodeidx_t":
        r"""altlast_idx8(self, tag) -> nodeidx_t"""
        return _ida_domain.netnode_altlast_idx8(self, tag)

    def altprev_idx8(self, cur: "uchar", tag: "uchar") -> "nodeidx_t":
        r"""altprev_idx8(self, cur, tag) -> nodeidx_t"""
        return _ida_domain.netnode_altprev_idx8(self, cur, tag)

    def charval_idx8(self, alt: "uchar", tag: "uchar") -> "uchar":
        r"""charval_idx8(self, alt, tag) -> uchar"""
        return _ida_domain.netnode_charval_idx8(self, alt, tag)

    def charset_idx8(self, alt: "uchar", val: "uchar", tag: "uchar") -> "bool":
        r"""charset_idx8(self, alt, val, tag) -> bool"""
        return _ida_domain.netnode_charset_idx8(self, alt, val, tag)

    def chardel_idx8(self, alt: "uchar", tag: "uchar") -> "bool":
        r"""chardel_idx8(self, alt, tag) -> bool"""
        return _ida_domain.netnode_chardel_idx8(self, alt, tag)

    def charfirst_idx8(self, tag: "uchar") -> "nodeidx_t":
        r"""charfirst_idx8(self, tag) -> nodeidx_t"""
        return _ida_domain.netnode_charfirst_idx8(self, tag)

    def charnext_idx8(self, cur: "uchar", tag: "uchar") -> "nodeidx_t":
        r"""charnext_idx8(self, cur, tag) -> nodeidx_t"""
        return _ida_domain.netnode_charnext_idx8(self, cur, tag)

    def charlast_idx8(self, tag: "uchar") -> "nodeidx_t":
        r"""charlast_idx8(self, tag) -> nodeidx_t"""
        return _ida_domain.netnode_charlast_idx8(self, tag)

    def charprev_idx8(self, cur: "uchar", tag: "uchar") -> "nodeidx_t":
        r"""charprev_idx8(self, cur, tag) -> nodeidx_t"""
        return _ida_domain.netnode_charprev_idx8(self, cur, tag)

    def altdel(self, *args) -> "bool":
        r"""
        altdel(self, alt, tag=atag) -> bool
        altdel(self) -> bool
        """
        return _ida_domain.netnode_altdel(self, *args)

    def altdel_all(self, *args) -> "bool":
        r"""altdel_all(self, tag=atag) -> bool"""
        return _ida_domain.netnode_altdel_all(self, *args)

    def supval(self, *args) -> "ssize_t":
        r"""supval(self, alt, tag=stag) -> ssize_t"""
        return _ida_domain.netnode_supval(self, *args)

    def supval_ea(self, *args) -> "ssize_t":
        r"""supval_ea(self, ea, tag=stag) -> ssize_t"""
        return _ida_domain.netnode_supval_ea(self, *args)

    def supstr(self, *args) -> "ssize_t":
        r"""supstr(self, alt, tag=stag) -> ssize_t"""
        return _ida_domain.netnode_supstr(self, *args)

    def supstr_ea(self, *args) -> "ssize_t":
        r"""supstr_ea(self, ea, tag=stag) -> ssize_t"""
        return _ida_domain.netnode_supstr_ea(self, *args)

    def supdel_ea(self, *args) -> "bool":
        r"""supdel_ea(self, ea, tag=stag) -> bool"""
        return _ida_domain.netnode_supdel_ea(self, *args)

    def lower_bound(self, *args) -> "nodeidx_t":
        r"""lower_bound(self, cur, tag=stag) -> nodeidx_t"""
        return _ida_domain.netnode_lower_bound(self, *args)

    def lower_bound_ea(self, *args) -> "nodeidx_t":
        r"""lower_bound_ea(self, ea, tag=stag) -> nodeidx_t"""
        return _ida_domain.netnode_lower_bound_ea(self, *args)

    def supfirst(self, *args) -> "nodeidx_t":
        r"""supfirst(self, tag=stag) -> nodeidx_t"""
        return _ida_domain.netnode_supfirst(self, *args)

    def supnext(self, *args) -> "nodeidx_t":
        r"""supnext(self, cur, tag=stag) -> nodeidx_t"""
        return _ida_domain.netnode_supnext(self, *args)

    def suplast(self, *args) -> "nodeidx_t":
        r"""suplast(self, tag=stag) -> nodeidx_t"""
        return _ida_domain.netnode_suplast(self, *args)

    def supprev(self, *args) -> "nodeidx_t":
        r"""supprev(self, cur, tag=stag) -> nodeidx_t"""
        return _ida_domain.netnode_supprev(self, *args)

    def supshift(self, *args) -> "size_t":
        r"""supshift(self, frm, to, size, tag=stag) -> size_t"""
        return _ida_domain.netnode_supshift(self, *args)

    def supval_idx8(self, *args) -> "ssize_t":
        r"""supval_idx8(self, alt, tag) -> ssize_t"""
        return _ida_domain.netnode_supval_idx8(self, *args)

    def supstr_idx8(self, alt: "uchar", tag: "uchar") -> "ssize_t":
        r"""supstr_idx8(self, alt, tag) -> ssize_t"""
        return _ida_domain.netnode_supstr_idx8(self, alt, tag)

    def supset_idx8(self, alt: "uchar", value: "void const *", tag: "uchar") -> "bool":
        r"""supset_idx8(self, alt, value, tag) -> bool"""
        return _ida_domain.netnode_supset_idx8(self, alt, value, tag)

    def supdel_idx8(self, alt: "uchar", tag: "uchar") -> "bool":
        r"""supdel_idx8(self, alt, tag) -> bool"""
        return _ida_domain.netnode_supdel_idx8(self, alt, tag)

    def lower_bound_idx8(self, alt: "uchar", tag: "uchar") -> "nodeidx_t":
        r"""lower_bound_idx8(self, alt, tag) -> nodeidx_t"""
        return _ida_domain.netnode_lower_bound_idx8(self, alt, tag)

    def supfirst_idx8(self, tag: "uchar") -> "nodeidx_t":
        r"""supfirst_idx8(self, tag) -> nodeidx_t"""
        return _ida_domain.netnode_supfirst_idx8(self, tag)

    def supnext_idx8(self, alt: "uchar", tag: "uchar") -> "nodeidx_t":
        r"""supnext_idx8(self, alt, tag) -> nodeidx_t"""
        return _ida_domain.netnode_supnext_idx8(self, alt, tag)

    def suplast_idx8(self, tag: "uchar") -> "nodeidx_t":
        r"""suplast_idx8(self, tag) -> nodeidx_t"""
        return _ida_domain.netnode_suplast_idx8(self, tag)

    def supprev_idx8(self, alt: "uchar", tag: "uchar") -> "nodeidx_t":
        r"""supprev_idx8(self, alt, tag) -> nodeidx_t"""
        return _ida_domain.netnode_supprev_idx8(self, alt, tag)

    def supdel(self, *args) -> "bool":
        r"""
        supdel(self, alt, tag=stag) -> bool
        supdel(self) -> bool
        """
        return _ida_domain.netnode_supdel(self, *args)

    def supdel_all(self, tag: "uchar") -> "bool":
        r"""supdel_all(self, tag) -> bool"""
        return _ida_domain.netnode_supdel_all(self, tag)

    def supdel_range(self, idx1: "nodeidx_t", idx2: "nodeidx_t", tag: "uchar") -> "int":
        r"""supdel_range(self, idx1, idx2, tag) -> int"""
        return _ida_domain.netnode_supdel_range(self, idx1, idx2, tag)

    def supdel_range_idx8(self, idx1: "uchar", idx2: "uchar", tag: "uchar") -> "int":
        r"""supdel_range_idx8(self, idx1, idx2, tag) -> int"""
        return _ida_domain.netnode_supdel_range_idx8(self, idx1, idx2, tag)

    def hashval(self, *args) -> "ssize_t":
        r"""hashval(self, idx, tag=htag) -> ssize_t"""
        return _ida_domain.netnode_hashval(self, *args)

    def hashstr(self, *args) -> "ssize_t":
        r"""hashstr(self, idx, tag=htag) -> ssize_t"""
        return _ida_domain.netnode_hashstr(self, *args)

    def hashval_long(self, *args) -> "nodeidx_t":
        r"""hashval_long(self, idx, tag=htag) -> nodeidx_t"""
        return _ida_domain.netnode_hashval_long(self, *args)

    def hashset(self, *args) -> "bool":
        r"""hashset(self, idx, value, tag=htag) -> bool"""
        return _ida_domain.netnode_hashset(self, *args)

    def hashset_idx(self, *args) -> "bool":
        r"""hashset_idx(self, idx, value, tag=htag) -> bool"""
        return _ida_domain.netnode_hashset_idx(self, *args)

    def hashdel(self, *args) -> "bool":
        r"""hashdel(self, idx, tag=htag) -> bool"""
        return _ida_domain.netnode_hashdel(self, *args)

    def hashfirst(self, *args) -> "ssize_t":
        r"""hashfirst(self, tag=htag) -> ssize_t"""
        return _ida_domain.netnode_hashfirst(self, *args)

    def hashnext(self, *args) -> "ssize_t":
        r"""hashnext(self, idx, tag=htag) -> ssize_t"""
        return _ida_domain.netnode_hashnext(self, *args)

    def hashlast(self, *args) -> "ssize_t":
        r"""hashlast(self, tag=htag) -> ssize_t"""
        return _ida_domain.netnode_hashlast(self, *args)

    def hashprev(self, *args) -> "ssize_t":
        r"""hashprev(self, idx, tag=htag) -> ssize_t"""
        return _ida_domain.netnode_hashprev(self, *args)

    def hashdel_all(self, *args) -> "bool":
        r"""hashdel_all(self, tag=htag) -> bool"""
        return _ida_domain.netnode_hashdel_all(self, *args)

    def blobsize(self, _start: "nodeidx_t", tag: "uchar") -> "size_t":
        r"""blobsize(self, _start, tag) -> size_t"""
        return _ida_domain.netnode_blobsize(self, _start, tag)

    def blobsize_ea(self, ea: "ea_t", tag: "uchar") -> "size_t":
        r"""blobsize_ea(self, ea, tag) -> size_t"""
        return _ida_domain.netnode_blobsize_ea(self, ea, tag)

    def setblob(self, buf: "void const *", _start: "nodeidx_t", tag: "uchar") -> "bool":
        r"""setblob(self, buf, _start, tag) -> bool"""
        return _ida_domain.netnode_setblob(self, buf, _start, tag)

    def setblob_ea(self, buf: "void const *", ea: "ea_t", tag: "uchar") -> "bool":
        r"""setblob_ea(self, buf, ea, tag) -> bool"""
        return _ida_domain.netnode_setblob_ea(self, buf, ea, tag)

    def delblob(self, _start: "nodeidx_t", tag: "uchar") -> "int":
        r"""delblob(self, _start, tag) -> int"""
        return _ida_domain.netnode_delblob(self, _start, tag)

    def delblob_ea(self, ea: "ea_t", tag: "uchar") -> "int":
        r"""delblob_ea(self, ea, tag) -> int"""
        return _ida_domain.netnode_delblob_ea(self, ea, tag)

    def blobshift(self, frm: "nodeidx_t", to: "nodeidx_t", size: "nodeidx_t", tag: "uchar") -> "size_t":
        r"""blobshift(self, frm, to, size, tag) -> size_t"""
        return _ida_domain.netnode_blobshift(self, frm, to, size, tag)

    def start(self) -> "bool":
        r"""start(self) -> bool"""
        return _ida_domain.netnode_start(self)

    def end(self) -> "bool":
        r"""end(self) -> bool"""
        return _ida_domain.netnode_end(self)

    def __next__(self) -> "bool":
        r"""__next__(self) -> bool"""
        return _ida_domain.netnode___next__(self)

    def prev(self) -> "bool":
        r"""prev(self) -> bool"""
        return _ida_domain.netnode_prev(self)

    def copyto(self, destnode: "netnode", count: "nodeidx_t"=1) -> "size_t":
        r"""copyto(self, destnode, count=1) -> size_t"""
        return _ida_domain.netnode_copyto(self, destnode, count)

    def moveto(self, destnode: "netnode", count: "nodeidx_t"=1) -> "size_t":
        r"""moveto(self, destnode, count=1) -> size_t"""
        return _ida_domain.netnode_moveto(self, destnode, count)

    def __eq__(self, *args) -> "bool":
        r"""
        __eq__(self, n) -> bool
        __eq__(self, x) -> bool
        """
        return _ida_domain.netnode___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        r"""
        __ne__(self, n) -> bool
        __ne__(self, x) -> bool
        """
        return _ida_domain.netnode___ne__(self, *args)

    def index(self) -> "nodeidx_t":
        r"""index(self) -> nodeidx_t"""
        return _ida_domain.netnode_index(self)

    def getblob(self, start: "nodeidx_t", tag: "char") -> "PyObject *":
        r"""getblob(self, start, tag) -> PyObject *"""
        return _ida_domain.netnode_getblob(self, start, tag)

    def getclob(self, start: "nodeidx_t", tag: "char") -> "PyObject *":
        r"""getclob(self, start, tag) -> PyObject *"""
        return _ida_domain.netnode_getclob(self, start, tag)

    def getblob_ea(self, ea: "ea_t", tag: "char") -> "PyObject *":
        r"""getblob_ea(self, ea, tag) -> PyObject *"""
        return _ida_domain.netnode_getblob_ea(self, ea, tag)

    def hashstr_buf(self, *args) -> "PyObject *":
        r"""hashstr_buf(self, idx, tag=htag) -> PyObject"""
        return _ida_domain.netnode_hashstr_buf(self, *args)

    def hashset_buf(self, *args) -> "bool":
        r"""hashset_buf(self, idx, py_str, tag=htag) -> bool"""
        return _ida_domain.netnode_hashset_buf(self, *args)

    def supset(self, *args) -> "bool":
        r"""
        supset(self, alt, value, tag=stag) -> bool
        supset(self, alt, value, tag=stag) -> bool
        """
        return _ida_domain.netnode_supset(self, *args)

    def supset_ea(self, *args) -> "bool":
        r"""
        supset_ea(self, ea, value, tag=stag) -> bool
        supset_ea(self, ea, value, tag=stag) -> bool
        """
        return _ida_domain.netnode_supset_ea(self, *args)
    __swig_destroy__ = _ida_domain.delete_netnode

# Register netnode in _ida_domain:
_ida_domain.netnode_swigregister(netnode)
MAXNAMESIZE = cvar.MAXNAMESIZE
MAX_NODENAME_SIZE = cvar.MAX_NODENAME_SIZE
MAXSPECSIZE = cvar.MAXSPECSIZE
atag = cvar.atag
stag = cvar.stag
htag = cvar.htag
vtag = cvar.vtag
ntag = cvar.ntag
ltag = cvar.ltag
NETMAP_IDX = cvar.NETMAP_IDX
NETMAP_VAL = cvar.NETMAP_VAL
NETMAP_STR = cvar.NETMAP_STR
NETMAP_X8 = cvar.NETMAP_X8
NETMAP_V8 = cvar.NETMAP_V8
NETMAP_VAL_NDX = cvar.NETMAP_VAL_NDX

def exist(n: "netnode") -> "bool":
    r"""exist(n) -> bool"""
    return _ida_domain.exist(n)


#<pycode(py_netnode_end)>
netnode_exist = netnode.exist
#</pycode(py_netnode_end)>

class InstructionsVector(object):
    r"""Proxy of C++ std::vector< insn_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(self) -> SwigPyIterator"""
        return _ida_domain.InstructionsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(self) -> bool"""
        return _ida_domain.InstructionsVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(self) -> bool"""
        return _ida_domain.InstructionsVector___bool__(self)

    def __len__(self) -> "std::vector< insn_t >::size_type":
        r"""__len__(self) -> std::vector< insn_t >::size_type"""
        return _ida_domain.InstructionsVector___len__(self)

    def __getslice__(self, i: "std::vector< insn_t >::difference_type", j: "std::vector< insn_t >::difference_type") -> "std::vector< insn_t,std::allocator< insn_t > > *":
        r"""__getslice__(self, i, j) -> InstructionsVector"""
        return _ida_domain.InstructionsVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(self, i, j)
        __setslice__(self, i, j, v)
        """
        return _ida_domain.InstructionsVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< insn_t >::difference_type", j: "std::vector< insn_t >::difference_type") -> "void":
        r"""__delslice__(self, i, j)"""
        return _ida_domain.InstructionsVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(self, i)
        __delitem__(self, slice)
        """
        return _ida_domain.InstructionsVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< insn_t >::value_type const &":
        r"""
        __getitem__(self, slice) -> InstructionsVector
        __getitem__(self, i) -> insn_t
        """
        return _ida_domain.InstructionsVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(self, slice, v)
        __setitem__(self, slice)
        __setitem__(self, i, x)
        """
        return _ida_domain.InstructionsVector___setitem__(self, *args)

    def pop(self) -> "std::vector< insn_t >::value_type":
        r"""pop(self) -> insn_t"""
        return _ida_domain.InstructionsVector_pop(self)

    def append(self, x: "insn_t") -> "void":
        r"""append(self, x)"""
        return _ida_domain.InstructionsVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.InstructionsVector_empty(self)

    def size(self) -> "std::vector< insn_t >::size_type":
        r"""size(self) -> std::vector< insn_t >::size_type"""
        return _ida_domain.InstructionsVector_size(self)

    def swap(self, v: "InstructionsVector") -> "void":
        r"""swap(self, v)"""
        return _ida_domain.InstructionsVector_swap(self, v)

    def begin(self) -> "std::vector< insn_t >::iterator":
        r"""begin(self) -> std::vector< insn_t >::iterator"""
        return _ida_domain.InstructionsVector_begin(self)

    def end(self) -> "std::vector< insn_t >::iterator":
        r"""end(self) -> std::vector< insn_t >::iterator"""
        return _ida_domain.InstructionsVector_end(self)

    def rbegin(self) -> "std::vector< insn_t >::reverse_iterator":
        r"""rbegin(self) -> std::vector< insn_t >::reverse_iterator"""
        return _ida_domain.InstructionsVector_rbegin(self)

    def rend(self) -> "std::vector< insn_t >::reverse_iterator":
        r"""rend(self) -> std::vector< insn_t >::reverse_iterator"""
        return _ida_domain.InstructionsVector_rend(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.InstructionsVector_clear(self)

    def get_allocator(self) -> "std::vector< insn_t >::allocator_type":
        r"""get_allocator(self) -> std::vector< insn_t >::allocator_type"""
        return _ida_domain.InstructionsVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.InstructionsVector_pop_back(self)

    def erase(self, *args) -> "std::vector< insn_t >::iterator":
        r"""
        erase(self, pos) -> std::vector< insn_t >::iterator
        erase(self, first, last) -> std::vector< insn_t >::iterator
        """
        return _ida_domain.InstructionsVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> InstructionsVector
        __init__(self, other) -> InstructionsVector
        __init__(self, size) -> InstructionsVector
        __init__(self, size, value) -> InstructionsVector
        """
        _ida_domain.InstructionsVector_swiginit(self, _ida_domain.new_InstructionsVector(*args))

    def push_back(self, x: "insn_t") -> "void":
        r"""push_back(self, x)"""
        return _ida_domain.InstructionsVector_push_back(self, x)

    def front(self) -> "std::vector< insn_t >::value_type const &":
        r"""front(self) -> insn_t"""
        return _ida_domain.InstructionsVector_front(self)

    def back(self) -> "std::vector< insn_t >::value_type const &":
        r"""back(self) -> insn_t"""
        return _ida_domain.InstructionsVector_back(self)

    def assign(self, n: "std::vector< insn_t >::size_type", x: "insn_t") -> "void":
        r"""assign(self, n, x)"""
        return _ida_domain.InstructionsVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _ida_domain.InstructionsVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(self, pos, x) -> std::vector< insn_t >::iterator
        insert(self, pos, n, x)
        """
        return _ida_domain.InstructionsVector_insert(self, *args)

    def reserve(self, n: "std::vector< insn_t >::size_type") -> "void":
        r"""reserve(self, n)"""
        return _ida_domain.InstructionsVector_reserve(self, n)

    def capacity(self) -> "std::vector< insn_t >::size_type":
        r"""capacity(self) -> std::vector< insn_t >::size_type"""
        return _ida_domain.InstructionsVector_capacity(self)
    __swig_destroy__ = _ida_domain.delete_InstructionsVector

# Register InstructionsVector in _ida_domain:
_ida_domain.InstructionsVector_swigregister(InstructionsVector)
class BasicBlocksVector(object):
    r"""Proxy of C++ std::vector< qbasic_block_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(self) -> SwigPyIterator"""
        return _ida_domain.BasicBlocksVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(self) -> bool"""
        return _ida_domain.BasicBlocksVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(self) -> bool"""
        return _ida_domain.BasicBlocksVector___bool__(self)

    def __len__(self) -> "std::vector< qbasic_block_t >::size_type":
        r"""__len__(self) -> std::vector< qbasic_block_t >::size_type"""
        return _ida_domain.BasicBlocksVector___len__(self)

    def __getslice__(self, i: "std::vector< qbasic_block_t >::difference_type", j: "std::vector< qbasic_block_t >::difference_type") -> "std::vector< qbasic_block_t,std::allocator< qbasic_block_t > > *":
        r"""__getslice__(self, i, j) -> BasicBlocksVector"""
        return _ida_domain.BasicBlocksVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(self, i, j)
        __setslice__(self, i, j, v)
        """
        return _ida_domain.BasicBlocksVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< qbasic_block_t >::difference_type", j: "std::vector< qbasic_block_t >::difference_type") -> "void":
        r"""__delslice__(self, i, j)"""
        return _ida_domain.BasicBlocksVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(self, i)
        __delitem__(self, slice)
        """
        return _ida_domain.BasicBlocksVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< qbasic_block_t >::value_type const &":
        r"""
        __getitem__(self, slice) -> BasicBlocksVector
        __getitem__(self, i) -> qbasic_block_t
        """
        return _ida_domain.BasicBlocksVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(self, slice, v)
        __setitem__(self, slice)
        __setitem__(self, i, x)
        """
        return _ida_domain.BasicBlocksVector___setitem__(self, *args)

    def pop(self) -> "std::vector< qbasic_block_t >::value_type":
        r"""pop(self) -> qbasic_block_t"""
        return _ida_domain.BasicBlocksVector_pop(self)

    def append(self, x: "qbasic_block_t") -> "void":
        r"""append(self, x)"""
        return _ida_domain.BasicBlocksVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.BasicBlocksVector_empty(self)

    def size(self) -> "std::vector< qbasic_block_t >::size_type":
        r"""size(self) -> std::vector< qbasic_block_t >::size_type"""
        return _ida_domain.BasicBlocksVector_size(self)

    def swap(self, v: "BasicBlocksVector") -> "void":
        r"""swap(self, v)"""
        return _ida_domain.BasicBlocksVector_swap(self, v)

    def begin(self) -> "std::vector< qbasic_block_t >::iterator":
        r"""begin(self) -> std::vector< qbasic_block_t >::iterator"""
        return _ida_domain.BasicBlocksVector_begin(self)

    def end(self) -> "std::vector< qbasic_block_t >::iterator":
        r"""end(self) -> std::vector< qbasic_block_t >::iterator"""
        return _ida_domain.BasicBlocksVector_end(self)

    def rbegin(self) -> "std::vector< qbasic_block_t >::reverse_iterator":
        r"""rbegin(self) -> std::vector< qbasic_block_t >::reverse_iterator"""
        return _ida_domain.BasicBlocksVector_rbegin(self)

    def rend(self) -> "std::vector< qbasic_block_t >::reverse_iterator":
        r"""rend(self) -> std::vector< qbasic_block_t >::reverse_iterator"""
        return _ida_domain.BasicBlocksVector_rend(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.BasicBlocksVector_clear(self)

    def get_allocator(self) -> "std::vector< qbasic_block_t >::allocator_type":
        r"""get_allocator(self) -> std::vector< qbasic_block_t >::allocator_type"""
        return _ida_domain.BasicBlocksVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.BasicBlocksVector_pop_back(self)

    def erase(self, *args) -> "std::vector< qbasic_block_t >::iterator":
        r"""
        erase(self, pos) -> std::vector< qbasic_block_t >::iterator
        erase(self, first, last) -> std::vector< qbasic_block_t >::iterator
        """
        return _ida_domain.BasicBlocksVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> BasicBlocksVector
        __init__(self, other) -> BasicBlocksVector
        __init__(self, size) -> BasicBlocksVector
        __init__(self, size, value) -> BasicBlocksVector
        """
        _ida_domain.BasicBlocksVector_swiginit(self, _ida_domain.new_BasicBlocksVector(*args))

    def push_back(self, x: "qbasic_block_t") -> "void":
        r"""push_back(self, x)"""
        return _ida_domain.BasicBlocksVector_push_back(self, x)

    def front(self) -> "std::vector< qbasic_block_t >::value_type const &":
        r"""front(self) -> qbasic_block_t"""
        return _ida_domain.BasicBlocksVector_front(self)

    def back(self) -> "std::vector< qbasic_block_t >::value_type const &":
        r"""back(self) -> qbasic_block_t"""
        return _ida_domain.BasicBlocksVector_back(self)

    def assign(self, n: "std::vector< qbasic_block_t >::size_type", x: "qbasic_block_t") -> "void":
        r"""assign(self, n, x)"""
        return _ida_domain.BasicBlocksVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _ida_domain.BasicBlocksVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(self, pos, x) -> std::vector< qbasic_block_t >::iterator
        insert(self, pos, n, x)
        """
        return _ida_domain.BasicBlocksVector_insert(self, *args)

    def reserve(self, n: "std::vector< qbasic_block_t >::size_type") -> "void":
        r"""reserve(self, n)"""
        return _ida_domain.BasicBlocksVector_reserve(self, n)

    def capacity(self) -> "std::vector< qbasic_block_t >::size_type":
        r"""capacity(self) -> std::vector< qbasic_block_t >::size_type"""
        return _ida_domain.BasicBlocksVector_capacity(self)
    __swig_destroy__ = _ida_domain.delete_BasicBlocksVector

# Register BasicBlocksVector in _ida_domain:
_ida_domain.BasicBlocksVector_swigregister(BasicBlocksVector)
class StringVector(object):
    r"""Proxy of C++ std::vector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(self) -> SwigPyIterator"""
        return _ida_domain.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(self) -> bool"""
        return _ida_domain.StringVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(self) -> bool"""
        return _ida_domain.StringVector___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        r"""__len__(self) -> std::vector< std::string >::size_type"""
        return _ida_domain.StringVector___len__(self)

    def __getslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "std::vector< std::string,std::allocator< std::string > > *":
        r"""__getslice__(self, i, j) -> StringVector"""
        return _ida_domain.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(self, i, j)
        __setslice__(self, i, j, v)
        """
        return _ida_domain.StringVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "void":
        r"""__delslice__(self, i, j)"""
        return _ida_domain.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(self, i)
        __delitem__(self, slice)
        """
        return _ida_domain.StringVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        r"""
        __getitem__(self, slice) -> StringVector
        __getitem__(self, i) -> std::vector< std::string >::value_type const &
        """
        return _ida_domain.StringVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(self, slice, v)
        __setitem__(self, slice)
        __setitem__(self, i, x)
        """
        return _ida_domain.StringVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        r"""pop(self) -> std::vector< std::string >::value_type"""
        return _ida_domain.StringVector_pop(self)

    def append(self, x: "std::vector< std::string >::value_type const &") -> "void":
        r"""append(self, x)"""
        return _ida_domain.StringVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.StringVector_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        r"""size(self) -> std::vector< std::string >::size_type"""
        return _ida_domain.StringVector_size(self)

    def swap(self, v: "StringVector") -> "void":
        r"""swap(self, v)"""
        return _ida_domain.StringVector_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        r"""begin(self) -> std::vector< std::string >::iterator"""
        return _ida_domain.StringVector_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        r"""end(self) -> std::vector< std::string >::iterator"""
        return _ida_domain.StringVector_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        r"""rbegin(self) -> std::vector< std::string >::reverse_iterator"""
        return _ida_domain.StringVector_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        r"""rend(self) -> std::vector< std::string >::reverse_iterator"""
        return _ida_domain.StringVector_rend(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.StringVector_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        r"""get_allocator(self) -> std::vector< std::string >::allocator_type"""
        return _ida_domain.StringVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.StringVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        r"""
        erase(self, pos) -> std::vector< std::string >::iterator
        erase(self, first, last) -> std::vector< std::string >::iterator
        """
        return _ida_domain.StringVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> StringVector
        __init__(self, other) -> StringVector
        __init__(self, size) -> StringVector
        __init__(self, size, value) -> StringVector
        """
        _ida_domain.StringVector_swiginit(self, _ida_domain.new_StringVector(*args))

    def push_back(self, x: "std::vector< std::string >::value_type const &") -> "void":
        r"""push_back(self, x)"""
        return _ida_domain.StringVector_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        r"""front(self) -> std::vector< std::string >::value_type const &"""
        return _ida_domain.StringVector_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        r"""back(self) -> std::vector< std::string >::value_type const &"""
        return _ida_domain.StringVector_back(self)

    def assign(self, n: "std::vector< std::string >::size_type", x: "std::vector< std::string >::value_type const &") -> "void":
        r"""assign(self, n, x)"""
        return _ida_domain.StringVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _ida_domain.StringVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(self, pos, x) -> std::vector< std::string >::iterator
        insert(self, pos, n, x)
        """
        return _ida_domain.StringVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::string >::size_type") -> "void":
        r"""reserve(self, n)"""
        return _ida_domain.StringVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        r"""capacity(self) -> std::vector< std::string >::size_type"""
        return _ida_domain.StringVector_capacity(self)
    __swig_destroy__ = _ida_domain.delete_StringVector

# Register StringVector in _ida_domain:
_ida_domain.StringVector_swigregister(StringVector)
class EAVector(object):
    r"""Proxy of C++ std::vector< ea_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(self) -> SwigPyIterator"""
        return _ida_domain.EAVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(self) -> bool"""
        return _ida_domain.EAVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(self) -> bool"""
        return _ida_domain.EAVector___bool__(self)

    def __len__(self) -> "std::vector< unsigned long long >::size_type":
        r"""__len__(self) -> std::vector< unsigned long long >::size_type"""
        return _ida_domain.EAVector___len__(self)

    def __getslice__(self, i: "std::vector< unsigned long long >::difference_type", j: "std::vector< unsigned long long >::difference_type") -> "std::vector< unsigned long long,std::allocator< unsigned long long > > *":
        r"""__getslice__(self, i, j) -> EAVector"""
        return _ida_domain.EAVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(self, i, j)
        __setslice__(self, i, j, v)
        """
        return _ida_domain.EAVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< unsigned long long >::difference_type", j: "std::vector< unsigned long long >::difference_type") -> "void":
        r"""__delslice__(self, i, j)"""
        return _ida_domain.EAVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(self, i)
        __delitem__(self, slice)
        """
        return _ida_domain.EAVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< unsigned long long >::value_type const &":
        r"""
        __getitem__(self, slice) -> EAVector
        __getitem__(self, i) -> std::vector< unsigned long long >::value_type const &
        """
        return _ida_domain.EAVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(self, slice, v)
        __setitem__(self, slice)
        __setitem__(self, i, x)
        """
        return _ida_domain.EAVector___setitem__(self, *args)

    def pop(self) -> "std::vector< unsigned long long >::value_type":
        r"""pop(self) -> std::vector< unsigned long long >::value_type"""
        return _ida_domain.EAVector_pop(self)

    def append(self, x: "std::vector< unsigned long long >::value_type const &") -> "void":
        r"""append(self, x)"""
        return _ida_domain.EAVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.EAVector_empty(self)

    def size(self) -> "std::vector< unsigned long long >::size_type":
        r"""size(self) -> std::vector< unsigned long long >::size_type"""
        return _ida_domain.EAVector_size(self)

    def swap(self, v: "EAVector") -> "void":
        r"""swap(self, v)"""
        return _ida_domain.EAVector_swap(self, v)

    def begin(self) -> "std::vector< unsigned long long >::iterator":
        r"""begin(self) -> std::vector< unsigned long long >::iterator"""
        return _ida_domain.EAVector_begin(self)

    def end(self) -> "std::vector< unsigned long long >::iterator":
        r"""end(self) -> std::vector< unsigned long long >::iterator"""
        return _ida_domain.EAVector_end(self)

    def rbegin(self) -> "std::vector< unsigned long long >::reverse_iterator":
        r"""rbegin(self) -> std::vector< unsigned long long >::reverse_iterator"""
        return _ida_domain.EAVector_rbegin(self)

    def rend(self) -> "std::vector< unsigned long long >::reverse_iterator":
        r"""rend(self) -> std::vector< unsigned long long >::reverse_iterator"""
        return _ida_domain.EAVector_rend(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.EAVector_clear(self)

    def get_allocator(self) -> "std::vector< unsigned long long >::allocator_type":
        r"""get_allocator(self) -> std::vector< unsigned long long >::allocator_type"""
        return _ida_domain.EAVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.EAVector_pop_back(self)

    def erase(self, *args) -> "std::vector< unsigned long long >::iterator":
        r"""
        erase(self, pos) -> std::vector< unsigned long long >::iterator
        erase(self, first, last) -> std::vector< unsigned long long >::iterator
        """
        return _ida_domain.EAVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> EAVector
        __init__(self, other) -> EAVector
        __init__(self, size) -> EAVector
        __init__(self, size, value) -> EAVector
        """
        _ida_domain.EAVector_swiginit(self, _ida_domain.new_EAVector(*args))

    def push_back(self, x: "std::vector< unsigned long long >::value_type const &") -> "void":
        r"""push_back(self, x)"""
        return _ida_domain.EAVector_push_back(self, x)

    def front(self) -> "std::vector< unsigned long long >::value_type const &":
        r"""front(self) -> std::vector< unsigned long long >::value_type const &"""
        return _ida_domain.EAVector_front(self)

    def back(self) -> "std::vector< unsigned long long >::value_type const &":
        r"""back(self) -> std::vector< unsigned long long >::value_type const &"""
        return _ida_domain.EAVector_back(self)

    def assign(self, n: "std::vector< unsigned long long >::size_type", x: "std::vector< unsigned long long >::value_type const &") -> "void":
        r"""assign(self, n, x)"""
        return _ida_domain.EAVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _ida_domain.EAVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(self, pos, x) -> std::vector< unsigned long long >::iterator
        insert(self, pos, n, x)
        """
        return _ida_domain.EAVector_insert(self, *args)

    def reserve(self, n: "std::vector< unsigned long long >::size_type") -> "void":
        r"""reserve(self, n)"""
        return _ida_domain.EAVector_reserve(self, n)

    def capacity(self) -> "std::vector< unsigned long long >::size_type":
        r"""capacity(self) -> std::vector< unsigned long long >::size_type"""
        return _ida_domain.EAVector_capacity(self)
    __swig_destroy__ = _ida_domain.delete_EAVector

# Register EAVector in _ida_domain:
_ida_domain.EAVector_swigregister(EAVector)
class EAStringPair(object):
    r"""Proxy of C++ std::pair< ea_t,std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> EAStringPair
        __init__(self, first, second) -> EAStringPair
        __init__(self, other) -> EAStringPair
        """
        _ida_domain.EAStringPair_swiginit(self, _ida_domain.new_EAStringPair(*args))
    first: "unsigned long long" = property(_ida_domain.EAStringPair_first_get, _ida_domain.EAStringPair_first_set, doc=r"""first""")
    second: "std::string" = property(_ida_domain.EAStringPair_second_get, _ida_domain.EAStringPair_second_set, doc=r"""second""")
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _ida_domain.delete_EAStringPair

# Register EAStringPair in _ida_domain:
_ida_domain.EAStringPair_swigregister(EAStringPair)
class EAStringPairVector(object):
    r"""Proxy of C++ std::vector< std::pair< ea_t,std::string > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(self) -> SwigPyIterator"""
        return _ida_domain.EAStringPairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(self) -> bool"""
        return _ida_domain.EAStringPairVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(self) -> bool"""
        return _ida_domain.EAStringPairVector___bool__(self)

    def __len__(self) -> "std::vector< std::pair< unsigned long long,std::string > >::size_type":
        r"""__len__(self) -> std::vector< std::pair< unsigned long long,std::string > >::size_type"""
        return _ida_domain.EAStringPairVector___len__(self)

    def __getslice__(self, i: "std::vector< std::pair< unsigned long long,std::string > >::difference_type", j: "std::vector< std::pair< unsigned long long,std::string > >::difference_type") -> "std::vector< std::pair< ea_t,std::string >,std::allocator< std::pair< ea_t,std::string > > > *":
        r"""__getslice__(self, i, j) -> EAStringPairVector"""
        return _ida_domain.EAStringPairVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(self, i, j)
        __setslice__(self, i, j, v)
        """
        return _ida_domain.EAStringPairVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::pair< unsigned long long,std::string > >::difference_type", j: "std::vector< std::pair< unsigned long long,std::string > >::difference_type") -> "void":
        r"""__delslice__(self, i, j)"""
        return _ida_domain.EAStringPairVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(self, i)
        __delitem__(self, slice)
        """
        return _ida_domain.EAStringPairVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::pair< unsigned long long,std::string > >::value_type const &":
        r"""
        __getitem__(self, slice) -> EAStringPairVector
        __getitem__(self, i) -> EAStringPair
        """
        return _ida_domain.EAStringPairVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(self, slice, v)
        __setitem__(self, slice)
        __setitem__(self, i, x)
        """
        return _ida_domain.EAStringPairVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::pair< unsigned long long,std::string > >::value_type":
        r"""pop(self) -> EAStringPair"""
        return _ida_domain.EAStringPairVector_pop(self)

    def append(self, x: "EAStringPair") -> "void":
        r"""append(self, x)"""
        return _ida_domain.EAStringPairVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.EAStringPairVector_empty(self)

    def size(self) -> "std::vector< std::pair< unsigned long long,std::string > >::size_type":
        r"""size(self) -> std::vector< std::pair< unsigned long long,std::string > >::size_type"""
        return _ida_domain.EAStringPairVector_size(self)

    def swap(self, v: "EAStringPairVector") -> "void":
        r"""swap(self, v)"""
        return _ida_domain.EAStringPairVector_swap(self, v)

    def begin(self) -> "std::vector< std::pair< unsigned long long,std::string > >::iterator":
        r"""begin(self) -> std::vector< std::pair< unsigned long long,std::string > >::iterator"""
        return _ida_domain.EAStringPairVector_begin(self)

    def end(self) -> "std::vector< std::pair< unsigned long long,std::string > >::iterator":
        r"""end(self) -> std::vector< std::pair< unsigned long long,std::string > >::iterator"""
        return _ida_domain.EAStringPairVector_end(self)

    def rbegin(self) -> "std::vector< std::pair< unsigned long long,std::string > >::reverse_iterator":
        r"""rbegin(self) -> std::vector< std::pair< unsigned long long,std::string > >::reverse_iterator"""
        return _ida_domain.EAStringPairVector_rbegin(self)

    def rend(self) -> "std::vector< std::pair< unsigned long long,std::string > >::reverse_iterator":
        r"""rend(self) -> std::vector< std::pair< unsigned long long,std::string > >::reverse_iterator"""
        return _ida_domain.EAStringPairVector_rend(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.EAStringPairVector_clear(self)

    def get_allocator(self) -> "std::vector< std::pair< unsigned long long,std::string > >::allocator_type":
        r"""get_allocator(self) -> std::vector< std::pair< unsigned long long,std::string > >::allocator_type"""
        return _ida_domain.EAStringPairVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.EAStringPairVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::pair< unsigned long long,std::string > >::iterator":
        r"""
        erase(self, pos) -> std::vector< std::pair< unsigned long long,std::string > >::iterator
        erase(self, first, last) -> std::vector< std::pair< unsigned long long,std::string > >::iterator
        """
        return _ida_domain.EAStringPairVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> EAStringPairVector
        __init__(self, other) -> EAStringPairVector
        __init__(self, size) -> EAStringPairVector
        __init__(self, size, value) -> EAStringPairVector
        """
        _ida_domain.EAStringPairVector_swiginit(self, _ida_domain.new_EAStringPairVector(*args))

    def push_back(self, x: "EAStringPair") -> "void":
        r"""push_back(self, x)"""
        return _ida_domain.EAStringPairVector_push_back(self, x)

    def front(self) -> "std::vector< std::pair< unsigned long long,std::string > >::value_type const &":
        r"""front(self) -> EAStringPair"""
        return _ida_domain.EAStringPairVector_front(self)

    def back(self) -> "std::vector< std::pair< unsigned long long,std::string > >::value_type const &":
        r"""back(self) -> EAStringPair"""
        return _ida_domain.EAStringPairVector_back(self)

    def assign(self, n: "std::vector< std::pair< unsigned long long,std::string > >::size_type", x: "EAStringPair") -> "void":
        r"""assign(self, n, x)"""
        return _ida_domain.EAStringPairVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _ida_domain.EAStringPairVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(self, pos, x) -> std::vector< std::pair< unsigned long long,std::string > >::iterator
        insert(self, pos, n, x)
        """
        return _ida_domain.EAStringPairVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::pair< unsigned long long,std::string > >::size_type") -> "void":
        r"""reserve(self, n)"""
        return _ida_domain.EAStringPairVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::pair< unsigned long long,std::string > >::size_type":
        r"""capacity(self) -> std::vector< std::pair< unsigned long long,std::string > >::size_type"""
        return _ida_domain.EAStringPairVector_capacity(self)
    __swig_destroy__ = _ida_domain.delete_EAStringPairVector

# Register EAStringPairVector in _ida_domain:
_ida_domain.EAStringPairVector_swigregister(EAStringPairVector)
class ByteVector(object):
    r"""Proxy of C++ std::vector< unsigned char > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(self) -> SwigPyIterator"""
        return _ida_domain.ByteVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(self) -> bool"""
        return _ida_domain.ByteVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(self) -> bool"""
        return _ida_domain.ByteVector___bool__(self)

    def __len__(self) -> "std::vector< unsigned char >::size_type":
        r"""__len__(self) -> std::vector< unsigned char >::size_type"""
        return _ida_domain.ByteVector___len__(self)

    def __getslice__(self, i: "std::vector< unsigned char >::difference_type", j: "std::vector< unsigned char >::difference_type") -> "std::vector< unsigned char,std::allocator< unsigned char > > *":
        r"""__getslice__(self, i, j) -> ByteVector"""
        return _ida_domain.ByteVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(self, i, j)
        __setslice__(self, i, j, v)
        """
        return _ida_domain.ByteVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< unsigned char >::difference_type", j: "std::vector< unsigned char >::difference_type") -> "void":
        r"""__delslice__(self, i, j)"""
        return _ida_domain.ByteVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(self, i)
        __delitem__(self, slice)
        """
        return _ida_domain.ByteVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< unsigned char >::value_type const &":
        r"""
        __getitem__(self, slice) -> ByteVector
        __getitem__(self, i) -> std::vector< unsigned char >::value_type const &
        """
        return _ida_domain.ByteVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(self, slice, v)
        __setitem__(self, slice)
        __setitem__(self, i, x)
        """
        return _ida_domain.ByteVector___setitem__(self, *args)

    def pop(self) -> "std::vector< unsigned char >::value_type":
        r"""pop(self) -> std::vector< unsigned char >::value_type"""
        return _ida_domain.ByteVector_pop(self)

    def append(self, x: "std::vector< unsigned char >::value_type const &") -> "void":
        r"""append(self, x)"""
        return _ida_domain.ByteVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.ByteVector_empty(self)

    def size(self) -> "std::vector< unsigned char >::size_type":
        r"""size(self) -> std::vector< unsigned char >::size_type"""
        return _ida_domain.ByteVector_size(self)

    def swap(self, v: "ByteVector") -> "void":
        r"""swap(self, v)"""
        return _ida_domain.ByteVector_swap(self, v)

    def begin(self) -> "std::vector< unsigned char >::iterator":
        r"""begin(self) -> std::vector< unsigned char >::iterator"""
        return _ida_domain.ByteVector_begin(self)

    def end(self) -> "std::vector< unsigned char >::iterator":
        r"""end(self) -> std::vector< unsigned char >::iterator"""
        return _ida_domain.ByteVector_end(self)

    def rbegin(self) -> "std::vector< unsigned char >::reverse_iterator":
        r"""rbegin(self) -> std::vector< unsigned char >::reverse_iterator"""
        return _ida_domain.ByteVector_rbegin(self)

    def rend(self) -> "std::vector< unsigned char >::reverse_iterator":
        r"""rend(self) -> std::vector< unsigned char >::reverse_iterator"""
        return _ida_domain.ByteVector_rend(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.ByteVector_clear(self)

    def get_allocator(self) -> "std::vector< unsigned char >::allocator_type":
        r"""get_allocator(self) -> std::vector< unsigned char >::allocator_type"""
        return _ida_domain.ByteVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(self)"""
        return _ida_domain.ByteVector_pop_back(self)

    def erase(self, *args) -> "std::vector< unsigned char >::iterator":
        r"""
        erase(self, pos) -> std::vector< unsigned char >::iterator
        erase(self, first, last) -> std::vector< unsigned char >::iterator
        """
        return _ida_domain.ByteVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> ByteVector
        __init__(self, other) -> ByteVector
        __init__(self, size) -> ByteVector
        __init__(self, size, value) -> ByteVector
        """
        _ida_domain.ByteVector_swiginit(self, _ida_domain.new_ByteVector(*args))

    def push_back(self, x: "std::vector< unsigned char >::value_type const &") -> "void":
        r"""push_back(self, x)"""
        return _ida_domain.ByteVector_push_back(self, x)

    def front(self) -> "std::vector< unsigned char >::value_type const &":
        r"""front(self) -> std::vector< unsigned char >::value_type const &"""
        return _ida_domain.ByteVector_front(self)

    def back(self) -> "std::vector< unsigned char >::value_type const &":
        r"""back(self) -> std::vector< unsigned char >::value_type const &"""
        return _ida_domain.ByteVector_back(self)

    def assign(self, n: "std::vector< unsigned char >::size_type", x: "std::vector< unsigned char >::value_type const &") -> "void":
        r"""assign(self, n, x)"""
        return _ida_domain.ByteVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _ida_domain.ByteVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(self, pos, x) -> std::vector< unsigned char >::iterator
        insert(self, pos, n, x)
        """
        return _ida_domain.ByteVector_insert(self, *args)

    def reserve(self, n: "std::vector< unsigned char >::size_type") -> "void":
        r"""reserve(self, n)"""
        return _ida_domain.ByteVector_reserve(self, n)

    def capacity(self) -> "std::vector< unsigned char >::size_type":
        r"""capacity(self) -> std::vector< unsigned char >::size_type"""
        return _ida_domain.ByteVector_capacity(self)
    __swig_destroy__ = _ida_domain.delete_ByteVector

# Register ByteVector in _ida_domain:
_ida_domain.ByteVector_swigregister(ByteVector)
class BoolXrefBlkPair(object):
    r"""Proxy of C++ std::pair< bool,xrefblk_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> BoolXrefBlkPair
        __init__(self, first, second) -> BoolXrefBlkPair
        __init__(self, other) -> BoolXrefBlkPair
        """
        _ida_domain.BoolXrefBlkPair_swiginit(self, _ida_domain.new_BoolXrefBlkPair(*args))
    first: "bool" = property(_ida_domain.BoolXrefBlkPair_first_get, _ida_domain.BoolXrefBlkPair_first_set, doc=r"""first""")
    second: "xrefblk_t" = property(_ida_domain.BoolXrefBlkPair_second_get, _ida_domain.BoolXrefBlkPair_second_set, doc=r"""second""")
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _ida_domain.delete_BoolXrefBlkPair

# Register BoolXrefBlkPair in _ida_domain:
_ida_domain.BoolXrefBlkPair_swigregister(BoolXrefBlkPair)
class BoolInsntPair(object):
    r"""Proxy of C++ std::pair< bool,insn_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> BoolInsntPair
        __init__(self, first, second) -> BoolInsntPair
        __init__(self, other) -> BoolInsntPair
        """
        _ida_domain.BoolInsntPair_swiginit(self, _ida_domain.new_BoolInsntPair(*args))
    first: "bool" = property(_ida_domain.BoolInsntPair_first_get, _ida_domain.BoolInsntPair_first_set, doc=r"""first""")
    second: "insn_t" = property(_ida_domain.BoolInsntPair_second_get, _ida_domain.BoolInsntPair_second_set, doc=r"""second""")
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _ida_domain.delete_BoolInsntPair

# Register BoolInsntPair in _ida_domain:
_ida_domain.BoolInsntPair_swigregister(BoolInsntPair)
class BoolTinfoPair(object):
    r"""Proxy of C++ std::pair< bool,tinfo_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> BoolTinfoPair
        __init__(self, first, second) -> BoolTinfoPair
        __init__(self, other) -> BoolTinfoPair
        """
        _ida_domain.BoolTinfoPair_swiginit(self, _ida_domain.new_BoolTinfoPair(*args))
    first: "bool" = property(_ida_domain.BoolTinfoPair_first_get, _ida_domain.BoolTinfoPair_first_set, doc=r"""first""")
    second: "tinfo_t" = property(_ida_domain.BoolTinfoPair_second_get, _ida_domain.BoolTinfoPair_second_set, doc=r"""second""")
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _ida_domain.delete_BoolTinfoPair

# Register BoolTinfoPair in _ida_domain:
_ida_domain.BoolTinfoPair_swigregister(BoolTinfoPair)
class BoolStringPair(object):
    r"""Proxy of C++ std::pair< bool,std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> BoolStringPair
        __init__(self, first, second) -> BoolStringPair
        __init__(self, other) -> BoolStringPair
        """
        _ida_domain.BoolStringPair_swiginit(self, _ida_domain.new_BoolStringPair(*args))
    first: "bool" = property(_ida_domain.BoolStringPair_first_get, _ida_domain.BoolStringPair_first_set, doc=r"""first""")
    second: "std::string" = property(_ida_domain.BoolStringPair_second_get, _ida_domain.BoolStringPair_second_set, doc=r"""second""")
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _ida_domain.delete_BoolStringPair

# Register BoolStringPair in _ida_domain:
_ida_domain.BoolStringPair_swigregister(BoolStringPair)
class BoolUint8Pair(object):
    r"""Proxy of C++ std::pair< bool,uint8 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> BoolUint8Pair
        __init__(self, first, second) -> BoolUint8Pair
        __init__(self, other) -> BoolUint8Pair
        """
        _ida_domain.BoolUint8Pair_swiginit(self, _ida_domain.new_BoolUint8Pair(*args))
    first: "bool" = property(_ida_domain.BoolUint8Pair_first_get, _ida_domain.BoolUint8Pair_first_set, doc=r"""first""")
    second: "unsigned char" = property(_ida_domain.BoolUint8Pair_second_get, _ida_domain.BoolUint8Pair_second_set, doc=r"""second""")
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _ida_domain.delete_BoolUint8Pair

# Register BoolUint8Pair in _ida_domain:
_ida_domain.BoolUint8Pair_swigregister(BoolUint8Pair)
class BoolUint16Pair(object):
    r"""Proxy of C++ std::pair< bool,uint16 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> BoolUint16Pair
        __init__(self, first, second) -> BoolUint16Pair
        __init__(self, other) -> BoolUint16Pair
        """
        _ida_domain.BoolUint16Pair_swiginit(self, _ida_domain.new_BoolUint16Pair(*args))
    first: "bool" = property(_ida_domain.BoolUint16Pair_first_get, _ida_domain.BoolUint16Pair_first_set, doc=r"""first""")
    second: "unsigned short" = property(_ida_domain.BoolUint16Pair_second_get, _ida_domain.BoolUint16Pair_second_set, doc=r"""second""")
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _ida_domain.delete_BoolUint16Pair

# Register BoolUint16Pair in _ida_domain:
_ida_domain.BoolUint16Pair_swigregister(BoolUint16Pair)
class BoolUint32Pair(object):
    r"""Proxy of C++ std::pair< bool,uint32 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> BoolUint32Pair
        __init__(self, first, second) -> BoolUint32Pair
        __init__(self, other) -> BoolUint32Pair
        """
        _ida_domain.BoolUint32Pair_swiginit(self, _ida_domain.new_BoolUint32Pair(*args))
    first: "bool" = property(_ida_domain.BoolUint32Pair_first_get, _ida_domain.BoolUint32Pair_first_set, doc=r"""first""")
    second: "unsigned int" = property(_ida_domain.BoolUint32Pair_second_get, _ida_domain.BoolUint32Pair_second_set, doc=r"""second""")
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _ida_domain.delete_BoolUint32Pair

# Register BoolUint32Pair in _ida_domain:
_ida_domain.BoolUint32Pair_swigregister(BoolUint32Pair)
class BoolUint64Pair(object):
    r"""Proxy of C++ std::pair< bool,uint64 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> BoolUint64Pair
        __init__(self, first, second) -> BoolUint64Pair
        __init__(self, other) -> BoolUint64Pair
        """
        _ida_domain.BoolUint64Pair_swiginit(self, _ida_domain.new_BoolUint64Pair(*args))
    first: "bool" = property(_ida_domain.BoolUint64Pair_first_get, _ida_domain.BoolUint64Pair_first_set, doc=r"""first""")
    second: "unsigned long long" = property(_ida_domain.BoolUint64Pair_second_get, _ida_domain.BoolUint64Pair_second_set, doc=r"""second""")
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _ida_domain.delete_BoolUint64Pair

# Register BoolUint64Pair in _ida_domain:
_ida_domain.BoolUint64Pair_swigregister(BoolUint64Pair)
class BoolFloatPair(object):
    r"""Proxy of C++ std::pair< bool,float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> BoolFloatPair
        __init__(self, first, second) -> BoolFloatPair
        __init__(self, other) -> BoolFloatPair
        """
        _ida_domain.BoolFloatPair_swiginit(self, _ida_domain.new_BoolFloatPair(*args))
    first: "bool" = property(_ida_domain.BoolFloatPair_first_get, _ida_domain.BoolFloatPair_first_set, doc=r"""first""")
    second: "float" = property(_ida_domain.BoolFloatPair_second_get, _ida_domain.BoolFloatPair_second_set, doc=r"""second""")
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _ida_domain.delete_BoolFloatPair

# Register BoolFloatPair in _ida_domain:
_ida_domain.BoolFloatPair_swigregister(BoolFloatPair)
class BoolDoublePair(object):
    r"""Proxy of C++ std::pair< bool,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> BoolDoublePair
        __init__(self, first, second) -> BoolDoublePair
        __init__(self, other) -> BoolDoublePair
        """
        _ida_domain.BoolDoublePair_swiginit(self, _ida_domain.new_BoolDoublePair(*args))
    first: "bool" = property(_ida_domain.BoolDoublePair_first_get, _ida_domain.BoolDoublePair_first_set, doc=r"""first""")
    second: "double" = property(_ida_domain.BoolDoublePair_second_get, _ida_domain.BoolDoublePair_second_set, doc=r"""second""")
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _ida_domain.delete_BoolDoublePair

# Register BoolDoublePair in _ida_domain:
_ida_domain.BoolDoublePair_swigregister(BoolDoublePair)
class StringToStringMap(object):
    r"""Proxy of C++ std::map< std::string,std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(self) -> SwigPyIterator"""
        return _ida_domain.StringToStringMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(self) -> bool"""
        return _ida_domain.StringToStringMap___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(self) -> bool"""
        return _ida_domain.StringToStringMap___bool__(self)

    def __len__(self) -> "std::map< std::string,std::string >::size_type":
        r"""__len__(self) -> std::map< std::string,std::string >::size_type"""
        return _ida_domain.StringToStringMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::map< std::string,std::string >::key_type const &") -> "std::map< std::string,std::string >::mapped_type const &":
        r"""__getitem__(self, key) -> std::map< std::string,std::string >::mapped_type const &"""
        return _ida_domain.StringToStringMap___getitem__(self, key)

    def __delitem__(self, key: "std::map< std::string,std::string >::key_type const &") -> "void":
        r"""__delitem__(self, key)"""
        return _ida_domain.StringToStringMap___delitem__(self, key)

    def has_key(self, key: "std::map< std::string,std::string >::key_type const &") -> "bool":
        r"""has_key(self, key) -> bool"""
        return _ida_domain.StringToStringMap_has_key(self, key)

    def keys(self) -> "PyObject *":
        r"""keys(self) -> PyObject *"""
        return _ida_domain.StringToStringMap_keys(self)

    def values(self) -> "PyObject *":
        r"""values(self) -> PyObject *"""
        return _ida_domain.StringToStringMap_values(self)

    def items(self) -> "PyObject *":
        r"""items(self) -> PyObject *"""
        return _ida_domain.StringToStringMap_items(self)

    def __contains__(self, key: "std::map< std::string,std::string >::key_type const &") -> "bool":
        r"""__contains__(self, key) -> bool"""
        return _ida_domain.StringToStringMap___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        r"""key_iterator(self) -> SwigPyIterator"""
        return _ida_domain.StringToStringMap_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        r"""value_iterator(self) -> SwigPyIterator"""
        return _ida_domain.StringToStringMap_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(self, key)
        __setitem__(self, key, x)
        """
        return _ida_domain.StringToStringMap___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        r"""asdict(self) -> PyObject *"""
        return _ida_domain.StringToStringMap_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(self, other) -> StringToStringMap
        __init__(self) -> StringToStringMap
        __init__(self, other) -> StringToStringMap
        """
        _ida_domain.StringToStringMap_swiginit(self, _ida_domain.new_StringToStringMap(*args))

    def empty(self) -> "bool":
        r"""empty(self) -> bool"""
        return _ida_domain.StringToStringMap_empty(self)

    def size(self) -> "std::map< std::string,std::string >::size_type":
        r"""size(self) -> std::map< std::string,std::string >::size_type"""
        return _ida_domain.StringToStringMap_size(self)

    def swap(self, v: "StringToStringMap") -> "void":
        r"""swap(self, v)"""
        return _ida_domain.StringToStringMap_swap(self, v)

    def begin(self) -> "std::map< std::string,std::string >::iterator":
        r"""begin(self) -> std::map< std::string,std::string >::iterator"""
        return _ida_domain.StringToStringMap_begin(self)

    def end(self) -> "std::map< std::string,std::string >::iterator":
        r"""end(self) -> std::map< std::string,std::string >::iterator"""
        return _ida_domain.StringToStringMap_end(self)

    def rbegin(self) -> "std::map< std::string,std::string >::reverse_iterator":
        r"""rbegin(self) -> std::map< std::string,std::string >::reverse_iterator"""
        return _ida_domain.StringToStringMap_rbegin(self)

    def rend(self) -> "std::map< std::string,std::string >::reverse_iterator":
        r"""rend(self) -> std::map< std::string,std::string >::reverse_iterator"""
        return _ida_domain.StringToStringMap_rend(self)

    def clear(self) -> "void":
        r"""clear(self)"""
        return _ida_domain.StringToStringMap_clear(self)

    def get_allocator(self) -> "std::map< std::string,std::string >::allocator_type":
        r"""get_allocator(self) -> std::map< std::string,std::string >::allocator_type"""
        return _ida_domain.StringToStringMap_get_allocator(self)

    def count(self, x: "std::map< std::string,std::string >::key_type const &") -> "std::map< std::string,std::string >::size_type":
        r"""count(self, x) -> std::map< std::string,std::string >::size_type"""
        return _ida_domain.StringToStringMap_count(self, x)

    def erase(self, *args) -> "void":
        r"""
        erase(self, x) -> std::map< std::string,std::string >::size_type
        erase(self, position)
        erase(self, first, last)
        """
        return _ida_domain.StringToStringMap_erase(self, *args)

    def find(self, x: "std::map< std::string,std::string >::key_type const &") -> "std::map< std::string,std::string >::iterator":
        r"""find(self, x) -> std::map< std::string,std::string >::iterator"""
        return _ida_domain.StringToStringMap_find(self, x)

    def lower_bound(self, x: "std::map< std::string,std::string >::key_type const &") -> "std::map< std::string,std::string >::iterator":
        r"""lower_bound(self, x) -> std::map< std::string,std::string >::iterator"""
        return _ida_domain.StringToStringMap_lower_bound(self, x)

    def upper_bound(self, x: "std::map< std::string,std::string >::key_type const &") -> "std::map< std::string,std::string >::iterator":
        r"""upper_bound(self, x) -> std::map< std::string,std::string >::iterator"""
        return _ida_domain.StringToStringMap_upper_bound(self, x)
    __swig_destroy__ = _ida_domain.delete_StringToStringMap

# Register StringToStringMap in _ida_domain:
_ida_domain.StringToStringMap_swigregister(StringToStringMap)

from typing import Iterator, Tuple


_VersionInfo = VersionInfo

class VersionInfo(_VersionInfo.__class__):
  def __str__(cls):
    return f"Version {_VersionInfo.api_version_full} based on IDA SDK version {_VersionInfo.sdk_version}"
  def __repr__(cls):
    return cls.__str__()

VersionInfo = VersionInfo("VersionInfo", (_VersionInfo,), {})


