Metadata-Version: 2.4
Name: FncLogger
Version: 1.0.0
Summary: –ü—Ä–æ—Å—Ç–æ–π –∏ –º–æ—â–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è Python —Å —Ü–≤–µ—Ç–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
Home-page: https://github.com/yourusername/fnclogger
Author: Your Name
Author-email: plv88 <devplv88@gmail.com>
License: MIT License
        
        Copyright (c) 2025 Piliaev Andrei
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Project-URL: Homepage, https://github.com/plv88/FncLogger
Project-URL: Repository, https://github.com/plv88/FncLogger
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Topic :: System :: Logging
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Provides-Extra: rich
Requires-Dist: rich>=10.0.0; extra == "rich"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# FancyLogger

![Python](https://img.shields.io/badge/python-3.7+-blue.svg)
![License](https://img.shields.io/badge/license-MIT-green.svg)
![PyPI](https://img.shields.io/pypi/v/fancy-logger.svg)

–£–ª—É—á—à–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è Python –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞, JSON —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≥–∏–±–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π.

## üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

- ‚úÖ **–¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å** —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Rich (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- ‚úÖ **–ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã**: –∫–æ–Ω—Å–æ–ª—å, —Ñ–∞–π–ª, –∏–ª–∏ –æ–±–∞
- ‚úÖ **JSON –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ** –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- ‚úÖ **–†–æ—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤** –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏ –≤—Ä–µ–º–µ–Ω–∏
- ‚úÖ **Thread-safe** –æ–ø–µ—Ä–∞—Ü–∏–∏
- ‚úÖ **–†–∞–∑–¥–µ–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏** –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ –∏ —Ñ–∞–π–ª–∞
- ‚úÖ **–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ** –≤ –ª–æ–≥–∞—Ö
- ‚úÖ **–ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è** —á–µ—Ä–µ–∑ —Å–ª–æ–≤–∞—Ä–∏
- ‚úÖ **–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏** (Rich –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

## üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞

### –ë–∞–∑–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
```bash
pip install fancy-logger
```

### –° –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Rich (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
```bash
pip install fancy-logger[rich]
```

### –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
```bash
pip install fancy-logger[dev]
```

## üéØ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

### –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ

```python
from fancy_logger import get_logger

# –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞
logger = get_logger("my_app")

# –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
logger.warning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –¶–≤–µ—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
logger.success("–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
logger.highlight("–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
logger.alert("–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ")
logger.fail("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
```

### –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ–∂–∏–º–æ–≤

```python
from fancy_logger import FancyLogger, LogMode, LogLevel

# –¢–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å
console_logger = FancyLogger(
    name="console_app",
    mode=LogMode.CONSOLE_ONLY,
    level=LogLevel.DEBUG
)

# –¢–æ–ª—å–∫–æ –≤ —Ñ–∞–π–ª
file_logger = FancyLogger(
    name="file_app", 
    mode=LogMode.FILE_ONLY,
    log_dir="./logs"
)

# –í –∫–æ–Ω—Å–æ–ª—å –∏ —Ñ–∞–π–ª —Å —Ä–∞–∑–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏
mixed_logger = FancyLogger(
    name="mixed_app",
    mode=LogMode.BOTH,
    console_level=LogLevel.INFO,
    file_level=LogLevel.WARNING
)
```

### JSON –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

```python
from fancy_logger import FancyLogger, OutputFormat

# JSON –≤ —Ñ–∞–π–ª, –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
logger = FancyLogger(
    name="api_server",
    file_format=OutputFormat.JSON,
    console_format=OutputFormat.TEXT
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", extra={
    "user_id": 12345,
    "email": "user@example.com", 
    "ip": "192.168.1.1",
    "action": "login"
})
```

### –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è

```python
config = {
    'name': 'web_app',
    'mode': 'both',
    'level': 20,  # INFO
    'console_level': 20,  # INFO
    'file_level': 30,     # WARNING
    'log_dir': './logs',
    'file_format': 'json',
    'console_format': 'text',
    'use_rich': True,
    'max_file_size': 5 * 1024 * 1024,  # 5MB
    'backup_count': 3
}

logger = FancyLogger.configure_from_dict(config)
```

## üìã –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

### –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

```python
from fancy_logger import FancyLogger, LogMode, OutputFormat

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app_logger = FancyLogger(
    name="webapp",
    mode=LogMode.BOTH,
    console_level=LogLevel.INFO,
    file_level=LogLevel.WARNING,
    file_format=OutputFormat.JSON,
    log_dir="./logs",
    max_file_size=10 * 1024 * 1024,  # 10MB
    backup_count=5
)

def handle_request(user_id, endpoint):
    app_logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞", extra={
        "user_id": user_id,
        "endpoint": endpoint,
        "timestamp": datetime.now().isoformat()
    })
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        result = process_request(endpoint)
        app_logger.success(f"–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {endpoint}")
        return result
    except Exception as e:
        app_logger.fail(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}", exc_info=True)
        raise
```

### –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏

```python
# –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
main_logger = get_logger("service")

# –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã
db_logger = FancyLogger("service.database", mode=LogMode.FILE_ONLY)
api_logger = FancyLogger("service.api", console_level=LogLevel.DEBUG)
auth_logger = FancyLogger("service.auth", file_format=OutputFormat.JSON)

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
def authenticate_user(token):
    auth_logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞", extra={"token_hash": hash(token)})
    
    if not validate_token(token):
        auth_logger.alert("–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω")
        return False
        
    auth_logger.success("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    return True

def database_query(query):
    db_logger.debug(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞: {query}")
    
    try:
        result = execute_query(query)
        db_logger.info(f"–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω, —Å—Ç—Ä–æ–∫: {len(result)}")
        return result
    except Exception as e:
        db_logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {e}", exc_info=True)
        raise
```

### –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π

```python
logger = get_logger("error_handler")

def safe_operation():
    try:
        risky_operation()
        logger.success("–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except ValueError as e:
        logger.alert(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {e}")
        return None
    except ConnectionError as e:
        logger.fail(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}", exc_info=True)
        raise
    except Exception as e:
        logger.critical(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        raise
```

## üîß API Reference

### –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã

#### `FancyLogger`

–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ª–æ–≥–≥–µ—Ä–∞.

**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞:**
- `name: str` - –∏–º—è –ª–æ–≥–≥–µ—Ä–∞
- `mode: LogMode` - —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (CONSOLE_ONLY, FILE_ONLY, BOTH)
- `level: LogLevel` - –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
- `console_level: LogLevel` - —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
- `file_level: LogLevel` - —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Ñ–∞–π–ª–∞
- `log_dir: str | Path` - –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤
- `file_format: OutputFormat` - —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–æ–≤—ã—Ö –ª–æ–≥–æ–≤
- `console_format: OutputFormat` - —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤
- `use_rich: bool` - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Rich –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
- `max_file_size: int` - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–±–∞–π—Ç—ã)
- `backup_count: int` - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ backup —Ñ–∞–π–ª–æ–≤
- `custom_format: str` - –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π

#### –ú–µ—Ç–æ–¥—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

```python
# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
logger.debug(message, extra=None, **kwargs)
logger.info(message, extra=None, **kwargs)
logger.warning(message, extra=None, **kwargs)
logger.error(message, extra=None, exc_info=False, **kwargs)
logger.critical(message, extra=None, exc_info=True, **kwargs)

# –¶–≤–µ—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
logger.success(message, extra=None, **kwargs)  # –ó–µ–ª–µ–Ω—ã–π —Å ‚úì
logger.highlight(message, extra=None, **kwargs)  # –°–∏–Ω–∏–π —Å ‚Üí
logger.alert(message, extra=None, **kwargs)    # –ñ–µ–ª—Ç—ã–π —Å ‚ö†
logger.fail(message, extra=None, **kwargs)     # –ö—Ä–∞—Å–Ω—ã–π —Å ‚úó
```

### Enum –∫–ª–∞—Å—Å—ã

```python
class LogLevel(Enum):
    DEBUG = logging.DEBUG
    INFO = logging.INFO
    WARNING = logging.WARNING
    ERROR = logging.ERROR
    CRITICAL = logging.CRITICAL

class LogMode(Enum):
    CONSOLE_ONLY = "console"
    FILE_ONLY = "file"
    BOTH = "both"

class OutputFormat(Enum):
    TEXT = "text"
    JSON = "json"
```

### –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

```python
# –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞
get_logger(name: str, **kwargs) -> FancyLogger

# –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
setup_basic_logger(name: str, level: str) -> FancyLogger
```

## üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

```bash
# –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
pytest

# –° –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞
pytest --cov=fancy_logger

# –¢–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã
pytest -m "not slow"
```

## üõ£Ô∏è Roadmap

- [ ] –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
- [ ] –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞–º–∏ (FastAPI, Django)
- [ ] –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ –≤ –≤–Ω–µ—à–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã (Elasticsearch, Sentry)
- [ ] –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
- [ ] –ú–µ—Ç—Ä–∏–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

## ü§ù –£—á–∞—Å—Ç–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ

1. Fork —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
2. –°–æ–∑–¥–∞–π—Ç–µ feature branch (`git checkout -b feature/amazing-feature`)
3. Commit –∏–∑–º–µ–Ω–µ–Ω–∏—è (`git commit -m 'Add amazing feature'`)
4. Push –≤ branch (`git push origin feature/amazing-feature`)
5. –°–æ–∑–¥–∞–π—Ç–µ Pull Request

### –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–æ–¥—É

- –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å `black`, `flake8` –∏ `mypy`
- –í—Å–µ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–∫—Ä—ã—Ç—ã —Ç–µ—Å—Ç–∞–º–∏
- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞

## üìù Changelog

### v1.0.0
- –ü–µ—Ä–≤—ã–π —Ä–µ–ª–∏–∑
- –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Rich –∏ JSON —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- Thread-safe –æ–ø–µ—Ä–∞—Ü–∏–∏
- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–ª–æ–≤–∞—Ä–∏

## üìÑ –õ–∏—Ü–µ–Ω–∑–∏—è

–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –ø–æ–¥ –ª–∏—Ü–µ–Ω–∑–∏–µ–π MIT. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ —Ñ–∞–π–ª–µ [LICENSE](LICENSE).

## üôè –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏

- [Rich](https://github.com/Textualize/rich) - –∑–∞ –æ—Ç–ª–∏—á–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
- Python Logging - –∑–∞ –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
- –°–æ–æ–±—â–µ—Å—Ç–≤–æ Python –∑–∞ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å

---

**–°–æ–∑–¥–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è Python —Å–æ–æ–±—â–µ—Å—Ç–≤–∞**
