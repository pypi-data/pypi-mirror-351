"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ exc_info –≤ FncLogger
"""

from fnclogger import get_logger, FncLogger, LogMode
import tempfile
from pathlib import Path


def test_exc_info_fix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ exc_info –±–æ–ª—å—à–µ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–æ–∫"""

    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ exc_info...")

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    temp_dir = Path("./test_exc_info")
    temp_dir.mkdir(exist_ok=True)

    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä —Å —Ñ–∞–π–ª–æ–≤—ã–º –≤—ã–≤–æ–¥–æ–º
    logger = FncLogger(
        name="test_exc_info",
        mode=LogMode.BOTH,
        log_dir=temp_dir
    )

    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –ë–ï–ó exc_info (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        print("  –¢–µ—Å—Ç–∏—Ä—É–µ–º critical() –±–µ–∑ exc_info...")
        logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–µ–∑ exc_info")
        print("  ‚úÖ critical() —Ä–∞–±–æ—Ç–∞–µ—Ç")

        print("  –¢–µ—Å—Ç–∏—Ä—É–µ–º error() –±–µ–∑ exc_info...")
        logger.error("–û–±—ã—á–Ω–∞—è –æ—à–∏–±–∫–∞ –±–µ–∑ exc_info")
        print("  ‚úÖ error() —Ä–∞–±–æ—Ç–∞–µ—Ç")

        print("  –¢–µ—Å—Ç–∏—Ä—É–µ–º fail() –±–µ–∑ exc_info...")
        logger.fail("Fail –±–µ–∑ exc_info")
        print("  ‚úÖ fail() —Ä–∞–±–æ—Ç–∞–µ—Ç")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –° exc_info=True –Ω–æ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        print("  –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å exc_info=True –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è...")
        logger.error("–û—à–∏–±–∫–∞ —Å exc_info=True", exc_info=True)
        logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å exc_info=True", exc_info=True)
        logger.fail("Fail —Å exc_info=True", exc_info=True)
        print("  ‚úÖ exc_info=True –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º
        print("  –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º...")
        try:
            raise ValueError("–¢–µ—Å—Ç–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ")
        except Exception:
            logger.error("–ü–æ–π–º–∞–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ", exc_info=True)
            logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º", exc_info=True)
            logger.fail("Fail —Å —Ä–µ–∞–ª—å–Ω—ã–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º", exc_info=True)
        print("  ‚úÖ –†–µ–∞–ª—å–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –ª–æ–≥–∞
        log_file = temp_dir / "test_exc_info.log"
        if log_file.exists():
            content = log_file.read_text(encoding='utf-8')
            lines = content.splitlines()
            print(f"  üìÑ –ó–∞–ø–∏—Å–∞–Ω–æ —Å—Ç—Ä–æ–∫ –≤ –ª–æ–≥: {len(lines)}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞
            for i, line in enumerate(lines[:3]):
                print(f"    –°—Ç—Ä–æ–∫–∞ {i + 1}: {line}")

            print("  ‚úÖ –§–∞–π–ª –ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")

        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏! –û—à–∏–±–∫–∞ exc_info –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_monitor_compatibility():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å AsyncTgLogMonitor"""

    print("\nüîó –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å AsyncTgLogMonitor...")

    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–∏ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ—Ç —á–∏—Ç–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä
    temp_dir = Path("./test_compatibility")
    temp_dir.mkdir(exist_ok=True)

    logger = FncLogger(
        name="compatibility_test",
        mode=LogMode.FILE_ONLY,
        log_dir=temp_dir
    )

    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π (–ë–ï–ó exc_info=True –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        logger.info("–û–±—ã—á–Ω–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        logger.warning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        logger.error("–û—à–∏–±–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")  # –¢–µ–ø–µ—Ä—å –±–µ–∑ exc_info=True –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        logger.success("–£—Å–ø–µ—à–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è")
        logger.fail("–ù–µ—É–¥–∞—á–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
        log_file = temp_dir / "compatibility_test.log"
        if log_file.exists():
            lines = log_file.read_text(encoding='utf-8').splitlines()
            print(f"  üìù –°–æ–∑–¥–∞–Ω–æ {len(lines)} —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç
            for i, line in enumerate(lines[:3]):
                print(f"  üìÑ –°—Ç—Ä–æ–∫–∞ {i + 1}: {line}")

            print("  ‚úÖ –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º —Å AsyncTgLogMonitor")
            return True
        else:
            print("  ‚ùå –§–∞–π–ª –ª–æ–≥–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω")
            return False

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_exception_scenarios():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏"""

    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏...")

    temp_dir = Path("./test_exceptions")
    temp_dir.mkdir(exist_ok=True)

    logger = FncLogger(
        name="exception_test",
        mode=LogMode.CONSOLE_ONLY,
        log_dir=temp_dir
    )

    try:
        # –°—Ü–µ–Ω–∞—Ä–∏–π 1: exc_info=False (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        print("  –°—Ü–µ–Ω–∞—Ä–∏–π 1: exc_info=False...")
        logger.error("–û—à–∏–±–∫–∞ –±–µ–∑ —Ç—Ä–µ–π—Å–±–µ–∫–∞")
        logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –±–µ–∑ —Ç—Ä–µ–π—Å–±–µ–∫–∞")
        print("    ‚úÖ –ë–µ–∑ —Ç—Ä–µ–π—Å–±–µ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")

        # –°—Ü–µ–Ω–∞—Ä–∏–π 2: exc_info=True –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        print("  –°—Ü–µ–Ω–∞—Ä–∏–π 2: exc_info=True –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è...")
        logger.error("–û—à–∏–±–∫–∞ —Å exc_info –Ω–æ –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è", exc_info=True)
        print("    ‚úÖ exc_info=True –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")

        # –°—Ü–µ–Ω–∞—Ä–∏–π 3: exc_info=True —Å –∞–∫—Ç–∏–≤–Ω—ã–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º
        print("  –°—Ü–µ–Ω–∞—Ä–∏–π 3: exc_info=True —Å –∞–∫—Ç–∏–≤–Ω—ã–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º...")
        try:
            x = 1 / 0
        except ZeroDivisionError:
            logger.error("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å", exc_info=True)
            logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–µ–ª–µ–Ω–∏—è", exc_info=True)
        print("    ‚úÖ exc_info=True —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç")

        print("  üéâ –í—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è FncLogger v1.0.3\n")

    success1 = test_exc_info_fix()
    success2 = test_monitor_compatibility()
    success3 = test_exception_scenarios()

    if success1 and success2 and success3:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏! FncLogger –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ v1.0.3")
        print("\nüìã –ò—Ç–æ–≥–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        print("  ‚úÖ critical() –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç exc_info=True –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        print("  ‚úÖ exc_info –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –ª—é–±—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö")
        print("  ‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å AsyncTgLogMonitor —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        print("  ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")