"""
–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –¥–ª—è FncLogger v1.0.5
"""

from fnclogger import FncLogger, LogLevel, LogMode, OutputFormat, get_logger, setup_basic_logger
from pathlib import Path
from typing import Dict, Any


def test_type_annotations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ –≤—Å–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"""

    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π —Ç–∏–ø–æ–≤...")

    # ‚úÖ –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å LogLevel enum
    print("  1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å LogLevel enum...")
    logger1 = FncLogger(
        name="enum_test",
        level=LogLevel.INFO,  # LogLevel enum
        console_level=LogLevel.DEBUG,  # LogLevel enum
        file_level=LogLevel.WARNING  # LogLevel enum
    )
    print("    ‚úÖ LogLevel enum –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    # ‚úÖ –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Å int –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    print("  2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å int –∑–Ω–∞—á–µ–Ω–∏—è–º–∏...")
    logger2 = FncLogger(
        name="int_test",
        level=20,  # int (INFO)
        console_level=10,  # int (DEBUG)
        file_level=30  # int (WARNING)
    )
    print("    ‚úÖ int –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    # ‚úÖ –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏
    print("  3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏...")
    logger3 = FncLogger(
        name="str_test",
        level="INFO",  # str
        console_level="DEBUG",  # str
        file_level="WARNING"  # str
    )
    print("    ‚úÖ str –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    # ‚úÖ –¢–µ—Å—Ç 4: –°–º–µ—à–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã
    print("  4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–º–µ—à–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã...")
    logger4 = FncLogger(
        name="mixed_test",
        level=LogLevel.INFO,  # enum
        console_level="DEBUG",  # str
        file_level=30,  # int
        log_dir=Path("./logs")  # Path –æ–±—ä–µ–∫—Ç
    )
    print("    ‚úÖ –°–º–µ—à–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    # ‚úÖ –¢–µ—Å—Ç 5: Optional –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (None)
    print("  5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º Optional –ø–∞—Ä–∞–º–µ—Ç—Ä—ã...")
    logger5 = FncLogger(
        name="optional_test",
        level=LogLevel.INFO,
        console_level=None,  # None - –¥–æ–ª–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å level
        file_level=None,  # None - –¥–æ–ª–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å level
        log_dir=None  # None - –¥–æ–ª–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ./logs
    )
    print("    ‚úÖ Optional –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    # ‚úÖ –¢–µ—Å—Ç 6: get_logger —Ñ—É–Ω–∫—Ü–∏—è
    print("  6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_logger...")
    quick_logger = get_logger("quick_test")
    print("    ‚úÖ get_logger –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç FncLogger")

    # ‚úÖ –¢–µ—Å—Ç 7: setup_basic_logger —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
    print("  7Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º setup_basic_logger...")
    basic1 = setup_basic_logger("basic1", "INFO")  # str
    basic2 = setup_basic_logger("basic2", LogLevel.DEBUG)  # enum
    basic3 = setup_basic_logger("basic3", 20)  # int
    print("    ‚úÖ setup_basic_logger –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —É—Ä–æ–≤–Ω–µ–π")

    # ‚úÖ –¢–µ—Å—Ç 8: configure_from_dict
    print("  8Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º configure_from_dict...")
    config: Dict[str, Any] = {
        'name': 'dict_test',
        'level': 20,  # int
        'console_level': 'DEBUG',  # str
        'file_level': LogLevel.ERROR,  # enum
        'mode': 'both',  # str
        'file_format': 'json',  # str
        'log_dir': './test_logs'  # str
    }
    dict_logger = FncLogger.configure_from_dict(config)
    print("    ‚úÖ configure_from_dict –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–º–µ—à–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã")

    # ‚úÖ –¢–µ—Å—Ç 9: –ú–µ—Ç–æ–¥—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π
    print("  9Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π...")
    test_logger = get_logger("level_change_test")

    # –¶–µ–ø–æ—á–∫–∞ –≤—ã–∑–æ–≤–æ–≤ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å (fluent interface)
    result = (test_logger
              .set_level("ERROR")  # str
              .set_console_level(LogLevel.INFO)  # enum
              .set_file_level(40))  # int

    assert result is test_logger  # –î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å self
    print("    ‚úÖ –ú–µ—Ç–æ–¥—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ fluent interface")

    # ‚úÖ –¢–µ—Å—Ç 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ –º–µ—Ç–æ–¥–æ–≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    print("  üîü –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ —Ç–∏–ø—ã –º–µ—Ç–æ–¥–æ–≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")

    # –≠—Ç–∏ –º–µ—Ç–æ–¥—ã –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å None
    result1 = test_logger.info("Test info")
    result2 = test_logger.error("Test error")
    result3 = test_logger.success("Test success")
    result4 = test_logger.fail("Test fail")

    assert result1 is None
    assert result2 is None
    assert result3 is None
    assert result4 is None
    print("    ‚úÖ –ú–µ—Ç–æ–¥—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç None")

    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    return True


def test_error_handling():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏"""

    print("\n‚ö†Ô∏è  –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤...")

    # –¢–µ—Å—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
    print("  ‚ùå –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —É—Ä–æ–≤–Ω–∏...")

    try:
        FncLogger("error_test", level=999)  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π int
        print("    ‚ùå –û–®–ò–ë–ö–ê: –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ")
        return False
    except ValueError as e:
        print(f"    ‚úÖ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π int –æ—Ç–∫–ª–æ–Ω–µ–Ω: {e}")

    try:
        FncLogger("error_test", level="INVALID_LEVEL")  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        print("    ‚ùå –û–®–ò–ë–ö–ê: –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ")
        return False
    except ValueError as e:
        print(f"    ‚úÖ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {e}")

    try:
        FncLogger("error_test", level=[])  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø
        print("    ‚ùå –û–®–ò–ë–ö–ê: –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ")
        return False
    except TypeError as e:
        print(f"    ‚úÖ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç–∫–ª–æ–Ω–µ–Ω: {e}")

    print("  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True


def test_ide_compatibility():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å IDE/type checkers"""

    print("\nüîß –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å IDE...")

    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ IDE –≤–∏–¥–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã
    logger = FncLogger(
        name="ide_test",
        level=LogLevel.INFO,
        console_level=LogLevel.DEBUG
    )

    # IDE –¥–æ–ª–∂–µ–Ω –ø–æ–Ω–∏–º–∞—Ç—å —á—Ç–æ —ç—Ç–æ FncLogger
    assert isinstance(logger, FncLogger)

    # –ú–µ—Ç–æ–¥—ã –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã
    logger_result = logger.set_level("ERROR")  # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å FncLogger
    assert isinstance(logger_result, FncLogger)

    # –ú–µ—Ç–æ–¥—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å None
    log_result = logger.info("Test")  # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å None
    assert log_result is None

    print("  ‚úÖ IDE —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ type hints
    def use_logger(my_logger: FncLogger) -> None:
        my_logger.info("Testing type hints")

    use_logger(logger)  # –î–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫ —Ç–∏–ø–æ–≤
    print("  ‚úÖ Type hints —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    return True


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ FncLogger v1.0.5\n")

    try:
        test1 = test_type_annotations()
        test2 = test_error_handling()
        test3 = test_ide_compatibility()

        if test1 and test2 and test3:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –¢–ò–ü–ò–ó–ê–¶–ò–ò –ü–†–û–®–õ–ò!")
            print("\nüìã –ò—Ç–æ–≥–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π v1.0.5:")
            print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã Union —Ç–∏–ø—ã –¥–ª—è –≥–∏–±–∫–æ—Å—Ç–∏ (LogLevel | int | str)")
            print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ _normalize_level –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤")
            print("  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤")
            print("  ‚úÖ –£–ª—É—á—à–µ–Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å IDE –∏ type checkers")
            print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤")
            print("  ‚úÖ configure_from_dict —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–º–µ—à–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã")
            print("\nüîß IDE –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ —Ç–∏–ø–æ–≤!")
        else:
            print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")

    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback

        traceback.print_exc()