# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import List, Union, Iterable
from datetime import date, datetime
from typing_extensions import Literal, Required, Annotated, TypedDict

from .._utils import PropertyInfo
from .location_ingest_param import LocationIngestParam

__all__ = [
    "SensorCreateParams",
    "Entity",
    "EntityOnOrbit",
    "Sensorcharacteristic",
    "SensorlimitsCollection",
    "SensorObservationType",
    "SensorStat",
    "SensorType",
]


class SensorCreateParams(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    sensor_name: Required[Annotated[str, PropertyInfo(alias="sensorName")]]
    """Unique name of this sensor."""

    source: Required[str]
    """Source of the data."""

    active: bool
    """Optional flag indicating if the sensor is active."""

    af_id: Annotated[str, PropertyInfo(alias="afId")]
    """
    Optional US Air Force identifier for the sensor/ASR site, typically for air
    surveillance radar (ASR) sensors.
    """

    asr_type: Annotated[str, PropertyInfo(alias="asrType")]
    """The sensor type at the site. Optional field, intended primarily for ASRs."""

    data_control: Annotated[str, PropertyInfo(alias="dataControl")]
    """
    Optional dissemination control required for accessing data (e.g observations)
    produced by this sensor. This is typically a proprietary data owner control for
    commercial sensors.
    """

    entity: Entity
    """
    An entity is a generic representation of any object within a space/SSA system
    such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An
    entity can have an operating unit, a location (if terrestrial), and statuses.
    """

    id_entity: Annotated[str, PropertyInfo(alias="idEntity")]
    """Unique identifier of the parent entity. idEntity is required for Put."""

    id_sensor: Annotated[str, PropertyInfo(alias="idSensor")]
    """Unique identifier of the record, auto-generated by the system."""

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    sensorcharacteristics: Iterable[Sensorcharacteristic]
    """
    Collection of Sensorcharacteristics which define characteristics and
    capabilities of a sensor.
    """

    sensorlimits_collection: Annotated[Iterable[SensorlimitsCollection], PropertyInfo(alias="sensorlimitsCollection")]
    """
    Sensorlimits define 0 to many limits of a particular sensor in terms of
    observation coverage of on-orbit objects.
    """

    sensor_number: Annotated[int, PropertyInfo(alias="sensorNumber")]
    """Number assigned to this sensor.

    Since there is no authoritative numbering scheme, these numbers sometimes
    collide across sensors (especially commercial sensors). It is therefore not a
    unique identifier.
    """

    sensor_observation_type: Annotated[SensorObservationType, PropertyInfo(alias="sensorObservationType")]

    sensor_stats: Annotated[Iterable[SensorStat], PropertyInfo(alias="sensorStats")]
    """Collection of SensorStats which contain statistics of a sensor."""

    sensor_type: Annotated[SensorType, PropertyInfo(alias="sensorType")]

    short_name: Annotated[str, PropertyInfo(alias="shortName")]
    """Optional short name for the sensor."""


class EntityOnOrbit(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    sat_no: Required[Annotated[int, PropertyInfo(alias="satNo")]]
    """Satellite/Catalog number of the target on-orbit object."""

    source: Required[str]
    """Source of the data."""

    alt_name: Annotated[str, PropertyInfo(alias="altName")]
    """Alternate name of the on-orbit object."""

    category: Literal[
        "Unknown",
        "On-Orbit",
        "Decayed",
        "Cataloged Without State",
        "Launch Nominal",
        "Analyst Satellite",
        "Cislunar",
        "Lunar",
        "Hyperbolic",
        "Heliocentric",
        "Interplanetary",
        "Lagrangian",
        "Docked",
    ]
    """Category of the on-orbit object.

    (Unknown, On-Orbit, Decayed, Cataloged Without State, Launch Nominal, Analyst
    Satellite, Cislunar, Lunar, Hyperbolic, Heliocentric, Interplanetary,
    Lagrangian, Docked).
    """

    common_name: Annotated[str, PropertyInfo(alias="commonName")]
    """Common name of the on-orbit object."""

    constellation: str
    """Constellation to which this satellite belongs."""

    country_code: Annotated[str, PropertyInfo(alias="countryCode")]
    """The country code.

    This value is typically the ISO 3166 Alpha-2 two-character country code, however
    it can also represent various consortiums that do not appear in the ISO
    document. The code must correspond to an existing country in the UDLâ€™s country
    API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code,
    or alternate code values that exist for the specified country code.
    """

    decay_date: Annotated[Union[str, datetime], PropertyInfo(alias="decayDate", format="iso8601")]
    """Date of decay."""

    id_on_orbit: Annotated[str, PropertyInfo(alias="idOnOrbit")]
    """
    For the public catalog, the idOnOrbit is typically the satellite number as a
    string, but may be a UUID for analyst or other unknown or untracked satellites,
    auto-generated by the system.
    """

    intl_des: Annotated[str, PropertyInfo(alias="intlDes")]
    """
    International Designator, typically of the format YYYYLLLAAA, where YYYY is the
    launch year, LLL is the sequential launch number of that year, and AAA is an
    optional launch piece designator for the launch.
    """

    launch_date: Annotated[Union[str, date], PropertyInfo(alias="launchDate", format="iso8601")]
    """Date of launch."""

    launch_site_id: Annotated[str, PropertyInfo(alias="launchSiteId")]
    """Id of the associated launchSite entity."""

    lifetime_years: Annotated[int, PropertyInfo(alias="lifetimeYears")]
    """Estimated lifetime of the on-orbit payload, if known."""

    mission_number: Annotated[str, PropertyInfo(alias="missionNumber")]
    """Mission number of the on-orbit object."""

    object_type: Annotated[
        Literal["ROCKET BODY", "DEBRIS", "PAYLOAD", "PLATFORM", "MANNED", "UNKNOWN"], PropertyInfo(alias="objectType")
    ]
    """
    Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED,
    UNKNOWN.
    """

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """


class Entity(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    name: Required[str]
    """Unique entity name."""

    source: Required[str]
    """Source of the data."""

    type: Required[
        Literal[
            "AIRCRAFT",
            "BUS",
            "COMM",
            "IR",
            "NAVIGATION",
            "ONORBIT",
            "RFEMITTER",
            "SCIENTIFIC",
            "SENSOR",
            "SITE",
            "VESSEL",
        ]
    ]
    """
    The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR,
    NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).
    """

    country_code: Annotated[str, PropertyInfo(alias="countryCode")]
    """The country code.

    This value is typically the ISO 3166 Alpha-2 two-character country code, however
    it can also represent various consortiums that do not appear in the ISO
    document. The code must correspond to an existing country in the UDLâ€™s country
    API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code,
    or alternate code values that exist for the specified country code.
    """

    id_entity: Annotated[str, PropertyInfo(alias="idEntity")]
    """Unique identifier of the record."""

    id_location: Annotated[str, PropertyInfo(alias="idLocation")]
    """Unique identifier of the entity location, if terrestrial/fixed."""

    id_on_orbit: Annotated[str, PropertyInfo(alias="idOnOrbit")]
    """Onorbit identifier if this entity is part of an on-orbit object.

    For the public catalog, the idOnOrbit is typically the satellite number as a
    string, but may be a UUID for analyst or other unknown or untracked satellites.
    """

    id_operating_unit: Annotated[str, PropertyInfo(alias="idOperatingUnit")]
    """Unique identifier of the associated operating unit object."""

    location: LocationIngestParam
    """
    Model representation of a location, which is a specific fixed point on the earth
    and is used to denote the locations of fixed sensors, operating units, etc.
    """

    on_orbit: Annotated[EntityOnOrbit, PropertyInfo(alias="onOrbit")]
    """Model object representing on-orbit objects or satellites in the system."""

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    owner_type: Annotated[
        Literal["Commercial", "Government", "Academic", "Consortium", "Other"], PropertyInfo(alias="ownerType")
    ]
    """Type of organization which owns this entity (e.g.

    Commercial, Government, Academic, Consortium, etc).
    """

    taskable: bool
    """Boolean indicating if this entity is taskable."""

    terrestrial_id: Annotated[str, PropertyInfo(alias="terrestrialId")]
    """Terrestrial identifier of this entity, if applicable."""

    urls: List[str]
    """List of URLs to additional details/documents for this entity."""


class Sensorcharacteristic(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    id_sensor: Required[Annotated[str, PropertyInfo(alias="idSensor")]]
    """Unique identifier of the parent sensor."""

    source: Required[str]
    """Source of the data."""

    id: str
    """Unique identifier of the record, auto-generated by the system."""

    accept_sample_ranges: Annotated[Iterable[float], PropertyInfo(alias="acceptSampleRanges")]
    """Array of measurement range(s) where radar samples must fall to be acceptable.

    If this field is populated, the associated beam(s) must be provided in the
    beamOrder field.
    """

    aperture: float
    """Optical sensor camera aperture."""

    asr_scan_rate: Annotated[float, PropertyInfo(alias="asrScanRate")]
    """
    For ASR (Air Surveillance Radar) sensors, the scan (360 deg sweep) rate of the
    radar, in scans/minute.
    """

    az_angs: Annotated[Iterable[float], PropertyInfo(alias="azAngs")]
    """Array of azimuth angles of a radar beam, in degrees.

    If this field is populated, the associated beam(s) must be provided in the
    beamOrder field.
    """

    azimuth_rate: Annotated[float, PropertyInfo(alias="azimuthRate")]
    """Azimuth rate acquisition limit (radians/minute)."""

    band: str
    """Sensor band."""

    beam_order: Annotated[List[str], PropertyInfo(alias="beamOrder")]
    """Array designating the beam order of provided values (e.g.

    vb1 for vertical beam 1, ob1 for oblique beam 1, etc.). Required if any of the
    following array fields are populated: azAngs, elAngs, radarPulseWidths,
    pulseRepPeriods, delayGates, rangeGates, rangeSpacings, vertGateSpacings,
    vertGateWidths, specAvgSpectraNums, tempMedFiltCodes, runMeanCodes, totRecNums,
    reqRecords, acceptSampleRanges.
    """

    beam_qty: Annotated[int, PropertyInfo(alias="beamQty")]
    """Number of radar beams used by the sensor."""

    boresight: float
    """The angle of the center of a phased array sensor."""

    boresight_off_angle: Annotated[float, PropertyInfo(alias="boresightOffAngle")]
    """The number of degrees off of the boresight for the sensor."""

    crit_shear: Annotated[float, PropertyInfo(alias="critShear")]
    """
    Threshold shear value beyond which one of the radial velocity values will be
    rejected, measured in units of inverse second.
    """

    delay_gates: Annotated[Iterable[float], PropertyInfo(alias="delayGates")]
    """
    Array of time delay(s) for pulses from a radar beam to get to the first range
    gate, in nanoseconds. If this field is populated, the associated beam(s) must be
    provided in the beamOrder field.
    """

    description: str
    """Description of the equipment and data source."""

    el_angs: Annotated[Iterable[float], PropertyInfo(alias="elAngs")]
    """Array of elevation angles of a radar beam, in degrees.

    If this field is populated, the associated beam(s) must be provided in the
    beamOrder field.
    """

    elevation_rate_geolm: Annotated[float, PropertyInfo(alias="elevationRateGeolm")]
    """Elevation rate acquisition limit (radians/minute)."""

    equipment_type: Annotated[str, PropertyInfo(alias="equipmentType")]
    """Type of equipment used to take measurements."""

    fan_beam_width: Annotated[float, PropertyInfo(alias="fanBeamWidth")]
    """The beam width of a Sensor's Fan (range).

    The values for this range from (0.0 to PI).
    """

    fft: int
    """
    Number of Fast Fourier Transform (FFT) points used to convert time varying
    signals into the frequency domain.
    """

    fgp_crit: Annotated[int, PropertyInfo(alias="fgpCrit")]
    """
    Maximum number of times the first guess was propagated in each gate before
    failing the first guess check.
    """

    focal_point: Annotated[float, PropertyInfo(alias="focalPoint")]
    """
    For radar based sensors, the focal point elevation of the radar at the site, in
    meters.
    """

    h_fov: Annotated[float, PropertyInfo(alias="hFOV")]
    """Horizontal field of view."""

    h_res_pixels: Annotated[int, PropertyInfo(alias="hResPixels")]
    """Horizontal pixel resolution."""

    k: float
    """
    For radar based sensors, K-factor is a relative indicator of refractivity that
    infers the amount of radar beam bending due to atmosphere. (1<K<2).
    """

    left_clock_angle: Annotated[float, PropertyInfo(alias="leftClockAngle")]
    """For Orbiting Sensors, First Card Azimuth limit #1 (left, degrees)."""

    left_geo_belt_limit: Annotated[float, PropertyInfo(alias="leftGeoBeltLimit")]
    """Leftmost GEO belt longitude limit for this sensor (if applicable)."""

    location: str
    """Site where measurement is taken."""

    mag_dec: Annotated[float, PropertyInfo(alias="magDec")]
    """Angle between magnetic north and true north at the sensor site, in degrees."""

    magnitude_limit: Annotated[float, PropertyInfo(alias="magnitudeLimit")]
    """Absolute magnitude acquisition limit for optical sensors."""

    max_deviation_angle: Annotated[float, PropertyInfo(alias="maxDeviationAngle")]
    """Max deviation angle of the sensor in degrees."""

    max_observable_range: Annotated[float, PropertyInfo(alias="maxObservableRange")]
    """Maximum observable sensor range, in kilometers."""

    max_range_limit: Annotated[float, PropertyInfo(alias="maxRangeLimit")]
    """
    Maximum observable range limit in kilometers -- sensor cannot acquire beyond
    this range.
    """

    min_range_limit: Annotated[float, PropertyInfo(alias="minRangeLimit")]
    """Minimum range measurement capability of the sensor, in kilometers."""

    min_signal_noise_ratio: Annotated[float, PropertyInfo(alias="minSignalNoiseRatio")]
    """Signal to Noise Ratio, in decibels.

    The values for this range from 0.0 - + 99.99 dB.
    """

    negative_range_rate_limit: Annotated[float, PropertyInfo(alias="negativeRangeRateLimit")]
    """Negative Range-rate/relative velocity limit (kilometers/second)."""

    num_integrated_pulses: Annotated[int, PropertyInfo(alias="numIntegratedPulses")]
    """For radar based sensors, number of integrated pulses in a transmit cycle."""

    positive_range_rate_limit: Annotated[float, PropertyInfo(alias="positiveRangeRateLimit")]
    """Positive Range-rate/relative velocity limit (kilometers/second)."""

    prf: float
    """For radar based sensors, pulse repetition frequency (PRF), in hertz.

    Number of new pulses transmitted per second.
    """

    prob_false_alarm: Annotated[float, PropertyInfo(alias="probFalseAlarm")]
    """
    For radar based sensors, probability of the indication of the presence of a
    radar target due to noise or interference.
    """

    pulse_rep_periods: Annotated[Iterable[float], PropertyInfo(alias="pulseRepPeriods")]
    """
    Array of interval(s) between the start of one radar pulse and the start of
    another for a radar beam, in microseconds. If this field is populated, the
    associated beam(s) must be provided in the beamOrder field.
    """

    radar_frequency: Annotated[float, PropertyInfo(alias="radarFrequency")]
    """Radar frequency of the sensor (if a radar sensor)."""

    radar_message_format: Annotated[str, PropertyInfo(alias="radarMessageFormat")]
    """Message data format transmitted by the sensor digitizer."""

    radar_mur: Annotated[float, PropertyInfo(alias="radarMUR")]
    """For radar based sensors, radar maximum unambiguous range, in kilometers."""

    radar_pulse_widths: Annotated[Iterable[float], PropertyInfo(alias="radarPulseWidths")]
    """Array of transmit time(s) for a radar beam pulse, in microseconds.

    If this field is populated, the associated beam(s) must be provided in the
    beamOrder field.
    """

    radio_frequency: Annotated[float, PropertyInfo(alias="radioFrequency")]
    """Radio frequency (if sensor is RF)."""

    range_gates: Annotated[Iterable[int], PropertyInfo(alias="rangeGates")]
    """
    Array of the number(s) of discrete altitudes where return signals are sampled by
    a radar beam. If this field is populated, the associated beam(s) must be
    provided in the beamOrder field.
    """

    range_spacings: Annotated[Iterable[float], PropertyInfo(alias="rangeSpacings")]
    """Array of range gate spacing(s) for a radar beam, in nanoseconds.

    If this field is populated, the associated beam(s) must be provided in the
    beamOrder field.
    """

    req_records: Annotated[Iterable[int], PropertyInfo(alias="reqRecords")]
    """
    Array of the total number(s) of records required to meet consensus for a radar
    beam. If this field is populated, the associated beam(s) must be provided in the
    beamOrder field.
    """

    right_clock_angle: Annotated[float, PropertyInfo(alias="rightClockAngle")]
    """For Orbiting Sensors, First Card Azimuth limit #3 (right, degrees)."""

    right_geo_belt_limit: Annotated[float, PropertyInfo(alias="rightGeoBeltLimit")]
    """Rightmost GEO belt longitude limit for this sensor (if applicable)."""

    run_mean_codes: Annotated[Iterable[int], PropertyInfo(alias="runMeanCodes")]
    """Array of running mean code(s) used by radar data processing.

    The running mean method involves taking a series of averages of different
    selections of the full data set to smooth out short-term fluctuations in the
    data. If this field is populated, the associated beam(s) must be provided in the
    beamOrder field.
    """

    site_code: Annotated[str, PropertyInfo(alias="siteCode")]
    """Site code of the sensor."""

    spec_avg_spectra_nums: Annotated[Iterable[int], PropertyInfo(alias="specAvgSpectraNums")]
    """
    Array of the number(s) of Doppler spectra used to process measurements from
    radar. Spectral averaging involves combining multiple Doppler spectra acquired
    to obtain a more accurate and representative spectrum. If this field is
    populated, the associated beam(s) must be provided in the beamOrder field.
    """

    system_noise_temperature: Annotated[float, PropertyInfo(alias="systemNoiseTemperature")]
    """
    For radar based sensors, expression of the radar system noise, aggregated as an
    equivalent thermal noise value, in degrees Kelvin.
    """

    taskable_range: Annotated[float, PropertyInfo(alias="taskableRange")]
    """Maximum taskable range of the sensor, in kilometers."""

    temp_med_filt_codes: Annotated[Iterable[int], PropertyInfo(alias="tempMedFiltCodes")]
    """Array of temporal median filter code(s) of a radar beam.

    Temporal median filtering is a noise-reducing algorithm which involves replacing
    each data point with the median value of a window of neighboring points over
    time. If this field is populated, the associated beam(s) must be provided in the
    beamOrder field.
    """

    test_number: Annotated[str, PropertyInfo(alias="testNumber")]
    """Test number for the observed measurement."""

    tot_rec_nums: Annotated[Iterable[int], PropertyInfo(alias="totRecNums")]
    """Array of the total number(s) of records for a radar beam.

    If this field is populated, the associated beam(s) must be provided in the
    beamOrder field.
    """

    tower_height: Annotated[float, PropertyInfo(alias="towerHeight")]
    """For tower sensors, the physical height of the sensor tower, in meters."""

    track_angle: Annotated[float, PropertyInfo(alias="trackAngle")]
    """Beginning track angle limit, in radians.

    Track angle is the angle between the camera axis and the gimbal plane. Values
    range from 0 - PI/2.
    """

    transmit_power: Annotated[float, PropertyInfo(alias="transmitPower")]
    """Radar transmit power in Watts."""

    true_north_corrector: Annotated[int, PropertyInfo(alias="trueNorthCorrector")]
    """True North correction for the sensor, in ACP (Azimunth Change Pulse) count."""

    true_tilt: Annotated[float, PropertyInfo(alias="trueTilt")]
    """Antenna true tilt, in degrees."""

    vert_beam_flag: Annotated[bool, PropertyInfo(alias="vertBeamFlag")]
    """Flag indicating if a vertical radar beam was used in the wind calculation."""

    vert_gate_spacings: Annotated[Iterable[float], PropertyInfo(alias="vertGateSpacings")]
    """
    Array of vertical distance(s) between points where radar measurements are taken,
    in meters. If this field is populated, the associated beam(s) must be provided
    in the beamOrder field.
    """

    vert_gate_widths: Annotated[Iterable[float], PropertyInfo(alias="vertGateWidths")]
    """Array of width(s) of each location where radar measurements are taken, in
    meters.

    If this field is populated, the associated beam(s) must be provided in the
    beamOrder field.
    """

    v_fov: Annotated[float, PropertyInfo(alias="vFOV")]
    """Vertical field of view."""

    v_res_pixels: Annotated[int, PropertyInfo(alias="vResPixels")]
    """Vertical pixel resolution."""

    z1_max_range: Annotated[float, PropertyInfo(alias="z1MaxRange")]
    """Peformance zone-1 maximum range, in kilometers.

    Note that the zones apply only to the PSR/Search radars.
    """

    z1_min_range: Annotated[float, PropertyInfo(alias="z1MinRange")]
    """Peformance zone-1 minimum range, in kilometers.

    Note that the zones apply only to the PSR/Search radars.
    """

    z2_max_range: Annotated[float, PropertyInfo(alias="z2MaxRange")]
    """Peformance zone-2 maximum range, in kilometers.

    Note that the zones apply only to the PSR/Search radars.
    """

    z2_min_range: Annotated[float, PropertyInfo(alias="z2MinRange")]
    """Peformance zone-2 minimum range, in kilometers.

    Note that the zones apply only to the PSR/Search radars.
    """


class SensorlimitsCollection(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    source: Required[str]
    """Source of the data."""

    id_sensor: Annotated[str, PropertyInfo(alias="idSensor")]
    """Unique identifier of the target sensor object."""

    id_sensor_limits: Annotated[str, PropertyInfo(alias="idSensorLimits")]
    """Unique identifier of the record, auto-generated by the system."""

    lower_left_azimuth_limit: Annotated[float, PropertyInfo(alias="lowerLeftAzimuthLimit")]
    """Leftmost or minimum lower azimuth within this limit.

    Interpreted according to site types as lower left azimuth limit elevation angle
    of axis of conical observation pattern. If the limit rectangle is parallel to
    the horizon, the upper and lower left azimuth limits would be equal. (degrees).
    """

    lower_left_elevation_limit: Annotated[float, PropertyInfo(alias="lowerLeftElevationLimit")]
    """Minimum or lower elevation within this limit.

    Interpreted according to site types as minimum elevation angle, constant
    elevation or fan beam centerline. (Degrees).
    """

    lower_right_azimuth_limit: Annotated[float, PropertyInfo(alias="lowerRightAzimuthLimit")]
    """Rightmost or maximum lower azimuth within this limit.

    Interpreted according to site types as 2nd lower azimuth limit elevation angle
    of axis of conical observation pattern. If the limit rectangle is parallel to
    the horizon, the upper and lower right azimuth limits would be equal. (degrees).
    """

    lower_right_elevation_limit: Annotated[float, PropertyInfo(alias="lowerRightElevationLimit")]
    """Minimum or lower right elevation within this limit.

    Interpreted according to site types as minimum right elevation angle, constant
    elevation or fan beam centerline. If the limit rectangle is parallel to the
    horizon, the left and right lower elevation limits would be equal. (Degrees).
    """

    upper_left_azimuth_limit: Annotated[float, PropertyInfo(alias="upperLeftAzimuthLimit")]
    """Leftmost or minimum upper azimuth within this sensor limit.

    Interpreted according to site types as beginning upper azimuth limit, left-hand
    upper boundary limit. If the limit rectangle is parallel to the horizon, the
    upper and lower left azimuth limits would be equal. (in degrees).
    """

    upper_left_elevation_limit: Annotated[float, PropertyInfo(alias="upperLeftElevationLimit")]
    """Maximum or upper elevation within this limit.

    Interpreted according to site types as maximum elevation angle, half the apex of
    conical observation pattern or star. (Degrees).
    """

    upper_right_azimuth_limit: Annotated[float, PropertyInfo(alias="upperRightAzimuthLimit")]
    """Rightmost or maximum upper azimuth within this limit.

    Interpreted according to site types as 2nd azimuth limit elevation angle of axis
    of conical observation pattern. If the limit rectangle is parallel to the
    horizon, the upper and lower right azimuth limits would be equal. (degrees).
    """

    upper_right_elevation_limit: Annotated[float, PropertyInfo(alias="upperRightElevationLimit")]
    """Maximum or upper right elevation within this limit.

    Interpreted according to site types as maximum rightmost elevation angle, half
    the apex of conical observation pattern or star. If the limit rectangle is
    parallel to the horizon, the left and right upper elevation limits would be
    equal. (Degrees).
    """


class SensorObservationType(TypedDict, total=False):
    id: str
    """Unique identifier of the record, auto-generated by the system."""

    type: str
    """The observation measurement type produced by a sensor."""


class SensorStat(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    id_sensor: Required[Annotated[str, PropertyInfo(alias="idSensor")]]
    """Unique ID of the parent sensor."""

    source: Required[str]
    """Source of the data."""

    id: str
    """Unique identifier of the record, auto-generated by the system."""

    last_ob_time: Annotated[Union[str, datetime], PropertyInfo(alias="lastObTime", format="iso8601")]
    """Time of last reported observation in ISO 8601 UTC with microsecond precision."""


class SensorType(TypedDict, total=False):
    id: int
    """Unique identifier of the record, auto-generated by the system."""

    type: str
    """The specific sensor type and/or surveillance capability of this sensor."""
