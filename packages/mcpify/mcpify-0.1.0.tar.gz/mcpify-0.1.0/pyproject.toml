[project]
name = "mcpify"
version = "0.1.0"
description = "Turn existing projects into MCP servers"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Xiaotian Jin", email = "jin.xiaotian.kim@gmail.com"},
]
maintainers = [
    {name = "Xiaotian Jin", email = "jin.xiaotian.kim@gmail.com"},
]
keywords = ["mcp", "model-context-protocol", "api", "server", "automation", "ai"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
]
dependencies = [
    "aiohttp>=3.12.2",
    "mcp[cli]>=1.9.1",
    "openai>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/mugglejinx/mcpify"
Documentation = "https://github.com/muggleji/mcpify#readme"
Repository = "https://github.com/muggleji/mcpify.git"
"Bug Tracker" = "https://github.com/muggleji/mcpify/issues"
Changelog = "https://github.com/muggleji/mcpify/blob/main/CHANGELOG.md"

[project.optional-dependencies]
examples = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "python-dateutil>=2.8.2",
    "flask>=2.3.0",
    "requests>=2.31.0",
]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "bandit[toml]>=1.7.0",
    "safety>=2.3.0",
]
all = [
    "mcpify[examples,dev]",
]

[project.scripts]
mcpify = "mcpify.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# Ruff configuration
[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by formatter
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["mcpify"]

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["mcpify"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
