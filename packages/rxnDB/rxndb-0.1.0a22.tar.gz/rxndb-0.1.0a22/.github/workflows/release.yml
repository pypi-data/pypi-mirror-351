---
name: Test and Release
permissions:
  contents: write
  packages: write
on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
jobs:
  test:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      - name: Run tests and generate coverage report
        run: |
          pytest --cov=rxnDB --cov-branch --cov-report=xml
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
  check-version:
    name: Check if major or minor version
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    outputs:
      is_major_minor: ${{ steps.check_tag.outputs.is_major_minor }}
    steps:
      - name: Check tag format
        id: check_tag
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          VERSION_CORE=$(echo $VERSION | cut -d'-' -f1 | cut -d'+' -f1)
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION_CORE"
          if [[ ${#VERSION_PARTS[@]} -eq 3 && ${VERSION_PARTS[2]} != "0" ]]; then
            echo "Tag $TAG is a patch version"
            echo "is_major_minor=false" >> $GITHUB_OUTPUT
          elif [[ "$VERSION" == *"-"* ]]; then
            echo "Tag $TAG is a prerelease version"
            echo "is_major_minor=false" >> $GITHUB_OUTPUT
          else
            echo "Tag $TAG is a major or minor version"
            echo "is_major_minor=true" >> $GITHUB_OUTPUT
          fi
  build:
    name: Build and Upload to PyPI
    needs: check-version
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine build setuptools-scm
      - name: Verify version
        run: python -m setuptools_scm
      - name: Build distribution
        run: |
          rm -rf dist build *.egg-info
          python -m build
      - name: Check dist artifacts
        run: |
          ls -lh dist
          test -f dist/*.whl
          test -f dist/*.tar.gz
      - name: Upload to Test PyPI
        run: twine upload --verbose --repository-url https://test.pypi.org/legacy/ dist/*
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      - name: Upload to PyPI
        run: twine upload --verbose dist/*
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      - name: Upload dist to GitHub release
        if: needs.check-version.outputs.is_major_minor == 'true'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
