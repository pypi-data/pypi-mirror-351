# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
from .chat_completion_message_tool_calls import ChatCompletionMessageToolCalls
from .annotation import Annotation
from .role_6 import Role6
from .function_call import FunctionCall
from .audio_1 import Audio1
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class ChatCompletionResponseMessage(UniversalBaseModel):
    content: str = pydantic.Field()
    """
    The contents of the message.
    """

    refusal: typing.Optional[str] = pydantic.Field(default=None)
    """
    The refusal message generated by the model.
    """

    tool_calls: typing.Optional[ChatCompletionMessageToolCalls] = None
    annotations: typing.Optional[typing.List[Annotation]] = pydantic.Field(default=None)
    """
    Annotations for the message, when applicable, as when using the
    [web search tool](/docs/guides/tools-web-search?api-mode=chat).
    """

    role: Role6 = pydantic.Field(default="assistant")
    """
    The role of the author of this message.
    """

    function_call: typing.Optional[FunctionCall] = pydantic.Field(default=None)
    """
    Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
    """

    audio: typing.Optional[Audio1] = pydantic.Field(default=None)
    """
    If the audio output modality is requested, this object contains data
    about the audio response from the model. [Learn more](/docs/guides/audio).
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
