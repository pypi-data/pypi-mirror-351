
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AUTHOR_KEYWORD COLON COMMA DATA_KEYWORD DATE DATE_KEYWORD DESCRIPTION_KEYWORD DO END EQUALS FALSE FOR ID IMPORT_KEYWORD IN KEYWORD_KEYWORD LBRACKET LPAREN NAME_KEYWORD NUMBER PLACEHOLDER RANGE RBRACKET RETURN RPAREN STRING TAGS_KEYWORD TEARDOWN_KEYWORD TRUE USINGstart : metadata keyword_definitionsmetadata : metadata_item metadata\n                | metadata_itemmetadata_item : NAME_KEYWORD COLON STRING\n                     | NAME_KEYWORD COLON ID\n                     | DESCRIPTION_KEYWORD COLON STRING\n                     | DESCRIPTION_KEYWORD COLON ID\n                     | AUTHOR_KEYWORD COLON STRING\n                     | AUTHOR_KEYWORD COLON ID\n                     | DATE_KEYWORD COLON DATE\n                     | IMPORT_KEYWORD COLON STRINGkeyword_definitions : keyword_definition keyword_definitions\n                          | keyword_definitionkeyword_definition : KEYWORD_KEYWORD ID LPAREN param_list RPAREN keyword_body END\n                         | KEYWORD_KEYWORD ID LPAREN RPAREN keyword_body ENDkeyword_body : keyword_statementskeyword_statements : keyword_statement keyword_statements\n                         | keyword_statementkeyword_statement : assignment\n                        | keyword_call\n                        | return_statementassignment : ID EQUALS expression\n                 | ID EQUALS keyword_callexpression : NUMBER\n                  | STRING\n                  | PLACEHOLDER\n                  | IDparam_list : param\n                  | param COMMA param_listparam : ID\n             | ID EQUALS STRING\n             | ID EQUALS NUMBER\n             | ID EQUALS IDkeyword_call : LBRACKET ID RBRACKET COMMA parameter_list\n                   | LBRACKET ID RBRACKETparameter_list : parameter_item\n                     | parameter_item COMMA parameter_listparameter_item : ID COLON expressionreturn_statement : RETURN expression'
    
_lr_action_items = {'NAME_KEYWORD':([0,3,20,21,22,23,24,25,26,27,],[4,4,-4,-5,-6,-7,-8,-9,-10,-11,]),'DESCRIPTION_KEYWORD':([0,3,20,21,22,23,24,25,26,27,],[5,5,-4,-5,-6,-7,-8,-9,-10,-11,]),'AUTHOR_KEYWORD':([0,3,20,21,22,23,24,25,26,27,],[6,6,-4,-5,-6,-7,-8,-9,-10,-11,]),'DATE_KEYWORD':([0,3,20,21,22,23,24,25,26,27,],[7,7,-4,-5,-6,-7,-8,-9,-10,-11,]),'IMPORT_KEYWORD':([0,3,20,21,22,23,24,25,26,27,],[8,8,-4,-5,-6,-7,-8,-9,-10,-11,]),'$end':([1,9,10,18,50,59,],[0,-1,-13,-12,-15,-14,]),'KEYWORD_KEYWORD':([2,3,10,12,20,21,22,23,24,25,26,27,50,59,],[11,-3,11,-2,-4,-5,-6,-7,-8,-9,-10,-11,-15,-14,]),'COLON':([4,5,6,7,8,64,],[13,14,15,16,17,67,]),'ID':([11,13,14,15,28,31,33,34,38,39,40,41,42,43,44,49,53,54,55,56,57,60,61,62,63,65,66,67,68,69,70,],[19,21,23,25,29,35,45,35,35,-19,-20,-21,52,57,29,57,-39,-24,-25,-26,-27,-22,-23,-35,64,-34,-36,57,64,-38,-37,]),'STRING':([13,14,15,17,33,43,49,67,],[20,22,24,27,46,55,55,55,]),'DATE':([16,],[26,]),'LPAREN':([19,],[28,]),'RPAREN':([28,29,30,32,45,46,47,58,],[31,-30,34,-28,-33,-31,-32,-29,]),'COMMA':([29,32,45,46,47,54,55,56,57,62,66,69,],[-30,44,-33,-31,-32,-24,-25,-26,-27,63,68,-38,]),'EQUALS':([29,35,],[33,49,]),'LBRACKET':([31,34,38,39,40,41,49,53,54,55,56,57,60,61,62,65,66,69,70,],[42,42,42,-19,-20,-21,42,-39,-24,-25,-26,-27,-22,-23,-35,-34,-36,-38,-37,]),'RETURN':([31,34,38,39,40,41,53,54,55,56,57,60,61,62,65,66,69,70,],[43,43,43,-19,-20,-21,-39,-24,-25,-26,-27,-22,-23,-35,-34,-36,-38,-37,]),'NUMBER':([33,43,49,67,],[47,54,54,54,]),'END':([36,37,38,39,40,41,48,51,53,54,55,56,57,60,61,62,65,66,69,70,],[50,-16,-18,-19,-20,-21,59,-17,-39,-24,-25,-26,-27,-22,-23,-35,-34,-36,-38,-37,]),'PLACEHOLDER':([43,49,67,],[56,56,56,]),'RBRACKET':([52,],[62,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'metadata':([0,3,],[2,12,]),'metadata_item':([0,3,],[3,3,]),'keyword_definitions':([2,10,],[9,18,]),'keyword_definition':([2,10,],[10,10,]),'param_list':([28,44,],[30,58,]),'param':([28,44,],[32,32,]),'keyword_body':([31,34,],[36,48,]),'keyword_statements':([31,34,38,],[37,37,51,]),'keyword_statement':([31,34,38,],[38,38,38,]),'assignment':([31,34,38,],[39,39,39,]),'keyword_call':([31,34,38,49,],[40,40,40,61,]),'return_statement':([31,34,38,],[41,41,41,]),'expression':([43,49,67,],[53,60,69,]),'parameter_list':([63,68,],[65,70,]),'parameter_item':([63,68,],[66,66,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> metadata keyword_definitions','start',2,'p_start','parser.py',11),
  ('metadata -> metadata_item metadata','metadata',2,'p_metadata','parser.py',15),
  ('metadata -> metadata_item','metadata',1,'p_metadata','parser.py',16),
  ('metadata_item -> NAME_KEYWORD COLON STRING','metadata_item',3,'p_metadata_item','parser.py',23),
  ('metadata_item -> NAME_KEYWORD COLON ID','metadata_item',3,'p_metadata_item','parser.py',24),
  ('metadata_item -> DESCRIPTION_KEYWORD COLON STRING','metadata_item',3,'p_metadata_item','parser.py',25),
  ('metadata_item -> DESCRIPTION_KEYWORD COLON ID','metadata_item',3,'p_metadata_item','parser.py',26),
  ('metadata_item -> AUTHOR_KEYWORD COLON STRING','metadata_item',3,'p_metadata_item','parser.py',27),
  ('metadata_item -> AUTHOR_KEYWORD COLON ID','metadata_item',3,'p_metadata_item','parser.py',28),
  ('metadata_item -> DATE_KEYWORD COLON DATE','metadata_item',3,'p_metadata_item','parser.py',29),
  ('metadata_item -> IMPORT_KEYWORD COLON STRING','metadata_item',3,'p_metadata_item','parser.py',30),
  ('keyword_definitions -> keyword_definition keyword_definitions','keyword_definitions',2,'p_keyword_definitions','parser.py',34),
  ('keyword_definitions -> keyword_definition','keyword_definitions',1,'p_keyword_definitions','parser.py',35),
  ('keyword_definition -> KEYWORD_KEYWORD ID LPAREN param_list RPAREN keyword_body END','keyword_definition',7,'p_keyword_definition','parser.py',42),
  ('keyword_definition -> KEYWORD_KEYWORD ID LPAREN RPAREN keyword_body END','keyword_definition',6,'p_keyword_definition','parser.py',43),
  ('keyword_body -> keyword_statements','keyword_body',1,'p_keyword_body','parser.py',50),
  ('keyword_statements -> keyword_statement keyword_statements','keyword_statements',2,'p_keyword_statements','parser.py',54),
  ('keyword_statements -> keyword_statement','keyword_statements',1,'p_keyword_statements','parser.py',55),
  ('keyword_statement -> assignment','keyword_statement',1,'p_keyword_statement','parser.py',62),
  ('keyword_statement -> keyword_call','keyword_statement',1,'p_keyword_statement','parser.py',63),
  ('keyword_statement -> return_statement','keyword_statement',1,'p_keyword_statement','parser.py',64),
  ('assignment -> ID EQUALS expression','assignment',3,'p_assignment','parser.py',68),
  ('assignment -> ID EQUALS keyword_call','assignment',3,'p_assignment','parser.py',69),
  ('expression -> NUMBER','expression',1,'p_expression','parser.py',76),
  ('expression -> STRING','expression',1,'p_expression','parser.py',77),
  ('expression -> PLACEHOLDER','expression',1,'p_expression','parser.py',78),
  ('expression -> ID','expression',1,'p_expression','parser.py',79),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',83),
  ('param_list -> param COMMA param_list','param_list',3,'p_param_list','parser.py',84),
  ('param -> ID','param',1,'p_param','parser.py',91),
  ('param -> ID EQUALS STRING','param',3,'p_param','parser.py',92),
  ('param -> ID EQUALS NUMBER','param',3,'p_param','parser.py',93),
  ('param -> ID EQUALS ID','param',3,'p_param','parser.py',94),
  ('keyword_call -> LBRACKET ID RBRACKET COMMA parameter_list','keyword_call',5,'p_keyword_call','parser.py',103),
  ('keyword_call -> LBRACKET ID RBRACKET','keyword_call',3,'p_keyword_call','parser.py',104),
  ('parameter_list -> parameter_item','parameter_list',1,'p_parameter_list','parser.py',111),
  ('parameter_list -> parameter_item COMMA parameter_list','parameter_list',3,'p_parameter_list','parser.py',112),
  ('parameter_item -> ID COLON expression','parameter_item',3,'p_parameter_item','parser.py',119),
  ('return_statement -> RETURN expression','return_statement',2,'p_return_statement','parser.py',123),
]
