# MAFw steering file generated on 2024-12-22 20:05:07.399821

# uncomment the line below and insert the processors you want to run from the available processor list
processors_to_run = ["MissingMethodProcessor", "MissingSuperProcessor"]

# customise the name of the analysis
analysis_name = "mafw analysis"
analysis_description = """Summing up numbers"""
available_processors = ["MissingMethodProcessor", "MissingSuperProcessor", "AccumulatorProcessor", "GaussAdder", "ModifyLoopProcessor", "FillFileTableProcessor", "CountStandardTables", "FindNPrimeNumber", "FindPrimeNumberInRange"]

[DBConfiguration]
URL = "sqlite:///:memory:" # Change the protocol depending on the DB type. Update this file to the path of your DB.

[DBConfiguration.pragmas] # Leave these default values, unless you know what you are doing!
journal_mode = "wal"
cache_size = -64000
foreign_keys = 1
synchronous = 0


[MissingMethodProcessor]

[MissingSuperProcessor]

[AccumulatorProcessor] # A processor to calculate the sum of the first n values via a looping approach.
last_value = 100 # Last value of the series

[GaussAdder] # A processor to calculate the sum of the first n values via the so called *Gauss formula*.
last_value = 100 # Last value of the series.

[ModifyLoopProcessor] # Example processor demonstrating how it is possible to change the looping structure.
item_to_abort = 65 # Item to abort
items_to_skip = [12, 16, 25] # List of items to be skipped.
total_item = 100 # Total item in the loop.

[FillFileTableProcessor] # Processor to fill a table with the content of a directory
root_folder = 'C:\Users\bulghao\PycharmProjects\mafw\tests' # The root folder for the file listing

[CountStandardTables] # A processor to count the number of standard tables
n_tables = -1 # The number of standard tables

[FindNPrimeNumber] # An example of Processor to search for N prime numbers starting from a given starting integer.
prime_num_to_find = 100 # How many prime number we have to find
start_from = 50 # From which number to start the search

[FindPrimeNumberInRange] # An example processor to find prime numbers in the defined interval from ``start_from`` to ``stop_at``.
start_from = 50 # From which number to start the search
stop_at = 100 # At which number to stop the search

[UserInterface] # Specify UI options
interface = "rich" # Default "rich", backup "console"
