name: Create Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      release_notes:
        description: 'Release notes'
        required: false
        default: ''

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install hatch
    
    - name: Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Get current version
      id: current_version
      run: |
        CURRENT_VERSION=$(hatch version)
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"
    
    - name: Bump version
      id: bump_version
      run: |
        hatch version ${{ github.event.inputs.version_type }}
        NEW_VERSION=$(hatch version)
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"
    
    - name: Generate changelog
      id: changelog
      run: |
        # Simple changelog generation
        echo "## What's Changed" > changelog.md
        echo "" >> changelog.md
        
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          echo "### Commits since $LAST_TAG:" >> changelog.md
          git log --oneline --pretty="* %s" $LAST_TAG..HEAD >> changelog.md
        else
          echo "### Initial release" >> changelog.md
          git log --oneline --pretty="* %s" >> changelog.md
        fi
        
        echo "" >> changelog.md
        
        # Add custom release notes if provided
        if [ -n "${{ github.event.inputs.release_notes }}" ]; then
          echo "### Release Notes" >> changelog.md
          echo "${{ github.event.inputs.release_notes }}" >> changelog.md
        fi
        
        # Output changelog for use in release
        cat changelog.md
    
    - name: Commit version bump
      run: |
        git add pyproject.toml
        git commit -m "Bump version to ${{ steps.bump_version.outputs.new_version }}"
        git push
    
    - name: Create tag
      run: |
        git tag -a "v${{ steps.bump_version.outputs.new_version }}" -m "Release version ${{ steps.bump_version.outputs.new_version }}"
        git push origin "v${{ steps.bump_version.outputs.new_version }}"
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.bump_version.outputs.new_version }}
        release_name: Release v${{ steps.bump_version.outputs.new_version }}
        body_path: changelog.md
        draft: false
        prerelease: false