import os
import socket
import re
import shutil
import sys
import shlex

import pre_commit.commands.install_uninstall
import pre_commit.languages.docker
from pre_commit.commands.install_uninstall import (
    _hook_paths,
    TEMPLATE_START,
    TEMPLATE_END,
    CURRENT_HASH as PRIOR_CURRENT_HASH,
    PRIOR_HASHES,
)
from pre_commit.util import make_executable
from pre_commit import output

CURRENT_HASH = "6c68fe0b34014735a74ecb7a53955760"

HOOK_TMPL = f"""\
#!/usr/bin/env bash
# File generated by pre-commit-docker: https://pypi.org/project/pre-commit-docker/
# ID: {CURRENT_HASH}

# start templated
INSTALL_PYTHON=''
ARGS=(hook-impl)
# end templated

HERE="$(cd "$(dirname "$0")" && pwd)"
ARGS+=(--hook-dir "$HERE" -- "$@")

if [ -x "$INSTALL_PYTHON" ]; then
    exec "$INSTALL_PYTHON" -mpre_commit_docker "${{ARGS[@]}}"
elif command -v pre-commit-docker > /dev/null; then
    exec pre-commit-docker "${{ARGS[@]}}"
else
    echo '`pre-commit-docker` not found.  Did you forget to activate your virtualenv?' 1>&2
    exit 1
fi
"""


def is_our_script(filename: str) -> bool:
    if not os.path.exists(filename):  # pragma: win32 no cover (symlink)
        return False
    with open(filename, "rb") as f:
        contents = f.read()
    return any(
        h in contents
        for h in (CURRENT_HASH.encode(), PRIOR_CURRENT_HASH) + PRIOR_HASHES
    )


def _install_hook_script(
    config_file: str,
    hook_type: str,
    overwrite: bool = False,
    skip_on_missing_config: bool = False,
    git_dir: str | None = None,
) -> None:
    hook_path, legacy_path = _hook_paths(hook_type, git_dir=git_dir)

    os.makedirs(os.path.dirname(hook_path), exist_ok=True)

    # If we have an existing hook, move it to pre-commit.legacy
    if os.path.lexists(hook_path) and not is_our_script(hook_path):
        shutil.move(hook_path, legacy_path)

    # If we specify overwrite, we simply delete the legacy file
    if overwrite and os.path.exists(legacy_path):
        os.remove(legacy_path)
    elif os.path.exists(legacy_path):
        output.write_line(
            f"Running in migration mode with existing hooks at {legacy_path}\n"
            f"Use -f to use only pre-commit.",
        )

    args = ["hook-impl", f"--config={config_file}", f"--hook-type={hook_type}"]
    if skip_on_missing_config:
        args.append("--skip-on-missing-config")

    with open(hook_path, "w") as hook_file:
        contents = HOOK_TMPL
        before, rest = contents.split(TEMPLATE_START)
        _, after = rest.split(TEMPLATE_END)

        # on windows always use `/bin/sh` since `bash` might not be on PATH
        # though we use bash-specific features `sh` on windows is actually
        # bash in "POSIXLY_CORRECT" mode which still supports the features we
        # use: subshells / arrays
        if sys.platform == "win32":  # pragma: win32 cover
            hook_file.write("#!/bin/sh\n")

        hook_file.write(before + TEMPLATE_START)
        hook_file.write(f"INSTALL_PYTHON={shlex.quote(sys.executable)}\n")
        args_s = shlex.join(args)
        hook_file.write(f"ARGS=({args_s})\n")
        hook_file.write(TEMPLATE_END + after)
    make_executable(hook_path)

    output.write_line(f"pre-commit installed at {hook_path}")


pre_commit.commands.install_uninstall._install_hook_script = _install_hook_script


def _is_in_docker() -> bool:
    try:
        with open("/proc/1/cgroup", "rb") as f:
            if b"docker" in f.read():
                return True
    except FileNotFoundError:
        pass
    return os.path.exists("/.dockerenv")


pre_commit.languages.docker._is_in_docker = _is_in_docker


def _get_container_id() -> str:
    with open("/proc/1/cgroup", "rb") as f:
        for line in f.readlines():
            if line.split(b":")[1] == b"cpuset":
                return os.path.basename(line.split(b":")[2]).strip().decode()
    hostname = socket.gethostname()
    if re.match(r"^[0-9a-f]{12}$", hostname):
        return hostname
    raise RuntimeError("Failed to find the container ID in /proc/1/cgroup.")


pre_commit.languages.docker._get_container_id = _get_container_id


def main() -> int:
    from pre_commit.main import main

    return main()


if __name__ == "__main__":
    sys.exit(main())
