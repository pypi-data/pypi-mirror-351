#:kivy 1.11.1
#:import Factory kivy.factory.Factory
#:import tr carveracontroller.__main__.tr
#:include addons/tooltips/Tooltips.kv
#:import tr __main__.tr
#:include addons/probing/ProbingPopup.kv

<Label>:
    font_name: 'ARIALUNI'

<TextInput>:
    font_name: 'ARIALUNI'
    write_tab: False

<WideProgressBar@BoxLayout>:
    value: 0
    color: 52/255, 166/255, 208/255, 1
    canvas:
        Color:
            rgba: 50/255, 50/255, 50/255, 1
        Rectangle:
            pos: self.pos
            size: self.width - dp(5) if self.width > 0 else 0, self.height if self.width > 0 else 0
        Color:
            rgba: self.color
        Rectangle:
            pos: self.pos
            size: (self.width - dp(5)) * (self.value / 100.0) + 5 if self.width > 0 else 0, self.height if self.width > 0 else 0

<MCQCheckBox@CheckBox>:
    color: 255, 255, 255, 1
    size_hint: 0.15, 1

<MCQLabel@ButtonBehavior+Label>:
    text_size: self.size
    valign: 'center'
    font_size: '13sp'

<CNCWorkspace>:
    size_hint_x: None
    size_hint_y: None
    width: self.parent.width if self.parent.width > 0 and self.parent.height / self.parent.width > 0.7 else self.parent.height / 0.7
    height: self.parent.height if self.parent.width > 0 and self.parent.height / self.parent.width < 0.7 else self.parent.width * 0.7

<IconButton>:
    width: '50dp'
    icon: ''
    icon_size: 32
    text: ''
    size_hint_x: None
    notify: False
    canvas.before:
        Color:
            rgba: 80/255, 80/255, 80/255, 1
        Rectangle:
            pos: self.pos
            size: self.size
    Label:
        text: root.text if root.text else ''
        canvas.before:
            Color:
                rgba: (110/255, 110/255, 110/255, 1) if root.disabled else (250/255, 250/255, 250/255, 1)
            Rectangle:
                source: root.icon
                pos: self.center_x - dp(root.icon_size / 2), self.center_y - dp(root.icon_size / 2)
                size: dp(root.icon_size) if root.icon else 0, dp(root.icon_size) if root.icon else 0
            Color:
                rgba: 52/255, 152/255, 219/255, 1
            Ellipse:
                pos: self.center_x + dp(12), self.center_y + dp(10)
                size: dp(10) if root.notify else 0, dp(10) if root.notify else 0

<TransparentButton>:
    height: '32dp'
    width: '60dp'
    icon_size: 24
    icon: ''
    text: ''
    min_icon: ''
    min_icon_size: 12
    min_active: True
    active: False
    size_hint_x: None
    background_color: 0, 0, 0, 0
    Label:
        text: root.text if root.text else ''
        color: (0/255, 255/255, 255/255, 1) if (root.active and not root.disabled) else ((110/255, 110/255, 110/255, 1) if root.disabled else (250/255, 250/255, 250/255, 1))
        canvas.before:
            Color:
                rgba: (0/255, 255/255, 255/255, 1) if (root.active and not root.disabled) else ((110/255, 110/255, 110/255, 1) if root.disabled else (250/255, 250/255, 250/255, 1))
            Rectangle:
                source: root.icon
                pos: self.center_x - dp(root.icon_size / 2), self.center_y - dp(root.icon_size / 2)
                size: dp(root.icon_size) if root.icon else 0, dp(root.icon_size) if root.icon else 0
            Color:
                rgba: (250/255, 250/255, 250/255, 1) if root.min_active else (60/255, 60/255, 60/255, 1)
            Rectangle:
                source: root.min_icon if root.min_icon and not root.disabled else ''
                pos: self.x + self.width - dp(root.min_icon_size - 5), self.y + dp(root.min_icon_size / 2)
                size: dp(root.min_icon_size) if root.min_icon and not root.disabled else 0, dp(root.min_icon_size) if root.min_icon and not root.disabled else 0

<TransparentGrayButton>:
    height: '32dp'
    width: '60dp'
    icon_size: 24
    icon: ''
    active: True
    size_hint_x: None
    background_color: 0, 0, 0, 0
    Label:
        canvas.before:
            Color:
                rgba: (250/255, 250/255, 250/255, 1) if root.active and not root.disabled else (100/255, 100/255, 100/255, 1)
            Rectangle:
                source: root.icon
                pos: self.center_x - dp(root.icon_size / 2), self.center_y - dp(root.icon_size / 2)
                size: dp(root.icon_size) if root.icon else 0, dp(root.icon_size) if root.icon else 0

<WiFiButton>:
    orientation: 'horizontal'
    size_hint_y: None
    height: '35dp'
    color: 240/255, 240/255, 240/255, 1
    canvas.before:
        Color:
            rgba: 80/255, 80/255, 80/255, 1
        Rectangle:
            pos: self.pos
            size: self.size
    Label:
        size_hint_x: None
        width: '30dp'
        canvas.before:
            Color:
                rgba: root.color
            Rectangle:
                source: 'data/connected.png'
                pos: self.center_x - dp(24), self.center_y - dp(24)
                size: dp(48) if root.connected else 0, dp(48) if root.connected else 0
    Label:
        text: root.ssid
        text_size: self.size
        halign: 'left'
        valign: 'middle'
        color: root.color
    Label:
        size_hint_x: None
        width: '30dp'
        canvas.before:
            Color:
                rgba: root.color
            Rectangle:
                source: 'data/encrypted.png'
                pos: self.center_x - dp(16), self.center_y - dp(16)
                size: dp(32) if root.encrypted else 0, dp(32) if root.encrypted else 0
    Label:
        size_hint_x: None
        width: '40dp'
        canvas.before:
            Color:
                rgba: root.color
            Rectangle:
                source: 'data/WIFI.png'
                pos: self.center_x - dp(16), self.center_y - dp(16)
                size: dp(32) if root.strength < 1000 else 0, dp(32) if root.strength < 1000 else 0

<ButtonLabel@ButtonBehavior+Label>:
    valign: 'center'

<Row@SelectableLabel>:
    canvas.before:
        Color:
            rgba: (80/255, 80/255, 80/255, 1) if self.selected else (50/255, 50/255, 50/255, 1)
        Rectangle:
            pos: self.pos
            size: self.size
    text_size: self.size
    halign: 'left'
    shorten: True

<DataRow@SelectableBoxLayout>:
    canvas.before:
        Color:
            rgba: (76/255, 76/255, 76/255, 1) if self.selected else (56/255, 56/255, 56/255, 1) if self.rv_key is not None and self.rv_key % 2 == 0 else (48/255, 48/255, 48/255, 1)
        Rectangle:
            pos: self.pos
            size: self.size
    pos: self.pos
    size: self.size
    rv_key: 0
    filename: 'filename'
    filesize: ''
    filedate: ''
    is_dir: False
    Label:
        size_hint_x: None
        width: '30dp'
        background_color: 0,0,0,0
        text: ''
        canvas.before:
            Color:
                rgba: (250/255, 250/255, 250/255, 1)
            Rectangle:
                source: 'data/folder-32.png' if root.is_dir else 'data/file-32.png'
                pos: self.center_x - dp(10), self.center_y - dp(10)
                size: dp(20), dp(20)
    Label:
        id: id_label1
        text_size: self.size
        text: root.filename
        halign: 'left'
        valign: 'middle'
    Label:
        id: id_label2
        text_size: self.size
        text: root.filedate
        halign: 'left'
        size_hint_x: None
        width: '150dp'
        valign: 'middle'
    Label:
        id: id_label3
        text_size: self.size
        text: root.filesize
        halign: 'right'
        size_hint_x: None
        width: '100dp'
        valign: 'middle'

<GridBoxLayout@BoxLayout>:
    orientation: 'vertical'
    padding: '5dp'

<RoundButton@Button>:
    background_color: 0,0,0,0  # the last zero is the critical on, make invisible
    canvas.before:
        Color:
            rgba: (88/255,88/255,88/255,1) if self.state=='normal' else (50/255,164/255,206/255,1)  # visual feedback of press
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: [dp(25),]


<SmallRoundButton@Button>:
    background_color: 0,0,0,0  # the last zero is the critical on, make invisible
    height: '35dp'
    canvas.before:
        Color:
            rgba: (88/255,88/255,88/255,1) if self.state=='normal' else (50/255,164/255,206/255,1)  # visual feedback of press
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: [dp(10),]

<DropDownHint>:
    size_hint_y: None
    height: '20dp'
    font_size: '13sp'
    text_size: self.size
    valign: 'middle'
    halign: 'center'
    color: 150/255, 150/255, 150/255, 1

<DropDownSplitter>:
    size_hint_y: None
    height: '20dp'
    font_size: '13sp'
    text_size: self.size
    valign: 'middle'
    color: 150/255, 150/255, 150/255, 1
    canvas.before:
        Color:
            rgba: 60/255, 60/255, 60/255, 1
        Rectangle:
            pos: self.pos
            size: self.size

<StatusContent@BoxLayout>:
    size_hint_y: None
    height: '20dp'
    orientation: 'horizontal'
    title: ''
    value: ''
    color: 220 / 255, 220 / 255, 220 / 255, 1
    default_color: 220 / 255, 220 / 255, 220 / 255, 1
    Label:
        height: '20dp'
        font_size: '13sp'
        text_size: self.size
        valign: 'middle'
        halign: 'right'
        text: root.title
    Label:
        height: '20dp'
        font_size: '13sp'
        text_size: self.size
        valign: 'middle'
        halign: 'right'
        text: root.value
        color: root.color
    Widget:
        size_hint_x: None
        width: '5dp'

<JogSpeedDropDown>:
    on_select: app.root.ids.jog_speed_btn.text = tr._('Jog Speed:') + args[1]
    Button:
        text: tr._('Match Feed')
        size_hint_y: None
        height: '40dp'
        on_release:
            app.root.jog_speed = 0
            root.select(self.text)

    Button:
        text: tr._('2000 mm/min')
        size_hint_y: None
        height: '40dp'
        on_release:
            app.root.jog_speed = 2000
            root.select(self.text)
    Button:
        text: tr._('1200 mm/min')
        size_hint_y: None
        height: '40dp'
        on_release:
            app.root.jog_speed = 1200
            root.select(self.text)
    Button:
        text: tr._('600 mm/min')
        size_hint_y: None
        height: '40dp'
        on_release:
            app.root.jog_speed = 600
            root.select(self.text)
    Button:
        text: tr._('300 mm/min')
        size_hint_y: None
        height: '40dp'
        on_release:
            app.root.jog_speed = 300
            root.select(self.text)
    Button:
        text: tr._('100 mm/min')
        size_hint_y: None
        height: '40dp'
        on_release:
            app.root.jog_speed = 100
            root.select(self.text)

<XDropDown>:
    canvas.before:
        Color:
            rgba: 60/255, 60/255, 60/255, 1
        Rectangle:
            pos: self.pos
            size: self.size
    DropDownHint:
        text: tr._('Set X Origin')
    Button:
        text: tr._('X = 0')
        size_hint_y: None
        height: '48dp'
        font_size: '20sp'
        disabled: app.state != 'Idle'
        on_release:
            root.select('Third Item')
            app.root.controller.wcsSet(0, None, None, None)
    Button:
        text: tr._('Set X')
        size_hint_y: None
        height: '48dp'
        font_size: '20sp'
        disabled: app.state != 'Idle'
        on_release:
            root.select('Third Item')
            app.root.coord_popup.setx_popup.open()

<YDropDown>:
    canvas.before:
        Color:
            rgba: 60/255, 60/255, 60/255, 1
        Rectangle:
            pos: self.pos
            size: self.size
    DropDownHint:
        text: tr._('Set Y Origin')
    Button:
        text: tr._('Y = 0')
        size_hint_y: None
        height: '48dp'
        font_size: '20sp'
        disabled: app.state != 'Idle'
        on_release:
            root.select('Third Item')
            app.root.controller.wcsSet(None, 0, None, None)
    Button:
        text: tr._('Set Y')
        size_hint_y: None
        height: '48dp'
        font_size: '20sp'
        disabled: app.state != 'Idle'
        on_release:
            root.select('Third Item')
            app.root.coord_popup.sety_popup.open()

<ZDropDown>:
    status_max: status_max
    canvas.before:
        Color:
            rgba: 60/255, 60/255, 60/255, 1
        Rectangle:
            pos: self.pos
            size: self.size
    DropDownHint:
        text: tr._('Set Z Origin')
    Button:
        text: tr._('Z = 0')
        size_hint_y: None
        height: '48dp'
        font_size: '20sp'
        disabled: app.state != 'Idle'
        on_release:
            root.select('Third Item')
            app.root.controller.wcsSet(None, None, 0, None)
    Button:
        text: tr._('Set Z')
        size_hint_y: None
        height: '48dp'
        font_size: '20sp'
        disabled: app.state != 'Idle'
        on_release:
            root.select('Third Item')
            app.root.coord_popup.setz_popup.open()
    DropDownHint:
        text: tr._('Auto Leveling')
    BoxLayout:
        orientation: 'vertical'
        size_hint_y: None
        height: '23dp'
        padding: '0.5dp'
        canvas.before:
            Color:
                rgba: 80/255, 80/255, 80/255, 1
            Rectangle:
                pos: self.pos
                size: self.size
        StatusContent:
            id: status_max
            title: tr._('max:')
            value: '0.000'
            color: (231/255, 76/255, 60/255, 1) if self.value != '0.000' else self.default_color
    ToolTipButton:
        text: tr._('Clear')
        tooltip_txt: tr._('Clear any existing autolevel offsets. When autolevel offsets are enabled the Z axis dropdown will be blue')
        size_hint_y: None
        height: '48dp'
        font_size: '20sp'
        on_release:
            root.select('Third Item')
            app.root.controller.clearAutoLeveling()


<ADropDown>:
    canvas.before:
        Color:
            rgba: 60/255, 60/255, 60/255, 1
        Rectangle:
            pos: self.pos
            size: self.size
    DropDownHint:
        text: tr._('Set A Origin')
    Button:
        text: tr._('A = 0')
        size_hint_y: None
        height: '48dp'
        font_size: '20sp'
        disabled: app.state != 'Idle'
        on_release:
            root.select('Third Item')
            app.root.controller.wcsSetA(0)
    Button:
        text: tr._('Set A')
        size_hint_y: None
        height: '48dp'
        font_size: '20sp'
        disabled: app.state != 'Idle'
        on_release:
            root.select('Third Item')
            app.root.coord_popup.seta_popup.open()
    ToolTipButton:
        text: tr._('Shrink')
        tooltip_txt: tr._('Reset A Axis value to 0-360 while keeping the offset. Eg 374 becomes 14')
        size_hint_y: None
        height: '48dp'
        font_size: '20sp'
        disabled: app.state != 'Idle'
        on_release:
            root.select('Third Item')
            app.root.controller.shrinkA()
    Button:
        text: tr._('Fast Move')
        size_hint_y: None
        height: '48dp'
        font_size: '20sp'
        disabled: app.state != 'Idle'
        on_release:
            root.select('Third Item')
            app.root.coord_popup.MoveA_popup.open()


<FeedDropDown>:
    scale_slider: scale_slider
    status_scale: status_scale
    status_target: status_target
    disabled: app.state != 'Idle' and app.state != 'Run'
    canvas.before:
        Color:
            rgba: 60/255, 60/255, 60/255, 1
        Rectangle:
            pos: self.pos
            size: self.size
    DropDownHint:
        text: tr._('Feed Status')
    BoxLayout:
        orientation: 'vertical'
        size_hint_y: None
        height: '40dp'
        padding: '0.5dp'
        canvas.before:
            Color:
                rgba: 80/255, 80/255, 80/255, 1
            Rectangle:
                pos: self.pos
                size: self.size
        StatusContent:
            id: status_scale
            title: tr._('Scale:')
            value: '100%'
            color: (231/255, 76/255, 60/255, 1) if self.value != '100%' else self.default_color
        StatusContent:
            id: status_target
            title: tr._('Target:')
            value: '1000'

    DropDownHint:
        text: tr._('Speed Scaling')
    BoxLayout:
        orientation: 'horizontal'
        size_hint_y: None
        height: '40dp'
        padding: '0.5dp'
        Slider:
            canvas.before:
                Color:
                    rgba: 80/255, 80/255, 80/255, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            id: scale_slider
            min: 10
            max: 300
            value: 100
            step: 10
            set_flag: False
            on_value:
                if self.set_flag: self.set_flag = False
                else: app.root.update_control('feedrate_scale', self.value)
    BoxLayout:
        orientation: 'horizontal'
        size_hint_y: None
        height: '40dp'
        Button:
            text: '-'
            font_size: '25sp'
            on_release:
                if root.scale_slider.value > 10: root.scale_slider.value = root.scale_slider.value - 10
        Button:
            text: '+'
            font_size: '25sp'
            on_release:
                if root.scale_slider.value < 300: root.scale_slider.value = root.scale_slider.value + 10
    Button:
        text: tr._('Reset')
        size_hint_y: None
        height: '40dp'
        font_size: '20sp'
        on_release:
            root.scale_slider.value = 100
            root.select('Third Item')

<SpindleDropDown>:
    vacuum_switch: vacuum_switch
    scale_slider: scale_slider
    status_scale: status_scale
    status_target: status_target
    status_temp: status_temp
    disabled: app.state != 'Idle' and app.state != 'Run'
    canvas.before:
        Color:
            rgba: 60/255, 60/255, 60/255, 1
        Rectangle:
            pos: self.pos
            size: self.size
    DropDownHint:
        text: tr._('Spindle Status')
    BoxLayout:
        orientation: 'vertical'
        size_hint_y: None
        height: '60dp'
        padding: '0.5dp'
        canvas.before:
            Color:
                rgba: 80/255, 80/255, 80/255, 1
            Rectangle:
                pos: self.pos
                size: self.size
        StatusContent:
            id: status_scale
            title: tr._('Scale:')
            value: '100 %'
        StatusContent:
            id: status_target
            title: tr._('Target:')
            value: '1000'
        StatusContent:
            id: status_temp
            title: tr._('Temp:')
            value: '10 C'
    DropDownHint:
        text: tr._('Auto Vacuum')
    BoxLayout:
        padding: '0.5dp'
        size_hint_y: None
        height: '40dp'
        disabled: app.model == 'CA1'
        Switch:
            id: vacuum_switch
            canvas.before:
                Color:
                    rgba: 50/255, 50/255, 50/255, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            set_flag: False
            on_active:
                if self.set_flag: self.set_flag = False
                else: app.root.update_control('vacuum_mode', self.active)
    DropDownHint:
        text: tr._('RPM Scaling')
    BoxLayout:
        padding: '0.5dp'
        size_hint_y: None
        height: '40dp'
        Slider:
            id: scale_slider
            min: 10
            max: 300
            value: 100
            step: 10
            set_flag: False
            canvas.before:
                Color:
                    rgba: 80/255, 80/255, 80/255, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            on_value:
                if self.set_flag: self.set_flag = False
                else: app.root.update_control('spindle_scale', self.value)
    BoxLayout:
        orientation: 'horizontal'
        size_hint_y: None
        height: '40dp'
        Button:
            text: '-'
            font_size: '25sp'
            on_release:
                if root.scale_slider.value > 10: root.scale_slider.value = root.scale_slider.value - 10
        Button:
            text: '+'
            font_size: '25sp'
            on_release:
                if root.scale_slider.value < 300: root.scale_slider.value = root.scale_slider.value + 10
    Button:
        text: tr._('Reset')
        size_hint_y: None
        height: '40dp'
        font_size: '20sp'
        on_release:
            root.scale_slider.value = 100
            root.select('Third Item')

<ToolDropDown>:
    set_dropdown: set_dropdown
    change_dropdown: change_dropdown
    status_tlo: status_tlo
    status_wpvoltage: status_wpvoltage
    canvas.before:
        Color:
            rgba: 60/255, 60/255, 60/255, 1
        Rectangle:
            pos: self.pos
            size: self.size
    disabled: app.state != 'Idle' or app.lasering
    DropDownHint:
        text: tr._('Tool Status')
    BoxLayout:
        orientation: 'vertical'
        size_hint_y: None
        height: '40dp'
        padding: '0.5dp'
        canvas.before:
            Color:
                rgba: 80/255, 80/255, 80/255, 1
            Rectangle:
                pos: self.pos
                size: self.size
        StatusContent:
            id: status_tlo
            title: tr._('TLO:  ')
            value: '0.000'
        StatusContent:
            id: status_wpvoltage
            title: tr._('WP:  ')
            value: '0.00v'
            disabled: app.model == 'CA1'

    Spinner:
        size_hint_y: None
        height: '40dp'
        id: change_dropdown
        text: tr._('Change...')
        values: 'Probe', 'Tool: 1', 'Tool: 2', 'Tool: 3', 'Tool: 4', 'Tool: 5', 'Tool: 6', 'Custom'
        on_text:
            if self.text == 'Custom': app.root.coord_popup.change_tool_popup.open()
            if self.text != tr._("Change..."): app.root.controller.changeToolCommand(self.text[-1])
            if self.text != tr._("Change..."): self.text = tr._('Change...')
            root.select('Third Item')
    Button:
        text: tr._('Calibrate')
        size_hint_y: None
        height: '40dp'
        on_release:
            root.select('Third Item')
            app.root.controller.calibrateToolCommand()
    Button:
        text: tr._('Drop')
        size_hint_y: None
        height: '40dp' if app.model != 'CA1' else '0dp'
        opacity: 1 if app.model != 'CA1' else 0
        on_release:
            root.select('Third Item')
            app.root.controller.dropToolCommand()
    Spinner:
        size_hint_y: None
        height: '40dp'
        id: set_dropdown
        text: tr._('Set...')
        values: 'Empty', 'Probe', 'Tool: 1', 'Tool: 2', 'Tool: 3', 'Tool: 4', 'Tool: 5', 'Tool: 6', 'Custom'
        on_text:
            if self.text == 'Custom': app.root.coord_popup.settool_popup.open()
            if self.text != tr._("Set..."): app.root.controller.setToolCommand(self.text[-1])
            if self.text != tr._("Set..."): self.text = tr._('Set...')
            root.select('Third Item')
    Button:
        text: tr._('Clamp')
        size_hint_y: None
        height: '40dp' if app.model != 'CA1' else '0dp'
        opacity: 1 if app.model != 'CA1' else 0
        on_release:
            root.select('Third Item')
            app.root.controller.clampToolCommand()
    Button:
        text: tr._('Unclamp')
        size_hint_y: None
        height: '40dp' if app.model != 'CA1' else '0dp'
        opacity: 1 if app.model != 'CA1' else 0
        on_release:
            root.select('Third Item')
            app.root.controller.unclampToolCommand()

<LaserDropDown>:
    switch: switch
    status_scale: status_scale
    test_switch: test_switch
    scale_slider: scale_slider
    canvas.before:
        Color:
            rgba: 60/255, 60/255, 60/255, 1
        Rectangle:
            pos: self.pos
            size: self.size
    DropDownHint:
        text: tr._('Laser Status')
    BoxLayout:
        orientation: 'vertical'
        size_hint_y: None
        height: '23dp'
        padding: '0.5dp'
        canvas.before:
            Color:
                rgba: 80/255, 80/255, 80/255, 1
            Rectangle:
                pos: self.pos
                size: self.size
        StatusContent:
            id: status_scale
            title: tr._('scale:')
            value: '100 %'
    DropDownHint:
        text: tr._('Enable Laser')
    BoxLayout:
        padding: '0.5dp'
        size_hint_y: None
        height: '40dp'
        disabled: app.state != 'Idle'
        Switch:
            id: switch
            canvas.before:
                Color:
                    rgba: 50/255, 50/255, 50/255, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            set_flag: False
            on_active:
                if self.set_flag: self.set_flag = False
                else: app.root.update_control('laser_mode', self.active)
    BoxLayout:
        id: laser_control
        orientation: 'vertical'
        size_hint_y: None
        height: '200dp'
        DropDownHint:
            text: tr._('Laser Test')
        BoxLayout:
            padding: '0.5dp'
            size_hint_y: None
            height: '40dp'
            disabled: (not app.lasering) or (app.state != 'Idle')
            Switch:
                id: test_switch
                canvas.before:
                    Color:
                        rgba: 50/255, 50/255, 50/255, 1
                    Rectangle:
                        pos: self.pos
                        size: self.size
                set_flag: False
                on_active:
                    if self.set_flag: self.set_flag = False
                    else: app.root.update_control('laser_test', self.active)
        DropDownHint:
            text: tr._('Power Scaling')
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: None
            height: '40dp'
            padding: '0.5dp'
            disabled: (not app.lasering) or (app.state != 'Idle' and app.state != 'Run')
            Slider:
                id: scale_slider
                canvas.before:
                    Color:
                        rgba: 80/255, 80/255, 80/255, 1
                    Rectangle:
                        pos: self.pos
                        size: self.size
                min: 10
                max: 100
                value: 100
                step: 10
                set_flag: False
                on_value:
                    if self.set_flag: self.set_flag = False
                    else: app.root.update_control('laser_scale', self.value)
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: None
            height: '40dp'
            disabled: (not app.lasering) or (app.state != 'Idle' and app.state != 'Run')
            Button:
                text: '-'
                font_size: '25sp'
                on_release:
                    if root.scale_slider.value > 10: root.scale_slider.value = root.scale_slider.value - 10
            Button:
                text: '+'
                font_size: '25sp'
                on_release:
                    if root.scale_slider.value <= 90: root.scale_slider.value = root.scale_slider.value + 10
        Button:
            text: tr._('Reset')
            size_hint_y: None
            height: '40dp'
            font_size: '20sp'
            disabled: (not app.lasering) or (app.state != 'Idle' and app.state != 'Run')
            on_release:
                root.scale_slider.value = 100
                root.select('Third Item')

<FuncDropDown>:
    canvas.before:
        Color:
            rgba: 60/255, 60/255, 60/255, 1
        Rectangle:
            pos: self.pos
            size: self.size
    IconButton:
        icon: 'data/file.png'
        icon_size: 24
        small_icon: True
        size_hint_y: None
        height: '40dp'
        tooltip_txt: tr._('Run File View')
        on_release:
            app.root.content.transition.direction = 'right'
            app.root.content.current = 'File'
            root.select('')
    IconButton:
        icon: 'data/move.png'
        icon_size: 24
        small_icon: True
        size_hint_y: None
        tooltip_txt: tr._('Manual Move View')
        height: '50dp'
        on_release:
            app.root.content.transition.direction = 'left'
            app.root.content.current = 'Control'
            root.select('')
    IconButton:
        icon: 'data/diagnose.png'
        icon_size: 24
        small_icon: True
        size_hint_y: None
        disabled: app.state == 'N/A'
        height: '50dp'
        tooltip_txt: tr._('Diagnostics Menu')
        on_release:
            root.select('')
            app.root.diagnose_popup.open()
    IconButton:
        icon: 'data/WIFI.png'
        icon_size: 24
        small_icon: True
        size_hint_y: None
        height: '50dp'
        disabled: app.state != 'Idle'
        tooltip_txt: tr._('Wifi Setup')
        on_release:
            app.root.startLoadWiFi(self)
    IconButton:
        icon: 'data/pairing.png'
        icon_size: 24
        small_icon: True
        size_hint_y: None
        height: '50dp' if app.model != 'CA1' else '0dp'
        opacity: 1 if app.model != 'CA1' else 0
        disabled: app.state != 'Idle'
        tooltip_txt: tr._('Pair Probe')
        on_release:
            app.root.pairing_popup.pairing_note = ''
            app.root.pairing_popup.open()
    IconButton:
        icon: 'data/upgrade.png'
        icon_size: 24
        small_icon: True
        size_hint_y: None
        tooltip_txt: tr._('Update Firmware/Controller')
        notify: (app.fw_has_update or app.ctl_has_update) and app.state != 'N/A'
        disabled: app.state != 'Idle'
        height: '50dp'
        on_release:
            root.select('')
            app.root.open_update_popup()
    IconButton:
        icon: 'data/language.png'
        icon_size: 24
        small_icon: True
        size_hint_y: None
        height: '50dp'
        tooltip_txt: tr._('Language Selection')
        on_release:
            root.select('')
            app.root.language_popup.open()
    IconButton:
        icon: 'data/configure.png'
        icon_size: 24
        small_icon: True
        size_hint_y: None
        height: '50dp'
        tooltip_txt: tr._('Settings')
        on_release:
            root.select('')
            app.root.config_popup.open()
    IconButton:
        icon: 'data/open_iconic_UI/oi--bug.png'
        icon_size: 24
        tooltip_image: 'data/open_iconic_UI/oi--bug.png'
        tooltip_image_size: [100,100]
        tooltip_txt: tr._('Send Bug Report')
        small_icon: True
        size_hint_y: None
        height: '50dp'
        on_release:
            root.select('')
            app.root.send_bug_report()
    IconButton:
        icon: 'addons/probing/data/probe.png'
        icon_size: 35
        small_icon: True
        size_hint_y: None
        # disabled: app.state == 'N/A'
        height: '50dp'
        on_release:
            root.select('')
            app.root.probing_popup.open()

<StatusDropDown>:
    btn_connect_usb: btn_connect_usb
    btn_connect_wifi: btn_connect_wifi
    btn_unlock: btn_unlock
    btn_disconnect: btn_disconnect
    canvas.before:
        Color:
            rgba: 60/255, 60/255, 60/255, 1
        Rectangle:
            pos: self.pos
            size: self.size
    Button:
        id: btn_reconnect_wifi
        text: tr._('Reconnect')
        size_hint_y: None
        height: '40dp'
        disabled: app.state != 'N/A'
        on_release:
            app.root.reconnect_wifi_conn(self)

    Button:
        id: btn_connect_wifi
        size_hint_y: None
        height: '40dp'
        text: tr._('Scan Wi-Fi...')
        on_release:
            app.root.open_wifi_conn_drop_down(self)
    Button:
        id: btn_connect_usb
        size_hint_y: None
        height: '40dp'
        text: tr._(' USB...')
        on_release:
            app.root.open_comports_drop_down(self)
    Button:
        id: btn_unlock
        text: 'Unlock'
        size_hint_y: None
        height: '40dp'
        disabled: True
        on_release:
            if self.text == 'Unlock':\
            app.root.controller.unlock();\
            root.select('')
            else:\
            app.root.controller.reset();\
            root.select('')
    Button:
        id: btn_disconnect
        text: tr._('Disconnect')
        size_hint_y: None
        height: '40dp'
        disabled: True
        on_release:
            app.root.close()
            root.select('')

<ComPortsDropDown>:

<OperationDropDown>:
    Button:
        text: tr._('Upload...')
        size_hint_y: None
        height: '40dp'
        on_release:
            root.select('')
    Button:
        text: tr._('Download')
        size_hint_y: None
        height: '40dp'
        on_release:
            root.select('')
    Button:
        text: tr._('Delete')
        size_hint_y: None
        height: '40dp'
        on_release:
            root.select('')
    Button:
        text: tr._('Rename')
        size_hint_y: None
        height: '40dp'
        on_release:
            root.select('')

<TopDataView>:
    orientation: 'horizontal'
    size_hint_x: None
    scale: 100
    width: '95dp'
    padding: '3dp'
    active: False
    canvas.before:
        Color:
            rgba: 80/255, 80/255, 80/255, 1
        Rectangle:
            pos: self.pos
            size: self.size
    color: 225/255, 225/255, 225/255, 1
    data_text: ''
    data_icon: ''

    main_text: ''
    minr_text: ''

    Label:
        canvas.before:
            Color:
                rgba: (0/255, 255/255, 255/255, 1) if (root.active and not root.disabled) else root.color
            Rectangle:
                source: root.data_icon
                pos: self.center_x - dp(10), self.center_y - dp(14)
                size: dp(28) if root.data_icon else 0, dp(28) if root.data_icon else 0
        text: root.data_text if root.data_text else ''
        size_hint_x: 0.22
        font_size: '23sp'
        color: (0/255, 255/255, 255/255, 1) if root.active else root.color
    BoxLayout:
        orientation: 'vertical'
        Label:
            text: root.main_text
            color: (0/255, 255/255, 255/255, 1) if root.scale != 100 else (225/255, 225/255, 225/255, 1)
            font_size: '18sp'
            text_size: self.size
            halign: "right"
            multiline: False
        Label:
            text: root.minr_text
            color: 160/255, 160/255, 160/255, 1
            font_size: '11sp'
            text_size: self.size
            halign: "right"

<DirectoryView>:
    orientation: 'horizontal'
    selected: False
    data_text: ''
    data_icon: 'data/folder-32.png'
    full_path: ''
    canvas.before:
        Color:
            rgba: 80/255, 80/255, 80/255, 1
        Rectangle:
            pos: self.pos
            size: self.size
    Label:
        canvas.before:
            Color:
                rgba: 225/255, 225/255, 225/255, 1
            Rectangle:
                source: 'data/connected.png'
                pos: self.center_x - dp(10), self.center_y - dp(10)
                size: dp(20) if root.selected else dp(0), dp(20) if root.selected else dp(0)
        text: ''
        size_hint_x: 0.15
    Label:
        canvas.before:
            Color:
                rgba: root.color
            Rectangle:
                source: 'data/folder-32.png' if root.data_icon == '' else root.data_icon
                pos: self.center_x - dp(10), self.center_y - dp(10)
                size: dp(20), dp(20)
        text: ''
        size_hint_x: 0.2
    Label:
        text: root.data_text
        color: 225/255, 225/255, 225/255, 1
        text_size: self.size
        valign: 'middle'
        multiline: False

<LanguagePopup>:
    sp_language: sp_language
    size_hint: 0.5, 0.4
    pos_hint: {"right": 0.75, "top": 0.7}
    auto_dismiss: False
    BoxLayout:
        padding: '15dp'
        orientation: 'vertical'
        Label:
            size_hint_y: 0.4
            text: tr._('Select Language')
            bold: True
        BoxLayout:
            orientation: 'vertical'
            Label:
            Spinner:
                id: sp_language
                text: ''
            Label:
        BoxLayout:
            size_hint_y: 0.4
            Button:
                text: tr._('Cancel')
                on_release: root.dismiss()
            Button:
                text: tr._('Ok')
                on_release:
                    app.root.change_language(sp_language.text)


<InputPopup>:
    lb_title: lb_title
    txt_content: txt_content
    size_hint: 0.5, 0.4
    pos_hint: {"right": 0.75, "top": 0.7}
    auto_dismiss: False
    BoxLayout:
        padding: '15dp'
        orientation: 'vertical'
        Label:
            size_hint_y: 0.4
            id: lb_title
            text: tr._('Input Box')
            bold: True
        BoxLayout:
            orientation: 'vertical'
            Label:
            TextInput:
                id: txt_content
                size_hint_y: None
                height: '35dp'
                multiline: False
                text: ''
            Label:
        BoxLayout:
            size_hint_y: 0.4
            Button:
                text: tr._('Cancel')
                on_release: root.dismiss()
            Button:
                text: tr._('Ok')
                on_release:
                    if root.confirm():\
                    root.dismiss()


<ConfirmPopup>:
    lb_title: lb_title
    lb_content: lb_content
    size_hint: 0.5, 0.4
    pos_hint: {"right": 0.75, "top": 0.7}
    auto_dismiss: False
    BoxLayout:
        padding: '15dp'
        orientation: 'vertical'
        Label:
            size_hint_y: 0.4
            id: lb_title
            text: tr._('Confirm Box')
            bold: True
        Label:
            id: lb_content
            text: tr._('Confirm to continue?')
        BoxLayout:
            size_hint_y: 0.4
            Button:
                text: tr._('Cancel')
                on_release:
                    root.dismiss()
                    if root.cancel:\
                    root.cancel()
            Button:
                text: tr._('Confirm')
                on_release:
                    root.dismiss()
                    root.confirm()
<MessagePopup>:
    btn_ok: btn_ok
    lb_content: lb_content
    size_hint: 0.5, 0.4
    pos_hint: {"right": 0.75, "top": 0.7}
    auto_dismiss: False
    BoxLayout:
        padding: '15dp'
        orientation: 'vertical'
        Label:
            id: lb_content
            text: tr._('Confirm to continue?')
        BoxLayout:
            id: btn_ok
            size_hint_y: 0.4
            Label:
            Button:
                text: tr._('Ok')
                on_release: root.dismiss()
            Label:

<ProgressPopup>:
    progress_bar: progress_bar
    size_hint: 0.5, 0.4
    pos_hint: {"right": 0.75, "top": 0.7}
    auto_dismiss: False
    btn_cancel: btn_cancel
    BoxLayout:
        padding: '15dp'
        orientation: 'vertical'
        Label:
            id: progress_label
            text: root.progress_text
            halign: 'center'

        ProgressBar:
            id: progress_bar
            max: 100
            value: root.progress_value
        BoxLayout:
            size_hint_y: 0.4
            Label:
            Button:
                id: btn_cancel
                text: tr._('Cancel')
                on_release:
                    root.cancel()
                    self.disabled = True
            Label:


<OriginPopup>:
    size_hint: 0.5, 0.4
    pos_hint: {"right": 0.75, "top": 0.7}
    auto_dismiss: False
    cbx_anchor1: cbx_anchor1
    cbx_anchor2: cbx_anchor2
    cbx_4axis_origin: cbx_4axis_origin
    cbx_current_position: cbx_current_position
    txt_x_offset: txt_x_offset
    txt_y_offset: txt_y_offset
    TabbedPanel:
        do_default_tab: False
        tab_width: root.width / 2 - dp(2)
        TabbedPanelItem:
            text: tr._('Auto-Set By Offset')
            BoxLayout:
                padding: '15dp'
                orientation: 'vertical'
                BoxLayout:
                    size_hint_y: None
                    height: '50dp'

                    MCQCheckBox:
                        id: cbx_anchor1
                        group: 'anchor'
                        active: True
                        disabled: app.has_4axis
                    MCQLabel:
                        on_press: cbx_anchor1._do_press()
                        text: tr._('Anchor1')
                        disabled: app.has_4axis
                    MCQCheckBox:
                        id: cbx_anchor2
                        group: 'anchor'
                        active: False
                        disabled: app.has_4axis
                    MCQLabel:
                        on_press: cbx_anchor2._do_press()
                        text: tr._('Anchor2')
                        disabled: app.has_4axis
                    MCQCheckBox:
                        id: cbx_4axis_origin
                        group: 'anchor'
                        active: False
                        disabled: not app.has_4axis
                    MCQLabel:
                        on_press: cbx_4axis_origin._do_press()
                        text: tr._('4Axis Origin')
                        disabled: not app.has_4axis
                    MCQCheckBox:
                        id: cbx_current_position
                        group: 'anchor'
                        active: False
                        disabled: app.has_4axis
                    MCQLabel:
                        on_press: cbx_current_position._do_press()
                        text: tr._('Current Pos')
                        disabled: app.has_4axis
                    # Label:

                BoxLayout:
                    size_hint_y: None
                    height: '30dp'
                    Label:
                        text: tr._('X Offset:')
                        halign: "left"
                        valign: "middle"
                        text_size: self.size
                    TextInput:
                        id: txt_x_offset
                        hint_text: tr._('Enter X Offset')
                        multiline: False
                        text: '10'
                        input_type: 'number'
                        input_filter: 'float'
                    Label:
                        size_hint_x: 0.3
                    Label:
                        text: tr._('Y Offset:')
                        halign: "left"
                        valign: "middle"
                        text_size: self.size
                    TextInput:
                        id: txt_y_offset
                        hint_text: tr._('Enter Y Offset')
                        multiline: False
                        text: '10'
                        input_type: 'number'
                        input_filter: 'float'
                BoxLayout:
                    id: empty
                    Label:
                        halign: "left"
                        valign: "middle"
                        text_size: self.size
                        text: tr._('Note: Work origin will be set immediately when clicking OK.')
                        color: 52/255, 152/255, 219/255, 1

                BoxLayout:
                    spacing: '5dp'
                    size_hint_y: None
                    height: '40dp'
                    Button:
                        id: btn_cancel
                        text: tr._('Cancel')
                        on_release: root.dismiss()
                    Button:
                        id: btn_ok
                        text: tr._('Ok')
                        on_release:
                            root.coord_popup.set_config('origin', 'anchor', root.selected_anchor())
                            root.coord_popup.set_config('origin', 'x_offset', float(txt_x_offset.text))
                            root.coord_popup.set_config('origin', 'y_offset', float(txt_y_offset.text))
                            app.root.set_work_origin()
                            # root.coord_popup.load_origin_label()
                            root.dismiss()

        TabbedPanelItem:
            text: tr._('Set By XYZ Probe')
            BoxLayout:
                padding: '15dp'
                orientation: 'vertical'
                BoxLayout:
                    size_hint_y: None
                    height: '25dp'
                BoxLayout:
                    size_hint_y: None
                    height: '30dp'
                    Label:
                        text: tr._('Probe Height:')
                        halign: "left"
                        valign: "middle"
                        text_size: self.size
                    TextInput:
                        id: txt_probe_height
                        hint_text: tr._('Height Above Workpiece')
                        multiline: False
                        text: '9'
                        input_type: 'number'
                        input_filter: 'float'
                    Label:
                        size_hint_x: 0.3
                    Label:
                        text: tr._('Tool Diameter:')
                        halign: "left"
                        valign: "middle"
                        text_size: self.size
                    TextInput:
                        id: txt_tool_diameter
                        hint_text: tr._('Tool Diameter')
                        multiline: False
                        text: '3.175'
                        input_type: 'number'
                        input_filter: 'float'
                BoxLayout:
                    id: empty
                    Label:
                        text: tr._('Note: Please make sure the probe is stably positioned and the magnet head is attached to the tool.')
                        halign: "left"
                        valign: "middle"
                        text_size: self.size
                        color: 52/255, 152/255, 219/255, 1
                BoxLayout:
                    spacing: '5dp'
                    size_hint_y: None
                    height: '40dp'
                    Button:
                        id: btn_cancel
                        text: tr._('Cancel')
                        on_release: root.dismiss()
                    Button:
                        id: btn_ok
                        text: tr._('Ok')
                        on_release:
                            app.root.controller.xyzProbe(float(txt_probe_height.text), float(txt_tool_diameter.text))
                            root.dismiss()

<ZProbePopup>:
    size_hint: 0.5, 0.4
    pos_hint: {"right": 0.75, "top": 0.7}
    auto_dismiss: False
    cbx_origin1: cbx_origin1
    cbx_origin2: cbx_origin2
    txt_x_offset: txt_x_offset
    txt_y_offset: txt_y_offset
    BoxLayout:
        padding: '15dp'
        orientation: 'vertical'
        Label:
            canvas.before:
                Color:
                    rgba: 45/255, 45/255, 45/255, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            id: caption
            size_hint_y: None
            height: '30dp'
            text: tr._('Z Probe Config')
            halign: 'left'
            valign: 'middle'
        BoxLayout:
            size_hint_y: None
            height: '50dp'
            MCQCheckBox:
                id: cbx_origin1
                group: 'origin'
            MCQLabel:
                on_press: cbx_origin1._do_press()
                text: tr._('Work Origin')
            MCQCheckBox:
                id: cbx_origin2
                group: 'origin'
            MCQLabel:
                on_press: cbx_origin2._do_press()
                text: tr._('Path Origin')
            Label:
        BoxLayout:
            size_hint_y: None
            height: '30dp'
            Label:
                text: tr._('X Offset:')
                halign: "left"
                valign: "middle"
                text_size: self.size
            TextInput:
                id: txt_x_offset
                hint_text: tr._('Enter X Offset')
                multiline: False
                text: '10'
                input_type: 'number'
                input_filter: 'float'
            Label:
                size_hint_x: 0.3
            Label:
                text: tr._('Y Offset:')
                halign: "left"
                valign: "middle"
                text_size: self.size
            TextInput:
                id: txt_y_offset
                hint_text: tr._('Enter Y Offset')
                multiline: False
                text: '10'
                input_type: 'number'
                input_filter: 'float'
        BoxLayout:
            id: empty
        BoxLayout:
            spacing: '5dp'
            size_hint_y: None
            height: '40dp'
            Button:
                id: btn_cancel
                text: tr._('Cancel')
                on_release: root.dismiss()
            Button:
                id: btn_ok
                text: tr._('Ok')
                on_release:
                    root.coord_popup.set_config('zprobe', 'origin', 1 if cbx_origin1.active else 2)
                    root.coord_popup.set_config('zprobe', 'x_offset', float(txt_x_offset.text))
                    root.coord_popup.set_config('zprobe', 'y_offset', float(txt_y_offset.text))
                    root.coord_popup.load_zprobe_label()
                    root.dismiss()

<XYZProbePopup>:
    size_hint: 0.5, 0.4
    pos_hint: {"right": 0.75, "top": 0.7}
    auto_dismiss: False
    origin: 0
    txt_probe_height: txt_probe_height
    txt_tool_diameter: txt_tool_diameter
    BoxLayout:
        padding: '15dp'
        orientation: 'vertical'
        Label:
            canvas.before:
                Color:
                    rgba: 45/255, 45/255, 45/255, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            id: caption
            size_hint_y: None
            height: '30dp'
            text: tr._('XYZ Probe At Current Position')
            halign: 'left'
            valign: 'middle'
        BoxLayout:
            size_hint_y: None
            height: '25dp'
        BoxLayout:
            size_hint_y: None
            height: '30dp'
            Label:
                text: tr._('Probe Height:')
                halign: "left"
                valign: "middle"
                text_size: self.size
            TextInput:
                id: txt_probe_height
                hint_text: tr._('Height Above Workpiece')
                multiline: False
                text: '9'
                input_type: 'number'
                input_filter: 'float'
            Label:
                size_hint_x: 0.3
            Label:
                text: tr._('Tool Diameter:')
                halign: "left"
                valign: "middle"
                text_size: self.size
            TextInput:
                id: txt_tool_diameter
                hint_text: tr._('Tool Diameter')
                multiline: False
                text: '3.175'
                input_type: 'number'
                input_filter: 'float'
        BoxLayout:
            id: empty
            Label:
                text: tr._('Note: Please make sure the probe is stably positioned and the magnet head is attached to the tool.')
                halign: "left"
                valign: "middle"
                text_size: self.size
                color: 52/255, 152/255, 219/255, 1
        BoxLayout:
            spacing: '5dp'
            size_hint_y: None
            height: '40dp'
            Button:
                id: btn_cancel
                text: tr._('Cancel')
                on_release: root.dismiss()
            Button:
                id: btn_ok
                text: tr._('Ok')
                on_release:
                    app.root.controller.xyzProbe(float(txt_probe_height.text), float(txt_tool_diameter.text))
                    root.dismiss()

<PairingPopup>:
    size_hint: 0.5, 0.4
    pos_hint: {"right": 0.75, "top": 0.7}
    auto_dismiss: False
    origin: 0
    BoxLayout:
        padding: '15dp'
        orientation: 'vertical'
        Label:
            canvas.before:
                Color:
                    rgba: 45/255, 45/255, 45/255, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            id: caption
            size_hint_y: None
            height: '30dp'
            text: tr._('Paring Wireless Probe')
            halign: 'left'
            valign: 'middle'
        BoxLayout:
            size_hint_y: None
            height: '25dp'
        BoxLayout:
            Label:
            Button:
                id: btn_start_pairing
                size_hint_x: None
                width: '200dp'
                size_hint_y: None
                height: '40dp'
                text: str(root.countdown) if root.pairing else tr._('Start Pairing')
                disabled: root.pairing
                on_release:
                    root.start_pairing()
                    app.root.controller.pairWP()
            Label:
        BoxLayout:
            id: empty
            Label:
                text: root.pairing_note
                halign: "center"
                valign: "middle"
                text_size: self.size
                color: 52/255, 152/255, 219/255, 1
        BoxLayout:
            spacing: '5dp'
            size_hint_y: None
            height: '40dp'
            Button:
                id: btn_close
                text: tr._('Close')
                on_release: root.dismiss()

<AutoLevelPopup>:
    size_hint: 0.5, 0.4
    pos_hint: {"right": 0.75, "top": 0.7}
    auto_dismiss: False
    sp_x_points: sp_x_points
    sp_y_points: sp_y_points
    sp_height: sp_height
    lb_min_x: lb_min_x
    lb_max_x: lb_max_x
    lb_step_x: lb_step_x
    lb_min_y: lb_min_y
    lb_max_y: lb_max_y
    lb_step_y: lb_step_y

    BoxLayout:
        padding: '15dp'
        orientation: 'vertical'
        Label:
            canvas.before:
                Color:
                    rgba: 45/255, 45/255, 45/255, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            id: caption
            size_hint_y: None
            height: '30dp'
            text: tr._('Auto Leveling Config')
            halign: 'left'
            valign: 'middle'
        Label:
            size_hint_y: None
            height: '10dp'
        GridLayout:
            spacing: '3dp'
            size_hint_y: None
            height: '240dp'
            cols: 5
            rows: 8
            # row1
            Label:
                size_hint_x: 0.2
            Label:
            Label:
                id: lb_height
                text: tr._('Clearance Height:   ')
            Spinner:
                id: sp_height
                text: '5'
                values: '2', '5', '15', '30'
                on_text:
                    root.init()
            Label:
            # row2
            Label:
                size_hint_x: 0.2
            Label:
                text: tr._('Min')
            Label:
                text: tr._('Max')
            Label:
                text: tr._('Step')
            Label:
                text: tr._('Points')
            # row3
            Label:
                text: 'X:'
                size_hint_x: 0.2
            Label:
                id: lb_min_x
                text: '0.0'
            Label:
                id: lb_max_x
                text: '0.0'
            Label:
                id: lb_step_x
                text: '0.0'
            Spinner:
                id: sp_x_points
                text: '5'
                values: '3', '5', '9', '15'
                on_text:
                    root.init()
            # row4
            Label:
                text: 'Y:'
                size_hint_x: 0.2
            Label:
                id: lb_min_y
                text: '0.0'
            Label:
                id: lb_max_y
                text: '0.0'
            Label:
                id: lb_step_y
                text: '0.0'
            Spinner:
                id: sp_y_points
                text: '5'
                values: '3', '5', '9', '15'
                on_text:
                    root.init()

            #empty row
            Label:
                size_hint_x: 0.2
            Label:
                
            Label:
                
            Label:
                
            Label:
                

            # row5 new section
            Label:
                size_hint_x: 0.2
            Label:
            Label:
                id: lb_height
                text: tr._('Offsets:   ')
            MCQCheckBox:
                id: cbx_autolevelOffsets
            Label:
            # row6
            Label:
                size_hint_x: 0.2
            Label:
                text: tr._('Left X-')
            Label:
                text: tr._('Right X+')
            Label:
                text: tr._('Front Y-')
            Label:
                text: tr._('Back Y+')
            # row7

            Label:
                size_hint_x: 0.2
            TextInput:
                id: txt_auto_xn_offset
                hint_text: tr._('Enter -X Offset')
                multiline: False
                text: '5'
                input_type: 'number'
                input_filter: 'float'
                disabled: not cbx_autolevelOffsets.active
            TextInput:
                id: txt_auto_xp_offset
                hint_text: tr._('Enter +X Offset')
                multiline: False
                text: '5'
                input_type: 'number'
                input_filter: 'float'
                disabled: not cbx_autolevelOffsets.active
            TextInput:
                id: txt_auto_yn_offset
                hint_text: tr._('Enter -Y Offset')
                multiline: False
                text: '5'
                input_type: 'number'
                input_filter: 'float'
                disabled: not cbx_autolevelOffsets.active
            TextInput:
                id: txt_auto_yp_offset
                hint_text: tr._('Enter +Y Offset')
                multiline: False
                text: '5'
                input_type: 'number'
                input_filter: 'float'
                disabled: not cbx_autolevelOffsets.active


        BoxLayout:
            id: empty
        BoxLayout:
            spacing: '5dp'
            size_hint_y: None
            height: '40dp'
            Button:
                id: btn_cancel
                text: tr._('Cancel')
                on_release: root.dismiss()
            Button:
                id: btn_ok
                text: tr._('Ok')
                on_release:
                    root.coord_popup.set_config('leveling', 'height', int(sp_height.text))
                    root.coord_popup.set_config('leveling', 'x_points', int(sp_x_points.text))
                    root.coord_popup.set_config('leveling', 'y_points', int(sp_y_points.text))
                    root.coord_popup.set_config('leveling', 'xn_offset', float(txt_auto_xn_offset.text) if cbx_autolevelOffsets.active and txt_auto_xn_offset.text.strip() and txt_auto_xn_offset.text != '.' else 0.0)
                    root.coord_popup.set_config('leveling', 'xp_offset', float(txt_auto_xp_offset.text) if cbx_autolevelOffsets.active and txt_auto_xp_offset.text.strip() and txt_auto_xp_offset.text != '.' else 0.0)
                    root.coord_popup.set_config('leveling', 'yn_offset', float(txt_auto_yn_offset.text) if cbx_autolevelOffsets.active and txt_auto_yn_offset.text.strip() and txt_auto_yn_offset.text != '.' else 0.0)
                    root.coord_popup.set_config('leveling', 'yp_offset', float(txt_auto_yp_offset.text) if cbx_autolevelOffsets.active and txt_auto_yp_offset.text.strip() and txt_auto_yp_offset.text != '.' else 0.0)
                    if cbx_autolevelOffsets.active: root.coord_popup.set_config('zprobe', 'x_offset', float(txt_auto_xn_offset.text) if txt_auto_xn_offset.text.strip() and txt_auto_xn_offset.text != '.' else 0.0)
                    if cbx_autolevelOffsets.active: root.coord_popup.set_config('zprobe', 'y_offset', float(txt_auto_yn_offset.text) if txt_auto_yn_offset.text.strip() and txt_auto_yn_offset.text != '.' else 0.0)

                    root.coord_popup.load_leveling_label()
                    if root.execute: app.root.execute_autolevel(int(sp_x_points.text), int(sp_y_points.text), False)
                    root.dismiss()

<UpgradePopup>:
    padding: '10dp'
    size_hint: 0.8, 0.8
    pos_hint: {"right": 0.9, "top": 0.9}
    auto_dismiss: False
    cbx_check_at_startup: cbx_check_at_startup
    check_button: check_button
    fw_upd_text: fw_upd_text
    ctl_upd_text: ctl_upd_text
    fw_version_txt: fw_version_txt
    ctl_version_txt: ctl_version_txt

    BoxLayout:
        orientation: 'vertical'
        BoxLayout:
            size_hint_y: None
            height: '40dp'
            TransparentButton:
                icon: 'data/upgrade.png'
                halign: "left"
                valign: "middle"
            Label:
                text: tr._("Upgrade")
                bold: True
                halign: "left"
                valign: "middle"
                text_size: self.size
            Widget:
            MCQCheckBox:
                id: cbx_check_at_startup
            MCQLabel:
                on_press: cbx_check_at_startup._do_press()
                text: tr._(' Check Updates on Startup')
                size_hint_x: None
                width: '200dp'

        BoxLayout:
            padding: '5dp'
            spacing: '5dp'
            orientation: 'horizontal'
            TabbedPanel:
                do_default_tab: False
                # Create tab 1
                TabbedPanelItem:
                    canvas.after:
                        Color:
                            rgba: 52/255, 152/255, 219/255, 1
                        Ellipse:
                            pos: self.x + self.width - dp(13), self.y + self.height - dp(13)
                            size: dp(10) if app.ctl_has_update else 0, dp(10) if app.ctl_has_update else 0
                    text: tr._('Controller')
                    BoxLayout:
                        orientation: 'vertical'
                        BoxLayout:
                            size_hint_y: None
                            height: '40dp'
                            padding: '5dp'
                            Label:
                                size_hint_x: None
                                width: '100dp'
                                text: tr._(" Update Log:")
                                bold: True
                                halign: "left"
                                valign: "middle"
                                text_size: self.size
                                font_size: '12sp'
                            Label:
                            Label:
                                id: ctl_version_txt
                                size_hint_x: None
                                width: '350dp'
                                text: ''
                                color: (52/255, 152/255, 219/255, 1) if app.ctl_has_update else (250/255, 250/255, 250/255, 1)
                                bold: True
                                halign: "right"
                                valign: "middle"
                                text_size: self.size
                            Button:
                                size_hint_x: None
                                width: '100dp'
                                text: tr._("Download")
                                on_release:
                                    app.root.open_download()
                        TextInput:
                            id: ctl_upd_text
                            multiline: True
                            readonly: True
                            font_size: '13sp'
                            text: ""

                # Create 2nd tab
                TabbedPanelItem:
                    canvas.after:
                        Color:
                            rgba: 52/255, 152/255, 219/255, 1
                        Ellipse:
                            pos: self.x + self.width - dp(13), self.y + self.height - dp(13)
                            size: dp(10) if app.fw_has_update else 0, dp(10) if app.fw_has_update else 0
                    text: tr._('Firmware')
                    BoxLayout:
                        orientation: 'vertical'
                        BoxLayout:
                            size_hint_y: None
                            height: '40dp'
                            padding: '5dp'
                            Label:
                                size_hint_x: None
                                width: '100dp'
                                text: tr._(" Update Log:")
                                bold: True
                                halign: "left"
                                valign: "middle"
                                text_size: self.size
                                font_size: '12sp'
                            Label:
                            Label:
                                id: fw_version_txt
                                size_hint_x: None
                                width: '350dp'
                                text: ''
                                color: (52/255, 152/255, 219/255, 1) if app.fw_has_update else (250/255, 250/255, 250/255, 1)
                                bold: True
                                halign: "right"
                                valign: "middle"
                                text_size: self.size
                            Button:
                                size_hint_x: None
                                width: '100dp'
                                text: tr._("Download")
                                on_release:
                                    app.root.open_fw_download()
                            Button:
                                size_hint_x: None
                                width: '100dp'
                                text: tr._("Update")
                                on_release:
                                    app.root.file_popup.firmware_mode = True
                                    app.root.file_popup.popup_manager.transition.duration = 0
                                    app.root.file_popup.popup_manager.current = 'local_page'
                                    app.root.file_popup.open()
                                    app.root.file_popup.local_rv.child_dir('')
                        TextInput:
                            id: fw_upd_text
                            multiline: True
                            readonly: True
                            text: ''
                            font_size: '13sp'

        BoxLayout:
            spacing: '5dp'
            padding: '5dp'
            size_hint_y: None
            height: '50dp'
            Button:
                id: check_button
                text: tr._("Check for Updates")
                on_release:
                    app.root.check_for_updates()
                    self.disabled = True
            Button:
                text: tr._('Close')
                on_release:
                    app.root.close_update_popup()


<FilePopup>:
    padding: '10dp'
    size_hint: 0.8, 0.8
    pos_hint: {"right": 0.9, "top": 0.9}
    auto_dismiss: False

    remote_rv: remote_rv
    local_rv: local_rv
    btn_view: btn_view
    btn_rename: btn_rename
    btn_select: btn_select
    btn_delete: btn_delete
    btn_upload: btn_upload
    ti_local_search: ti_local_search
    ti_remote_search: ti_remote_search

    popup_manager: popup_manager
    PopupManager:
        id: popup_manager
        RemotePage:
            name: 'remote_page'
            BoxLayout:
                orientation: 'vertical'
                BoxLayout:
                    size_hint_y: None
                    height: '40dp'
                    TransparentButton:
                        size_hint_x: None
                        width: '35dp'
                        icon: 'data/remote.png'
                        halign: "left"
                        valign: "middle"
                    Label:
                        size_hint_x: None
                        width: '80dp'
                        text: tr._("Remote")
                        bold: True
                        halign: "left"
                        valign: "middle"
                        text_size: self.size
                    BoxLayout:
                        padding: '5dp'
                        size_hint_x: None
                        width: '200dp'
                        DirectoryView:
                            id: remote_directory_view
                            data_text: root.remote_rv.curr_dir_name
                            selected: True
                            on_release:
                                app.root.open_remote_dir_drop_down(self)
                    Label:
                    Button:
                        id: btn_rename
                        size_hint_x: None
                        width: '100dp'
                        text: tr._("Rename")
                        disabled: True
                        on_release:
                            app.root.open_rename_input_popup()
                    Button:
                        id: btn_delete
                        size_hint_x: None
                        width: '100dp'
                        text: tr._("Delete")
                        disabled: True
                        on_release:
                            app.root.open_del_confirm_popup()
                    Button:
                        id: btn_new_folder
                        size_hint_x: None
                        width: '100dp'
                        text: tr._("New Folder")
                        disabled: app.state != 'Idle'
                        on_release:
                            app.root.open_newfolder_input_popup()
                    Button:
                        size_hint_x: None
                        width: '100dp'
                        text: tr._("Upload File")
                        on_release:
                            app.root.open_upload_local_file_popup()
                BoxLayout:
                    size_hint_y: None
                    height: '5dp'
                BoxLayout:
                    size_hint_y: None
                    height: '40dp'
                    orientation: 'horizontal'
                    padding: '5dp'
                    canvas.before:
                        Color:
                            rgba: 56/255, 56/255, 56/255, 1
                        Rectangle:
                            pos: self.pos
                            size: self.size
                    ButtonLabel:
                        id: lb_remote_path1
                        text: root.remote_rv.curr_path_list[0] + ' ' if len(root.remote_rv.curr_path_list) > 0 else ''
                        size_hint_x: None
                        size: self.texture_size
                        bold: True
                        on_release:
                            root.remote_rv.goto_path(0)
                    ButtonLabel:
                        id: lb_remote_path2
                        width:
                        text: ' > ' + root.remote_rv.curr_path_list[1] + ' ' if len(root.remote_rv.curr_path_list) > 1 else ''
                        size_hint_x: None
                        size: self.texture_size
                        bold: True
                        on_release:
                            root.remote_rv.goto_path(1)
                    ButtonLabel:
                        id: lb_remote_path3
                        text: ' > ' + root.remote_rv.curr_path_list[2] + ' ' if len(root.remote_rv.curr_path_list) > 2 else ''
                        size_hint_x: None
                        size: self.texture_size
                        bold: True
                        multiline: False
                        on_release:
                            root.remote_rv.goto_path(2)
                    ButtonLabel:
                        id: lb_remote_path4
                        text: ' > ' + root.remote_rv.curr_path_list[3] + ' ' if len(root.remote_rv.curr_path_list) > 3 else ''
                        size_hint_x: None
                        size: self.texture_size
                        bold: True
                        on_release:
                            root.remote_rv.goto_path(3)
                    ButtonLabel:
                        id: lb_remote_path5
                        text: ' > ' + root.remote_rv.curr_path_list[4] + ' ' if len(root.remote_rv.curr_path_list) > 4 else ''
                        size_hint_x: None
                        size: self.texture_size
                        bold: True
                        on_release:
                            root.remote_rv.goto_path(4)
                    ButtonLabel:
                        id: lb_remote_path6
                        text: ' > ' + root.remote_rv.curr_path_list[5] + ' ' if len(root.remote_rv.curr_path_list) > 5 else ''
                        size_hint_x: None
                        size: self.texture_size
                        bold: True
                        on_release:
                            root.remote_rv.goto_path(5)
                    Label:
                        id: lb_placeholder

                    RelativeLayout:
                        size_hint_x: None
                        width: '200dp'
                        padding: '2dp'
                        orientation: 'horizontal'
                        TransparentButton:
                            icon: 'data/search.png'
                            icon_size: 20
                            width: '25dp'
                        TextInput:
                            id: ti_remote_search
                            hint_text: tr._('Search')
                            disabled: app.state != 'Idle'
                            multiline: False
                            cursor_color: 1, 1, 1, 1
                            foreground_color: 1, 1, 1, 1
                            background_color: 80/255, 80/255, 80/255, 1
                            size_hint_x: None
                            width: '175dp'
                            pos: dp(25), self.y
                            on_text:
                                root.remote_rv.delay_search(self.text)
                        TransparentButton:
                            icon: 'data/delete.png' if len(root.ti_remote_search.text) > 0 else ''
                            icon_size: 20
                            width: '25dp'
                            pos: dp(175), self.y
                            on_release:
                                root.ti_remote_search.text = ''
                BoxLayout:
                    size_hint_y: None
                    height: '40dp'
                    orientation: 'horizontal'
                    canvas.before:
                        Color:
                            rgba: 48/255, 48/255, 48/255, 1
                        Rectangle:
                            pos: self.pos
                            size: self.size
                    ButtonLabel:
                        text: tr._('Name ') + root.remote_rv.curr_sort_str[0]
                        text_size: self.size
                        bold: True
                        halign: 'left'
                        on_release:
                            root.remote_rv.fill_dir(sort_key = 'name', keyword = root.ti_remote_search.text)
                    ButtonLabel:
                        text: tr._('Date Modified ') + root.remote_rv.curr_sort_str[1]
                        text_size: self.size
                        bold: True
                        halign: 'left'
                        valign: 'middle'
                        size_hint_x: None
                        width: '150dp'
                        on_release:
                            root.remote_rv.fill_dir(sort_key = 'date', keyword = root.ti_remote_search.text)
                    ButtonLabel:
                        text: root.remote_rv.curr_sort_str[2] + tr._(' Size')
                        text_size: self.size
                        bold: True
                        halign: 'right'
                        valign: 'middle'
                        size_hint_x: None
                        width: '100dp'
                        on_release:
                            root.remote_rv.fill_dir(sort_key = 'size', keyword = root.ti_remote_search.text)
                RemoteRV:
                    id: remote_rv
                    root: root
                    app_root: app.root
                    scroll_type: ['bars', 'content']
                    scroll_wheel_distance: dp(114)
                    bar_width: dp(10)
                    viewclass: 'DataRow'
                    on_select: root.update_remote_buttons()
                    SelectableRecycleBoxLayout:
                        default_size: None, dp(40)
                        default_size_hint: 1, None
                        size_hint_y: None
                        height: self.minimum_height
                        orientation: 'vertical'
                        spacing: '0.5dp'
                        multiselect: False
                        touch_multiselect: False
                BoxLayout:
                    size_hint_y: None
                    height: '50dp'
                    spacing: '5dp'
                    padding: '5dp'
                    size_hint_y: None
                    Button:
                        text: tr._("Close")
                        on_release:
                            root.dismiss()
                    Button:
                        text: tr._("Clear Selection")
                        disabled: app.selected_remote_filename == '' and app.selected_local_filename == ''
                        on_release:
                            app.selected_local_filename = ''
                            app.selected_remote_filename = ''
                            app.root.clear_selection()
                    Button:
                        id: btn_select
                        disabled: True
                        text: tr._("Select")
                        on_release:
                            app.root.check_and_download()
                            root.dismiss()

        LocalPage:
            name: 'local_page'
            BoxLayout:
                orientation: 'vertical'
                BoxLayout:
                    size_hint_y: None
                    height: '40dp'
                    TransparentButton:
                        size_hint_x: None
                        width: '35dp'
                        icon: 'data/upgrade.png' if root.firmware_mode else 'data/local.png'
                        halign: "left"
                        valign: "middle"
                    Label:
                        size_hint_x: None
                        width: '80dp'
                        text: tr._("Firmware") if root.firmware_mode else tr._('Local')
                        bold: True
                        halign: "left"
                        valign: "middle"
                        text_size: self.size
                    BoxLayout:
                        padding: '5dp'
                        size_hint_x: None
                        width: '200dp'
                        DirectoryView:
                            id: local_directory_view
                            data_text: root.local_rv.curr_dir_name
                            selected: True
                            on_release:
                                app.root.open_local_dir_drop_down(self)
                    Label:
                    Button:
                        id: btn_view
                        size_hint_x: None
                        width: '100dp'
                        text: tr._("Download") if root.firmware_mode else tr._("View")
                        on_release:
                            app.root.view_local_file()
                    Button:
                        id: btn_upload
                        size_hint_x: None
                        width: '100dp'
                        text: tr._("Upload")
                        on_release:
                            app.root.check_and_upload()
                    Button:
                        id: btn_upload_and_select
                        size_hint_x: None
                        width: '130dp'
                        text: tr._("Upload and Select")
                        disabled: root.firmware_mode
                        on_release:
                            app.root.check_upload_and_select()
                            root.dismiss()
                    Button:
                        size_hint_x: None
                        width: '100dp'
                        text: tr._("Close")
                        on_release:
                            if root.firmware_mode:\
                            root.dismiss()
                            else:\
                            root.load_remote_page()

                BoxLayout:
                    size_hint_y: None
                    height: '5dp'
                BoxLayout:
                    size_hint_y: None
                    height: '40dp'
                    orientation: 'horizontal'
                    padding: '5dp'
                    canvas.before:
                        Color:
                            rgba: 56/255, 56/255, 56/255, 1
                        Rectangle:
                            pos: self.pos
                            size: self.size
                    ButtonLabel:
                        id: lb_local_path1
                        text: root.local_rv.curr_path_list[0] + ' ' if len(root.local_rv.curr_path_list) > 0 else ''
                        size_hint_x: None
                        size: self.texture_size
                        bold: True
                        on_release:
                            root.local_rv.goto_path(0)
                    ButtonLabel:
                        id: lb_local_path2
                        width:
                        text: ' > ' + root.local_rv.curr_path_list[1] + ' ' if len(root.local_rv.curr_path_list) > 1 else ''
                        size_hint_x: None
                        size: self.texture_size
                        bold: True
                        on_release:
                            root.local_rv.goto_path(1)
                    ButtonLabel:
                        id: lb_local_path3
                        text: ' > ' + root.local_rv.curr_path_list[2] + ' ' if len(root.local_rv.curr_path_list) > 2 else ''
                        size_hint_x: None
                        size: self.texture_size
                        bold: True
                        multiline: False
                        on_release:
                            root.local_rv.goto_path(2)
                    ButtonLabel:
                        id: lb_local_path4
                        text: ' > ' + root.local_rv.curr_path_list[3] + ' ' if len(root.local_rv.curr_path_list) > 3 else ''
                        size_hint_x: None
                        size: self.texture_size
                        bold: True
                        on_release:
                            root.local_rv.goto_path(3)
                    ButtonLabel:
                        id: lb_local_path5
                        text: ' > ' + root.local_rv.curr_path_list[4] + ' ' if len(root.local_rv.curr_path_list) > 4 else ''
                        size_hint_x: None
                        size: self.texture_size
                        bold: True
                        on_release:
                            root.local_rv.goto_path(4)
                    ButtonLabel:
                        id: lb_local_path6
                        text: ' > ' + root.local_rv.curr_path_list[5] + ' ' if len(root.local_rv.curr_path_list) > 5 else ''
                        size_hint_x: None
                        size: self.texture_size
                        bold: True
                        on_release:
                            root.local_rv.goto_path(5)

                    Label:
                        id: lb_placeholder

                    RelativeLayout:
                        size_hint_x: None
                        width: '200dp'
                        padding: '2dp'
                        orientation: 'horizontal'
                        TransparentButton:
                            icon: 'data/search.png'
                            icon_size: 20
                            width: '25dp'
                        TextInput:
                            id: ti_local_search
                            hint_text: tr._('firmware') if root.firmware_mode else tr._('Search')
                            disabled: root.firmware_mode
                            multiline: False
                            cursor_color: 1, 1, 1, 1
                            foreground_color: 1, 1, 1, 1
                            background_color: 80/255, 80/255, 80/255, 1
                            size_hint_x: None
                            width: '175dp'
                            pos: dp(25), self.y
                            on_text:
                                root.local_rv.delay_search(self.text)
                        TransparentButton:
                            icon: 'data/delete.png' if len(root.ti_local_search.text) > 0 else ''
                            icon_size: 20
                            width: '25dp'
                            pos: dp(175), self.y
                            on_release:
                                root.ti_local_search.text = ''
                BoxLayout:
                    size_hint_y: None
                    height: '40dp'
                    orientation: 'horizontal'
                    canvas.before:
                        Color:
                            rgba: 48/255, 48/255, 48/255, 1
                        Rectangle:
                            pos: self.pos
                            size: self.size
                    ButtonLabel:
                        text: tr._('Name ') + root.local_rv.curr_sort_str[0]
                        text_size: self.size
                        bold: True
                        halign: 'left'
                        on_release:
                            root.local_rv.fill_dir(sort_key = 'name', keyword = root.ti_local_search.text)
                    ButtonLabel:
                        text: tr._('Date Modified ') + root.local_rv.curr_sort_str[1]
                        text_size: self.size
                        bold: True
                        halign: 'left'
                        valign: 'middle'
                        size_hint_x: None
                        width: '150dp'
                        on_release:
                            root.local_rv.fill_dir(sort_key = 'date', keyword = root.ti_local_search.text)
                    ButtonLabel:
                        text: root.local_rv.curr_sort_str[2] + tr._(' Size')
                        text_size: self.size
                        bold: True
                        halign: 'right'
                        valign: 'middle'
                        size_hint_x: None
                        width: '100dp'
                        on_release:
                            root.local_rv.fill_dir(sort_key = 'size', keyword = root.ti_local_search.text)
                LocalRV:
                    id: local_rv
                    root: root
                    scroll_type: ['bars', 'content']
                    scroll_wheel_distance: dp(114)
                    bar_width: dp(10)
                    viewclass: 'DataRow'
                    on_select: root.update_local_buttons()
                    SelectableRecycleBoxLayout:
                        default_size: None, dp(40)
                        default_size_hint: 1, None
                        size_hint_y: None
                        height: self.minimum_height
                        orientation: 'vertical'
                        spacing: dp(0.5)
                        multiselect: False
                        touch_multiselect: False

<CoordPopup>:
    padding: '10dp'
    size_hint: 0.8, 0.8
    pos_hint: {"right": 0.9, "top": 0.9}
    auto_dismiss: False

    cnc_workspace: cnc_workspace
    lb_origin: lb_origin
    lb_zprobe: lb_zprobe
    lb_leveling: lb_leveling
    btn_origin: btn_origin
    btn_zprobe: btn_zprobe
    btn_leveling: btn_leveling
    cbx_margin: cbx_margin
    cbx_zprobe: cbx_zprobe
    cbx_leveling: cbx_leveling

    BoxLayout:
        orientation: 'vertical'
        BoxLayout:
            size_hint_y: None
            height: '40dp'
            TransparentButton:
                icon: 'data/config_start.png'
                halign: "left"
                valign: "middle"
            Label:
                text: tr._("Config and Run") if root.mode == 'Run' else tr._(" Config and Do ") + root.mode
                bold: True
                halign: "left"
                valign: "middle"
                text_size: self.size

        BoxLayout:
            padding: '5dp'
            spacing: '5dp'
            orientation: 'horizontal'
            AnchorLayout:
                anchor_x: 'center'
                anchor_y: 'center'
                canvas:
                    Color:
                        rgba: 35/255, 35/255, 35/255, 1
                    Rectangle:
                        pos: self.pos
                        size: self.size
                CNCWorkspace:
                    id: cnc_workspace
            BoxLayout:
                size_hint_x: None
                width: '200dp'
                orientation: 'vertical'
                BoxLayout:
                    padding: '5dp', '0dp', '5dp', '10dp'
                    spacing: '5dp'
                    size_hint_y: None
                    height: '40dp'
                    Label:
                        text: tr._("Background:")
                    Spinner:
                        id: background_image_spinner
                        text: "None"
                        size_hint_x: 1.5
                        on_text: root.update_background_image(self.text)

                BoxLayout:
                    padding: '0.5dp'
                    size_hint_y: None
                    height: '30dp'
                    disabled: app.model == 'CA1'
                    Label:
                        text: tr._("Auto Vacuum")
                        halign: "left"
                        valign: "middle"
                        font_size: '13sp'
                        text_size: self.size

                        canvas.before:
                            Color:
                                rgba: 50/255, 50/255, 50/255, 1
                            Rectangle:
                                pos: self.pos
                                size: self.size
                    Switch:
                        id: vacuum_switch_play
                        canvas.before:
                            Color:
                                rgba: 50/255, 50/255, 50/255, 1
                            Rectangle:
                                pos: self.pos
                                size: self.size
                        active: True if root.vacuummode == 1 else False
                        on_active:
                            app.root.update_control('vacuum_mode', self.active)

                Label:
                    size_hint_y: None
                    height: '15dp'

                BoxLayout:
                    size_hint_y: None
                    height: '25dp'
                    canvas.before:
                        Color:
                            rgba: 65/255, 65/255, 65/255, 1
                        Rectangle:
                            pos: self.pos
                            size: self.size
                    Label:
                        text: tr._(" Set Work Origin")
                        halign: "left"
                        valign: "middle"
                        font_size: '13sp'
                        text_size: self.size
                    Widget:
                        size_hint_x: None
                        width: '25dp'
                        canvas.before:
                            Color:
                                rgba: 52/255, 152/255, 219/255, 1
                            Ellipse:
                                pos: self.center_x - dp(2.5), self.center_y - dp(5)
                                size: dp(10), dp(10)
                Label:
                    id: lb_origin
                    size_hint_y: None
                    height: '25dp'
                    text: tr._(" (0, 0) from Anchor1")
                    halign: "left"
                    valign: "middle"
                    font_size: '13sp'
                    text_size: self.size
                BoxLayout:
                    padding: '5dp', '0dp', '5dp', '10dp'
                    spacing: '5dp'
                    size_hint_y: None
                    height: '40dp'
                    Label:
                    Button:
                        id: btn_origin
                        text: tr._("Config")
                        font_size: '13sp'
                        on_release: root.origin_popup.open()

                BoxLayout:
                    size_hint_y: None
                    height: '25dp'
                    disabled:  (root.mode != 'Run' and root.mode != 'Margin') or app.lasering
                    canvas.before:
                        Color:
                            rgba: 65/255, 65/255, 65/255, 1
                        Rectangle:
                            pos: self.pos
                            size: self.size
                    MCQCheckBox:
                        id: cbx_margin
                        on_active:
                            root.set_config('margin', 'active', self.active)
                            root.toggle_config()
                    MCQLabel:
                        on_press: cbx_margin._do_press()
                        text: tr._(' Scan Margin')
                    Widget:
                        size_hint_x: None
                        width: '25dp'
                        canvas.before:
                            Color:
                                rgba: 0, 0.8, 0, 1
                            Ellipse:
                                pos: self.center_x - dp(2.5), self.center_y - dp(5)
                                size: dp(10), dp(10)
                Label:
                    size_hint_y: None
                    height: '15dp'

                BoxLayout:
                    size_hint_y: None
                    height: '25dp'
                    disabled:  (root.mode != 'Run' and root.mode != 'ZProbe') or root.cbx_leveling.active or app.lasering
                    canvas.before:
                        Color:
                            rgba: 65/255, 65/255, 65/255, 1
                        Rectangle:
                            pos: self.pos
                            size: self.size
                    MCQCheckBox:
                        id: cbx_zprobe
                        on_active:
                            root.lb_zprobe.disabled = not self.active or (root.mode != 'Run' and root.mode != 'ZProbe') or root.cbx_leveling.active
                            root.btn_zprobe.disabled = not self.active or app.has_4axis or (root.mode != 'Run' and root.mode != 'ZProbe') or root.cbx_leveling.active
                            root.set_config('zprobe', 'active', self.active)
                            root.toggle_config()
                    MCQLabel:
                        on_press: cbx_zprobe._do_press()
                        text: tr._(' Auto Z Probe')
                    Widget:
                        size_hint_x: None
                        width: '25dp'
                        canvas.before:
                            Color:
                                rgba: 231/255, 76/255, 60/255, 1
                            Ellipse:
                                pos: self.center_x - dp(2.5), self.center_y - dp(5)
                                size: dp(10), dp(10)
                Label:
                    id: lb_zprobe
                    size_hint_y: None
                    height: '25dp'
                    disabled:  (root.mode != 'Run' and root.mode != 'ZProbe') or root.cbx_leveling.active or app.lasering
                    text: tr._(" (10, 10) from Path Origin")
                    halign: "left"
                    valign: "middle"
                    font_size: '13sp'
                    text_size: self.size
                BoxLayout:
                    padding: '5dp', '0dp', '5dp', '10dp'
                    spacing: '5dp'
                    size_hint_y: None
                    height: '40dp'
                    Label:
                    Button:
                        id: btn_zprobe
                        text: tr._("Config")
                        font_size: '13sp'
                        disabled:  (root.mode != 'Run' and root.mode != 'ZProbe') or root.cbx_leveling.active or app.has_4axis
                        on_release: root.zprobe_popup.open()

                BoxLayout:
                    size_hint_y: None
                    height: '25dp'
                    disabled:  (root.mode != 'Run' and root.mode != 'Leveling') or app.has_4axis or app.lasering
                    canvas.before:
                        Color:
                            rgba: 65/255, 65/255, 65/255, 1
                        Rectangle:
                            pos: self.pos
                            size: self.size
                    MCQCheckBox:
                        id: cbx_leveling
                        on_active:
                            root.lb_leveling.disabled = not self.active or app.has_4axis or (root.mode != 'Run' and root.mode != 'Leveling')
                            root.btn_leveling.disabled = not self.active or app.has_4axis or (root.mode != 'Run' and root.mode != 'Leveling')
                            root.set_config('leveling', 'active', self.active)
                            if self.active:\
                            root.cbx_zprobe.active = True;\
                            root.set_config('zprobe', 'active', True);\
                            root.set_config('zprobe', 'origin', 2);\
                            root.set_config('zprobe', 'x_offset', 0);\
                            root.set_config('zprobe', 'y_offset', 0);\
                            root.load_zprobe_label()
                            root.toggle_config()
                    MCQLabel:
                        on_press: cbx_leveling._do_press()
                        text: tr._(' Auto Leveling')
                    Widget:
                        size_hint_x: None
                        width: '25dp'
                        canvas.before:
                            Color:
                                rgba: 244/255, 208/255, 63/255, 1
                            Ellipse:
                                pos: self.center_x - dp(2.5), self.center_y - dp(5)
                                size: dp(10), dp(10)
                Label:
                    id: lb_leveling
                    size_hint_y: None
                    height: '50dp'
                    text: tr._(" X Points: 10, Y Points: 10, Height: 5")
                    disabled:  (root.mode != 'Run' and root.mode != 'Leveling') or app.has_4axis
                    halign: "left"
                    valign: "middle"
                    font_size: '13sp'
                    text_size: self.size
                BoxLayout:
                    padding: '5dp', '0dp', '5dp', '10dp'
                    spacing: '5dp'
                    size_hint_y: None
                    height: '40dp'
                    Label:
                    Button:
                        id: btn_leveling
                        text: tr._("Config")
                        font_size: '13sp'
                        disabled:  (root.mode != 'Run' and root.mode != 'Leveling') or app.has_4axis
                        on_release: root.auto_level_popup.init_and_open(False)

#                BoxLayout:
#                    size_hint_y: None
#                    height: '25dp'
#                    disabled: app.model == 'CA1'
#                    canvas.before:
#                        Color:
#                            rgba: 65/255, 65/255, 65/255, 1
#                        Rectangle:
#                            pos: self.pos
#                            size: self.size
#                    MCQCheckBox:
#                        id: cbx_vacuum
#                        active: False
#                        on_active:
#                            #root.set_config('margin', 'active', self.active)
#                            #root.toggle_config()
#                            #app.root.update_control('vacuum_mode', self.active)
#                    MCQLabel:
#                        on_press: cbx_vacuum._do_press()
#                        text: tr._('Auto Vacuum')
#                    Widget:
#                        size_hint_x: None
#                        width: '25dp'
#                        canvas.before:
#                            Color:
#                                rgba: 255/255,255/255, 255/255, 1
#                            Ellipse:
#                                pos: self.center_x - dp(2.5), self.center_y - dp(5)
#                                size: dp(10), dp(10)


                Label:

        BoxLayout:
            spacing: '5dp'
            padding: '5dp'
            size_hint_y: None
            height: '50dp'
            Button:
                text: tr._("Close")
                on_release:
                    root.dismiss()
            Button:
                text: tr._('Run') if root.mode == 'Run' else tr._('Do ') + root.mode
                on_release:
                    root.dismiss()
                    if root.mode == 'Run': app.root.play(app.selected_remote_filename)
                    else: app.root.apply()

<SwitchBox@BoxLayout>:
    label: ''
    orientation: 'horizontal'
    switch: switch
    control_name: ''
    set_flag: False
    Switch:
        id: switch
        on_active:
            if root.set_flag: root.set_flag = False
            else: app.root.update_control(root.control_name, self.active)
    Label:
        text: root.label

<SliderBox@BoxLayout>:
    orientation: 'vertical'
    padding: dp(5), dp(5), dp(5), dp(5)
    min: 0
    max: 100
    step: 1
    slider: slider
    set_flag: False
    control_name: ''
    Widget:
    BoxLayout:
        size_hint_y: 1.5
        Slider:
            id: slider
            min: root.min
            max: root.max
            step: root.step
            on_value:
                if root.set_flag: root.set_flag = False
                else: app.root.update_control(root.control_name, self.value)
    BoxLayout:
        padding: dp(10), 0, dp(10), 0
        size_hint_y: 1.5
        Label:
            text_size: self.size
            halign: 'left'
            valign: 'middle'
            text: str(root.min)
        Label:
            text: str(int(root.slider.value))
        Label:
            text_size: self.size
            halign: 'right'
            valign: 'middle'
            text: str(root.max)
    Widget:

<StateBox@BoxLayout>:
    orientation: 'horizontal'
    state: False
    label: ''
    Widget:
        canvas.before:
            Color:
                rgba: (116/255, 247/255, 75/255, 1) if root.state else (80/255, 80/255, 80/255, 1)
            Rectangle:
                pos: self.x + self.width - dp(20), self.y + self.height / 2 - dp(8)
                size: dp(15), dp(15)
    Label:
        text: root.label
        text_size: self.size
        halign: 'left'
        valign: 'middle'

<DiagnosePopup>:
    padding: dp(10)
    size_hint: 0.8, 0.8
    pos_hint: {"right": 0.9, "top": 0.9}
    auto_dismiss: False

    # switch widget variables
    sw_spindle: sw_spindle
    sw_laser: sw_laser

    sw_light: sw_light
    sw_tool_sensor_pwr: sw_tool_sensor_pwr
    sw_air: sw_air
    sw_wp_charge_pwr: sw_wp_charge_pwr

    # slider widget variables
    sl_spindle: sl_spindle
    sl_spindlefan: sl_spindlefan
    sl_vacuum: sl_vacuum
    sl_laser: sl_laser

    # state widget variables
    st_x_min: st_x_min
    st_x_max: st_x_max
    st_y_min: st_y_min
    st_y_max: st_y_max
    st_z_max: st_z_max
    st_atc_home: st_atc_home
    st_probe: st_probe
    st_calibrate: st_calibrate
    st_cover: st_cover
    st_tool_sensor: st_tool_sensor
    st_e_stop: st_e_stop

    BoxLayout:
        orientation: 'vertical'
        BoxLayout:
            size_hint_y: None
            height: '40dp'
            Label:
                text: tr._("   Diagnostic Panel")
                bold: True
                halign: "left"
                valign: "middle"
                text_size: self.size
        BoxLayout:
            orientation: 'horizontal'
            BoxLayout:
                orientation: 'vertical'
                size_hint_x: 1.5
                SwitchBox:
                    id: sw_spindle
                    label: tr._('Spindle Motor')
                    control_name: 'spindle_switch'
                Label:
                    id: sw_spindlefan
                    text: tr._('Spindle Fan')
                Label:
                    id: sw_vacuum
                    text: tr._('Vacuum') if app.model != 'CA1' else tr._('PowerFan')
                SwitchBox:
                    id: sw_laser
                    label: tr._('Engraving Laser')
                    control_name: 'laser_switch'
                SwitchBox:
                    id: sw_light
                    label: tr._('Enclosure Light')
                    control_name: 'light_switch'
                SwitchBox:
                    id: sw_air
                    label: tr._('Air Assist')
                    control_name: 'air_switch'
                    disabled: app.model == 'CA1'
            BoxLayout:
                orientation: 'vertical'
                size_hint_x: 1.5
                SliderBox:
                    id: sl_spindle
                    max: 15000 if app.model != 'CA1' else 12000
                    step: 100
                    control_name: 'spindle_slider'
                SliderBox:
                    id: sl_spindlefan
                    step: 10
                    control_name: 'spindlefan_slider'
                    label: tr._('Spindle Fan')
                SliderBox:
                    id: sl_vacuum
                    step: 10
                    control_name: 'vacuum_slider'
                SliderBox:
                    id: sl_laser
                    step: 10
                    control_name: 'laser_slider'
                SwitchBox:
                    id: sw_tool_sensor_pwr
                    label: tr._('ToolSensorPWR') if app.model != 'CA1' else tr._('Probe Laser')
                    control_name: 'tool_sensor_switch'
                SwitchBox:
                    id: sw_wp_charge_pwr
                    label: tr._('WPChargePWR') if app.model != 'CA1' else tr._('Beep')
                    control_name: 'wp_charge_switch'
            BoxLayout:
                orientation: 'vertical'
                StateBox:
                    id: st_x_min
                    label: tr._('X- Limit')
                StateBox:
                    id: st_y_min
                    label: tr._('Y- Limit')
                StateBox:
                    id: st_atc_home
                    label: tr._('ATC Limit')
                    disabled: app.model == 'CA1'
                StateBox:
                    id: st_probe
                    label: tr._('Probe')
                StateBox:
                    id: st_tool_sensor
                    label: tr._('Tool Sensor')
                    disabled: app.model == 'CA1'
                StateBox:
                    id: st_e_stop
                    label: tr._('E-Stop')
            BoxLayout:
                orientation: 'vertical'
                StateBox:
                    id: st_x_max
                    label: tr._('X+ Limit')
                StateBox:
                    id: st_y_max
                    label: tr._('Y+ Limit')
                StateBox:
                    id: st_z_max
                    label: tr._('Z+ Limit')
                StateBox:
                    id: st_calibrate
                    label: tr._('Tool Length Setter')
                StateBox:
                    id: st_cover
                    label: tr._('Cover Switch')
                Label:
        BoxLayout:
            size_hint_y: None
            height: '20dp'
            Label:
                text: tr._("Changes in values are applied after 2 seconds.")
                halign: "right"
                valign: "middle"
                text_size: self.size
        BoxLayout:
            size_hint_y: None
            height: '50dp'
            spacing: '5dp'
            padding: '5dp'
            size_hint_y: None
            Button:
                text: tr._("Close")
                on_release:
                    root.dismiss()


<ConfigPopup>:
    padding: dp(10)
    size_hint: 0.8, 0.8
    pos_hint: {"right": 0.9, "top": 0.9}
    auto_dismiss: False
    settings_panel: settings_panel
    btn_apply: btn_apply
    BoxLayout:
        orientation: 'vertical'
        BoxLayout:
            size_hint_y: None
            height: '40dp'
            Label:
                text: tr._(" Settings")
                bold: True
                halign: "left"
                valign: "middle"
                text_size: self.size
            Button:
                id: btn_apply
                size_hint_x: None
                width: 200
                text: tr._("Apply")
                disabled: True
                on_release:
                    app.root.apply_setting_changes()
        BoxLayout:
            size_hint_y: None
            height: '5dp'
        MakeraConfigPanel:
            id: settings_panel
            on_close:
                root.dismiss()

<SplitterStrip>:
    background_down: 'data/splitter-strip.png'
    background_normal: 'data/splitter-strip.png'

<Makera>:
    gcode_rv: gcode_rv
    manual_rv: manual_rv
    manual_cmd: manual_cmd
    content: content
    status_data_view: status_data_view
    x_data_view: x_data_view
    y_data_view: y_data_view
    z_data_view: z_data_view
    a_data_view: a_data_view
    feed_data_view: feed_data_view
    spindle_data_view: spindle_data_view
    tool_data_view: tool_data_view
    laser_data_view: laser_data_view
    float_layout: float_layout
    step_a: step_a
    step_z: step_z
    step_xy: step_xy
    wpb_play: wpb_play
    wpb_margin: wpb_margin
    wpb_zprobe: wpb_zprobe
    wpb_leveling: wpb_leveling
    cmd_manager: cmd_manager
    gcode_viewer_container: gcode_viewer_container
    gcode_play_slider: gcode_play_slider

    BoxLayout:
        padding: dp(5)
        spacing: dp(5)
        orientation: 'vertical'

        canvas.before:
            Color:
                rgba: (30/255, 30/255, 30/255, 1)
            Rectangle:
                pos: self.pos
                size: self.size

        TopBar:
            padding: '3dp'
            spacing: '3dp'
            height: '50dp'
            size_hint_y: None
            orientation: 'horizontal'
            canvas.before:
                Color:
                    rgba: 100/255.0, 100/255.0, 100/255.0, 1
                Line:
                    width: 1
                    rectangle: self.x, self.y, self.width, self.height

            TopDataView:
                id: status_data_view
                color: 155/255, 155/255, 155/255, 1
                data_icon: 'data/status.png'
                main_text: "N/A"
                minr_text: tr._("disconnect")
                on_release:
                    if root.status_drop_down.parent: root.status_drop_down.parent.remove_widget(root.status_drop_down)
                    root.status_drop_down.open(self)
            Label:
                size_hint_x: None
                width: '3dp'

            TopDataView:
                id: x_data_view
                color: 231/255, 76/255, 60/255, 1
                data_text: 'X'
                main_text: "{:.3f}".format(1.0)
                minr_text: "{:.3f}".format(2.0)
                disabled: app.state == 'N/A'
                on_release: root.x_drop_down.open(self)

            TopDataView:
                id: y_data_view
                color: 34/255, 153/255, 84/255, 1
                data_text: 'Y'
                main_text: "{:.3f}".format(1.0)
                minr_text: "{:.3f}".format(2.0)
                disabled: app.state == 'N/A'
                on_release: root.y_drop_down.open(self)

            TopDataView:
                id: z_data_view
                color: 52/255, 152/255, 219/255, 1
                data_text: 'Z'
                main_text: "{:.3f}".format(1.0)
                minr_text: "{:.3f}".format(2.0)
                disabled: app.state == 'N/A'
                on_release: root.z_drop_down.open(self)

            TopDataView:
                id: a_data_view
                width: '98dp'
                color: 247/255, 220/255, 111/255, 1
                data_text: 'A'
                main_text: "{:.3f}".format(1.0)
                minr_text: "{:.3f}".format(2.0)
                disabled: app.state == 'N/A'
                on_release: root.a_drop_down.open(self)

            Label:
                size_hint_x: None
                width: dp(0)

            TopDataView:
                id: feed_data_view
                data_icon: 'data/feed.png'
                tooltip_txt: tr._('Feed Rate Override')
                main_text: "1000"
                minr_text: "100%"
                disabled: app.state == 'N/A'
                on_release:
                    root.feed_drop_down.open(self)
                    root.feed_drop_down.opened = True

            TopDataView:
                id: spindle_data_view
                data_icon: 'data/spindle.png'
                tooltip_txt: tr._('Spindle and Vacuum Overrides')
                main_text: "10000"
                minr_text: "0.0 C"
                disabled: app.state == 'N/A'
                on_release:
                    root.spindle_drop_down.open(self)
                    root.spindle_drop_down.opened = True

            TopDataView:
                id: tool_data_view
                data_icon: 'data/tool.png'
                tooltip_txt: tr._('Tool Settings')
                main_text: "6"
                minr_text: "0.000"
                disabled: app.state == 'N/A'
                on_release:
                    root.tool_drop_down.open(self)
                    root.tool_drop_down.opened = True

            TopDataView:
                id: laser_data_view
                data_icon: 'data/laser.png'
                tooltip_txt: tr._('Laser Settings')
                main_text: "10000"
                minr_text: "100%"
                disabled: app.state == 'N/A'
                on_release:
                    root.laser_drop_down.open(self)
                    root.laser_drop_down.opened = True

            Label:
                text: ''

            IconButton:
                icon: 'data/list.png'
                icon_size: 24
                notify: (app.fw_has_update or app.ctl_has_update) and app.state != 'N/A'
                on_release:
                    root.func_drop_down.open(self)


        Content:
            id: content
            ControlPage:
                name: 'Control'
                BoxLayout:
                    orientation: 'vertical'
                    Widget:
                        size_hint_y: 0.2
                    BoxLayout:
                        orientation: 'horizontal'
                        padding: '10dp'
                        canvas.before:
                            Color:
                                rgba: 40/255, 40/255, 40/255, 1
                            RoundedRectangle:
                                pos: self.pos
                                size: self.size
                                radius: [self.height / 2,]
                        BoxLayout:
                            disabled: (app.state != 'Idle' and app.state != 'Run' and app.state != 'Pause') or (app.playing and app.state != 'Pause')
                            padding: '25dp'
                            canvas.before:
                                Color:
                                    rgba: 50/255, 50/255, 50/255, 1
                                Ellipse:
                                    pos: self.pos
                                    size: self.size
                            GridLayout:
                                cols: 3
                                rows: 3
                                GridBoxLayout:
                                GridBoxLayout:
                                    RoundButton:
                                        text: 'Y-'
                                        on_release: root.controller.jog_with_speed("Y-{}".format(root.step_xy.text), root.jog_speed)
                                GridBoxLayout:
                                GridBoxLayout:
                                    RoundButton:
                                        text: 'X-'
                                        on_release: root.controller.jog_with_speed("X-{}".format(root.step_xy.text), root.jog_speed)
                                GridBoxLayout:
                                    Label:
                                    Spinner:
                                        id: step_xy
                                        center: 0.5, 0.5
                                        size_hint_y: None
                                        height: '40dp'
                                        text: '10'
                                        values: '10', '1', '0.1', '0.01', '0.005'
                                    Label:

                                GridBoxLayout:
                                    RoundButton:
                                        text: 'X+'
                                        on_release: root.controller.jog_with_speed("X{}".format(root.step_xy.text), root.jog_speed)
                                GridBoxLayout:
                                GridBoxLayout:
                                    RoundButton:
                                        text: 'Y+'
                                        on_release: root.controller.jog_with_speed("Y{}".format(root.step_xy.text), root.jog_speed)
                                GridBoxLayout:
                        BoxLayout:
                            disabled: app.state != 'Idle'
                            orientation: 'vertical'
                            padding: '10dp'
                            Widget:
                                size_hint_y: 0.5
                            BoxLayout:
                                disabled: app.state != 'Idle'
                                orientation: 'vertical'
                                padding: '3dp'
                                BoxLayout:
                                    padding: '3dp'
                                    canvas.before:
                                        Color:
                                            rgba: 50/255, 50/255, 50/255, 1
                                        RoundedRectangle:
                                            pos: self.pos
                                            size: self.size
                                            radius: [dp(3),]
                                    GridLayout:
                                        padding: '10dp'
                                        cols: 3
                                        rows: 4
                                        spacing: dp(3)
                                        GridBoxLayout:
                                            SmallRoundButton:
                                                text: tr._('Unlock')
                                                on_release: root.controller.unlock()
                                        GridBoxLayout:
                                            SmallRoundButton:
                                                text: tr._('Reset')
                                                on_release: root.controller.reset()
                                        GridBoxLayout:
                                            SmallRoundButton:
                                                text: tr._('Home')
                                                on_release: root.controller.home()
                                        GridBoxLayout:
                                            SmallRoundButton:
                                                disabled: app.state != 'Idle' or app.selected_remote_filename == ''
                                                text: tr._('Margin...')
                                                on_release:
                                                    root.coord_popup.mode = 'Margin'
                                                    root.coord_popup.set_config('margin', 'active', True)
                                                    root.coord_popup.set_config('zprobe', 'active', False)
                                                    root.coord_popup.set_config('leveling', 'active', False)
                                                    root.coord_popup.load_config()
                                                    root.coord_popup.open()
                                        GridBoxLayout:
                                            SmallRoundButton:
                                                disabled: app.state != 'Idle' or app.selected_remote_filename == ''
                                                text: tr._('ZProbe...')
                                                on_release:
                                                    root.coord_popup.mode = 'ZProbe'
                                                    root.coord_popup.set_config('margin', 'active', False)
                                                    root.coord_popup.set_config('zprobe', 'active', True)
                                                    root.coord_popup.set_config('leveling', 'active', False)
                                                    root.coord_popup.load_config()
                                                    root.coord_popup.open()
                                        GridBoxLayout:
                                            SmallRoundButton:
                                                disabled: app.state != 'Idle' or app.selected_remote_filename == '' or app.has_4axis
                                                text: tr._('AutoLevel...')
                                                on_release:
                                                    root.coord_popup.mode = 'Leveling'
                                                    root.coord_popup.set_config('margin', 'active', False)
                                                    root.coord_popup.set_config('zprobe', 'active', False)
                                                    root.coord_popup.set_config('leveling', 'active', True)
                                                    root.coord_popup.load_config()
                                                    root.coord_popup.open()
                                        GridBoxLayout:
                                            Spinner:
                                                center: 0.5, 0.5
                                                height: '35dp'
                                                text: tr._('Goto...')
                                                values: 'Clearance', 'Work Origin', 'Path Origin', 'Anchor1', 'Anchor2'
                                                on_text:
                                                    if self.text != tr._("Goto..."): app.root.controller.gotoPosition(self.text)
                                                    if self.text != tr._("Goto..."): self.text = tr._('Goto...')
                                        GridBoxLayout:
                                            SmallRoundButton:
                                                text: tr._('Set Origin')
                                                on_release: root.coord_popup.origin_popup.open()
                                        GridBoxLayout:
                                            ToggleButton:
                                                text: tr._('Jog Controls')
                                                height: '35dp'
                                                on_release: app.root.toggle_jog_control_ui()

                                        # 4th row
                                        GridBoxLayout:
                                            SmallRoundButton:
                                                text: tr._('Probing...')
                                                on_release: app.root.probing_popup.open()

                                        GridBoxLayout:
                                            ToggleButton:
                                                text: tr._('Light')
                                                height: '35dp'
                                                on_release: app.root.controller.setLightSwitch(not self.state=="normal")

                                        GridBoxLayout:
                                            # Empty for now

                            BoxLayout:
                                BoxLayout:
                                    disabled: app.state != 'Idle'
                                    orientation: 'horizontal'
                                    size_hint_y: 0.4
                                    opacity: 1 if root.show_advanced_jog_controls else 0
                                    GridLayout:
                                        cols: 3
                                        rows: 1
                                        BoxLayout:
                                            padding: '10dp'
                                            canvas.before:
                                                Color:
                                                    rgba: 50/255, 50/255, 50/255, 1
                                                RoundedRectangle:
                                                    pos: self.pos
                                                    size: self.size
                                                    radius: [dp(12),]
                                            GridBoxLayout:
                                                Button:
                                                    text: tr._('Jog Speed: Match Feed')
                                                    id: jog_speed_btn
                                                    center: 0.5, 0.5
                                                    height: '35dp'
                                                    on_release: root.jog_speed_drop_down.open(self)
                                                
                                            GridBoxLayout:
                                                ToggleButton:
                                                    id: kb_jog_btn
                                                    text: tr._('Keyboard Jog Mode')
                                                    height: '35dp'
                                                    on_release: app.root.toggle_keyboard_jog_control()

                        BoxLayout:
                            disabled: (app.state != 'Idle' and app.state != 'Run' and app.state != 'Pause') or (app.playing and app.state != 'Pause')
                            padding: '25dp'
                            orientation: 'horizontal'
                            canvas.before:
                                Color:
                                    rgba: 50/255, 50/255, 50/255, 1
                                Ellipse:
                                    pos: self.pos
                                    size: self.size
                            Widget:
                                size_hint_x: 0.2
                            GridLayout:
                                cols: 2
                                rows: 3
                                GridBoxLayout:
                                    RoundButton:
                                        text: 'A+'
                                        on_release: root.controller.jog_with_speed("A{}".format(root.step_a.text), root.jog_speed)
                                GridBoxLayout:
                                    RoundButton:
                                        text: 'Z+'
                                        on_release: root.controller.jog_with_speed("Z{}".format(root.step_z.text), root.jog_speed)
                                GridBoxLayout:
                                    Label:
                                    Spinner:
                                        id: step_a
                                        center: 0.5, 0.5
                                        size_hint_y: None
                                        height: '40dp'
                                        text: '90'
                                        values: '90', '10', '1', '0.1'
                                    Label:
                                GridBoxLayout:
                                    Label:
                                    Spinner:
                                        id: step_z
                                        center: 0.5, 0.5
                                        size_hint_y: None
                                        height: '40dp'
                                        text: '1'
                                        values: '10', '1', '0.1', '0.01', '0.005'
                                    Label:
                                GridBoxLayout:
                                    RoundButton:
                                        text: 'A-'
                                        on_release: root.controller.jog_with_speed("A-{}".format(root.step_a.text), root.jog_speed)
                                GridBoxLayout:
                                    RoundButton:
                                        text: 'Z-'
                                        on_release: root.controller.jog_with_speed("Z-{}".format(root.step_z.text), root.jog_speed)

                            Widget:
                                size_hint_x: 0.2
                    Widget:
                        size_hint_y: 0.2

            FilePage:
                name: 'File'
                BoxLayout:
                    orientation: 'vertical'
                    spacing: '5dp'
                    BoxLayout:
                        orientation: 'horizontal'
                        Splitter:
                            size_hint_x: 0.5
                            strip_size: '5dp'
                            sizable_from: 'right'
                            canvas.before:
                                Color:
                                    rgba: 0.6, 0.6, 0.6, 1  # Grey color for the strip
                                Rectangle:
                                    pos: self.x, self.y + self.height - self.strip_size
                                    size: self.width, self.strip_size
                            BoxLayout:
                                # size_hint_x: 0.5
                                orientation: 'vertical'
                                canvas.before:
                                    Color:
                                        rgba: 35/255.0, 35/255.0, 35/255.0, 1
                                    Rectangle:
                                        pos: self.pos
                                        size: self.size

                                CMDManager:
                                    id: cmd_manager
                                    GCodeCMDPage:
                                        name: 'gcode_cmd_page'
                                        BoxLayout:
                                            spacing: '5dp'
                                            orientation: 'vertical'
                                            GCodeRV:
                                                id: gcode_rv
                                                scroll_type: ['bars', 'content']
                                                scroll_wheel_distance: dp(114)
                                                bar_width: dp(20)
                                                viewclass: 'Row'
                                                SelectableRecycleBoxLayout:
                                                    default_size: None, dp(20)
                                                    default_size_hint: 1, None
                                                    size_hint_y: None
                                                    height: self.minimum_height
                                                    orientation: 'vertical'
                                                    spacing: dp(0.5)
                                                    multiselect: False
                                                    touch_multiselect: False
                                            BoxLayout:
                                                orientation: 'horizontal'
                                                size_hint_y: None
                                                height: '33dp'
                                                ToolTipButton:
                                                    id: toggle_mdi
                                                    width: '40dp'
                                                    size_hint_x: None
                                                    tooltip_txt: tr._('Press to switch to MDI console to see console messages and send individual gcodes')
                                                    text: 'MDI'
                                                    on_release:
                                                        cmd_manager.transition.direction = 'left'
                                                        cmd_manager.current = 'manual_cmd_page'
                                                        manual_cmd.focus = True
                                                BoxLayout:
                                                    halign: 'center'
                                                    valign: 'middle'
                                                    Widget:
                                                    TransparentButton:
                                                        height: '0dp'
                                                        icon: 'data/to_start.png'
                                                        tooltip_txt: tr._('Jump to first page in file')
                                                        icon_size: 18
                                                        disabled: app.loading_page or app.curr_page == 1 or (app.state != 'Idle' and app.state != 'N/A')
                                                        on_release:
                                                            root.first_page()
                                                    TransparentButton:
                                                        height: '0dp'
                                                        icon: 'data/previous.png'
                                                        tooltip_txt: tr._('Go to last page in file')
                                                        icon_size: 13
                                                        disabled: app.loading_page or app.curr_page == 1 or (app.state != 'Idle' and app.state != 'N/A')
                                                        on_release:
                                                            root.previous_page()
                                                    TransparentButton:
                                                        height: '0dp'
                                                        icon: 'data/start.png'
                                                        tooltip_txt: tr._('Go to next page in file')
                                                        icon_size: 13
                                                        disabled: app.loading_page or app.curr_page == app.total_pages or (app.state != 'Idle' and app.state != 'N/A')
                                                        on_release:
                                                            root.next_page()
                                                    TransparentButton:
                                                        height: '0dp'
                                                        icon: 'data/to_end.png'
                                                        tooltip_txt: tr._('Jump to last page in file')
                                                        icon_size: 18
                                                        disabled: app.loading_page or app.curr_page == app.total_pages or (app.state != 'Idle' and app.state != 'N/A')
                                                        on_release:
                                                            root.last_page()

                                                    Widget:

                                    ManualCMDPage:
                                        name: 'manual_cmd_page'
                                        BoxLayout:
                                            orientation: 'vertical'
                                            spacing: '5dp'
                                            ManualRV:
                                                id: manual_rv
                                                scroll_type: ['bars', 'content']
                                                scroll_wheel_distance: dp(114)
                                                bar_width: dp(20)
                                                viewclass: 'Row'
                                                SelectableRecycleBoxLayout:
                                                    default_size: None, dp(20)
                                                    default_size_hint: 1, None
                                                    size_hint_y: None
                                                    height: self.minimum_height
                                                    orientation: 'vertical'
                                                    spacing: dp(0.5)
                                                    multiselect: False
                                                    touch_multiselect: False
                                            BoxLayout:
                                                orientation: 'horizontal'
                                                size_hint_y: None
                                                height: '33dp'
                                                ToolTipButton:
                                                    id: toggle_file
                                                    width: '40dp'
                                                    size_hint_x: None
                                                    text: tr._('FILE')
                                                    tooltip_txt: tr._('Retun to file view')
                                                    on_release:
                                                        cmd_manager.transition.direction = 'right'
                                                        cmd_manager.current = 'gcode_cmd_page'
                                                TextInput:
                                                    id: manual_cmd
                                                    hint_text: tr._('Enter command...')
                                                    multiline: False
                                                    # disabled: app.state != 'Idle'
                                                    on_text_validate:
                                                        if app.state == 'Idle' or app.state == 'Pause' : root.send_cmd()
                                                ToolTipButton:
                                                    id: send_cmd
                                                    width: '40dp'
                                                    size_hint_x: None
                                                    text: tr._('send')
                                                    tooltip_txt: tr._('The MDI is a console that allows you to send individual gcodes, and commands such as to change config values on the machine')
                                                    disabled: (app.state != 'Idle' and app.state != 'Pause' and root.allow_mdi_while_machine_running == '0')
                                                    on_release:
                                                        root.send_cmd()
                        FloatBox:
                            id: float_layout
                            tool_bar: tool_bar
                            t1: t1
                            t2: t2
                            t3: t3
                            t4: t4
                            t5: t5
                            t6: t6
                            laser: laser
                            hide_all: hide_all
                            gcode_ctl_bar: gcode_ctl_bar
                            BoxLayout:
                                id: gcode_viewer_container
                                pos: float_layout.pos
                                orientation: 'vertical'
                            BoxLayout:
                                id: tool_bar
                                orbit: True
                                size_hint_x: 1
                                size_hint_y: 0.1 if app.show_gcode_ctl_bar else 0
                                opacity: 1 if app.show_gcode_ctl_bar else 0
                                # pos: float_layout.x, 0
                                pos_hint: {'x': 0.0, 'top': 1.0}
                                canvas.before:
                                    Color:
                                        rgba: 10/255, 10/255, 10/255, 0.2
                                    Rectangle:
                                        pos: self.pos
                                        size: self.size
                                BoxLayout:
                                    # tool bar buttons
                                    TransparentButton:
                                        width: '50dp'
                                        active: tool_bar.orbit
                                        icon: 'data/orbit.png'
                                        disabled: app.selected_remote_filename == '' and app.selected_local_filename == ''
                                        on_release:
                                            tool_bar.orbit = True
                                            root.gcode_viewer.set_orbit(True)
                                    TransparentButton:
                                        width: '50dp'
                                        active: not tool_bar.orbit
                                        icon: 'data/pan.png'
                                        disabled: app.selected_remote_filename == '' and app.selected_local_filename == ''
                                        on_release:
                                            tool_bar.orbit = False
                                            root.gcode_viewer.set_orbit(False)
                                    TransparentButton:
                                        width: '50dp'
                                        icon: 'data/zoom_out.png'
                                        disabled: app.selected_remote_filename == '' and app.selected_local_filename == ''
                                        on_release:
                                            root.gcode_viewer.zoom_in()
                                    TransparentButton:
                                        width: '50dp'
                                        icon: 'data/zoom_in.png'
                                        disabled: app.selected_remote_filename == '' and app.selected_local_filename == ''
                                        on_release:
                                            root.gcode_viewer.zoom_out()
                                    TransparentButton:
                                        width: '50dp'
                                        icon: 'data/zoom_fit.png'
                                        disabled: app.selected_remote_filename == '' and app.selected_local_filename == ''
                                        on_release:
                                            root.gcode_viewer.restore_default_view()
                                    Widget:

                                    # tools
                                    TransparentButton:
                                        id: t1
                                        width: '44dp'
                                        valign: 'middle'
                                        text: 'T1'
                                        active: app.tool == 1
                                        disabled: 1 not in root.used_tools
                                        min_icon: 'data/eye.png'
                                        on_release:
                                            self.min_active = not self.min_active
                                            app.root.filter_tool()
                                    TransparentButton:
                                        id: t2
                                        width: '44dp'
                                        valign: 'middle'
                                        text: 'T2'
                                        active: app.tool == 2
                                        disabled: 2 not in root.used_tools
                                        min_icon: 'data/eye.png'
                                        on_release:
                                            self.min_active = not self.min_active
                                            app.root.filter_tool()
                                    TransparentButton:
                                        id: t3
                                        width: '44dp'
                                        valign: 'middle'
                                        text: 'T3'
                                        active: app.tool == 3
                                        disabled: 3 not in root.used_tools
                                        min_icon: 'data/eye.png'
                                        on_release:
                                            self.min_active = not self.min_active
                                            app.root.filter_tool()
                                    TransparentButton:
                                        id: t4
                                        width: '44dp'
                                        valign: 'middle'
                                        text: 'T4'
                                        active: app.tool == 4
                                        disabled: 4 not in root.used_tools
                                        min_icon: 'data/eye.png'
                                        on_release:
                                            self.min_active = not self.min_active
                                            app.root.filter_tool()
                                    TransparentButton:
                                        id: t5
                                        width: '44dp'
                                        valign: 'middle'
                                        text: 'T5'
                                        active: app.tool == 5
                                        disabled: 5 not in root.used_tools
                                        min_icon: 'data/eye.png'
                                        on_release:
                                            self.min_active = not self.min_active
                                            app.root.filter_tool()
                                    TransparentButton:
                                        id: t6
                                        width: '44dp'
                                        valign: 'middle'
                                        text: 'T6'
                                        active: app.tool == 6
                                        disabled: 6 not in root.used_tools
                                        min_icon: 'data/eye.png'
                                        on_release:
                                            self.min_active = not self.min_active
                                            app.root.filter_tool()
                                    TransparentButton:
                                        id: laser
                                        width: '44dp'
                                        valign: 'middle'
                                        icon: 'data/laser.png'
                                        active: app.lasering == True
                                        disabled: 7 not in root.used_tools
                                        min_icon: 'data/eye.png'
                                        on_release:
                                            self.min_active = not self.min_active
                                            app.root.filter_tool()
                                    TransparentGrayButton:
                                        id: hide_all
                                        width: '50dp'
                                        icon: 'data/eye.png'
                                        disabled: app.selected_remote_filename == '' and app.selected_local_filename == ''
                                        on_release:
                                            self.active = not self.active
                                            if self.active:\
                                            t1.min_active = True;\
                                            t2.min_active = True;\
                                            t3.min_active = True;\
                                            t4.min_active = True;\
                                            t5.min_active = True;\
                                            t6.min_active = True;\
                                            laser.min_active = True;
                                            else:\
                                            t1.min_active = False;\
                                            t2.min_active = False;\
                                            t3.min_active = False;\
                                            t4.min_active = False;\
                                            t5.min_active = False;\
                                            t6.min_active = False;\
                                            laser.min_active = False;
                                            app.root.filter_tool()
                            BoxLayout:
                                id: gcode_ctl_bar
                                size_hint_x: 1
                                size_hint_y: 0.2 if app.show_gcode_ctl_bar else 0
                                opacity: 1 if app.show_gcode_ctl_bar else 0
                                orientation: 'vertical'
                                pos: float_layout.pos
                                canvas.before:
                                    Color:
                                        rgba: 10/255, 10/255, 10/255, 0.2
                                    Rectangle:
                                        pos: self.pos
                                        size: self.size
                                BoxLayout:
                                    Widget:
                                    TransparentButton:
                                        height: '0dp'
                                        icon: 'data/to_start.png'
                                        icon_size: 24
                                        disabled: (app.selected_remote_filename == '' and app.selected_local_filename == '') or (app.state != 'Idle' and app.state != 'N/A')
                                        on_release:
                                            root.gcode_play_to_start()
                                    TransparentButton:
                                        icon: 'data/backward.png'
                                        icon_size: 24
                                        disabled: (app.selected_remote_filename == '' and app.selected_local_filename == '') or (app.state != 'Idle' and app.state != 'N/A')
                                        on_release:
                                            root.gcode_play_speed_down()
                                    TransparentButton:
                                        icon: 'data/suspend.png' if root.gcode_playing else 'data/start.png'
                                        icon_size: 26 if root.gcode_playing else 18
                                        disabled: (app.selected_remote_filename == '' and app.selected_local_filename == '') or (app.state != 'Idle' and app.state != 'N/A')
                                        on_release:
                                            root.gcode_play_toggle()
                                    TransparentButton:
                                        icon: 'data/forward.png'
                                        icon_size: 24
                                        disabled: (app.selected_remote_filename == '' and app.selected_local_filename == '') or (app.state != 'Idle' and app.state != 'N/A')
                                        on_release:
                                            root.gcode_play_speed_up()
                                    TransparentButton:
                                        icon: 'data/to_end.png'
                                        icon_size: 24
                                        disabled: (app.selected_remote_filename == '' and app.selected_local_filename == '') or (app.state != 'Idle' and app.state != 'N/A')
                                        on_release:
                                            root.gcode_play_to_end()

                                    Widget:
                                GcodePlaySlider:
                                    id: gcode_play_slider
                                    height: '15dp'
                                    min: 0
                                    max: 1000
                                    value: 1000
                                    disabled: app.selected_remote_filename == '' and app.selected_local_filename == ''

            SettingPage:
                name: 'Setting'
                Label:
                    text: tr._('SettingPage')
        BottomBar:
            height: '50dp'
            size_hint_y: None
            orientation: 'horizontal'
            canvas.before:
                Color:
                    rgba: 100/255.0, 100/255.0, 100/255.0, 1
                Line:
                    width: 1
                    rectangle: self.x, self.y, self.width, self.height
            BoxLayout:
                padding: '3dp'
                spacing: '2dp'
                orientation: 'horizontal'
                canvas:
                    Color:
                        rgba: 30/255, 30/255, 30/255, 1
                    Rectangle:
                        pos: self.pos
                        size: self.size
                IconButton:
                    icon: 'data/file.png'
                    tooltip_txt: tr._('Select File')
                    icon_size: 21
                    disabled: app.state != 'Idle' and app.state != 'N/A' and not app.playing
                    on_release:
                        root.file_popup.firmware_mode = False
                        root.file_popup.popup_manager.transition.duration = 0
                        root.file_popup.popup_manager.current = 'remote_page'
                        root.file_popup.open()
                        if app.state == 'Idle':\
                        root.file_popup.load_remote_root()
                Label:
                    size_hint_x: None
                    width: '3dp'
                IconButton:
                    icon: 'data/start.png' if app.state == 'Pause' else 'data/config_start.png'
                    icon_size: 25
                    tooltip_txt: tr._('Start File')
                    disabled: (app.state != 'Idle' or app.selected_remote_filename == '' or app.playing) and app.state != 'Pause'
                    on_release:
                        if app.state == 'Pause':\
                        app.root.controller.resumeCommand()
                        else:\
                        root.coord_popup.mode = 'Run';\
                        root.coord_popup.load_config();\
                        root.coord_popup.open()
                IconButton:
                    icon: 'data/suspend.png'
                    disabled: app.state != 'Run' or not app.playing
                    tooltip_txt: tr._('Pause File at Next Safe Opportunity and Enable MDI Control')
                    on_release:
                        app.root.controller.suspendCommand()
                IconButton:
                    icon: 'data/abort.png'
                    icon_size: 24
                    tooltip_txt: tr._('Abort File Now')
                    disabled: (app.state != 'Run' and app.state != 'Pause') or not app.playing
                    on_release:
                        app.root.controller.abortCommand()
                Label:
                    size_hint_x: None
                    width: '3dp'
                IconButton:
                    icon: 'data/feedhold2.png' if app.state == 'Hold' else 'data/feedhold1.png'
                    icon_size: 24
                    tooltip_txt: tr._('Pause File Without MDI')
                    disabled: app.state != 'Run' and app.state != 'Idle' and app.state != 'Hold'
                    on_release:
                        self.disabled = True
                        app.root.controller.toggleFeedholdCommand(app.state == 'Hold')
                Label:
                    size_hint_x: None
                    width: '3dp'
                BoxLayout:
                    padding: 0, 0, 0, dp(0.5)
                    WideProgressBar:
                        id: wpb_margin
                        size_hint_x: None
                        width: '25dp'
                        color: 0, 0.8, 0, 1
                    WideProgressBar:
                        id: wpb_zprobe
                        size_hint_x: None
                        width: '25dp'
                        color: 231/255, 76/255, 60/255, 1
                    WideProgressBar:
                        id: wpb_leveling
                        size_hint_x: None
                        width: '25dp'
                        color: 244/255, 208/255, 63/255, 1
                    WideProgressBar:
                        id: wpb_play
                        Label:
                            size_hint_x: None
                            width: '5dp'
                        Label:
                            text: root.progress_info
                            text_size: self.size
                            halign: 'left'
                            valign: 'middle'
                            font_size: '16sp'
                            color: 240/255, 240/255, 240/255, 1

                IconButton:
                    icon: 'data/stop.png'
                    tooltip_txt: tr._('E-Stop')
                    icon_size: 40
                    disabled: app.state == 'N/A'
                    on_release:
                        app.root.controller.estopCommand()

    Button:
        size_hint: None, None
        size: '40dp', '100dp'
        pos: root.width - self.width, (root.height - self.height) / 2
        text: '<' if root.content.current == 'File' else '>'
        background_color: 80/255, 80/255, 80/255, 1
        on_release:
            if app.root.content.current == 'File':\
            app.root.content.transition.direction = 'left';\
            app.root.content.current = 'Control'
            else:\
            app.root.content.transition.direction = 'right';\
            app.root.content.current = 'File'

<SetXPopup>:
    size_hint: 0.5, 0.4
    pos_hint: {"right": 0.75, "top": 0.7}
    auto_dismiss: False
    txt_offset: txt_offset
    BoxLayout:
        padding: '15dp'
        orientation: 'vertical'
        Label:
            canvas.before:
                Color:
                    rgba: 45/255, 45/255, 45/255, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            id: caption
            size_hint_y: None
            height: '30dp'
            text: tr._('Set X Current Pos')
            halign: 'left'
            valign: 'middle'
        BoxLayout:
            padding: '15dp'
            orientation: 'vertical'
        BoxLayout:
            size_hint_y: None
            height: '30dp'
            Label:
                text: 'Value:'
                halign: "left"
                valign: "center"
                text_size: self.size
            TextInput:
                id: txt_offset
                hint_text: tr._('Enter X Pos')
                multiline: False
                text: '0.0'
                halign: "left"
                input_type: 'number'
                input_filter: 'float'
        BoxLayout:
            id: empty
        BoxLayout:
            spacing: '5dp'
            size_hint_y: None
            height: '40dp'
            Button:
                id: btn_cancel
                text: tr._('Cancel')
                on_release: root.dismiss()
            Button:
                id: btn_ok
                text: tr._('Ok')
                on_release:
                    app.root.controller.wcsSet(float(txt_offset.text), None, None, None)
                    root.dismiss()

<SetYPopup>:
    size_hint: 0.5, 0.4
    pos_hint: {"right": 0.75, "top": 0.7}
    auto_dismiss: False
    txt_offset: txt_offset
    BoxLayout:
        padding: '15dp'
        orientation: 'vertical'
        Label:
            canvas.before:
                Color:
                    rgba: 45/255, 45/255, 45/255, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            id: caption
            size_hint_y: None
            height: '30dp'
            text: tr._('Set Y Current Pos')
            halign: 'left'
            valign: 'middle'
        BoxLayout:
            padding: '15dp'
            orientation: 'vertical'
        BoxLayout:
            size_hint_y: None
            height: '30dp'
            Label:
                text: 'Value:'
                halign: "left"
                valign: "center"
                text_size: self.size
            TextInput:
                id: txt_offset
                hint_text: tr._('Enter Y Pos')
                multiline: False
                text: '0.0'
                halign: "left"
                input_type: 'number'
                input_filter: 'float'
        BoxLayout:
            id: empty
        BoxLayout:
            spacing: '5dp'
            size_hint_y: None
            height: '40dp'
            Button:
                id: btn_cancel
                text: tr._('Cancel')
                on_release: root.dismiss()
            Button:
                id: btn_ok
                text: tr._('Ok')
                on_release:
                    app.root.controller.wcsSet(None, float(txt_offset.text), None, None)
                    root.dismiss()

<SetZPopup>:
    size_hint: 0.5, 0.4
    pos_hint: {"right": 0.75, "top": 0.7}
    auto_dismiss: False
    txt_offset: txt_offset
    BoxLayout:
        padding: '15dp'
        orientation: 'vertical'
        Label:
            canvas.before:
                Color:
                    rgba: 45/255, 45/255, 45/255, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            id: caption
            size_hint_y: None
            height: '30dp'
            text: tr._('Set Z Current Pos')
            halign: 'left'
            valign: 'middle'
        BoxLayout:
            padding: '15dp'
            orientation: 'vertical'
        BoxLayout:
            size_hint_y: None
            height: '30dp'
            Label:
                text: 'Value:'
                halign: "left"
                valign: "center"
                text_size: self.size
            TextInput:
                id: txt_offset
                hint_text: tr._('Enter Z Pos')
                multiline: False
                text: '0.0'
                halign: "left"
                input_type: 'number'
                input_filter: 'float'
        BoxLayout:
            id: empty
        BoxLayout:
            spacing: '5dp'
            size_hint_y: None
            height: '40dp'
            Button:
                id: btn_cancel
                text: tr._('Cancel')
                on_release: root.dismiss()
            Button:
                id: btn_ok
                text: tr._('Ok')
                on_release:
                    app.root.controller.wcsSet(None, None, float(txt_offset.text), None)
                    root.dismiss()

<SetAPopup>:
    size_hint: 0.5, 0.4
    pos_hint: {"right": 0.75, "top": 0.7}
    auto_dismiss: False
    txt_offset: txt_offset
    BoxLayout:
        padding: '15dp'
        orientation: 'vertical'
        Label:
            canvas.before:
                Color:
                    rgba: 45/255, 45/255, 45/255, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            id: caption
            size_hint_y: None
            height: '30dp'
            text: tr._('Set A Current Pos')
            halign: 'left'
            valign: 'middle'
        BoxLayout:
            padding: '15dp'
            orientation: 'vertical'
        BoxLayout:
            size_hint_y: None
            height: '30dp'
            Label:
                text: 'Value:'
                halign: "left"
                valign: "center"
                text_size: self.size
            TextInput:
                id: txt_offset
                hint_text: tr._('Enter A Pos')
                multiline: False
                text: '0.0'
                halign: "left"
                input_type: 'number'
                input_filter: 'float'
        BoxLayout:
            id: empty
        BoxLayout:
            spacing: '5dp'
            size_hint_y: None
            height: '40dp'
            Button:
                id: btn_cancel
                text: tr._('Cancel')
                on_release: root.dismiss()
            Button:
                id: btn_ok
                text: tr._('Ok')
                on_release:
                    app.root.controller.wcsSetA(float(txt_offset.text))
                    root.dismiss()

<SetToolPopup>:
    size_hint: 0.5, 0.4
    pos_hint: {"right": 0.75, "top": 0.7}
    auto_dismiss: False
    txt_offset: txt_offset
    BoxLayout:
        padding: '15dp'
        orientation: 'vertical'
        Label:
            canvas.before:
                Color:
                    rgba: 45/255, 45/255, 45/255, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            id: caption
            size_hint_y: None
            height: '30dp'
            text: tr._('Set Current Tool Number')
            halign: 'left'
            valign: 'middle'
        BoxLayout:
            padding: '15dp'
            orientation: 'vertical'
        BoxLayout:
            size_hint_y: None
            height: '30dp'
            Label:
                text: 'Value:'
                halign: "left"
                valign: "center"
                text_size: self.size
            TextInput:
                id: txt_offset
                hint_text: tr._('Enter New Tool Number')
                multiline: False
                text: '0'
                halign: "left"
                input_type: 'number'
                input_filter: 'int'
        BoxLayout:
            id: empty
        BoxLayout:
            spacing: '5dp'
            size_hint_y: None
            height: '40dp'
            Button:
                id: btn_cancel
                text: tr._('Cancel')
                on_release: root.dismiss()
            Button:
                id: btn_ok
                text: tr._('Ok')
                on_release:
                    app.root.controller.setToolCommand(txt_offset.text)
                    root.dismiss()
<ChangeToolPopup>:
    size_hint: 0.5, 0.4
    pos_hint: {"right": 0.75, "top": 0.7}
    auto_dismiss: False
    txt_offset: txt_offset
    BoxLayout:
        padding: '15dp'
        orientation: 'vertical'
        Label:
            canvas.before:
                Color:
                    rgba: 45/255, 45/255, 45/255, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            id: caption
            size_hint_y: None
            height: '30dp'
            text: tr._('Change Current Tool')
            halign: 'left'
            valign: 'middle'
        BoxLayout:
            padding: '15dp'
            orientation: 'vertical'
        BoxLayout:
            size_hint_y: None
            height: '30dp'
            Label:
                text: 'Value:'
                halign: "left"
                valign: "center"
                text_size: self.size
            TextInput:
                id: txt_offset
                hint_text: tr._('New Tool Number')
                multiline: False
                text: '0'
                halign: "left"
                input_type: 'number'
                input_filter: 'int'
        BoxLayout:
            id: empty
        BoxLayout:
            spacing: '5dp'
            size_hint_y: None
            height: '40dp'
            Button:
                id: btn_cancel
                text: tr._('Cancel')
                on_release: root.dismiss()
            Button:
                id: btn_ok
                text: tr._('Ok')
                on_release:
                    app.root.controller.changeToolCommand(txt_offset.text)
                    root.dismiss()

<MoveAPopup>:
    size_hint: 0.5, 0.4
    pos_hint: {"right": 0.75, "top": 0.7}
    auto_dismiss: False
    txt_offset: txt_offset
    BoxLayout:
        padding: '15dp'
        orientation: 'vertical'
        Label:
            canvas.before:
                Color:
                    rgba: 45/255, 45/255, 45/255, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            id: caption
            size_hint_y: None
            height: '30dp'
            text: tr._('Rapidly move the A to')
            halign: 'left'
            valign: 'middle'
        BoxLayout:
            padding: '15dp'
            orientation: 'vertical'
        BoxLayout:
            size_hint_y: None
            height: '30dp'
            Label:
                text: 'Value:'
                halign: "left"
                valign: "center"
                text_size: self.size
            TextInput:
                id: txt_offset
                hint_text: tr._('Enter A Pos')
                multiline: False
                text: '0.0'
                halign: "left"
                input_type: 'number'
                input_filter: 'float'
        BoxLayout:
            id: empty
        BoxLayout:
            spacing: '5dp'
            size_hint_y: None
            height: '40dp'
            Button:
                id: btn_cancel
                text: tr._('Cancel')
                on_release: root.dismiss()
            Button:
                id: btn_ok
                text: tr._('Ok')
                on_release:
                    app.root.controller.RapMoveA(float(txt_offset.text))
                    root.dismiss()
