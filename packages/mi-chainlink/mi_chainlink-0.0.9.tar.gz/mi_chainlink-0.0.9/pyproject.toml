[project]
name = "mi-chainlink"
version = "v0.0.9"
description = "A flexible record linkage framework that enables matching between multiple datasets using both exact and fuzzy matching techniques."
authors = [{ name = "Mansueto Institute,Austin Steinhart", email = "asteinhart3@gmail.com" }]
readme = "README.md"
keywords = ['python']
requires-python = ">=3.10,<4.0"
classifiers = [
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "duckdb>=1.2.0",
    "jsonschema>=4.23.0",
    "numpy>=2.0.2",
    "polars>=1.22.0",
    "pyarrow>=19.0.0",
    "python-levenshtein>=0.26.1",
    "pyyaml>=6.0.2",
    "rich>=14.0.0",
    "scikit-learn>=1.6.1",
    "scipy>=1.15.1",
    "sparse-dot-topn>=1.1.5",
    "sqlalchemy-mate<=2.0.0.0",
    "typer>=0.15.2",
    "us>=3.2.0",
    "usaddress==0.5.11",
    "usaddress-scourgify>=0.6.0",
    "uszipcode>=1.0.1",
]

[project.urls]
Homepage = "https://mansueto-institute.github.io/mi-chainlink/"
Repository = "https://github.com/mansueto-institute/mi-chainlink"
Documentation = "https://mansueto-institute.github.io/mi-chainlink/"

[dependency-groups]
dev = [
    "pytest>=7.2.0",
    "pre-commit>=2.20.0",
    "tox-uv>=1.11.3",
    "deptry>=0.22.0",
    "mypy>=0.991",
    "pytest-cov>=4.0.0",
    "ruff>=0.9.2",
    "mkdocs>=1.4.2",
    "mkdocs-material>=8.5.10",
    "mkdocstrings[python]>=0.26.1",
    "ipython>=8.18.1",
]

[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[project.scripts]
chainlink = "chainlink.main:app"

[tool.deptry.per_rule_ignores]
DEP002 = ["pyarrow", "python-levenshtein", "sqlalchemy-mate"]

[tool.mypy]
files = ["src"]
disallow_untyped_defs = true
no_implicit_optional = true
check_untyped_defs = true
warn_unused_ignores = true
show_error_codes = true
disable_error_code = ["import-untyped", "index"]

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.ruff]
target-version = "py39"
line-length = 120
fix = true

[tool.ruff.lint]
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
ignore = [
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731",
    # Possible SQL injection
    "S608",
    # Prefer `next(...)`
    "RUF015",
    # too complex
    "C901",
    # long messages outside the exception
    "TRY003",
    "TRY002",
    "F841",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.format]
preview = true

[tool.coverage.report]
skip_empty = true

[tool.coverage.run]
branch = true
source = ["src"]
