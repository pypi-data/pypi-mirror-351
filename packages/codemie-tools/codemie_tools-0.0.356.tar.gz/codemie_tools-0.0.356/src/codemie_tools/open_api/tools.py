import base64
import requests

from typing import Any, Type, Optional
from pydantic import BaseModel, Field

from codemie_tools.base.codemie_tool import CodeMieTool
from codemie_tools.open_api.models import OpenApiConfig
from codemie_tools.open_api.tools_vars import OPEN_API_TOOL, OPEN_API_SPEC_TOOL
from codemie_tools.base.utils import parse_to_dict


def _get_auth_header_value(config) -> str:
    if config.is_basic_auth:
        credentials = f"{config.username}:{config.api_key}"
        encoded_credentials = base64.b64encode(credentials.encode('utf-8')).decode('utf-8')
        return f"Basic {encoded_credentials}"
    return f"Bearer {config.api_key}"


class OpenApiInput(BaseModel):
    method: str = Field(
        description="""
            String text. It's the verb of a HTTP request generated by LLM which 
            will be used to invoke appropriate REST API to fulfill user request. 
            Important: string formatting and escaping SHOULD NOT be used when passing query to the tool.
            """.strip(),
    )
    url: str = Field(
        description="""
            String text. It's the URL of a HTTP request generated by LLM which 
            will be used to invoke appropriate REST API to fulfill user request. 
            Important: string formatting and escaping SHOULD NOT be used when passing query to the tool.
            """.strip(),
    )
    headers: Optional[str] = Field(
        default="",
        description="""
            MUST be String text. It's the headers of a HTTP request generated by LLM which
            will be used to invoke appropriate REST API to fulfill user request.
            Important: string formatting and escaping SHOULD NOT be used when passing query to the tool.
            """.strip(),
    )
    fields: Optional[str] = Field(
        default="",
        description="""
            MUST be String text. It's the query parameters of a HTTP request generated by LLM which 
            will be used to invoke appropriate REST API to fulfill user request.
            Important: string formatting and escaping SHOULD NOT be used when passing query to the tool.
             """.strip(),
    )
    body: Optional[str] = Field(
        default="",
        description="""
            JSON that should be passed as a string. It's the body of a HTTP request generated by LLM which 
            will be used to invoke appropriate REST API to fulfill user request. 
            Should be passes as an empty string if there is no body. 
            Important: string formatting and escaping SHOULD NOT be used when passing query to the tool.
            """.strip(),
    )

class GetOpenApiSpecToolInput(BaseModel):
    query: Optional[str] = Field(
        default="",
        description="User initial request should be passed as a string.",
    )


class InvokeRestApiBySpec(CodeMieTool):
    """Tool for invoking REST APIs based on OpenAPI specifications."""
    openapi_config: OpenApiConfig = Field(exclude=True, default=None)
    name: str = OPEN_API_TOOL.name
    description: str = OPEN_API_TOOL.description
    args_schema: Type[BaseModel] = OpenApiInput
    tokens_size_limit: int = 20000  # Increased token limit to 20000

    def _format_error_response(self, error_type: str, error_details: str) -> str:
        """Format error responses consistently"""
        return f"Error ({error_type}): {error_details}"

    def execute(self, method: str, url: str, headers: Any = "", fields: Any = "", body: str = "", **kwargs: Any) -> Any:
        headers_param = parse_to_dict(headers) if headers else {}
        params = parse_to_dict(fields) if fields else None

        callback_id = self.metadata.get('callback_id')
        if callback_id:
            headers_param['callback_id'] = callback_id

        if self.openapi_config.api_key:
            headers_param['Authorization'] = _get_auth_header_value(config=self.openapi_config)

        try:
            # Use requests instead of urllib3
            response = requests.request(
                method=method,
                url=url,
                params=params,
                headers=headers_param,
                data=body if body else None,
                timeout=self.openapi_config.timeout,
                # it must be false for internal tools and usage
                verify= False
            )

            # Check if the request was successful
            response.raise_for_status()

            # Return the content with proper encoding handled by requests
            return response.text

        except requests.exceptions.HTTPError as e:
            # Handle HTTP errors (4XX, 5XX responses)
            status_code = e.response.status_code if e.response else "Unknown"
            error_content = e.response.text if e.response else str(e)
            return self._format_error_response(
                f"HTTP Error {status_code}",
                f"The server returned an error: {error_content}"
            )

        except requests.exceptions.ConnectionError:
            # Handle connection errors
            return self._format_error_response(
                "Connection Error",
                f"Failed to establish a connection to {url}"
            )

        except requests.exceptions.Timeout:
            # Handle timeout errors
            return self._format_error_response(
                "Timeout Error",
                f"The request to {url} timed out"
            )

        except requests.exceptions.RequestException as e:
            # Handle any other requests-related errors
            return self._format_error_response(
                "Request Error",
                f"An error occurred during the request: {str(e)}"
            )

        except Exception as e:
            # Handle any other unexpected errors
            return self._format_error_response(
                "Unexpected Error",
                f"An unexpected error occurred: {str(e)}"
            )


class GetOpenApiSpec(CodeMieTool):
    openapi_spec: str = Field(exclude=True, default=None)
    name: str = OPEN_API_SPEC_TOOL.name
    description: str = OPEN_API_SPEC_TOOL.description
    args_schema: Type[BaseModel] = GetOpenApiSpecToolInput

    def __init__(self, openapi_config: OpenApiConfig):
        super().__init__()
        self.openapi_spec = openapi_config.spec

    def execute(self, *args, **kwargs: Any) -> Any:
        return self.openapi_spec
