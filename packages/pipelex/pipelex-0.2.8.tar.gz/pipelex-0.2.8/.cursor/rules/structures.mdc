---
description: 
globs: **/pipelex_libraries/pipelines/structures/**/*.py
alwaysApply: false
---
Rules to write structure classes for concepts used in pipes with structured generations.
In particular, these structures are generated by PipeLLM using structured generation.

# Structured Models Rules

## Model Location and Registration

- Create models for structured generations related to "some_domain" in `pipelex/pipelex_libraries/pipelines/structures/<some_domain>.py`
- Models must inherit from `StructuredContent` or appropriate content type

## Model Structure

```python
from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field

from pipelex.core.stuff_content import StructuredContent

class YourModel(StructuredContent):
    # Required fields
    field1: str
    field2: int

    # Optional fields with defaults
    field3: Optional[str] = Field(None, "Description of field3")
    field4: List[str] = Field(default_factory=list)

    # Date fields should remove timezone
    date_field: Optional[datetime] = None

    @field_validator("date_field")
    @classmethod
    def remove_tzinfo(cls, v: Optional[datetime]) -> Optional[datetime]:
        if v is not None:
            return v.replace(tzinfo=None)
        return v
```

## Best Practices for structures

- Respect Pydantic v2 standards
- Use type hints for all fields
- Use `Field` declaration and write the description
- Use Pydantic validators for data cleaning/validation
- Remove timezone info from datetime fields
- Respect rules of [pydantic.mdc](mdc:.cursor/rules/pydantic.mdc)
