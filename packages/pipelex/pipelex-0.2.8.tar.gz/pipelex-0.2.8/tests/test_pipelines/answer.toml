

domain = "answer"
definition = "The domain for questions and answers"

[concept]
Answer = "An answer to a question"
Question = "A question to a problem"
EnrichedQuestion = "An enriched question"
GroundTruth = "The ground truth answer"
Correctness = "Correctness of an answer"
YesNo = "Yes/No answer format"

[pipe]
[pipe.write_context_of_text]
PipeLLM = "Write the context of a sample of text"
input = "native.Text"
output = "native.Text"
llm = "llm_to_retrieve"
prompt_template = """
You will receive a text. 
Your task is to write the context of the text.
This context should be maximum of 30 words. The goal is to quickly understand the type of ducument by just reding this context.

@text
"""

[pipe.retrieve_excerpts]
PipeLLM = "Find the most relevant excerpts in a text that answers a specific question"
input = "native.Text"
output = "retrieve.RetrievedExcerpt"
llm = "llm_to_retrieve"
multiple_output = true
prompt_template = """
@text

@question

Your task is to find all relevant excerpts from the text that contribute to answering this question.
It might not contain the exact answer, but it should be relevant to the question.

Output each excerpt and its justification in the specified structured format, but ONLY for actual found excerpts.
"""

[pipe.enrich_question]
PipeLLM = "Get an enriched question"
input = "answer.Question"
output = "EnrichedQuestion"
llm = "llm_to_enrich"
prompt_template = """
Your task is to reformulate a form field into a question for a LLM.

@context

Here is the name of one of the fields in a form I have to fill in: '{{ question|format }}'.
Each word is important therefore do not extrapolate or create information.

{% if client_instructions %}
    Here are important instructions from the customer to take into account in order to enrich the question.
    The client instructions are important and you absolutely must follow them. However, it DOES NOT contain the answer.
    @client_instructions
{% endif %}

{% if target_concept.content.choices %}
    To help you understand the question and potential ambiguity, here are the ONLY possible values for the answer:
    {% for value in target_concept.content.choices %}
    - {{ value }}
    {% endfor %}
{% endif %}
You can always choose to ouput this base fallback answer:
{% for value in target_concept.content.BaseAnswer %}
- {{ value }}
{% endfor %}

{% if target_concept.content.model_fields %}
    Here are the fields that you have to fill in:
    {% for field_name, field in target_concept.content.model_fields.items() %}
    - {{ field_name }}: {{ field.annotation }}
    {% endfor %}
{% endif %}

{% if target_concept.content.__doc__ %}
Here are some guidelines about the desired output of the answer.
{{ target_concept.content.__doc__ }}
{% endif %}

Here is the main task: If I were to prompt an LLM to extract this information from a specific section of the contract, what should I ask?

Here are some rules that you absolutely must follow:
- No need to add instructions like "based on the provided contract", just write the question in English, no need for code.
- No need for intros like "Here is a reformulated question", just write the question.
- It is important that you specify that the question is a Yes/No question if it is the case.
"""

[pipe.clean_answer]
PipeLLM = "Clean the answer"
input = "native.Dynamic"
output = "native.Dynamic"
prompt_template = """
You are helping to clean answers that were generated from analyzing document excerpts to answer specific questions.

Here is the answer to clean:
@answer

Your task is to clean the answer by handling cases where no clear answer could be found in the document excerpts.

ONLY output the cleaned answer - do not add any explanation or commentary.

If the answer contains any of these patterns, output "Indeterminate":
- Empty or blank answers (including empty JSON objects)
- Statements indicating no relevant information was found
- Phrases like:
  * "The excerpts are not relevant to the question"
  * "There is nothing relevant in the document to answer"
  * "Based on the document, there is nothing..."
  * "No information found in the document"
  * "Cannot determine from the provided excerpts"
  * "No relevant excerpts were found"

Important rules:
- Keep "NO" answers unchanged
- Keep "not_applicable" or "indeterminate" answers unchanged
- Preserve all other valid answers exactly as they are
- DO NOT add any explanation or commentary to your output

{% if target_concept.content.model_fields %}
    Here are the fields that you have to fill in:
    {% for field_name, field in target_concept.content.model_fields.items() %}
    - {{ field_name }}: {{ field.annotation }}
    {% endfor %}
{% endif %}

{% if target_concept.content.__doc__ %}
Here are some guidelines about the desired output of the answer.
{{ target_concept.content.__doc__ }}
{% endif %}
"""

[pipe.pre_answer_question]
PipeLLM = "Answer the question in a dynamically specified format"
input = "EnrichedQuestion"
output = "native.Dynamic"
llm = "llm_to_answer"
prompt_template = """
Your task is to extract information in a contract.

Here is some context about the contract:
@context

To help you, your assistant has already enriched the question and extracted the most relevant excerpts{% if client_instructions %}, 
and provided you with some hints (can be considered as client instructions){% endif %}.

Here is the question:
@enriched_question

Here are the relevant excerpts:
Not all of them are necessarily relevant to the question, but all of them are relevant to the contract.
@excerpts

{% if client_instructions %}
Here are important instructions from the customer to take into account in order to enrich the question.
The client instructions are important and you absolutely must follow them. However, it DOES NOT contain the answer.
@client_instructions
{% endif %}

{% if target_concept.content.choices %}
To help you understand the question and potential ambiguity, here are the ONLY possible values for the answer:
{% for value in target_concept.content.choices %}
- {{ value }}
{% endfor %}
{% endif %}
You can always choose to ouput this base fallback answer:
{% for value in target_concept.content.BaseAnswer %}
- {{ value }}
{% endfor %}

{% if target_concept.content.model_fields %}
Here are the fields that you have to fill in:
{% for field_name, field in target_concept.content.model_fields.items() %}
- {{ field_name }}: {{ field.annotation }}
{% endfor %}
{% endif %}

{% if target_concept.content.__doc__ %}
Here are some guidelines about the desired output of the answer.
{{ target_concept.content.__doc__ }}
{% endif %}

Important rules for answering:
- For Yes/No questions: Answer "NO" if no excerpts or inconclusive evidence (with explanation) are provided.
- For multiple choice questions: Mark as "indeterminate" if no excerpts or inconclusive evidence (with explanation) are provided.
- Always cite the answer with citations EXCEPT when the answer is "indeterminate"
- When evidence is clear: Provide answer with citations
- When no answer is applicable, or the answer says that its not applicable, mark as "not_applicable" with explanation.
- If the target_format is FreeText, it must be a text.
- [IMPORTANT] DO NOT add commentaries like "Based on.. According to...", just output the answer.
- [IMPORTANT] DO NOT extrapolate or create information. Base your answer solely on the provided excerpts.
- Please, cite the exact sentences that you used to answer the question in a "citation" paragraph. 
- Make sure that you also cite the clause number if provided (20.1 for instance).

Here is the fields format of the answer you must output:
answer, citations, short_comment
"""

[pipe.answer_question]
PipeSequence = "Answer the question in a dynamically specified format"
input = "EnrichedQuestion"
output = "native.Dynamic"
steps = [
    { pipe = "pre_answer_question", result = "answer" },
    { pipe = "clean_answer", result = "cleaned_answer" },
]

[pipe.retrieve_then_answer]
PipeSequence = "Answer a question, given the target type and the excerpts neeeded to answer it"
input = "answer.Question"
output = "native.Dynamic"
steps = [
    { pipe = "write_context_of_text", result = "context" },
    { pipe = "retrieve_excerpts", result = "excerpts" },
    { pipe = "enrich_question", result = "enriched_question" },
    { pipe = "answer_question", result = "answer" },
]

[pipe.verify_correctness]
PipeLLM = "Verify the correctness of the answer"
input = "Answer"
output = "Correctness"
prompt_template = """
You are a helpful assistant that verifies the correctness of an answer.

Your task is to verify if the answer is correct or not compared to a ground truth. 
Sometimes the answer is correct, sometimes it is not.

Here is the question it was asked:
@question

Here is the answer to verify:
@answer

Here is the expected answer:
@ground_truth

Consider that the ground_truth is always correct.
If the ground_truth is empty, consider that the answer should be "not_applicable" or "indeterminate", or that no excerpts was found.
If the grund_truth is an extract of a clause of a contract, or multiple clauses, try to find out if the answer is globally the same clause that was extracted. 
If the answer miss a lot of information, it is wrong. If it extracted more, it is correct.

Here is the format of the answer you must output:
correctness as a boolean, explanation as a string
"""
