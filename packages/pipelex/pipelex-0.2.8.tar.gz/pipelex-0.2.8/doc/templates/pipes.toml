

domain = "template"
definition = "Template file demonstrating different pipe types in Pipelex"

[concept]
InputText = "A text input for processing"
OutputText = "A processed text output"
TableScreenshot = "An image of a table"
HtmlTable = "An HTML table representation"
Question = "A question to be answered"
FormattedAnswer = "A formatted answer to a question"
ExpenseReportText = "Text content of an expense report"
Composite = "A composite output containing multiple pieces of information"
Expense = "An expense record"
RulesToApply = "Rules to be applied to an expense"

[pipe]
# Example of a PipeLLM
[pipe.process_text]
PipeLLM = "Process input text using an LLM"
input = "Text"
output = "Text"
llm = "llm_to_summarize_text"
system_prompt = """
You are an expert in text summarization.
"""
prompt_template = """
Summarize the following text:
@text
"""

# Example of a PipeLLM with image processing
[pipe.get_html_table_from_image]
PipeLLM = "Convert table screenshot to HTML"
input = "TableScreenshot"
output = "HtmlTable"
images = ["table_screenshot"]
system_prompt = """
You are a vision-based table extractor.
"""
prompt_template = """
You are given a picture (screenshot) of a table, taken from a PDF document. 
Your goal is to extract the table from the image **in html**.
Make sure you do not forget any text. Make sure you do not invent any text. 
Make sure your merge is consistent. Make sure you replicate the formatting 
(borders, text formatting, colors, text alignment...)
"""
llm = "llm_to_extract_tables"
llm_to_structure = "llm_to_extract_tables"

# Example of a PipeSequence
[pipe.answer_question_with_instructions]
PipeSequence = "Answer a question with instructions"
input = "Question"
output = "FormattedAnswer"
steps = [
    { result = "instructions", pipe = "enrich_instructions" },
    { result = "answer", pipe = "answer_enriched_question" },
    { result = "formatted_answer", pipe = "format_answer" },
]

# Example of a PipeParallel
[pipe.extract_expense_report]
PipeParallel = "Extract useful information from an expense report"
input = "ExpenseReportText"
output = "Composite"
parallels = [
    { pipe = "extract_employee_from_expense_report", result = "employee" },
    { pipe = "extract_expenses_from_expense_report", result = "expenses" },
]

# Example of a PipeCondition
[pipe.expense_conditional_validation]
PipeCondition = "Choose the rules to apply"
input = "Expense"
output = "RulesToApply"
expression = "expense_category.category"
