#!/usr/bin/env python3
"""
ETDI End-to-End Demo Runner

This script demonstrates the complete ETDI security toolchain including:
- Tool Registration/Provider SDK
- Custom OAuth Providers  
- Event System
- Tool Discovery from MCP Servers
- Real attack prevention
"""

import asyncio
import logging
import sys
import time
from pathlib import Path
from typing import Dict, Any
import os

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


async def demo_tool_provider_sdk():
    """Demonstrate the Tool Provider SDK"""
    print("\nüîß Tool Provider SDK Demo")
    print("=" * 50)
    
    try:
        from mcp.etdi.server.tool_provider import ToolProvider
        from mcp.etdi.types import Permission, OAuthConfig
        from mcp.etdi.oauth import OAuthManager, Auth0Provider
        
        # First, demonstrate basic tool provider without OAuth
        print("üìã Creating Basic Tool Provider (No OAuth)")
        basic_provider = ToolProvider(
            provider_id="basic-demo-provider",
            provider_name="Basic Demo Tool Provider",
            private_key=None,
            oauth_manager=None
        )
        
        # Register a basic tool without OAuth
        basic_tool = await basic_provider.register_tool(
            tool_id="basic-calculator",
            name="Basic Calculator",
            version="1.0.0",
            description="A basic calculator tool (no OAuth required)",
            schema={
                "type": "object",
                "properties": {
                    "operation": {"type": "string", "enum": ["add", "subtract", "multiply", "divide"]},
                    "a": {"type": "number"},
                    "b": {"type": "number"}
                },
                "required": ["operation", "a", "b"]
            },
            permissions=[
                Permission(
                    name="calculate",
                    description="Perform mathematical calculations",
                    scope="math:calculate",
                    required=True
                )
            ],
            use_oauth=False  # No OAuth for this tool
        )
        
        print(f"‚úÖ Registered basic tool: {basic_tool.name}")
        print(f"   Tool ID: {basic_tool.id}")
        print(f"   Version: {basic_tool.version}")
        print(f"   OAuth Enabled: {basic_tool.security and basic_tool.security.oauth is not None}")
        
        # Now demonstrate OAuth configuration (but handle auth failures gracefully)
        print(f"\nüìã Creating OAuth-Enabled Tool Provider")
        
        # Create OAuth configuration using real Auth0 credentials
        oauth_config = OAuthConfig(
            provider="auth0",
            client_id="2XrZkaLO4Tj7xlk4dLysqVVjETg2xNZo",  # ETDI Tool Registry (Test Application)
            client_secret="demo-secret",  # Placeholder - would need real secret for production
            domain=os.getenv("ETDI_AUTH0_DOMAIN", "your-auth0-domain.auth0.com"),
            audience="https://api.etdi.example.com",  # ETDI Tool Registry API
            scopes=["read", "write", "execute", "admin"]
        )
        
        # Create OAuth manager and Auth0 provider
        oauth_manager = OAuthManager()
        auth0_provider = Auth0Provider(oauth_config)
        oauth_manager.register_provider("auth0", auth0_provider)
        
        print(f"‚úÖ OAuth Manager created with Auth0 provider")
        print(f"   Provider: {oauth_config.provider}")
        print(f"   Client ID: {oauth_config.client_id}")
        print(f"   Domain: {oauth_config.domain}")
        print(f"   Audience: {oauth_config.audience}")
        
        # Create a tool provider with OAuth integration
        oauth_provider = ToolProvider(
            provider_id="auth0-demo-provider",
            provider_name="Auth0 Demo Tool Provider",
            private_key=None,  # Using OAuth instead of cryptographic signing
            oauth_manager=oauth_manager
        )
        
        print(f"‚úÖ Tool Provider created with OAuth integration")
        
        # Try to register a tool with OAuth authentication (handle auth failure gracefully)
        print(f"\nüîê Attempting OAuth-protected tool registration...")
        
        try:
            oauth_tool = await oauth_provider.register_tool(
                tool_id="auth0-secure-calculator",
                name="Auth0 Secure Calculator",
                version="1.0.0",
                description="A secure calculator tool protected by Auth0 OAuth",
                schema={
                    "type": "object",
                    "properties": {
                        "operation": {"type": "string", "enum": ["add", "subtract", "multiply", "divide"]},
                        "a": {"type": "number"},
                        "b": {"type": "number"}
                    },
                    "required": ["operation", "a", "b"]
                },
                permissions=[
                    Permission(
                        name="calculate",
                        description="Perform mathematical calculations",
                        scope="execute",  # Maps to Auth0 API scope
                        required=True
                    ),
                    Permission(
                        name="read_results",
                        description="Read calculation results",
                        scope="read",  # Maps to Auth0 API scope
                        required=True
                    )
                ],
                use_oauth=True  # Enable OAuth for this tool
            )
            
            print(f"üéâ SUCCESS! Registered OAuth-protected tool: {oauth_tool.name}")
            print(f"   Tool ID: {oauth_tool.id}")
            print(f"   Version: {oauth_tool.version}")
            print(f"   OAuth Enabled: {oauth_tool.security and oauth_tool.security.oauth is not None}")
            print(f"   Required Scopes: {[p.scope for p in oauth_tool.permissions if p.required]}")
            
        except Exception as oauth_error:
            print(f"‚ö†Ô∏è OAuth tool registration failed (expected with demo credentials): {oauth_error}")
            print(f"   This is normal - the demo uses placeholder credentials")
            print(f"   In production, you would use real Auth0 client secrets")
            
            # Register the same tool without OAuth as fallback
            fallback_tool = await oauth_provider.register_tool(
                tool_id="fallback-secure-calculator",
                name="Fallback Secure Calculator",
                version="1.0.0",
                description="A secure calculator tool (OAuth disabled for demo)",
                schema={
                    "type": "object",
                    "properties": {
                        "operation": {"type": "string", "enum": ["add", "subtract", "multiply", "divide"]},
                        "a": {"type": "number"},
                        "b": {"type": "number"}
                    },
                    "required": ["operation", "a", "b"]
                },
                permissions=[
                    Permission(
                        name="calculate",
                        description="Perform mathematical calculations",
                        scope="execute",
                        required=True
                    ),
                    Permission(
                        name="read_results",
                        description="Read calculation results",
                        scope="read",
                        required=True
                    )
                ],
                use_oauth=False  # Disable OAuth for demo
            )
            
            print(f"‚úÖ Registered fallback tool: {fallback_tool.name}")
            print(f"   Tool ID: {fallback_tool.id}")
            print(f"   OAuth Enabled: {fallback_tool.security and fallback_tool.security.oauth is not None}")
        
        # Update a tool to show versioning
        updated_tool = await basic_provider.update_tool(
            tool_id="basic-calculator",
            version="1.1.0",
            description="Enhanced basic calculator with additional operations",
            permissions=[
                Permission(
                    name="calculate",
                    description="Perform mathematical calculations",
                    scope="math:calculate",
                    required=True
                ),
                Permission(
                    name="advanced_math",
                    description="Perform advanced mathematical operations",
                    scope="math:advanced",
                    required=False
                )
            ]
        )
        
        print(f"\n‚úÖ Updated tool to version: {updated_tool.version}")
        print(f"   New permissions: {[p.name for p in updated_tool.permissions]}")
        
        # Get provider stats for both providers
        basic_stats = basic_provider.get_provider_stats()
        oauth_stats = oauth_provider.get_provider_stats()
        
        print(f"\nüìä Provider Statistics:")
        print(f"   Basic Provider:")
        print(f"     - Total tools: {basic_stats['total_tools']}")
        print(f"     - OAuth enabled tools: {basic_stats['oauth_enabled_tools']}")
        print(f"     - Cryptographically signed tools: {basic_stats['cryptographically_signed_tools']}")
        
        print(f"   OAuth Provider:")
        print(f"     - Total tools: {oauth_stats['total_tools']}")
        print(f"     - OAuth enabled tools: {oauth_stats['oauth_enabled_tools']}")
        print(f"     - Cryptographically signed tools: {oauth_stats['cryptographically_signed_tools']}")
        
        # Demonstrate OAuth integration details
        print(f"\nüîê Auth0 Integration Details:")
        print(f"   - Token endpoint: {auth0_provider.get_token_endpoint()}")
        print(f"   - JWKS URI: {auth0_provider.get_jwks_uri()}")
        print(f"   - Expected issuer: {auth0_provider._get_expected_issuer()}")
        print(f"   - Required audience: {oauth_config.audience}")
        print(f"   - Available scopes: {oauth_config.scopes}")
        
        print(f"\nüéØ Tool Provider SDK Features Demonstrated:")
        print(f"   ‚úÖ Basic tool registration (no OAuth)")
        print(f"   ‚úÖ OAuth provider configuration")
        print(f"   ‚úÖ Tool versioning and updates")
        print(f"   ‚úÖ Permission management")
        print(f"   ‚úÖ Provider statistics")
        print(f"   ‚úÖ Graceful OAuth failure handling")
        
        print(f"\nüí° Production Notes:")
        print(f"   ‚Ä¢ Replace demo credentials with real Auth0 secrets")
        print(f"   ‚Ä¢ Configure proper client grants in Auth0")
        print(f"   ‚Ä¢ Use environment variables for sensitive data")
        print(f"   ‚Ä¢ Implement proper error handling and retry logic")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Tool Provider Demo failed: {e}")
        import traceback
        traceback.print_exc()
        return False


def demo_custom_oauth_provider():
    """Demonstrate Custom OAuth Provider"""
    print("\nüîê Custom OAuth Provider Demo")
    print("=" * 50)
    
    try:
        from mcp.etdi.oauth.custom import GenericOAuthProvider
        from mcp.etdi.types import OAuthConfig
        
        # Define custom OAuth endpoints
        custom_endpoints = {
            "token_endpoint": "https://my-oauth.example.com/oauth/token",
            "jwks_uri": "https://my-oauth.example.com/.well-known/jwks.json",
            "userinfo_endpoint": "https://my-oauth.example.com/userinfo",
            "revoke_endpoint": "https://my-oauth.example.com/oauth/revoke",
            "issuer": "https://my-oauth.example.com"
        }
        
        # Create OAuth config for custom provider
        oauth_config = OAuthConfig(
            provider="custom",
            client_id="my-custom-client",
            client_secret="my-custom-secret",
            domain="my-oauth.example.com",
            audience="https://my-api.example.com",
            scopes=["read", "write"]
        )
        
        # Create custom provider
        custom_provider = GenericOAuthProvider(oauth_config, custom_endpoints)
        
        print(f"‚úÖ Created custom OAuth provider")
        print(f"   Provider: {oauth_config.provider}")
        print(f"   Token Endpoint: {custom_provider.get_token_endpoint()}")
        print(f"   JWKS URI: {custom_provider.get_jwks_uri()}")
        print(f"   Userinfo Endpoint: {custom_provider.userinfo_endpoint}")
        print(f"   Expected Issuer: {custom_provider._get_expected_issuer()}")
        
        print("   ‚úÖ Custom provider ready for use with real OAuth endpoints")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Custom OAuth Provider Demo failed: {e}")
        return False


def demo_event_system():
    """Demonstrate the Event System"""
    print("\nüì° Event System Demo")
    print("=" * 50)
    
    try:
        from mcp.etdi.events import EventType, emit_tool_event, emit_security_event, get_event_emitter
        
        # Get the global event emitter
        emitter = get_event_emitter()
        
        # Event counters
        events_received = {"count": 0, "events": []}
        
        # Register event listeners
        def on_tool_verified(event):
            events_received["count"] += 1
            events_received["events"].append(f"Tool verified: {event.tool_id}")
            print(f"üéâ Event: Tool verified - {event.tool_id}")
        
        def on_tool_approved(event):
            events_received["count"] += 1
            events_received["events"].append(f"Tool approved: {event.tool_id}")
            print(f"‚úÖ Event: Tool approved - {event.tool_id}")
        
        def on_security_event(event):
            events_received["count"] += 1
            events_received["events"].append(f"Security event: {event.type.value}")
            print(f"üö® Security Event: {event.type.value} - Severity: {event.severity}")
        
        # Register listeners
        emitter.on(EventType.TOOL_VERIFIED, on_tool_verified)
        emitter.on(EventType.TOOL_APPROVED, on_tool_approved)
        emitter.on(EventType.SECURITY_VIOLATION, on_security_event)
        
        print("‚úÖ Registered event listeners for:")
        print("   - TOOL_VERIFIED")
        print("   - TOOL_APPROVED") 
        print("   - SECURITY_VIOLATION")
        
        # Simulate some events
        emit_tool_event(
            EventType.TOOL_VERIFIED,
            "demo-tool",
            "EventDemo",
            tool_name="Demo Tool",
            tool_version="1.0.0"
        )
        
        emit_tool_event(
            EventType.TOOL_APPROVED,
            "demo-tool",
            "EventDemo",
            tool_name="Demo Tool",
            tool_version="1.0.0"
        )
        
        emit_security_event(
            EventType.SECURITY_VIOLATION,
            "EventDemo",
            "high",
            threat_type="demo_violation",
            details={"reason": "Demonstration security event"}
        )
        
        print(f"\nüìä Event System Results:")
        print(f"   - Total events received: {events_received['count']}")
        print(f"   - Events: {events_received['events']}")
        
        # Get event history
        history = emitter.get_event_history(limit=5)
        print(f"   - Recent events in history: {len(history)}")
        
        # Show listener counts
        print(f"   - TOOL_VERIFIED listeners: {emitter.get_listener_count(EventType.TOOL_VERIFIED)}")
        print(f"   - TOOL_APPROVED listeners: {emitter.get_listener_count(EventType.TOOL_APPROVED)}")
        print(f"   - SECURITY_VIOLATION listeners: {emitter.get_listener_count(EventType.SECURITY_VIOLATION)}")
        
        # Clean up
        emitter.remove_all_listeners(EventType.TOOL_VERIFIED)
        emitter.remove_all_listeners(EventType.TOOL_APPROVED)
        emitter.remove_all_listeners(EventType.SECURITY_VIOLATION)
        
        return True
        
    except Exception as e:
        print(f"‚ùå Event System Demo failed: {e}")
        return False


async def demo_mcp_discovery():
    """Demonstrate MCP Tool Discovery"""
    print("\nüîç MCP Tool Discovery Demo")
    print("=" * 50)
    
    try:
        from mcp.etdi.client.etdi_client import ETDIClient
        from mcp.etdi.types import ETDIClientConfig, SecurityLevel
        
        # Create ETDI client configuration
        config = ETDIClientConfig(
            security_level=SecurityLevel.BASIC,
            oauth_config=None,  # No OAuth for basic demo
            allow_non_etdi_tools=True,
            show_unverified_tools=True
        )
        
        # Create ETDI client
        client = ETDIClient(config)
        await client.initialize()
        
        print("‚úÖ ETDI Client initialized with enhanced features:")
        print("   - MCP server connection support")
        print("   - Real-time tool discovery")
        print("   - Event-driven notifications")
        print("   - Security-level filtering")
        
        # Show the new capabilities
        print("\nüîß New MCP Integration Capabilities:")
        print("   - connect_to_server(command, name) - Connect to MCP servers")
        print("   - discover_tools(server_ids) - Discover tools from servers")
        print("   - Real-time event emission for all operations")
        print("   - Security-level based tool filtering")
        print("   - Tool verification before invocation")
        
        # Get client stats
        stats = await client.get_stats()
        print(f"\nüìä Enhanced Client Stats:")
        print(f"   - Security level: {stats.get('security_level', 'N/A')}")
        print(f"   - OAuth enabled: {stats.get('oauth_enabled', False)}")
        print(f"   - Connected servers: {stats.get('connected_servers', 0)}")
        print(f"   - Discovered tools: {stats.get('discovered_tools', 0)}")
        
        await client.cleanup()
        
        return True
        
    except Exception as e:
        print(f"‚ùå MCP Discovery Demo failed: {e}")
        return False


async def demo_security_features():
    """Demonstrate existing security features"""
    print("\nüõ°Ô∏è Core Security Features Demo")
    print("=" * 50)
    
    try:
        # Import and run the existing client demo
        from e2e_secure_client import SecureBankingClient
        
        client = SecureBankingClient()
        
        # Run the attack prevention tests
        await client.demonstrate_attack_prevention()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Security Features Demo failed: {e}")
        return False


async def run_complete_demo():
    """Run the complete ETDI demonstration with all new features"""
    print("üöÄ ETDI Complete Feature Demonstration")
    print("=" * 70)
    print("This demo showcases ETDI's comprehensive security platform:")
    print("‚Ä¢ Tool Registration/Provider SDK")
    print("‚Ä¢ Custom OAuth Provider Support")
    print("‚Ä¢ Event-Driven Architecture")
    print("‚Ä¢ MCP Server Integration")
    print("‚Ä¢ Real Attack Prevention")
    print("=" * 70)
    
    # Track demo results
    demo_results = []
    
    # Run all feature demonstrations
    demos = [
        ("Tool Provider SDK", demo_tool_provider_sdk()),
        ("Custom OAuth Providers", demo_custom_oauth_provider()),
        ("Event System", demo_event_system()),
        ("MCP Discovery", demo_mcp_discovery()),
        ("Security Features", demo_security_features())
    ]
    
    for demo_name, demo_coro in demos:
        print(f"\n{'='*20} {demo_name} {'='*20}")
        try:
            if asyncio.iscoroutine(demo_coro):
                result = await demo_coro
            else:
                result = demo_coro
            demo_results.append((demo_name, result))
        except Exception as e:
            print(f"‚ùå {demo_name} failed: {e}")
            demo_results.append((demo_name, False))
    
    # Show final results
    print("\n" + "=" * 70)
    print("üéØ ETDI COMPLETE DEMONSTRATION RESULTS")
    print("=" * 70)
    
    successful_demos = sum(1 for _, success in demo_results if success)
    total_demos = len(demo_results)
    
    for demo_name, success in demo_results:
        status = "‚úÖ SUCCESS" if success else "‚ùå FAILED"
        print(f"{status} {demo_name}")
    
    print(f"\nüìä Results: {successful_demos}/{total_demos} demonstrations successful")
    
    if successful_demos == total_demos:
        print("\nüéâ ALL DEMONSTRATIONS SUCCESSFUL!")
        print("\n‚úÖ ETDI Implementation Verified:")
        print("   ‚úì Tool Registration/Provider SDK - IMPLEMENTED")
        print("   ‚úì Custom OAuth Provider Support - IMPLEMENTED")
        print("   ‚úì Event System - IMPLEMENTED")
        print("   ‚úì MCP Tool Discovery - IMPLEMENTED")
        print("   ‚úì Real Security Attack Prevention - IMPLEMENTED")
        print("\nüåü ETDI successfully transforms MCP into a comprehensive")
        print("   enterprise-ready security platform!")
    else:
        print(f"\n‚ö†Ô∏è {total_demos - successful_demos} demonstration(s) had issues.")
        print("   Some features may need additional configuration or dependencies.")
    
    print("\n" + "=" * 70)
    print("üöÄ ETDI: From Development Protocol to Enterprise Security Platform")
    print("=" * 70)
    
    return successful_demos == total_demos


def main():
    """Main entry point"""
    try:
        result = asyncio.run(run_complete_demo())
        sys.exit(0 if result else 1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Demo interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚ùå Demo failed with unexpected error: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()