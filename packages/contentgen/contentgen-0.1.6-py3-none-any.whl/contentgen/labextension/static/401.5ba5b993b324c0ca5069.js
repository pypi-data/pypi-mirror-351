"use strict";(self.webpackChunkcontentgen=self.webpackChunkcontentgen||[]).push([[401],{56:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},72:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var i={},r=[],s=0;s<n.length;s++){var l=n[s],c=o.base?l[0]+o.base:l[0],d=i[c]||0,p="".concat(c," ").concat(d);i[c]=d+1;var u=t(p),g={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)e[u].references++,e[u].updater(g);else{var m=a(g,o);o.byIndex=s,e.splice(s,0,{identifier:p,updater:m,references:1})}r.push(p)}return r}function a(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,a){var i=o(n=n||[],a=a||{});return function(n){n=n||[];for(var r=0;r<i.length;r++){var s=t(i[r]);e[s].references--}for(var l=o(n,a),c=0;c<i.length;c++){var d=t(i[c]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}i=l}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},265:(n,e,t)=>{t.d(e,{A:()=>c});var o=t(601),a=t.n(o),i=t(314),r=t.n(i),s=t(475),l=r()(a());l.i(s.A),l.push([n.id,"/* Base container styles */\n.chatbot-panel {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: #ffffff;\n  position: relative;\n  font-family: 'Google Sans', -apple-system, BlinkMacSystemFont, sans-serif;\n  padding: 0 16px;\n}\n\n.chat-container {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  color: #1f1f1f;\n  font-size: 14px;\n}\n\n/* Messages area */\n.messages-container {\n  position: absolute;\n  top: 16px;\n  left: 0;\n  right: 0;\n  bottom: 210px;\n  overflow-y: scroll;\n  padding: 20px;\n  z-index: 95;\n}\n\n/* Message bubbles */\n.chat-message {\n  padding: 12px 16px;\n  border-radius: 8px;\n  font-size: 13px;\n  line-height: 1.5;\n  max-width: 85%;\n  margin: 8px 0;\n}\n\n.chat-message.user {\n  background: #e8f0fe;\n  margin-left: auto;\n  border-bottom-right-radius: 4px;\n}\n\n.chat-message.assistant {\n  background: #f8f9fa;\n  border-bottom-left-radius: 4px;\n}\n\n.chat-message.system {\n  background: #f1f3f4;\n  color: #5f6368;\n  font-style: italic;\n  text-align: center;\n  max-width: 100%;\n}\n\n/* Code block styling in chat messages */\n.chat-message pre {\n  background-color: #f5f5f5;\n  border-radius: 4px;\n  padding: 10px;\n  margin: 8px 0;\n  overflow-x: auto;\n  border-left: 3px solid #3498db;\n}\n\n.chat-message code {\n  font-family: 'Menlo', 'Monaco', 'Courier New', monospace;\n  font-size: 0.9em;\n}\n\n/* Python code specific styling */\n.chat-message pre.python-code {\n  background-color: #f5f5f5;\n  border-radius: 4px;\n  padding: 10px;\n  margin: 8px 0;\n  overflow-x: auto;\n  border-left: 3px solid #4b8bf4;\n  font-family: 'Menlo', 'Monaco', 'Courier New', monospace;\n  font-size: 0.9em;\n}\n\n/* Question styling */\n.chat-message .question-text {\n  font-weight: 500;\n  margin-bottom: 10px;\n}\n\n/* Answer label styling */\n.chat-message .answer-label {\n  font-weight: 600;\n  color: #2c3e50;\n  margin-top: 15px;\n  margin-bottom: 5px;\n}\n\n/* Input area */\n.input-container {\n  position: absolute;\n  bottom: 50px;\n  left: 16px;\n  right: 16px;\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  padding: 8px;\n  background: #ffffff;\n  border: 1px solid rgba(0, 0, 0, 0.08);\n  border-radius: 12px;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);\n  z-index: 98;\n}\n\n.chat-input {\n  flex: 1;\n  font-family: inherit;\n  font-size: 13px;\n  padding: 12px 16px;\n  border: none;\n  background: transparent;\n  resize: none;\n  min-height: 24px;\n  max-height: 120px;\n  border-radius: 8px;\n}\n\n.chat-input:focus {\n  outline: none;\n}\n\n/* Placeholder text size */\n.chat-input::placeholder {\n  font-size: 13px;\n  color: #5f6368;\n}\n\n/* Buttons */\n.mode-toggle {\n  width: 40px;\n  height: 40px;\n  padding: 0;\n  font-size: 18px;\n  border-radius: 50%;\n  border: 1px solid #dadce0;\n  background: transparent;\n  color: #1a73e8;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  line-height: 1;\n}\n\n#chat-buttons-container {\n  position: absolute;\n  bottom: 130px;\n  right: 24px;\n  display: flex;\n  gap: 12px;\n  padding: 8px 16px;\n  z-index: 99;\n  background: #ffffff;\n}\n\n.apply-btn,\n.cancel-btn {\n  font-family: inherit;\n  font-size: 14px;\n  font-weight: 500;\n  padding: 0 24px;\n  height: 36px;\n  border-radius: 8px;\n  border: none;\n  cursor: pointer;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.2s ease;\n}\n\n.apply-btn {\n  background: #1a73e8;\n  color: white;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12);\n}\n\n.cancel-btn {\n  background: #fff;\n  color: #1a73e8;\n  border: 1px solid rgba(26, 115, 232, 0.5);\n}\n\n/* Header */\n.chat-header {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 16px 20px;\n  background: #ffffff;\n  border-top: 1px solid rgba(0, 0, 0, 0.06);\n  height: 36px;\n  z-index: 97;\n}\n\n.notebook-name-display {\n  color: #5f6368;\n  font-size: 13px;\n  font-weight: 500;\n  padding: 8px 0;\n}\n\n.model-info {\n  color: #1a73e8;\n  font-size: 13px;\n  font-weight: 500;\n  padding: 4px 12px;\n  background: rgba(26, 115, 232, 0.08);\n  border-radius: 8px;\n}\n\n/* Hover states */\n.mode-toggle:hover { background: rgba(26, 115, 232, 0.08); }\n.apply-btn:hover { background: #1557b0; }\n.cancel-btn:hover { background: rgba(26, 115, 232, 0.04); }\n\n/* Loading indicator */\n.loading-indicator {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 10px;\n}\n\n.typing-indicator {\n  display: flex;\n  align-items: center;\n}\n\n.typing-indicator span {\n  height: 8px;\n  width: 8px;\n  background: #3498db;\n  border-radius: 50%;\n  display: inline-block;\n  margin: 0 2px;\n  animation: bounce 1.5s infinite ease-in-out;\n}\n\n.typing-indicator span:nth-child(1) {\n  animation-delay: 0s;\n}\n\n.typing-indicator span:nth-child(2) {\n  animation-delay: 0.2s;\n}\n\n.typing-indicator span:nth-child(3) {\n  animation-delay: 0.4s;\n}\n\n@keyframes bounce {\n  0%, 60%, 100% {\n    transform: translateY(0);\n  }\n  30% {\n    transform: translateY(-5px);\n  }\n}\n\n/* Alert styling */\n.alert {\n  padding: 15px;\n  margin-bottom: 20px;\n  border: 1px solid transparent;\n  border-radius: 4px;\n}\n\n.alert-warning {\n  color: #8a6d3b;\n  background-color: #fcf8e3;\n  border-color: #faebcc;\n}\n\n/* Question title styling */\n.alert h3 {\n  margin-top: 0;\n  margin-bottom: 15px;\n  color: #8a6d3b;\n}\n\n/* Details/Summary styling */\ndetails {\n  margin: 15px 0;\n  padding: 10px;\n  background-color: #f8f9fa;\n  border-radius: 4px;\n}\n\ndetails summary {\n  cursor: pointer;\n  padding: 5px;\n  color: #1a73e8;\n}\n\ndetails summary:hover {\n  color: #1557b0;\n}\n\n/* Add your styles here */\n\n",""]);const c=l},314:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,a,i){"string"==typeof n&&(n=[[null,n,void 0]]);var r={};if(o)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(r[l]=!0)}for(var c=0;c<n.length;c++){var d=[].concat(n[c]);o&&r[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),e.push(d))}},e}},401:(n,e,t)=>{t.r(e),t.d(e,{default:()=>R});var o=t(549),a=t(560),i=t(256),r=t(88),s=t(689),l=t(186);async function c(n="",e={}){const t=l.ServerConnection.makeSettings(),o=s.URLExt.join(t.baseUrl,"contentgen",n);let a;try{a=await l.ServerConnection.makeRequest(o,e,t)}catch(n){throw new l.ServerConnection.NetworkError(n)}let i=await a.text();if(i.length>0)try{i=JSON.parse(i)}catch(n){console.log("Not a JSON response body.",a)}if(!a.ok)throw new l.ServerConnection.ResponseError(a,i.message||i);return i}var d=t(72),p=t.n(d),u=t(825),g=t.n(u),m=t(659),f=t.n(m),h=t(56),y=t.n(h),x=t(540),b=t.n(x),v=t(113),k=t.n(v),C=t(265),w={};w.styleTagTransform=k(),w.setAttributes=y(),w.insert=f().bind(null,"head"),w.domAPI=g(),w.insertStyleElement=b(),p()(C.A,w),C.A&&C.A.locals&&C.A.locals;let S=!1,E="",I=-1,L="",A="",P=null,N=null,M=null;const T={id:"contentgen:plugin",description:"An instructor-assistant JupyterLab extension for generating in-context lecture questions and supplementary teaching materials.",autoStart:!0,requires:[r.INotebookTracker],optional:[o.ILayoutRestorer],activate:async(n,e,t)=>{console.log("JupyterLab extension contentgen is activated!");const o=await async function(){try{console.log("Checking Gemini API key...");const n=await c("check-api-key");return console.log("Response from check-api-key:",n),n.hasKey}catch(n){return console.error("Error checking Gemini API key:",n),!1}}();console.log("Has API key:",o),o?(async()=>{const o=new i.Widget;o.node.classList.add("chatbot-panel");const s=document.createElement("div");s.classList.add("chat-container");const l=document.createElement("div");l.classList.add("chat-header");const d=document.createElement("div");d.classList.add("model-info"),d.textContent="No notebook open";const p=document.createElement("div");p.classList.add("notebook-name-display"),p.textContent="gemini-2.0-flash";const u=document.createElement("div");u.classList.add("model-info"),u.textContent="Notebook Index: ",l.appendChild(d),l.appendChild(u),l.appendChild(p),s.appendChild(l);const g=document.createElement("div");g.classList.add("messages-container"),s.appendChild(g);const m=document.createElement("div");m.classList.add("input-container");const f=document.createElement("textarea");f.classList.add("chat-input"),f.placeholder="Generate a practice question based on selected code...";const h=document.createElement("button");h.textContent="📝",h.classList.add("mode-toggle"),h.title="Toggle between Question Generation and URL Summary";let y=!1;null===M&&G(e).then((n=>{M=n})),h.addEventListener("click",(()=>{y=!y,S=!1,y?(h.textContent="🔗",f.placeholder="Enter URL to summarize content..."):(h.textContent="📝",f.placeholder="Generate a practice question based on selected code...")})),m.appendChild(h),m.appendChild(f),s.appendChild(m),o.node.appendChild(s);const x=document.createElement("div");x.id="chat-buttons-container",o.node.appendChild(x);const b=async()=>{var n,t,o,a,i,r,s,l;const d=f.value.trim();if(d){v("user",d),f.value="",k();try{const p=e.currentWidget,u=[];T();const g=[],m=/(pd\.read_(csv|excel|json|html)\(|sns\.load_dataset\(|pd\.DataFrame\(|pd\.DataFrame\.from_dict\(|pd\.DataFrame\.from_records\()/,h=[];if(p&&p.content){const x=p.content,b=null==x?void 0:x.model;if(b)try{const x=b.cells;if(!p.content)return void v("system","Error: No active notebook");const k=null!==(t=null===(n=e.currentWidget)||void 0===n?void 0:n.content.activeCellIndex)&&void 0!==t?t:0,w=[x.get(k)];if(y)for(let n=0;n<x.length;n++){const e=x.get(n);u.push({index:n+1,content:e.sharedModel.getSource()})}else{if(0===w.length)return void v("system","⚠️ Warning: Please select cells to generate a question about their content");for(let n=0;n<x.length;n++){const e=x.get(n),t=e.sharedModel.getSource();if(u.push({index:n+1,content:t}),"code"===e.type){const e=m.test(t);let o=null;if(e){h.push(n+1);const e=/(\b\w+)\s*=\s*(?:pd\.read_\w+\(|sns\.load_dataset\(|pd\.DataFrame\()/,a=t.match(e);a&&(o=a[1])}console.log("DataFrame detected: "+o),g.push({index:n+1,content:t,isDataLoading:e,dataframeVar:o})}}}let T;if(console.log(y?"URL mode - processing all cells":"Selected cells content:",w),!y){const n=null!==(a=null===(o=e.currentWidget)||void 0===o?void 0:o.content.activeCellIndex)&&void 0!==a?a:0,t=b.cells,i=[];let r=0;for(let e=n;e>=0;e--){const n=t.get(e);if("markdown"===n.type&&n.sharedModel.getSource().startsWith("#")&&r++,r>=5)break;i.unshift({index:e+1,content:n.sharedModel.getSource()})}T=i,console.log("Relevant Content: "+JSON.stringify(T))}const _={message:d,notebookContent:T||u,promptType:y?"summary":"question",selectedCell:y?null:w[w.length-1].sharedModel.getSource(),questionType:y?null:"coding",activeCellIndex:null!==(r=null===(i=e.currentWidget)||void 0===i?void 0:i.content.activeCellIndex)&&void 0!==r?r:0,isFollowup:S,previousQuestion:E,notebookStructure:M,notebookName:A,...y?{}:{notebookDirectory:L,notebookCodeCells:g}};console.log("Request body:",_),S&&(console.log("Before sending followed up logging request..."),console.log("currentRowId: "+P),console.log("userDecision: "+N)),S&&null!==P&&null===N&&await c("log-usage",{method:"POST",body:JSON.stringify({row_id:P,user_decision:"followed_up"})});const q=await c("message",{method:"POST",body:JSON.stringify(_)});console.log("Working up to here"),console.log(q),P=q.row_id,N=null;const G=q.reply.substring(7,q.reply.length-4);let R,D;try{console.log("Cropped string: "+G),R=JSON.parse(G)}catch(n){return console.error("Error parsing JSON:",n),v("system","Error: Failed to parse server response"),void C()}D=S?null===(s=e.currentWidget)||void 0===s?void 0:s.content.activeCellIndex:(null===(l=e.currentWidget)||void 0===l?void 0:l.content.activeCellIndex)+1;const J=R.summary;C();const $=D;v("assistant","Location: "+$+"\n\nSummary: "+J),console.log(`Inserting new cell at index ${$} with summary:`,J);const H=R.title||f.value;S&&I>=0&&b&&(console.log(`Removing previous cell at index ${I}`),b.sharedModel.deleteCell(I),console.log(`Deleted previous cell at index ${I}`),z()),b.sharedModel.insertCell($,{cell_type:"markdown",source:F(H,J),metadata:{temporary:!0}}),I=$,E=J,S=!0,e.currentWidget&&e.currentWidget.content&&(e.currentWidget.content.activeCellIndex=$),W($,b),setTimeout((()=>O($,b)),100)}catch(n){C(),console.error("Failed to get response:",n),v("system","Error: Failed to get response"),S=!1}}}catch(n){C(),console.error("Error in handleMessage:",n),v("system","Error: Failed to process request"),S=!1}}};f.addEventListener("keypress",(n=>{"Enter"!==n.key||n.shiftKey||(n.preventDefault(),y?f.value.trim()?(console.log("Valid URL:",f.value),b()):v("system","Error: Please input a valid link to get response"):f.value.trim()?b():v("system","Error: Please enter a question"))}));const v=(n,e)=>{const t=document.createElement("div");if(t.classList.add("chat-message",n),"assistant"===n){const n=e.replace(/```python\s*([\s\S]*?)```/g,'<pre class="python-code"><code>$1</code></pre>');t.innerHTML=n.replace(/\n/g,"<br>")}else t.innerHTML=e.replace(/\n/g,"<br>");g.appendChild(t),g.scrollTop=g.scrollHeight},k=()=>{const n=document.createElement("div");n.classList.add("chat-message","system","loading-indicator"),n.innerHTML='<div class="typing-indicator"><span></span><span></span><span></span></div> Generating response...',n.id="loading-indicator",g.appendChild(n),g.scrollTop=g.scrollHeight},C=()=>{const n=document.getElementById("loading-indicator");n&&n.remove()},w=()=>{const n=e.currentWidget;if(n instanceof r.NotebookPanel){const e=n.title.label;A=e,d.textContent=`Notebook: ${A}`}else d.textContent="No notebook detected..."},T=async()=>{const n=e.currentWidget;if(n&&n.context){const t=n.context.path,o=t.lastIndexOf("/");L=-1!==o?t.substring(0,o):".",console.log("Notebook Directory updated:",L),M=await G(e)}};e.currentChanged.connect((()=>{w(),T(),function(){const n=document.querySelector(".messages-container");n&&(n.innerHTML="")}(),z()})),e.activeCellChanged.connect((()=>{var n,t;const o=null!==(t=null===(n=e.currentWidget)||void 0===n?void 0:n.content.activeCellIndex)&&void 0!==t?t:0;u.textContent=`Notebook Index: ${o}`})),w();const _=new a.MainAreaWidget({content:o});_.id="chatbot-widget",_.title.label="ContentGen",_.title.closable=!0,n.shell.add(_,"right"),t&&t.add(_,"chatbot-widget")})():(async()=>{const e=new i.Widget;e.node.classList.add("api-key-panel");const o=document.createElement("div");o.classList.add("api-key-header-container");const r=document.createElement("div");r.classList.add("api-key-container");const s=document.createElement("div");s.classList.add("api-key-header"),s.textContent="Gemini API Key Required";const l=document.createElement("div");l.classList.add("api-key-description"),l.textContent="Please enter your Gemini API key to use the ContentGen features.";const d=document.createElement("div");d.classList.add("api-key-input-container");const p=document.createElement("input");p.type="password",p.classList.add("api-key-input"),p.placeholder="Enter your Gemini API key...";const u=document.createElement("button");u.textContent="Save API Key",u.classList.add("api-key-submit");const g=document.createElement("div");g.textContent="Please enter a valid API key.",g.classList.add("api-key-error"),g.style.visibility="hidden";const m=document.createElement("div");m.classList.add("api-key-signup"),m.innerHTML='Need a Gemini API key? <a href="https://aistudio.google.com/app/apikey" target="_blank">Visit Google AI Studio</a>';const f=async()=>{const n=p.value.trim(),e=/^AIza[a-zA-Z0-9_-]{35}$/.test(n);if(console.log("apiKeyFormatIsValid: "+e),!e)return console.log("Invalid API key format."),g.textContent="Invalid API key format. Please check and try again.",void(g.style.visibility="visible");try{(await c("save-api-key",{method:"POST",body:JSON.stringify({api_key:n})})).valid?window.location.reload():(console.log("Backend validation failed. API key is invalid."),g.textContent="Invalid API key. Please check and try again.",g.style.visibility="visible")}catch(n){console.log("Error during API call: ",n),g.textContent="Failed to save API key. Please try again.",g.style.visibility="visible"}};u.onclick=f,p.addEventListener("keydown",(n=>{"Enter"===n.key&&f()})),o.appendChild(s),o.appendChild(l),d.appendChild(p),d.appendChild(u),r.appendChild(d),r.appendChild(g),r.appendChild(m),e.node.appendChild(o),e.node.appendChild(r);const h=new a.MainAreaWidget({content:e});h.id="api-key-widget",h.title.label="ContentGen",h.title.closable=!0,n.shell.add(h,"right"),t&&t.add(h,"api-key-widget")})()}},z=()=>{const n=document.getElementById("chat-buttons-container");n&&(n.innerHTML="")},W=(n,e)=>{console.log(`Adding buttons below chat for cell at index ${n}`);let t=document.getElementById("chat-buttons-container");if(!t)return void console.error("Chat buttons container not found!");const o=document.createElement("button");o.textContent="✅ Apply",o.className="apply-btn",o.onclick=()=>_(n,e);const a=document.createElement("button");a.textContent="❌ Cancel",a.className="cancel-btn",a.onclick=()=>q(n,e),t.appendChild(o),t.appendChild(a)},O=(n,e)=>{},_=async(n,e)=>{console.log(`Applying changes for cell at index ${n}`),e.sharedModel.cells[n]&&delete e.sharedModel.cells[n].metadata.temporary,S=!1,E="",I=-1,z(),N="applied",await c("log-usage",{method:"POST",body:JSON.stringify({row_id:P,user_decision:"applied"})})},q=async(n,e)=>{console.log(`Cancelling changes and deleting cell at index ${n}`),e.sharedModel.deleteCell(n),S=!1,E="",I=-1,z(),N="canceled",await c("log-usage",{method:"POST",body:JSON.stringify({row_id:P,user_decision:"canceled"})})},F=(n,e)=>{const t=e.split(/Answer:\s*```python/);return t.length<2?`### ${n}\n\n${e}`:`<div class="alert alert-warning">\n  <h3>Question 🤔 ${n}</h3>\n  \n  ${t[0].replace("Question:","").trim()}\n</div>\n\n<details>\n  <summary><strong>Click to reveal answer</strong></summary>\n  \n${"```python"+t[1]}\n</details>`},G=async n=>{var e;console.log("Inside sendNoteboookContent function!");try{const t=n.currentWidget;if(!t)return void console.error("No active notebook detected");await t.context.ready;const o=null===(e=t.content)||void 0===e?void 0:e.model;if(!o)return void console.error("No active notebook model detected");const a=o.cells,i=[];for(let n=0;n<a.length;n++){const e=a.get(n);i.push({index:n+1,content:e.sharedModel.getSource()})}if(console.log(i),i.length<=2)return null;const r={notebookContent:i};console.log("requestBody for notebook processing:",r);const s=await c("process_notebook",{method:"POST",body:JSON.stringify(r)});return console.log("Notebook content processed:",s),s}catch(n){console.error("Failed to send notebook content:",n)}},R=T},475:(n,e,t)=>{t.d(e,{A:()=>s});var o=t(601),a=t.n(o),i=t(314),r=t.n(i)()(a());r.push([n.id,"/*\n    See the JupyterLab Developer Guide for useful CSS Patterns:\n\n    https://jupyterlab.readthedocs.io/en/stable/developer/css.html\n*/\n\n/* Arrange elements in a vertical stack */\n.chatbot-panel {\n    padding: 16px;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    min-width: 25vw;\n}\n\n/* Title styling */\n.chatbot-title {\n    text-align: center;\n    padding: 10px;\n    border-bottom: 1px solid #e0e0e0;\n    margin-bottom: 16px;\n}\n\n/* Container for the prompt box and return button */\n.input-container {\n    display: flex;\n    gap: 8px;\n    padding: 10px;\n    margin-top: auto;\n}\n\n/* Style for the input box */\n.input-container input {\n    flex: 1;\n    padding: 8px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n}\n\n/* Style for the return button */\n.input-container button {\n    padding: 8px 16px;\n    background-color: #7a7876;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n}\n\n.input-container button:hover {\n    background-color: #9c9995;\n}\n\n/* Container for displaying chat messages */\n.chat-container {\n    flex: 1;\n    overflow-y: auto;\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n    padding: 10px;\n}\n\n/* Shared styles for all chat messages */\n.chat-message {\n    padding: 5px;\n    margin-bottom: 5px;           /* Add some space inside the message box */\n    word-wrap: break-word;       /* Wrap long words if necessary */\n  }\n  \n  /* Style specifically for user messages */\n.chat-message.user {\n    text-align: right;           /* Align text to the right */\n    margin-left: auto;           /* Push message to the right */\n  }\n  \n  /* Style specifically for assistant messages */\n.chat-message.assistant {\n    text-align: left;            /* Align text to the left */\n    margin-right: auto;          /* Push message to the left */\n  }\n  \n  /* Optional: Style for system or error messages */\n.chat-message.system {\n    background-color: #ffe6e6;   /* Light red background */\n    color: #a00;                 /* Dark red text */\n    font-style: italic;          /* Italicize text */\n    text-align: center;          /* Center-align system messages */\n  }\n  \n\n\n\n\n\n\n\n\n/* API Key Panel Styles */\n.api-key-panel {\n    padding: 16px;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    min-width: 25vw;\n}\n\n\n.api-key-header {\n    text-align: center;\n    font-size: 1.2em;\n    font-weight: bold;\n    padding: 10px;\n    border-bottom: 1px solid #e0e0e0;\n    margin-bottom: 16px;\n    top: 20px;\n    left: 0;\n    right: 0;\n}\n\n\n.api-key-container {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n    padding: 10px;\n}\n\n\n.api-key-description {\n    text-align: center;\n    color: #666;\n    margin-bottom: 20px;\n    top: 80px; \n    left: 0;\n    right: 0;\n}\n\n.api-key-input-container {\n    display: flex;\n    gap: 8px;\n    padding: 10px;\n    width: 80%; /* Make the input container narrower */\n    margin: 0 auto; /* Center it horizontally */\n    padding-top: 30vh;\n}\n\n.api-key-input {\n    flex: 1;\n    padding: 8px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n}\n\n.api-key-submit {\n    padding: 8px 16px;\n    background-color: #7a7876;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n}\n\n.api-key-submit:hover {\n    background-color: #9c9995;\n}\n\n.api-key-signup {\n    text-align: center;\n    color: #666;\n    margin-top: 5vh;\n    font-size: 0.9em;\n}\n\n.api-key-signup a {\n    color: #2196F3;\n    text-decoration: none;\n}\n\n.api-key-signup a:hover {\n    text-decoration: underline;\n}\n\n.api-key-error {\n    /* color: #d32f2f; */\n    color:#7a7876;\n    text-align: left;\n    font-size: 1em;\n    width: 80%;\n    padding-left: 10px;\n    margin: -15px auto 0px;\n}\n\n",""]);const s=r},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},601:n=>{n.exports=function(n){return n[1]}},659:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,a&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}}}]);