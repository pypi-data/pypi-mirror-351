# coding: utf-8

"""
    Keap REST API

    Keap REST Core Service

    The version of the OpenAPI document: 2.70.0.809589
    Contact: api@keap.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from keap_core_v2_client.models.deal_contact import DealContact
from keap_core_v2_client.models.money import Money
from keap_core_v2_client.models.owner import Owner
from keap_core_v2_client.models.stage import Stage
from typing import Optional, Set
from typing_extensions import Self

class Deal(BaseModel):
    """
    Represents a deal.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the model.")
    name: Annotated[str, Field(min_length=1, strict=True)] = Field(description="The name of the deal. This field is required and must have at least one character.")
    value: Money = Field(description="The monetary value of the deal. This field is required and must be valid.")
    contacts: List[DealContact] = Field(description="The list of contacts associated with the deal. This field is required.")
    stage: Stage = Field(description="The stage of the deal. This field is required and must be valid.")
    stage_assignment_time: datetime = Field(description="The time when the deal was assigned to the current stage. This field is required.")
    owners: List[Owner] = Field(description="The list of owners of the deal. This field is required.")
    owner_id: Optional[StrictStr] = Field(default=None, description="The ID of the owner of the deal. This field is optional.")
    task_ids: List[StrictStr] = Field(description="The list of task IDs associated with the deal. This field is required.")
    order_id: Optional[StrictStr] = Field(default=None, description="The order of the deal. This field is optional.")
    status: StrictStr = Field(description="The status of the deal. This field is required.")
    estimated_close_time: Optional[datetime] = Field(default=None, description="The estimated close time of the deal. This field is optional.")
    closed_time: Optional[datetime] = Field(default=None, description="The actual close time of the deal. This field is optional.")
    custom_fields: Optional[Dict[str, Any]] = Field(default=None, description="The custom fields associated with the deal. This field is optional.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "name", "value", "contacts", "stage", "stage_assignment_time", "owners", "owner_id", "task_ids", "order_id", "status", "estimated_close_time", "closed_time", "custom_fields"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Deal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of value
        if self.value:
            _dict['value'] = self.value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in contacts (list)
        _items = []
        if self.contacts:
            for _item_contacts in self.contacts:
                if _item_contacts:
                    _items.append(_item_contacts.to_dict())
            _dict['contacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of stage
        if self.stage:
            _dict['stage'] = self.stage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in owners (list)
        _items = []
        if self.owners:
            for _item_owners in self.owners:
                if _item_owners:
                    _items.append(_item_owners.to_dict())
            _dict['owners'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if owner_id (nullable) is None
        # and model_fields_set contains the field
        if self.owner_id is None and "owner_id" in self.model_fields_set:
            _dict['owner_id'] = None

        # set to None if order_id (nullable) is None
        # and model_fields_set contains the field
        if self.order_id is None and "order_id" in self.model_fields_set:
            _dict['order_id'] = None

        # set to None if estimated_close_time (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_close_time is None and "estimated_close_time" in self.model_fields_set:
            _dict['estimated_close_time'] = None

        # set to None if closed_time (nullable) is None
        # and model_fields_set contains the field
        if self.closed_time is None and "closed_time" in self.model_fields_set:
            _dict['closed_time'] = None

        # set to None if custom_fields (nullable) is None
        # and model_fields_set contains the field
        if self.custom_fields is None and "custom_fields" in self.model_fields_set:
            _dict['custom_fields'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Deal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "value": Money.from_dict(obj["value"]) if obj.get("value") is not None else None,
            "contacts": [DealContact.from_dict(_item) for _item in obj["contacts"]] if obj.get("contacts") is not None else None,
            "stage": Stage.from_dict(obj["stage"]) if obj.get("stage") is not None else None,
            "stage_assignment_time": obj.get("stage_assignment_time"),
            "owners": [Owner.from_dict(_item) for _item in obj["owners"]] if obj.get("owners") is not None else None,
            "owner_id": obj.get("owner_id"),
            "task_ids": obj.get("task_ids"),
            "order_id": obj.get("order_id"),
            "status": obj.get("status"),
            "estimated_close_time": obj.get("estimated_close_time"),
            "closed_time": obj.get("closed_time"),
            "custom_fields": obj.get("custom_fields")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


