# coding: utf-8

"""
    Keap REST API

    Keap REST Core Service

    The version of the OpenAPI document: 2.70.0.809589
    Contact: api@keap.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from keap_core_v2_client.models.pipeline_custom_field_boolean_display_options import PipelineCustomFieldBooleanDisplayOptions
from keap_core_v2_client.models.pipeline_custom_field_date_time_options import PipelineCustomFieldDateTimeOptions
from keap_core_v2_client.models.pipeline_custom_field_display_options_type import PipelineCustomFieldDisplayOptionsType
from keap_core_v2_client.models.pipeline_custom_field_duration_display_options import PipelineCustomFieldDurationDisplayOptions
from keap_core_v2_client.models.pipeline_custom_field_ref_display_options import PipelineCustomFieldRefDisplayOptions
from typing import Optional, Set
from typing_extensions import Self

class PipelineCustomFieldDisplayOptions(BaseModel):
    """
    Class representing display options for a custom field.
    """ # noqa: E501
    type: PipelineCustomFieldDisplayOptionsType = Field(description="The type of display options. This field is required.")
    hidden: StrictBool = Field(description="Indicates whether the custom field is hidden.")
    array_display_options: Optional[PipelineCustomFieldArrayDisplayOptions] = Field(default=None, description="The display options for array type custom fields. This field is optional.")
    reference_type_display_options: Optional[PipelineCustomFieldRefDisplayOptions] = Field(default=None, description="The display options for reference type custom fields. This field is optional.")
    date_time_display_options: Optional[PipelineCustomFieldDateTimeOptions] = Field(default=None, description="The display options for date and time type custom fields. This field is optional.")
    boolean_display_options: Optional[PipelineCustomFieldBooleanDisplayOptions] = Field(default=None, description="The display options for boolean type custom fields. This field is optional.")
    duration: Optional[PipelineCustomFieldDurationDisplayOptions] = Field(default=None, description="The display options for duration type custom fields. This field is optional.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["type", "hidden", "array_display_options", "reference_type_display_options", "date_time_display_options", "boolean_display_options", "duration"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PipelineCustomFieldDisplayOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of array_display_options
        if self.array_display_options:
            _dict['array_display_options'] = self.array_display_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reference_type_display_options
        if self.reference_type_display_options:
            _dict['reference_type_display_options'] = self.reference_type_display_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of date_time_display_options
        if self.date_time_display_options:
            _dict['date_time_display_options'] = self.date_time_display_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of boolean_display_options
        if self.boolean_display_options:
            _dict['boolean_display_options'] = self.boolean_display_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of duration
        if self.duration:
            _dict['duration'] = self.duration.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PipelineCustomFieldDisplayOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "hidden": obj.get("hidden"),
            "array_display_options": PipelineCustomFieldArrayDisplayOptions.from_dict(obj["array_display_options"]) if obj.get("array_display_options") is not None else None,
            "reference_type_display_options": PipelineCustomFieldRefDisplayOptions.from_dict(obj["reference_type_display_options"]) if obj.get("reference_type_display_options") is not None else None,
            "date_time_display_options": PipelineCustomFieldDateTimeOptions.from_dict(obj["date_time_display_options"]) if obj.get("date_time_display_options") is not None else None,
            "boolean_display_options": PipelineCustomFieldBooleanDisplayOptions.from_dict(obj["boolean_display_options"]) if obj.get("boolean_display_options") is not None else None,
            "duration": PipelineCustomFieldDurationDisplayOptions.from_dict(obj["duration"]) if obj.get("duration") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj

from keap_core_v2_client.models.pipeline_custom_field_array_display_options import PipelineCustomFieldArrayDisplayOptions
# TODO: Rewrite to not use raise_errors
PipelineCustomFieldDisplayOptions.model_rebuild(raise_errors=False)

