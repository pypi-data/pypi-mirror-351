# coding: utf-8

"""
    Keap REST API

    Keap REST Core Service

    The version of the OpenAPI document: 2.70.0.809589
    Contact: api@keap.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from keap_core_v2_client.models.pipeline_custom_field_display_options import PipelineCustomFieldDisplayOptions
from keap_core_v2_client.models.pipeline_custom_field_options import PipelineCustomFieldOptions
from keap_core_v2_client.models.pipeline_custom_field_property_validator import PipelineCustomFieldPropertyValidator
from keap_core_v2_client.models.pipeline_custom_field_type import PipelineCustomFieldType
from typing import Optional, Set
from typing_extensions import Self

class PipelineCustomField(BaseModel):
    """
    Represents a custom field in the system. This class extends the BaseModel and includes various properties related to custom fields.
    """ # noqa: E501
    id: StrictStr = Field(description="The identifier of the custom field.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the custom field. This field is optional.")
    type: Optional[PipelineCustomFieldType] = Field(default=None, description="The type of the custom field. This field is optional and must be a valid PipelineCustomFieldType.")
    label: Optional[StrictStr] = Field(default=None, description="The label of the custom field. This field is optional.")
    description: Optional[StrictStr] = Field(default=None, description="The description of the custom field. This field is optional.")
    helper_text: Optional[StrictStr] = Field(default=None, description="The helper text for the custom field. This field is optional and is serialized to JSON as \"helper_text\".")
    default_value: Optional[Dict[str, Any]] = Field(description="The default value of the custom field. This field is optional and must be a valid Object.")
    validators: Optional[List[PipelineCustomFieldPropertyValidator]] = Field(default=None, description="The list of validators for the custom field. This field is optional and must be a list of valid PipelineCustomFieldPropertyValidator.")
    display_options: Optional[PipelineCustomFieldDisplayOptions] = Field(default=None, description="The display options for the custom field. This field is optional and must be a valid DisplayOptions.")
    options: Optional[PipelineCustomFieldOptions] = Field(default=None, description="The options for the custom field. This field is optional and must be a valid PipelineCustomFieldOptions.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "name", "type", "label", "description", "helper_text", "default_value", "validators", "display_options", "options"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PipelineCustomField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in validators (list)
        _items = []
        if self.validators:
            for _item_validators in self.validators:
                if _item_validators:
                    _items.append(_item_validators.to_dict())
            _dict['validators'] = _items
        # override the default output from pydantic by calling `to_dict()` of display_options
        if self.display_options:
            _dict['display_options'] = self.display_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if label (nullable) is None
        # and model_fields_set contains the field
        if self.label is None and "label" in self.model_fields_set:
            _dict['label'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if helper_text (nullable) is None
        # and model_fields_set contains the field
        if self.helper_text is None and "helper_text" in self.model_fields_set:
            _dict['helper_text'] = None

        # set to None if default_value (nullable) is None
        # and model_fields_set contains the field
        if self.default_value is None and "default_value" in self.model_fields_set:
            _dict['default_value'] = None

        # set to None if validators (nullable) is None
        # and model_fields_set contains the field
        if self.validators is None and "validators" in self.model_fields_set:
            _dict['validators'] = None

        # set to None if display_options (nullable) is None
        # and model_fields_set contains the field
        if self.display_options is None and "display_options" in self.model_fields_set:
            _dict['display_options'] = None

        # set to None if options (nullable) is None
        # and model_fields_set contains the field
        if self.options is None and "options" in self.model_fields_set:
            _dict['options'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PipelineCustomField from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "type": PipelineCustomFieldType.from_dict(obj["type"]) if obj.get("type") is not None else None,
            "label": obj.get("label"),
            "description": obj.get("description"),
            "helper_text": obj.get("helper_text"),
            "default_value": obj.get("default_value"),
            "validators": [PipelineCustomFieldPropertyValidator.from_dict(_item) for _item in obj["validators"]] if obj.get("validators") is not None else None,
            "display_options": PipelineCustomFieldDisplayOptions.from_dict(obj["display_options"]) if obj.get("display_options") is not None else None,
            "options": PipelineCustomFieldOptions.from_dict(obj["options"]) if obj.get("options") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


