# coding: utf-8

"""
    Keap REST API

    Keap REST Core Service

    The version of the OpenAPI document: 2.70.0.809589
    Contact: api@keap.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from keap_core_v2_client.models.pipeline_custom_field_card_display_options import PipelineCustomFieldCardDisplayOptions
from keap_core_v2_client.models.pipeline_custom_field_empty_state_content import PipelineCustomFieldEmptyStateContent
from keap_core_v2_client.models.pipeline_custom_field_ref_display_type import PipelineCustomFieldRefDisplayType
from typing import Optional, Set
from typing_extensions import Self

class PipelineCustomFieldRefDisplayOptions(BaseModel):
    """
    Class representing the display options for a reference custom field.
    """ # noqa: E501
    hidden: Optional[StrictBool] = Field(default=None, description="Indicates whether the reference custom field is hidden.")
    card_options: Optional[PipelineCustomFieldCardDisplayOptions] = Field(default=None, description="The card display options for the reference custom field. This field is optional.")
    title_property: Optional[StrictStr] = Field(default=None, description="The title property for the reference custom field.")
    description_property: Optional[StrictStr] = Field(default=None, description="The description property for the reference custom field.")
    reference_display_type: Optional[PipelineCustomFieldRefDisplayType] = Field(default=None, description="The display type for the reference custom field. This field is optional.")
    empty_state: Optional[PipelineCustomFieldEmptyStateContent] = Field(default=None, description="The empty state content for the reference custom field. This field is optional.")
    component_name: Optional[StrictStr] = Field(default=None, description="The component name for the reference custom field.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["hidden", "card_options", "title_property", "description_property", "reference_display_type", "empty_state", "component_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PipelineCustomFieldRefDisplayOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of card_options
        if self.card_options:
            _dict['card_options'] = self.card_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of empty_state
        if self.empty_state:
            _dict['empty_state'] = self.empty_state.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if hidden (nullable) is None
        # and model_fields_set contains the field
        if self.hidden is None and "hidden" in self.model_fields_set:
            _dict['hidden'] = None

        # set to None if card_options (nullable) is None
        # and model_fields_set contains the field
        if self.card_options is None and "card_options" in self.model_fields_set:
            _dict['card_options'] = None

        # set to None if title_property (nullable) is None
        # and model_fields_set contains the field
        if self.title_property is None and "title_property" in self.model_fields_set:
            _dict['title_property'] = None

        # set to None if description_property (nullable) is None
        # and model_fields_set contains the field
        if self.description_property is None and "description_property" in self.model_fields_set:
            _dict['description_property'] = None

        # set to None if reference_display_type (nullable) is None
        # and model_fields_set contains the field
        if self.reference_display_type is None and "reference_display_type" in self.model_fields_set:
            _dict['reference_display_type'] = None

        # set to None if empty_state (nullable) is None
        # and model_fields_set contains the field
        if self.empty_state is None and "empty_state" in self.model_fields_set:
            _dict['empty_state'] = None

        # set to None if component_name (nullable) is None
        # and model_fields_set contains the field
        if self.component_name is None and "component_name" in self.model_fields_set:
            _dict['component_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PipelineCustomFieldRefDisplayOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hidden": obj.get("hidden"),
            "card_options": PipelineCustomFieldCardDisplayOptions.from_dict(obj["card_options"]) if obj.get("card_options") is not None else None,
            "title_property": obj.get("title_property"),
            "description_property": obj.get("description_property"),
            "reference_display_type": obj.get("reference_display_type"),
            "empty_state": PipelineCustomFieldEmptyStateContent.from_dict(obj["empty_state"]) if obj.get("empty_state") is not None else None,
            "component_name": obj.get("component_name")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


