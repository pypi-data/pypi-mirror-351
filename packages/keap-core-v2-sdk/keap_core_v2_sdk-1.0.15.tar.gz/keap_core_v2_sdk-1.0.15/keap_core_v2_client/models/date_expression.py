# coding: utf-8

"""
    Keap REST API

    Keap REST Core Service

    The version of the OpenAPI document: 2.70.0.809589
    Contact: api@keap.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from keap_core_v2_client.models.logical_date import LogicalDate
from typing import Optional, Set
from typing_extensions import Self

class DateExpression(BaseModel):
    """
    DateExpression
    """ # noqa: E501
    query: StrictStr
    parse_start: StrictInt = Field(description="Where in the expression this date exists (start)")
    parse_end: StrictInt = Field(description="Where in the expression this date exists")
    date_inferred: StrictBool = Field(description="Whether the date portion of the results has been inferred (and can be ignored)")
    time_inferred: StrictBool = Field(description="Whether the time portion of the results has been inferred (and can be ignored)")
    result: LogicalDate
    recurring: StrictBool = Field(description="Whether the results are recurring")
    recurse_until: LogicalDate = Field(description="If recurring, when the recurrence ends")
    complete_match: Optional[StrictBool] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["query", "parse_start", "parse_end", "date_inferred", "time_inferred", "result", "recurring", "recurse_until", "complete_match"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DateExpression from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of result
        if self.result:
            _dict['result'] = self.result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recurse_until
        if self.recurse_until:
            _dict['recurse_until'] = self.recurse_until.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if complete_match (nullable) is None
        # and model_fields_set contains the field
        if self.complete_match is None and "complete_match" in self.model_fields_set:
            _dict['complete_match'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DateExpression from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "query": obj.get("query"),
            "parse_start": obj.get("parse_start"),
            "parse_end": obj.get("parse_end"),
            "date_inferred": obj.get("date_inferred"),
            "time_inferred": obj.get("time_inferred"),
            "result": LogicalDate.from_dict(obj["result"]) if obj.get("result") is not None else None,
            "recurring": obj.get("recurring"),
            "recurse_until": LogicalDate.from_dict(obj["recurse_until"]) if obj.get("recurse_until") is not None else None,
            "complete_match": obj.get("complete_match")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


