# coding: utf-8

"""
    Keap REST API

    Keap REST Core Service

    The version of the OpenAPI document: 2.70.0.812056
    Contact: api@keap.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List
from keap_core_v2_client.models.pipeline_custom_field_display_options import PipelineCustomFieldDisplayOptions
from keap_core_v2_client.models.pipeline_custom_field_options import PipelineCustomFieldOptions
from keap_core_v2_client.models.pipeline_custom_field_property_validator import PipelineCustomFieldPropertyValidator
from typing import Optional, Set
from typing_extensions import Self

class UpdateCustomFieldRequest(BaseModel):
    """
    Represents a request to update a custom field.
    """ # noqa: E501
    label: StrictStr = Field(description="The label of the custom field.")
    description: StrictStr = Field(description="The description of the custom field.")
    hint: StrictStr = Field(description="The hint for the custom field.")
    helper_text: StrictStr = Field(description="The helper text for the custom field.")
    default_value: Dict[str, Any] = Field(description="The default value of the custom field.")
    display_options: PipelineCustomFieldDisplayOptions = Field(description="The display options for the custom field.")
    options: PipelineCustomFieldOptions = Field(description="The options for the custom field.")
    validators: List[PipelineCustomFieldPropertyValidator] = Field(description="The validators for the custom field.")
    deleted: StrictBool = Field(description="Indicates whether the custom field is deleted.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["label", "description", "hint", "helper_text", "default_value", "display_options", "options", "validators", "deleted"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateCustomFieldRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of display_options
        if self.display_options:
            _dict['display_options'] = self.display_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in validators (list)
        _items = []
        if self.validators:
            for _item_validators in self.validators:
                if _item_validators:
                    _items.append(_item_validators.to_dict())
            _dict['validators'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateCustomFieldRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "label": obj.get("label"),
            "description": obj.get("description"),
            "hint": obj.get("hint"),
            "helper_text": obj.get("helper_text"),
            "default_value": obj.get("default_value"),
            "display_options": PipelineCustomFieldDisplayOptions.from_dict(obj["display_options"]) if obj.get("display_options") is not None else None,
            "options": PipelineCustomFieldOptions.from_dict(obj["options"]) if obj.get("options") is not None else None,
            "validators": [PipelineCustomFieldPropertyValidator.from_dict(_item) for _item in obj["validators"]] if obj.get("validators") is not None else None,
            "deleted": obj.get("deleted")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


