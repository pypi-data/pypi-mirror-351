# coding: utf-8

"""
    Keap REST API

    Keap REST Core Service

    The version of the OpenAPI document: 2.70.0.809589
    Contact: api@keap.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BulkCreateDealNoteResponse(BaseModel):
    """
    Response model for creating a deal note as part of a bulk operation.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the note.")
    body: Optional[StrictStr] = Field(default=None, description="The body content of the note.")
    deal_id: Optional[StrictStr] = Field(default=None, description="The ID of the deal associated with the note.")
    created_by: Optional[StrictStr] = Field(default=None, description="The ID of the user who created the note.")
    created_time: Optional[datetime] = Field(default=None, description="The timestamp when the note was created. Formatted as a string according to the pattern \"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\".")
    modified_time: Optional[datetime] = Field(default=None, description="The timestamp when the note was last modified. Formatted as a string according to the pattern \"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\".")
    create_success: Optional[StrictBool] = Field(default=None, description="Indicates whether the note was created successfully.")
    error_message: Optional[StrictStr] = Field(default=None, description="If the note creation was not successful, this field contains the error message.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "body", "deal_id", "created_by", "created_time", "modified_time", "create_success", "error_message"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BulkCreateDealNoteResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BulkCreateDealNoteResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "body": obj.get("body"),
            "deal_id": obj.get("deal_id"),
            "created_by": obj.get("created_by"),
            "created_time": obj.get("created_time"),
            "modified_time": obj.get("modified_time"),
            "create_success": obj.get("create_success"),
            "error_message": obj.get("error_message")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


