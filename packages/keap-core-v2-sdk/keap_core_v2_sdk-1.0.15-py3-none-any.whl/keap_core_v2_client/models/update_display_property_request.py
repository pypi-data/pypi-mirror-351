# coding: utf-8

"""
    Keap REST API

    Keap REST Core Service

    The version of the OpenAPI document: 2.70.0.809589
    Contact: api@keap.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from keap_core_v2_client.models.display_property_source import DisplayPropertySource
from keap_core_v2_client.models.pipeline_custom_field_display_options import PipelineCustomFieldDisplayOptions
from typing import Optional, Set
from typing_extensions import Self

class UpdateDisplayPropertyRequest(BaseModel):
    """
    UpdateDisplayPropertyRequest
    """ # noqa: E501
    sort_order: Optional[StrictInt] = Field(default=None, description="Determines the order for where this display property shows up on the group.")
    id: Optional[StrictStr] = Field(default=None, description="Identifies the custom field that is tied to this display property.")
    source: DisplayPropertySource = Field(description="Indicates whether this display property is a system or custom field.")
    system_field_record: Optional[StrictStr] = Field(default=None, description="Represents the domain (e.g., pipeline, contact) that this display property belongs to.")
    system_field_id: Optional[StrictStr] = Field(default=None, description="Represents the identifier of the system field that is in that displayProperty. The source of this field will depend on the domain (e. g., \"dealName\" in pipelines)")
    label: Optional[StrictStr] = Field(default=None, description="The label to display on this property to help users identify it")
    description: Optional[StrictStr] = Field(default=None, description="Documentation that explains the purpose of this property")
    helper_text: Optional[StrictStr] = Field(default=None, description="More detailed explanation of the property to be shown if a user requests more information about it")
    default_value: Optional[Any] = Field(default=None, description="The value of this property if a value is not explicitly provided")
    display_options: Optional[PipelineCustomFieldDisplayOptions] = Field(default=None, description="Allowed values for this property")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["sort_order", "id", "source", "system_field_record", "system_field_id", "label", "description", "helper_text", "default_value", "display_options"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateDisplayPropertyRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of display_options
        if self.display_options:
            _dict['display_options'] = self.display_options.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if default_value (nullable) is None
        # and model_fields_set contains the field
        if self.default_value is None and "default_value" in self.model_fields_set:
            _dict['default_value'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateDisplayPropertyRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sort_order": obj.get("sort_order"),
            "id": obj.get("id"),
            "source": obj.get("source"),
            "system_field_record": obj.get("system_field_record"),
            "system_field_id": obj.get("system_field_id"),
            "label": obj.get("label"),
            "description": obj.get("description"),
            "helper_text": obj.get("helper_text"),
            "default_value": obj.get("default_value"),
            "display_options": PipelineCustomFieldDisplayOptions.from_dict(obj["display_options"]) if obj.get("display_options") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


