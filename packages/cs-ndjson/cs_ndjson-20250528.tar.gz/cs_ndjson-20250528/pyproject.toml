[project]
name = "cs-ndjson"
description = "utilities for working with newline delimited JSON (NDJSON) files"
authors = [
    { name = "Cameron Simpson", email = "cs@cskk.id.au" },
]
keywords = [
    "python2",
    "python3",
]
dependencies = [
    "cs.deco>=20250513",
    "cs.fileutils>=20211208",
    "cs.logutils>=20250323",
    "cs.mappings>=20250528",
    "cs.obj>=20250306",
    "cs.pfx>=20250308",
]
classifiers = [
    "Programming Language :: Python",
    "Programming Language :: Python :: 2",
    "Programming Language :: Python :: 3",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
]
version = "20250528"

[project.license]
text = "GNU General Public License v3 or later (GPLv3+)"

[project.urls]
"Monorepo Hg/Mercurial Mirror" = "https://hg.sr.ht/~cameron-simpson/css"
"Monorepo Git Mirror" = "https://github.com/cameron-simpson/css"
"MonoRepo Commits" = "https://bitbucket.org/cameron_simpson/css/commits/branch/main"
Source = "https://github.com/cameron-simpson/css/blob/main/lib/python/cs/ndjson.py"

[project.readme]
text = """
Utilities for working with newline delimited JSON (NDJSON) files, aka JSON Lines.

*Latest release 20250528*:
New dump_ndjson and dumps_ndjson for transcribing obj as NDJSON (includes the trailing newline).

Short summary:
* `append_ndjson`: Append an iterable of objects to a file as newline delimited JSON.
* `dump_ndjson`: Write `obj` as a single line of JSON, including the trailing newline.
* `dumps_ndjson`: Return `obj` as a single line of JSON, including the trailing newline.
* `scan_ndjson`: Read a newline delimited JSON file, yield instances of `dictclass` (default `dict`, otherwise a class which can be instantiated by `dictclass(a_dict)`).
* `UUIDNDJSONMapping`: A subclass of `IndexedSetMixin` which maintains records from a newline delimited JSON file.
* `write_ndjson`: Transcribe an iterable of objects to a file as newline delimited JSON.

Module contents:
- <a name=\"append_ndjson\"></a>`append_ndjson(f, objs)`: Append an iterable of objects to a file as newline delimited JSON.
- <a name=\"dump_ndjson\"></a>`dump_ndjson(obj, f)`: Write `obj` as a single line of JSON, including the trailing newline.
- <a name=\"dumps_ndjson\"></a>`dumps_ndjson(obj)`: Return `obj` as a single line of JSON, including the trailing newline.
- <a name=\"scan_ndjson\"></a>`scan_ndjson(f, dictclass=<class 'dict'>, error_list=None)`: Read a newline delimited JSON file, yield instances of `dictclass`
  (default `dict`, otherwise a class which can be instantiated
  by `dictclass(a_dict)`).

  `error_list` is an optional list to accrue `(lineno,exception)` tuples
  for errors encountered during the scan.
- <a name=\"UUIDNDJSONMapping\"></a>`Class `UUIDNDJSONMapping(cs.obj.SingletonMixin, cs.mappings.IndexedSetMixin)``: A subclass of `IndexedSetMixin` which maintains records
  from a newline delimited JSON file.

*`UUIDNDJSONMapping.__init__(self, filename, dictclass=<class 'cs.mappings.UUIDedDict'>, create=False)`*:
Initialise the mapping.

Parameters:
* `filename`: the file containing the newline delimited JSON data;
  this need not yet exist
* `dictclass`: a optional `dict` subclass to hold each record,
  default `UUIDedDict`
* `create`: if true, ensure the file exists
  by transiently opening it for append if it is missing;
  default `False`

*`UUIDNDJSONMapping.add_backend(self, record)`*:
Append `record` to the backing file.

*`UUIDNDJSONMapping.rewrite_backend(self)`*:
Rewrite the backing file.

Because the record updates are normally written in append mode,
a rewrite will be required every so often.

*`UUIDNDJSONMapping.scan(self)`*:
Scan the backing file, yield records.
- <a name=\"write_ndjson\"></a>`write_ndjson(f, objs)`: Transcribe an iterable of objects to a file as newline delimited JSON.

# Release Log



*Release 20250528*:
New dump_ndjson and dumps_ndjson for transcribing obj as NDJSON (includes the trailing newline).

*Release 20211208*:
Initial PyPI release."""
content-type = "text/markdown"

[build-system]
build-backend = "flit_core.buildapi"
requires = [
    "flit_core >=3.2,<4",
]

[tool.flit.module]
name = "cs.ndjson"
