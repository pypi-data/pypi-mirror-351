[project]
name = "dataclass_parser"
version = "0.1.3"
description = "Библиотека для удобного преобразования данных между Python dataclasses и другими форматами"
authors = [
    {name = "EnterNick", email = "python.enter.nick@gmail.com"}
]
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["dataclass", "parser", "serialization", "deserialization", "json"]

[project.urls]
"Homepage" = "https://gitlab.com/sites6821018/dataclass_parser"
"Bug Tracker" = "https://gitlab.com/sites6821018/dataclass_parser/-/issues"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.group.dev.dependencies]
ruff = "^0.11.7"
pytest = "^7.4.0"
pytest-asyncio = "^0.23.5"

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "manage.py",
    "migrations",
    "__init__.py",
    "staticfiles",
    "apps.py",
    "versions",
    'examples',
    "release.py",
    "tests",
]

line-length = 120

target-version = "0.1.3"

[tool.ruff.lint]

select = [
    "E",
    "F",
    "W",
    "B",
    "A",
    "C",
    "N",
    "S",
    "T",
    "SIM",
    "PL",
    "PLE",
    "PLR",
    "PLW",
    "UP",
    "ERA",
    "ASYNC",
    "FBT",
    "INP",
    "TD",
    "TC",
    "COM",
    "PTH",
    "RUF",
    "PGH",
    "TCH",
    "PD",
    "NPY",
    "TRY",
    "EM",
    "DTZ",
    "LOG",
    "G",
    "YTT",
    "DJ"
]
ignore = ["E402", "C901", "PLR0912", "PLR0911", "COM812", "S607", "S603", "RUF013", "S110", "UP038"]

dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

flake8-annotations = { allow-star-arg-any = false }
flake8-type-checking = { strict = true }

[tool.ruff.format]

quote-style = "single"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = false

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.isort]
combine-as-imports = true
force-sort-within-sections = true
lines-after-imports = 2
order-by-type = true
split-on-trailing-comma = false
