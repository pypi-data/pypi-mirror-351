"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from flowai_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing_extensions import Annotated, NotRequired, TypedDict


class ProjectValidatorResponseTypedDict(TypedDict):
    r"""Schema for project validator response matching API spec."""

    id: str
    r"""The ID of the validator record (project-specific assignment)."""
    project_id: str
    r"""The ID of the project."""
    email: str
    r"""Email address of the validator."""
    created_at: datetime
    r"""Timestamp of assignment creation."""
    clerk_user_id: NotRequired[Nullable[str]]
    r"""Clerk User ID if user exists, otherwise null."""


class ProjectValidatorResponse(BaseModel):
    r"""Schema for project validator response matching API spec."""

    id: str
    r"""The ID of the validator record (project-specific assignment)."""

    project_id: Annotated[str, pydantic.Field(alias="projectId")]
    r"""The ID of the project."""

    email: str
    r"""Email address of the validator."""

    created_at: Annotated[datetime, pydantic.Field(alias="createdAt")]
    r"""Timestamp of assignment creation."""

    clerk_user_id: Annotated[
        OptionalNullable[str], pydantic.Field(alias="clerkUserId")
    ] = UNSET
    r"""Clerk User ID if user exists, otherwise null."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["clerkUserId"]
        nullable_fields = ["clerkUserId"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
