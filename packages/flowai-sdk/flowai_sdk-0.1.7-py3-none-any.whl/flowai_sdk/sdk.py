"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from .httpclient import AsyncHttpClient, ClientOwner, HttpClient, close_clients
from .sdkconfiguration import SDKConfiguration
from .utils.logger import Logger, get_default_logger
from .utils.retries import RetryConfig
from flowai_sdk import utils
from flowai_sdk._hooks import SDKHooks
from flowai_sdk.types import OptionalNullable, UNSET
import httpx
import importlib
from typing import Dict, Optional, TYPE_CHECKING, cast
import weakref

if TYPE_CHECKING:
    from flowai_sdk.apikeys import APIKeys
    from flowai_sdk.authentication import Authentication
    from flowai_sdk.batches import Batches
    from flowai_sdk.clerk_webhooks import ClerkWebhooks
    from flowai_sdk.datasets import Datasets
    from flowai_sdk.integrations import Integrations
    from flowai_sdk.jobs import Jobs
    from flowai_sdk.projects import Projects
    from flowai_sdk.root import Root
    from flowai_sdk.stages import Stages
    from flowai_sdk.testcases import TestCases
    from flowai_sdk.users import Users
    from flowai_sdk.validations import Validations
    from flowai_sdk.validationtasks import ValidationTasks
    from flowai_sdk.validatortasks import ValidatorTasks


class FlowAI(BaseSDK):
    r"""server: FastAPI backend for Flow Expert"""

    clerk_webhooks: "ClerkWebhooks"
    users: "Users"
    test_cases: "TestCases"
    validations: "Validations"
    batches: "Batches"
    api_keys: "APIKeys"
    authentication: "Authentication"
    datasets: "Datasets"
    jobs: "Jobs"
    projects: "Projects"
    validation_tasks: "ValidationTasks"
    validator_tasks: "ValidatorTasks"
    stages: "Stages"
    integrations: "Integrations"
    root: "Root"
    _sub_sdk_map = {
        "clerk_webhooks": ("flowai_sdk.clerk_webhooks", "ClerkWebhooks"),
        "users": ("flowai_sdk.users", "Users"),
        "test_cases": ("flowai_sdk.testcases", "TestCases"),
        "validations": ("flowai_sdk.validations", "Validations"),
        "batches": ("flowai_sdk.batches", "Batches"),
        "api_keys": ("flowai_sdk.apikeys", "APIKeys"),
        "authentication": ("flowai_sdk.authentication", "Authentication"),
        "datasets": ("flowai_sdk.datasets", "Datasets"),
        "jobs": ("flowai_sdk.jobs", "Jobs"),
        "projects": ("flowai_sdk.projects", "Projects"),
        "validation_tasks": ("flowai_sdk.validationtasks", "ValidationTasks"),
        "validator_tasks": ("flowai_sdk.validatortasks", "ValidatorTasks"),
        "stages": ("flowai_sdk.stages", "Stages"),
        "integrations": ("flowai_sdk.integrations", "Integrations"),
        "root": ("flowai_sdk.root", "Root"),
    }

    def __init__(
        self,
        server_idx: Optional[int] = None,
        server_url: Optional[str] = None,
        url_params: Optional[Dict[str, str]] = None,
        client: Optional[HttpClient] = None,
        async_client: Optional[AsyncHttpClient] = None,
        retry_config: OptionalNullable[RetryConfig] = UNSET,
        timeout_ms: Optional[int] = None,
        debug_logger: Optional[Logger] = None,
    ) -> None:
        r"""Instantiates the SDK configuring it with the provided parameters.

        :param server_idx: The index of the server to use for all methods
        :param server_url: The server URL to use for all methods
        :param url_params: Parameters to optionally template the server URL with
        :param client: The HTTP client to use for all synchronous methods
        :param async_client: The Async HTTP client to use for all asynchronous methods
        :param retry_config: The retry configuration to use for all supported methods
        :param timeout_ms: Optional request timeout applied to each operation in milliseconds
        """
        client_supplied = True
        if client is None:
            client = httpx.Client()
            client_supplied = False

        assert issubclass(
            type(client), HttpClient
        ), "The provided client must implement the HttpClient protocol."

        async_client_supplied = True
        if async_client is None:
            async_client = httpx.AsyncClient()
            async_client_supplied = False

        if debug_logger is None:
            debug_logger = get_default_logger()

        assert issubclass(
            type(async_client), AsyncHttpClient
        ), "The provided async_client must implement the AsyncHttpClient protocol."

        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        BaseSDK.__init__(
            self,
            SDKConfiguration(
                client=client,
                client_supplied=client_supplied,
                async_client=async_client,
                async_client_supplied=async_client_supplied,
                server_url=server_url,
                server_idx=server_idx,
                retry_config=retry_config,
                timeout_ms=timeout_ms,
                debug_logger=debug_logger,
            ),
        )

        hooks = SDKHooks()

        current_server_url, *_ = self.sdk_configuration.get_server_details()
        server_url, self.sdk_configuration.client = hooks.sdk_init(
            current_server_url, client
        )
        if current_server_url != server_url:
            self.sdk_configuration.server_url = server_url

        # pylint: disable=protected-access
        self.sdk_configuration.__dict__["_hooks"] = hooks

        weakref.finalize(
            self,
            close_clients,
            cast(ClientOwner, self.sdk_configuration),
            self.sdk_configuration.client,
            self.sdk_configuration.client_supplied,
            self.sdk_configuration.async_client,
            self.sdk_configuration.async_client_supplied,
        )

    def __getattr__(self, name: str):
        if name in self._sub_sdk_map:
            module_path, class_name = self._sub_sdk_map[name]
            try:
                module = importlib.import_module(module_path)
                klass = getattr(module, class_name)
                instance = klass(self.sdk_configuration)
                setattr(self, name, instance)
                return instance
            except ImportError as e:
                raise AttributeError(
                    f"Failed to import module {module_path} for attribute {name}: {e}"
                ) from e
            except AttributeError as e:
                raise AttributeError(
                    f"Failed to find class {class_name} in module {module_path} for attribute {name}: {e}"
                ) from e

        raise AttributeError(
            f"'{type(self).__name__}' object has no attribute '{name}'"
        )

    def __dir__(self):
        default_attrs = list(super().__dir__())
        lazy_attrs = list(self._sub_sdk_map.keys())
        return sorted(list(set(default_attrs + lazy_attrs)))

    def __enter__(self):
        return self

    async def __aenter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        if (
            self.sdk_configuration.client is not None
            and not self.sdk_configuration.client_supplied
        ):
            self.sdk_configuration.client.close()
        self.sdk_configuration.client = None

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if (
            self.sdk_configuration.async_client is not None
            and not self.sdk_configuration.async_client_supplied
        ):
            await self.sdk_configuration.async_client.aclose()
        self.sdk_configuration.async_client = None
