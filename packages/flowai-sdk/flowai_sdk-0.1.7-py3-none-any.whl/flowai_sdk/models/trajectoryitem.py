"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .message import Message, MessageTypedDict
from .toolcall import ToolCall, ToolCallTypedDict
from datetime import datetime
from enum import Enum
from flowai_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class ItemType(str, Enum):
    r"""Derives the type of the trajectory item."""

    MESSAGE = "message"
    TOOL_CALL = "tool_call"
    UNKNOWN = "unknown"


class TrajectoryItemTypedDict(TypedDict):
    r"""Schema for reading a trajectory item, including the linked message or tool call."""

    id: str
    order: int
    created_at: datetime
    updated_at: datetime
    test_case_id: str
    item_type: ItemType
    r"""Derives the type of the trajectory item."""
    message: NotRequired[Nullable[MessageTypedDict]]
    tool_call: NotRequired[Nullable[ToolCallTypedDict]]


class TrajectoryItem(BaseModel):
    r"""Schema for reading a trajectory item, including the linked message or tool call."""

    id: str

    order: int

    created_at: datetime

    updated_at: datetime

    test_case_id: str

    item_type: ItemType
    r"""Derives the type of the trajectory item."""

    message: OptionalNullable[Message] = UNSET

    tool_call: OptionalNullable[ToolCall] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["message", "tool_call"]
        nullable_fields = ["message", "tool_call"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
