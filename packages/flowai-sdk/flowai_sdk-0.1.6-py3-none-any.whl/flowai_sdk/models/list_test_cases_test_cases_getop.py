"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .jwtpayload import JWTPayload, JWTPayloadTypedDict
from flowai_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from flowai_sdk.utils import FieldMetadata, QueryParamMetadata, RequestMetadata
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ListTestCasesTestCasesGetRequestTypedDict(TypedDict):
    jwt_payload: JWTPayloadTypedDict
    skip: NotRequired[int]
    limit: NotRequired[int]
    sort_by: NotRequired[Nullable[str]]
    r"""Field to sort by (e.g., 'name', 'created_at')"""
    sort_order: NotRequired[str]
    r"""Sort direction ('asc' or 'desc')"""
    name: NotRequired[Nullable[str]]
    r"""Filter by name (partial match)"""
    status: NotRequired[Nullable[str]]
    r"""Filter by status"""
    created_after: NotRequired[Nullable[str]]
    r"""Filter by creation date (ISO format, YYYY-MM-DDTHH:MM:SSZ)"""
    created_before: NotRequired[Nullable[str]]
    r"""Filter by creation date (ISO format, YYYY-MM-DDTHH:MM:SSZ)"""
    batch_id: NotRequired[Nullable[str]]
    r"""Filter by Batch ID"""


class ListTestCasesTestCasesGetRequest(BaseModel):
    jwt_payload: Annotated[
        JWTPayload,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]

    skip: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 0

    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 100

    sort_by: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Field to sort by (e.g., 'name', 'created_at')"""

    sort_order: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = "asc"
    r"""Sort direction ('asc' or 'desc')"""

    name: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Filter by name (partial match)"""

    status: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Filter by status"""

    created_after: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Filter by creation date (ISO format, YYYY-MM-DDTHH:MM:SSZ)"""

    created_before: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Filter by creation date (ISO format, YYYY-MM-DDTHH:MM:SSZ)"""

    batch_id: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Filter by Batch ID"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "skip",
            "limit",
            "sort_by",
            "sort_order",
            "name",
            "status",
            "created_after",
            "created_before",
            "batch_id",
        ]
        nullable_fields = [
            "sort_by",
            "name",
            "status",
            "created_after",
            "created_before",
            "batch_id",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
