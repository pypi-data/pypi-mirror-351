"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .validationitemfeedback import (
    ValidationItemFeedback,
    ValidationItemFeedbackTypedDict,
)
from datetime import datetime
from flowai_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict


class TestCaseValidationReadTypedDict(TypedDict):
    r"""Schema for reading/returning TestCaseValidation data"""

    __test__ = False  # pyright: ignore[reportGeneralTypeIssues]

    is_accepted: bool
    id: str
    created_at: datetime
    updated_at: datetime
    test_case_id: str
    validation_task_id: str
    validator_task_id: str
    validator_user_id: str
    feedback: NotRequired[Nullable[str]]
    item_feedbacks: NotRequired[List[ValidationItemFeedbackTypedDict]]


class TestCaseValidationRead(BaseModel):
    r"""Schema for reading/returning TestCaseValidation data"""

    __test__ = False

    is_accepted: bool

    id: str

    created_at: datetime

    updated_at: datetime

    test_case_id: str

    validation_task_id: str

    validator_task_id: str

    validator_user_id: str

    feedback: OptionalNullable[str] = UNSET

    item_feedbacks: Optional[List[ValidationItemFeedback]] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["feedback", "item_feedbacks"]
        nullable_fields = ["feedback"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
