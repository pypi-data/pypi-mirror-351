"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from flowai_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from flowai_sdk.utils import validate_const
import pydantic
from pydantic import model_serializer
from pydantic.functional_validators import AfterValidator
from typing import Any, Literal, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ToolCallStepCreateTypedDict(TypedDict):
    r"""Schema for creating a tool call step."""

    order: int
    tool_name: str
    type: Literal["tool_call"]
    arguments: NotRequired[Nullable[Any]]
    output: NotRequired[Nullable[Any]]


class ToolCallStepCreate(BaseModel):
    r"""Schema for creating a tool call step."""

    order: int

    tool_name: str

    TYPE: Annotated[
        Annotated[
            Optional[Literal["tool_call"]], AfterValidator(validate_const("tool_call"))
        ],
        pydantic.Field(alias="type"),
    ] = "tool_call"

    arguments: OptionalNullable[Any] = UNSET

    output: OptionalNullable[Any] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["type", "arguments", "output"]
        nullable_fields = ["arguments", "output"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
