"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .messagestepcreate import MessageStepCreate, MessageStepCreateTypedDict
from .toolcallstepcreate import ToolCallStepCreate, ToolCallStepCreateTypedDict
from flowai_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import List, Optional, Union
from typing_extensions import NotRequired, TypeAliasType, TypedDict


TrajectoryTypedDict = TypeAliasType(
    "TrajectoryTypedDict",
    Union[MessageStepCreateTypedDict, ToolCallStepCreateTypedDict],
)


Trajectory = TypeAliasType("Trajectory", Union[MessageStepCreate, ToolCallStepCreate])


class TestCaseCreateTypedDict(TypedDict):
    r"""Schema for creating a test case, accepting nested objects"""

    __test__ = False  # pyright: ignore[reportGeneralTypeIssues]

    expected_output: str
    status: str
    name: NotRequired[Nullable[str]]
    description: NotRequired[Nullable[str]]
    is_active: NotRequired[bool]
    trajectory: NotRequired[List[TrajectoryTypedDict]]


class TestCaseCreate(BaseModel):
    r"""Schema for creating a test case, accepting nested objects"""

    __test__ = False

    expected_output: str

    status: str

    name: OptionalNullable[str] = UNSET

    description: OptionalNullable[str] = UNSET

    is_active: Optional[bool] = True

    trajectory: Optional[List[Trajectory]] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["name", "description", "is_active", "trajectory"]
        nullable_fields = ["name", "description"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
