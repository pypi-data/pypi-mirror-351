[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "probly"
dynamic = ["version", "readme"]
description = "Uncertainty Representation and Quantification for Machine Learning"
license = "MIT"
requires-python = ">=3.10"
dependencies = [
    # core
    "scipy",
    "matplotlib>=3.8.0",
    "mpltern",
    "numpy>=2.0.0",
    "torch>=2.0.0",
    "torchvision",
    "scikit-learn",
    "tqdm",
]
authors = [
    {name = "Paul Hofman", email = "paul.hofman@ifi.lmu.de"},
    {name = "Timo LÃ¶hr"},
    {name = "Maximilian Muschalik"},
    {name = "Clemens Damke"},
    {name = "Alireza Javanmardi"}
]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    'Operating System :: Microsoft :: Windows',
    'Operating System :: Unix',
    'Operating System :: MacOS',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
]

[tool.setuptools.packages.find]
where = ["./src"]
include = ["probly*"]

[tool.setuptools.dynamic]
version = {attr = "probly.__version__"}
readme = {file = ["README.md", "CHANGELOG.md"], content-type = "text/markdown"}

[project.urls]
documentation = "https://pwhofman.github.io/probly"
source = "https://github.com/pwhofman/probly"
tracker = "https://github.com/pwhofman/probly/issues"
changelog = "https://github.com/pwhofman/probly/blob/main/CHANGELOG.md"


[dependency-groups]
test = [
    "pytest>=8.3.5",  # for testing
    "pytest-cov>=6.0.0",  # for coverage
    "pytest-xdist>=3.6.1",  # for parallel testing
]
lint = [
    "ruff>=0.11.2",  # for linting
    "pre-commit>=4.2.0",  # for running the linters pre-commit hooks
    "mypy>=1.15.0" # for static type checking
]
docs = [
    "sphinx>=8.0.0",
    "furo",                     # Beautiful modern theme (or use sphinx-rtd-theme)
    "myst-parser",              # Optional: Markdown support
    "sphinx-copybutton",        # Optional: Adds copy buttons to code blocks
    "sphinx-autodoc-typehints", # Optional: Show type hints in your API docs
]
dev = [
    "ipykernel>=6.29.5",
    "notebook>=7.3.3",
    "ipywidgets",
    {include-group = "test"},
    {include-group = "lint"},
    {include-group = "docs"},
]


[tool.ruff]
line-length = 120
target-version = "py310"
output-format = "full"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "N812", # Checks for lowercase imports that are aliased to non-lowercase names (e.g. torch.nn.functional as F)
    "RET504", # Unnecessary assignment to {name} before return statement
    "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
    "FBT", # enforce keyword for bool
    "PLR0913", # too many arguments (>5)
    "FIX002",  # TODOS are fine in code
]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "docs/build",  # Exclude docs build directory
]

[tool.ruff.lint.pydocstyle]
convention = "google"

#[tool.ruff.lint]
# Extend what ruff is allowed to fix, even it it may break
# This is okay given we use it all the time and it ensures
# better practices. Would be dangerous if using for first
# time on established project.

# Exclude a variety of commonly ignored directories.
[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
    "S101",
    "INP001",
    "D101",
    "D102",
    "D103",
    "D404",
    "ANN001",
    "ANN201",
    "FBT001",
    "D100",
    "PLR2004",
    "PD901",
    "TCH",
    "N803",
    "C901",
]
"__init__.py" = [
    "I002",
    "RUF022",  # to allow __all__ be not alphabetically ordered
    "PLC0414", # to allow import module as module in inits, contradicts F401
]
"*.ipynb" = [
    "T20",
    "NPY002",
    "I002",
    "PERF401",  # its fine to have not performance optimized code in notebooks
]
"docs/**/*.py" = ["INP001", "PTH", "I002"]

# Use isort-compatible settings
[tool.ruff.isort]
known-first-party = ["probly"]
force-sort-within-sections = true
combine-as-imports = true
force-single-line = false
no-lines-before = ["future"]
required-imports = ["from __future__ import annotations"]
extra-standard-library = ["typing_extensions"]

[tool.pytest.ini_options]
testpaths = ["tests"]
minversion = "8.0"

[tool.coverage.report]
directory = "tests"
exclude_lines = [
    "if TYPE_CHECKING",
]

[tool.mypy]
python_version = "3.10"
strict = true
ignore_missing_imports = true # to avoid issues with torch, numpy, scipy, etc. stubs
disallow_subclassing_any = false # to make sure we can subclass from e.g. torch.nn.Module
disable_error_code = "misc" # disable errors caused by torch not typing decorators, wrapping would be overkill
exclude = "docs"
