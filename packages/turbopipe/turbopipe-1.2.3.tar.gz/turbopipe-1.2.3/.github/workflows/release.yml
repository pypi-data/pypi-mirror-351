name: release

on:
  workflow_dispatch:

jobs:
  sdist:
    name: Make sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v6

      - name: Make sdist
        run: uv build --sdist

      - name: upload
        uses: actions/upload-artifact@v4
        with:
          name: package-sdist
          path: dist/*.tar.gz

  wheels:
    name: Make wheels for ${{matrix.os}}
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [
          ubuntu-latest,
          windows-latest,
          macos-latest
        ]
    env:
      CIBW_BUILD: cp39-* cp310-* cp311-* cp312-* cp313-* cp313t-*
      CIBW_ENABLE: cpython-freethreading
      CIBW_BUILD_FRONTEND: "build[uv]"
      CIBW_ARCHS_LINUX: x86_64 aarch64
      CIBW_ARCHS_MACOS: x86_64 arm64
      CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux*"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
      - uses: astral-sh/setup-uv@v6

      - name: Install MSVC
        if: matrix.os == 'windows-latest'
        uses: bus1/cabuild/action/msdevshell@v1

      - name: Install QEMU
        if: runner.os == 'linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Make wheels
        run: uvx cibuildwheel==2.23.3 --output-dir dist

      - name: upload
        uses: actions/upload-artifact@v4
        with:
          name: package-wheels-${{matrix.os}}
          path: dist/*.whl

  publish:
    needs: [sdist, wheels]
    name: Publish to PyPI
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - uses: astral-sh/setup-uv@v6

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: 'package-*'
          merge-multiple: true
          path: dist

      - name: Publish
        run: uv publish dist/*

  tag:
    needs: publish
    name: Create Release Tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get version
        run: echo VERSION=$(uv run turbopipe/version.py) >> $GITHUB_ENV

      - name: Create Release Tag
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag -a v$VERSION -m "Release v$VERSION"
          git push origin v$VERSION
