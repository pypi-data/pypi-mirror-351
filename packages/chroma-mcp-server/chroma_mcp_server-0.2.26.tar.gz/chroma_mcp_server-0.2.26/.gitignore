# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Ignore transient lock info files created by terraform apply
.terraform.tfstate.lock.info

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

# Ignore local vs code files
*.code-workspace

# Ignore local .terraform.env files
.terraform.env
infrastructure/terraform/.env

# OS specific files
.DS_Store
Thumbs.db

# Ignore IDE settings across all projects
.idea/
.vscode/

# Keep coding-factory specific ignores in coding-factory/.gitignore
# Virtual environment directory
venv/
.venv/
.venv*/

# Ignore build and dist directories
build/
dist/
test_index/

# Ensure .env files are ignored
.env
# But keep our template
!.env.template

.coverage
.coverage.*
coverage.xml
coverage_html*/
htmlcov/

# Chroma MCP server data storage
data/

# Python specific
*.egg-info
__pycache__/
.pytest_cache/
.ruff_cache/

# Auto-Capture-Workflow tests
test-results.xml
failed_tests_*.xml*
test_workflow_*.json

# Test artifacts reorganized to logs/tests/
logs/tests/junit/
logs/tests/coverage/
logs/tests/workflows/

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
coverage_output.txt
*.cover
.hypothesis/
.pytest_cache/

# Additional test artifact patterns for new organization
logs/tests/coverage/
logs/tests/coverage/.coverage
logs/tests/coverage/.coverage.*
logs/tests/coverage/coverage.xml
logs/tests/coverage/html/
logs/tests/coverage/coverage_output.txt

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# celery beat schedule file
celerybeat-schedule

# SageMath parsed files
*.sage.py

# Environments
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# Project-specific
data/
chroma_data/
logs/
.vscode/
.idea/
.hatch/

# Cursor
.cursor/*
!.cursor/rules/

# Local files
.local/
