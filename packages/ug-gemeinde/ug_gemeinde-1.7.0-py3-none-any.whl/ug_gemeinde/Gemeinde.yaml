## Gemeinde.yaml
#
# Einzulesen mit PyYAML

## NAME - Name der Anwendung
NAME: 'Gemeinde'

##  VERSION - Version des Programms
#       Sollte nicht gesetzt werden, das sollte im Python Quelltext geschehen.
#       Achtung: wenn doch gesetzt, überschreibt es ...
# VERSION: 'x.x'

##  ICON_THEME - Icon Theme
#       'oxygen' oder 'breeze'
ICON_THEME: 'breeze'

##  ICON_NAVI_SIZE - Icon größe für Navis
#       14 ist eine sinnvolle Größe, sonst auch kleiner
ICON_NAVI_SIZE: 14

##  TKINTER_THEME - Theme fü TkInter
#       Sollte immer 'classic' sein, damit PanedWindows richtig dargestellt werden.
TKINTER_THEME: 'classic'

##  LIMIT_FORMLIST
#       Limit für die angezeigten Zeilen in Listenansichten
#       Listenansichten sind zeitintensiv, da für jede Zeile und jede
#       Kolumne je ein Widget hergestellt und plaziert werden muss.
#       Daher kann über diese Konstante die Zahl der angezeigten Zeilen
#       limitiert werden.
#       Der Wert wird später als Default für de Getter verwendet, der
#       von bibModell.Modell.FactoryGetterDicts erzeugt wird.
LIMIT_FORMLIST: 20

## LIMIT_CHOICES
#       Limit für die angezeigten Zeilen in Select, ComboboxValueLabel
#       u.ä. Widgets.
#       Integer oder 'ALL'
#       Der Aufbau dieser Widgets kann bei sehr vielen Zeilen in der
#       Tabell lange dauern, daher hier die Möglichkeit der
#       limitierung.
#       Der Wert wird später als Default für de Getter verwendet, der
#       von bibModell.Modell.FactoryGetterChoices erzeugt wird.
#       Der hier verwendete Default von 300 ist aus der Luft gegriffen
#       und kann später angepasst werden.
LIMIT_CHOICES: 500

## LIMIT_NAVIAUSWAHL
#       Limit für die angezeigten Zeilen in Select, ComboboxValueLabel
#       u.ä. Widgets.
#       Integer oder 'ALL'
#       Der Aufbau dieser Widgets kann bei sehr vielen Zeilen in der
#       Tabell lange dauern, daher hier die Möglichkeit der
#       limitierung.
#       Der Wert wird später als Default für de Getter verwendet, der
#       von bibModell.Modell.FactoryGetterChoices erzeugt wird.
#       Der hier verwendete Default von 500 ist aus der Luft gegriffen
#       und kann später angepasst werden.
LIMIT_NAVIAUSWAHL: 500
        
##  LOGGING_LEVEL - Logging Level für Python logging
#       Sollte während der Entwicklung auf DEBUG stehen, später auf WARNING
LOGGING_LEVEL: 'WARNING'

##  PostgreSQL Server Daten
#       PSQL_HOST
#           I.d.R. 138.199.218.230, also der Hetzner vServer
#       PSQL_PORT
#       PSQL_DATABASE
#
#   Achtung
#   =======
#   Insb. diese drei Werte werden durch Einstellungen in Override.yaml überschrieben
#   Override.yaml liegt nicht im Arbeitsverzeichnis, sondern je nach Entwicklungsumgebung
#   bzw. Installationsumgebung tiefer im Verzeichnisbaum. Dort soll es auch bleiben,
#   damit dort Konfigurationen für den Server sozusagen statisch mit der App
#   ausgeliefert werden können. Mit anderen Worten: Darüber hat der Entwickler
#   die Steuerungs-Hoheit.
#
PSQL_HOST: '138.199.218.230'
PSQL_PORT: '22555'
PSQL_DATABASE: 'cg'

##  Formatstrings für date, time, datetime
#       Damit wird festgelegt, wie diese Typen dargestellt und
#       interpretiert werden. Die Werte sind als Liste von Möglichkeiten
#       zu definieren. Der erste Wert dient der Darstellung, alle
#       weiteren als Alternativen zur Interpretation.
FORMATS_TIME: ['%H:%M',]
FORMATS_DATE: ['%d.%m.%Y', '%Y-%m-%d']
FORMATS_DATETIME: ['%Y-%m-%d %H:%M',]

## Erlaubte Datei-Erweiterungen für Anhänge von Massenmails
#       Als kommaseperierte Aufzählung in einem String, Whitespaces erlaubt.
#       Wildcards sind zu vermeiden; Abfrage wird durch filename.endswith(...)
#       erledigt.
#       Case-insensitiv
#       Bsp.: 'pdf, png, jpg, jpeg'
ERLAUBTE_EXTENSIONS: '.pdf, .png, .jpg, .jpeg'

## SQL_INJECTION_MAXLENGTH
## SQL_INJECTION_BLACKLIST
#       Werte aus Filter-Feldern der Navis werden in SELECT Abfragen auf der
#       PostgreSQL-Datenbank verwendet. Aus Historischen und technischen Gründen
#       war es nicht ohne weiteres möglich, dass über parametrisierte
#       cursor.execute(...) zu programmieren. Daher schützen wir uns hier
#       anders (und wohl letztlich nicht vollständig) vor SQL Injection Angriffen:
#       1. Wir erlauben Filter-Werte nur bis zu einer Länge von maximal
#             SQL_INJECTION_MAXLENGTH
#       2. Wir eliminieren alle Zeichen aus
#             SQL_INJECTION_BLACKLIST
#          aus dem Filter-Wert
#       Die Kombination aus beidem gibt einen nicht schlechten Schutz.
#       Insb. wird der eingegebene Filter-Wert zuerst auf die maximale Länge
#       reduziert. D.h. um so mehr kritische Zeichen aus der Blacklist
#       vorkommen, um so mehr tatsächlich relevante Zeichen gehen verloren
#       Vgl. bibModell.buildFilterSQL
SQL_INJECTION_MAXLENGTH: 7
SQL_INJECTION_BLACKLIST: ["'", '"', ';', '=', '(', ')', '[', ']', '{', '}', '\\', '-', '*', '/']

## TOOLTIP_DELAY
#       Verzögerung in Millisekunden für die Anzeige eines Tooltips, nachdem
#       die Maus über ein Widget kommt. Damit wird verhindert, dass bei schnellen
#       Mausbewegungen über eine Reihe von Widgets ständig Tooltips aufblitzen.
#       Sinnvoller Wert: 250
TOOLTIP_DELAY: 250
