# generated by datamodel-codegen:
#   filename:  c_cpp_properties.schema.json
#   timestamp: 2025-05-27T15:43:50+00:00
# ref: https://github.com/microsoft/vscode-cpptools/blob/d059b382533d20be1fb22783923eacc85820773e/Extension/c_cpp_properties.schema.json

from __future__ import annotations
from enum import Enum
from typing import Annotated, Dict, List, Optional, Union
from pydantic import BaseModel, ConfigDict, Field, RootModel


class CStandard(str, Enum):
    """
    Version of the C language standard to use for IntelliSense. Note: GNU standards are only used to query the set compiler to get GNU defines, and IntelliSense will emulate the equivalent C standard version.
    """

    c89 = "c89"
    c99 = "c99"
    c11 = "c11"
    c17 = "c17"
    c23 = "c23"
    gnu89 = "gnu89"
    gnu99 = "gnu99"
    gnu11 = "gnu11"
    gnu17 = "gnu17"
    gnu23 = "gnu23"
    field__default_ = "${default}"


class CppStandard(str, Enum):
    """
    Version of the C++ language standard to use for IntelliSense. Note: GNU standards are only used to query the set compiler to get GNU defines, and IntelliSense will emulate the equivalent C++ standard version.
    """

    c__98 = "c++98"
    c__03 = "c++03"
    c__11 = "c++11"
    c__14 = "c++14"
    c__17 = "c++17"
    c__20 = "c++20"
    c__23 = "c++23"
    c__26 = "c++26"
    gnu__98 = "gnu++98"
    gnu__03 = "gnu++03"
    gnu__11 = "gnu++11"
    gnu__14 = "gnu++14"
    gnu__17 = "gnu++17"
    gnu__20 = "gnu++20"
    gnu__23 = "gnu++23"
    gnu__26 = "gnu++26"
    field__default_ = "${default}"


class CompileCommands(RootModel[List[str]]):
    root: List[str]


class IntelliSenseMode(str, Enum):
    macos_clang_x86 = "macos-clang-x86"
    macos_clang_x64 = "macos-clang-x64"
    macos_clang_arm = "macos-clang-arm"
    macos_clang_arm64 = "macos-clang-arm64"
    macos_gcc_x86 = "macos-gcc-x86"
    macos_gcc_x64 = "macos-gcc-x64"
    macos_gcc_arm = "macos-gcc-arm"
    macos_gcc_arm64 = "macos-gcc-arm64"
    linux_clang_x86 = "linux-clang-x86"
    linux_clang_x64 = "linux-clang-x64"
    linux_clang_arm = "linux-clang-arm"
    linux_clang_arm64 = "linux-clang-arm64"
    linux_gcc_x86 = "linux-gcc-x86"
    linux_gcc_x64 = "linux-gcc-x64"
    linux_gcc_arm = "linux-gcc-arm"
    linux_gcc_arm64 = "linux-gcc-arm64"
    windows_clang_x86 = "windows-clang-x86"
    windows_clang_x64 = "windows-clang-x64"
    windows_clang_arm = "windows-clang-arm"
    windows_clang_arm64 = "windows-clang-arm64"
    windows_gcc_x86 = "windows-gcc-x86"
    windows_gcc_x64 = "windows-gcc-x64"
    windows_gcc_arm = "windows-gcc-arm"
    windows_gcc_arm64 = "windows-gcc-arm64"
    windows_msvc_x86 = "windows-msvc-x86"
    windows_msvc_x64 = "windows-msvc-x64"
    windows_msvc_arm = "windows-msvc-arm"
    windows_msvc_arm64 = "windows-msvc-arm64"
    clang_x86 = "clang-x86"
    clang_x64 = "clang-x64"
    clang_arm = "clang-arm"
    clang_arm64 = "clang-arm64"
    gcc_x86 = "gcc-x86"
    gcc_x64 = "gcc-x64"
    gcc_arm = "gcc-arm"
    gcc_arm64 = "gcc-arm64"
    msvc_x86 = "msvc-x86"
    msvc_x64 = "msvc-x64"
    msvc_arm = "msvc-arm"
    msvc_arm64 = "msvc-arm64"
    field__default_ = "${default}"


class Browse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    limitSymbolsToIncludedHeaders: Optional[Union[bool, str]] = None
    databaseFilename: Annotated[
        Optional[str],
        Field(
            description="Path to the generated symbol database. If a relative path is specified, it will be made relative to the workspace's default storage location."
        ),
    ] = None
    path: Optional[List[str]] = None


class Reduce(str, Enum):
    always = "always"
    never = "never"
    default = "default"
    field__default_ = "${default}"


class Priority(str, Enum):
    beforeSystemIncludes = "beforeSystemIncludes"
    afterSystemIncludes = "afterSystemIncludes"
    field__default_ = "${default}"


class Order(str, Enum):
    depthFirst = "depthFirst"
    breadthFirst = "breadthFirst"
    field__default_ = "${default}"


class RecursiveIncludes(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    reduce: Optional[Reduce] = None
    priority: Optional[Priority] = None
    order: Optional[Order] = None


class Configuration(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str
    compilerPath: Optional[str] = None
    compilerArgs: Optional[List[str]] = None
    cStandard: Annotated[
        Optional[CStandard],
        Field(
            description="Version of the C language standard to use for IntelliSense. Note: GNU standards are only used to query the set compiler to get GNU defines, and IntelliSense will emulate the equivalent C standard version."
        ),
    ] = None
    cppStandard: Annotated[
        Optional[CppStandard],
        Field(
            description="Version of the C++ language standard to use for IntelliSense. Note: GNU standards are only used to query the set compiler to get GNU defines, and IntelliSense will emulate the equivalent C++ standard version."
        ),
    ] = None
    compileCommands: Optional[Union[str, CompileCommands]] = None
    includePath: Optional[List[str]] = None
    macFrameworkPath: Annotated[
        Optional[List[str]],
        Field(
            description="A list of paths for the IntelliSense engine to use while searching for included headers from Mac frameworks. Only supported on Mac configuration."
        ),
    ] = None
    windowsSdkVersion: Annotated[
        Optional[str], Field(pattern="^\\d{2}\\.\\d{1}\\.\\d{5}\\.\\d{1}$|^8\\.1$")
    ] = None
    dotConfig: Annotated[
        Optional[str],
        Field(
            description="A path to a .config file created by Kconfig system. Kconfig system generates a file with all the defines to build a project. Examples of projects that use Kconfig system are the Linux Kernel and NuttX RTOS."
        ),
    ] = None
    defines: Optional[List[str]] = None
    intelliSenseMode: Optional[IntelliSenseMode] = None
    forcedInclude: Annotated[
        Optional[List[str]],
        Field(
            description="A list of files that should be included before any include file in a translation unit."
        ),
    ] = None
    configurationProvider: Annotated[
        Optional[str],
        Field(
            description="The id of a VS Code extension that can provide IntelliSense configuration information for source files."
        ),
    ] = None
    mergeConfigurations: Optional[Union[bool, str]] = None
    browse: Optional[Browse] = None
    recursiveIncludes: Optional[RecursiveIncludes] = None
    customConfigurationVariables: Optional[Dict[str, str]] = None


class Configurations(RootModel[List[Configuration]]):
    root: List[Configuration]


class Env(RootModel[Dict[str, Union[str, List[str]]]]):
    root: Dict[str, Union[str, List[str]]]


class Version(RootModel[int]):
    root: Annotated[
        int,
        Field(
            description="Version of the configuration file. This property is managed by the extension. Please do not change it."
        ),
    ]


class EnableConfigurationSquiggles(RootModel[bool]):
    root: bool


class Model(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    configurations: Configurations
    env: Optional[Env] = None
    version: Version
    enableConfigurationSquiggles: Optional[EnableConfigurationSquiggles] = None
