[project]
name = "cpp-to-compile-commands"
version = "0.1.0"
description = "Convert microsoft c_cpp_properties.json to a compilation database file"
authors = [{ name = "Totto16" }]
readme = "README.md"
requires-python = ">=3.10"
license = { text = "MIT" }
dependencies = ["pydantic>=2.11.5"]

[build-system]
requires = ["setuptools>=61", "wheel"]
build-backend = "setuptools.build_meta"

[project.scripts]
cpp_to_compile_commands = "index:main"


[tool.ruff]

# Exclude directories.
exclude = []

# 88 (standard) is to small
line-length = 100
indent-width = 4

target-version = "py310"

[tool.ruff.lint]

select = ["ALL"]

ignore = [
    "E501",    # => line length violations
    "PLR2004", # => magic-value-comparison 
    "PLR0913", # => too-many-arguments
    "PLR0911", # => too-many-return-statements
    "PLR0912", # => too-many-branches 
    "UP007",   # => non-pep604-annotation  (Union[a,b] => a|b is fine, but i like Optional[a] better then a|None)
    "ANN401",  # => any-type 
    "D",       # pydocstyle => I don't use doc strings atm. 
    "C90",     # mccabe => complexity isn't of concern atm.
    "TC006",   # runtime-cast-value => I prefer using normal types, not string quoted ones
    "TRY300",  # move return from try to else block, I hate that control flow in python, that try can have an else block is just dumb
    "G004",    # logging with f strings makes sense, if the messeg just needs rto be formatted, before the log is executed
    "FIX",     # todo activate
    "TD",      # todo activate,
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []


# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

per-file-ignores = { "src/data/*.py" = [
    "ERA001", # ignore "ERA001" (commented-out code)
    "N815",   # ignore wrong case, as it's generated
    "UP006",  # ignore Use `list` instead of `List` for type annotation, as it's generated ,
    "UP035",  # ignore `typing.List` is deprecated, use `list` instead, as it's generated
    "COM812", # ignore Trailing comma missing, as it's generated
    "I001",   # ignore Organize imports, as it's generated
] }


[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"


[tool.mypy]
python_version = "3.10"
warn_return_any = false
disallow_untyped_calls = false
strict = true
ignore_missing_imports = false
warn_unreachable = true
disallow_any_explicit = false
allow_redefinition = true
strict_optional = true
show_error_codes = true
show_column_numbers = true
warn_no_return = true
disallow_any_unimported = false
disallow_any_generics = true
implicit_reexport = false

[dependency-groups]
dev = ["datamodel-code-generator>=0.30.1", "mypy>=1.15.0", "ruff>=0.11.11"]
