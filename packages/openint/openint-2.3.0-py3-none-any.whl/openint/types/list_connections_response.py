# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from typing import TYPE_CHECKING, Dict, List, Union, Optional
from typing_extensions import Literal, TypeAlias

from pydantic import Field as FieldInfo

from .._models import BaseModel

__all__ = [
    "ListConnectionsResponse",
    "ConnectorAcceloDiscriminatedConnectionSettings",
    "ConnectorAcceloDiscriminatedConnectionSettingsConnector",
    "ConnectorAcceloDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorAcceloDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorAcceloDiscriminatedConnectionSettingsIntegration",
    "ConnectorAcceloDiscriminatedConnectionSettingsSettings",
    "ConnectorAcceloDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorAcceloDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorAcmeOauth2DiscriminatedConnectionSettings",
    "ConnectorAcmeOauth2DiscriminatedConnectionSettingsConnector",
    "ConnectorAcmeOauth2DiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorAcmeOauth2DiscriminatedConnectionSettingsConnectorScope",
    "ConnectorAcmeOauth2DiscriminatedConnectionSettingsIntegration",
    "ConnectorAcmeOauth2DiscriminatedConnectionSettingsSettings",
    "ConnectorAcmeOauth2DiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorAcmeOauth2DiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorAdobeDiscriminatedConnectionSettings",
    "ConnectorAdobeDiscriminatedConnectionSettingsConnector",
    "ConnectorAdobeDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorAdobeDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorAdobeDiscriminatedConnectionSettingsIntegration",
    "ConnectorAdobeDiscriminatedConnectionSettingsSettings",
    "ConnectorAdobeDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorAdobeDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorAdyenDiscriminatedConnectionSettings",
    "ConnectorAdyenDiscriminatedConnectionSettingsConnector",
    "ConnectorAdyenDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorAdyenDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorAdyenDiscriminatedConnectionSettingsIntegration",
    "ConnectorAdyenDiscriminatedConnectionSettingsSettings",
    "ConnectorAdyenDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorAdyenDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorAircallDiscriminatedConnectionSettings",
    "ConnectorAircallDiscriminatedConnectionSettingsConnector",
    "ConnectorAircallDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorAircallDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorAircallDiscriminatedConnectionSettingsIntegration",
    "ConnectorAircallDiscriminatedConnectionSettingsSettings",
    "ConnectorAircallDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorAircallDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorAmazonDiscriminatedConnectionSettings",
    "ConnectorAmazonDiscriminatedConnectionSettingsConnector",
    "ConnectorAmazonDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorAmazonDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorAmazonDiscriminatedConnectionSettingsIntegration",
    "ConnectorAmazonDiscriminatedConnectionSettingsSettings",
    "ConnectorAmazonDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorAmazonDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorApaleoDiscriminatedConnectionSettings",
    "ConnectorApaleoDiscriminatedConnectionSettingsConnector",
    "ConnectorApaleoDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorApaleoDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorApaleoDiscriminatedConnectionSettingsIntegration",
    "ConnectorApaleoDiscriminatedConnectionSettingsSettings",
    "ConnectorApaleoDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorApaleoDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorAsanaDiscriminatedConnectionSettings",
    "ConnectorAsanaDiscriminatedConnectionSettingsConnector",
    "ConnectorAsanaDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorAsanaDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorAsanaDiscriminatedConnectionSettingsIntegration",
    "ConnectorAsanaDiscriminatedConnectionSettingsSettings",
    "ConnectorAsanaDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorAsanaDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorAttioDiscriminatedConnectionSettings",
    "ConnectorAttioDiscriminatedConnectionSettingsConnector",
    "ConnectorAttioDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorAttioDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorAttioDiscriminatedConnectionSettingsIntegration",
    "ConnectorAttioDiscriminatedConnectionSettingsSettings",
    "ConnectorAttioDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorAttioDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorAuth0DiscriminatedConnectionSettings",
    "ConnectorAuth0DiscriminatedConnectionSettingsConnector",
    "ConnectorAuth0DiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorAuth0DiscriminatedConnectionSettingsConnectorScope",
    "ConnectorAuth0DiscriminatedConnectionSettingsIntegration",
    "ConnectorAuth0DiscriminatedConnectionSettingsSettings",
    "ConnectorAuth0DiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorAuth0DiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorAutodeskDiscriminatedConnectionSettings",
    "ConnectorAutodeskDiscriminatedConnectionSettingsConnector",
    "ConnectorAutodeskDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorAutodeskDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorAutodeskDiscriminatedConnectionSettingsIntegration",
    "ConnectorAutodeskDiscriminatedConnectionSettingsSettings",
    "ConnectorAutodeskDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorAutodeskDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorAwsDiscriminatedConnectionSettings",
    "ConnectorAwsDiscriminatedConnectionSettingsConnector",
    "ConnectorAwsDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorAwsDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorAwsDiscriminatedConnectionSettingsIntegration",
    "ConnectorAwsDiscriminatedConnectionSettingsSettings",
    "ConnectorAwsDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorAwsDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorBamboohrDiscriminatedConnectionSettings",
    "ConnectorBamboohrDiscriminatedConnectionSettingsConnector",
    "ConnectorBamboohrDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorBamboohrDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorBamboohrDiscriminatedConnectionSettingsIntegration",
    "ConnectorBamboohrDiscriminatedConnectionSettingsSettings",
    "ConnectorBamboohrDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorBamboohrDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorBasecampDiscriminatedConnectionSettings",
    "ConnectorBasecampDiscriminatedConnectionSettingsConnector",
    "ConnectorBasecampDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorBasecampDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorBasecampDiscriminatedConnectionSettingsIntegration",
    "ConnectorBasecampDiscriminatedConnectionSettingsSettings",
    "ConnectorBasecampDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorBasecampDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorBattlenetDiscriminatedConnectionSettings",
    "ConnectorBattlenetDiscriminatedConnectionSettingsConnector",
    "ConnectorBattlenetDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorBattlenetDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorBattlenetDiscriminatedConnectionSettingsIntegration",
    "ConnectorBattlenetDiscriminatedConnectionSettingsSettings",
    "ConnectorBattlenetDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorBattlenetDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorBigcommerceDiscriminatedConnectionSettings",
    "ConnectorBigcommerceDiscriminatedConnectionSettingsConnector",
    "ConnectorBigcommerceDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorBigcommerceDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorBigcommerceDiscriminatedConnectionSettingsIntegration",
    "ConnectorBigcommerceDiscriminatedConnectionSettingsSettings",
    "ConnectorBigcommerceDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorBigcommerceDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorBitbucketDiscriminatedConnectionSettings",
    "ConnectorBitbucketDiscriminatedConnectionSettingsConnector",
    "ConnectorBitbucketDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorBitbucketDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorBitbucketDiscriminatedConnectionSettingsIntegration",
    "ConnectorBitbucketDiscriminatedConnectionSettingsSettings",
    "ConnectorBitbucketDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorBitbucketDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorBitlyDiscriminatedConnectionSettings",
    "ConnectorBitlyDiscriminatedConnectionSettingsConnector",
    "ConnectorBitlyDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorBitlyDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorBitlyDiscriminatedConnectionSettingsIntegration",
    "ConnectorBitlyDiscriminatedConnectionSettingsSettings",
    "ConnectorBitlyDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorBitlyDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorBlackbaudDiscriminatedConnectionSettings",
    "ConnectorBlackbaudDiscriminatedConnectionSettingsConnector",
    "ConnectorBlackbaudDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorBlackbaudDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorBlackbaudDiscriminatedConnectionSettingsIntegration",
    "ConnectorBlackbaudDiscriminatedConnectionSettingsSettings",
    "ConnectorBlackbaudDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorBlackbaudDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorBoldsignDiscriminatedConnectionSettings",
    "ConnectorBoldsignDiscriminatedConnectionSettingsConnector",
    "ConnectorBoldsignDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorBoldsignDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorBoldsignDiscriminatedConnectionSettingsIntegration",
    "ConnectorBoldsignDiscriminatedConnectionSettingsSettings",
    "ConnectorBoldsignDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorBoldsignDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorBoxDiscriminatedConnectionSettings",
    "ConnectorBoxDiscriminatedConnectionSettingsConnector",
    "ConnectorBoxDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorBoxDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorBoxDiscriminatedConnectionSettingsIntegration",
    "ConnectorBoxDiscriminatedConnectionSettingsSettings",
    "ConnectorBoxDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorBoxDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorBraintreeDiscriminatedConnectionSettings",
    "ConnectorBraintreeDiscriminatedConnectionSettingsConnector",
    "ConnectorBraintreeDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorBraintreeDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorBraintreeDiscriminatedConnectionSettingsIntegration",
    "ConnectorBraintreeDiscriminatedConnectionSettingsSettings",
    "ConnectorBraintreeDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorBraintreeDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorCalendlyDiscriminatedConnectionSettings",
    "ConnectorCalendlyDiscriminatedConnectionSettingsConnector",
    "ConnectorCalendlyDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorCalendlyDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorCalendlyDiscriminatedConnectionSettingsIntegration",
    "ConnectorCalendlyDiscriminatedConnectionSettingsSettings",
    "ConnectorCalendlyDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorCalendlyDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorClickupDiscriminatedConnectionSettings",
    "ConnectorClickupDiscriminatedConnectionSettingsConnector",
    "ConnectorClickupDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorClickupDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorClickupDiscriminatedConnectionSettingsIntegration",
    "ConnectorClickupDiscriminatedConnectionSettingsSettings",
    "ConnectorClickupDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorClickupDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorCloseDiscriminatedConnectionSettings",
    "ConnectorCloseDiscriminatedConnectionSettingsConnector",
    "ConnectorCloseDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorCloseDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorCloseDiscriminatedConnectionSettingsIntegration",
    "ConnectorCloseDiscriminatedConnectionSettingsSettings",
    "ConnectorCloseDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorCloseDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorConfluenceDiscriminatedConnectionSettings",
    "ConnectorConfluenceDiscriminatedConnectionSettingsConnector",
    "ConnectorConfluenceDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorConfluenceDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorConfluenceDiscriminatedConnectionSettingsIntegration",
    "ConnectorConfluenceDiscriminatedConnectionSettingsSettings",
    "ConnectorConfluenceDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorConfluenceDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorContentfulDiscriminatedConnectionSettings",
    "ConnectorContentfulDiscriminatedConnectionSettingsConnector",
    "ConnectorContentfulDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorContentfulDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorContentfulDiscriminatedConnectionSettingsIntegration",
    "ConnectorContentfulDiscriminatedConnectionSettingsSettings",
    "ConnectorContentfulDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorContentfulDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorContentstackDiscriminatedConnectionSettings",
    "ConnectorContentstackDiscriminatedConnectionSettingsConnector",
    "ConnectorContentstackDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorContentstackDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorContentstackDiscriminatedConnectionSettingsIntegration",
    "ConnectorContentstackDiscriminatedConnectionSettingsSettings",
    "ConnectorContentstackDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorContentstackDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorCopperDiscriminatedConnectionSettings",
    "ConnectorCopperDiscriminatedConnectionSettingsConnector",
    "ConnectorCopperDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorCopperDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorCopperDiscriminatedConnectionSettingsIntegration",
    "ConnectorCopperDiscriminatedConnectionSettingsSettings",
    "ConnectorCopperDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorCopperDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorCorosDiscriminatedConnectionSettings",
    "ConnectorCorosDiscriminatedConnectionSettingsConnector",
    "ConnectorCorosDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorCorosDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorCorosDiscriminatedConnectionSettingsIntegration",
    "ConnectorCorosDiscriminatedConnectionSettingsSettings",
    "ConnectorCorosDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorCorosDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorDatevDiscriminatedConnectionSettings",
    "ConnectorDatevDiscriminatedConnectionSettingsConnector",
    "ConnectorDatevDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorDatevDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorDatevDiscriminatedConnectionSettingsIntegration",
    "ConnectorDatevDiscriminatedConnectionSettingsSettings",
    "ConnectorDatevDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorDatevDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorDeelDiscriminatedConnectionSettings",
    "ConnectorDeelDiscriminatedConnectionSettingsConnector",
    "ConnectorDeelDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorDeelDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorDeelDiscriminatedConnectionSettingsIntegration",
    "ConnectorDeelDiscriminatedConnectionSettingsSettings",
    "ConnectorDeelDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorDeelDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorDialpadDiscriminatedConnectionSettings",
    "ConnectorDialpadDiscriminatedConnectionSettingsConnector",
    "ConnectorDialpadDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorDialpadDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorDialpadDiscriminatedConnectionSettingsIntegration",
    "ConnectorDialpadDiscriminatedConnectionSettingsSettings",
    "ConnectorDialpadDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorDialpadDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorDigitaloceanDiscriminatedConnectionSettings",
    "ConnectorDigitaloceanDiscriminatedConnectionSettingsConnector",
    "ConnectorDigitaloceanDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorDigitaloceanDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorDigitaloceanDiscriminatedConnectionSettingsIntegration",
    "ConnectorDigitaloceanDiscriminatedConnectionSettingsSettings",
    "ConnectorDigitaloceanDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorDigitaloceanDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorDiscordDiscriminatedConnectionSettings",
    "ConnectorDiscordDiscriminatedConnectionSettingsConnector",
    "ConnectorDiscordDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorDiscordDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorDiscordDiscriminatedConnectionSettingsIntegration",
    "ConnectorDiscordDiscriminatedConnectionSettingsSettings",
    "ConnectorDiscordDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorDiscordDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorDocusignDiscriminatedConnectionSettings",
    "ConnectorDocusignDiscriminatedConnectionSettingsConnector",
    "ConnectorDocusignDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorDocusignDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorDocusignDiscriminatedConnectionSettingsIntegration",
    "ConnectorDocusignDiscriminatedConnectionSettingsSettings",
    "ConnectorDocusignDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorDocusignDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorDropboxDiscriminatedConnectionSettings",
    "ConnectorDropboxDiscriminatedConnectionSettingsConnector",
    "ConnectorDropboxDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorDropboxDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorDropboxDiscriminatedConnectionSettingsIntegration",
    "ConnectorDropboxDiscriminatedConnectionSettingsSettings",
    "ConnectorDropboxDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorDropboxDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorEbayDiscriminatedConnectionSettings",
    "ConnectorEbayDiscriminatedConnectionSettingsConnector",
    "ConnectorEbayDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorEbayDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorEbayDiscriminatedConnectionSettingsIntegration",
    "ConnectorEbayDiscriminatedConnectionSettingsSettings",
    "ConnectorEbayDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorEbayDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorEgnyteDiscriminatedConnectionSettings",
    "ConnectorEgnyteDiscriminatedConnectionSettingsConnector",
    "ConnectorEgnyteDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorEgnyteDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorEgnyteDiscriminatedConnectionSettingsIntegration",
    "ConnectorEgnyteDiscriminatedConnectionSettingsSettings",
    "ConnectorEgnyteDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorEgnyteDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorEnvoyDiscriminatedConnectionSettings",
    "ConnectorEnvoyDiscriminatedConnectionSettingsConnector",
    "ConnectorEnvoyDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorEnvoyDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorEnvoyDiscriminatedConnectionSettingsIntegration",
    "ConnectorEnvoyDiscriminatedConnectionSettingsSettings",
    "ConnectorEnvoyDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorEnvoyDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorEventbriteDiscriminatedConnectionSettings",
    "ConnectorEventbriteDiscriminatedConnectionSettingsConnector",
    "ConnectorEventbriteDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorEventbriteDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorEventbriteDiscriminatedConnectionSettingsIntegration",
    "ConnectorEventbriteDiscriminatedConnectionSettingsSettings",
    "ConnectorEventbriteDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorEventbriteDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorExistDiscriminatedConnectionSettings",
    "ConnectorExistDiscriminatedConnectionSettingsConnector",
    "ConnectorExistDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorExistDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorExistDiscriminatedConnectionSettingsIntegration",
    "ConnectorExistDiscriminatedConnectionSettingsSettings",
    "ConnectorExistDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorExistDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorFacebookDiscriminatedConnectionSettings",
    "ConnectorFacebookDiscriminatedConnectionSettingsConnector",
    "ConnectorFacebookDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorFacebookDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorFacebookDiscriminatedConnectionSettingsIntegration",
    "ConnectorFacebookDiscriminatedConnectionSettingsSettings",
    "ConnectorFacebookDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorFacebookDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorFactorialDiscriminatedConnectionSettings",
    "ConnectorFactorialDiscriminatedConnectionSettingsConnector",
    "ConnectorFactorialDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorFactorialDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorFactorialDiscriminatedConnectionSettingsIntegration",
    "ConnectorFactorialDiscriminatedConnectionSettingsSettings",
    "ConnectorFactorialDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorFactorialDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorFigmaDiscriminatedConnectionSettings",
    "ConnectorFigmaDiscriminatedConnectionSettingsConnector",
    "ConnectorFigmaDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorFigmaDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorFigmaDiscriminatedConnectionSettingsIntegration",
    "ConnectorFigmaDiscriminatedConnectionSettingsSettings",
    "ConnectorFigmaDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorFigmaDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorFitbitDiscriminatedConnectionSettings",
    "ConnectorFitbitDiscriminatedConnectionSettingsConnector",
    "ConnectorFitbitDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorFitbitDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorFitbitDiscriminatedConnectionSettingsIntegration",
    "ConnectorFitbitDiscriminatedConnectionSettingsSettings",
    "ConnectorFitbitDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorFitbitDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorFortnoxDiscriminatedConnectionSettings",
    "ConnectorFortnoxDiscriminatedConnectionSettingsConnector",
    "ConnectorFortnoxDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorFortnoxDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorFortnoxDiscriminatedConnectionSettingsIntegration",
    "ConnectorFortnoxDiscriminatedConnectionSettingsSettings",
    "ConnectorFortnoxDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorFortnoxDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorFreshbooksDiscriminatedConnectionSettings",
    "ConnectorFreshbooksDiscriminatedConnectionSettingsConnector",
    "ConnectorFreshbooksDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorFreshbooksDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorFreshbooksDiscriminatedConnectionSettingsIntegration",
    "ConnectorFreshbooksDiscriminatedConnectionSettingsSettings",
    "ConnectorFreshbooksDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorFreshbooksDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorFrontDiscriminatedConnectionSettings",
    "ConnectorFrontDiscriminatedConnectionSettingsConnector",
    "ConnectorFrontDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorFrontDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorFrontDiscriminatedConnectionSettingsIntegration",
    "ConnectorFrontDiscriminatedConnectionSettingsSettings",
    "ConnectorFrontDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorFrontDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorGitHubDiscriminatedConnectionSettings",
    "ConnectorGitHubDiscriminatedConnectionSettingsConnector",
    "ConnectorGitHubDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorGitHubDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorGitHubDiscriminatedConnectionSettingsIntegration",
    "ConnectorGitHubDiscriminatedConnectionSettingsSettings",
    "ConnectorGitHubDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorGitHubDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorGitlabDiscriminatedConnectionSettings",
    "ConnectorGitlabDiscriminatedConnectionSettingsConnector",
    "ConnectorGitlabDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorGitlabDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorGitlabDiscriminatedConnectionSettingsIntegration",
    "ConnectorGitlabDiscriminatedConnectionSettingsSettings",
    "ConnectorGitlabDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorGitlabDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorGongDiscriminatedConnectionSettings",
    "ConnectorGongDiscriminatedConnectionSettingsConnector",
    "ConnectorGongDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorGongDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorGongDiscriminatedConnectionSettingsIntegration",
    "ConnectorGongDiscriminatedConnectionSettingsSettings",
    "ConnectorGongDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorGongDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorGoogleCalendarDiscriminatedConnectionSettings",
    "ConnectorGoogleCalendarDiscriminatedConnectionSettingsConnector",
    "ConnectorGoogleCalendarDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorGoogleCalendarDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorGoogleCalendarDiscriminatedConnectionSettingsIntegration",
    "ConnectorGoogleCalendarDiscriminatedConnectionSettingsSettings",
    "ConnectorGoogleCalendarDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorGoogleCalendarDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorGoogleDocsDiscriminatedConnectionSettings",
    "ConnectorGoogleDocsDiscriminatedConnectionSettingsConnector",
    "ConnectorGoogleDocsDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorGoogleDocsDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorGoogleDocsDiscriminatedConnectionSettingsIntegration",
    "ConnectorGoogleDocsDiscriminatedConnectionSettingsSettings",
    "ConnectorGoogleDocsDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorGoogleDocsDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorGoogleDriveDiscriminatedConnectionSettings",
    "ConnectorGoogleDriveDiscriminatedConnectionSettingsConnector",
    "ConnectorGoogleDriveDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorGoogleDriveDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorGoogleDriveDiscriminatedConnectionSettingsIntegration",
    "ConnectorGoogleDriveDiscriminatedConnectionSettingsSettings",
    "ConnectorGoogleDriveDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorGoogleDriveDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorGoogleMailDiscriminatedConnectionSettings",
    "ConnectorGoogleMailDiscriminatedConnectionSettingsConnector",
    "ConnectorGoogleMailDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorGoogleMailDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorGoogleMailDiscriminatedConnectionSettingsIntegration",
    "ConnectorGoogleMailDiscriminatedConnectionSettingsSettings",
    "ConnectorGoogleMailDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorGoogleMailDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorGoogleSheetDiscriminatedConnectionSettings",
    "ConnectorGoogleSheetDiscriminatedConnectionSettingsConnector",
    "ConnectorGoogleSheetDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorGoogleSheetDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorGoogleSheetDiscriminatedConnectionSettingsIntegration",
    "ConnectorGoogleSheetDiscriminatedConnectionSettingsSettings",
    "ConnectorGoogleSheetDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorGoogleSheetDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorGorgiasDiscriminatedConnectionSettings",
    "ConnectorGorgiasDiscriminatedConnectionSettingsConnector",
    "ConnectorGorgiasDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorGorgiasDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorGorgiasDiscriminatedConnectionSettingsIntegration",
    "ConnectorGorgiasDiscriminatedConnectionSettingsSettings",
    "ConnectorGorgiasDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorGorgiasDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorGrainDiscriminatedConnectionSettings",
    "ConnectorGrainDiscriminatedConnectionSettingsConnector",
    "ConnectorGrainDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorGrainDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorGrainDiscriminatedConnectionSettingsIntegration",
    "ConnectorGrainDiscriminatedConnectionSettingsSettings",
    "ConnectorGrainDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorGrainDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorGumroadDiscriminatedConnectionSettings",
    "ConnectorGumroadDiscriminatedConnectionSettingsConnector",
    "ConnectorGumroadDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorGumroadDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorGumroadDiscriminatedConnectionSettingsIntegration",
    "ConnectorGumroadDiscriminatedConnectionSettingsSettings",
    "ConnectorGumroadDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorGumroadDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorGustoDiscriminatedConnectionSettings",
    "ConnectorGustoDiscriminatedConnectionSettingsConnector",
    "ConnectorGustoDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorGustoDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorGustoDiscriminatedConnectionSettingsIntegration",
    "ConnectorGustoDiscriminatedConnectionSettingsSettings",
    "ConnectorGustoDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorGustoDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorHarvestDiscriminatedConnectionSettings",
    "ConnectorHarvestDiscriminatedConnectionSettingsConnector",
    "ConnectorHarvestDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorHarvestDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorHarvestDiscriminatedConnectionSettingsIntegration",
    "ConnectorHarvestDiscriminatedConnectionSettingsSettings",
    "ConnectorHarvestDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorHarvestDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorHighlevelDiscriminatedConnectionSettings",
    "ConnectorHighlevelDiscriminatedConnectionSettingsConnector",
    "ConnectorHighlevelDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorHighlevelDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorHighlevelDiscriminatedConnectionSettingsIntegration",
    "ConnectorHighlevelDiscriminatedConnectionSettingsSettings",
    "ConnectorHighlevelDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorHighlevelDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorHubspotDiscriminatedConnectionSettings",
    "ConnectorHubspotDiscriminatedConnectionSettingsConnector",
    "ConnectorHubspotDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorHubspotDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorHubspotDiscriminatedConnectionSettingsIntegration",
    "ConnectorHubspotDiscriminatedConnectionSettingsSettings",
    "ConnectorHubspotDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorHubspotDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorInstagramDiscriminatedConnectionSettings",
    "ConnectorInstagramDiscriminatedConnectionSettingsConnector",
    "ConnectorInstagramDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorInstagramDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorInstagramDiscriminatedConnectionSettingsIntegration",
    "ConnectorInstagramDiscriminatedConnectionSettingsSettings",
    "ConnectorInstagramDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorInstagramDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorIntercomDiscriminatedConnectionSettings",
    "ConnectorIntercomDiscriminatedConnectionSettingsConnector",
    "ConnectorIntercomDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorIntercomDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorIntercomDiscriminatedConnectionSettingsIntegration",
    "ConnectorIntercomDiscriminatedConnectionSettingsSettings",
    "ConnectorIntercomDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorIntercomDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorJiraDiscriminatedConnectionSettings",
    "ConnectorJiraDiscriminatedConnectionSettingsConnector",
    "ConnectorJiraDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorJiraDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorJiraDiscriminatedConnectionSettingsIntegration",
    "ConnectorJiraDiscriminatedConnectionSettingsSettings",
    "ConnectorJiraDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorJiraDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorKeapDiscriminatedConnectionSettings",
    "ConnectorKeapDiscriminatedConnectionSettingsConnector",
    "ConnectorKeapDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorKeapDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorKeapDiscriminatedConnectionSettingsIntegration",
    "ConnectorKeapDiscriminatedConnectionSettingsSettings",
    "ConnectorKeapDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorKeapDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorLeverDiscriminatedConnectionSettings",
    "ConnectorLeverDiscriminatedConnectionSettingsConnector",
    "ConnectorLeverDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorLeverDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorLeverDiscriminatedConnectionSettingsIntegration",
    "ConnectorLeverDiscriminatedConnectionSettingsSettings",
    "ConnectorLeverDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorLeverDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorLinearDiscriminatedConnectionSettings",
    "ConnectorLinearDiscriminatedConnectionSettingsConnector",
    "ConnectorLinearDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorLinearDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorLinearDiscriminatedConnectionSettingsIntegration",
    "ConnectorLinearDiscriminatedConnectionSettingsSettings",
    "ConnectorLinearDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorLinearDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorLinkedinDiscriminatedConnectionSettings",
    "ConnectorLinkedinDiscriminatedConnectionSettingsConnector",
    "ConnectorLinkedinDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorLinkedinDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorLinkedinDiscriminatedConnectionSettingsIntegration",
    "ConnectorLinkedinDiscriminatedConnectionSettingsSettings",
    "ConnectorLinkedinDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorLinkedinDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorLinkhutDiscriminatedConnectionSettings",
    "ConnectorLinkhutDiscriminatedConnectionSettingsConnector",
    "ConnectorLinkhutDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorLinkhutDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorLinkhutDiscriminatedConnectionSettingsIntegration",
    "ConnectorLinkhutDiscriminatedConnectionSettingsSettings",
    "ConnectorLinkhutDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorLinkhutDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorMailchimpDiscriminatedConnectionSettings",
    "ConnectorMailchimpDiscriminatedConnectionSettingsConnector",
    "ConnectorMailchimpDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorMailchimpDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorMailchimpDiscriminatedConnectionSettingsIntegration",
    "ConnectorMailchimpDiscriminatedConnectionSettingsSettings",
    "ConnectorMailchimpDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorMailchimpDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorMiroDiscriminatedConnectionSettings",
    "ConnectorMiroDiscriminatedConnectionSettingsConnector",
    "ConnectorMiroDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorMiroDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorMiroDiscriminatedConnectionSettingsIntegration",
    "ConnectorMiroDiscriminatedConnectionSettingsSettings",
    "ConnectorMiroDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorMiroDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorMondayDiscriminatedConnectionSettings",
    "ConnectorMondayDiscriminatedConnectionSettingsConnector",
    "ConnectorMondayDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorMondayDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorMondayDiscriminatedConnectionSettingsIntegration",
    "ConnectorMondayDiscriminatedConnectionSettingsSettings",
    "ConnectorMondayDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorMondayDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorMuralDiscriminatedConnectionSettings",
    "ConnectorMuralDiscriminatedConnectionSettingsConnector",
    "ConnectorMuralDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorMuralDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorMuralDiscriminatedConnectionSettingsIntegration",
    "ConnectorMuralDiscriminatedConnectionSettingsSettings",
    "ConnectorMuralDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorMuralDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorNamelyDiscriminatedConnectionSettings",
    "ConnectorNamelyDiscriminatedConnectionSettingsConnector",
    "ConnectorNamelyDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorNamelyDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorNamelyDiscriminatedConnectionSettingsIntegration",
    "ConnectorNamelyDiscriminatedConnectionSettingsSettings",
    "ConnectorNamelyDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorNamelyDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorNationbuilderDiscriminatedConnectionSettings",
    "ConnectorNationbuilderDiscriminatedConnectionSettingsConnector",
    "ConnectorNationbuilderDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorNationbuilderDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorNationbuilderDiscriminatedConnectionSettingsIntegration",
    "ConnectorNationbuilderDiscriminatedConnectionSettingsSettings",
    "ConnectorNationbuilderDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorNationbuilderDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorNetsuiteDiscriminatedConnectionSettings",
    "ConnectorNetsuiteDiscriminatedConnectionSettingsConnector",
    "ConnectorNetsuiteDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorNetsuiteDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorNetsuiteDiscriminatedConnectionSettingsIntegration",
    "ConnectorNetsuiteDiscriminatedConnectionSettingsSettings",
    "ConnectorNetsuiteDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorNetsuiteDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorNotionDiscriminatedConnectionSettings",
    "ConnectorNotionDiscriminatedConnectionSettingsConnector",
    "ConnectorNotionDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorNotionDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorNotionDiscriminatedConnectionSettingsIntegration",
    "ConnectorNotionDiscriminatedConnectionSettingsSettings",
    "ConnectorNotionDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorNotionDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorOdooDiscriminatedConnectionSettings",
    "ConnectorOdooDiscriminatedConnectionSettingsConnector",
    "ConnectorOdooDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorOdooDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorOdooDiscriminatedConnectionSettingsIntegration",
    "ConnectorOdooDiscriminatedConnectionSettingsSettings",
    "ConnectorOdooDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorOdooDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorOktaDiscriminatedConnectionSettings",
    "ConnectorOktaDiscriminatedConnectionSettingsConnector",
    "ConnectorOktaDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorOktaDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorOktaDiscriminatedConnectionSettingsIntegration",
    "ConnectorOktaDiscriminatedConnectionSettingsSettings",
    "ConnectorOktaDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorOktaDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorOsuDiscriminatedConnectionSettings",
    "ConnectorOsuDiscriminatedConnectionSettingsConnector",
    "ConnectorOsuDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorOsuDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorOsuDiscriminatedConnectionSettingsIntegration",
    "ConnectorOsuDiscriminatedConnectionSettingsSettings",
    "ConnectorOsuDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorOsuDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorOuraDiscriminatedConnectionSettings",
    "ConnectorOuraDiscriminatedConnectionSettingsConnector",
    "ConnectorOuraDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorOuraDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorOuraDiscriminatedConnectionSettingsIntegration",
    "ConnectorOuraDiscriminatedConnectionSettingsSettings",
    "ConnectorOuraDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorOuraDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorOutreachDiscriminatedConnectionSettings",
    "ConnectorOutreachDiscriminatedConnectionSettingsConnector",
    "ConnectorOutreachDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorOutreachDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorOutreachDiscriminatedConnectionSettingsIntegration",
    "ConnectorOutreachDiscriminatedConnectionSettingsSettings",
    "ConnectorOutreachDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorOutreachDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorPagerdutyDiscriminatedConnectionSettings",
    "ConnectorPagerdutyDiscriminatedConnectionSettingsConnector",
    "ConnectorPagerdutyDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorPagerdutyDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorPagerdutyDiscriminatedConnectionSettingsIntegration",
    "ConnectorPagerdutyDiscriminatedConnectionSettingsSettings",
    "ConnectorPagerdutyDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorPagerdutyDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorPandadocDiscriminatedConnectionSettings",
    "ConnectorPandadocDiscriminatedConnectionSettingsConnector",
    "ConnectorPandadocDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorPandadocDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorPandadocDiscriminatedConnectionSettingsIntegration",
    "ConnectorPandadocDiscriminatedConnectionSettingsSettings",
    "ConnectorPandadocDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorPandadocDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorPayfitDiscriminatedConnectionSettings",
    "ConnectorPayfitDiscriminatedConnectionSettingsConnector",
    "ConnectorPayfitDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorPayfitDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorPayfitDiscriminatedConnectionSettingsIntegration",
    "ConnectorPayfitDiscriminatedConnectionSettingsSettings",
    "ConnectorPayfitDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorPayfitDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorPaypalDiscriminatedConnectionSettings",
    "ConnectorPaypalDiscriminatedConnectionSettingsConnector",
    "ConnectorPaypalDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorPaypalDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorPaypalDiscriminatedConnectionSettingsIntegration",
    "ConnectorPaypalDiscriminatedConnectionSettingsSettings",
    "ConnectorPaypalDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorPaypalDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorPennylaneDiscriminatedConnectionSettings",
    "ConnectorPennylaneDiscriminatedConnectionSettingsConnector",
    "ConnectorPennylaneDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorPennylaneDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorPennylaneDiscriminatedConnectionSettingsIntegration",
    "ConnectorPennylaneDiscriminatedConnectionSettingsSettings",
    "ConnectorPennylaneDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorPennylaneDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorPinterestDiscriminatedConnectionSettings",
    "ConnectorPinterestDiscriminatedConnectionSettingsConnector",
    "ConnectorPinterestDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorPinterestDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorPinterestDiscriminatedConnectionSettingsIntegration",
    "ConnectorPinterestDiscriminatedConnectionSettingsSettings",
    "ConnectorPinterestDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorPinterestDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorPipedriveDiscriminatedConnectionSettings",
    "ConnectorPipedriveDiscriminatedConnectionSettingsConnector",
    "ConnectorPipedriveDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorPipedriveDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorPipedriveDiscriminatedConnectionSettingsIntegration",
    "ConnectorPipedriveDiscriminatedConnectionSettingsSettings",
    "ConnectorPipedriveDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorPipedriveDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorPodiumDiscriminatedConnectionSettings",
    "ConnectorPodiumDiscriminatedConnectionSettingsConnector",
    "ConnectorPodiumDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorPodiumDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorPodiumDiscriminatedConnectionSettingsIntegration",
    "ConnectorPodiumDiscriminatedConnectionSettingsSettings",
    "ConnectorPodiumDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorPodiumDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorProductboardDiscriminatedConnectionSettings",
    "ConnectorProductboardDiscriminatedConnectionSettingsConnector",
    "ConnectorProductboardDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorProductboardDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorProductboardDiscriminatedConnectionSettingsIntegration",
    "ConnectorProductboardDiscriminatedConnectionSettingsSettings",
    "ConnectorProductboardDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorProductboardDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorQualtricsDiscriminatedConnectionSettings",
    "ConnectorQualtricsDiscriminatedConnectionSettingsConnector",
    "ConnectorQualtricsDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorQualtricsDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorQualtricsDiscriminatedConnectionSettingsIntegration",
    "ConnectorQualtricsDiscriminatedConnectionSettingsSettings",
    "ConnectorQualtricsDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorQualtricsDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorQuickbooksDiscriminatedConnectionSettings",
    "ConnectorQuickbooksDiscriminatedConnectionSettingsConnector",
    "ConnectorQuickbooksDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorQuickbooksDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorQuickbooksDiscriminatedConnectionSettingsIntegration",
    "ConnectorQuickbooksDiscriminatedConnectionSettingsSettings",
    "ConnectorQuickbooksDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorQuickbooksDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorRedditDiscriminatedConnectionSettings",
    "ConnectorRedditDiscriminatedConnectionSettingsConnector",
    "ConnectorRedditDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorRedditDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorRedditDiscriminatedConnectionSettingsIntegration",
    "ConnectorRedditDiscriminatedConnectionSettingsSettings",
    "ConnectorRedditDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorRedditDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorSageDiscriminatedConnectionSettings",
    "ConnectorSageDiscriminatedConnectionSettingsConnector",
    "ConnectorSageDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorSageDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorSageDiscriminatedConnectionSettingsIntegration",
    "ConnectorSageDiscriminatedConnectionSettingsSettings",
    "ConnectorSageDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorSageDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorSalesforceDiscriminatedConnectionSettings",
    "ConnectorSalesforceDiscriminatedConnectionSettingsConnector",
    "ConnectorSalesforceDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorSalesforceDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorSalesforceDiscriminatedConnectionSettingsIntegration",
    "ConnectorSalesforceDiscriminatedConnectionSettingsSettings",
    "ConnectorSalesforceDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorSalesforceDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorSalesloftDiscriminatedConnectionSettings",
    "ConnectorSalesloftDiscriminatedConnectionSettingsConnector",
    "ConnectorSalesloftDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorSalesloftDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorSalesloftDiscriminatedConnectionSettingsIntegration",
    "ConnectorSalesloftDiscriminatedConnectionSettingsSettings",
    "ConnectorSalesloftDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorSalesloftDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorSegmentDiscriminatedConnectionSettings",
    "ConnectorSegmentDiscriminatedConnectionSettingsConnector",
    "ConnectorSegmentDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorSegmentDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorSegmentDiscriminatedConnectionSettingsIntegration",
    "ConnectorSegmentDiscriminatedConnectionSettingsSettings",
    "ConnectorSegmentDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorSegmentDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorServicem8DiscriminatedConnectionSettings",
    "ConnectorServicem8DiscriminatedConnectionSettingsConnector",
    "ConnectorServicem8DiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorServicem8DiscriminatedConnectionSettingsConnectorScope",
    "ConnectorServicem8DiscriminatedConnectionSettingsIntegration",
    "ConnectorServicem8DiscriminatedConnectionSettingsSettings",
    "ConnectorServicem8DiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorServicem8DiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorServicenowDiscriminatedConnectionSettings",
    "ConnectorServicenowDiscriminatedConnectionSettingsConnector",
    "ConnectorServicenowDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorServicenowDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorServicenowDiscriminatedConnectionSettingsIntegration",
    "ConnectorServicenowDiscriminatedConnectionSettingsSettings",
    "ConnectorServicenowDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorServicenowDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorSharepointDiscriminatedConnectionSettings",
    "ConnectorSharepointDiscriminatedConnectionSettingsConnector",
    "ConnectorSharepointDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorSharepointDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorSharepointDiscriminatedConnectionSettingsIntegration",
    "ConnectorSharepointDiscriminatedConnectionSettingsSettings",
    "ConnectorSharepointDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorSharepointDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorShopifyDiscriminatedConnectionSettings",
    "ConnectorShopifyDiscriminatedConnectionSettingsConnector",
    "ConnectorShopifyDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorShopifyDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorShopifyDiscriminatedConnectionSettingsIntegration",
    "ConnectorShopifyDiscriminatedConnectionSettingsSettings",
    "ConnectorShopifyDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorShopifyDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorSignnowDiscriminatedConnectionSettings",
    "ConnectorSignnowDiscriminatedConnectionSettingsConnector",
    "ConnectorSignnowDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorSignnowDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorSignnowDiscriminatedConnectionSettingsIntegration",
    "ConnectorSignnowDiscriminatedConnectionSettingsSettings",
    "ConnectorSignnowDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorSignnowDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorSlackDiscriminatedConnectionSettings",
    "ConnectorSlackDiscriminatedConnectionSettingsConnector",
    "ConnectorSlackDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorSlackDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorSlackDiscriminatedConnectionSettingsIntegration",
    "ConnectorSlackDiscriminatedConnectionSettingsSettings",
    "ConnectorSlackDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorSlackDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorSmartsheetDiscriminatedConnectionSettings",
    "ConnectorSmartsheetDiscriminatedConnectionSettingsConnector",
    "ConnectorSmartsheetDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorSmartsheetDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorSmartsheetDiscriminatedConnectionSettingsIntegration",
    "ConnectorSmartsheetDiscriminatedConnectionSettingsSettings",
    "ConnectorSmartsheetDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorSmartsheetDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorSnowflakeDiscriminatedConnectionSettings",
    "ConnectorSnowflakeDiscriminatedConnectionSettingsConnector",
    "ConnectorSnowflakeDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorSnowflakeDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorSnowflakeDiscriminatedConnectionSettingsIntegration",
    "ConnectorSnowflakeDiscriminatedConnectionSettingsSettings",
    "ConnectorSnowflakeDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorSnowflakeDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorSpotifyDiscriminatedConnectionSettings",
    "ConnectorSpotifyDiscriminatedConnectionSettingsConnector",
    "ConnectorSpotifyDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorSpotifyDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorSpotifyDiscriminatedConnectionSettingsIntegration",
    "ConnectorSpotifyDiscriminatedConnectionSettingsSettings",
    "ConnectorSpotifyDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorSpotifyDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorSquarespaceDiscriminatedConnectionSettings",
    "ConnectorSquarespaceDiscriminatedConnectionSettingsConnector",
    "ConnectorSquarespaceDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorSquarespaceDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorSquarespaceDiscriminatedConnectionSettingsIntegration",
    "ConnectorSquarespaceDiscriminatedConnectionSettingsSettings",
    "ConnectorSquarespaceDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorSquarespaceDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorSquareupDiscriminatedConnectionSettings",
    "ConnectorSquareupDiscriminatedConnectionSettingsConnector",
    "ConnectorSquareupDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorSquareupDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorSquareupDiscriminatedConnectionSettingsIntegration",
    "ConnectorSquareupDiscriminatedConnectionSettingsSettings",
    "ConnectorSquareupDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorSquareupDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorStackexchangeDiscriminatedConnectionSettings",
    "ConnectorStackexchangeDiscriminatedConnectionSettingsConnector",
    "ConnectorStackexchangeDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorStackexchangeDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorStackexchangeDiscriminatedConnectionSettingsIntegration",
    "ConnectorStackexchangeDiscriminatedConnectionSettingsSettings",
    "ConnectorStackexchangeDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorStackexchangeDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorStravaDiscriminatedConnectionSettings",
    "ConnectorStravaDiscriminatedConnectionSettingsConnector",
    "ConnectorStravaDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorStravaDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorStravaDiscriminatedConnectionSettingsIntegration",
    "ConnectorStravaDiscriminatedConnectionSettingsSettings",
    "ConnectorStravaDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorStravaDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorTeamworkDiscriminatedConnectionSettings",
    "ConnectorTeamworkDiscriminatedConnectionSettingsConnector",
    "ConnectorTeamworkDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorTeamworkDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorTeamworkDiscriminatedConnectionSettingsIntegration",
    "ConnectorTeamworkDiscriminatedConnectionSettingsSettings",
    "ConnectorTeamworkDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorTeamworkDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorTicktickDiscriminatedConnectionSettings",
    "ConnectorTicktickDiscriminatedConnectionSettingsConnector",
    "ConnectorTicktickDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorTicktickDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorTicktickDiscriminatedConnectionSettingsIntegration",
    "ConnectorTicktickDiscriminatedConnectionSettingsSettings",
    "ConnectorTicktickDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorTicktickDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorTimelyDiscriminatedConnectionSettings",
    "ConnectorTimelyDiscriminatedConnectionSettingsConnector",
    "ConnectorTimelyDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorTimelyDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorTimelyDiscriminatedConnectionSettingsIntegration",
    "ConnectorTimelyDiscriminatedConnectionSettingsSettings",
    "ConnectorTimelyDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorTimelyDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorTodoistDiscriminatedConnectionSettings",
    "ConnectorTodoistDiscriminatedConnectionSettingsConnector",
    "ConnectorTodoistDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorTodoistDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorTodoistDiscriminatedConnectionSettingsIntegration",
    "ConnectorTodoistDiscriminatedConnectionSettingsSettings",
    "ConnectorTodoistDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorTodoistDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorTremendousDiscriminatedConnectionSettings",
    "ConnectorTremendousDiscriminatedConnectionSettingsConnector",
    "ConnectorTremendousDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorTremendousDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorTremendousDiscriminatedConnectionSettingsIntegration",
    "ConnectorTremendousDiscriminatedConnectionSettingsSettings",
    "ConnectorTremendousDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorTremendousDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorTsheetsteamDiscriminatedConnectionSettings",
    "ConnectorTsheetsteamDiscriminatedConnectionSettingsConnector",
    "ConnectorTsheetsteamDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorTsheetsteamDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorTsheetsteamDiscriminatedConnectionSettingsIntegration",
    "ConnectorTsheetsteamDiscriminatedConnectionSettingsSettings",
    "ConnectorTsheetsteamDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorTsheetsteamDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorTumblrDiscriminatedConnectionSettings",
    "ConnectorTumblrDiscriminatedConnectionSettingsConnector",
    "ConnectorTumblrDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorTumblrDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorTumblrDiscriminatedConnectionSettingsIntegration",
    "ConnectorTumblrDiscriminatedConnectionSettingsSettings",
    "ConnectorTumblrDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorTumblrDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorTwinfieldDiscriminatedConnectionSettings",
    "ConnectorTwinfieldDiscriminatedConnectionSettingsConnector",
    "ConnectorTwinfieldDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorTwinfieldDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorTwinfieldDiscriminatedConnectionSettingsIntegration",
    "ConnectorTwinfieldDiscriminatedConnectionSettingsSettings",
    "ConnectorTwinfieldDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorTwinfieldDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorTwitchDiscriminatedConnectionSettings",
    "ConnectorTwitchDiscriminatedConnectionSettingsConnector",
    "ConnectorTwitchDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorTwitchDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorTwitchDiscriminatedConnectionSettingsIntegration",
    "ConnectorTwitchDiscriminatedConnectionSettingsSettings",
    "ConnectorTwitchDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorTwitchDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorTwitterDiscriminatedConnectionSettings",
    "ConnectorTwitterDiscriminatedConnectionSettingsConnector",
    "ConnectorTwitterDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorTwitterDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorTwitterDiscriminatedConnectionSettingsIntegration",
    "ConnectorTwitterDiscriminatedConnectionSettingsSettings",
    "ConnectorTwitterDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorTwitterDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorTypeformDiscriminatedConnectionSettings",
    "ConnectorTypeformDiscriminatedConnectionSettingsConnector",
    "ConnectorTypeformDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorTypeformDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorTypeformDiscriminatedConnectionSettingsIntegration",
    "ConnectorTypeformDiscriminatedConnectionSettingsSettings",
    "ConnectorTypeformDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorTypeformDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorUberDiscriminatedConnectionSettings",
    "ConnectorUberDiscriminatedConnectionSettingsConnector",
    "ConnectorUberDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorUberDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorUberDiscriminatedConnectionSettingsIntegration",
    "ConnectorUberDiscriminatedConnectionSettingsSettings",
    "ConnectorUberDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorUberDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorVimeoDiscriminatedConnectionSettings",
    "ConnectorVimeoDiscriminatedConnectionSettingsConnector",
    "ConnectorVimeoDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorVimeoDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorVimeoDiscriminatedConnectionSettingsIntegration",
    "ConnectorVimeoDiscriminatedConnectionSettingsSettings",
    "ConnectorVimeoDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorVimeoDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorWakatimeDiscriminatedConnectionSettings",
    "ConnectorWakatimeDiscriminatedConnectionSettingsConnector",
    "ConnectorWakatimeDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorWakatimeDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorWakatimeDiscriminatedConnectionSettingsIntegration",
    "ConnectorWakatimeDiscriminatedConnectionSettingsSettings",
    "ConnectorWakatimeDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorWakatimeDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorWealthboxDiscriminatedConnectionSettings",
    "ConnectorWealthboxDiscriminatedConnectionSettingsConnector",
    "ConnectorWealthboxDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorWealthboxDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorWealthboxDiscriminatedConnectionSettingsIntegration",
    "ConnectorWealthboxDiscriminatedConnectionSettingsSettings",
    "ConnectorWealthboxDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorWealthboxDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorWebflowDiscriminatedConnectionSettings",
    "ConnectorWebflowDiscriminatedConnectionSettingsConnector",
    "ConnectorWebflowDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorWebflowDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorWebflowDiscriminatedConnectionSettingsIntegration",
    "ConnectorWebflowDiscriminatedConnectionSettingsSettings",
    "ConnectorWebflowDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorWebflowDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorWhoopDiscriminatedConnectionSettings",
    "ConnectorWhoopDiscriminatedConnectionSettingsConnector",
    "ConnectorWhoopDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorWhoopDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorWhoopDiscriminatedConnectionSettingsIntegration",
    "ConnectorWhoopDiscriminatedConnectionSettingsSettings",
    "ConnectorWhoopDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorWhoopDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorWordpressDiscriminatedConnectionSettings",
    "ConnectorWordpressDiscriminatedConnectionSettingsConnector",
    "ConnectorWordpressDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorWordpressDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorWordpressDiscriminatedConnectionSettingsIntegration",
    "ConnectorWordpressDiscriminatedConnectionSettingsSettings",
    "ConnectorWordpressDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorWordpressDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorWrikeDiscriminatedConnectionSettings",
    "ConnectorWrikeDiscriminatedConnectionSettingsConnector",
    "ConnectorWrikeDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorWrikeDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorWrikeDiscriminatedConnectionSettingsIntegration",
    "ConnectorWrikeDiscriminatedConnectionSettingsSettings",
    "ConnectorWrikeDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorWrikeDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorXeroDiscriminatedConnectionSettings",
    "ConnectorXeroDiscriminatedConnectionSettingsConnector",
    "ConnectorXeroDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorXeroDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorXeroDiscriminatedConnectionSettingsIntegration",
    "ConnectorXeroDiscriminatedConnectionSettingsSettings",
    "ConnectorXeroDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorXeroDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorYahooDiscriminatedConnectionSettings",
    "ConnectorYahooDiscriminatedConnectionSettingsConnector",
    "ConnectorYahooDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorYahooDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorYahooDiscriminatedConnectionSettingsIntegration",
    "ConnectorYahooDiscriminatedConnectionSettingsSettings",
    "ConnectorYahooDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorYahooDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorYandexDiscriminatedConnectionSettings",
    "ConnectorYandexDiscriminatedConnectionSettingsConnector",
    "ConnectorYandexDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorYandexDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorYandexDiscriminatedConnectionSettingsIntegration",
    "ConnectorYandexDiscriminatedConnectionSettingsSettings",
    "ConnectorYandexDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorYandexDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorZapierDiscriminatedConnectionSettings",
    "ConnectorZapierDiscriminatedConnectionSettingsConnector",
    "ConnectorZapierDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorZapierDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorZapierDiscriminatedConnectionSettingsIntegration",
    "ConnectorZapierDiscriminatedConnectionSettingsSettings",
    "ConnectorZapierDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorZapierDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorZendeskDiscriminatedConnectionSettings",
    "ConnectorZendeskDiscriminatedConnectionSettingsConnector",
    "ConnectorZendeskDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorZendeskDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorZendeskDiscriminatedConnectionSettingsIntegration",
    "ConnectorZendeskDiscriminatedConnectionSettingsSettings",
    "ConnectorZendeskDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorZendeskDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorZenefitsDiscriminatedConnectionSettings",
    "ConnectorZenefitsDiscriminatedConnectionSettingsConnector",
    "ConnectorZenefitsDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorZenefitsDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorZenefitsDiscriminatedConnectionSettingsIntegration",
    "ConnectorZenefitsDiscriminatedConnectionSettingsSettings",
    "ConnectorZenefitsDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorZenefitsDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorZohoDeskDiscriminatedConnectionSettings",
    "ConnectorZohoDeskDiscriminatedConnectionSettingsConnector",
    "ConnectorZohoDeskDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorZohoDeskDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorZohoDeskDiscriminatedConnectionSettingsIntegration",
    "ConnectorZohoDeskDiscriminatedConnectionSettingsSettings",
    "ConnectorZohoDeskDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorZohoDeskDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorZohoDiscriminatedConnectionSettings",
    "ConnectorZohoDiscriminatedConnectionSettingsConnector",
    "ConnectorZohoDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorZohoDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorZohoDiscriminatedConnectionSettingsIntegration",
    "ConnectorZohoDiscriminatedConnectionSettingsSettings",
    "ConnectorZohoDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorZohoDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorZoomDiscriminatedConnectionSettings",
    "ConnectorZoomDiscriminatedConnectionSettingsConnector",
    "ConnectorZoomDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorZoomDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorZoomDiscriminatedConnectionSettingsIntegration",
    "ConnectorZoomDiscriminatedConnectionSettingsSettings",
    "ConnectorZoomDiscriminatedConnectionSettingsSettingsOAuth",
    "ConnectorZoomDiscriminatedConnectionSettingsSettingsOAuthCredentials",
    "ConnectorAirtableDiscriminatedConnectionSettings",
    "ConnectorAirtableDiscriminatedConnectionSettingsConnector",
    "ConnectorAirtableDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorAirtableDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorAirtableDiscriminatedConnectionSettingsIntegration",
    "ConnectorAirtableDiscriminatedConnectionSettingsSettings",
    "ConnectorApolloDiscriminatedConnectionSettings",
    "ConnectorApolloDiscriminatedConnectionSettingsConnector",
    "ConnectorApolloDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorApolloDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorApolloDiscriminatedConnectionSettingsIntegration",
    "ConnectorApolloDiscriminatedConnectionSettingsSettings",
    "ConnectorBrexDiscriminatedConnectionSettings",
    "ConnectorBrexDiscriminatedConnectionSettingsConnector",
    "ConnectorBrexDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorBrexDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorBrexDiscriminatedConnectionSettingsIntegration",
    "ConnectorBrexDiscriminatedConnectionSettingsSettings",
    "ConnectorCodaDiscriminatedConnectionSettings",
    "ConnectorCodaDiscriminatedConnectionSettingsConnector",
    "ConnectorCodaDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorCodaDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorCodaDiscriminatedConnectionSettingsIntegration",
    "ConnectorCodaDiscriminatedConnectionSettingsSettings",
    "ConnectorFinchDiscriminatedConnectionSettings",
    "ConnectorFinchDiscriminatedConnectionSettingsConnector",
    "ConnectorFinchDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorFinchDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorFinchDiscriminatedConnectionSettingsIntegration",
    "ConnectorFinchDiscriminatedConnectionSettingsSettings",
    "ConnectorFirebaseDiscriminatedConnectionSettings",
    "ConnectorFirebaseDiscriminatedConnectionSettingsConnector",
    "ConnectorFirebaseDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorFirebaseDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorFirebaseDiscriminatedConnectionSettingsIntegration",
    "ConnectorFirebaseDiscriminatedConnectionSettingsSettings",
    "ConnectorFirebaseDiscriminatedConnectionSettingsSettingsUnionMember0",
    "ConnectorFirebaseDiscriminatedConnectionSettingsSettingsUnionMember0ServiceAccount",
    "ConnectorFirebaseDiscriminatedConnectionSettingsSettingsUnionMember1",
    "ConnectorFirebaseDiscriminatedConnectionSettingsSettingsUnionMember1AuthData",
    "ConnectorFirebaseDiscriminatedConnectionSettingsSettingsUnionMember1AuthDataUnionMember0",
    "ConnectorFirebaseDiscriminatedConnectionSettingsSettingsUnionMember1AuthDataUnionMember0UserJson",
    "ConnectorFirebaseDiscriminatedConnectionSettingsSettingsUnionMember1AuthDataUnionMember1",
    "ConnectorFirebaseDiscriminatedConnectionSettingsSettingsUnionMember1AuthDataUnionMember2",
    "ConnectorFirebaseDiscriminatedConnectionSettingsSettingsUnionMember1FirebaseConfig",
    "ConnectorForeceiptDiscriminatedConnectionSettings",
    "ConnectorForeceiptDiscriminatedConnectionSettingsConnector",
    "ConnectorForeceiptDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorForeceiptDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorForeceiptDiscriminatedConnectionSettingsIntegration",
    "ConnectorForeceiptDiscriminatedConnectionSettingsSettings",
    "ConnectorGreenhouseDiscriminatedConnectionSettings",
    "ConnectorGreenhouseDiscriminatedConnectionSettingsConnector",
    "ConnectorGreenhouseDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorGreenhouseDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorGreenhouseDiscriminatedConnectionSettingsIntegration",
    "ConnectorGreenhouseDiscriminatedConnectionSettingsSettings",
    "ConnectorHeronDiscriminatedConnectionSettings",
    "ConnectorHeronDiscriminatedConnectionSettingsConnector",
    "ConnectorHeronDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorHeronDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorHeronDiscriminatedConnectionSettingsIntegration",
    "ConnectorLunchmoneyDiscriminatedConnectionSettings",
    "ConnectorLunchmoneyDiscriminatedConnectionSettingsConnector",
    "ConnectorLunchmoneyDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorLunchmoneyDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorLunchmoneyDiscriminatedConnectionSettingsIntegration",
    "ConnectorMercuryDiscriminatedConnectionSettings",
    "ConnectorMercuryDiscriminatedConnectionSettingsConnector",
    "ConnectorMercuryDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorMercuryDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorMercuryDiscriminatedConnectionSettingsIntegration",
    "ConnectorMergeDiscriminatedConnectionSettings",
    "ConnectorMergeDiscriminatedConnectionSettingsConnector",
    "ConnectorMergeDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorMergeDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorMergeDiscriminatedConnectionSettingsIntegration",
    "ConnectorMergeDiscriminatedConnectionSettingsSettings",
    "ConnectorMootaDiscriminatedConnectionSettings",
    "ConnectorMootaDiscriminatedConnectionSettingsConnector",
    "ConnectorMootaDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorMootaDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorMootaDiscriminatedConnectionSettingsIntegration",
    "ConnectorOnebrickDiscriminatedConnectionSettings",
    "ConnectorOnebrickDiscriminatedConnectionSettingsConnector",
    "ConnectorOnebrickDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorOnebrickDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorOnebrickDiscriminatedConnectionSettingsIntegration",
    "ConnectorOnebrickDiscriminatedConnectionSettingsSettings",
    "ConnectorOpenledgerDiscriminatedConnectionSettings",
    "ConnectorOpenledgerDiscriminatedConnectionSettingsConnector",
    "ConnectorOpenledgerDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorOpenledgerDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorOpenledgerDiscriminatedConnectionSettingsIntegration",
    "ConnectorOpenledgerDiscriminatedConnectionSettingsSettings",
    "ConnectorPlaidDiscriminatedConnectionSettings",
    "ConnectorPlaidDiscriminatedConnectionSettingsConnector",
    "ConnectorPlaidDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorPlaidDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorPlaidDiscriminatedConnectionSettingsIntegration",
    "ConnectorPlaidDiscriminatedConnectionSettingsSettings",
    "ConnectorPostgresDiscriminatedConnectionSettings",
    "ConnectorPostgresDiscriminatedConnectionSettingsConnector",
    "ConnectorPostgresDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorPostgresDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorPostgresDiscriminatedConnectionSettingsIntegration",
    "ConnectorPostgresDiscriminatedConnectionSettingsSettings",
    "ConnectorRampDiscriminatedConnectionSettings",
    "ConnectorRampDiscriminatedConnectionSettingsConnector",
    "ConnectorRampDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorRampDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorRampDiscriminatedConnectionSettingsIntegration",
    "ConnectorRampDiscriminatedConnectionSettingsSettings",
    "ConnectorSaltedgeDiscriminatedConnectionSettings",
    "ConnectorSaltedgeDiscriminatedConnectionSettingsConnector",
    "ConnectorSaltedgeDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorSaltedgeDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorSaltedgeDiscriminatedConnectionSettingsIntegration",
    "ConnectorSplitwiseDiscriminatedConnectionSettings",
    "ConnectorSplitwiseDiscriminatedConnectionSettingsConnector",
    "ConnectorSplitwiseDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorSplitwiseDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorSplitwiseDiscriminatedConnectionSettingsIntegration",
    "ConnectorSplitwiseDiscriminatedConnectionSettingsSettings",
    "ConnectorSplitwiseDiscriminatedConnectionSettingsSettingsCurrentUser",
    "ConnectorSplitwiseDiscriminatedConnectionSettingsSettingsCurrentUserNotifications",
    "ConnectorSplitwiseDiscriminatedConnectionSettingsSettingsCurrentUserPicture",
    "ConnectorStripeDiscriminatedConnectionSettings",
    "ConnectorStripeDiscriminatedConnectionSettingsConnector",
    "ConnectorStripeDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorStripeDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorStripeDiscriminatedConnectionSettingsIntegration",
    "ConnectorStripeDiscriminatedConnectionSettingsSettings",
    "ConnectorTellerDiscriminatedConnectionSettings",
    "ConnectorTellerDiscriminatedConnectionSettingsConnector",
    "ConnectorTellerDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorTellerDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorTellerDiscriminatedConnectionSettingsIntegration",
    "ConnectorTellerDiscriminatedConnectionSettingsSettings",
    "ConnectorTogglDiscriminatedConnectionSettings",
    "ConnectorTogglDiscriminatedConnectionSettingsConnector",
    "ConnectorTogglDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorTogglDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorTogglDiscriminatedConnectionSettingsIntegration",
    "ConnectorTogglDiscriminatedConnectionSettingsSettings",
    "ConnectorTwentyDiscriminatedConnectionSettings",
    "ConnectorTwentyDiscriminatedConnectionSettingsConnector",
    "ConnectorTwentyDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorTwentyDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorTwentyDiscriminatedConnectionSettingsIntegration",
    "ConnectorTwentyDiscriminatedConnectionSettingsSettings",
    "ConnectorVenmoDiscriminatedConnectionSettings",
    "ConnectorVenmoDiscriminatedConnectionSettingsConnector",
    "ConnectorVenmoDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorVenmoDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorVenmoDiscriminatedConnectionSettingsIntegration",
    "ConnectorVenmoDiscriminatedConnectionSettingsSettings",
    "ConnectorWiseDiscriminatedConnectionSettings",
    "ConnectorWiseDiscriminatedConnectionSettingsConnector",
    "ConnectorWiseDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorWiseDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorWiseDiscriminatedConnectionSettingsIntegration",
    "ConnectorWiseDiscriminatedConnectionSettingsSettings",
    "ConnectorYodleeDiscriminatedConnectionSettings",
    "ConnectorYodleeDiscriminatedConnectionSettingsConnector",
    "ConnectorYodleeDiscriminatedConnectionSettingsConnectorSchemas",
    "ConnectorYodleeDiscriminatedConnectionSettingsConnectorScope",
    "ConnectorYodleeDiscriminatedConnectionSettingsIntegration",
    "ConnectorYodleeDiscriminatedConnectionSettingsSettings",
    "ConnectorYodleeDiscriminatedConnectionSettingsSettingsAccessToken",
    "ConnectorYodleeDiscriminatedConnectionSettingsSettingsProviderAccount",
]


class ConnectorAcceloDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorAcceloDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorAcceloDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorAcceloDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorAcceloDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorAcceloDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorAcceloDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorAcceloDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorAcceloDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorAcceloDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorAcceloDiscriminatedConnectionSettingsSettingsOAuth

    subdomain: str
    """The subdomain of your Accelo account (e.g., https://domain.api.accelo.com)"""

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorAcceloDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["accelo"]

    id: Optional[str] = None

    connector: Optional[ConnectorAcceloDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorAcceloDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorAcceloDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorAcmeOauth2DiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorAcmeOauth2DiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorAcmeOauth2DiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorAcmeOauth2DiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorAcmeOauth2DiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorAcmeOauth2DiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorAcmeOauth2DiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorAcmeOauth2DiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorAcmeOauth2DiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorAcmeOauth2DiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorAcmeOauth2DiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorAcmeOauth2DiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["acme-oauth2"]

    id: Optional[str] = None

    connector: Optional[ConnectorAcmeOauth2DiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorAcmeOauth2DiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorAcmeOauth2DiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorAdobeDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorAdobeDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorAdobeDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorAdobeDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorAdobeDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorAdobeDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorAdobeDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorAdobeDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorAdobeDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorAdobeDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorAdobeDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorAdobeDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["adobe"]

    id: Optional[str] = None

    connector: Optional[ConnectorAdobeDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorAdobeDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorAdobeDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorAdyenDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorAdyenDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorAdyenDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorAdyenDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorAdyenDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorAdyenDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorAdyenDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorAdyenDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorAdyenDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorAdyenDiscriminatedConnectionSettingsSettings(BaseModel):
    environment: str
    """The environment to use (e.g., live|test)"""

    oauth: ConnectorAdyenDiscriminatedConnectionSettingsSettingsOAuth

    resource: str
    """
    The resource to use for your various requests (e.g.,
    https://kyc-(live|test).adyen.com)
    """

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorAdyenDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["adyen"]

    id: Optional[str] = None

    connector: Optional[ConnectorAdyenDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorAdyenDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorAdyenDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorAircallDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorAircallDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorAircallDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorAircallDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorAircallDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorAircallDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorAircallDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorAircallDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorAircallDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorAircallDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorAircallDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorAircallDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["aircall"]

    id: Optional[str] = None

    connector: Optional[ConnectorAircallDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorAircallDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorAircallDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorAmazonDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorAmazonDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorAmazonDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorAmazonDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorAmazonDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorAmazonDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorAmazonDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorAmazonDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorAmazonDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorAmazonDiscriminatedConnectionSettingsSettings(BaseModel):
    extension: str
    """The domain extension for your Amazon account (e.g., com)"""

    oauth: ConnectorAmazonDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorAmazonDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["amazon"]

    id: Optional[str] = None

    connector: Optional[ConnectorAmazonDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorAmazonDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorAmazonDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorApaleoDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorApaleoDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorApaleoDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorApaleoDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorApaleoDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorApaleoDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorApaleoDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorApaleoDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorApaleoDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorApaleoDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorApaleoDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorApaleoDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["apaleo"]

    id: Optional[str] = None

    connector: Optional[ConnectorApaleoDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorApaleoDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorApaleoDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorAsanaDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorAsanaDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorAsanaDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorAsanaDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorAsanaDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorAsanaDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorAsanaDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorAsanaDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorAsanaDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorAsanaDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorAsanaDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorAsanaDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["asana"]

    id: Optional[str] = None

    connector: Optional[ConnectorAsanaDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorAsanaDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorAsanaDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorAttioDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorAttioDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorAttioDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorAttioDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorAttioDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorAttioDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorAttioDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorAttioDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorAttioDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorAttioDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorAttioDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorAttioDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["attio"]

    id: Optional[str] = None

    connector: Optional[ConnectorAttioDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorAttioDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorAttioDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorAuth0DiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorAuth0DiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorAuth0DiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorAuth0DiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorAuth0DiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorAuth0DiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorAuth0DiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorAuth0DiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorAuth0DiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorAuth0DiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorAuth0DiscriminatedConnectionSettingsSettingsOAuth

    subdomain: str
    """The subdomain of your Auth0 account (e.g., https://domain.auth0.com)"""

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorAuth0DiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["auth0"]

    id: Optional[str] = None

    connector: Optional[ConnectorAuth0DiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorAuth0DiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorAuth0DiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorAutodeskDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorAutodeskDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorAutodeskDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorAutodeskDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorAutodeskDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorAutodeskDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorAutodeskDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorAutodeskDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorAutodeskDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorAutodeskDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorAutodeskDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorAutodeskDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["autodesk"]

    id: Optional[str] = None

    connector: Optional[ConnectorAutodeskDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorAutodeskDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorAutodeskDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorAwsDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorAwsDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorAwsDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorAwsDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorAwsDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorAwsDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorAwsDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorAwsDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorAwsDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorAwsDiscriminatedConnectionSettingsSettings(BaseModel):
    api_subdomain: str = FieldInfo(alias="apiSubdomain")
    """
    The API subdomain to the API you want to connect to (e.g.,
    https://cognito-idp.us-east-2.amazonaws.com)
    """

    extension: str
    """The domain extension of your AWS account (e.g., com)"""

    oauth: ConnectorAwsDiscriminatedConnectionSettingsSettingsOAuth

    subdomain: str
    """The subdomain of your AWS account (e.g., https://domain.amazoncognito.com)"""

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorAwsDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["aws"]

    id: Optional[str] = None

    connector: Optional[ConnectorAwsDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorAwsDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorAwsDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorBamboohrDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorBamboohrDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorBamboohrDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorBamboohrDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorBamboohrDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorBamboohrDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorBamboohrDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorBamboohrDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorBamboohrDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorBamboohrDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorBamboohrDiscriminatedConnectionSettingsSettingsOAuth

    subdomain: str
    """The subdomain of your BambooHR account (e.g., https://domain.bamboohr.com)"""

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorBamboohrDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["bamboohr"]

    id: Optional[str] = None

    connector: Optional[ConnectorBamboohrDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorBamboohrDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorBamboohrDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorBasecampDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorBasecampDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorBasecampDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorBasecampDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorBasecampDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorBasecampDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorBasecampDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorBasecampDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorBasecampDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorBasecampDiscriminatedConnectionSettingsSettings(BaseModel):
    account_id: str = FieldInfo(alias="accountId")
    """Your Account ID (e.g., 5899981)"""

    app_details: str = FieldInfo(alias="appDetails")
    """The details of your app (e.g., example-subdomain)"""

    oauth: ConnectorBasecampDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorBasecampDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["basecamp"]

    id: Optional[str] = None

    connector: Optional[ConnectorBasecampDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorBasecampDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorBasecampDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorBattlenetDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorBattlenetDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorBattlenetDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorBattlenetDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorBattlenetDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorBattlenetDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorBattlenetDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorBattlenetDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorBattlenetDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorBattlenetDiscriminatedConnectionSettingsSettings(BaseModel):
    api_domain: str = FieldInfo(alias="apiDomain")
    """
    The domain to where you will access your API (e.g., https://us.api.blizzard.com)
    """

    extension: str
    """The domain extension of your Battle.net account (e.g., com)"""

    oauth: ConnectorBattlenetDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorBattlenetDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["battlenet"]

    id: Optional[str] = None

    connector: Optional[ConnectorBattlenetDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorBattlenetDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorBattlenetDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorBigcommerceDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorBigcommerceDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorBigcommerceDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorBigcommerceDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorBigcommerceDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorBigcommerceDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorBigcommerceDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorBigcommerceDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorBigcommerceDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorBigcommerceDiscriminatedConnectionSettingsSettings(BaseModel):
    account_uuid: str = FieldInfo(alias="accountUuid")
    """
    The account UUID of your BigCommerce account (e.g.,
    123e4567-e89b-12d3-a456-426614174000)
    """

    oauth: ConnectorBigcommerceDiscriminatedConnectionSettingsSettingsOAuth

    store_hash: str = FieldInfo(alias="storeHash")
    """The store hash of your BigCommerce account (e.g., Example123)"""

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorBigcommerceDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["bigcommerce"]

    id: Optional[str] = None

    connector: Optional[ConnectorBigcommerceDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorBigcommerceDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorBigcommerceDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorBitbucketDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorBitbucketDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorBitbucketDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorBitbucketDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorBitbucketDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorBitbucketDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorBitbucketDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorBitbucketDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorBitbucketDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorBitbucketDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorBitbucketDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorBitbucketDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["bitbucket"]

    id: Optional[str] = None

    connector: Optional[ConnectorBitbucketDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorBitbucketDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorBitbucketDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorBitlyDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorBitlyDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorBitlyDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorBitlyDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorBitlyDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorBitlyDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorBitlyDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorBitlyDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorBitlyDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorBitlyDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorBitlyDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorBitlyDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["bitly"]

    id: Optional[str] = None

    connector: Optional[ConnectorBitlyDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorBitlyDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorBitlyDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorBlackbaudDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorBlackbaudDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorBlackbaudDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorBlackbaudDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorBlackbaudDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorBlackbaudDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorBlackbaudDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorBlackbaudDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorBlackbaudDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorBlackbaudDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorBlackbaudDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorBlackbaudDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["blackbaud"]

    id: Optional[str] = None

    connector: Optional[ConnectorBlackbaudDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorBlackbaudDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorBlackbaudDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorBoldsignDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorBoldsignDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorBoldsignDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorBoldsignDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorBoldsignDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorBoldsignDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorBoldsignDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorBoldsignDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorBoldsignDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorBoldsignDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorBoldsignDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorBoldsignDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["boldsign"]

    id: Optional[str] = None

    connector: Optional[ConnectorBoldsignDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorBoldsignDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorBoldsignDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorBoxDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorBoxDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorBoxDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorBoxDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorBoxDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorBoxDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorBoxDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorBoxDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorBoxDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorBoxDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorBoxDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorBoxDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["box"]

    id: Optional[str] = None

    connector: Optional[ConnectorBoxDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorBoxDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorBoxDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorBraintreeDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorBraintreeDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorBraintreeDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorBraintreeDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorBraintreeDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorBraintreeDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorBraintreeDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorBraintreeDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorBraintreeDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorBraintreeDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorBraintreeDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorBraintreeDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["braintree"]

    id: Optional[str] = None

    connector: Optional[ConnectorBraintreeDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorBraintreeDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorBraintreeDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorCalendlyDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorCalendlyDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorCalendlyDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorCalendlyDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorCalendlyDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorCalendlyDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorCalendlyDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorCalendlyDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorCalendlyDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorCalendlyDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorCalendlyDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorCalendlyDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["calendly"]

    id: Optional[str] = None

    connector: Optional[ConnectorCalendlyDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorCalendlyDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorCalendlyDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorClickupDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorClickupDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorClickupDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorClickupDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorClickupDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorClickupDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorClickupDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorClickupDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorClickupDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorClickupDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorClickupDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorClickupDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["clickup"]

    id: Optional[str] = None

    connector: Optional[ConnectorClickupDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorClickupDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorClickupDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorCloseDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorCloseDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorCloseDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorCloseDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorCloseDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorCloseDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorCloseDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorCloseDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorCloseDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorCloseDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorCloseDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorCloseDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["close"]

    id: Optional[str] = None

    connector: Optional[ConnectorCloseDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorCloseDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorCloseDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorConfluenceDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorConfluenceDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorConfluenceDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorConfluenceDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorConfluenceDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorConfluenceDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorConfluenceDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorConfluenceDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorConfluenceDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorConfluenceDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorConfluenceDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorConfluenceDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["confluence"]

    id: Optional[str] = None

    connector: Optional[ConnectorConfluenceDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorConfluenceDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorConfluenceDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorContentfulDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorContentfulDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorContentfulDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorContentfulDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorContentfulDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorContentfulDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorContentfulDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorContentfulDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorContentfulDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorContentfulDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorContentfulDiscriminatedConnectionSettingsSettingsOAuth

    subdomain: str
    """The subdomain of your Contentful account (e.g., https://domain.contentful.com)"""

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorContentfulDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["contentful"]

    id: Optional[str] = None

    connector: Optional[ConnectorContentfulDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorContentfulDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorContentfulDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorContentstackDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorContentstackDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorContentstackDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorContentstackDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorContentstackDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorContentstackDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorContentstackDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorContentstackDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorContentstackDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorContentstackDiscriminatedConnectionSettingsSettings(BaseModel):
    api_domain: str = FieldInfo(alias="apiDomain")
    """
    The domain to where you will access your API (e.g.,
    https://eu-api.contentstack.com)
    """

    app_id: str = FieldInfo(alias="appId")
    """The app ID of your Contentstack account (e.g., example-subdomain)"""

    oauth: ConnectorContentstackDiscriminatedConnectionSettingsSettingsOAuth

    subdomain: str
    """
    The subdomain of your Contentstack account (e.g.,
    https://domain.contentstack.com)
    """

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorContentstackDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["contentstack"]

    id: Optional[str] = None

    connector: Optional[ConnectorContentstackDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorContentstackDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorContentstackDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorCopperDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorCopperDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorCopperDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorCopperDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorCopperDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorCopperDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorCopperDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorCopperDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorCopperDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorCopperDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorCopperDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorCopperDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["copper"]

    id: Optional[str] = None

    connector: Optional[ConnectorCopperDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorCopperDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorCopperDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorCorosDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorCorosDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorCorosDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorCorosDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorCorosDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorCorosDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorCorosDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorCorosDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorCorosDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorCorosDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorCorosDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorCorosDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["coros"]

    id: Optional[str] = None

    connector: Optional[ConnectorCorosDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorCorosDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorCorosDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorDatevDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorDatevDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorDatevDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorDatevDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorDatevDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorDatevDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorDatevDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorDatevDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorDatevDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorDatevDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorDatevDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorDatevDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["datev"]

    id: Optional[str] = None

    connector: Optional[ConnectorDatevDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorDatevDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorDatevDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorDeelDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorDeelDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorDeelDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorDeelDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorDeelDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorDeelDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorDeelDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorDeelDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorDeelDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorDeelDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorDeelDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorDeelDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["deel"]

    id: Optional[str] = None

    connector: Optional[ConnectorDeelDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorDeelDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorDeelDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorDialpadDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorDialpadDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorDialpadDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorDialpadDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorDialpadDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorDialpadDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorDialpadDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorDialpadDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorDialpadDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorDialpadDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorDialpadDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorDialpadDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["dialpad"]

    id: Optional[str] = None

    connector: Optional[ConnectorDialpadDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorDialpadDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorDialpadDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorDigitaloceanDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorDigitaloceanDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorDigitaloceanDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorDigitaloceanDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorDigitaloceanDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorDigitaloceanDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorDigitaloceanDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorDigitaloceanDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorDigitaloceanDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorDigitaloceanDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorDigitaloceanDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorDigitaloceanDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["digitalocean"]

    id: Optional[str] = None

    connector: Optional[ConnectorDigitaloceanDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorDigitaloceanDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorDigitaloceanDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorDiscordDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorDiscordDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorDiscordDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorDiscordDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorDiscordDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorDiscordDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorDiscordDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorDiscordDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorDiscordDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorDiscordDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorDiscordDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorDiscordDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["discord"]

    id: Optional[str] = None

    connector: Optional[ConnectorDiscordDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorDiscordDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorDiscordDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorDocusignDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorDocusignDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorDocusignDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorDocusignDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorDocusignDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorDocusignDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorDocusignDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorDocusignDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorDocusignDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorDocusignDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorDocusignDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorDocusignDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["docusign"]

    id: Optional[str] = None

    connector: Optional[ConnectorDocusignDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorDocusignDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorDocusignDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorDropboxDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorDropboxDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorDropboxDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorDropboxDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorDropboxDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorDropboxDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorDropboxDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorDropboxDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorDropboxDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorDropboxDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorDropboxDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorDropboxDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["dropbox"]

    id: Optional[str] = None

    connector: Optional[ConnectorDropboxDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorDropboxDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorDropboxDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorEbayDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorEbayDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorEbayDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorEbayDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorEbayDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorEbayDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorEbayDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorEbayDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorEbayDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorEbayDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorEbayDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorEbayDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["ebay"]

    id: Optional[str] = None

    connector: Optional[ConnectorEbayDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorEbayDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorEbayDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorEgnyteDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorEgnyteDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorEgnyteDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorEgnyteDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorEgnyteDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorEgnyteDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorEgnyteDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorEgnyteDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorEgnyteDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorEgnyteDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorEgnyteDiscriminatedConnectionSettingsSettingsOAuth

    subdomain: str
    """The subdomain of your Egnyte account (e.g., https://domain.egnyte.com)"""

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorEgnyteDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["egnyte"]

    id: Optional[str] = None

    connector: Optional[ConnectorEgnyteDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorEgnyteDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorEgnyteDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorEnvoyDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorEnvoyDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorEnvoyDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorEnvoyDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorEnvoyDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorEnvoyDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorEnvoyDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorEnvoyDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorEnvoyDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorEnvoyDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorEnvoyDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorEnvoyDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["envoy"]

    id: Optional[str] = None

    connector: Optional[ConnectorEnvoyDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorEnvoyDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorEnvoyDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorEventbriteDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorEventbriteDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorEventbriteDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorEventbriteDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorEventbriteDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorEventbriteDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorEventbriteDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorEventbriteDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorEventbriteDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorEventbriteDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorEventbriteDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorEventbriteDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["eventbrite"]

    id: Optional[str] = None

    connector: Optional[ConnectorEventbriteDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorEventbriteDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorEventbriteDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorExistDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorExistDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorExistDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorExistDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorExistDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorExistDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorExistDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorExistDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorExistDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorExistDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorExistDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorExistDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["exist"]

    id: Optional[str] = None

    connector: Optional[ConnectorExistDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorExistDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorExistDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorFacebookDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorFacebookDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorFacebookDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorFacebookDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorFacebookDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorFacebookDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorFacebookDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorFacebookDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorFacebookDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorFacebookDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorFacebookDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorFacebookDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["facebook"]

    id: Optional[str] = None

    connector: Optional[ConnectorFacebookDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorFacebookDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorFacebookDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorFactorialDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorFactorialDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorFactorialDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorFactorialDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorFactorialDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorFactorialDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorFactorialDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorFactorialDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorFactorialDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorFactorialDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorFactorialDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorFactorialDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["factorial"]

    id: Optional[str] = None

    connector: Optional[ConnectorFactorialDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorFactorialDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorFactorialDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorFigmaDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorFigmaDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorFigmaDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorFigmaDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorFigmaDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorFigmaDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorFigmaDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorFigmaDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorFigmaDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorFigmaDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorFigmaDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorFigmaDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["figma"]

    id: Optional[str] = None

    connector: Optional[ConnectorFigmaDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorFigmaDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorFigmaDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorFitbitDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorFitbitDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorFitbitDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorFitbitDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorFitbitDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorFitbitDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorFitbitDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorFitbitDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorFitbitDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorFitbitDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorFitbitDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorFitbitDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["fitbit"]

    id: Optional[str] = None

    connector: Optional[ConnectorFitbitDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorFitbitDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorFitbitDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorFortnoxDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorFortnoxDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorFortnoxDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorFortnoxDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorFortnoxDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorFortnoxDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorFortnoxDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorFortnoxDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorFortnoxDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorFortnoxDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorFortnoxDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorFortnoxDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["fortnox"]

    id: Optional[str] = None

    connector: Optional[ConnectorFortnoxDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorFortnoxDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorFortnoxDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorFreshbooksDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorFreshbooksDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorFreshbooksDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorFreshbooksDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorFreshbooksDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorFreshbooksDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorFreshbooksDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorFreshbooksDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorFreshbooksDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorFreshbooksDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorFreshbooksDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorFreshbooksDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["freshbooks"]

    id: Optional[str] = None

    connector: Optional[ConnectorFreshbooksDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorFreshbooksDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorFreshbooksDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorFrontDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorFrontDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorFrontDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorFrontDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorFrontDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorFrontDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorFrontDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorFrontDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorFrontDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorFrontDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorFrontDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorFrontDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["front"]

    id: Optional[str] = None

    connector: Optional[ConnectorFrontDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorFrontDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorFrontDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorGitHubDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorGitHubDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorGitHubDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorGitHubDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorGitHubDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorGitHubDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorGitHubDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorGitHubDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorGitHubDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorGitHubDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorGitHubDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorGitHubDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["github"]

    id: Optional[str] = None

    connector: Optional[ConnectorGitHubDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorGitHubDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorGitHubDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorGitlabDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorGitlabDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorGitlabDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorGitlabDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorGitlabDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorGitlabDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorGitlabDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorGitlabDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorGitlabDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorGitlabDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorGitlabDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorGitlabDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["gitlab"]

    id: Optional[str] = None

    connector: Optional[ConnectorGitlabDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorGitlabDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorGitlabDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorGongDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorGongDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorGongDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorGongDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorGongDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorGongDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorGongDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorGongDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorGongDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorGongDiscriminatedConnectionSettingsSettings(BaseModel):
    api_base_url_for_customer: str
    """The base URL of your Gong account (e.g., example)"""

    oauth: ConnectorGongDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorGongDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["gong"]

    id: Optional[str] = None

    connector: Optional[ConnectorGongDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorGongDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorGongDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorGoogleCalendarDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorGoogleCalendarDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorGoogleCalendarDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorGoogleCalendarDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorGoogleCalendarDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorGoogleCalendarDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorGoogleCalendarDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorGoogleCalendarDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorGoogleCalendarDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorGoogleCalendarDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorGoogleCalendarDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorGoogleCalendarDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["google-calendar"]

    id: Optional[str] = None

    connector: Optional[ConnectorGoogleCalendarDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorGoogleCalendarDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorGoogleCalendarDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorGoogleDocsDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorGoogleDocsDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorGoogleDocsDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorGoogleDocsDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorGoogleDocsDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorGoogleDocsDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorGoogleDocsDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorGoogleDocsDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorGoogleDocsDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorGoogleDocsDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorGoogleDocsDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorGoogleDocsDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["google-docs"]

    id: Optional[str] = None

    connector: Optional[ConnectorGoogleDocsDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorGoogleDocsDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorGoogleDocsDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorGoogleDriveDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorGoogleDriveDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorGoogleDriveDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorGoogleDriveDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorGoogleDriveDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorGoogleDriveDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorGoogleDriveDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorGoogleDriveDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorGoogleDriveDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorGoogleDriveDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorGoogleDriveDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorGoogleDriveDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["google-drive"]

    id: Optional[str] = None

    connector: Optional[ConnectorGoogleDriveDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorGoogleDriveDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorGoogleDriveDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorGoogleMailDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorGoogleMailDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorGoogleMailDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorGoogleMailDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorGoogleMailDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorGoogleMailDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorGoogleMailDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorGoogleMailDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorGoogleMailDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorGoogleMailDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorGoogleMailDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorGoogleMailDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["google-mail"]

    id: Optional[str] = None

    connector: Optional[ConnectorGoogleMailDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorGoogleMailDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorGoogleMailDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorGoogleSheetDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorGoogleSheetDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorGoogleSheetDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorGoogleSheetDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorGoogleSheetDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorGoogleSheetDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorGoogleSheetDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorGoogleSheetDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorGoogleSheetDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorGoogleSheetDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorGoogleSheetDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorGoogleSheetDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["google-sheet"]

    id: Optional[str] = None

    connector: Optional[ConnectorGoogleSheetDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorGoogleSheetDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorGoogleSheetDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorGorgiasDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorGorgiasDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorGorgiasDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorGorgiasDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorGorgiasDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorGorgiasDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorGorgiasDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorGorgiasDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorGorgiasDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorGorgiasDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorGorgiasDiscriminatedConnectionSettingsSettingsOAuth

    subdomain: str
    """The subdomain of your Gorgias account (e.g., https://domain.gorgias.com)"""

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorGorgiasDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["gorgias"]

    id: Optional[str] = None

    connector: Optional[ConnectorGorgiasDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorGorgiasDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorGorgiasDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorGrainDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorGrainDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorGrainDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorGrainDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorGrainDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorGrainDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorGrainDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorGrainDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorGrainDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorGrainDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorGrainDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorGrainDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["grain"]

    id: Optional[str] = None

    connector: Optional[ConnectorGrainDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorGrainDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorGrainDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorGumroadDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorGumroadDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorGumroadDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorGumroadDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorGumroadDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorGumroadDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorGumroadDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorGumroadDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorGumroadDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorGumroadDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorGumroadDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorGumroadDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["gumroad"]

    id: Optional[str] = None

    connector: Optional[ConnectorGumroadDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorGumroadDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorGumroadDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorGustoDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorGustoDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorGustoDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorGustoDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorGustoDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorGustoDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorGustoDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorGustoDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorGustoDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorGustoDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorGustoDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorGustoDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["gusto"]

    id: Optional[str] = None

    connector: Optional[ConnectorGustoDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorGustoDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorGustoDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorHarvestDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorHarvestDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorHarvestDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorHarvestDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorHarvestDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorHarvestDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorHarvestDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorHarvestDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorHarvestDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorHarvestDiscriminatedConnectionSettingsSettings(BaseModel):
    app_details: str = FieldInfo(alias="appDetails")
    """The details of your app (e.g., example-subdomain)"""

    oauth: ConnectorHarvestDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorHarvestDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["harvest"]

    id: Optional[str] = None

    connector: Optional[ConnectorHarvestDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorHarvestDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorHarvestDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorHighlevelDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorHighlevelDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorHighlevelDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorHighlevelDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorHighlevelDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorHighlevelDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorHighlevelDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorHighlevelDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorHighlevelDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorHighlevelDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorHighlevelDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorHighlevelDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["highlevel"]

    id: Optional[str] = None

    connector: Optional[ConnectorHighlevelDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorHighlevelDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorHighlevelDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorHubspotDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorHubspotDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorHubspotDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorHubspotDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorHubspotDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorHubspotDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorHubspotDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorHubspotDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorHubspotDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorHubspotDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorHubspotDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorHubspotDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["hubspot"]

    id: Optional[str] = None

    connector: Optional[ConnectorHubspotDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorHubspotDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorHubspotDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorInstagramDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorInstagramDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorInstagramDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorInstagramDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorInstagramDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorInstagramDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorInstagramDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorInstagramDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorInstagramDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorInstagramDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorInstagramDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorInstagramDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["instagram"]

    id: Optional[str] = None

    connector: Optional[ConnectorInstagramDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorInstagramDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorInstagramDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorIntercomDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorIntercomDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorIntercomDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorIntercomDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorIntercomDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorIntercomDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorIntercomDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorIntercomDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorIntercomDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorIntercomDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorIntercomDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorIntercomDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["intercom"]

    id: Optional[str] = None

    connector: Optional[ConnectorIntercomDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorIntercomDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorIntercomDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorJiraDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorJiraDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorJiraDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorJiraDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorJiraDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorJiraDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorJiraDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorJiraDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorJiraDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorJiraDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorJiraDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorJiraDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["jira"]

    id: Optional[str] = None

    connector: Optional[ConnectorJiraDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorJiraDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorJiraDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorKeapDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorKeapDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorKeapDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorKeapDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorKeapDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorKeapDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorKeapDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorKeapDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorKeapDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorKeapDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorKeapDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorKeapDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["keap"]

    id: Optional[str] = None

    connector: Optional[ConnectorKeapDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorKeapDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorKeapDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorLeverDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorLeverDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorLeverDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorLeverDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorLeverDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorLeverDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorLeverDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorLeverDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorLeverDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorLeverDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorLeverDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorLeverDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["lever"]

    id: Optional[str] = None

    connector: Optional[ConnectorLeverDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorLeverDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorLeverDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorLinearDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorLinearDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorLinearDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorLinearDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorLinearDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorLinearDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorLinearDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorLinearDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorLinearDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorLinearDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorLinearDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorLinearDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["linear"]

    id: Optional[str] = None

    connector: Optional[ConnectorLinearDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorLinearDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorLinearDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorLinkedinDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorLinkedinDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorLinkedinDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorLinkedinDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorLinkedinDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorLinkedinDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorLinkedinDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorLinkedinDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorLinkedinDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorLinkedinDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorLinkedinDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorLinkedinDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["linkedin"]

    id: Optional[str] = None

    connector: Optional[ConnectorLinkedinDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorLinkedinDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorLinkedinDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorLinkhutDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorLinkhutDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorLinkhutDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorLinkhutDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorLinkhutDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorLinkhutDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorLinkhutDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorLinkhutDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorLinkhutDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorLinkhutDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorLinkhutDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorLinkhutDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["linkhut"]

    id: Optional[str] = None

    connector: Optional[ConnectorLinkhutDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorLinkhutDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorLinkhutDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorMailchimpDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorMailchimpDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorMailchimpDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorMailchimpDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorMailchimpDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorMailchimpDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorMailchimpDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorMailchimpDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorMailchimpDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorMailchimpDiscriminatedConnectionSettingsSettings(BaseModel):
    dc: str
    """The data center for your account (e.g., us6)"""

    oauth: ConnectorMailchimpDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorMailchimpDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["mailchimp"]

    id: Optional[str] = None

    connector: Optional[ConnectorMailchimpDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorMailchimpDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorMailchimpDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorMiroDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorMiroDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorMiroDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorMiroDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorMiroDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorMiroDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorMiroDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorMiroDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorMiroDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorMiroDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorMiroDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorMiroDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["miro"]

    id: Optional[str] = None

    connector: Optional[ConnectorMiroDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorMiroDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorMiroDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorMondayDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorMondayDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorMondayDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorMondayDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorMondayDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorMondayDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorMondayDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorMondayDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorMondayDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorMondayDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorMondayDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorMondayDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["monday"]

    id: Optional[str] = None

    connector: Optional[ConnectorMondayDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorMondayDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorMondayDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorMuralDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorMuralDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorMuralDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorMuralDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorMuralDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorMuralDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorMuralDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorMuralDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorMuralDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorMuralDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorMuralDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorMuralDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["mural"]

    id: Optional[str] = None

    connector: Optional[ConnectorMuralDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorMuralDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorMuralDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorNamelyDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorNamelyDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorNamelyDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorNamelyDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorNamelyDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorNamelyDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorNamelyDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorNamelyDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorNamelyDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorNamelyDiscriminatedConnectionSettingsSettings(BaseModel):
    company: str
    """The name of your Namely company (e.g., example)"""

    oauth: ConnectorNamelyDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorNamelyDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["namely"]

    id: Optional[str] = None

    connector: Optional[ConnectorNamelyDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorNamelyDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorNamelyDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorNationbuilderDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorNationbuilderDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorNationbuilderDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorNationbuilderDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorNationbuilderDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorNationbuilderDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorNationbuilderDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorNationbuilderDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorNationbuilderDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorNationbuilderDiscriminatedConnectionSettingsSettings(BaseModel):
    account_id: str = FieldInfo(alias="accountId")
    """The account ID of your NationBuilder account (e.g., example-subdomain)"""

    oauth: ConnectorNationbuilderDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorNationbuilderDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["nationbuilder"]

    id: Optional[str] = None

    connector: Optional[ConnectorNationbuilderDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorNationbuilderDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorNationbuilderDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorNetsuiteDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorNetsuiteDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorNetsuiteDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorNetsuiteDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorNetsuiteDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorNetsuiteDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorNetsuiteDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorNetsuiteDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorNetsuiteDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorNetsuiteDiscriminatedConnectionSettingsSettings(BaseModel):
    account_id: str = FieldInfo(alias="accountId")
    """The account ID of your NetSuite account (e.g., tstdrv231585)"""

    oauth: ConnectorNetsuiteDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorNetsuiteDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["netsuite"]

    id: Optional[str] = None

    connector: Optional[ConnectorNetsuiteDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorNetsuiteDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorNetsuiteDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorNotionDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorNotionDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorNotionDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorNotionDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorNotionDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorNotionDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorNotionDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorNotionDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorNotionDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorNotionDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorNotionDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorNotionDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["notion"]

    id: Optional[str] = None

    connector: Optional[ConnectorNotionDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorNotionDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorNotionDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorOdooDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorOdooDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorOdooDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorOdooDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorOdooDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorOdooDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorOdooDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorOdooDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorOdooDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorOdooDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorOdooDiscriminatedConnectionSettingsSettingsOAuth

    server_url: str = FieldInfo(alias="serverUrl")
    """The domain of your Odoo account (e.g., https://example-subdomain)"""

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorOdooDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["odoo"]

    id: Optional[str] = None

    connector: Optional[ConnectorOdooDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorOdooDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorOdooDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorOktaDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorOktaDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorOktaDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorOktaDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorOktaDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorOktaDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorOktaDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorOktaDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorOktaDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorOktaDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorOktaDiscriminatedConnectionSettingsSettingsOAuth

    subdomain: str
    """The subdomain of your Okta account (e.g., https://domain.okta.com)"""

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorOktaDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["okta"]

    id: Optional[str] = None

    connector: Optional[ConnectorOktaDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorOktaDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorOktaDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorOsuDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorOsuDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorOsuDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorOsuDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorOsuDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorOsuDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorOsuDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorOsuDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorOsuDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorOsuDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorOsuDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorOsuDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["osu"]

    id: Optional[str] = None

    connector: Optional[ConnectorOsuDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorOsuDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorOsuDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorOuraDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorOuraDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorOuraDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorOuraDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorOuraDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorOuraDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorOuraDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorOuraDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorOuraDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorOuraDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorOuraDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorOuraDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["oura"]

    id: Optional[str] = None

    connector: Optional[ConnectorOuraDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorOuraDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorOuraDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorOutreachDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorOutreachDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorOutreachDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorOutreachDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorOutreachDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorOutreachDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorOutreachDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorOutreachDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorOutreachDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorOutreachDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorOutreachDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorOutreachDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["outreach"]

    id: Optional[str] = None

    connector: Optional[ConnectorOutreachDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorOutreachDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorOutreachDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorPagerdutyDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorPagerdutyDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorPagerdutyDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorPagerdutyDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorPagerdutyDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorPagerdutyDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorPagerdutyDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorPagerdutyDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorPagerdutyDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorPagerdutyDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorPagerdutyDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorPagerdutyDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["pagerduty"]

    id: Optional[str] = None

    connector: Optional[ConnectorPagerdutyDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorPagerdutyDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorPagerdutyDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorPandadocDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorPandadocDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorPandadocDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorPandadocDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorPandadocDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorPandadocDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorPandadocDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorPandadocDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorPandadocDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorPandadocDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorPandadocDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorPandadocDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["pandadoc"]

    id: Optional[str] = None

    connector: Optional[ConnectorPandadocDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorPandadocDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorPandadocDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorPayfitDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorPayfitDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorPayfitDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorPayfitDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorPayfitDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorPayfitDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorPayfitDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorPayfitDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorPayfitDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorPayfitDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorPayfitDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorPayfitDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["payfit"]

    id: Optional[str] = None

    connector: Optional[ConnectorPayfitDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorPayfitDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorPayfitDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorPaypalDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorPaypalDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorPaypalDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorPaypalDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorPaypalDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorPaypalDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorPaypalDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorPaypalDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorPaypalDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorPaypalDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorPaypalDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorPaypalDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["paypal"]

    id: Optional[str] = None

    connector: Optional[ConnectorPaypalDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorPaypalDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorPaypalDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorPennylaneDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorPennylaneDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorPennylaneDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorPennylaneDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorPennylaneDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorPennylaneDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorPennylaneDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorPennylaneDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorPennylaneDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorPennylaneDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorPennylaneDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorPennylaneDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["pennylane"]

    id: Optional[str] = None

    connector: Optional[ConnectorPennylaneDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorPennylaneDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorPennylaneDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorPinterestDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorPinterestDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorPinterestDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorPinterestDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorPinterestDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorPinterestDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorPinterestDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorPinterestDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorPinterestDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorPinterestDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorPinterestDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorPinterestDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["pinterest"]

    id: Optional[str] = None

    connector: Optional[ConnectorPinterestDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorPinterestDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorPinterestDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorPipedriveDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorPipedriveDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorPipedriveDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorPipedriveDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorPipedriveDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorPipedriveDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorPipedriveDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorPipedriveDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorPipedriveDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorPipedriveDiscriminatedConnectionSettingsSettings(BaseModel):
    api_domain: str
    """The API URL of your Pipedrive account (e.g., example)"""

    oauth: ConnectorPipedriveDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorPipedriveDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["pipedrive"]

    id: Optional[str] = None

    connector: Optional[ConnectorPipedriveDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorPipedriveDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorPipedriveDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorPodiumDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorPodiumDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorPodiumDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorPodiumDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorPodiumDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorPodiumDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorPodiumDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorPodiumDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorPodiumDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorPodiumDiscriminatedConnectionSettingsSettings(BaseModel):
    api_version: str = FieldInfo(alias="apiVersion")
    """The API version of your Podium account (e.g., example-subdomain)"""

    oauth: ConnectorPodiumDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorPodiumDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["podium"]

    id: Optional[str] = None

    connector: Optional[ConnectorPodiumDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorPodiumDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorPodiumDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorProductboardDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorProductboardDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorProductboardDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorProductboardDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorProductboardDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorProductboardDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorProductboardDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorProductboardDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorProductboardDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorProductboardDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorProductboardDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorProductboardDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["productboard"]

    id: Optional[str] = None

    connector: Optional[ConnectorProductboardDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorProductboardDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorProductboardDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorQualtricsDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorQualtricsDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorQualtricsDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorQualtricsDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorQualtricsDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorQualtricsDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorQualtricsDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorQualtricsDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorQualtricsDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorQualtricsDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorQualtricsDiscriminatedConnectionSettingsSettingsOAuth

    subdomain: str
    """The subdomain of your Qualtrics account (e.g., https://domain.qualtrics.com)"""

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorQualtricsDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["qualtrics"]

    id: Optional[str] = None

    connector: Optional[ConnectorQualtricsDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorQualtricsDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorQualtricsDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorQuickbooksDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorQuickbooksDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorQuickbooksDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorQuickbooksDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorQuickbooksDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorQuickbooksDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorQuickbooksDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorQuickbooksDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorQuickbooksDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorQuickbooksDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorQuickbooksDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorQuickbooksDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["quickbooks"]

    id: Optional[str] = None

    connector: Optional[ConnectorQuickbooksDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorQuickbooksDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorQuickbooksDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorRedditDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorRedditDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorRedditDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorRedditDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorRedditDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorRedditDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorRedditDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorRedditDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorRedditDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorRedditDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorRedditDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorRedditDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["reddit"]

    id: Optional[str] = None

    connector: Optional[ConnectorRedditDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorRedditDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorRedditDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorSageDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorSageDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorSageDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorSageDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorSageDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorSageDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorSageDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorSageDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorSageDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorSageDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorSageDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorSageDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["sage"]

    id: Optional[str] = None

    connector: Optional[ConnectorSageDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorSageDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorSageDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorSalesforceDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorSalesforceDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorSalesforceDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorSalesforceDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorSalesforceDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorSalesforceDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorSalesforceDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorSalesforceDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorSalesforceDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorSalesforceDiscriminatedConnectionSettingsSettings(BaseModel):
    instance_url: str
    """The instance URL of your Salesforce account (e.g., example)"""

    oauth: ConnectorSalesforceDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorSalesforceDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["salesforce"]

    id: Optional[str] = None

    connector: Optional[ConnectorSalesforceDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorSalesforceDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorSalesforceDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorSalesloftDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorSalesloftDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorSalesloftDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorSalesloftDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorSalesloftDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorSalesloftDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorSalesloftDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorSalesloftDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorSalesloftDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorSalesloftDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorSalesloftDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorSalesloftDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["salesloft"]

    id: Optional[str] = None

    connector: Optional[ConnectorSalesloftDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorSalesloftDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorSalesloftDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorSegmentDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorSegmentDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorSegmentDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorSegmentDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorSegmentDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorSegmentDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorSegmentDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorSegmentDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorSegmentDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorSegmentDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorSegmentDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorSegmentDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["segment"]

    id: Optional[str] = None

    connector: Optional[ConnectorSegmentDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorSegmentDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorSegmentDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorServicem8DiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorServicem8DiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorServicem8DiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorServicem8DiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorServicem8DiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorServicem8DiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorServicem8DiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorServicem8DiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorServicem8DiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorServicem8DiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorServicem8DiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorServicem8DiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["servicem8"]

    id: Optional[str] = None

    connector: Optional[ConnectorServicem8DiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorServicem8DiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorServicem8DiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorServicenowDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorServicenowDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorServicenowDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorServicenowDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorServicenowDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorServicenowDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorServicenowDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorServicenowDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorServicenowDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorServicenowDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorServicenowDiscriminatedConnectionSettingsSettingsOAuth

    subdomain: str
    """The subdomain of your ServiceNow account (e.g., https://domain.service-now.com)"""

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorServicenowDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["servicenow"]

    id: Optional[str] = None

    connector: Optional[ConnectorServicenowDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorServicenowDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorServicenowDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorSharepointDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorSharepointDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorSharepointDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorSharepointDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorSharepointDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorSharepointDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorSharepointDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorSharepointDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorSharepointDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorSharepointDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorSharepointDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorSharepointDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["sharepoint"]

    id: Optional[str] = None

    connector: Optional[ConnectorSharepointDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorSharepointDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorSharepointDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorShopifyDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorShopifyDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorShopifyDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorShopifyDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorShopifyDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorShopifyDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorShopifyDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorShopifyDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorShopifyDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorShopifyDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorShopifyDiscriminatedConnectionSettingsSettingsOAuth

    subdomain: str
    """The subdomain of your Shopify account (e.g., https://domain.myshopify.com)"""

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorShopifyDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["shopify"]

    id: Optional[str] = None

    connector: Optional[ConnectorShopifyDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorShopifyDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorShopifyDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorSignnowDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorSignnowDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorSignnowDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorSignnowDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorSignnowDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorSignnowDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorSignnowDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorSignnowDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorSignnowDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorSignnowDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorSignnowDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorSignnowDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["signnow"]

    id: Optional[str] = None

    connector: Optional[ConnectorSignnowDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorSignnowDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorSignnowDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorSlackDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorSlackDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorSlackDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorSlackDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorSlackDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorSlackDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorSlackDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorSlackDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorSlackDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorSlackDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorSlackDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorSlackDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["slack"]

    id: Optional[str] = None

    connector: Optional[ConnectorSlackDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorSlackDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorSlackDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorSmartsheetDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorSmartsheetDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorSmartsheetDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorSmartsheetDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorSmartsheetDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorSmartsheetDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorSmartsheetDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorSmartsheetDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorSmartsheetDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorSmartsheetDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorSmartsheetDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorSmartsheetDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["smartsheet"]

    id: Optional[str] = None

    connector: Optional[ConnectorSmartsheetDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorSmartsheetDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorSmartsheetDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorSnowflakeDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorSnowflakeDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorSnowflakeDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorSnowflakeDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorSnowflakeDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorSnowflakeDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorSnowflakeDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorSnowflakeDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorSnowflakeDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorSnowflakeDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorSnowflakeDiscriminatedConnectionSettingsSettingsOAuth

    snowflake_account_url: str
    """The domain of your Snowflake account (e.g., https://example-subdomain)"""

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorSnowflakeDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["snowflake"]

    id: Optional[str] = None

    connector: Optional[ConnectorSnowflakeDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorSnowflakeDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorSnowflakeDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorSpotifyDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorSpotifyDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorSpotifyDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorSpotifyDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorSpotifyDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorSpotifyDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorSpotifyDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorSpotifyDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorSpotifyDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorSpotifyDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorSpotifyDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorSpotifyDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["spotify"]

    id: Optional[str] = None

    connector: Optional[ConnectorSpotifyDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorSpotifyDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorSpotifyDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorSquarespaceDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorSquarespaceDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorSquarespaceDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorSquarespaceDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorSquarespaceDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorSquarespaceDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorSquarespaceDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorSquarespaceDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorSquarespaceDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorSquarespaceDiscriminatedConnectionSettingsSettings(BaseModel):
    customapp_description: str = FieldInfo(alias="customappDescription")
    """The user agent of your custom app (e.g., example-subdomain)"""

    oauth: ConnectorSquarespaceDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorSquarespaceDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["squarespace"]

    id: Optional[str] = None

    connector: Optional[ConnectorSquarespaceDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorSquarespaceDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorSquarespaceDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorSquareupDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorSquareupDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorSquareupDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorSquareupDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorSquareupDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorSquareupDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorSquareupDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorSquareupDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorSquareupDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorSquareupDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorSquareupDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorSquareupDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["squareup"]

    id: Optional[str] = None

    connector: Optional[ConnectorSquareupDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorSquareupDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorSquareupDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorStackexchangeDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorStackexchangeDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorStackexchangeDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorStackexchangeDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorStackexchangeDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorStackexchangeDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorStackexchangeDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorStackexchangeDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorStackexchangeDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorStackexchangeDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorStackexchangeDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorStackexchangeDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["stackexchange"]

    id: Optional[str] = None

    connector: Optional[ConnectorStackexchangeDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorStackexchangeDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorStackexchangeDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorStravaDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorStravaDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorStravaDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorStravaDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorStravaDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorStravaDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorStravaDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorStravaDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorStravaDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorStravaDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorStravaDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorStravaDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["strava"]

    id: Optional[str] = None

    connector: Optional[ConnectorStravaDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorStravaDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorStravaDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorTeamworkDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorTeamworkDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorTeamworkDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorTeamworkDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorTeamworkDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorTeamworkDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorTeamworkDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorTeamworkDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorTeamworkDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorTeamworkDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorTeamworkDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorTeamworkDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["teamwork"]

    id: Optional[str] = None

    connector: Optional[ConnectorTeamworkDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorTeamworkDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorTeamworkDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorTicktickDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorTicktickDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorTicktickDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorTicktickDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorTicktickDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorTicktickDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorTicktickDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorTicktickDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorTicktickDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorTicktickDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorTicktickDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorTicktickDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["ticktick"]

    id: Optional[str] = None

    connector: Optional[ConnectorTicktickDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorTicktickDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorTicktickDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorTimelyDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorTimelyDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorTimelyDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorTimelyDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorTimelyDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorTimelyDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorTimelyDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorTimelyDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorTimelyDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorTimelyDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorTimelyDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorTimelyDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["timely"]

    id: Optional[str] = None

    connector: Optional[ConnectorTimelyDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorTimelyDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorTimelyDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorTodoistDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorTodoistDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorTodoistDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorTodoistDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorTodoistDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorTodoistDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorTodoistDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorTodoistDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorTodoistDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorTodoistDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorTodoistDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorTodoistDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["todoist"]

    id: Optional[str] = None

    connector: Optional[ConnectorTodoistDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorTodoistDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorTodoistDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorTremendousDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorTremendousDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorTremendousDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorTremendousDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorTremendousDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorTremendousDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorTremendousDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorTremendousDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorTremendousDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorTremendousDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorTremendousDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorTremendousDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["tremendous"]

    id: Optional[str] = None

    connector: Optional[ConnectorTremendousDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorTremendousDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorTremendousDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorTsheetsteamDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorTsheetsteamDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorTsheetsteamDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorTsheetsteamDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorTsheetsteamDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorTsheetsteamDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorTsheetsteamDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorTsheetsteamDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorTsheetsteamDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorTsheetsteamDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorTsheetsteamDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorTsheetsteamDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["tsheetsteam"]

    id: Optional[str] = None

    connector: Optional[ConnectorTsheetsteamDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorTsheetsteamDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorTsheetsteamDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorTumblrDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorTumblrDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorTumblrDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorTumblrDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorTumblrDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorTumblrDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorTumblrDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorTumblrDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorTumblrDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorTumblrDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorTumblrDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorTumblrDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["tumblr"]

    id: Optional[str] = None

    connector: Optional[ConnectorTumblrDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorTumblrDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorTumblrDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorTwinfieldDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorTwinfieldDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorTwinfieldDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorTwinfieldDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorTwinfieldDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorTwinfieldDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorTwinfieldDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorTwinfieldDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorTwinfieldDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorTwinfieldDiscriminatedConnectionSettingsSettings(BaseModel):
    cluster: str
    """The cluster to your Twinfield instance (e.g., https://accounting.twinfield.com)"""

    oauth: ConnectorTwinfieldDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorTwinfieldDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["twinfield"]

    id: Optional[str] = None

    connector: Optional[ConnectorTwinfieldDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorTwinfieldDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorTwinfieldDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorTwitchDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorTwitchDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorTwitchDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorTwitchDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorTwitchDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorTwitchDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorTwitchDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorTwitchDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorTwitchDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorTwitchDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorTwitchDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorTwitchDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["twitch"]

    id: Optional[str] = None

    connector: Optional[ConnectorTwitchDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorTwitchDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorTwitchDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorTwitterDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorTwitterDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorTwitterDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorTwitterDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorTwitterDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorTwitterDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorTwitterDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorTwitterDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorTwitterDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorTwitterDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorTwitterDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorTwitterDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["twitter"]

    id: Optional[str] = None

    connector: Optional[ConnectorTwitterDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorTwitterDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorTwitterDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorTypeformDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorTypeformDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorTypeformDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorTypeformDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorTypeformDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorTypeformDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorTypeformDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorTypeformDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorTypeformDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorTypeformDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorTypeformDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorTypeformDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["typeform"]

    id: Optional[str] = None

    connector: Optional[ConnectorTypeformDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorTypeformDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorTypeformDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorUberDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorUberDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorUberDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorUberDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorUberDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorUberDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorUberDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorUberDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorUberDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorUberDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorUberDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorUberDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["uber"]

    id: Optional[str] = None

    connector: Optional[ConnectorUberDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorUberDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorUberDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorVimeoDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorVimeoDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorVimeoDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorVimeoDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorVimeoDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorVimeoDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorVimeoDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorVimeoDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorVimeoDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorVimeoDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorVimeoDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorVimeoDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["vimeo"]

    id: Optional[str] = None

    connector: Optional[ConnectorVimeoDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorVimeoDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorVimeoDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorWakatimeDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorWakatimeDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorWakatimeDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorWakatimeDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorWakatimeDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorWakatimeDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorWakatimeDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorWakatimeDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorWakatimeDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorWakatimeDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorWakatimeDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorWakatimeDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["wakatime"]

    id: Optional[str] = None

    connector: Optional[ConnectorWakatimeDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorWakatimeDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorWakatimeDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorWealthboxDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorWealthboxDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorWealthboxDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorWealthboxDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorWealthboxDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorWealthboxDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorWealthboxDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorWealthboxDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorWealthboxDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorWealthboxDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorWealthboxDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorWealthboxDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["wealthbox"]

    id: Optional[str] = None

    connector: Optional[ConnectorWealthboxDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorWealthboxDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorWealthboxDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorWebflowDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorWebflowDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorWebflowDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorWebflowDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorWebflowDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorWebflowDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorWebflowDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorWebflowDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorWebflowDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorWebflowDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorWebflowDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorWebflowDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["webflow"]

    id: Optional[str] = None

    connector: Optional[ConnectorWebflowDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorWebflowDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorWebflowDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorWhoopDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorWhoopDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorWhoopDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorWhoopDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorWhoopDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorWhoopDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorWhoopDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorWhoopDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorWhoopDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorWhoopDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorWhoopDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorWhoopDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["whoop"]

    id: Optional[str] = None

    connector: Optional[ConnectorWhoopDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorWhoopDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorWhoopDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorWordpressDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorWordpressDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorWordpressDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorWordpressDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorWordpressDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorWordpressDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorWordpressDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorWordpressDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorWordpressDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorWordpressDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorWordpressDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorWordpressDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["wordpress"]

    id: Optional[str] = None

    connector: Optional[ConnectorWordpressDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorWordpressDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorWordpressDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorWrikeDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorWrikeDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorWrikeDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorWrikeDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorWrikeDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorWrikeDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorWrikeDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorWrikeDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorWrikeDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorWrikeDiscriminatedConnectionSettingsSettings(BaseModel):
    host: str
    """The domain of your Wrike account (e.g., https://example-subdomain)"""

    oauth: ConnectorWrikeDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorWrikeDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["wrike"]

    id: Optional[str] = None

    connector: Optional[ConnectorWrikeDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorWrikeDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorWrikeDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorXeroDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorXeroDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorXeroDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorXeroDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorXeroDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorXeroDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorXeroDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorXeroDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorXeroDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorXeroDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorXeroDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorXeroDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["xero"]

    id: Optional[str] = None

    connector: Optional[ConnectorXeroDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorXeroDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorXeroDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorYahooDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorYahooDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorYahooDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorYahooDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorYahooDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorYahooDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorYahooDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorYahooDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorYahooDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorYahooDiscriminatedConnectionSettingsSettings(BaseModel):
    api_domain: str = FieldInfo(alias="apiDomain")
    """
    The domain to the API you want to connect to (e.g.,
    https://fantasysports.yahooapis.com)
    """

    oauth: ConnectorYahooDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorYahooDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["yahoo"]

    id: Optional[str] = None

    connector: Optional[ConnectorYahooDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorYahooDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorYahooDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorYandexDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorYandexDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorYandexDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorYandexDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorYandexDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorYandexDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorYandexDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorYandexDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorYandexDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorYandexDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorYandexDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorYandexDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["yandex"]

    id: Optional[str] = None

    connector: Optional[ConnectorYandexDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorYandexDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorYandexDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorZapierDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorZapierDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorZapierDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorZapierDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorZapierDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorZapierDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorZapierDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorZapierDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorZapierDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorZapierDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorZapierDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorZapierDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["zapier"]

    id: Optional[str] = None

    connector: Optional[ConnectorZapierDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorZapierDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorZapierDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorZendeskDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorZendeskDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorZendeskDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorZendeskDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorZendeskDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorZendeskDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorZendeskDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorZendeskDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorZendeskDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorZendeskDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorZendeskDiscriminatedConnectionSettingsSettingsOAuth

    subdomain: str
    """The subdomain of your Zendesk account (e.g., https://domain.zendesk.com)"""

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorZendeskDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["zendesk"]

    id: Optional[str] = None

    connector: Optional[ConnectorZendeskDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorZendeskDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorZendeskDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorZenefitsDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorZenefitsDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorZenefitsDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorZenefitsDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorZenefitsDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorZenefitsDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorZenefitsDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorZenefitsDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorZenefitsDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorZenefitsDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorZenefitsDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorZenefitsDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["zenefits"]

    id: Optional[str] = None

    connector: Optional[ConnectorZenefitsDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorZenefitsDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorZenefitsDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorZohoDeskDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorZohoDeskDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorZohoDeskDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorZohoDeskDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorZohoDeskDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorZohoDeskDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorZohoDeskDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorZohoDeskDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorZohoDeskDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorZohoDeskDiscriminatedConnectionSettingsSettings(BaseModel):
    extension: str
    """The domain extension of your Zoho account (e.g., https://accounts.zoho.com/)"""

    oauth: ConnectorZohoDeskDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorZohoDeskDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["zoho-desk"]

    id: Optional[str] = None

    connector: Optional[ConnectorZohoDeskDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorZohoDeskDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorZohoDeskDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorZohoDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorZohoDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorZohoDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorZohoDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorZohoDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorZohoDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorZohoDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorZohoDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorZohoDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorZohoDiscriminatedConnectionSettingsSettings(BaseModel):
    extension: str
    """The domain extension of your Zoho account (e.g., https://accounts.zoho.com/)"""

    oauth: ConnectorZohoDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorZohoDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["zoho"]

    id: Optional[str] = None

    connector: Optional[ConnectorZohoDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorZohoDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorZohoDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorZoomDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorZoomDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorZoomDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorZoomDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorZoomDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorZoomDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorZoomDiscriminatedConnectionSettingsSettingsOAuthCredentials(BaseModel):
    access_token: str

    client_id: Optional[str] = None
    """Client ID used for the connection"""

    expires_at: Optional[str] = None

    expires_in: Optional[float] = None

    raw: Optional[Dict[str, object]] = None

    refresh_token: Optional[str] = None

    scope: Optional[str] = None

    token_type: Optional[str] = None


class ConnectorZoomDiscriminatedConnectionSettingsSettingsOAuth(BaseModel):
    created_at: Optional[str] = None

    credentials: Optional[ConnectorZoomDiscriminatedConnectionSettingsSettingsOAuthCredentials] = None
    """Output of the postConnect hook for oauth2 connectors"""

    last_fetched_at: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None

    updated_at: Optional[str] = None


class ConnectorZoomDiscriminatedConnectionSettingsSettings(BaseModel):
    oauth: ConnectorZoomDiscriminatedConnectionSettingsSettingsOAuth

    access_token: Optional[str] = None
    """Same as oauth.credentials.access_token, but more convenient to access.

    Optional for backward compatibility until we remove the oauth field
    """


class ConnectorZoomDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["zoom"]

    id: Optional[str] = None

    connector: Optional[ConnectorZoomDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorZoomDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorZoomDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorAirtableDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorAirtableDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorAirtableDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorAirtableDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorAirtableDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorAirtableDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorAirtableDiscriminatedConnectionSettingsSettings(BaseModel):
    airtable_base: str = FieldInfo(alias="airtableBase")

    api_key: str = FieldInfo(alias="apiKey")


class ConnectorAirtableDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["airtable"]

    id: Optional[str] = None

    connector: Optional[ConnectorAirtableDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorAirtableDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorAirtableDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorApolloDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorApolloDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorApolloDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorApolloDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorApolloDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorApolloDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorApolloDiscriminatedConnectionSettingsSettings(BaseModel):
    api_key: str


class ConnectorApolloDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["apollo"]

    id: Optional[str] = None

    connector: Optional[ConnectorApolloDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorApolloDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorApolloDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorBrexDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorBrexDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorBrexDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorBrexDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorBrexDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorBrexDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorBrexDiscriminatedConnectionSettingsSettings(BaseModel):
    access_token: str = FieldInfo(alias="accessToken")


class ConnectorBrexDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["brex"]

    id: Optional[str] = None

    connector: Optional[ConnectorBrexDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorBrexDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorBrexDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorCodaDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorCodaDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorCodaDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorCodaDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorCodaDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorCodaDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorCodaDiscriminatedConnectionSettingsSettings(BaseModel):
    api_key: str = FieldInfo(alias="apiKey")


class ConnectorCodaDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["coda"]

    id: Optional[str] = None

    connector: Optional[ConnectorCodaDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorCodaDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorCodaDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorFinchDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorFinchDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorFinchDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorFinchDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorFinchDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorFinchDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorFinchDiscriminatedConnectionSettingsSettings(BaseModel):
    access_token: str


class ConnectorFinchDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["finch"]

    id: Optional[str] = None

    connector: Optional[ConnectorFinchDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorFinchDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorFinchDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorFirebaseDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorFirebaseDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorFirebaseDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorFirebaseDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorFirebaseDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorFirebaseDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorFirebaseDiscriminatedConnectionSettingsSettingsUnionMember0ServiceAccount(BaseModel):
    project_id: str

    if TYPE_CHECKING:
        # Stub to indicate that arbitrary properties are accepted.
        # To access properties that are not valid identifiers you can use `getattr`, e.g.
        # `getattr(obj, '$type')`
        def __getattr__(self, attr: str) -> object: ...


class ConnectorFirebaseDiscriminatedConnectionSettingsSettingsUnionMember0(BaseModel):
    role: Literal["admin"]

    service_account: ConnectorFirebaseDiscriminatedConnectionSettingsSettingsUnionMember0ServiceAccount = FieldInfo(
        alias="serviceAccount"
    )


class ConnectorFirebaseDiscriminatedConnectionSettingsSettingsUnionMember1AuthDataUnionMember0UserJson(BaseModel):
    app_name: str = FieldInfo(alias="appName")

    sts_token_manager: Dict[str, object] = FieldInfo(alias="stsTokenManager")

    uid: str

    if TYPE_CHECKING:
        # Stub to indicate that arbitrary properties are accepted.
        # To access properties that are not valid identifiers you can use `getattr`, e.g.
        # `getattr(obj, '$type')`
        def __getattr__(self, attr: str) -> object: ...


class ConnectorFirebaseDiscriminatedConnectionSettingsSettingsUnionMember1AuthDataUnionMember0(BaseModel):
    method: Literal["userJson"]

    user_json: ConnectorFirebaseDiscriminatedConnectionSettingsSettingsUnionMember1AuthDataUnionMember0UserJson = (
        FieldInfo(alias="userJson")
    )


class ConnectorFirebaseDiscriminatedConnectionSettingsSettingsUnionMember1AuthDataUnionMember1(BaseModel):
    custom_token: str = FieldInfo(alias="customToken")

    method: Literal["customToken"]


class ConnectorFirebaseDiscriminatedConnectionSettingsSettingsUnionMember1AuthDataUnionMember2(BaseModel):
    email: str

    method: Literal["emailPassword"]

    password: str


ConnectorFirebaseDiscriminatedConnectionSettingsSettingsUnionMember1AuthData: TypeAlias = Union[
    ConnectorFirebaseDiscriminatedConnectionSettingsSettingsUnionMember1AuthDataUnionMember0,
    ConnectorFirebaseDiscriminatedConnectionSettingsSettingsUnionMember1AuthDataUnionMember1,
    ConnectorFirebaseDiscriminatedConnectionSettingsSettingsUnionMember1AuthDataUnionMember2,
]


class ConnectorFirebaseDiscriminatedConnectionSettingsSettingsUnionMember1FirebaseConfig(BaseModel):
    api_key: str = FieldInfo(alias="apiKey")

    app_id: str = FieldInfo(alias="appId")

    auth_domain: str = FieldInfo(alias="authDomain")

    database_url: str = FieldInfo(alias="databaseURL")

    project_id: str = FieldInfo(alias="projectId")

    measurement_id: Optional[str] = FieldInfo(alias="measurementId", default=None)

    messaging_sender_id: Optional[str] = FieldInfo(alias="messagingSenderId", default=None)

    storage_bucket: Optional[str] = FieldInfo(alias="storageBucket", default=None)


class ConnectorFirebaseDiscriminatedConnectionSettingsSettingsUnionMember1(BaseModel):
    auth_data: ConnectorFirebaseDiscriminatedConnectionSettingsSettingsUnionMember1AuthData = FieldInfo(
        alias="authData"
    )

    firebase_config: ConnectorFirebaseDiscriminatedConnectionSettingsSettingsUnionMember1FirebaseConfig = FieldInfo(
        alias="firebaseConfig"
    )

    role: Literal["user"]


ConnectorFirebaseDiscriminatedConnectionSettingsSettings: TypeAlias = Union[
    ConnectorFirebaseDiscriminatedConnectionSettingsSettingsUnionMember0,
    ConnectorFirebaseDiscriminatedConnectionSettingsSettingsUnionMember1,
]


class ConnectorFirebaseDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["firebase"]

    id: Optional[str] = None

    connector: Optional[ConnectorFirebaseDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorFirebaseDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorFirebaseDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorForeceiptDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorForeceiptDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorForeceiptDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorForeceiptDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorForeceiptDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorForeceiptDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorForeceiptDiscriminatedConnectionSettingsSettings(BaseModel):
    env_name: Literal["staging", "production"] = FieldInfo(alias="envName")

    api_id: Optional[object] = FieldInfo(alias="_id", default=None)

    credentials: Optional[object] = None


class ConnectorForeceiptDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["foreceipt"]

    id: Optional[str] = None

    connector: Optional[ConnectorForeceiptDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorForeceiptDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorForeceiptDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorGreenhouseDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorGreenhouseDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorGreenhouseDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorGreenhouseDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorGreenhouseDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorGreenhouseDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorGreenhouseDiscriminatedConnectionSettingsSettings(BaseModel):
    api_key: str = FieldInfo(alias="apiKey")


class ConnectorGreenhouseDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["greenhouse"]

    id: Optional[str] = None

    connector: Optional[ConnectorGreenhouseDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorGreenhouseDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorGreenhouseDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorHeronDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorHeronDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorHeronDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorHeronDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorHeronDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorHeronDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorHeronDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["heron"]

    id: Optional[str] = None

    connector: Optional[ConnectorHeronDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorHeronDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[object] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorLunchmoneyDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorLunchmoneyDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorLunchmoneyDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorLunchmoneyDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorLunchmoneyDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorLunchmoneyDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorLunchmoneyDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["lunchmoney"]

    id: Optional[str] = None

    connector: Optional[ConnectorLunchmoneyDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorLunchmoneyDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[object] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorMercuryDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorMercuryDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorMercuryDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorMercuryDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorMercuryDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorMercuryDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorMercuryDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["mercury"]

    id: Optional[str] = None

    connector: Optional[ConnectorMercuryDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorMercuryDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[object] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorMergeDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorMergeDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorMergeDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorMergeDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorMergeDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorMergeDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorMergeDiscriminatedConnectionSettingsSettings(BaseModel):
    account_token: str = FieldInfo(alias="accountToken")

    account_details: Optional[object] = FieldInfo(alias="accountDetails", default=None)


class ConnectorMergeDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["merge"]

    id: Optional[str] = None

    connector: Optional[ConnectorMergeDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorMergeDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorMergeDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorMootaDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorMootaDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorMootaDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorMootaDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorMootaDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorMootaDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorMootaDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["moota"]

    id: Optional[str] = None

    connector: Optional[ConnectorMootaDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorMootaDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[object] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorOnebrickDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorOnebrickDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorOnebrickDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorOnebrickDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorOnebrickDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorOnebrickDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorOnebrickDiscriminatedConnectionSettingsSettings(BaseModel):
    access_token: str = FieldInfo(alias="accessToken")


class ConnectorOnebrickDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["onebrick"]

    id: Optional[str] = None

    connector: Optional[ConnectorOnebrickDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorOnebrickDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorOnebrickDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorOpenledgerDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorOpenledgerDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorOpenledgerDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorOpenledgerDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorOpenledgerDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorOpenledgerDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorOpenledgerDiscriminatedConnectionSettingsSettings(BaseModel):
    entity_id: str
    """Your entity's identifier, aka customer ID"""


class ConnectorOpenledgerDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["openledger"]

    id: Optional[str] = None

    connector: Optional[ConnectorOpenledgerDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorOpenledgerDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorOpenledgerDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorPlaidDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorPlaidDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorPlaidDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorPlaidDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorPlaidDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorPlaidDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorPlaidDiscriminatedConnectionSettingsSettings(BaseModel):
    access_token: str = FieldInfo(alias="accessToken")

    institution: Optional[object] = None

    item: Optional[object] = None

    item_id: Optional[str] = FieldInfo(alias="itemId", default=None)

    status: Optional[object] = None

    webhook_item_error: None = FieldInfo(alias="webhookItemError", default=None)


class ConnectorPlaidDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["plaid"]

    id: Optional[str] = None

    connector: Optional[ConnectorPlaidDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorPlaidDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorPlaidDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorPostgresDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorPostgresDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorPostgresDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorPostgresDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorPostgresDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorPostgresDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorPostgresDiscriminatedConnectionSettingsSettings(BaseModel):
    database_url: Optional[str] = FieldInfo(alias="databaseURL", default=None)


class ConnectorPostgresDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["postgres"]

    id: Optional[str] = None

    connector: Optional[ConnectorPostgresDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorPostgresDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorPostgresDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorRampDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorRampDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorRampDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorRampDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorRampDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorRampDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorRampDiscriminatedConnectionSettingsSettings(BaseModel):
    access_token: Optional[str] = FieldInfo(alias="accessToken", default=None)

    start_after_transaction_id: Optional[str] = FieldInfo(alias="startAfterTransactionId", default=None)


class ConnectorRampDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["ramp"]

    id: Optional[str] = None

    connector: Optional[ConnectorRampDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorRampDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorRampDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorSaltedgeDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorSaltedgeDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorSaltedgeDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorSaltedgeDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorSaltedgeDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorSaltedgeDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorSaltedgeDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["saltedge"]

    id: Optional[str] = None

    connector: Optional[ConnectorSaltedgeDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorSaltedgeDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[object] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorSplitwiseDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorSplitwiseDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorSplitwiseDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorSplitwiseDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorSplitwiseDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorSplitwiseDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorSplitwiseDiscriminatedConnectionSettingsSettingsCurrentUserNotifications(BaseModel):
    added_as_friend: bool

    added_to_group: bool

    announcements: bool

    bills: bool

    expense_added: bool

    expense_updated: bool

    monthly_summary: bool

    payments: bool


class ConnectorSplitwiseDiscriminatedConnectionSettingsSettingsCurrentUserPicture(BaseModel):
    large: Optional[str] = None

    medium: Optional[str] = None

    original: Optional[str] = None

    small: Optional[str] = None

    xlarge: Optional[str] = None

    xxlarge: Optional[str] = None


class ConnectorSplitwiseDiscriminatedConnectionSettingsSettingsCurrentUser(BaseModel):
    id: float

    country_code: str

    custom_picture: bool

    date_format: str

    default_currency: str

    default_group_id: float

    email: str

    first_name: str

    force_refresh_at: str

    last_name: str

    locale: str

    notifications: ConnectorSplitwiseDiscriminatedConnectionSettingsSettingsCurrentUserNotifications

    notifications_count: float

    notifications_read: str

    picture: ConnectorSplitwiseDiscriminatedConnectionSettingsSettingsCurrentUserPicture

    registration_status: str


class ConnectorSplitwiseDiscriminatedConnectionSettingsSettings(BaseModel):
    access_token: str = FieldInfo(alias="accessToken")

    current_user: Optional[ConnectorSplitwiseDiscriminatedConnectionSettingsSettingsCurrentUser] = FieldInfo(
        alias="currentUser", default=None
    )


class ConnectorSplitwiseDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["splitwise"]

    id: Optional[str] = None

    connector: Optional[ConnectorSplitwiseDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorSplitwiseDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorSplitwiseDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorStripeDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorStripeDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorStripeDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorStripeDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorStripeDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorStripeDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorStripeDiscriminatedConnectionSettingsSettings(BaseModel):
    secret_key: str = FieldInfo(alias="secretKey")


class ConnectorStripeDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["stripe"]

    id: Optional[str] = None

    connector: Optional[ConnectorStripeDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorStripeDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorStripeDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorTellerDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorTellerDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorTellerDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorTellerDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorTellerDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorTellerDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorTellerDiscriminatedConnectionSettingsSettings(BaseModel):
    token: str


class ConnectorTellerDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["teller"]

    id: Optional[str] = None

    connector: Optional[ConnectorTellerDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorTellerDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorTellerDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorTogglDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorTogglDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorTogglDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorTogglDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorTogglDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorTogglDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorTogglDiscriminatedConnectionSettingsSettings(BaseModel):
    api_token: str = FieldInfo(alias="apiToken")

    email: Optional[str] = None

    password: Optional[str] = None


class ConnectorTogglDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["toggl"]

    id: Optional[str] = None

    connector: Optional[ConnectorTogglDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorTogglDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorTogglDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorTwentyDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorTwentyDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorTwentyDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorTwentyDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorTwentyDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorTwentyDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorTwentyDiscriminatedConnectionSettingsSettings(BaseModel):
    access_token: str


class ConnectorTwentyDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["twenty"]

    id: Optional[str] = None

    connector: Optional[ConnectorTwentyDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorTwentyDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorTwentyDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorVenmoDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorVenmoDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorVenmoDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorVenmoDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorVenmoDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorVenmoDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorVenmoDiscriminatedConnectionSettingsSettings(BaseModel):
    credentials: Optional[object] = None

    me: Optional[object] = None


class ConnectorVenmoDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["venmo"]

    id: Optional[str] = None

    connector: Optional[ConnectorVenmoDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorVenmoDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorVenmoDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorWiseDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorWiseDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorWiseDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorWiseDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorWiseDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorWiseDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorWiseDiscriminatedConnectionSettingsSettings(BaseModel):
    env_name: Literal["sandbox", "live"] = FieldInfo(alias="envName")

    api_token: Optional[str] = FieldInfo(alias="apiToken", default=None)


class ConnectorWiseDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["wise"]

    id: Optional[str] = None

    connector: Optional[ConnectorWiseDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorWiseDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorWiseDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorYodleeDiscriminatedConnectionSettingsConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorYodleeDiscriminatedConnectionSettingsConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorYodleeDiscriminatedConnectionSettingsConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorYodleeDiscriminatedConnectionSettingsConnectorSchemas] = None

    scopes: Optional[List[ConnectorYodleeDiscriminatedConnectionSettingsConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorYodleeDiscriminatedConnectionSettingsIntegration(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorYodleeDiscriminatedConnectionSettingsSettingsAccessToken(BaseModel):
    access_token: str = FieldInfo(alias="accessToken")

    expires_in: float = FieldInfo(alias="expiresIn")

    issued_at: str = FieldInfo(alias="issuedAt")


class ConnectorYodleeDiscriminatedConnectionSettingsSettingsProviderAccount(BaseModel):
    id: float

    aggregation_source: str = FieldInfo(alias="aggregationSource")

    created_date: str = FieldInfo(alias="createdDate")

    dataset: List[object]

    is_manual: bool = FieldInfo(alias="isManual")

    provider_id: float = FieldInfo(alias="providerId")

    status: Literal["LOGIN_IN_PROGRESS", "USER_INPUT_REQUIRED", "IN_PROGRESS", "PARTIAL_SUCCESS", "SUCCESS", "FAILED"]

    is_deleted: Optional[bool] = FieldInfo(alias="isDeleted", default=None)


class ConnectorYodleeDiscriminatedConnectionSettingsSettings(BaseModel):
    login_name: str = FieldInfo(alias="loginName")

    provider_account_id: Union[float, str] = FieldInfo(alias="providerAccountId")

    access_token: Optional[ConnectorYodleeDiscriminatedConnectionSettingsSettingsAccessToken] = FieldInfo(
        alias="accessToken", default=None
    )

    provider: None = None

    provider_account: Optional[ConnectorYodleeDiscriminatedConnectionSettingsSettingsProviderAccount] = FieldInfo(
        alias="providerAccount", default=None
    )

    user: None = None


class ConnectorYodleeDiscriminatedConnectionSettings(BaseModel):
    connector_name: Literal["yodlee"]

    id: Optional[str] = None

    connector: Optional[ConnectorYodleeDiscriminatedConnectionSettingsConnector] = None

    connector_config_id: Optional[str] = None

    created_at: Optional[str] = None

    customer_id: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integration: Optional[ConnectorYodleeDiscriminatedConnectionSettingsIntegration] = None

    integration_id: Optional[str] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    settings: Optional[ConnectorYodleeDiscriminatedConnectionSettingsSettings] = None

    status: Optional[Literal["healthy", "disconnected", "error", "manual", "unknown"]] = None

    status_message: Optional[str] = None

    updated_at: Optional[str] = None


ListConnectionsResponse: TypeAlias = Union[
    ConnectorAcceloDiscriminatedConnectionSettings,
    ConnectorAcmeOauth2DiscriminatedConnectionSettings,
    ConnectorAdobeDiscriminatedConnectionSettings,
    ConnectorAdyenDiscriminatedConnectionSettings,
    ConnectorAircallDiscriminatedConnectionSettings,
    ConnectorAmazonDiscriminatedConnectionSettings,
    ConnectorApaleoDiscriminatedConnectionSettings,
    ConnectorAsanaDiscriminatedConnectionSettings,
    ConnectorAttioDiscriminatedConnectionSettings,
    ConnectorAuth0DiscriminatedConnectionSettings,
    ConnectorAutodeskDiscriminatedConnectionSettings,
    ConnectorAwsDiscriminatedConnectionSettings,
    ConnectorBamboohrDiscriminatedConnectionSettings,
    ConnectorBasecampDiscriminatedConnectionSettings,
    ConnectorBattlenetDiscriminatedConnectionSettings,
    ConnectorBigcommerceDiscriminatedConnectionSettings,
    ConnectorBitbucketDiscriminatedConnectionSettings,
    ConnectorBitlyDiscriminatedConnectionSettings,
    ConnectorBlackbaudDiscriminatedConnectionSettings,
    ConnectorBoldsignDiscriminatedConnectionSettings,
    ConnectorBoxDiscriminatedConnectionSettings,
    ConnectorBraintreeDiscriminatedConnectionSettings,
    ConnectorCalendlyDiscriminatedConnectionSettings,
    ConnectorClickupDiscriminatedConnectionSettings,
    ConnectorCloseDiscriminatedConnectionSettings,
    ConnectorConfluenceDiscriminatedConnectionSettings,
    ConnectorContentfulDiscriminatedConnectionSettings,
    ConnectorContentstackDiscriminatedConnectionSettings,
    ConnectorCopperDiscriminatedConnectionSettings,
    ConnectorCorosDiscriminatedConnectionSettings,
    ConnectorDatevDiscriminatedConnectionSettings,
    ConnectorDeelDiscriminatedConnectionSettings,
    ConnectorDialpadDiscriminatedConnectionSettings,
    ConnectorDigitaloceanDiscriminatedConnectionSettings,
    ConnectorDiscordDiscriminatedConnectionSettings,
    ConnectorDocusignDiscriminatedConnectionSettings,
    ConnectorDropboxDiscriminatedConnectionSettings,
    ConnectorEbayDiscriminatedConnectionSettings,
    ConnectorEgnyteDiscriminatedConnectionSettings,
    ConnectorEnvoyDiscriminatedConnectionSettings,
    ConnectorEventbriteDiscriminatedConnectionSettings,
    ConnectorExistDiscriminatedConnectionSettings,
    ConnectorFacebookDiscriminatedConnectionSettings,
    ConnectorFactorialDiscriminatedConnectionSettings,
    ConnectorFigmaDiscriminatedConnectionSettings,
    ConnectorFitbitDiscriminatedConnectionSettings,
    ConnectorFortnoxDiscriminatedConnectionSettings,
    ConnectorFreshbooksDiscriminatedConnectionSettings,
    ConnectorFrontDiscriminatedConnectionSettings,
    ConnectorGitHubDiscriminatedConnectionSettings,
    ConnectorGitlabDiscriminatedConnectionSettings,
    ConnectorGongDiscriminatedConnectionSettings,
    ConnectorGoogleCalendarDiscriminatedConnectionSettings,
    ConnectorGoogleDocsDiscriminatedConnectionSettings,
    ConnectorGoogleDriveDiscriminatedConnectionSettings,
    ConnectorGoogleMailDiscriminatedConnectionSettings,
    ConnectorGoogleSheetDiscriminatedConnectionSettings,
    ConnectorGorgiasDiscriminatedConnectionSettings,
    ConnectorGrainDiscriminatedConnectionSettings,
    ConnectorGumroadDiscriminatedConnectionSettings,
    ConnectorGustoDiscriminatedConnectionSettings,
    ConnectorHarvestDiscriminatedConnectionSettings,
    ConnectorHighlevelDiscriminatedConnectionSettings,
    ConnectorHubspotDiscriminatedConnectionSettings,
    ConnectorInstagramDiscriminatedConnectionSettings,
    ConnectorIntercomDiscriminatedConnectionSettings,
    ConnectorJiraDiscriminatedConnectionSettings,
    ConnectorKeapDiscriminatedConnectionSettings,
    ConnectorLeverDiscriminatedConnectionSettings,
    ConnectorLinearDiscriminatedConnectionSettings,
    ConnectorLinkedinDiscriminatedConnectionSettings,
    ConnectorLinkhutDiscriminatedConnectionSettings,
    ConnectorMailchimpDiscriminatedConnectionSettings,
    ConnectorMiroDiscriminatedConnectionSettings,
    ConnectorMondayDiscriminatedConnectionSettings,
    ConnectorMuralDiscriminatedConnectionSettings,
    ConnectorNamelyDiscriminatedConnectionSettings,
    ConnectorNationbuilderDiscriminatedConnectionSettings,
    ConnectorNetsuiteDiscriminatedConnectionSettings,
    ConnectorNotionDiscriminatedConnectionSettings,
    ConnectorOdooDiscriminatedConnectionSettings,
    ConnectorOktaDiscriminatedConnectionSettings,
    ConnectorOsuDiscriminatedConnectionSettings,
    ConnectorOuraDiscriminatedConnectionSettings,
    ConnectorOutreachDiscriminatedConnectionSettings,
    ConnectorPagerdutyDiscriminatedConnectionSettings,
    ConnectorPandadocDiscriminatedConnectionSettings,
    ConnectorPayfitDiscriminatedConnectionSettings,
    ConnectorPaypalDiscriminatedConnectionSettings,
    ConnectorPennylaneDiscriminatedConnectionSettings,
    ConnectorPinterestDiscriminatedConnectionSettings,
    ConnectorPipedriveDiscriminatedConnectionSettings,
    ConnectorPodiumDiscriminatedConnectionSettings,
    ConnectorProductboardDiscriminatedConnectionSettings,
    ConnectorQualtricsDiscriminatedConnectionSettings,
    ConnectorQuickbooksDiscriminatedConnectionSettings,
    ConnectorRedditDiscriminatedConnectionSettings,
    ConnectorSageDiscriminatedConnectionSettings,
    ConnectorSalesforceDiscriminatedConnectionSettings,
    ConnectorSalesloftDiscriminatedConnectionSettings,
    ConnectorSegmentDiscriminatedConnectionSettings,
    ConnectorServicem8DiscriminatedConnectionSettings,
    ConnectorServicenowDiscriminatedConnectionSettings,
    ConnectorSharepointDiscriminatedConnectionSettings,
    ConnectorShopifyDiscriminatedConnectionSettings,
    ConnectorSignnowDiscriminatedConnectionSettings,
    ConnectorSlackDiscriminatedConnectionSettings,
    ConnectorSmartsheetDiscriminatedConnectionSettings,
    ConnectorSnowflakeDiscriminatedConnectionSettings,
    ConnectorSpotifyDiscriminatedConnectionSettings,
    ConnectorSquarespaceDiscriminatedConnectionSettings,
    ConnectorSquareupDiscriminatedConnectionSettings,
    ConnectorStackexchangeDiscriminatedConnectionSettings,
    ConnectorStravaDiscriminatedConnectionSettings,
    ConnectorTeamworkDiscriminatedConnectionSettings,
    ConnectorTicktickDiscriminatedConnectionSettings,
    ConnectorTimelyDiscriminatedConnectionSettings,
    ConnectorTodoistDiscriminatedConnectionSettings,
    ConnectorTremendousDiscriminatedConnectionSettings,
    ConnectorTsheetsteamDiscriminatedConnectionSettings,
    ConnectorTumblrDiscriminatedConnectionSettings,
    ConnectorTwinfieldDiscriminatedConnectionSettings,
    ConnectorTwitchDiscriminatedConnectionSettings,
    ConnectorTwitterDiscriminatedConnectionSettings,
    ConnectorTypeformDiscriminatedConnectionSettings,
    ConnectorUberDiscriminatedConnectionSettings,
    ConnectorVimeoDiscriminatedConnectionSettings,
    ConnectorWakatimeDiscriminatedConnectionSettings,
    ConnectorWealthboxDiscriminatedConnectionSettings,
    ConnectorWebflowDiscriminatedConnectionSettings,
    ConnectorWhoopDiscriminatedConnectionSettings,
    ConnectorWordpressDiscriminatedConnectionSettings,
    ConnectorWrikeDiscriminatedConnectionSettings,
    ConnectorXeroDiscriminatedConnectionSettings,
    ConnectorYahooDiscriminatedConnectionSettings,
    ConnectorYandexDiscriminatedConnectionSettings,
    ConnectorZapierDiscriminatedConnectionSettings,
    ConnectorZendeskDiscriminatedConnectionSettings,
    ConnectorZenefitsDiscriminatedConnectionSettings,
    ConnectorZohoDeskDiscriminatedConnectionSettings,
    ConnectorZohoDiscriminatedConnectionSettings,
    ConnectorZoomDiscriminatedConnectionSettings,
    ConnectorAirtableDiscriminatedConnectionSettings,
    ConnectorApolloDiscriminatedConnectionSettings,
    ConnectorBrexDiscriminatedConnectionSettings,
    ConnectorCodaDiscriminatedConnectionSettings,
    ConnectorFinchDiscriminatedConnectionSettings,
    ConnectorFirebaseDiscriminatedConnectionSettings,
    ConnectorForeceiptDiscriminatedConnectionSettings,
    ConnectorGreenhouseDiscriminatedConnectionSettings,
    ConnectorHeronDiscriminatedConnectionSettings,
    ConnectorLunchmoneyDiscriminatedConnectionSettings,
    ConnectorMercuryDiscriminatedConnectionSettings,
    ConnectorMergeDiscriminatedConnectionSettings,
    ConnectorMootaDiscriminatedConnectionSettings,
    ConnectorOnebrickDiscriminatedConnectionSettings,
    ConnectorOpenledgerDiscriminatedConnectionSettings,
    ConnectorPlaidDiscriminatedConnectionSettings,
    ConnectorPostgresDiscriminatedConnectionSettings,
    ConnectorRampDiscriminatedConnectionSettings,
    ConnectorSaltedgeDiscriminatedConnectionSettings,
    ConnectorSplitwiseDiscriminatedConnectionSettings,
    ConnectorStripeDiscriminatedConnectionSettings,
    ConnectorTellerDiscriminatedConnectionSettings,
    ConnectorTogglDiscriminatedConnectionSettings,
    ConnectorTwentyDiscriminatedConnectionSettings,
    ConnectorVenmoDiscriminatedConnectionSettings,
    ConnectorWiseDiscriminatedConnectionSettings,
    ConnectorYodleeDiscriminatedConnectionSettings,
]
