# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from typing import Dict, List, Union, Optional
from typing_extensions import Literal, TypeAlias

from pydantic import Field as FieldInfo

from .._models import BaseModel

__all__ = [
    "ListConnectionConfigsResponse",
    "ConnectorAcceloDiscriminatedConnectorConfig",
    "ConnectorAcceloDiscriminatedConnectorConfigConfig",
    "ConnectorAcceloDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorAcceloDiscriminatedConnectorConfigConnector",
    "ConnectorAcceloDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorAcceloDiscriminatedConnectorConfigConnectorScope",
    "ConnectorAcceloDiscriminatedConnectorConfigIntegrations",
    "ConnectorAcmeOauth2DiscriminatedConnectorConfig",
    "ConnectorAcmeOauth2DiscriminatedConnectorConfigConfig",
    "ConnectorAcmeOauth2DiscriminatedConnectorConfigConfigOAuth",
    "ConnectorAcmeOauth2DiscriminatedConnectorConfigConnector",
    "ConnectorAcmeOauth2DiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorAcmeOauth2DiscriminatedConnectorConfigConnectorScope",
    "ConnectorAcmeOauth2DiscriminatedConnectorConfigIntegrations",
    "ConnectorAdobeDiscriminatedConnectorConfig",
    "ConnectorAdobeDiscriminatedConnectorConfigConfig",
    "ConnectorAdobeDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorAdobeDiscriminatedConnectorConfigConnector",
    "ConnectorAdobeDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorAdobeDiscriminatedConnectorConfigConnectorScope",
    "ConnectorAdobeDiscriminatedConnectorConfigIntegrations",
    "ConnectorAdyenDiscriminatedConnectorConfig",
    "ConnectorAdyenDiscriminatedConnectorConfigConfig",
    "ConnectorAdyenDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorAdyenDiscriminatedConnectorConfigConnector",
    "ConnectorAdyenDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorAdyenDiscriminatedConnectorConfigConnectorScope",
    "ConnectorAdyenDiscriminatedConnectorConfigIntegrations",
    "ConnectorAircallDiscriminatedConnectorConfig",
    "ConnectorAircallDiscriminatedConnectorConfigConfig",
    "ConnectorAircallDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorAircallDiscriminatedConnectorConfigConnector",
    "ConnectorAircallDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorAircallDiscriminatedConnectorConfigConnectorScope",
    "ConnectorAircallDiscriminatedConnectorConfigIntegrations",
    "ConnectorAmazonDiscriminatedConnectorConfig",
    "ConnectorAmazonDiscriminatedConnectorConfigConfig",
    "ConnectorAmazonDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorAmazonDiscriminatedConnectorConfigConnector",
    "ConnectorAmazonDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorAmazonDiscriminatedConnectorConfigConnectorScope",
    "ConnectorAmazonDiscriminatedConnectorConfigIntegrations",
    "ConnectorApaleoDiscriminatedConnectorConfig",
    "ConnectorApaleoDiscriminatedConnectorConfigConfig",
    "ConnectorApaleoDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorApaleoDiscriminatedConnectorConfigConnector",
    "ConnectorApaleoDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorApaleoDiscriminatedConnectorConfigConnectorScope",
    "ConnectorApaleoDiscriminatedConnectorConfigIntegrations",
    "ConnectorAsanaDiscriminatedConnectorConfig",
    "ConnectorAsanaDiscriminatedConnectorConfigConfig",
    "ConnectorAsanaDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorAsanaDiscriminatedConnectorConfigConnector",
    "ConnectorAsanaDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorAsanaDiscriminatedConnectorConfigConnectorScope",
    "ConnectorAsanaDiscriminatedConnectorConfigIntegrations",
    "ConnectorAttioDiscriminatedConnectorConfig",
    "ConnectorAttioDiscriminatedConnectorConfigConfig",
    "ConnectorAttioDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorAttioDiscriminatedConnectorConfigConnector",
    "ConnectorAttioDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorAttioDiscriminatedConnectorConfigConnectorScope",
    "ConnectorAttioDiscriminatedConnectorConfigIntegrations",
    "ConnectorAuth0DiscriminatedConnectorConfig",
    "ConnectorAuth0DiscriminatedConnectorConfigConfig",
    "ConnectorAuth0DiscriminatedConnectorConfigConfigOAuth",
    "ConnectorAuth0DiscriminatedConnectorConfigConnector",
    "ConnectorAuth0DiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorAuth0DiscriminatedConnectorConfigConnectorScope",
    "ConnectorAuth0DiscriminatedConnectorConfigIntegrations",
    "ConnectorAutodeskDiscriminatedConnectorConfig",
    "ConnectorAutodeskDiscriminatedConnectorConfigConfig",
    "ConnectorAutodeskDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorAutodeskDiscriminatedConnectorConfigConnector",
    "ConnectorAutodeskDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorAutodeskDiscriminatedConnectorConfigConnectorScope",
    "ConnectorAutodeskDiscriminatedConnectorConfigIntegrations",
    "ConnectorAwsDiscriminatedConnectorConfig",
    "ConnectorAwsDiscriminatedConnectorConfigConfig",
    "ConnectorAwsDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorAwsDiscriminatedConnectorConfigConnector",
    "ConnectorAwsDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorAwsDiscriminatedConnectorConfigConnectorScope",
    "ConnectorAwsDiscriminatedConnectorConfigIntegrations",
    "ConnectorBamboohrDiscriminatedConnectorConfig",
    "ConnectorBamboohrDiscriminatedConnectorConfigConfig",
    "ConnectorBamboohrDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorBamboohrDiscriminatedConnectorConfigConnector",
    "ConnectorBamboohrDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorBamboohrDiscriminatedConnectorConfigConnectorScope",
    "ConnectorBamboohrDiscriminatedConnectorConfigIntegrations",
    "ConnectorBasecampDiscriminatedConnectorConfig",
    "ConnectorBasecampDiscriminatedConnectorConfigConfig",
    "ConnectorBasecampDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorBasecampDiscriminatedConnectorConfigConnector",
    "ConnectorBasecampDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorBasecampDiscriminatedConnectorConfigConnectorScope",
    "ConnectorBasecampDiscriminatedConnectorConfigIntegrations",
    "ConnectorBattlenetDiscriminatedConnectorConfig",
    "ConnectorBattlenetDiscriminatedConnectorConfigConfig",
    "ConnectorBattlenetDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorBattlenetDiscriminatedConnectorConfigConnector",
    "ConnectorBattlenetDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorBattlenetDiscriminatedConnectorConfigConnectorScope",
    "ConnectorBattlenetDiscriminatedConnectorConfigIntegrations",
    "ConnectorBigcommerceDiscriminatedConnectorConfig",
    "ConnectorBigcommerceDiscriminatedConnectorConfigConfig",
    "ConnectorBigcommerceDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorBigcommerceDiscriminatedConnectorConfigConnector",
    "ConnectorBigcommerceDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorBigcommerceDiscriminatedConnectorConfigConnectorScope",
    "ConnectorBigcommerceDiscriminatedConnectorConfigIntegrations",
    "ConnectorBitbucketDiscriminatedConnectorConfig",
    "ConnectorBitbucketDiscriminatedConnectorConfigConfig",
    "ConnectorBitbucketDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorBitbucketDiscriminatedConnectorConfigConnector",
    "ConnectorBitbucketDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorBitbucketDiscriminatedConnectorConfigConnectorScope",
    "ConnectorBitbucketDiscriminatedConnectorConfigIntegrations",
    "ConnectorBitlyDiscriminatedConnectorConfig",
    "ConnectorBitlyDiscriminatedConnectorConfigConfig",
    "ConnectorBitlyDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorBitlyDiscriminatedConnectorConfigConnector",
    "ConnectorBitlyDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorBitlyDiscriminatedConnectorConfigConnectorScope",
    "ConnectorBitlyDiscriminatedConnectorConfigIntegrations",
    "ConnectorBlackbaudDiscriminatedConnectorConfig",
    "ConnectorBlackbaudDiscriminatedConnectorConfigConfig",
    "ConnectorBlackbaudDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorBlackbaudDiscriminatedConnectorConfigConnector",
    "ConnectorBlackbaudDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorBlackbaudDiscriminatedConnectorConfigConnectorScope",
    "ConnectorBlackbaudDiscriminatedConnectorConfigIntegrations",
    "ConnectorBoldsignDiscriminatedConnectorConfig",
    "ConnectorBoldsignDiscriminatedConnectorConfigConfig",
    "ConnectorBoldsignDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorBoldsignDiscriminatedConnectorConfigConnector",
    "ConnectorBoldsignDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorBoldsignDiscriminatedConnectorConfigConnectorScope",
    "ConnectorBoldsignDiscriminatedConnectorConfigIntegrations",
    "ConnectorBoxDiscriminatedConnectorConfig",
    "ConnectorBoxDiscriminatedConnectorConfigConfig",
    "ConnectorBoxDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorBoxDiscriminatedConnectorConfigConnector",
    "ConnectorBoxDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorBoxDiscriminatedConnectorConfigConnectorScope",
    "ConnectorBoxDiscriminatedConnectorConfigIntegrations",
    "ConnectorBraintreeDiscriminatedConnectorConfig",
    "ConnectorBraintreeDiscriminatedConnectorConfigConfig",
    "ConnectorBraintreeDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorBraintreeDiscriminatedConnectorConfigConnector",
    "ConnectorBraintreeDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorBraintreeDiscriminatedConnectorConfigConnectorScope",
    "ConnectorBraintreeDiscriminatedConnectorConfigIntegrations",
    "ConnectorCalendlyDiscriminatedConnectorConfig",
    "ConnectorCalendlyDiscriminatedConnectorConfigConfig",
    "ConnectorCalendlyDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorCalendlyDiscriminatedConnectorConfigConnector",
    "ConnectorCalendlyDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorCalendlyDiscriminatedConnectorConfigConnectorScope",
    "ConnectorCalendlyDiscriminatedConnectorConfigIntegrations",
    "ConnectorClickupDiscriminatedConnectorConfig",
    "ConnectorClickupDiscriminatedConnectorConfigConfig",
    "ConnectorClickupDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorClickupDiscriminatedConnectorConfigConnector",
    "ConnectorClickupDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorClickupDiscriminatedConnectorConfigConnectorScope",
    "ConnectorClickupDiscriminatedConnectorConfigIntegrations",
    "ConnectorCloseDiscriminatedConnectorConfig",
    "ConnectorCloseDiscriminatedConnectorConfigConfig",
    "ConnectorCloseDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorCloseDiscriminatedConnectorConfigConnector",
    "ConnectorCloseDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorCloseDiscriminatedConnectorConfigConnectorScope",
    "ConnectorCloseDiscriminatedConnectorConfigIntegrations",
    "ConnectorConfluenceDiscriminatedConnectorConfig",
    "ConnectorConfluenceDiscriminatedConnectorConfigConfig",
    "ConnectorConfluenceDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorConfluenceDiscriminatedConnectorConfigConnector",
    "ConnectorConfluenceDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorConfluenceDiscriminatedConnectorConfigConnectorScope",
    "ConnectorConfluenceDiscriminatedConnectorConfigIntegrations",
    "ConnectorContentfulDiscriminatedConnectorConfig",
    "ConnectorContentfulDiscriminatedConnectorConfigConfig",
    "ConnectorContentfulDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorContentfulDiscriminatedConnectorConfigConnector",
    "ConnectorContentfulDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorContentfulDiscriminatedConnectorConfigConnectorScope",
    "ConnectorContentfulDiscriminatedConnectorConfigIntegrations",
    "ConnectorContentstackDiscriminatedConnectorConfig",
    "ConnectorContentstackDiscriminatedConnectorConfigConfig",
    "ConnectorContentstackDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorContentstackDiscriminatedConnectorConfigConnector",
    "ConnectorContentstackDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorContentstackDiscriminatedConnectorConfigConnectorScope",
    "ConnectorContentstackDiscriminatedConnectorConfigIntegrations",
    "ConnectorCopperDiscriminatedConnectorConfig",
    "ConnectorCopperDiscriminatedConnectorConfigConfig",
    "ConnectorCopperDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorCopperDiscriminatedConnectorConfigConnector",
    "ConnectorCopperDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorCopperDiscriminatedConnectorConfigConnectorScope",
    "ConnectorCopperDiscriminatedConnectorConfigIntegrations",
    "ConnectorCorosDiscriminatedConnectorConfig",
    "ConnectorCorosDiscriminatedConnectorConfigConfig",
    "ConnectorCorosDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorCorosDiscriminatedConnectorConfigConnector",
    "ConnectorCorosDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorCorosDiscriminatedConnectorConfigConnectorScope",
    "ConnectorCorosDiscriminatedConnectorConfigIntegrations",
    "ConnectorDatevDiscriminatedConnectorConfig",
    "ConnectorDatevDiscriminatedConnectorConfigConfig",
    "ConnectorDatevDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorDatevDiscriminatedConnectorConfigConnector",
    "ConnectorDatevDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorDatevDiscriminatedConnectorConfigConnectorScope",
    "ConnectorDatevDiscriminatedConnectorConfigIntegrations",
    "ConnectorDeelDiscriminatedConnectorConfig",
    "ConnectorDeelDiscriminatedConnectorConfigConfig",
    "ConnectorDeelDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorDeelDiscriminatedConnectorConfigConnector",
    "ConnectorDeelDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorDeelDiscriminatedConnectorConfigConnectorScope",
    "ConnectorDeelDiscriminatedConnectorConfigIntegrations",
    "ConnectorDialpadDiscriminatedConnectorConfig",
    "ConnectorDialpadDiscriminatedConnectorConfigConfig",
    "ConnectorDialpadDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorDialpadDiscriminatedConnectorConfigConnector",
    "ConnectorDialpadDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorDialpadDiscriminatedConnectorConfigConnectorScope",
    "ConnectorDialpadDiscriminatedConnectorConfigIntegrations",
    "ConnectorDigitaloceanDiscriminatedConnectorConfig",
    "ConnectorDigitaloceanDiscriminatedConnectorConfigConfig",
    "ConnectorDigitaloceanDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorDigitaloceanDiscriminatedConnectorConfigConnector",
    "ConnectorDigitaloceanDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorDigitaloceanDiscriminatedConnectorConfigConnectorScope",
    "ConnectorDigitaloceanDiscriminatedConnectorConfigIntegrations",
    "ConnectorDiscordDiscriminatedConnectorConfig",
    "ConnectorDiscordDiscriminatedConnectorConfigConfig",
    "ConnectorDiscordDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorDiscordDiscriminatedConnectorConfigConnector",
    "ConnectorDiscordDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorDiscordDiscriminatedConnectorConfigConnectorScope",
    "ConnectorDiscordDiscriminatedConnectorConfigIntegrations",
    "ConnectorDocusignDiscriminatedConnectorConfig",
    "ConnectorDocusignDiscriminatedConnectorConfigConfig",
    "ConnectorDocusignDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorDocusignDiscriminatedConnectorConfigConnector",
    "ConnectorDocusignDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorDocusignDiscriminatedConnectorConfigConnectorScope",
    "ConnectorDocusignDiscriminatedConnectorConfigIntegrations",
    "ConnectorDropboxDiscriminatedConnectorConfig",
    "ConnectorDropboxDiscriminatedConnectorConfigConfig",
    "ConnectorDropboxDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorDropboxDiscriminatedConnectorConfigConnector",
    "ConnectorDropboxDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorDropboxDiscriminatedConnectorConfigConnectorScope",
    "ConnectorDropboxDiscriminatedConnectorConfigIntegrations",
    "ConnectorEbayDiscriminatedConnectorConfig",
    "ConnectorEbayDiscriminatedConnectorConfigConfig",
    "ConnectorEbayDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorEbayDiscriminatedConnectorConfigConnector",
    "ConnectorEbayDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorEbayDiscriminatedConnectorConfigConnectorScope",
    "ConnectorEbayDiscriminatedConnectorConfigIntegrations",
    "ConnectorEgnyteDiscriminatedConnectorConfig",
    "ConnectorEgnyteDiscriminatedConnectorConfigConfig",
    "ConnectorEgnyteDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorEgnyteDiscriminatedConnectorConfigConnector",
    "ConnectorEgnyteDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorEgnyteDiscriminatedConnectorConfigConnectorScope",
    "ConnectorEgnyteDiscriminatedConnectorConfigIntegrations",
    "ConnectorEnvoyDiscriminatedConnectorConfig",
    "ConnectorEnvoyDiscriminatedConnectorConfigConfig",
    "ConnectorEnvoyDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorEnvoyDiscriminatedConnectorConfigConnector",
    "ConnectorEnvoyDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorEnvoyDiscriminatedConnectorConfigConnectorScope",
    "ConnectorEnvoyDiscriminatedConnectorConfigIntegrations",
    "ConnectorEventbriteDiscriminatedConnectorConfig",
    "ConnectorEventbriteDiscriminatedConnectorConfigConfig",
    "ConnectorEventbriteDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorEventbriteDiscriminatedConnectorConfigConnector",
    "ConnectorEventbriteDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorEventbriteDiscriminatedConnectorConfigConnectorScope",
    "ConnectorEventbriteDiscriminatedConnectorConfigIntegrations",
    "ConnectorExistDiscriminatedConnectorConfig",
    "ConnectorExistDiscriminatedConnectorConfigConfig",
    "ConnectorExistDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorExistDiscriminatedConnectorConfigConnector",
    "ConnectorExistDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorExistDiscriminatedConnectorConfigConnectorScope",
    "ConnectorExistDiscriminatedConnectorConfigIntegrations",
    "ConnectorFacebookDiscriminatedConnectorConfig",
    "ConnectorFacebookDiscriminatedConnectorConfigConfig",
    "ConnectorFacebookDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorFacebookDiscriminatedConnectorConfigConnector",
    "ConnectorFacebookDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorFacebookDiscriminatedConnectorConfigConnectorScope",
    "ConnectorFacebookDiscriminatedConnectorConfigIntegrations",
    "ConnectorFactorialDiscriminatedConnectorConfig",
    "ConnectorFactorialDiscriminatedConnectorConfigConfig",
    "ConnectorFactorialDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorFactorialDiscriminatedConnectorConfigConnector",
    "ConnectorFactorialDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorFactorialDiscriminatedConnectorConfigConnectorScope",
    "ConnectorFactorialDiscriminatedConnectorConfigIntegrations",
    "ConnectorFigmaDiscriminatedConnectorConfig",
    "ConnectorFigmaDiscriminatedConnectorConfigConfig",
    "ConnectorFigmaDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorFigmaDiscriminatedConnectorConfigConnector",
    "ConnectorFigmaDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorFigmaDiscriminatedConnectorConfigConnectorScope",
    "ConnectorFigmaDiscriminatedConnectorConfigIntegrations",
    "ConnectorFitbitDiscriminatedConnectorConfig",
    "ConnectorFitbitDiscriminatedConnectorConfigConfig",
    "ConnectorFitbitDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorFitbitDiscriminatedConnectorConfigConnector",
    "ConnectorFitbitDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorFitbitDiscriminatedConnectorConfigConnectorScope",
    "ConnectorFitbitDiscriminatedConnectorConfigIntegrations",
    "ConnectorFortnoxDiscriminatedConnectorConfig",
    "ConnectorFortnoxDiscriminatedConnectorConfigConfig",
    "ConnectorFortnoxDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorFortnoxDiscriminatedConnectorConfigConnector",
    "ConnectorFortnoxDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorFortnoxDiscriminatedConnectorConfigConnectorScope",
    "ConnectorFortnoxDiscriminatedConnectorConfigIntegrations",
    "ConnectorFreshbooksDiscriminatedConnectorConfig",
    "ConnectorFreshbooksDiscriminatedConnectorConfigConfig",
    "ConnectorFreshbooksDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorFreshbooksDiscriminatedConnectorConfigConnector",
    "ConnectorFreshbooksDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorFreshbooksDiscriminatedConnectorConfigConnectorScope",
    "ConnectorFreshbooksDiscriminatedConnectorConfigIntegrations",
    "ConnectorFrontDiscriminatedConnectorConfig",
    "ConnectorFrontDiscriminatedConnectorConfigConfig",
    "ConnectorFrontDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorFrontDiscriminatedConnectorConfigConnector",
    "ConnectorFrontDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorFrontDiscriminatedConnectorConfigConnectorScope",
    "ConnectorFrontDiscriminatedConnectorConfigIntegrations",
    "ConnectorGitHubDiscriminatedConnectorConfig",
    "ConnectorGitHubDiscriminatedConnectorConfigConfig",
    "ConnectorGitHubDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorGitHubDiscriminatedConnectorConfigConnector",
    "ConnectorGitHubDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorGitHubDiscriminatedConnectorConfigConnectorScope",
    "ConnectorGitHubDiscriminatedConnectorConfigIntegrations",
    "ConnectorGitlabDiscriminatedConnectorConfig",
    "ConnectorGitlabDiscriminatedConnectorConfigConfig",
    "ConnectorGitlabDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorGitlabDiscriminatedConnectorConfigConnector",
    "ConnectorGitlabDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorGitlabDiscriminatedConnectorConfigConnectorScope",
    "ConnectorGitlabDiscriminatedConnectorConfigIntegrations",
    "ConnectorGongDiscriminatedConnectorConfig",
    "ConnectorGongDiscriminatedConnectorConfigConfig",
    "ConnectorGongDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorGongDiscriminatedConnectorConfigConnector",
    "ConnectorGongDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorGongDiscriminatedConnectorConfigConnectorScope",
    "ConnectorGongDiscriminatedConnectorConfigIntegrations",
    "ConnectorGoogleCalendarDiscriminatedConnectorConfig",
    "ConnectorGoogleCalendarDiscriminatedConnectorConfigConfig",
    "ConnectorGoogleCalendarDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorGoogleCalendarDiscriminatedConnectorConfigConnector",
    "ConnectorGoogleCalendarDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorGoogleCalendarDiscriminatedConnectorConfigConnectorScope",
    "ConnectorGoogleCalendarDiscriminatedConnectorConfigIntegrations",
    "ConnectorGoogleDocsDiscriminatedConnectorConfig",
    "ConnectorGoogleDocsDiscriminatedConnectorConfigConfig",
    "ConnectorGoogleDocsDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorGoogleDocsDiscriminatedConnectorConfigConnector",
    "ConnectorGoogleDocsDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorGoogleDocsDiscriminatedConnectorConfigConnectorScope",
    "ConnectorGoogleDocsDiscriminatedConnectorConfigIntegrations",
    "ConnectorGoogleDriveDiscriminatedConnectorConfig",
    "ConnectorGoogleDriveDiscriminatedConnectorConfigConfig",
    "ConnectorGoogleDriveDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorGoogleDriveDiscriminatedConnectorConfigConnector",
    "ConnectorGoogleDriveDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorGoogleDriveDiscriminatedConnectorConfigConnectorScope",
    "ConnectorGoogleDriveDiscriminatedConnectorConfigIntegrations",
    "ConnectorGoogleMailDiscriminatedConnectorConfig",
    "ConnectorGoogleMailDiscriminatedConnectorConfigConfig",
    "ConnectorGoogleMailDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorGoogleMailDiscriminatedConnectorConfigConnector",
    "ConnectorGoogleMailDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorGoogleMailDiscriminatedConnectorConfigConnectorScope",
    "ConnectorGoogleMailDiscriminatedConnectorConfigIntegrations",
    "ConnectorGoogleSheetDiscriminatedConnectorConfig",
    "ConnectorGoogleSheetDiscriminatedConnectorConfigConfig",
    "ConnectorGoogleSheetDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorGoogleSheetDiscriminatedConnectorConfigConnector",
    "ConnectorGoogleSheetDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorGoogleSheetDiscriminatedConnectorConfigConnectorScope",
    "ConnectorGoogleSheetDiscriminatedConnectorConfigIntegrations",
    "ConnectorGorgiasDiscriminatedConnectorConfig",
    "ConnectorGorgiasDiscriminatedConnectorConfigConfig",
    "ConnectorGorgiasDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorGorgiasDiscriminatedConnectorConfigConnector",
    "ConnectorGorgiasDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorGorgiasDiscriminatedConnectorConfigConnectorScope",
    "ConnectorGorgiasDiscriminatedConnectorConfigIntegrations",
    "ConnectorGrainDiscriminatedConnectorConfig",
    "ConnectorGrainDiscriminatedConnectorConfigConfig",
    "ConnectorGrainDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorGrainDiscriminatedConnectorConfigConnector",
    "ConnectorGrainDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorGrainDiscriminatedConnectorConfigConnectorScope",
    "ConnectorGrainDiscriminatedConnectorConfigIntegrations",
    "ConnectorGumroadDiscriminatedConnectorConfig",
    "ConnectorGumroadDiscriminatedConnectorConfigConfig",
    "ConnectorGumroadDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorGumroadDiscriminatedConnectorConfigConnector",
    "ConnectorGumroadDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorGumroadDiscriminatedConnectorConfigConnectorScope",
    "ConnectorGumroadDiscriminatedConnectorConfigIntegrations",
    "ConnectorGustoDiscriminatedConnectorConfig",
    "ConnectorGustoDiscriminatedConnectorConfigConfig",
    "ConnectorGustoDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorGustoDiscriminatedConnectorConfigConnector",
    "ConnectorGustoDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorGustoDiscriminatedConnectorConfigConnectorScope",
    "ConnectorGustoDiscriminatedConnectorConfigIntegrations",
    "ConnectorHarvestDiscriminatedConnectorConfig",
    "ConnectorHarvestDiscriminatedConnectorConfigConfig",
    "ConnectorHarvestDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorHarvestDiscriminatedConnectorConfigConnector",
    "ConnectorHarvestDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorHarvestDiscriminatedConnectorConfigConnectorScope",
    "ConnectorHarvestDiscriminatedConnectorConfigIntegrations",
    "ConnectorHighlevelDiscriminatedConnectorConfig",
    "ConnectorHighlevelDiscriminatedConnectorConfigConfig",
    "ConnectorHighlevelDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorHighlevelDiscriminatedConnectorConfigConnector",
    "ConnectorHighlevelDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorHighlevelDiscriminatedConnectorConfigConnectorScope",
    "ConnectorHighlevelDiscriminatedConnectorConfigIntegrations",
    "ConnectorHubspotDiscriminatedConnectorConfig",
    "ConnectorHubspotDiscriminatedConnectorConfigConfig",
    "ConnectorHubspotDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorHubspotDiscriminatedConnectorConfigConnector",
    "ConnectorHubspotDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorHubspotDiscriminatedConnectorConfigConnectorScope",
    "ConnectorHubspotDiscriminatedConnectorConfigIntegrations",
    "ConnectorInstagramDiscriminatedConnectorConfig",
    "ConnectorInstagramDiscriminatedConnectorConfigConfig",
    "ConnectorInstagramDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorInstagramDiscriminatedConnectorConfigConnector",
    "ConnectorInstagramDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorInstagramDiscriminatedConnectorConfigConnectorScope",
    "ConnectorInstagramDiscriminatedConnectorConfigIntegrations",
    "ConnectorIntercomDiscriminatedConnectorConfig",
    "ConnectorIntercomDiscriminatedConnectorConfigConfig",
    "ConnectorIntercomDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorIntercomDiscriminatedConnectorConfigConnector",
    "ConnectorIntercomDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorIntercomDiscriminatedConnectorConfigConnectorScope",
    "ConnectorIntercomDiscriminatedConnectorConfigIntegrations",
    "ConnectorJiraDiscriminatedConnectorConfig",
    "ConnectorJiraDiscriminatedConnectorConfigConfig",
    "ConnectorJiraDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorJiraDiscriminatedConnectorConfigConnector",
    "ConnectorJiraDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorJiraDiscriminatedConnectorConfigConnectorScope",
    "ConnectorJiraDiscriminatedConnectorConfigIntegrations",
    "ConnectorKeapDiscriminatedConnectorConfig",
    "ConnectorKeapDiscriminatedConnectorConfigConfig",
    "ConnectorKeapDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorKeapDiscriminatedConnectorConfigConnector",
    "ConnectorKeapDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorKeapDiscriminatedConnectorConfigConnectorScope",
    "ConnectorKeapDiscriminatedConnectorConfigIntegrations",
    "ConnectorLeverDiscriminatedConnectorConfig",
    "ConnectorLeverDiscriminatedConnectorConfigConfig",
    "ConnectorLeverDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorLeverDiscriminatedConnectorConfigConnector",
    "ConnectorLeverDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorLeverDiscriminatedConnectorConfigConnectorScope",
    "ConnectorLeverDiscriminatedConnectorConfigIntegrations",
    "ConnectorLinearDiscriminatedConnectorConfig",
    "ConnectorLinearDiscriminatedConnectorConfigConfig",
    "ConnectorLinearDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorLinearDiscriminatedConnectorConfigConnector",
    "ConnectorLinearDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorLinearDiscriminatedConnectorConfigConnectorScope",
    "ConnectorLinearDiscriminatedConnectorConfigIntegrations",
    "ConnectorLinkedinDiscriminatedConnectorConfig",
    "ConnectorLinkedinDiscriminatedConnectorConfigConfig",
    "ConnectorLinkedinDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorLinkedinDiscriminatedConnectorConfigConnector",
    "ConnectorLinkedinDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorLinkedinDiscriminatedConnectorConfigConnectorScope",
    "ConnectorLinkedinDiscriminatedConnectorConfigIntegrations",
    "ConnectorLinkhutDiscriminatedConnectorConfig",
    "ConnectorLinkhutDiscriminatedConnectorConfigConfig",
    "ConnectorLinkhutDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorLinkhutDiscriminatedConnectorConfigConnector",
    "ConnectorLinkhutDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorLinkhutDiscriminatedConnectorConfigConnectorScope",
    "ConnectorLinkhutDiscriminatedConnectorConfigIntegrations",
    "ConnectorMailchimpDiscriminatedConnectorConfig",
    "ConnectorMailchimpDiscriminatedConnectorConfigConfig",
    "ConnectorMailchimpDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorMailchimpDiscriminatedConnectorConfigConnector",
    "ConnectorMailchimpDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorMailchimpDiscriminatedConnectorConfigConnectorScope",
    "ConnectorMailchimpDiscriminatedConnectorConfigIntegrations",
    "ConnectorMiroDiscriminatedConnectorConfig",
    "ConnectorMiroDiscriminatedConnectorConfigConfig",
    "ConnectorMiroDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorMiroDiscriminatedConnectorConfigConnector",
    "ConnectorMiroDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorMiroDiscriminatedConnectorConfigConnectorScope",
    "ConnectorMiroDiscriminatedConnectorConfigIntegrations",
    "ConnectorMondayDiscriminatedConnectorConfig",
    "ConnectorMondayDiscriminatedConnectorConfigConfig",
    "ConnectorMondayDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorMondayDiscriminatedConnectorConfigConnector",
    "ConnectorMondayDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorMondayDiscriminatedConnectorConfigConnectorScope",
    "ConnectorMondayDiscriminatedConnectorConfigIntegrations",
    "ConnectorMuralDiscriminatedConnectorConfig",
    "ConnectorMuralDiscriminatedConnectorConfigConfig",
    "ConnectorMuralDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorMuralDiscriminatedConnectorConfigConnector",
    "ConnectorMuralDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorMuralDiscriminatedConnectorConfigConnectorScope",
    "ConnectorMuralDiscriminatedConnectorConfigIntegrations",
    "ConnectorNamelyDiscriminatedConnectorConfig",
    "ConnectorNamelyDiscriminatedConnectorConfigConfig",
    "ConnectorNamelyDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorNamelyDiscriminatedConnectorConfigConnector",
    "ConnectorNamelyDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorNamelyDiscriminatedConnectorConfigConnectorScope",
    "ConnectorNamelyDiscriminatedConnectorConfigIntegrations",
    "ConnectorNationbuilderDiscriminatedConnectorConfig",
    "ConnectorNationbuilderDiscriminatedConnectorConfigConfig",
    "ConnectorNationbuilderDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorNationbuilderDiscriminatedConnectorConfigConnector",
    "ConnectorNationbuilderDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorNationbuilderDiscriminatedConnectorConfigConnectorScope",
    "ConnectorNationbuilderDiscriminatedConnectorConfigIntegrations",
    "ConnectorNetsuiteDiscriminatedConnectorConfig",
    "ConnectorNetsuiteDiscriminatedConnectorConfigConfig",
    "ConnectorNetsuiteDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorNetsuiteDiscriminatedConnectorConfigConnector",
    "ConnectorNetsuiteDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorNetsuiteDiscriminatedConnectorConfigConnectorScope",
    "ConnectorNetsuiteDiscriminatedConnectorConfigIntegrations",
    "ConnectorNotionDiscriminatedConnectorConfig",
    "ConnectorNotionDiscriminatedConnectorConfigConfig",
    "ConnectorNotionDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorNotionDiscriminatedConnectorConfigConnector",
    "ConnectorNotionDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorNotionDiscriminatedConnectorConfigConnectorScope",
    "ConnectorNotionDiscriminatedConnectorConfigIntegrations",
    "ConnectorOdooDiscriminatedConnectorConfig",
    "ConnectorOdooDiscriminatedConnectorConfigConfig",
    "ConnectorOdooDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorOdooDiscriminatedConnectorConfigConnector",
    "ConnectorOdooDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorOdooDiscriminatedConnectorConfigConnectorScope",
    "ConnectorOdooDiscriminatedConnectorConfigIntegrations",
    "ConnectorOktaDiscriminatedConnectorConfig",
    "ConnectorOktaDiscriminatedConnectorConfigConfig",
    "ConnectorOktaDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorOktaDiscriminatedConnectorConfigConnector",
    "ConnectorOktaDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorOktaDiscriminatedConnectorConfigConnectorScope",
    "ConnectorOktaDiscriminatedConnectorConfigIntegrations",
    "ConnectorOsuDiscriminatedConnectorConfig",
    "ConnectorOsuDiscriminatedConnectorConfigConfig",
    "ConnectorOsuDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorOsuDiscriminatedConnectorConfigConnector",
    "ConnectorOsuDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorOsuDiscriminatedConnectorConfigConnectorScope",
    "ConnectorOsuDiscriminatedConnectorConfigIntegrations",
    "ConnectorOuraDiscriminatedConnectorConfig",
    "ConnectorOuraDiscriminatedConnectorConfigConfig",
    "ConnectorOuraDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorOuraDiscriminatedConnectorConfigConnector",
    "ConnectorOuraDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorOuraDiscriminatedConnectorConfigConnectorScope",
    "ConnectorOuraDiscriminatedConnectorConfigIntegrations",
    "ConnectorOutreachDiscriminatedConnectorConfig",
    "ConnectorOutreachDiscriminatedConnectorConfigConfig",
    "ConnectorOutreachDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorOutreachDiscriminatedConnectorConfigConnector",
    "ConnectorOutreachDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorOutreachDiscriminatedConnectorConfigConnectorScope",
    "ConnectorOutreachDiscriminatedConnectorConfigIntegrations",
    "ConnectorPagerdutyDiscriminatedConnectorConfig",
    "ConnectorPagerdutyDiscriminatedConnectorConfigConfig",
    "ConnectorPagerdutyDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorPagerdutyDiscriminatedConnectorConfigConnector",
    "ConnectorPagerdutyDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorPagerdutyDiscriminatedConnectorConfigConnectorScope",
    "ConnectorPagerdutyDiscriminatedConnectorConfigIntegrations",
    "ConnectorPandadocDiscriminatedConnectorConfig",
    "ConnectorPandadocDiscriminatedConnectorConfigConfig",
    "ConnectorPandadocDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorPandadocDiscriminatedConnectorConfigConnector",
    "ConnectorPandadocDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorPandadocDiscriminatedConnectorConfigConnectorScope",
    "ConnectorPandadocDiscriminatedConnectorConfigIntegrations",
    "ConnectorPayfitDiscriminatedConnectorConfig",
    "ConnectorPayfitDiscriminatedConnectorConfigConfig",
    "ConnectorPayfitDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorPayfitDiscriminatedConnectorConfigConnector",
    "ConnectorPayfitDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorPayfitDiscriminatedConnectorConfigConnectorScope",
    "ConnectorPayfitDiscriminatedConnectorConfigIntegrations",
    "ConnectorPaypalDiscriminatedConnectorConfig",
    "ConnectorPaypalDiscriminatedConnectorConfigConfig",
    "ConnectorPaypalDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorPaypalDiscriminatedConnectorConfigConnector",
    "ConnectorPaypalDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorPaypalDiscriminatedConnectorConfigConnectorScope",
    "ConnectorPaypalDiscriminatedConnectorConfigIntegrations",
    "ConnectorPennylaneDiscriminatedConnectorConfig",
    "ConnectorPennylaneDiscriminatedConnectorConfigConfig",
    "ConnectorPennylaneDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorPennylaneDiscriminatedConnectorConfigConnector",
    "ConnectorPennylaneDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorPennylaneDiscriminatedConnectorConfigConnectorScope",
    "ConnectorPennylaneDiscriminatedConnectorConfigIntegrations",
    "ConnectorPinterestDiscriminatedConnectorConfig",
    "ConnectorPinterestDiscriminatedConnectorConfigConfig",
    "ConnectorPinterestDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorPinterestDiscriminatedConnectorConfigConnector",
    "ConnectorPinterestDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorPinterestDiscriminatedConnectorConfigConnectorScope",
    "ConnectorPinterestDiscriminatedConnectorConfigIntegrations",
    "ConnectorPipedriveDiscriminatedConnectorConfig",
    "ConnectorPipedriveDiscriminatedConnectorConfigConfig",
    "ConnectorPipedriveDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorPipedriveDiscriminatedConnectorConfigConnector",
    "ConnectorPipedriveDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorPipedriveDiscriminatedConnectorConfigConnectorScope",
    "ConnectorPipedriveDiscriminatedConnectorConfigIntegrations",
    "ConnectorPodiumDiscriminatedConnectorConfig",
    "ConnectorPodiumDiscriminatedConnectorConfigConfig",
    "ConnectorPodiumDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorPodiumDiscriminatedConnectorConfigConnector",
    "ConnectorPodiumDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorPodiumDiscriminatedConnectorConfigConnectorScope",
    "ConnectorPodiumDiscriminatedConnectorConfigIntegrations",
    "ConnectorProductboardDiscriminatedConnectorConfig",
    "ConnectorProductboardDiscriminatedConnectorConfigConfig",
    "ConnectorProductboardDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorProductboardDiscriminatedConnectorConfigConnector",
    "ConnectorProductboardDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorProductboardDiscriminatedConnectorConfigConnectorScope",
    "ConnectorProductboardDiscriminatedConnectorConfigIntegrations",
    "ConnectorQualtricsDiscriminatedConnectorConfig",
    "ConnectorQualtricsDiscriminatedConnectorConfigConfig",
    "ConnectorQualtricsDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorQualtricsDiscriminatedConnectorConfigConnector",
    "ConnectorQualtricsDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorQualtricsDiscriminatedConnectorConfigConnectorScope",
    "ConnectorQualtricsDiscriminatedConnectorConfigIntegrations",
    "ConnectorQuickbooksDiscriminatedConnectorConfig",
    "ConnectorQuickbooksDiscriminatedConnectorConfigConfig",
    "ConnectorQuickbooksDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorQuickbooksDiscriminatedConnectorConfigConnector",
    "ConnectorQuickbooksDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorQuickbooksDiscriminatedConnectorConfigConnectorScope",
    "ConnectorQuickbooksDiscriminatedConnectorConfigIntegrations",
    "ConnectorRedditDiscriminatedConnectorConfig",
    "ConnectorRedditDiscriminatedConnectorConfigConfig",
    "ConnectorRedditDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorRedditDiscriminatedConnectorConfigConnector",
    "ConnectorRedditDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorRedditDiscriminatedConnectorConfigConnectorScope",
    "ConnectorRedditDiscriminatedConnectorConfigIntegrations",
    "ConnectorSageDiscriminatedConnectorConfig",
    "ConnectorSageDiscriminatedConnectorConfigConfig",
    "ConnectorSageDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorSageDiscriminatedConnectorConfigConnector",
    "ConnectorSageDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorSageDiscriminatedConnectorConfigConnectorScope",
    "ConnectorSageDiscriminatedConnectorConfigIntegrations",
    "ConnectorSalesforceDiscriminatedConnectorConfig",
    "ConnectorSalesforceDiscriminatedConnectorConfigConfig",
    "ConnectorSalesforceDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorSalesforceDiscriminatedConnectorConfigConnector",
    "ConnectorSalesforceDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorSalesforceDiscriminatedConnectorConfigConnectorScope",
    "ConnectorSalesforceDiscriminatedConnectorConfigIntegrations",
    "ConnectorSalesloftDiscriminatedConnectorConfig",
    "ConnectorSalesloftDiscriminatedConnectorConfigConfig",
    "ConnectorSalesloftDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorSalesloftDiscriminatedConnectorConfigConnector",
    "ConnectorSalesloftDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorSalesloftDiscriminatedConnectorConfigConnectorScope",
    "ConnectorSalesloftDiscriminatedConnectorConfigIntegrations",
    "ConnectorSegmentDiscriminatedConnectorConfig",
    "ConnectorSegmentDiscriminatedConnectorConfigConfig",
    "ConnectorSegmentDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorSegmentDiscriminatedConnectorConfigConnector",
    "ConnectorSegmentDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorSegmentDiscriminatedConnectorConfigConnectorScope",
    "ConnectorSegmentDiscriminatedConnectorConfigIntegrations",
    "ConnectorServicem8DiscriminatedConnectorConfig",
    "ConnectorServicem8DiscriminatedConnectorConfigConfig",
    "ConnectorServicem8DiscriminatedConnectorConfigConfigOAuth",
    "ConnectorServicem8DiscriminatedConnectorConfigConnector",
    "ConnectorServicem8DiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorServicem8DiscriminatedConnectorConfigConnectorScope",
    "ConnectorServicem8DiscriminatedConnectorConfigIntegrations",
    "ConnectorServicenowDiscriminatedConnectorConfig",
    "ConnectorServicenowDiscriminatedConnectorConfigConfig",
    "ConnectorServicenowDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorServicenowDiscriminatedConnectorConfigConnector",
    "ConnectorServicenowDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorServicenowDiscriminatedConnectorConfigConnectorScope",
    "ConnectorServicenowDiscriminatedConnectorConfigIntegrations",
    "ConnectorSharepointDiscriminatedConnectorConfig",
    "ConnectorSharepointDiscriminatedConnectorConfigConfig",
    "ConnectorSharepointDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorSharepointDiscriminatedConnectorConfigConnector",
    "ConnectorSharepointDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorSharepointDiscriminatedConnectorConfigConnectorScope",
    "ConnectorSharepointDiscriminatedConnectorConfigIntegrations",
    "ConnectorShopifyDiscriminatedConnectorConfig",
    "ConnectorShopifyDiscriminatedConnectorConfigConfig",
    "ConnectorShopifyDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorShopifyDiscriminatedConnectorConfigConnector",
    "ConnectorShopifyDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorShopifyDiscriminatedConnectorConfigConnectorScope",
    "ConnectorShopifyDiscriminatedConnectorConfigIntegrations",
    "ConnectorSignnowDiscriminatedConnectorConfig",
    "ConnectorSignnowDiscriminatedConnectorConfigConfig",
    "ConnectorSignnowDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorSignnowDiscriminatedConnectorConfigConnector",
    "ConnectorSignnowDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorSignnowDiscriminatedConnectorConfigConnectorScope",
    "ConnectorSignnowDiscriminatedConnectorConfigIntegrations",
    "ConnectorSlackDiscriminatedConnectorConfig",
    "ConnectorSlackDiscriminatedConnectorConfigConfig",
    "ConnectorSlackDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorSlackDiscriminatedConnectorConfigConnector",
    "ConnectorSlackDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorSlackDiscriminatedConnectorConfigConnectorScope",
    "ConnectorSlackDiscriminatedConnectorConfigIntegrations",
    "ConnectorSmartsheetDiscriminatedConnectorConfig",
    "ConnectorSmartsheetDiscriminatedConnectorConfigConfig",
    "ConnectorSmartsheetDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorSmartsheetDiscriminatedConnectorConfigConnector",
    "ConnectorSmartsheetDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorSmartsheetDiscriminatedConnectorConfigConnectorScope",
    "ConnectorSmartsheetDiscriminatedConnectorConfigIntegrations",
    "ConnectorSnowflakeDiscriminatedConnectorConfig",
    "ConnectorSnowflakeDiscriminatedConnectorConfigConfig",
    "ConnectorSnowflakeDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorSnowflakeDiscriminatedConnectorConfigConnector",
    "ConnectorSnowflakeDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorSnowflakeDiscriminatedConnectorConfigConnectorScope",
    "ConnectorSnowflakeDiscriminatedConnectorConfigIntegrations",
    "ConnectorSpotifyDiscriminatedConnectorConfig",
    "ConnectorSpotifyDiscriminatedConnectorConfigConfig",
    "ConnectorSpotifyDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorSpotifyDiscriminatedConnectorConfigConnector",
    "ConnectorSpotifyDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorSpotifyDiscriminatedConnectorConfigConnectorScope",
    "ConnectorSpotifyDiscriminatedConnectorConfigIntegrations",
    "ConnectorSquarespaceDiscriminatedConnectorConfig",
    "ConnectorSquarespaceDiscriminatedConnectorConfigConfig",
    "ConnectorSquarespaceDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorSquarespaceDiscriminatedConnectorConfigConnector",
    "ConnectorSquarespaceDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorSquarespaceDiscriminatedConnectorConfigConnectorScope",
    "ConnectorSquarespaceDiscriminatedConnectorConfigIntegrations",
    "ConnectorSquareupDiscriminatedConnectorConfig",
    "ConnectorSquareupDiscriminatedConnectorConfigConfig",
    "ConnectorSquareupDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorSquareupDiscriminatedConnectorConfigConnector",
    "ConnectorSquareupDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorSquareupDiscriminatedConnectorConfigConnectorScope",
    "ConnectorSquareupDiscriminatedConnectorConfigIntegrations",
    "ConnectorStackexchangeDiscriminatedConnectorConfig",
    "ConnectorStackexchangeDiscriminatedConnectorConfigConfig",
    "ConnectorStackexchangeDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorStackexchangeDiscriminatedConnectorConfigConnector",
    "ConnectorStackexchangeDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorStackexchangeDiscriminatedConnectorConfigConnectorScope",
    "ConnectorStackexchangeDiscriminatedConnectorConfigIntegrations",
    "ConnectorStravaDiscriminatedConnectorConfig",
    "ConnectorStravaDiscriminatedConnectorConfigConfig",
    "ConnectorStravaDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorStravaDiscriminatedConnectorConfigConnector",
    "ConnectorStravaDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorStravaDiscriminatedConnectorConfigConnectorScope",
    "ConnectorStravaDiscriminatedConnectorConfigIntegrations",
    "ConnectorTeamworkDiscriminatedConnectorConfig",
    "ConnectorTeamworkDiscriminatedConnectorConfigConfig",
    "ConnectorTeamworkDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorTeamworkDiscriminatedConnectorConfigConnector",
    "ConnectorTeamworkDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorTeamworkDiscriminatedConnectorConfigConnectorScope",
    "ConnectorTeamworkDiscriminatedConnectorConfigIntegrations",
    "ConnectorTicktickDiscriminatedConnectorConfig",
    "ConnectorTicktickDiscriminatedConnectorConfigConfig",
    "ConnectorTicktickDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorTicktickDiscriminatedConnectorConfigConnector",
    "ConnectorTicktickDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorTicktickDiscriminatedConnectorConfigConnectorScope",
    "ConnectorTicktickDiscriminatedConnectorConfigIntegrations",
    "ConnectorTimelyDiscriminatedConnectorConfig",
    "ConnectorTimelyDiscriminatedConnectorConfigConfig",
    "ConnectorTimelyDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorTimelyDiscriminatedConnectorConfigConnector",
    "ConnectorTimelyDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorTimelyDiscriminatedConnectorConfigConnectorScope",
    "ConnectorTimelyDiscriminatedConnectorConfigIntegrations",
    "ConnectorTodoistDiscriminatedConnectorConfig",
    "ConnectorTodoistDiscriminatedConnectorConfigConfig",
    "ConnectorTodoistDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorTodoistDiscriminatedConnectorConfigConnector",
    "ConnectorTodoistDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorTodoistDiscriminatedConnectorConfigConnectorScope",
    "ConnectorTodoistDiscriminatedConnectorConfigIntegrations",
    "ConnectorTremendousDiscriminatedConnectorConfig",
    "ConnectorTremendousDiscriminatedConnectorConfigConfig",
    "ConnectorTremendousDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorTremendousDiscriminatedConnectorConfigConnector",
    "ConnectorTremendousDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorTremendousDiscriminatedConnectorConfigConnectorScope",
    "ConnectorTremendousDiscriminatedConnectorConfigIntegrations",
    "ConnectorTsheetsteamDiscriminatedConnectorConfig",
    "ConnectorTsheetsteamDiscriminatedConnectorConfigConfig",
    "ConnectorTsheetsteamDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorTsheetsteamDiscriminatedConnectorConfigConnector",
    "ConnectorTsheetsteamDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorTsheetsteamDiscriminatedConnectorConfigConnectorScope",
    "ConnectorTsheetsteamDiscriminatedConnectorConfigIntegrations",
    "ConnectorTumblrDiscriminatedConnectorConfig",
    "ConnectorTumblrDiscriminatedConnectorConfigConfig",
    "ConnectorTumblrDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorTumblrDiscriminatedConnectorConfigConnector",
    "ConnectorTumblrDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorTumblrDiscriminatedConnectorConfigConnectorScope",
    "ConnectorTumblrDiscriminatedConnectorConfigIntegrations",
    "ConnectorTwinfieldDiscriminatedConnectorConfig",
    "ConnectorTwinfieldDiscriminatedConnectorConfigConfig",
    "ConnectorTwinfieldDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorTwinfieldDiscriminatedConnectorConfigConnector",
    "ConnectorTwinfieldDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorTwinfieldDiscriminatedConnectorConfigConnectorScope",
    "ConnectorTwinfieldDiscriminatedConnectorConfigIntegrations",
    "ConnectorTwitchDiscriminatedConnectorConfig",
    "ConnectorTwitchDiscriminatedConnectorConfigConfig",
    "ConnectorTwitchDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorTwitchDiscriminatedConnectorConfigConnector",
    "ConnectorTwitchDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorTwitchDiscriminatedConnectorConfigConnectorScope",
    "ConnectorTwitchDiscriminatedConnectorConfigIntegrations",
    "ConnectorTwitterDiscriminatedConnectorConfig",
    "ConnectorTwitterDiscriminatedConnectorConfigConfig",
    "ConnectorTwitterDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorTwitterDiscriminatedConnectorConfigConnector",
    "ConnectorTwitterDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorTwitterDiscriminatedConnectorConfigConnectorScope",
    "ConnectorTwitterDiscriminatedConnectorConfigIntegrations",
    "ConnectorTypeformDiscriminatedConnectorConfig",
    "ConnectorTypeformDiscriminatedConnectorConfigConfig",
    "ConnectorTypeformDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorTypeformDiscriminatedConnectorConfigConnector",
    "ConnectorTypeformDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorTypeformDiscriminatedConnectorConfigConnectorScope",
    "ConnectorTypeformDiscriminatedConnectorConfigIntegrations",
    "ConnectorUberDiscriminatedConnectorConfig",
    "ConnectorUberDiscriminatedConnectorConfigConfig",
    "ConnectorUberDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorUberDiscriminatedConnectorConfigConnector",
    "ConnectorUberDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorUberDiscriminatedConnectorConfigConnectorScope",
    "ConnectorUberDiscriminatedConnectorConfigIntegrations",
    "ConnectorVimeoDiscriminatedConnectorConfig",
    "ConnectorVimeoDiscriminatedConnectorConfigConfig",
    "ConnectorVimeoDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorVimeoDiscriminatedConnectorConfigConnector",
    "ConnectorVimeoDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorVimeoDiscriminatedConnectorConfigConnectorScope",
    "ConnectorVimeoDiscriminatedConnectorConfigIntegrations",
    "ConnectorWakatimeDiscriminatedConnectorConfig",
    "ConnectorWakatimeDiscriminatedConnectorConfigConfig",
    "ConnectorWakatimeDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorWakatimeDiscriminatedConnectorConfigConnector",
    "ConnectorWakatimeDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorWakatimeDiscriminatedConnectorConfigConnectorScope",
    "ConnectorWakatimeDiscriminatedConnectorConfigIntegrations",
    "ConnectorWealthboxDiscriminatedConnectorConfig",
    "ConnectorWealthboxDiscriminatedConnectorConfigConfig",
    "ConnectorWealthboxDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorWealthboxDiscriminatedConnectorConfigConnector",
    "ConnectorWealthboxDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorWealthboxDiscriminatedConnectorConfigConnectorScope",
    "ConnectorWealthboxDiscriminatedConnectorConfigIntegrations",
    "ConnectorWebflowDiscriminatedConnectorConfig",
    "ConnectorWebflowDiscriminatedConnectorConfigConfig",
    "ConnectorWebflowDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorWebflowDiscriminatedConnectorConfigConnector",
    "ConnectorWebflowDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorWebflowDiscriminatedConnectorConfigConnectorScope",
    "ConnectorWebflowDiscriminatedConnectorConfigIntegrations",
    "ConnectorWhoopDiscriminatedConnectorConfig",
    "ConnectorWhoopDiscriminatedConnectorConfigConfig",
    "ConnectorWhoopDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorWhoopDiscriminatedConnectorConfigConnector",
    "ConnectorWhoopDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorWhoopDiscriminatedConnectorConfigConnectorScope",
    "ConnectorWhoopDiscriminatedConnectorConfigIntegrations",
    "ConnectorWordpressDiscriminatedConnectorConfig",
    "ConnectorWordpressDiscriminatedConnectorConfigConfig",
    "ConnectorWordpressDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorWordpressDiscriminatedConnectorConfigConnector",
    "ConnectorWordpressDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorWordpressDiscriminatedConnectorConfigConnectorScope",
    "ConnectorWordpressDiscriminatedConnectorConfigIntegrations",
    "ConnectorWrikeDiscriminatedConnectorConfig",
    "ConnectorWrikeDiscriminatedConnectorConfigConfig",
    "ConnectorWrikeDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorWrikeDiscriminatedConnectorConfigConnector",
    "ConnectorWrikeDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorWrikeDiscriminatedConnectorConfigConnectorScope",
    "ConnectorWrikeDiscriminatedConnectorConfigIntegrations",
    "ConnectorXeroDiscriminatedConnectorConfig",
    "ConnectorXeroDiscriminatedConnectorConfigConfig",
    "ConnectorXeroDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorXeroDiscriminatedConnectorConfigConnector",
    "ConnectorXeroDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorXeroDiscriminatedConnectorConfigConnectorScope",
    "ConnectorXeroDiscriminatedConnectorConfigIntegrations",
    "ConnectorYahooDiscriminatedConnectorConfig",
    "ConnectorYahooDiscriminatedConnectorConfigConfig",
    "ConnectorYahooDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorYahooDiscriminatedConnectorConfigConnector",
    "ConnectorYahooDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorYahooDiscriminatedConnectorConfigConnectorScope",
    "ConnectorYahooDiscriminatedConnectorConfigIntegrations",
    "ConnectorYandexDiscriminatedConnectorConfig",
    "ConnectorYandexDiscriminatedConnectorConfigConfig",
    "ConnectorYandexDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorYandexDiscriminatedConnectorConfigConnector",
    "ConnectorYandexDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorYandexDiscriminatedConnectorConfigConnectorScope",
    "ConnectorYandexDiscriminatedConnectorConfigIntegrations",
    "ConnectorZapierDiscriminatedConnectorConfig",
    "ConnectorZapierDiscriminatedConnectorConfigConfig",
    "ConnectorZapierDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorZapierDiscriminatedConnectorConfigConnector",
    "ConnectorZapierDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorZapierDiscriminatedConnectorConfigConnectorScope",
    "ConnectorZapierDiscriminatedConnectorConfigIntegrations",
    "ConnectorZendeskDiscriminatedConnectorConfig",
    "ConnectorZendeskDiscriminatedConnectorConfigConfig",
    "ConnectorZendeskDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorZendeskDiscriminatedConnectorConfigConnector",
    "ConnectorZendeskDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorZendeskDiscriminatedConnectorConfigConnectorScope",
    "ConnectorZendeskDiscriminatedConnectorConfigIntegrations",
    "ConnectorZenefitsDiscriminatedConnectorConfig",
    "ConnectorZenefitsDiscriminatedConnectorConfigConfig",
    "ConnectorZenefitsDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorZenefitsDiscriminatedConnectorConfigConnector",
    "ConnectorZenefitsDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorZenefitsDiscriminatedConnectorConfigConnectorScope",
    "ConnectorZenefitsDiscriminatedConnectorConfigIntegrations",
    "ConnectorZohoDeskDiscriminatedConnectorConfig",
    "ConnectorZohoDeskDiscriminatedConnectorConfigConfig",
    "ConnectorZohoDeskDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorZohoDeskDiscriminatedConnectorConfigConnector",
    "ConnectorZohoDeskDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorZohoDeskDiscriminatedConnectorConfigConnectorScope",
    "ConnectorZohoDeskDiscriminatedConnectorConfigIntegrations",
    "ConnectorZohoDiscriminatedConnectorConfig",
    "ConnectorZohoDiscriminatedConnectorConfigConfig",
    "ConnectorZohoDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorZohoDiscriminatedConnectorConfigConnector",
    "ConnectorZohoDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorZohoDiscriminatedConnectorConfigConnectorScope",
    "ConnectorZohoDiscriminatedConnectorConfigIntegrations",
    "ConnectorZoomDiscriminatedConnectorConfig",
    "ConnectorZoomDiscriminatedConnectorConfigConfig",
    "ConnectorZoomDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorZoomDiscriminatedConnectorConfigConnector",
    "ConnectorZoomDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorZoomDiscriminatedConnectorConfigConnectorScope",
    "ConnectorZoomDiscriminatedConnectorConfigIntegrations",
    "ConnectorAirtableDiscriminatedConnectorConfig",
    "ConnectorAirtableDiscriminatedConnectorConfigConnector",
    "ConnectorAirtableDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorAirtableDiscriminatedConnectorConfigConnectorScope",
    "ConnectorAirtableDiscriminatedConnectorConfigIntegrations",
    "ConnectorApolloDiscriminatedConnectorConfig",
    "ConnectorApolloDiscriminatedConnectorConfigConnector",
    "ConnectorApolloDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorApolloDiscriminatedConnectorConfigConnectorScope",
    "ConnectorApolloDiscriminatedConnectorConfigIntegrations",
    "ConnectorBrexDiscriminatedConnectorConfig",
    "ConnectorBrexDiscriminatedConnectorConfigConfig",
    "ConnectorBrexDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorBrexDiscriminatedConnectorConfigConnector",
    "ConnectorBrexDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorBrexDiscriminatedConnectorConfigConnectorScope",
    "ConnectorBrexDiscriminatedConnectorConfigIntegrations",
    "ConnectorCodaDiscriminatedConnectorConfig",
    "ConnectorCodaDiscriminatedConnectorConfigConnector",
    "ConnectorCodaDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorCodaDiscriminatedConnectorConfigConnectorScope",
    "ConnectorCodaDiscriminatedConnectorConfigIntegrations",
    "ConnectorFinchDiscriminatedConnectorConfig",
    "ConnectorFinchDiscriminatedConnectorConfigConfig",
    "ConnectorFinchDiscriminatedConnectorConfigConnector",
    "ConnectorFinchDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorFinchDiscriminatedConnectorConfigConnectorScope",
    "ConnectorFinchDiscriminatedConnectorConfigIntegrations",
    "ConnectorFirebaseDiscriminatedConnectorConfig",
    "ConnectorFirebaseDiscriminatedConnectorConfigConnector",
    "ConnectorFirebaseDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorFirebaseDiscriminatedConnectorConfigConnectorScope",
    "ConnectorFirebaseDiscriminatedConnectorConfigIntegrations",
    "ConnectorForeceiptDiscriminatedConnectorConfig",
    "ConnectorForeceiptDiscriminatedConnectorConfigConnector",
    "ConnectorForeceiptDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorForeceiptDiscriminatedConnectorConfigConnectorScope",
    "ConnectorForeceiptDiscriminatedConnectorConfigIntegrations",
    "ConnectorGreenhouseDiscriminatedConnectorConfig",
    "ConnectorGreenhouseDiscriminatedConnectorConfigConnector",
    "ConnectorGreenhouseDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorGreenhouseDiscriminatedConnectorConfigConnectorScope",
    "ConnectorGreenhouseDiscriminatedConnectorConfigIntegrations",
    "ConnectorHeronDiscriminatedConnectorConfig",
    "ConnectorHeronDiscriminatedConnectorConfigConfig",
    "ConnectorHeronDiscriminatedConnectorConfigConnector",
    "ConnectorHeronDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorHeronDiscriminatedConnectorConfigConnectorScope",
    "ConnectorHeronDiscriminatedConnectorConfigIntegrations",
    "ConnectorLunchmoneyDiscriminatedConnectorConfig",
    "ConnectorLunchmoneyDiscriminatedConnectorConfigConfig",
    "ConnectorLunchmoneyDiscriminatedConnectorConfigConnector",
    "ConnectorLunchmoneyDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorLunchmoneyDiscriminatedConnectorConfigConnectorScope",
    "ConnectorLunchmoneyDiscriminatedConnectorConfigIntegrations",
    "ConnectorMercuryDiscriminatedConnectorConfig",
    "ConnectorMercuryDiscriminatedConnectorConfigConfig",
    "ConnectorMercuryDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorMercuryDiscriminatedConnectorConfigConnector",
    "ConnectorMercuryDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorMercuryDiscriminatedConnectorConfigConnectorScope",
    "ConnectorMercuryDiscriminatedConnectorConfigIntegrations",
    "ConnectorMergeDiscriminatedConnectorConfig",
    "ConnectorMergeDiscriminatedConnectorConfigConfig",
    "ConnectorMergeDiscriminatedConnectorConfigConnector",
    "ConnectorMergeDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorMergeDiscriminatedConnectorConfigConnectorScope",
    "ConnectorMergeDiscriminatedConnectorConfigIntegrations",
    "ConnectorMootaDiscriminatedConnectorConfig",
    "ConnectorMootaDiscriminatedConnectorConfigConfig",
    "ConnectorMootaDiscriminatedConnectorConfigConnector",
    "ConnectorMootaDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorMootaDiscriminatedConnectorConfigConnectorScope",
    "ConnectorMootaDiscriminatedConnectorConfigIntegrations",
    "ConnectorOnebrickDiscriminatedConnectorConfig",
    "ConnectorOnebrickDiscriminatedConnectorConfigConfig",
    "ConnectorOnebrickDiscriminatedConnectorConfigConnector",
    "ConnectorOnebrickDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorOnebrickDiscriminatedConnectorConfigConnectorScope",
    "ConnectorOnebrickDiscriminatedConnectorConfigIntegrations",
    "ConnectorOpenledgerDiscriminatedConnectorConfig",
    "ConnectorOpenledgerDiscriminatedConnectorConfigConfig",
    "ConnectorOpenledgerDiscriminatedConnectorConfigConnector",
    "ConnectorOpenledgerDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorOpenledgerDiscriminatedConnectorConfigConnectorScope",
    "ConnectorOpenledgerDiscriminatedConnectorConfigIntegrations",
    "ConnectorPlaidDiscriminatedConnectorConfig",
    "ConnectorPlaidDiscriminatedConnectorConfigConfig",
    "ConnectorPlaidDiscriminatedConnectorConfigConfigCredentials",
    "ConnectorPlaidDiscriminatedConnectorConfigConnector",
    "ConnectorPlaidDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorPlaidDiscriminatedConnectorConfigConnectorScope",
    "ConnectorPlaidDiscriminatedConnectorConfigIntegrations",
    "ConnectorPostgresDiscriminatedConnectorConfig",
    "ConnectorPostgresDiscriminatedConnectorConfigConnector",
    "ConnectorPostgresDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorPostgresDiscriminatedConnectorConfigConnectorScope",
    "ConnectorPostgresDiscriminatedConnectorConfigIntegrations",
    "ConnectorRampDiscriminatedConnectorConfig",
    "ConnectorRampDiscriminatedConnectorConfigConfig",
    "ConnectorRampDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorRampDiscriminatedConnectorConfigConnector",
    "ConnectorRampDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorRampDiscriminatedConnectorConfigConnectorScope",
    "ConnectorRampDiscriminatedConnectorConfigIntegrations",
    "ConnectorSaltedgeDiscriminatedConnectorConfig",
    "ConnectorSaltedgeDiscriminatedConnectorConfigConfig",
    "ConnectorSaltedgeDiscriminatedConnectorConfigConnector",
    "ConnectorSaltedgeDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorSaltedgeDiscriminatedConnectorConfigConnectorScope",
    "ConnectorSaltedgeDiscriminatedConnectorConfigIntegrations",
    "ConnectorSplitwiseDiscriminatedConnectorConfig",
    "ConnectorSplitwiseDiscriminatedConnectorConfigConnector",
    "ConnectorSplitwiseDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorSplitwiseDiscriminatedConnectorConfigConnectorScope",
    "ConnectorSplitwiseDiscriminatedConnectorConfigIntegrations",
    "ConnectorStripeDiscriminatedConnectorConfig",
    "ConnectorStripeDiscriminatedConnectorConfigConfig",
    "ConnectorStripeDiscriminatedConnectorConfigConfigOAuth",
    "ConnectorStripeDiscriminatedConnectorConfigConnector",
    "ConnectorStripeDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorStripeDiscriminatedConnectorConfigConnectorScope",
    "ConnectorStripeDiscriminatedConnectorConfigIntegrations",
    "ConnectorTellerDiscriminatedConnectorConfig",
    "ConnectorTellerDiscriminatedConnectorConfigConfig",
    "ConnectorTellerDiscriminatedConnectorConfigConnector",
    "ConnectorTellerDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorTellerDiscriminatedConnectorConfigConnectorScope",
    "ConnectorTellerDiscriminatedConnectorConfigIntegrations",
    "ConnectorTogglDiscriminatedConnectorConfig",
    "ConnectorTogglDiscriminatedConnectorConfigConnector",
    "ConnectorTogglDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorTogglDiscriminatedConnectorConfigConnectorScope",
    "ConnectorTogglDiscriminatedConnectorConfigIntegrations",
    "ConnectorTwentyDiscriminatedConnectorConfig",
    "ConnectorTwentyDiscriminatedConnectorConfigConnector",
    "ConnectorTwentyDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorTwentyDiscriminatedConnectorConfigConnectorScope",
    "ConnectorTwentyDiscriminatedConnectorConfigIntegrations",
    "ConnectorVenmoDiscriminatedConnectorConfig",
    "ConnectorVenmoDiscriminatedConnectorConfigConfig",
    "ConnectorVenmoDiscriminatedConnectorConfigConfigProxy",
    "ConnectorVenmoDiscriminatedConnectorConfigConnector",
    "ConnectorVenmoDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorVenmoDiscriminatedConnectorConfigConnectorScope",
    "ConnectorVenmoDiscriminatedConnectorConfigIntegrations",
    "ConnectorWiseDiscriminatedConnectorConfig",
    "ConnectorWiseDiscriminatedConnectorConfigConnector",
    "ConnectorWiseDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorWiseDiscriminatedConnectorConfigConnectorScope",
    "ConnectorWiseDiscriminatedConnectorConfigIntegrations",
    "ConnectorYodleeDiscriminatedConnectorConfig",
    "ConnectorYodleeDiscriminatedConnectorConfigConfig",
    "ConnectorYodleeDiscriminatedConnectorConfigConfigProxy",
    "ConnectorYodleeDiscriminatedConnectorConfigConnector",
    "ConnectorYodleeDiscriminatedConnectorConfigConnectorSchemas",
    "ConnectorYodleeDiscriminatedConnectorConfigConnectorScope",
    "ConnectorYodleeDiscriminatedConnectorConfigIntegrations",
]


class ConnectorAcceloDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorAcceloDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorAcceloDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorAcceloDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorAcceloDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorAcceloDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorAcceloDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorAcceloDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorAcceloDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorAcceloDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorAcceloDiscriminatedConnectorConfigConfig

    connector_name: Literal["accelo"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorAcceloDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorAcceloDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorAcmeOauth2DiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorAcmeOauth2DiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorAcmeOauth2DiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorAcmeOauth2DiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorAcmeOauth2DiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorAcmeOauth2DiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorAcmeOauth2DiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorAcmeOauth2DiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorAcmeOauth2DiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorAcmeOauth2DiscriminatedConnectorConfig(BaseModel):
    config: ConnectorAcmeOauth2DiscriminatedConnectorConfigConfig

    connector_name: Literal["acme-oauth2"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorAcmeOauth2DiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorAcmeOauth2DiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorAdobeDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorAdobeDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorAdobeDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorAdobeDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorAdobeDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorAdobeDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorAdobeDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorAdobeDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorAdobeDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorAdobeDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorAdobeDiscriminatedConnectorConfigConfig

    connector_name: Literal["adobe"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorAdobeDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorAdobeDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorAdyenDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorAdyenDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorAdyenDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorAdyenDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorAdyenDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorAdyenDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorAdyenDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorAdyenDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorAdyenDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorAdyenDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorAdyenDiscriminatedConnectorConfigConfig

    connector_name: Literal["adyen"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorAdyenDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorAdyenDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorAircallDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorAircallDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorAircallDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorAircallDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorAircallDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorAircallDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorAircallDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorAircallDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorAircallDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorAircallDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorAircallDiscriminatedConnectorConfigConfig

    connector_name: Literal["aircall"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorAircallDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorAircallDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorAmazonDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorAmazonDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorAmazonDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorAmazonDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorAmazonDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorAmazonDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorAmazonDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorAmazonDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorAmazonDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorAmazonDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorAmazonDiscriminatedConnectorConfigConfig

    connector_name: Literal["amazon"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorAmazonDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorAmazonDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorApaleoDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorApaleoDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorApaleoDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorApaleoDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorApaleoDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorApaleoDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorApaleoDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorApaleoDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorApaleoDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorApaleoDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorApaleoDiscriminatedConnectorConfigConfig

    connector_name: Literal["apaleo"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorApaleoDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorApaleoDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorAsanaDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorAsanaDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorAsanaDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorAsanaDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorAsanaDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorAsanaDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorAsanaDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorAsanaDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorAsanaDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorAsanaDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorAsanaDiscriminatedConnectorConfigConfig

    connector_name: Literal["asana"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorAsanaDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorAsanaDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorAttioDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorAttioDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorAttioDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorAttioDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorAttioDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorAttioDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorAttioDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorAttioDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorAttioDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorAttioDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorAttioDiscriminatedConnectorConfigConfig

    connector_name: Literal["attio"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorAttioDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorAttioDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorAuth0DiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorAuth0DiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorAuth0DiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorAuth0DiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorAuth0DiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorAuth0DiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorAuth0DiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorAuth0DiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorAuth0DiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorAuth0DiscriminatedConnectorConfig(BaseModel):
    config: ConnectorAuth0DiscriminatedConnectorConfigConfig

    connector_name: Literal["auth0"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorAuth0DiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorAuth0DiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorAutodeskDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorAutodeskDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorAutodeskDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorAutodeskDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorAutodeskDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorAutodeskDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorAutodeskDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorAutodeskDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorAutodeskDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorAutodeskDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorAutodeskDiscriminatedConnectorConfigConfig

    connector_name: Literal["autodesk"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorAutodeskDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorAutodeskDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorAwsDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorAwsDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorAwsDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorAwsDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorAwsDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorAwsDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorAwsDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorAwsDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorAwsDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorAwsDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorAwsDiscriminatedConnectorConfigConfig

    connector_name: Literal["aws"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorAwsDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorAwsDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorBamboohrDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorBamboohrDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorBamboohrDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorBamboohrDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorBamboohrDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorBamboohrDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorBamboohrDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorBamboohrDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorBamboohrDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorBamboohrDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorBamboohrDiscriminatedConnectorConfigConfig

    connector_name: Literal["bamboohr"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorBamboohrDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorBamboohrDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorBasecampDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorBasecampDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorBasecampDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorBasecampDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorBasecampDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorBasecampDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorBasecampDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorBasecampDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorBasecampDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorBasecampDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorBasecampDiscriminatedConnectorConfigConfig

    connector_name: Literal["basecamp"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorBasecampDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorBasecampDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorBattlenetDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorBattlenetDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorBattlenetDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorBattlenetDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorBattlenetDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorBattlenetDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorBattlenetDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorBattlenetDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorBattlenetDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorBattlenetDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorBattlenetDiscriminatedConnectorConfigConfig

    connector_name: Literal["battlenet"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorBattlenetDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorBattlenetDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorBigcommerceDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorBigcommerceDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorBigcommerceDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorBigcommerceDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorBigcommerceDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorBigcommerceDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorBigcommerceDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorBigcommerceDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorBigcommerceDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorBigcommerceDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorBigcommerceDiscriminatedConnectorConfigConfig

    connector_name: Literal["bigcommerce"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorBigcommerceDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorBigcommerceDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorBitbucketDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorBitbucketDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorBitbucketDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorBitbucketDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorBitbucketDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorBitbucketDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorBitbucketDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorBitbucketDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorBitbucketDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorBitbucketDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorBitbucketDiscriminatedConnectorConfigConfig

    connector_name: Literal["bitbucket"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorBitbucketDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorBitbucketDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorBitlyDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorBitlyDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorBitlyDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorBitlyDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorBitlyDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorBitlyDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorBitlyDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorBitlyDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorBitlyDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorBitlyDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorBitlyDiscriminatedConnectorConfigConfig

    connector_name: Literal["bitly"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorBitlyDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorBitlyDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorBlackbaudDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorBlackbaudDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorBlackbaudDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorBlackbaudDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorBlackbaudDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorBlackbaudDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorBlackbaudDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorBlackbaudDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorBlackbaudDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorBlackbaudDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorBlackbaudDiscriminatedConnectorConfigConfig

    connector_name: Literal["blackbaud"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorBlackbaudDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorBlackbaudDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorBoldsignDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorBoldsignDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorBoldsignDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorBoldsignDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorBoldsignDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorBoldsignDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorBoldsignDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorBoldsignDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorBoldsignDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorBoldsignDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorBoldsignDiscriminatedConnectorConfigConfig

    connector_name: Literal["boldsign"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorBoldsignDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorBoldsignDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorBoxDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorBoxDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorBoxDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorBoxDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorBoxDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorBoxDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorBoxDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorBoxDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorBoxDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorBoxDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorBoxDiscriminatedConnectorConfigConfig

    connector_name: Literal["box"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorBoxDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorBoxDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorBraintreeDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorBraintreeDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorBraintreeDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorBraintreeDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorBraintreeDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorBraintreeDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorBraintreeDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorBraintreeDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorBraintreeDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorBraintreeDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorBraintreeDiscriminatedConnectorConfigConfig

    connector_name: Literal["braintree"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorBraintreeDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorBraintreeDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorCalendlyDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorCalendlyDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorCalendlyDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorCalendlyDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorCalendlyDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorCalendlyDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorCalendlyDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorCalendlyDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorCalendlyDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorCalendlyDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorCalendlyDiscriminatedConnectorConfigConfig

    connector_name: Literal["calendly"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorCalendlyDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorCalendlyDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorClickupDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorClickupDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorClickupDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorClickupDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorClickupDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorClickupDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorClickupDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorClickupDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorClickupDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorClickupDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorClickupDiscriminatedConnectorConfigConfig

    connector_name: Literal["clickup"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorClickupDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorClickupDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorCloseDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorCloseDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorCloseDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorCloseDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorCloseDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorCloseDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorCloseDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorCloseDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorCloseDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorCloseDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorCloseDiscriminatedConnectorConfigConfig

    connector_name: Literal["close"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorCloseDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorCloseDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorConfluenceDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorConfluenceDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorConfluenceDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorConfluenceDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorConfluenceDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorConfluenceDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorConfluenceDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorConfluenceDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorConfluenceDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorConfluenceDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorConfluenceDiscriminatedConnectorConfigConfig

    connector_name: Literal["confluence"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorConfluenceDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorConfluenceDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorContentfulDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorContentfulDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorContentfulDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorContentfulDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorContentfulDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorContentfulDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorContentfulDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorContentfulDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorContentfulDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorContentfulDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorContentfulDiscriminatedConnectorConfigConfig

    connector_name: Literal["contentful"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorContentfulDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorContentfulDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorContentstackDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorContentstackDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorContentstackDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorContentstackDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorContentstackDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorContentstackDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorContentstackDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorContentstackDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorContentstackDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorContentstackDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorContentstackDiscriminatedConnectorConfigConfig

    connector_name: Literal["contentstack"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorContentstackDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorContentstackDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorCopperDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorCopperDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorCopperDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorCopperDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorCopperDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorCopperDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorCopperDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorCopperDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorCopperDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorCopperDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorCopperDiscriminatedConnectorConfigConfig

    connector_name: Literal["copper"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorCopperDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorCopperDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorCorosDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorCorosDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorCorosDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorCorosDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorCorosDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorCorosDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorCorosDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorCorosDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorCorosDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorCorosDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorCorosDiscriminatedConnectorConfigConfig

    connector_name: Literal["coros"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorCorosDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorCorosDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorDatevDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorDatevDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorDatevDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorDatevDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorDatevDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorDatevDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorDatevDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorDatevDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorDatevDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorDatevDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorDatevDiscriminatedConnectorConfigConfig

    connector_name: Literal["datev"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorDatevDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorDatevDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorDeelDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorDeelDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorDeelDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorDeelDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorDeelDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorDeelDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorDeelDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorDeelDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorDeelDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorDeelDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorDeelDiscriminatedConnectorConfigConfig

    connector_name: Literal["deel"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorDeelDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorDeelDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorDialpadDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorDialpadDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorDialpadDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorDialpadDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorDialpadDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorDialpadDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorDialpadDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorDialpadDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorDialpadDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorDialpadDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorDialpadDiscriminatedConnectorConfigConfig

    connector_name: Literal["dialpad"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorDialpadDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorDialpadDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorDigitaloceanDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorDigitaloceanDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorDigitaloceanDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorDigitaloceanDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorDigitaloceanDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorDigitaloceanDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorDigitaloceanDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorDigitaloceanDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorDigitaloceanDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorDigitaloceanDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorDigitaloceanDiscriminatedConnectorConfigConfig

    connector_name: Literal["digitalocean"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorDigitaloceanDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorDigitaloceanDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorDiscordDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorDiscordDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorDiscordDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorDiscordDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorDiscordDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorDiscordDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorDiscordDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorDiscordDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorDiscordDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorDiscordDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorDiscordDiscriminatedConnectorConfigConfig

    connector_name: Literal["discord"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorDiscordDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorDiscordDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorDocusignDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorDocusignDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorDocusignDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorDocusignDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorDocusignDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorDocusignDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorDocusignDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorDocusignDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorDocusignDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorDocusignDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorDocusignDiscriminatedConnectorConfigConfig

    connector_name: Literal["docusign"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorDocusignDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorDocusignDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorDropboxDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorDropboxDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorDropboxDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorDropboxDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorDropboxDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorDropboxDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorDropboxDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorDropboxDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorDropboxDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorDropboxDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorDropboxDiscriminatedConnectorConfigConfig

    connector_name: Literal["dropbox"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorDropboxDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorDropboxDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorEbayDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorEbayDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorEbayDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorEbayDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorEbayDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorEbayDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorEbayDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorEbayDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorEbayDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorEbayDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorEbayDiscriminatedConnectorConfigConfig

    connector_name: Literal["ebay"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorEbayDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorEbayDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorEgnyteDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorEgnyteDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorEgnyteDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorEgnyteDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorEgnyteDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorEgnyteDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorEgnyteDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorEgnyteDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorEgnyteDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorEgnyteDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorEgnyteDiscriminatedConnectorConfigConfig

    connector_name: Literal["egnyte"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorEgnyteDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorEgnyteDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorEnvoyDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorEnvoyDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorEnvoyDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorEnvoyDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorEnvoyDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorEnvoyDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorEnvoyDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorEnvoyDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorEnvoyDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorEnvoyDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorEnvoyDiscriminatedConnectorConfigConfig

    connector_name: Literal["envoy"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorEnvoyDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorEnvoyDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorEventbriteDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorEventbriteDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorEventbriteDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorEventbriteDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorEventbriteDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorEventbriteDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorEventbriteDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorEventbriteDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorEventbriteDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorEventbriteDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorEventbriteDiscriminatedConnectorConfigConfig

    connector_name: Literal["eventbrite"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorEventbriteDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorEventbriteDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorExistDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorExistDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorExistDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorExistDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorExistDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorExistDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorExistDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorExistDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorExistDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorExistDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorExistDiscriminatedConnectorConfigConfig

    connector_name: Literal["exist"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorExistDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorExistDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorFacebookDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorFacebookDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorFacebookDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorFacebookDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorFacebookDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorFacebookDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorFacebookDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorFacebookDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorFacebookDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorFacebookDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorFacebookDiscriminatedConnectorConfigConfig

    connector_name: Literal["facebook"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorFacebookDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorFacebookDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorFactorialDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorFactorialDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorFactorialDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorFactorialDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorFactorialDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorFactorialDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorFactorialDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorFactorialDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorFactorialDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorFactorialDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorFactorialDiscriminatedConnectorConfigConfig

    connector_name: Literal["factorial"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorFactorialDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorFactorialDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorFigmaDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorFigmaDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorFigmaDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorFigmaDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorFigmaDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorFigmaDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorFigmaDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorFigmaDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorFigmaDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorFigmaDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorFigmaDiscriminatedConnectorConfigConfig

    connector_name: Literal["figma"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorFigmaDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorFigmaDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorFitbitDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorFitbitDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorFitbitDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorFitbitDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorFitbitDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorFitbitDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorFitbitDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorFitbitDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorFitbitDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorFitbitDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorFitbitDiscriminatedConnectorConfigConfig

    connector_name: Literal["fitbit"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorFitbitDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorFitbitDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorFortnoxDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorFortnoxDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorFortnoxDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorFortnoxDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorFortnoxDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorFortnoxDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorFortnoxDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorFortnoxDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorFortnoxDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorFortnoxDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorFortnoxDiscriminatedConnectorConfigConfig

    connector_name: Literal["fortnox"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorFortnoxDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorFortnoxDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorFreshbooksDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorFreshbooksDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorFreshbooksDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorFreshbooksDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorFreshbooksDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorFreshbooksDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorFreshbooksDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorFreshbooksDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorFreshbooksDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorFreshbooksDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorFreshbooksDiscriminatedConnectorConfigConfig

    connector_name: Literal["freshbooks"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorFreshbooksDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorFreshbooksDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorFrontDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorFrontDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorFrontDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorFrontDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorFrontDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorFrontDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorFrontDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorFrontDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorFrontDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorFrontDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorFrontDiscriminatedConnectorConfigConfig

    connector_name: Literal["front"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorFrontDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorFrontDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorGitHubDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorGitHubDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorGitHubDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorGitHubDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorGitHubDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorGitHubDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorGitHubDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorGitHubDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorGitHubDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorGitHubDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorGitHubDiscriminatedConnectorConfigConfig

    connector_name: Literal["github"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorGitHubDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorGitHubDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorGitlabDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorGitlabDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorGitlabDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorGitlabDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorGitlabDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorGitlabDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorGitlabDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorGitlabDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorGitlabDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorGitlabDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorGitlabDiscriminatedConnectorConfigConfig

    connector_name: Literal["gitlab"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorGitlabDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorGitlabDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorGongDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorGongDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorGongDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorGongDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorGongDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorGongDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorGongDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorGongDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorGongDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorGongDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorGongDiscriminatedConnectorConfigConfig

    connector_name: Literal["gong"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorGongDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorGongDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorGoogleCalendarDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorGoogleCalendarDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorGoogleCalendarDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorGoogleCalendarDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorGoogleCalendarDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorGoogleCalendarDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorGoogleCalendarDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorGoogleCalendarDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorGoogleCalendarDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorGoogleCalendarDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorGoogleCalendarDiscriminatedConnectorConfigConfig

    connector_name: Literal["google-calendar"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorGoogleCalendarDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorGoogleCalendarDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorGoogleDocsDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorGoogleDocsDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorGoogleDocsDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorGoogleDocsDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorGoogleDocsDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorGoogleDocsDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorGoogleDocsDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorGoogleDocsDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorGoogleDocsDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorGoogleDocsDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorGoogleDocsDiscriminatedConnectorConfigConfig

    connector_name: Literal["google-docs"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorGoogleDocsDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorGoogleDocsDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorGoogleDriveDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorGoogleDriveDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorGoogleDriveDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorGoogleDriveDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorGoogleDriveDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorGoogleDriveDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorGoogleDriveDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorGoogleDriveDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorGoogleDriveDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorGoogleDriveDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorGoogleDriveDiscriminatedConnectorConfigConfig

    connector_name: Literal["google-drive"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorGoogleDriveDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorGoogleDriveDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorGoogleMailDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorGoogleMailDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorGoogleMailDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorGoogleMailDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorGoogleMailDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorGoogleMailDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorGoogleMailDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorGoogleMailDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorGoogleMailDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorGoogleMailDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorGoogleMailDiscriminatedConnectorConfigConfig

    connector_name: Literal["google-mail"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorGoogleMailDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorGoogleMailDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorGoogleSheetDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorGoogleSheetDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorGoogleSheetDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorGoogleSheetDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorGoogleSheetDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorGoogleSheetDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorGoogleSheetDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorGoogleSheetDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorGoogleSheetDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorGoogleSheetDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorGoogleSheetDiscriminatedConnectorConfigConfig

    connector_name: Literal["google-sheet"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorGoogleSheetDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorGoogleSheetDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorGorgiasDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorGorgiasDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorGorgiasDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorGorgiasDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorGorgiasDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorGorgiasDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorGorgiasDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorGorgiasDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorGorgiasDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorGorgiasDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorGorgiasDiscriminatedConnectorConfigConfig

    connector_name: Literal["gorgias"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorGorgiasDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorGorgiasDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorGrainDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorGrainDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorGrainDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorGrainDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorGrainDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorGrainDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorGrainDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorGrainDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorGrainDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorGrainDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorGrainDiscriminatedConnectorConfigConfig

    connector_name: Literal["grain"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorGrainDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorGrainDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorGumroadDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorGumroadDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorGumroadDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorGumroadDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorGumroadDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorGumroadDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorGumroadDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorGumroadDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorGumroadDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorGumroadDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorGumroadDiscriminatedConnectorConfigConfig

    connector_name: Literal["gumroad"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorGumroadDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorGumroadDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorGustoDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorGustoDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorGustoDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorGustoDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorGustoDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorGustoDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorGustoDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorGustoDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorGustoDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorGustoDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorGustoDiscriminatedConnectorConfigConfig

    connector_name: Literal["gusto"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorGustoDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorGustoDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorHarvestDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorHarvestDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorHarvestDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorHarvestDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorHarvestDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorHarvestDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorHarvestDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorHarvestDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorHarvestDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorHarvestDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorHarvestDiscriminatedConnectorConfigConfig

    connector_name: Literal["harvest"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorHarvestDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorHarvestDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorHighlevelDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorHighlevelDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorHighlevelDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorHighlevelDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorHighlevelDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorHighlevelDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorHighlevelDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorHighlevelDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorHighlevelDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorHighlevelDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorHighlevelDiscriminatedConnectorConfigConfig

    connector_name: Literal["highlevel"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorHighlevelDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorHighlevelDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorHubspotDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorHubspotDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorHubspotDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorHubspotDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorHubspotDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorHubspotDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorHubspotDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorHubspotDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorHubspotDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorHubspotDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorHubspotDiscriminatedConnectorConfigConfig

    connector_name: Literal["hubspot"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorHubspotDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorHubspotDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorInstagramDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorInstagramDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorInstagramDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorInstagramDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorInstagramDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorInstagramDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorInstagramDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorInstagramDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorInstagramDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorInstagramDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorInstagramDiscriminatedConnectorConfigConfig

    connector_name: Literal["instagram"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorInstagramDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorInstagramDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorIntercomDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorIntercomDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorIntercomDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorIntercomDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorIntercomDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorIntercomDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorIntercomDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorIntercomDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorIntercomDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorIntercomDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorIntercomDiscriminatedConnectorConfigConfig

    connector_name: Literal["intercom"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorIntercomDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorIntercomDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorJiraDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorJiraDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorJiraDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorJiraDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorJiraDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorJiraDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorJiraDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorJiraDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorJiraDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorJiraDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorJiraDiscriminatedConnectorConfigConfig

    connector_name: Literal["jira"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorJiraDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorJiraDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorKeapDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorKeapDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorKeapDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorKeapDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorKeapDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorKeapDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorKeapDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorKeapDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorKeapDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorKeapDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorKeapDiscriminatedConnectorConfigConfig

    connector_name: Literal["keap"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorKeapDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorKeapDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorLeverDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorLeverDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorLeverDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorLeverDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorLeverDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorLeverDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorLeverDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorLeverDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorLeverDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorLeverDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorLeverDiscriminatedConnectorConfigConfig

    connector_name: Literal["lever"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorLeverDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorLeverDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorLinearDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorLinearDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorLinearDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorLinearDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorLinearDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorLinearDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorLinearDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorLinearDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorLinearDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorLinearDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorLinearDiscriminatedConnectorConfigConfig

    connector_name: Literal["linear"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorLinearDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorLinearDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorLinkedinDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorLinkedinDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorLinkedinDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorLinkedinDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorLinkedinDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorLinkedinDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorLinkedinDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorLinkedinDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorLinkedinDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorLinkedinDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorLinkedinDiscriminatedConnectorConfigConfig

    connector_name: Literal["linkedin"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorLinkedinDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorLinkedinDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorLinkhutDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorLinkhutDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorLinkhutDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorLinkhutDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorLinkhutDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorLinkhutDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorLinkhutDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorLinkhutDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorLinkhutDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorLinkhutDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorLinkhutDiscriminatedConnectorConfigConfig

    connector_name: Literal["linkhut"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorLinkhutDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorLinkhutDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorMailchimpDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorMailchimpDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorMailchimpDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorMailchimpDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorMailchimpDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorMailchimpDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorMailchimpDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorMailchimpDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorMailchimpDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorMailchimpDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorMailchimpDiscriminatedConnectorConfigConfig

    connector_name: Literal["mailchimp"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorMailchimpDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorMailchimpDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorMiroDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorMiroDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorMiroDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorMiroDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorMiroDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorMiroDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorMiroDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorMiroDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorMiroDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorMiroDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorMiroDiscriminatedConnectorConfigConfig

    connector_name: Literal["miro"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorMiroDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorMiroDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorMondayDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorMondayDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorMondayDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorMondayDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorMondayDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorMondayDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorMondayDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorMondayDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorMondayDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorMondayDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorMondayDiscriminatedConnectorConfigConfig

    connector_name: Literal["monday"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorMondayDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorMondayDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorMuralDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorMuralDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorMuralDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorMuralDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorMuralDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorMuralDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorMuralDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorMuralDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorMuralDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorMuralDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorMuralDiscriminatedConnectorConfigConfig

    connector_name: Literal["mural"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorMuralDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorMuralDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorNamelyDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorNamelyDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorNamelyDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorNamelyDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorNamelyDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorNamelyDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorNamelyDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorNamelyDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorNamelyDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorNamelyDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorNamelyDiscriminatedConnectorConfigConfig

    connector_name: Literal["namely"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorNamelyDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorNamelyDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorNationbuilderDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorNationbuilderDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorNationbuilderDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorNationbuilderDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorNationbuilderDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorNationbuilderDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorNationbuilderDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorNationbuilderDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorNationbuilderDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorNationbuilderDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorNationbuilderDiscriminatedConnectorConfigConfig

    connector_name: Literal["nationbuilder"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorNationbuilderDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorNationbuilderDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorNetsuiteDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorNetsuiteDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorNetsuiteDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorNetsuiteDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorNetsuiteDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorNetsuiteDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorNetsuiteDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorNetsuiteDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorNetsuiteDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorNetsuiteDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorNetsuiteDiscriminatedConnectorConfigConfig

    connector_name: Literal["netsuite"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorNetsuiteDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorNetsuiteDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorNotionDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorNotionDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorNotionDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorNotionDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorNotionDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorNotionDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorNotionDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorNotionDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorNotionDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorNotionDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorNotionDiscriminatedConnectorConfigConfig

    connector_name: Literal["notion"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorNotionDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorNotionDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorOdooDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorOdooDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorOdooDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorOdooDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorOdooDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorOdooDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorOdooDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorOdooDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorOdooDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorOdooDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorOdooDiscriminatedConnectorConfigConfig

    connector_name: Literal["odoo"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorOdooDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorOdooDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorOktaDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorOktaDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorOktaDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorOktaDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorOktaDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorOktaDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorOktaDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorOktaDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorOktaDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorOktaDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorOktaDiscriminatedConnectorConfigConfig

    connector_name: Literal["okta"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorOktaDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorOktaDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorOsuDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorOsuDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorOsuDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorOsuDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorOsuDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorOsuDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorOsuDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorOsuDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorOsuDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorOsuDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorOsuDiscriminatedConnectorConfigConfig

    connector_name: Literal["osu"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorOsuDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorOsuDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorOuraDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorOuraDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorOuraDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorOuraDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorOuraDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorOuraDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorOuraDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorOuraDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorOuraDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorOuraDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorOuraDiscriminatedConnectorConfigConfig

    connector_name: Literal["oura"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorOuraDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorOuraDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorOutreachDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorOutreachDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorOutreachDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorOutreachDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorOutreachDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorOutreachDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorOutreachDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorOutreachDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorOutreachDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorOutreachDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorOutreachDiscriminatedConnectorConfigConfig

    connector_name: Literal["outreach"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorOutreachDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorOutreachDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorPagerdutyDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorPagerdutyDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorPagerdutyDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorPagerdutyDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorPagerdutyDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorPagerdutyDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorPagerdutyDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorPagerdutyDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorPagerdutyDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorPagerdutyDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorPagerdutyDiscriminatedConnectorConfigConfig

    connector_name: Literal["pagerduty"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorPagerdutyDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorPagerdutyDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorPandadocDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorPandadocDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorPandadocDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorPandadocDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorPandadocDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorPandadocDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorPandadocDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorPandadocDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorPandadocDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorPandadocDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorPandadocDiscriminatedConnectorConfigConfig

    connector_name: Literal["pandadoc"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorPandadocDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorPandadocDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorPayfitDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorPayfitDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorPayfitDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorPayfitDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorPayfitDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorPayfitDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorPayfitDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorPayfitDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorPayfitDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorPayfitDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorPayfitDiscriminatedConnectorConfigConfig

    connector_name: Literal["payfit"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorPayfitDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorPayfitDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorPaypalDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorPaypalDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorPaypalDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorPaypalDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorPaypalDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorPaypalDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorPaypalDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorPaypalDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorPaypalDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorPaypalDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorPaypalDiscriminatedConnectorConfigConfig

    connector_name: Literal["paypal"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorPaypalDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorPaypalDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorPennylaneDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorPennylaneDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorPennylaneDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorPennylaneDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorPennylaneDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorPennylaneDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorPennylaneDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorPennylaneDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorPennylaneDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorPennylaneDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorPennylaneDiscriminatedConnectorConfigConfig

    connector_name: Literal["pennylane"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorPennylaneDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorPennylaneDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorPinterestDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorPinterestDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorPinterestDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorPinterestDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorPinterestDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorPinterestDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorPinterestDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorPinterestDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorPinterestDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorPinterestDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorPinterestDiscriminatedConnectorConfigConfig

    connector_name: Literal["pinterest"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorPinterestDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorPinterestDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorPipedriveDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorPipedriveDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorPipedriveDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorPipedriveDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorPipedriveDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorPipedriveDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorPipedriveDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorPipedriveDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorPipedriveDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorPipedriveDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorPipedriveDiscriminatedConnectorConfigConfig

    connector_name: Literal["pipedrive"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorPipedriveDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorPipedriveDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorPodiumDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorPodiumDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorPodiumDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorPodiumDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorPodiumDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorPodiumDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorPodiumDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorPodiumDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorPodiumDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorPodiumDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorPodiumDiscriminatedConnectorConfigConfig

    connector_name: Literal["podium"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorPodiumDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorPodiumDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorProductboardDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorProductboardDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorProductboardDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorProductboardDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorProductboardDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorProductboardDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorProductboardDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorProductboardDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorProductboardDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorProductboardDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorProductboardDiscriminatedConnectorConfigConfig

    connector_name: Literal["productboard"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorProductboardDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorProductboardDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorQualtricsDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorQualtricsDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorQualtricsDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorQualtricsDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorQualtricsDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorQualtricsDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorQualtricsDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorQualtricsDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorQualtricsDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorQualtricsDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorQualtricsDiscriminatedConnectorConfigConfig

    connector_name: Literal["qualtrics"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorQualtricsDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorQualtricsDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorQuickbooksDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorQuickbooksDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorQuickbooksDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorQuickbooksDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorQuickbooksDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorQuickbooksDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorQuickbooksDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorQuickbooksDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorQuickbooksDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorQuickbooksDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorQuickbooksDiscriminatedConnectorConfigConfig

    connector_name: Literal["quickbooks"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorQuickbooksDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorQuickbooksDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorRedditDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorRedditDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorRedditDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorRedditDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorRedditDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorRedditDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorRedditDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorRedditDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorRedditDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorRedditDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorRedditDiscriminatedConnectorConfigConfig

    connector_name: Literal["reddit"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorRedditDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorRedditDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorSageDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorSageDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorSageDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorSageDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorSageDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorSageDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorSageDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorSageDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorSageDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorSageDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorSageDiscriminatedConnectorConfigConfig

    connector_name: Literal["sage"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorSageDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorSageDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorSalesforceDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorSalesforceDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorSalesforceDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorSalesforceDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorSalesforceDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorSalesforceDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorSalesforceDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorSalesforceDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorSalesforceDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorSalesforceDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorSalesforceDiscriminatedConnectorConfigConfig

    connector_name: Literal["salesforce"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorSalesforceDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorSalesforceDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorSalesloftDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorSalesloftDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorSalesloftDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorSalesloftDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorSalesloftDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorSalesloftDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorSalesloftDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorSalesloftDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorSalesloftDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorSalesloftDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorSalesloftDiscriminatedConnectorConfigConfig

    connector_name: Literal["salesloft"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorSalesloftDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorSalesloftDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorSegmentDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorSegmentDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorSegmentDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorSegmentDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorSegmentDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorSegmentDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorSegmentDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorSegmentDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorSegmentDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorSegmentDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorSegmentDiscriminatedConnectorConfigConfig

    connector_name: Literal["segment"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorSegmentDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorSegmentDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorServicem8DiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorServicem8DiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorServicem8DiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorServicem8DiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorServicem8DiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorServicem8DiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorServicem8DiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorServicem8DiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorServicem8DiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorServicem8DiscriminatedConnectorConfig(BaseModel):
    config: ConnectorServicem8DiscriminatedConnectorConfigConfig

    connector_name: Literal["servicem8"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorServicem8DiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorServicem8DiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorServicenowDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorServicenowDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorServicenowDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorServicenowDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorServicenowDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorServicenowDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorServicenowDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorServicenowDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorServicenowDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorServicenowDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorServicenowDiscriminatedConnectorConfigConfig

    connector_name: Literal["servicenow"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorServicenowDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorServicenowDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorSharepointDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorSharepointDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorSharepointDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorSharepointDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorSharepointDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorSharepointDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorSharepointDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorSharepointDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorSharepointDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorSharepointDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorSharepointDiscriminatedConnectorConfigConfig

    connector_name: Literal["sharepoint"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorSharepointDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorSharepointDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorShopifyDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorShopifyDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorShopifyDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorShopifyDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorShopifyDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorShopifyDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorShopifyDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorShopifyDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorShopifyDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorShopifyDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorShopifyDiscriminatedConnectorConfigConfig

    connector_name: Literal["shopify"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorShopifyDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorShopifyDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorSignnowDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorSignnowDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorSignnowDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorSignnowDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorSignnowDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorSignnowDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorSignnowDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorSignnowDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorSignnowDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorSignnowDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorSignnowDiscriminatedConnectorConfigConfig

    connector_name: Literal["signnow"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorSignnowDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorSignnowDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorSlackDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorSlackDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorSlackDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorSlackDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorSlackDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorSlackDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorSlackDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorSlackDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorSlackDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorSlackDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorSlackDiscriminatedConnectorConfigConfig

    connector_name: Literal["slack"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorSlackDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorSlackDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorSmartsheetDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorSmartsheetDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorSmartsheetDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorSmartsheetDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorSmartsheetDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorSmartsheetDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorSmartsheetDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorSmartsheetDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorSmartsheetDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorSmartsheetDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorSmartsheetDiscriminatedConnectorConfigConfig

    connector_name: Literal["smartsheet"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorSmartsheetDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorSmartsheetDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorSnowflakeDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorSnowflakeDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorSnowflakeDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorSnowflakeDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorSnowflakeDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorSnowflakeDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorSnowflakeDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorSnowflakeDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorSnowflakeDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorSnowflakeDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorSnowflakeDiscriminatedConnectorConfigConfig

    connector_name: Literal["snowflake"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorSnowflakeDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorSnowflakeDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorSpotifyDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorSpotifyDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorSpotifyDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorSpotifyDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorSpotifyDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorSpotifyDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorSpotifyDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorSpotifyDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorSpotifyDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorSpotifyDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorSpotifyDiscriminatedConnectorConfigConfig

    connector_name: Literal["spotify"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorSpotifyDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorSpotifyDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorSquarespaceDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorSquarespaceDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorSquarespaceDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorSquarespaceDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorSquarespaceDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorSquarespaceDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorSquarespaceDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorSquarespaceDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorSquarespaceDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorSquarespaceDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorSquarespaceDiscriminatedConnectorConfigConfig

    connector_name: Literal["squarespace"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorSquarespaceDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorSquarespaceDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorSquareupDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorSquareupDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorSquareupDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorSquareupDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorSquareupDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorSquareupDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorSquareupDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorSquareupDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorSquareupDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorSquareupDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorSquareupDiscriminatedConnectorConfigConfig

    connector_name: Literal["squareup"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorSquareupDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorSquareupDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorStackexchangeDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorStackexchangeDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorStackexchangeDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorStackexchangeDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorStackexchangeDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorStackexchangeDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorStackexchangeDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorStackexchangeDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorStackexchangeDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorStackexchangeDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorStackexchangeDiscriminatedConnectorConfigConfig

    connector_name: Literal["stackexchange"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorStackexchangeDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorStackexchangeDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorStravaDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorStravaDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorStravaDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorStravaDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorStravaDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorStravaDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorStravaDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorStravaDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorStravaDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorStravaDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorStravaDiscriminatedConnectorConfigConfig

    connector_name: Literal["strava"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorStravaDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorStravaDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorTeamworkDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorTeamworkDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorTeamworkDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorTeamworkDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorTeamworkDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorTeamworkDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorTeamworkDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorTeamworkDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorTeamworkDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorTeamworkDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorTeamworkDiscriminatedConnectorConfigConfig

    connector_name: Literal["teamwork"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorTeamworkDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorTeamworkDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorTicktickDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorTicktickDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorTicktickDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorTicktickDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorTicktickDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorTicktickDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorTicktickDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorTicktickDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorTicktickDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorTicktickDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorTicktickDiscriminatedConnectorConfigConfig

    connector_name: Literal["ticktick"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorTicktickDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorTicktickDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorTimelyDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorTimelyDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorTimelyDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorTimelyDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorTimelyDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorTimelyDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorTimelyDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorTimelyDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorTimelyDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorTimelyDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorTimelyDiscriminatedConnectorConfigConfig

    connector_name: Literal["timely"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorTimelyDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorTimelyDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorTodoistDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorTodoistDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorTodoistDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorTodoistDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorTodoistDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorTodoistDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorTodoistDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorTodoistDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorTodoistDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorTodoistDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorTodoistDiscriminatedConnectorConfigConfig

    connector_name: Literal["todoist"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorTodoistDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorTodoistDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorTremendousDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorTremendousDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorTremendousDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorTremendousDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorTremendousDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorTremendousDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorTremendousDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorTremendousDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorTremendousDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorTremendousDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorTremendousDiscriminatedConnectorConfigConfig

    connector_name: Literal["tremendous"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorTremendousDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorTremendousDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorTsheetsteamDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorTsheetsteamDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorTsheetsteamDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorTsheetsteamDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorTsheetsteamDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorTsheetsteamDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorTsheetsteamDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorTsheetsteamDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorTsheetsteamDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorTsheetsteamDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorTsheetsteamDiscriminatedConnectorConfigConfig

    connector_name: Literal["tsheetsteam"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorTsheetsteamDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorTsheetsteamDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorTumblrDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorTumblrDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorTumblrDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorTumblrDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorTumblrDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorTumblrDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorTumblrDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorTumblrDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorTumblrDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorTumblrDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorTumblrDiscriminatedConnectorConfigConfig

    connector_name: Literal["tumblr"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorTumblrDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorTumblrDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorTwinfieldDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorTwinfieldDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorTwinfieldDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorTwinfieldDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorTwinfieldDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorTwinfieldDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorTwinfieldDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorTwinfieldDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorTwinfieldDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorTwinfieldDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorTwinfieldDiscriminatedConnectorConfigConfig

    connector_name: Literal["twinfield"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorTwinfieldDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorTwinfieldDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorTwitchDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorTwitchDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorTwitchDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorTwitchDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorTwitchDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorTwitchDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorTwitchDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorTwitchDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorTwitchDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorTwitchDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorTwitchDiscriminatedConnectorConfigConfig

    connector_name: Literal["twitch"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorTwitchDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorTwitchDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorTwitterDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorTwitterDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorTwitterDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorTwitterDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorTwitterDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorTwitterDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorTwitterDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorTwitterDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorTwitterDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorTwitterDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorTwitterDiscriminatedConnectorConfigConfig

    connector_name: Literal["twitter"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorTwitterDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorTwitterDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorTypeformDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorTypeformDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorTypeformDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorTypeformDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorTypeformDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorTypeformDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorTypeformDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorTypeformDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorTypeformDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorTypeformDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorTypeformDiscriminatedConnectorConfigConfig

    connector_name: Literal["typeform"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorTypeformDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorTypeformDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorUberDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorUberDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorUberDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorUberDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorUberDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorUberDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorUberDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorUberDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorUberDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorUberDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorUberDiscriminatedConnectorConfigConfig

    connector_name: Literal["uber"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorUberDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorUberDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorVimeoDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorVimeoDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorVimeoDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorVimeoDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorVimeoDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorVimeoDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorVimeoDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorVimeoDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorVimeoDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorVimeoDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorVimeoDiscriminatedConnectorConfigConfig

    connector_name: Literal["vimeo"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorVimeoDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorVimeoDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorWakatimeDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorWakatimeDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorWakatimeDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorWakatimeDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorWakatimeDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorWakatimeDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorWakatimeDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorWakatimeDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorWakatimeDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorWakatimeDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorWakatimeDiscriminatedConnectorConfigConfig

    connector_name: Literal["wakatime"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorWakatimeDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorWakatimeDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorWealthboxDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorWealthboxDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorWealthboxDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorWealthboxDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorWealthboxDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorWealthboxDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorWealthboxDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorWealthboxDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorWealthboxDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorWealthboxDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorWealthboxDiscriminatedConnectorConfigConfig

    connector_name: Literal["wealthbox"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorWealthboxDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorWealthboxDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorWebflowDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorWebflowDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorWebflowDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorWebflowDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorWebflowDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorWebflowDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorWebflowDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorWebflowDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorWebflowDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorWebflowDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorWebflowDiscriminatedConnectorConfigConfig

    connector_name: Literal["webflow"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorWebflowDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorWebflowDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorWhoopDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorWhoopDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorWhoopDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorWhoopDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorWhoopDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorWhoopDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorWhoopDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorWhoopDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorWhoopDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorWhoopDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorWhoopDiscriminatedConnectorConfigConfig

    connector_name: Literal["whoop"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorWhoopDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorWhoopDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorWordpressDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorWordpressDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorWordpressDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorWordpressDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorWordpressDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorWordpressDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorWordpressDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorWordpressDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorWordpressDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorWordpressDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorWordpressDiscriminatedConnectorConfigConfig

    connector_name: Literal["wordpress"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorWordpressDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorWordpressDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorWrikeDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorWrikeDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorWrikeDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorWrikeDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorWrikeDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorWrikeDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorWrikeDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorWrikeDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorWrikeDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorWrikeDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorWrikeDiscriminatedConnectorConfigConfig

    connector_name: Literal["wrike"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorWrikeDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorWrikeDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorXeroDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorXeroDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorXeroDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorXeroDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorXeroDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorXeroDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorXeroDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorXeroDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorXeroDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorXeroDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorXeroDiscriminatedConnectorConfigConfig

    connector_name: Literal["xero"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorXeroDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorXeroDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorYahooDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorYahooDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorYahooDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorYahooDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorYahooDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorYahooDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorYahooDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorYahooDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorYahooDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorYahooDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorYahooDiscriminatedConnectorConfigConfig

    connector_name: Literal["yahoo"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorYahooDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorYahooDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorYandexDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorYandexDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorYandexDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorYandexDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorYandexDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorYandexDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorYandexDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorYandexDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorYandexDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorYandexDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorYandexDiscriminatedConnectorConfigConfig

    connector_name: Literal["yandex"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorYandexDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorYandexDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorZapierDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorZapierDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorZapierDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorZapierDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorZapierDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorZapierDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorZapierDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorZapierDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorZapierDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorZapierDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorZapierDiscriminatedConnectorConfigConfig

    connector_name: Literal["zapier"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorZapierDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorZapierDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorZendeskDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorZendeskDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorZendeskDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorZendeskDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorZendeskDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorZendeskDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorZendeskDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorZendeskDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorZendeskDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorZendeskDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorZendeskDiscriminatedConnectorConfigConfig

    connector_name: Literal["zendesk"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorZendeskDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorZendeskDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorZenefitsDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorZenefitsDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorZenefitsDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorZenefitsDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorZenefitsDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorZenefitsDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorZenefitsDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorZenefitsDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorZenefitsDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorZenefitsDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorZenefitsDiscriminatedConnectorConfigConfig

    connector_name: Literal["zenefits"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorZenefitsDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorZenefitsDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorZohoDeskDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorZohoDeskDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorZohoDeskDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorZohoDeskDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorZohoDeskDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorZohoDeskDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorZohoDeskDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorZohoDeskDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorZohoDeskDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorZohoDeskDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorZohoDeskDiscriminatedConnectorConfigConfig

    connector_name: Literal["zoho-desk"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorZohoDeskDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorZohoDeskDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorZohoDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorZohoDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorZohoDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorZohoDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorZohoDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorZohoDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorZohoDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorZohoDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorZohoDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorZohoDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorZohoDiscriminatedConnectorConfigConfig

    connector_name: Literal["zoho"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorZohoDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorZohoDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorZoomDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: Optional[str] = None

    client_secret: Optional[str] = None

    redirect_uri: Optional[str] = None
    """Custom redirect URI"""

    scopes: Optional[List[str]] = None


class ConnectorZoomDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: Optional[ConnectorZoomDiscriminatedConnectorConfigConfigOAuth] = None
    """Base oauth configuration for the connector"""


class ConnectorZoomDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorZoomDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorZoomDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorZoomDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorZoomDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorZoomDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorZoomDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorZoomDiscriminatedConnectorConfigConfig

    connector_name: Literal["zoom"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorZoomDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorZoomDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorAirtableDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorAirtableDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorAirtableDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorAirtableDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorAirtableDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorAirtableDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorAirtableDiscriminatedConnectorConfig(BaseModel):
    config: object

    connector_name: Literal["airtable"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorAirtableDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorAirtableDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorApolloDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorApolloDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorApolloDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorApolloDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorApolloDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorApolloDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorApolloDiscriminatedConnectorConfig(BaseModel):
    config: object

    connector_name: Literal["apollo"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorApolloDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorApolloDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorBrexDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: str = FieldInfo(alias="clientId")

    client_secret: str = FieldInfo(alias="clientSecret")


class ConnectorBrexDiscriminatedConnectorConfigConfig(BaseModel):
    apikey_auth: Optional[bool] = FieldInfo(alias="apikeyAuth", default=None)
    """API key auth support"""

    oauth: Optional[ConnectorBrexDiscriminatedConnectorConfigConfigOAuth] = None
    """Configure oauth"""


class ConnectorBrexDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorBrexDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorBrexDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorBrexDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorBrexDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorBrexDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorBrexDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorBrexDiscriminatedConnectorConfigConfig

    connector_name: Literal["brex"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorBrexDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorBrexDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorCodaDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorCodaDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorCodaDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorCodaDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorCodaDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorCodaDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorCodaDiscriminatedConnectorConfig(BaseModel):
    config: object

    connector_name: Literal["coda"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorCodaDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorCodaDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorFinchDiscriminatedConnectorConfigConfig(BaseModel):
    client_id: str

    client_secret: str

    products: List[
        Literal["company", "directory", "individual", "ssn", "employment", "payment", "pay_statement", "benefits"]
    ]
    """
    Finch products to access, @see
    https://developer.tryfinch.com/api-reference/development-guides/Permissions
    """

    api_version: Optional[str] = None
    """Finch API version"""


class ConnectorFinchDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorFinchDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorFinchDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorFinchDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorFinchDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorFinchDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorFinchDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorFinchDiscriminatedConnectorConfigConfig

    connector_name: Literal["finch"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorFinchDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorFinchDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorFirebaseDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorFirebaseDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorFirebaseDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorFirebaseDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorFirebaseDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorFirebaseDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorFirebaseDiscriminatedConnectorConfig(BaseModel):
    config: object

    connector_name: Literal["firebase"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorFirebaseDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorFirebaseDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorForeceiptDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorForeceiptDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorForeceiptDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorForeceiptDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorForeceiptDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorForeceiptDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorForeceiptDiscriminatedConnectorConfig(BaseModel):
    config: object

    connector_name: Literal["foreceipt"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorForeceiptDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorForeceiptDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorGreenhouseDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorGreenhouseDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorGreenhouseDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorGreenhouseDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorGreenhouseDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorGreenhouseDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorGreenhouseDiscriminatedConnectorConfig(BaseModel):
    config: object

    connector_name: Literal["greenhouse"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorGreenhouseDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorGreenhouseDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorHeronDiscriminatedConnectorConfigConfig(BaseModel):
    api_key: str = FieldInfo(alias="apiKey")


class ConnectorHeronDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorHeronDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorHeronDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorHeronDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorHeronDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorHeronDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorHeronDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorHeronDiscriminatedConnectorConfigConfig

    connector_name: Literal["heron"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorHeronDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorHeronDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorLunchmoneyDiscriminatedConnectorConfigConfig(BaseModel):
    access_token: str = FieldInfo(alias="accessToken")


class ConnectorLunchmoneyDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorLunchmoneyDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorLunchmoneyDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorLunchmoneyDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorLunchmoneyDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorLunchmoneyDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorLunchmoneyDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorLunchmoneyDiscriminatedConnectorConfigConfig

    connector_name: Literal["lunchmoney"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorLunchmoneyDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorLunchmoneyDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorMercuryDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: str = FieldInfo(alias="clientId")

    client_secret: str = FieldInfo(alias="clientSecret")


class ConnectorMercuryDiscriminatedConnectorConfigConfig(BaseModel):
    apikey_auth: Optional[bool] = FieldInfo(alias="apikeyAuth", default=None)
    """API key auth support"""

    oauth: Optional[ConnectorMercuryDiscriminatedConnectorConfigConfigOAuth] = None
    """Configure oauth"""


class ConnectorMercuryDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorMercuryDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorMercuryDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorMercuryDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorMercuryDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorMercuryDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorMercuryDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorMercuryDiscriminatedConnectorConfigConfig

    connector_name: Literal["mercury"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorMercuryDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorMercuryDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorMergeDiscriminatedConnectorConfigConfig(BaseModel):
    api_key: str = FieldInfo(alias="apiKey")


class ConnectorMergeDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorMergeDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorMergeDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorMergeDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorMergeDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorMergeDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorMergeDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorMergeDiscriminatedConnectorConfigConfig

    connector_name: Literal["merge"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorMergeDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorMergeDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorMootaDiscriminatedConnectorConfigConfig(BaseModel):
    token: str


class ConnectorMootaDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorMootaDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorMootaDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorMootaDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorMootaDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorMootaDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorMootaDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorMootaDiscriminatedConnectorConfigConfig

    connector_name: Literal["moota"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorMootaDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorMootaDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorOnebrickDiscriminatedConnectorConfigConfig(BaseModel):
    client_id: str = FieldInfo(alias="clientId")

    client_secret: str = FieldInfo(alias="clientSecret")

    env_name: Literal["sandbox", "production"] = FieldInfo(alias="envName")

    public_token: str = FieldInfo(alias="publicToken")

    access_token: Optional[str] = FieldInfo(alias="accessToken", default=None)

    redirect_url: Optional[str] = FieldInfo(alias="redirectUrl", default=None)


class ConnectorOnebrickDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorOnebrickDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorOnebrickDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorOnebrickDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorOnebrickDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorOnebrickDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorOnebrickDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorOnebrickDiscriminatedConnectorConfigConfig

    connector_name: Literal["onebrick"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorOnebrickDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorOnebrickDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorOpenledgerDiscriminatedConnectorConfigConfig(BaseModel):
    api_url: str
    """API endpoint"""

    developer_id: str
    """Your developer ID for authentication"""

    developer_secret: str
    """Your developer secret"""

    environment: Literal["development", "production"]
    """Switch to "production" for live data"""


class ConnectorOpenledgerDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorOpenledgerDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorOpenledgerDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorOpenledgerDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorOpenledgerDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorOpenledgerDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorOpenledgerDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorOpenledgerDiscriminatedConnectorConfigConfig

    connector_name: Literal["openledger"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorOpenledgerDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorOpenledgerDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorPlaidDiscriminatedConnectorConfigConfigCredentials(BaseModel):
    client_id: str = FieldInfo(alias="clientId")

    client_secret: str = FieldInfo(alias="clientSecret")


class ConnectorPlaidDiscriminatedConnectorConfigConfig(BaseModel):
    client_name: str = FieldInfo(alias="clientName")
    """
    The name of your application, as it should be displayed in Link. Maximum length
    of 30 characters. If a value longer than 30 characters is provided, Link will
    display "This Application" instead.
    """

    country_codes: List[
        Literal["US", "GB", "ES", "NL", "FR", "IE", "CA", "DE", "IT", "PL", "DK", "NO", "SE", "EE", "LT", "LV"]
    ] = FieldInfo(alias="countryCodes")

    env_name: Literal["sandbox", "development", "production"] = FieldInfo(alias="envName")

    language: Literal["en", "fr", "es", "nl", "de"]

    products: List[
        Literal[
            "assets",
            "auth",
            "balance",
            "identity",
            "investments",
            "liabilities",
            "payment_initiation",
            "identity_verification",
            "transactions",
            "credit_details",
            "income",
            "income_verification",
            "deposit_switch",
            "standing_orders",
            "transfer",
            "employment",
            "recurring_transactions",
        ]
    ]

    credentials: Optional[ConnectorPlaidDiscriminatedConnectorConfigConfigCredentials] = None


class ConnectorPlaidDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorPlaidDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorPlaidDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorPlaidDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorPlaidDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorPlaidDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorPlaidDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorPlaidDiscriminatedConnectorConfigConfig

    connector_name: Literal["plaid"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorPlaidDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorPlaidDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorPostgresDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorPostgresDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorPostgresDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorPostgresDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorPostgresDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorPostgresDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorPostgresDiscriminatedConnectorConfig(BaseModel):
    config: object

    connector_name: Literal["postgres"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorPostgresDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorPostgresDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorRampDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: str = FieldInfo(alias="clientId")

    client_secret: str = FieldInfo(alias="clientSecret")


class ConnectorRampDiscriminatedConnectorConfigConfig(BaseModel):
    oauth: ConnectorRampDiscriminatedConnectorConfigConfigOAuth


class ConnectorRampDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorRampDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorRampDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorRampDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorRampDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorRampDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorRampDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorRampDiscriminatedConnectorConfigConfig

    connector_name: Literal["ramp"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorRampDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorRampDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorSaltedgeDiscriminatedConnectorConfigConfig(BaseModel):
    app_id: str = FieldInfo(alias="appId")

    secret: str

    url: Optional[str] = None


class ConnectorSaltedgeDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorSaltedgeDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorSaltedgeDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorSaltedgeDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorSaltedgeDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorSaltedgeDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorSaltedgeDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorSaltedgeDiscriminatedConnectorConfigConfig

    connector_name: Literal["saltedge"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorSaltedgeDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorSaltedgeDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorSplitwiseDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorSplitwiseDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorSplitwiseDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorSplitwiseDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorSplitwiseDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorSplitwiseDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorSplitwiseDiscriminatedConnectorConfig(BaseModel):
    config: object

    connector_name: Literal["splitwise"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorSplitwiseDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorSplitwiseDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorStripeDiscriminatedConnectorConfigConfigOAuth(BaseModel):
    client_id: str = FieldInfo(alias="clientId")

    client_secret: str = FieldInfo(alias="clientSecret")


class ConnectorStripeDiscriminatedConnectorConfigConfig(BaseModel):
    apikey_auth: Optional[bool] = FieldInfo(alias="apikeyAuth", default=None)
    """API key auth support"""

    oauth: Optional[ConnectorStripeDiscriminatedConnectorConfigConfigOAuth] = None
    """Configure oauth"""


class ConnectorStripeDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorStripeDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorStripeDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorStripeDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorStripeDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorStripeDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorStripeDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorStripeDiscriminatedConnectorConfigConfig

    connector_name: Literal["stripe"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorStripeDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorStripeDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorTellerDiscriminatedConnectorConfigConfig(BaseModel):
    application_id: str = FieldInfo(alias="applicationId")

    token: Optional[str] = None


class ConnectorTellerDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorTellerDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorTellerDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorTellerDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorTellerDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorTellerDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorTellerDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorTellerDiscriminatedConnectorConfigConfig

    connector_name: Literal["teller"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorTellerDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorTellerDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorTogglDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorTogglDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorTogglDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorTogglDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorTogglDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorTogglDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorTogglDiscriminatedConnectorConfig(BaseModel):
    config: object

    connector_name: Literal["toggl"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorTogglDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorTogglDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorTwentyDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorTwentyDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorTwentyDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorTwentyDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorTwentyDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorTwentyDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorTwentyDiscriminatedConnectorConfig(BaseModel):
    config: object

    connector_name: Literal["twenty"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorTwentyDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorTwentyDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorVenmoDiscriminatedConnectorConfigConfigProxy(BaseModel):
    cert: str

    url: str


class ConnectorVenmoDiscriminatedConnectorConfigConfig(BaseModel):
    proxy: Optional[ConnectorVenmoDiscriminatedConnectorConfigConfigProxy] = None

    v1_base_url: Optional[str] = FieldInfo(alias="v1BaseURL", default=None)

    v5_base_url: Optional[str] = FieldInfo(alias="v5BaseURL", default=None)


class ConnectorVenmoDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorVenmoDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorVenmoDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorVenmoDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorVenmoDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorVenmoDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorVenmoDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorVenmoDiscriminatedConnectorConfigConfig

    connector_name: Literal["venmo"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorVenmoDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorVenmoDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorWiseDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorWiseDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorWiseDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorWiseDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorWiseDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorWiseDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorWiseDiscriminatedConnectorConfig(BaseModel):
    config: object

    connector_name: Literal["wise"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorWiseDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorWiseDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


class ConnectorYodleeDiscriminatedConnectorConfigConfigProxy(BaseModel):
    cert: str

    url: str


class ConnectorYodleeDiscriminatedConnectorConfigConfig(BaseModel):
    admin_login_name: str = FieldInfo(alias="adminLoginName")

    client_id: str = FieldInfo(alias="clientId")

    client_secret: str = FieldInfo(alias="clientSecret")

    env_name: Literal["sandbox", "development", "production"] = FieldInfo(alias="envName")

    proxy: Optional[ConnectorYodleeDiscriminatedConnectorConfigConfigProxy] = None

    sandbox_login_name: Optional[str] = FieldInfo(alias="sandboxLoginName", default=None)


class ConnectorYodleeDiscriminatedConnectorConfigConnectorSchemas(BaseModel):
    connect_input: Optional[object] = None

    connect_output: Optional[object] = None

    connection_settings: Optional[object] = None

    connector_config: Optional[object] = None

    integration_data: Optional[object] = None

    pre_connect_input: Optional[object] = None

    webhook_input: Optional[object] = None


class ConnectorYodleeDiscriminatedConnectorConfigConnectorScope(BaseModel):
    scope: str

    description: Optional[str] = None

    display_name: Optional[str] = None


class ConnectorYodleeDiscriminatedConnectorConfigConnector(BaseModel):
    name: str

    auth_type: Optional[Literal["BASIC", "OAUTH1", "OAUTH2", "OAUTH2CC", "API_KEY", "CUSTOM"]] = None

    display_name: Optional[str] = None

    has_openint_credentials: Optional[bool] = None

    logo_url: Optional[str] = None

    openint_allowed_scopes: Optional[List[str]] = None

    openint_default_scopes: Optional[List[str]] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop", "local", "cloud"]]] = None

    required_scopes: Optional[List[str]] = None

    schemas: Optional[ConnectorYodleeDiscriminatedConnectorConfigConnectorSchemas] = None

    scopes: Optional[List[ConnectorYodleeDiscriminatedConnectorConfigConnectorScope]] = None

    stage: Optional[Literal["alpha", "beta", "ga", "hidden"]] = None


class ConnectorYodleeDiscriminatedConnectorConfigIntegrations(BaseModel):
    id: str

    connector_name: Literal[
        "accelo",
        "acme-oauth2",
        "adobe",
        "adyen",
        "aircall",
        "airtable",
        "amazon",
        "apaleo",
        "apollo",
        "asana",
        "attio",
        "auth0",
        "autodesk",
        "aws",
        "bamboohr",
        "basecamp",
        "battlenet",
        "bigcommerce",
        "bitbucket",
        "bitly",
        "blackbaud",
        "boldsign",
        "box",
        "braintree",
        "brex",
        "calendly",
        "clickup",
        "close",
        "coda",
        "confluence",
        "contentful",
        "contentstack",
        "copper",
        "coros",
        "datev",
        "deel",
        "dialpad",
        "digitalocean",
        "discord",
        "docusign",
        "dropbox",
        "ebay",
        "egnyte",
        "envoy",
        "eventbrite",
        "exist",
        "facebook",
        "factorial",
        "figma",
        "finch",
        "firebase",
        "fitbit",
        "foreceipt",
        "fortnox",
        "freshbooks",
        "front",
        "github",
        "gitlab",
        "gong",
        "google-calendar",
        "google-docs",
        "google-drive",
        "google-mail",
        "google-sheet",
        "gorgias",
        "grain",
        "greenhouse",
        "gumroad",
        "gusto",
        "harvest",
        "heron",
        "highlevel",
        "hubspot",
        "instagram",
        "intercom",
        "jira",
        "keap",
        "lever",
        "linear",
        "linkedin",
        "linkhut",
        "lunchmoney",
        "mailchimp",
        "mercury",
        "merge",
        "miro",
        "monday",
        "moota",
        "mural",
        "namely",
        "nationbuilder",
        "netsuite",
        "notion",
        "odoo",
        "okta",
        "onebrick",
        "openledger",
        "osu",
        "oura",
        "outreach",
        "pagerduty",
        "pandadoc",
        "payfit",
        "paypal",
        "pennylane",
        "pinterest",
        "pipedrive",
        "plaid",
        "podium",
        "postgres",
        "productboard",
        "qualtrics",
        "quickbooks",
        "ramp",
        "reddit",
        "sage",
        "salesforce",
        "salesloft",
        "saltedge",
        "segment",
        "servicem8",
        "servicenow",
        "sharepoint",
        "shopify",
        "signnow",
        "slack",
        "smartsheet",
        "snowflake",
        "splitwise",
        "spotify",
        "squarespace",
        "squareup",
        "stackexchange",
        "strava",
        "stripe",
        "teamwork",
        "teller",
        "ticktick",
        "timely",
        "todoist",
        "toggl",
        "tremendous",
        "tsheetsteam",
        "tumblr",
        "twenty",
        "twinfield",
        "twitch",
        "twitter",
        "typeform",
        "uber",
        "venmo",
        "vimeo",
        "wakatime",
        "wealthbox",
        "webflow",
        "whoop",
        "wise",
        "wordpress",
        "wrike",
        "xero",
        "yahoo",
        "yandex",
        "yodlee",
        "zapier",
        "zendesk",
        "zenefits",
        "zoho",
        "zoho-desk",
        "zoom",
    ]

    created_at: str

    external: Union[str, float, bool, Dict[str, object], List[object], None] = None

    name: str

    standard: Union[str, float, bool, Dict[str, object], List[object], None] = None

    updated_at: str

    auth_type: Optional[str] = None

    category: Optional[str] = None

    logo_url: Optional[str] = None

    platforms: Optional[List[Literal["web", "mobile", "desktop"]]] = None

    stage: Optional[Literal["alpha", "beta", "ga"]] = None

    version: Optional[str] = None


class ConnectorYodleeDiscriminatedConnectorConfig(BaseModel):
    config: ConnectorYodleeDiscriminatedConnectorConfigConfig

    connector_name: Literal["yodlee"]

    id: Optional[str] = None

    connection_count: Optional[float] = None

    connector: Optional[ConnectorYodleeDiscriminatedConnectorConfigConnector] = None

    created_at: Optional[str] = None

    disabled: Optional[bool] = None

    display_name: Optional[str] = None

    integrations: Optional[Dict[str, ConnectorYodleeDiscriminatedConnectorConfigIntegrations]] = None

    metadata: Optional[Dict[str, object]] = None
    """
    JSON object can can be used to associate arbitrary metadata to avoid needing a
    separate 1-1 table just for simple key values in your application. During
    updates this object will be shallowly merged
    """

    org_id: Optional[str] = None

    updated_at: Optional[str] = None


ListConnectionConfigsResponse: TypeAlias = Union[
    ConnectorAcceloDiscriminatedConnectorConfig,
    ConnectorAcmeOauth2DiscriminatedConnectorConfig,
    ConnectorAdobeDiscriminatedConnectorConfig,
    ConnectorAdyenDiscriminatedConnectorConfig,
    ConnectorAircallDiscriminatedConnectorConfig,
    ConnectorAmazonDiscriminatedConnectorConfig,
    ConnectorApaleoDiscriminatedConnectorConfig,
    ConnectorAsanaDiscriminatedConnectorConfig,
    ConnectorAttioDiscriminatedConnectorConfig,
    ConnectorAuth0DiscriminatedConnectorConfig,
    ConnectorAutodeskDiscriminatedConnectorConfig,
    ConnectorAwsDiscriminatedConnectorConfig,
    ConnectorBamboohrDiscriminatedConnectorConfig,
    ConnectorBasecampDiscriminatedConnectorConfig,
    ConnectorBattlenetDiscriminatedConnectorConfig,
    ConnectorBigcommerceDiscriminatedConnectorConfig,
    ConnectorBitbucketDiscriminatedConnectorConfig,
    ConnectorBitlyDiscriminatedConnectorConfig,
    ConnectorBlackbaudDiscriminatedConnectorConfig,
    ConnectorBoldsignDiscriminatedConnectorConfig,
    ConnectorBoxDiscriminatedConnectorConfig,
    ConnectorBraintreeDiscriminatedConnectorConfig,
    ConnectorCalendlyDiscriminatedConnectorConfig,
    ConnectorClickupDiscriminatedConnectorConfig,
    ConnectorCloseDiscriminatedConnectorConfig,
    ConnectorConfluenceDiscriminatedConnectorConfig,
    ConnectorContentfulDiscriminatedConnectorConfig,
    ConnectorContentstackDiscriminatedConnectorConfig,
    ConnectorCopperDiscriminatedConnectorConfig,
    ConnectorCorosDiscriminatedConnectorConfig,
    ConnectorDatevDiscriminatedConnectorConfig,
    ConnectorDeelDiscriminatedConnectorConfig,
    ConnectorDialpadDiscriminatedConnectorConfig,
    ConnectorDigitaloceanDiscriminatedConnectorConfig,
    ConnectorDiscordDiscriminatedConnectorConfig,
    ConnectorDocusignDiscriminatedConnectorConfig,
    ConnectorDropboxDiscriminatedConnectorConfig,
    ConnectorEbayDiscriminatedConnectorConfig,
    ConnectorEgnyteDiscriminatedConnectorConfig,
    ConnectorEnvoyDiscriminatedConnectorConfig,
    ConnectorEventbriteDiscriminatedConnectorConfig,
    ConnectorExistDiscriminatedConnectorConfig,
    ConnectorFacebookDiscriminatedConnectorConfig,
    ConnectorFactorialDiscriminatedConnectorConfig,
    ConnectorFigmaDiscriminatedConnectorConfig,
    ConnectorFitbitDiscriminatedConnectorConfig,
    ConnectorFortnoxDiscriminatedConnectorConfig,
    ConnectorFreshbooksDiscriminatedConnectorConfig,
    ConnectorFrontDiscriminatedConnectorConfig,
    ConnectorGitHubDiscriminatedConnectorConfig,
    ConnectorGitlabDiscriminatedConnectorConfig,
    ConnectorGongDiscriminatedConnectorConfig,
    ConnectorGoogleCalendarDiscriminatedConnectorConfig,
    ConnectorGoogleDocsDiscriminatedConnectorConfig,
    ConnectorGoogleDriveDiscriminatedConnectorConfig,
    ConnectorGoogleMailDiscriminatedConnectorConfig,
    ConnectorGoogleSheetDiscriminatedConnectorConfig,
    ConnectorGorgiasDiscriminatedConnectorConfig,
    ConnectorGrainDiscriminatedConnectorConfig,
    ConnectorGumroadDiscriminatedConnectorConfig,
    ConnectorGustoDiscriminatedConnectorConfig,
    ConnectorHarvestDiscriminatedConnectorConfig,
    ConnectorHighlevelDiscriminatedConnectorConfig,
    ConnectorHubspotDiscriminatedConnectorConfig,
    ConnectorInstagramDiscriminatedConnectorConfig,
    ConnectorIntercomDiscriminatedConnectorConfig,
    ConnectorJiraDiscriminatedConnectorConfig,
    ConnectorKeapDiscriminatedConnectorConfig,
    ConnectorLeverDiscriminatedConnectorConfig,
    ConnectorLinearDiscriminatedConnectorConfig,
    ConnectorLinkedinDiscriminatedConnectorConfig,
    ConnectorLinkhutDiscriminatedConnectorConfig,
    ConnectorMailchimpDiscriminatedConnectorConfig,
    ConnectorMiroDiscriminatedConnectorConfig,
    ConnectorMondayDiscriminatedConnectorConfig,
    ConnectorMuralDiscriminatedConnectorConfig,
    ConnectorNamelyDiscriminatedConnectorConfig,
    ConnectorNationbuilderDiscriminatedConnectorConfig,
    ConnectorNetsuiteDiscriminatedConnectorConfig,
    ConnectorNotionDiscriminatedConnectorConfig,
    ConnectorOdooDiscriminatedConnectorConfig,
    ConnectorOktaDiscriminatedConnectorConfig,
    ConnectorOsuDiscriminatedConnectorConfig,
    ConnectorOuraDiscriminatedConnectorConfig,
    ConnectorOutreachDiscriminatedConnectorConfig,
    ConnectorPagerdutyDiscriminatedConnectorConfig,
    ConnectorPandadocDiscriminatedConnectorConfig,
    ConnectorPayfitDiscriminatedConnectorConfig,
    ConnectorPaypalDiscriminatedConnectorConfig,
    ConnectorPennylaneDiscriminatedConnectorConfig,
    ConnectorPinterestDiscriminatedConnectorConfig,
    ConnectorPipedriveDiscriminatedConnectorConfig,
    ConnectorPodiumDiscriminatedConnectorConfig,
    ConnectorProductboardDiscriminatedConnectorConfig,
    ConnectorQualtricsDiscriminatedConnectorConfig,
    ConnectorQuickbooksDiscriminatedConnectorConfig,
    ConnectorRedditDiscriminatedConnectorConfig,
    ConnectorSageDiscriminatedConnectorConfig,
    ConnectorSalesforceDiscriminatedConnectorConfig,
    ConnectorSalesloftDiscriminatedConnectorConfig,
    ConnectorSegmentDiscriminatedConnectorConfig,
    ConnectorServicem8DiscriminatedConnectorConfig,
    ConnectorServicenowDiscriminatedConnectorConfig,
    ConnectorSharepointDiscriminatedConnectorConfig,
    ConnectorShopifyDiscriminatedConnectorConfig,
    ConnectorSignnowDiscriminatedConnectorConfig,
    ConnectorSlackDiscriminatedConnectorConfig,
    ConnectorSmartsheetDiscriminatedConnectorConfig,
    ConnectorSnowflakeDiscriminatedConnectorConfig,
    ConnectorSpotifyDiscriminatedConnectorConfig,
    ConnectorSquarespaceDiscriminatedConnectorConfig,
    ConnectorSquareupDiscriminatedConnectorConfig,
    ConnectorStackexchangeDiscriminatedConnectorConfig,
    ConnectorStravaDiscriminatedConnectorConfig,
    ConnectorTeamworkDiscriminatedConnectorConfig,
    ConnectorTicktickDiscriminatedConnectorConfig,
    ConnectorTimelyDiscriminatedConnectorConfig,
    ConnectorTodoistDiscriminatedConnectorConfig,
    ConnectorTremendousDiscriminatedConnectorConfig,
    ConnectorTsheetsteamDiscriminatedConnectorConfig,
    ConnectorTumblrDiscriminatedConnectorConfig,
    ConnectorTwinfieldDiscriminatedConnectorConfig,
    ConnectorTwitchDiscriminatedConnectorConfig,
    ConnectorTwitterDiscriminatedConnectorConfig,
    ConnectorTypeformDiscriminatedConnectorConfig,
    ConnectorUberDiscriminatedConnectorConfig,
    ConnectorVimeoDiscriminatedConnectorConfig,
    ConnectorWakatimeDiscriminatedConnectorConfig,
    ConnectorWealthboxDiscriminatedConnectorConfig,
    ConnectorWebflowDiscriminatedConnectorConfig,
    ConnectorWhoopDiscriminatedConnectorConfig,
    ConnectorWordpressDiscriminatedConnectorConfig,
    ConnectorWrikeDiscriminatedConnectorConfig,
    ConnectorXeroDiscriminatedConnectorConfig,
    ConnectorYahooDiscriminatedConnectorConfig,
    ConnectorYandexDiscriminatedConnectorConfig,
    ConnectorZapierDiscriminatedConnectorConfig,
    ConnectorZendeskDiscriminatedConnectorConfig,
    ConnectorZenefitsDiscriminatedConnectorConfig,
    ConnectorZohoDeskDiscriminatedConnectorConfig,
    ConnectorZohoDiscriminatedConnectorConfig,
    ConnectorZoomDiscriminatedConnectorConfig,
    ConnectorAirtableDiscriminatedConnectorConfig,
    ConnectorApolloDiscriminatedConnectorConfig,
    ConnectorBrexDiscriminatedConnectorConfig,
    ConnectorCodaDiscriminatedConnectorConfig,
    ConnectorFinchDiscriminatedConnectorConfig,
    ConnectorFirebaseDiscriminatedConnectorConfig,
    ConnectorForeceiptDiscriminatedConnectorConfig,
    ConnectorGreenhouseDiscriminatedConnectorConfig,
    ConnectorHeronDiscriminatedConnectorConfig,
    ConnectorLunchmoneyDiscriminatedConnectorConfig,
    ConnectorMercuryDiscriminatedConnectorConfig,
    ConnectorMergeDiscriminatedConnectorConfig,
    ConnectorMootaDiscriminatedConnectorConfig,
    ConnectorOnebrickDiscriminatedConnectorConfig,
    ConnectorOpenledgerDiscriminatedConnectorConfig,
    ConnectorPlaidDiscriminatedConnectorConfig,
    ConnectorPostgresDiscriminatedConnectorConfig,
    ConnectorRampDiscriminatedConnectorConfig,
    ConnectorSaltedgeDiscriminatedConnectorConfig,
    ConnectorSplitwiseDiscriminatedConnectorConfig,
    ConnectorStripeDiscriminatedConnectorConfig,
    ConnectorTellerDiscriminatedConnectorConfig,
    ConnectorTogglDiscriminatedConnectorConfig,
    ConnectorTwentyDiscriminatedConnectorConfig,
    ConnectorVenmoDiscriminatedConnectorConfig,
    ConnectorWiseDiscriminatedConnectorConfig,
    ConnectorYodleeDiscriminatedConnectorConfig,
]
