[project]
name = "registry-api-v2-client"
version = "1.2.0"
description = "Docker Registry API v2 client with tar file utilities"
readme = "README.md"
authors = [
    { name = "Kang Hee Yong", email = "cagojeiger@naver.com" }
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Software Distribution",
    "Typing :: Typed",
]
requires-python = ">=3.11"
dependencies = [
    "aiofiles>=24.1.0",
    "aiohttp>=3.12.4",
    "pydantic>=2.11.5",
    "requests>=2.32.3",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "pre-commit>=3.0.0",
    "python-semantic-release>=9.0.0",
    "build>=1.0.0",
    "twine>=5.0.0",
]

[project.urls]
Homepage = "https://github.com/kangheeyong/registry-api-v2-client"
Repository = "https://github.com/kangheeyong/registry-api-v2-client"
Documentation = "https://github.com/kangheeyong/registry-api-v2-client/tree/main/docs"
Issues = "https://github.com/kangheeyong/registry-api-v2-client/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
include = [
    "src/registry_api_v2_client",
    "README.md",
    "LICENSE",
]

[tool.hatch.build.targets.wheel]
packages = ["src/registry_api_v2_client"]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
pythonpath = ["src"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=registry_api_v2_client",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["src/registry_api_v2_client"]
branch = true
parallel = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "@abstractmethod",
]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
no_implicit_reexport = true
namespace_packages = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = ["aiofiles.*"]
ignore_missing_imports = true

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "C4",   # flake8-comprehensions
    "B",    # flake8-bugbear
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG", "S101"]

[tool.black]
line-length = 88
target-version = ["py311", "py312"]

[tool.isort]
profile = "black"
line_length = 88

[dependency-groups]
dev = [
    "mypy>=1.16.0",
    "pre-commit>=4.2.0",
    "pytest>=8.3.5",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.1.1",
    "ruff>=0.11.12",
    "types-requests>=2.32.0.20250515",
]

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
version_variables = ["src/registry_api_v2_client/__init__.py:__version__"]
branch = "main"
changelog_file = "CHANGELOG.md"
upload_to_vcs_release = true
build_command = "python -m build"

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = []

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false
