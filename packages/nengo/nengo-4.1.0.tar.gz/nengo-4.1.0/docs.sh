#!/usr/bin/env bash

# Automatically generated by nengo-bones, do not edit this file directly

NAME=$0
COMMAND=$1
STATUS=0  # used to exit with non-zero status if any command fails
# shellcheck disable=SC2034
SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)

export JOB_NUMBER="$GITHUB_RUN_ID-$GITHUB_RUN_ATTEMPT"
if [[ -n "$JOB_SUFFIX" ]]; then
    export JOB_NUMBER="$JOB_NUMBER-$JOB_SUFFIX"
fi
export GIT_BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}"
if [[ "$GITHUB_REF_TYPE" == "tag" ]]; then
    export GIT_TAG="$GIT_BRANCH"
fi

exe() {
    echo "\$ $*";
    # remove empty spaces from args
    args=( "$@" )
    for i in "${!args[@]}"; do
      [ -n "${args[$i]}" ] || unset "args[$i]"
    done
    "${args[@]}" || { echo -e "\033[1;31mCOMMAND '${args[0]}' FAILED\033[0m"; STATUS=1; }
}

if [[ ! -e nengo ]]; then
    echo "Run this script from the root directory of this repository"
    exit 1
fi

if [[ "$COMMAND" == "install" ]]; then
    exe pip install "$NUMPY" "scipy" "matplotlib"

    exe pip install \
        "jupyter>=1.0.0" \
        "nbsphinx>=0.8.11" \
        "numpydoc>=1.4.0" \
        "git+https://github.com/nengo/nengo-sphinx-theme#egg=nengo-sphinx-theme"
    exe pip install -e ".[docs]"
elif [[ "$COMMAND" == "script" ]]; then

    if [ -d "../nengo-docs" ]; then exe rm -Rf ../nengo-docs; fi
    exe git clone -b gh-pages-release "https://$GH_TOKEN@github.com/nengo/nengo.git" ../nengo-docs
    RELEASES=$(find ../nengo-docs -maxdepth 1 -type d -name "v[0-9].*" -printf "%f,")

    FAILED_FILE="$JOB_NUMBER.failed"
    rm -f "$FAILED_FILE"
    if [[ "$GIT_BRANCH" == "$GIT_TAG" ]]; then
        RELEASES="$RELEASES$GIT_TAG"
        sphinx-build -b html docs ../nengo-docs/"$GIT_TAG" -vW --keep-going -A building_version="$GIT_TAG" -A releases="$RELEASES" || touch "$FAILED_FILE"
    else
        sphinx-build -b html docs ../nengo-docs -vW --keep-going -A building_version=latest -A releases="$RELEASES" || touch "$FAILED_FILE"
    fi

    if [[ -e "$FAILED_FILE" ]]; then
        echo -e "\033[1;31mCOMMAND 'sphinx-build' FAILED\033[0m"
        STATUS=1
    fi

    exe sphinx-build -b linkcheck -vW -D nbsphinx_execute=never docs docs/_build
    exe sphinx-build -b doctest -vW -D nbsphinx_execute=never docs docs/_build

elif [[ "$COMMAND" == "after_success" ]]; then
    :
elif [[ "$COMMAND" == "after_failure" ]]; then
    :
elif [[ "$COMMAND" == "after_script" ]]; then
    FAILED_FILE="$JOB_NUMBER.failed"
    if [[ -e "$FAILED_FILE" ]]; then
        echo "Skipping docs upload because build failed"
        exit 1
    fi

    if [[ "$GITHUB_EVENT_NAME" == "schedule" ]]; then
        echo "Skipping docs upload because this is a cron build"
        exit 0
    fi

    cd ../nengo-docs || exit
    git config --global user.email "info@appliedbrainresearch.com"
    git config --global user.name "NengoBones"
    git add --all

    if [[ "$GIT_BRANCH" == "$GIT_TAG" ]]; then
        exe git commit -m "Documentation for release $GIT_TAG"
        exe git push -q "https://$GH_TOKEN@github.com/nengo/nengo.git" gh-pages-release
    elif [[ "$GIT_BRANCH" == "main" ]]; then
        exe git commit -m "Last update at $(date '+%Y-%m-%d %T')"
        exe git push -fq "https://$GH_TOKEN@github.com/nengo/nengo.git" gh-pages-release:gh-pages
    else
        exe git commit -m "Documentation for branch $GIT_BRANCH"
        exe git push -fq "https://$GH_TOKEN@github.com/nengo/nengo.git" gh-pages-release:gh-pages-test
    fi
elif [[ -z "$COMMAND" ]]; then
    echo "$NAME requires a command like 'install' or 'script'"
else
    echo "$NAME does not define $COMMAND"
fi

exit "$STATUS"
