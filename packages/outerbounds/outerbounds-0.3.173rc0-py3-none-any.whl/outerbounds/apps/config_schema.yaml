
title: Outerbounds App Configuration Schema
description: |
  Schema for defining Outerbounds Apps configuration. This schema is what we will end up using on the CLI/programmatic interface.
  All the properties in this schema will then translate into an IR that will have resolved information from the
version: 1.0.0
type: object
required:
  - name
  - port
properties:
  name: # Only used in `deploy` command
    allow_union: true # Allow overriding name from the CLI.
    type: string
    description: The name of the app to deploy.
    maxLength: 20 # todo: check if we should allow a larger length.
    example: "myapp"
  port: # Only used in `deploy` command
    allow_union: false
    type: integer
    description: Port where the app is hosted. When deployed this will be port on which we will deploy the app.
    minimum: 1
    maximum: 65535
    example: 8000
  tags: # Only used in `deploy` command
    allow_union: true
    type: array
    description: The tags of the app to deploy.
    items:
      type: string
    example: ["production", "v1.0"]
  image: # Only used in `deploy` command
    allow_union: true # We will overrwite the image if specified on the CLI.
    type: string
    description: The Docker image to deploy with the App.
    example: "python:3.10-slim"
  secrets: # Used in `run` command
    allow_union: true
    type: array
    description: Outerbounds integrations to attach to the app. You can use the value you set in the `@secrets` decorator in your code.
    items:
      type: string
    example: ["outerbounds.hf-token"]
  environment: # Used in `run` command
    # Todo: So this part might not be best on the CLI. We should probably have a better way to handle this.
    # In simplicity, we can just JSON dump anything that looks like a dict/list/
    allow_union: true
    type: object
    description: Environment variables to deploy with the App.
    additionalProperties:
      oneOf:
        - type: string
        - type: number
        - type: boolean
        - type: object
        - type: array # When users give arrays, or objects, we need to JSON dump them. Users need to be aware of this.
    example:
      DEBUG: true
      DATABASE_CONFIG: {"host": "localhost", "port": 5432}
      ALLOWED_ORIGINS: ["http://localhost:3000", "https://myapp.com"]
  dependencies: # Used in `run` command
    allow_union: false
    type: object
    description: |
      The dependencies to attach to the app. Only one of the properties can be specified.
    properties:
      from_requirements_file:
        type: string
        description: The path to the requirements.txt file to attach to the app.
        example: "requirements.txt"
      from_pyproject_toml:
        type: string
        description: The path to the pyproject.toml file to attach to the app.
        example: "pyproject.toml"
      python:
        type: string
        description: |
          The Python version to use for the app.
        example: "3.10"
      pypi:
        type: object
        description: |
          A dictionary of pypi dependencies to attach to the app.
          The key is the package name and the value is the version.
        example:
          numpy: 1.23.0
          pandas: ""
      conda:
        type: object
        description: |
          A dictionary of pypi dependencies to attach to the app.
          The key is the package name and the value is the version.
        example:
          numpy: 1.23.0
          pandas: ""
  package:
    allow_union: false
    type: object
    description: |
      Configurations associated with packaging the app.
    properties:
      src_path:
        type: string
        description: The path to the source code to deploy with the App.
        example: "./"
      suffixes:
        type: array
        description: |
          A list of suffixes to add to the source code to deploy with the App.
        items:
          type: string
        example: [".py", ".ipynb"]

  commands: # Used in `run` command
    allow_union: false
    type: array
    description: A list of commands to run the app with. Cannot be configured from the CLI. Only used in `run` command.
    items:
      type: string
    example: ["python app.py", "python app.py --foo bar"]
  resources: # Only used in `deploy` command
    allow_union: true # You can override CPU/Memory/GPU/Storage from the CLI.
    type: object
    properties:
      cpu:
        type: string
        description: CPU resource request and limit.
        example: "500m"
        default: "1"
      memory:
        type: string
        description: Memory resource request and limit.
        example: "512Mi"
        default: "4Gi"
      gpu:
        type: string
        description: GPU resource request and limit.
        example: "1"
      storage:
        type: string
        description: Storage resource request and limit.
        example: "1Gi"
        default: "10Gi"
  health_check: # Can be used in `run` command
    type: object
    # `allow_union` property means that any object in this field will be done a union with the config file if something is provided on commanline.
    # If it is set to false, then we should throw an exception if the CLI is trying to override something specified in the config file.
    # We will only allow unions in certains options. The rest will not allow any unions and only need to be specified in one place.
    allow_union: false
    properties:
      enabled:
        type: boolean
        description: Whether to enable health checks.
        example: true
        default: false
      path:
        type: string
        description: The path for health checks.
        example: "/health"
      initial_delay_seconds:
        type: integer
        description: Number of seconds to wait before performing the first health check.
        example: 10
      period_seconds:
        type: integer
        description: How often to perform the health check.
        example: 30
  compute_pools: # Only used in `deploy` command
    allow_union: true
    type: array
    description: |
      A list of compute pools to deploy the app to.
    items:
      type: string
    example: ["default", "large"]
  auth: # Only used in `deploy` command
    allow_union: false
    type: object
    description: |
      Auth related configurations.
    properties:
      type:
        type: string
        description: |
          The type of authentication to use for the app.
        enum: [API, SSO]
      public:
        type: boolean
        description: |
          Whether the app is public or not.
        default: true
      # There is an allowed perimeters property
      # But that needs a little more thought on how
      # to expose.
